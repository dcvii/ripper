==> failed_tevaQA12G_CUSTOMER_ORA_csv_export.sql <==
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from CUSTOMER_ORA.MARKET) where table_schema = 'CUSTOMER_ORA' and table_name = 'MARKET';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from CUSTOMER_ORA.PRODUCT) where table_schema = 'CUSTOMER_ORA' and table_name = 'PRODUCT';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from CUSTOMER_ORA.PRODUCT_NDC) where table_schema = 'CUSTOMER_ORA' and table_name = 'PRODUCT_NDC';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from CUSTOMER_ORA.PRODUCT_PRICE) where table_schema = 'CUSTOMER_ORA' and table_name = 'PRODUCT_PRICE';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from CUSTOMER_ORA.MARKET_PRODUCT) where table_schema = 'CUSTOMER_ORA' and table_name = 'MARKET_PRODUCT';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from CUSTOMER_ORA.VENDOR) where table_schema = 'CUSTOMER_ORA' and table_name = 'VENDOR';
==> failed_tevaQA12G_CUSTOMER_ORA_ddl_export.sql <==



CREATE TABLE CUSTOMER_ORA.MARKET
(
    MARKET_ID int DEFAULT nextval('customer', 'market_seq'),
    NAME varchar(75),
    VENDOR_ID int,
    MARKET_CODE varchar(10),
    MARKET_TYPE varchar(10),
    CREATE_USER varchar(30),
    CREATE_DATE date DEFAULT "sysdate"(),
    UPDATE_USER varchar(30),
    UPDATE_DATE date,
    ACTIVE char(1) DEFAULT 'Y'
);


CREATE TABLE CUSTOMER_ORA.MARKET_PRODUCT
(
    MARKET_PRODUCT_ID int DEFAULT nextval('customer', 'market_product_seq'),
    MARKET_ID int,
    PRODUCT_ID int,
    PARENT_PRODUCT_ID int,
    FIRST_VALID_DATE timestamp DEFAULT "sysdate"(),
    LAST_VALID_DATE timestamp DEFAULT to_date('12312050', 'MMDDYYYY'),
    DATA_PERIOD_START timestamp DEFAULT "sysdate"(),
    DATA_PERIOD_END timestamp DEFAULT to_date('12312050', 'MMDDYYYY'),
    PRODUCT_DETAIL_TYPE varchar(10),
    CALCULATED_BY varchar(10),
    DISPLAY_SEQ int DEFAULT 0,
    DISPLAY_TEXT varchar(1000),
    CREATE_USER varchar(30),
    CREATE_DATE timestamp DEFAULT "sysdate"(),
    UPDATE_USER varchar(30),
    UPDATE_DATE timestamp,
    ACTIVE char(1) DEFAULT 'Y'
);


CREATE TABLE CUSTOMER_ORA.PRODUCT
(
    PRODUCT_ID int DEFAULT nextval('customer', 'product_seq'),
    PARENT_PRODUCT_ID int,
    PRODUCT_CODE varchar(10),
    NAME varchar(75),
    DESCRIPTION varchar(100),
    LAUNCH_DATE timestamp,
    ACTIVE char(1) DEFAULT 'Y',
    CEPHALON_PRODUCT char(1) DEFAULT 'N',
    PARENT_PRODUCT_IND char(1) DEFAULT 'N',
    DISPLAY_ORDER int DEFAULT 0,
    CREATE_USER varchar(30),
    CREATE_DATE timestamp DEFAULT "sysdate"(),
    UPDATE_USER varchar(30),
    UPDATE_DATE timestamp,
    PROMOTED_PRODUCT char(1) DEFAULT 'N',
    THERAPEUTIC_AREA varchar(10),
    PREV_PRODUCT_CODE varchar(6),
    NOTES varchar(250)
);


CREATE TABLE CUSTOMER_ORA.PRODUCT_NDC
(
    PRODUCT_NDC_ID int DEFAULT nextval('customer', 'product_ndc_seq'),
    PRODUCT_ID int,
    NDC_CODE varchar(11),
    ACTIVE char(1) DEFAULT 'Y',
    CREATE_USER varchar(30),
    CREATE_DATE date DEFAULT "sysdate"(),
    UPDATE_USER varchar(30),
    UPDATE_DATE date
);


CREATE TABLE CUSTOMER_ORA.PRODUCT_PRICE
(
    PRODUCT_PRICE_ID int DEFAULT nextval('customer', 'product_price_seq'),
    PRODUCT_ID int,
    PRICE_TYPE varchar(10),
    FIRST_VALID_DATE date DEFAULT "sysdate"(),
    LAST_VALID_DATE date DEFAULT "sysdate"(),
    UNIT_PRICE numeric(8,4),
    CREATE_USER varchar(30),
    CREATE_DATE date DEFAULT "sysdate"(),
    UPDATE_USER varchar(30),
    UPDATE_DATE date
);


CREATE TABLE CUSTOMER_ORA.VENDOR
(
    VENDOR_ID int DEFAULT nextval('customer', 'vendor_seq'),
    VENDOR_CODE varchar(10),
    NAME varchar(75),
    ACTIVE char(1),
    CREATE_USER varchar(30),
    CREATE_DATE date,
    UPDATE_USER varchar(30),
    UPDATE_DATE date
);


CREATE  VIEW CUSTOMER_ORA.dim_product_price_mfg AS
SELECT p.PRODUCT_ID AS product_id, pr.FIRST_VALID_DATE AS first_valid_date, pr.LAST_VALID_DATE AS last_valid_date, p.PRODUCT_CODE AS product_code, (vp.VENDOR_PRODUCT_CODE)::varchar(9) AS ims_product_code, p.NAME AS product_name, pr.UNIT_PRICE AS product_price, CASE WHEN (coalesce(p.PARENT_PRODUCT_IND, 'N'::char(1)) = 'Y'::char(1)) THEN p.PRODUCT_CODE ELSE pp.PRODUCT_CODE END AS brand_code, pr.CREATE_DATE AS create_date, pr.CREATE_USER AS create_user, pr.UPDATE_DATE AS update_date, pr.UPDATE_USER AS update_user FROM (((CUSTOMER.PRODUCT p JOIN CUSTOMER.PRODUCT_PRICE pr ON ((pr.PRODUCT_ID = p.PRODUCT_ID))) LEFT JOIN CUSTOMER.PRODUCT pp ON ((pp.PRODUCT_ID = p.PARENT_PRODUCT_ID))) LEFT JOIN CUSTOMER.VENDOR_PRODUCT vp ON (((vp.PRODUCT_ID = p.PRODUCT_ID) AND (vp.VENDOR_ID = 2::numeric(18,0))))) WHERE ((p.CEPHALON_PRODUCT = 'Y'::char(1)) AND (pr.PRICE_TYPE = 'MFGWAC'::varchar(6)));

CREATE  VIEW CUSTOMER_ORA.dim_product_price_comp AS
SELECT p.PRODUCT_ID AS product_id, pr.FIRST_VALID_DATE AS first_valid_date, pr.LAST_VALID_DATE AS last_valid_date, p.PRODUCT_CODE AS product_code, (vp.VENDOR_PRODUCT_CODE)::varchar(9) AS ims_product_code, p.NAME AS product_name, pr.UNIT_PRICE AS product_price, CASE WHEN (coalesce(p.PARENT_PRODUCT_IND, 'N'::char(1)) = 'Y'::char(1)) THEN p.PRODUCT_CODE ELSE pp.PRODUCT_CODE END AS brand_code, pr.CREATE_DATE AS create_date, pr.CREATE_USER AS create_user, pr.UPDATE_DATE AS update_date, pr.UPDATE_USER AS update_user FROM (((CUSTOMER.PRODUCT p JOIN CUSTOMER.PRODUCT_PRICE pr ON ((pr.PRODUCT_ID = p.PRODUCT_ID))) LEFT JOIN CUSTOMER.PRODUCT pp ON ((pp.PRODUCT_ID = p.PARENT_PRODUCT_ID))) LEFT JOIN CUSTOMER.VENDOR_PRODUCT vp ON (((vp.PRODUCT_ID = p.PRODUCT_ID) AND (vp.VENDOR_ID = 2::numeric(18,0))))) WHERE (pr.PRICE_TYPE = 'COMPWAC'::varchar(7));

CREATE  VIEW CUSTOMER_ORA.dim_product_price AS
SELECT p.PRODUCT_CODE AS product_code, (vp.VENDOR_PRODUCT_CODE)::varchar(9) AS ims_product_code, p.NAME AS product_name, pr.UNIT_PRICE AS product_price, CASE WHEN (coalesce(p.PARENT_PRODUCT_IND, 'N'::char(1)) = 'Y'::char(1)) THEN p.PRODUCT_CODE ELSE pp.PRODUCT_CODE END AS brand_code, pr.CREATE_DATE AS create_date, pr.CREATE_USER AS create_user, pr.UPDATE_DATE AS update_date, pr.UPDATE_USER AS update_user FROM (((CUSTOMER.PRODUCT p JOIN CUSTOMER.PRODUCT_PRICE pr ON ((pr.PRODUCT_ID = p.PRODUCT_ID))) LEFT JOIN CUSTOMER.PRODUCT pp ON ((pp.PRODUCT_ID = p.PARENT_PRODUCT_ID))) LEFT JOIN CUSTOMER.VENDOR_PRODUCT vp ON (((vp.PRODUCT_ID = p.PRODUCT_ID) AND (vp.VENDOR_ID = 2::numeric(18,0))))) WHERE ((p.CEPHALON_PRODUCT = 'Y'::char(1)) AND (pr.PRICE_TYPE = 'COMPWAC'::varchar(7)) AND ((statement_timestamp())::timestamp >= pr.FIRST_VALID_DATE) AND ((statement_timestamp())::timestamp <= pr.LAST_VALID_DATE));

CREATE  VIEW CUSTOMER_ORA.dim_product_ims_ddd AS
SELECT p.PRODUCT_ID AS product_id, (vp.VENDOR_PRODUCT_CODE)::varchar(9) AS ims_product_code, p.PRODUCT_CODE AS product_code, vp.VENDOR_PRODUCT_NAME AS ims_product_name, p.CEPHALON_PRODUCT AS cephalon_product, p.THERAPEUTIC_AREA AS therapeutic_area, p.ACTIVE AS active, vp.SUMMARY_PRODUCT_IND AS summary_product_ind, CASE pp.PRODUCT_ID WHEN NULLSEQUAL NULL::numeric(1,0) THEN p.PRODUCT_ID ELSE pp.PRODUCT_ID END AS parent_product_id, CASE pp.PRODUCT_CODE WHEN NULLSEQUAL NULL THEN p.PRODUCT_CODE ELSE pp.PRODUCT_CODE END AS parent_product, CASE WHEN (coalesce(p.PARENT_PRODUCT_IND, 'N'::char(1)) = 'Y'::char(1)) THEN p.PRODUCT_ID ELSE pp.PRODUCT_ID END AS brand_id, CASE WHEN (coalesce(p.PARENT_PRODUCT_IND, 'N'::char(1)) = 'Y'::char(1)) THEN p.PRODUCT_CODE ELSE pp.PRODUCT_CODE END AS brand_code, CASE WHEN (coalesce(p.PARENT_PRODUCT_IND, 'N'::char(1)) = 'Y'::char(1)) THEN p.NAME ELSE pp.NAME END AS brand_name, m.MARKET_CODE AS market_code, m.NAME AS market_name FROM ((((CUSTOMER.PRODUCT p JOIN CUSTOMER.VENDOR_PRODUCT vp ON ((vp.PRODUCT_ID = p.PRODUCT_ID))) LEFT JOIN CUSTOMER.PRODUCT pp ON ((pp.PRODUCT_ID = p.PARENT_PRODUCT_ID))) LEFT JOIN CUSTOMER.MARKET_PRODUCT mp ON (((mp.PRODUCT_ID = p.PRODUCT_ID) AND (trunc((statement_timestamp())::timestamp, 'DD'::varchar(2)) >= trunc(mp.FIRST_VALID_DATE, 'DD'::varchar(2))) AND (trunc((statement_timestamp())::timestamp, 'DD'::varchar(2)) <= trunc(mp.LAST_VALID_DATE, 'DD'::varchar(2)))))) LEFT JOIN CUSTOMER.MARKET m ON (((m.MARKET_ID = mp.MARKET_ID) AND (m.VENDOR_ID = ANY (ARRAY[1::numeric(18,0), 4::numeric(18,0)])) AND (m.ACTIVE = 'Y'::char(1))))) WHERE ((vp.VENDOR_ID = 2::numeric(18,0)) AND (p.ACTIVE = 'Y'::char(1)));

CREATE  VIEW CUSTOMER_ORA.dim_product_brand AS
SELECT p.PRODUCT_CODE AS brand_code, p.PRODUCT_ID AS brand_id, p.NAME AS brand_name, m.MARKET_CODE AS market_code, p.PROMOTED_PRODUCT AS promoted_product, p.THERAPEUTIC_AREA AS therapeutic_area, p.CREATE_DATE AS create_date, p.CREATE_USER AS create_user, p.UPDATE_DATE AS update_date, p.UPDATE_USER AS update_user FROM ((CUSTOMER.PRODUCT p LEFT JOIN CUSTOMER.MARKET_PRODUCT mp ON (((mp.PRODUCT_ID = p.PRODUCT_ID) AND (trunc((statement_timestamp())::timestamp, 'DD'::varchar(2)) >= trunc(mp.FIRST_VALID_DATE, 'DD'::varchar(2))) AND (trunc((statement_timestamp())::timestamp, 'DD'::varchar(2)) <= trunc(mp.LAST_VALID_DATE, 'DD'::varchar(2)))))) LEFT JOIN CUSTOMER.MARKET m ON (((m.MARKET_ID = mp.MARKET_ID) AND (m.VENDOR_ID = 1::numeric(18,0))))) WHERE ((p.ACTIVE = 'Y'::char(1)) AND (p.PARENT_PRODUCT_IND = 'Y'::char(1)));

CREATE  VIEW CUSTOMER_ORA.dim_product AS
SELECT p.PRODUCT_ID AS product_id, p.PRODUCT_CODE AS product_code, p.NAME AS product_name, m.MARKET_CODE AS market_code, m.NAME AS market_name, p.ACTIVE AS active, p.CEPHALON_PRODUCT AS ceph_prod_flag, CASE WHEN (coalesce(p.PARENT_PRODUCT_IND, 'N'::char(1)) = 'Y'::char(1)) THEN p.PRODUCT_ID ELSE pp.PRODUCT_ID END AS brand_id, CASE WHEN (coalesce(p.PARENT_PRODUCT_IND, 'N'::char(1)) = 'Y'::char(1)) THEN p.PRODUCT_CODE ELSE pp.PRODUCT_CODE END AS brand_code, CASE WHEN (coalesce(p.PARENT_PRODUCT_IND, 'N'::char(1)) = 'Y'::char(1)) THEN p.NAME ELSE pp.NAME END AS brand_name, p.THERAPEUTIC_AREA AS therapeutic_area, p.CREATE_DATE AS create_date, p.CREATE_USER AS create_user, p.UPDATE_DATE AS update_date, p.UPDATE_USER AS update_user FROM (((CUSTOMER.PRODUCT p LEFT JOIN CUSTOMER.PRODUCT pp ON ((pp.PRODUCT_ID = p.PARENT_PRODUCT_ID))) LEFT JOIN CUSTOMER.MARKET_PRODUCT mp ON (((mp.PRODUCT_ID = p.PRODUCT_ID) AND (trunc((statement_timestamp())::timestamp, 'DD'::varchar(2)) >= trunc(mp.FIRST_VALID_DATE, 'DD'::varchar(2))) AND (trunc((statement_timestamp())::timestamp, 'DD'::varchar(2)) <= trunc(mp.LAST_VALID_DATE, 'DD'::varchar(2)))))) LEFT JOIN CUSTOMER.MARKET m ON (((m.MARKET_ID = mp.MARKET_ID) AND (m.VENDOR_ID = ANY (ARRAY[1::numeric(18,0), 4::numeric(18,0)])) AND (m.ACTIVE = 'Y'::char(1)))));
==> failed_tevaQA12G_WSMP_ADMIN_ORA_csv_export.sql <==

==> failed_tevaQA12G_WSMP_ADMIN_ORA_ddl_export.sql <==



CREATE  VIEW WSMP_ADMIN_ORA.v_siebel_samples_prof AS
SELECT ap.ROW_ID AS sample_id, ea.ROW_ID AS call_id, c.ROW_ID AS siebel_contact_row_id, CASE WHEN (length(c.INTEGRATION_ID) = 18) THEN c.INTEGRATION_ID ELSE NULL END AS veeva_account_id, trunc(ea.APPT_START_DT, 'DD'::varchar(2)) AS call_date, rep_p.X_SALES_FORCE AS sales_force_id, rep_p.NAME AS territory_num, ea.SUBTYPE_CD AS subtype_cd, ea.TODO_CD AS todo_cd, CASE WHEN (ap.RELATION_TYPE_CD = 'Direct Send'::varchar(11)) THEN 'REQUEST'::varchar(7) WHEN (ap.RELATION_TYPE_CD = 'Sample'::varchar(6)) THEN 'DROP'::varchar(4) ELSE 'UNKNOWN'::varchar(7) END AS sample_type, CASE WHEN (p.DESC_TEXT ~~ 'Adipex%'::varchar(7)) THEN 'ADIPEX-P'::varchar(8) WHEN (p.DESC_TEXT ~~ 'Amrix%'::varchar(6)) THEN 'AMRIX'::varchar(5) WHEN (p.DESC_TEXT ~~ 'Azilect%'::varchar(8)) THEN 'AZILECT'::varchar(7) WHEN (p.DESC_TEXT ~~ 'Budesonide%'::varchar(11)) THEN 'BUDESONIDE'::varchar(10) WHEN (p.DESC_TEXT ~~ 'COPAXONE%'::varchar(9)) THEN 'COPAXONE'::varchar(8) WHEN (p.DESC_TEXT ~~ 'ENJUVIA%'::varchar(8)) THEN 'ENJUVIA'::varchar(7) WHEN (p.DESC_TEXT ~~ 'LoSeasonique%'::varchar(13)) THEN 'LOSEASONIQUE'::varchar(12) WHEN (p.DESC_TEXT ~~ 'NIASPAN%'::varchar(8)) THEN 'NIASPAN'::varchar(7) WHEN (p.DESC_TEXT ~~ 'Nuvigil%'::varchar(8)) THEN 'NUVIGIL'::varchar(7) WHEN (p.DESC_TEXT ~~ 'ProAir%'::varchar(7)) THEN 'PROAIR'::varchar(6) WHEN (p.DESC_TEXT ~~ 'Qnasl%'::varchar(6)) THEN 'QNASL'::varchar(5) WHEN (p.DESC_TEXT ~~ 'QVAR%'::varchar(5)) THEN 'QVAR'::varchar(4) WHEN (p.DESC_TEXT ~~ 'Seasonique%'::varchar(11)) THEN 'SEASONIQUE'::varchar(10) WHEN (p.DESC_TEXT ~~ 'Tev-Tropin%'::varchar(11)) THEN 'TEV-TROPIN'::varchar(10) ELSE 'UNKNOWN'::varchar(7) END AS product_name, p.DESC_TEXT AS sample_name, p.PART_NUM AS sample_ndc, ap.QTY AS qty, ea.NAME AS name_on_call, ea.COMMENTS AS address_line_on_call, ea.ZIPCODE AS zip_on_call, d.ims_id, eax.ATTRIB_03 AS dea_num, ea.OWNER_PER_ID AS ownerid, emp.CSN AS employeenumber, ea.CREATED_BY AS created_by, ea.CREATED AS created_date FROM (((((((WSMP_ADMIN.S_EVT_ACT ea JOIN WSMP_ADMIN.S_CONTACT c ON ((ea.TARGET_PER_ID = c.ROW_ID))) JOIN WSMP_ADMIN.S_POSTN rep_p ON ((ea.OWNER_POSTN_ID = rep_p.ROW_ID))) JOIN WSMP_ADMIN.S_ACT_PRDINT ap ON ((ea.ROW_ID = ap.ACTIVITY_ID))) JOIN WSMP_ADMIN.S_PROD_INT p ON ((ap.PRDINT_ID = p.ROW_ID))) LEFT JOIN WSMP_ADMIN.S_EVT_ACT_X eax ON ((ea.ROW_ID = eax.ROW_ID))) LEFT JOIN WSMP_ADMIN.S_CONTACT emp ON ((emp.ROW_ID = ea.CREATED_BY))) LEFT JOIN (SELECT iq.ims_id, iq.cm_id, iq.me_num, iq.siebel_contact_row_id, iq.rnk FROM (SELECT dim_sfa_csf_demo.IMS_ID AS ims_id, dim_sfa_csf_demo.CM_ID AS cm_id, dim_sfa_csf_demo.ME_NUM AS me_num, dim_sfa_csf_demo.SIEBEL_CONTACT_ROW_ID AS siebel_contact_row_id, row_number() OVER (PARTITION BY dim_sfa_csf_demo.SIEBEL_CONTACT_ROW_ID ORDER BY dim_sfa_csf_demo.VEEVA_ACCOUNT_ID, dim_sfa_csf_demo.SALES_FORCE_ID) AS rnk FROM WSMP_ADMIN.DIM_SFA_CSF_DEMO) iq WHERE (iq.rnk = 1)) d ON ((c.ROW_ID = d.siebel_contact_row_id))) WHERE ((rep_p.POSTN_TYPE_CD = ANY (ARRAY['Sales Representative'::varchar(20), 'TSP Test Position'::varchar(17)])) AND (ap.RELATION_TYPE_CD = ANY (ARRAY['Direct Send'::varchar(11), 'Sample'::varchar(6)])) AND (ea.OWNER_POSTN_ID <> '0-5220'::varchar(6)) AND (ea.APPT_START_DT >= '2012-01-01 00:00:00'::timestamp(0)) AND (ea.APPT_START_DT < (statement_timestamp())::timestamp));

CREATE  VIEW WSMP_ADMIN_ORA.v_siebel_samples_account_calls AS
SELECT rep_p.X_SALES_FORCE AS sales_force_id, ea.PAR_EVT_ID AS par_evt_id, ea.ROW_ID AS csf_call_id, ea.TARGET_PER_ID AS csf_demo_id, 'ACCT'::varchar(4) AS call_type, ea.NAME AS name_on_call, ea.ZIPCODE AS zip_on_call, ea.SUBTYPE_CD AS subtype_cd, ea.TODO_CD AS todo_cd, ea.INTEGRATION_ID AS integration_id, ea.ROW_ID AS siebel_evt_act_row_id, ea.TARGET_PER_ID AS siebel_target_per_id, emp.CSN AS rep_id, rep_p.NAME AS territory_num, trunc(ea.APPT_START_DT, 'DD'::varchar(2)) AS call_date, details.product_name, details.lot_num, details.qty, details.relation_type_cd, o.OU_TYPE_CD AS ou_type_cd, CASE WHEN (length(emp.INTEGRATION_ID) = 18) THEN emp.INTEGRATION_ID ELSE NULL END AS veeva_account_id FROM ((((WSMP_ADMIN.S_EVT_ACT ea LEFT JOIN WSMP_ADMIN.S_POSTN rep_p ON ((rep_p.ROW_ID = ea.OWNER_POSTN_ID))) LEFT JOIN WSMP_ADMIN.S_ORG_EXT o ON ((o.ROW_ID = rep_p.BU_ID))) LEFT JOIN WSMP_ADMIN.S_CONTACT emp ON ((emp.ROW_ID = ea.TARGET_PER_ID))) JOIN (SELECT appl.ACTIVITY_ID AS activity_id, upper(spi.NAME) AS product_name, appl.LOT_NUM AS lot_num, appl.QTY AS qty, appl.RELATION_TYPE_CD AS relation_type_cd FROM (WSMP_ADMIN.S_ACT_PRDINT appl JOIN WSMP_ADMIN.S_PROD_INT spi ON ((appl.PRDINT_ID = spi.ROW_ID))) WHERE ((appl.CONFLICT_ID = '0'::varchar(1)) AND (appl.RELATION_TYPE_CD = ANY (ARRAY['DirectSend'::varchar(10), 'Sample'::varchar(6)])))) details ON ((details.activity_id = ea.ROW_ID))) WHERE ((rep_p.NAME <> ALL (ARRAY['Siebel Administrator'::varchar(20), 'TWH Siebel Administrator'::varchar(24)])) AND (o.NAME <> ALL (ARRAY['Siebel Administration'::varchar(21), 'ERM AnonUser'::varchar(12), 'Default Organization'::varchar(20)])) AND (coalesce(o.OU_TYPE_CD, 'XXX'::varchar(3)) <> 'Manufacturer'::varchar(12)));

CREATE  VIEW WSMP_ADMIN_ORA.v_siebel_account_calls AS
SELECT rep_p.X_SALES_FORCE AS sales_force_id, ea.PAR_EVT_ID AS par_evt_id, ea.ROW_ID AS csf_call_id, ea.TARGET_OU_ID AS csf_demo_id, 'ACCT'::varchar(4) AS call_type, o.OU_TYPE_CD AS ou_type_cd, ea.NAME AS name_on_call, ea.ZIPCODE AS zip_on_call, ea.SUBTYPE_CD AS subtype_cd, ea.TODO_CD AS todo_cd, ea.ROW_ID AS siebel_evt_act_row_id, ea.TARGET_OU_ID AS siebel_target_ou_id, emp.CSN AS rep_id, rep_p.NAME AS territory_num, trunc(ea.APPT_START_DT, 'DD'::varchar(2)) AS call_date, details.first_detailed_product, details.second_detailed_product, details.third_detailed_product, details.fourth_detailed_product, details.fifth_detailed_product, details.sixth_detailed_product, CASE WHEN (length(o.INTEGRATION_ID) = 18) THEN o.INTEGRATION_ID ELSE NULL END AS veeva_account_id, ea.INTEGRATION_ID AS integration_id FROM ((((WSMP_ADMIN.S_EVT_ACT ea LEFT JOIN WSMP_ADMIN.S_POSTN rep_p ON ((rep_p.ROW_ID = ea.OWNER_POSTN_ID))) LEFT JOIN WSMP_ADMIN.S_ORG_EXT o ON ((o.ROW_ID = ea.TARGET_OU_ID))) LEFT JOIN WSMP_ADMIN.S_CONTACT emp ON ((emp.ROW_ID = ea.CREATED_BY))) LEFT JOIN (SELECT iq.activity_id, max(CASE WHEN (iq.priority = 1) THEN iq.product_name ELSE NULL END) AS first_detailed_product, max(CASE WHEN (iq.priority = 2) THEN iq.product_name ELSE NULL END) AS second_detailed_product, max(CASE WHEN (iq.priority = 3) THEN iq.product_name ELSE NULL END) AS third_detailed_product, max(CASE WHEN (iq.priority = 4) THEN iq.product_name ELSE NULL END) AS fourth_detailed_product, max(CASE WHEN (iq.priority = 5) THEN iq.product_name ELSE NULL END) AS fifth_detailed_product, max(CASE WHEN (iq.priority = 6) THEN iq.product_name ELSE NULL END) AS sixth_detailed_product FROM (SELECT appl.ACTIVITY_ID AS activity_id, upper(spi.NAME) AS product_name, row_number() OVER (PARTITION BY appl.ACTIVITY_ID ORDER BY appl.PRIORITY_NUM, upper(spi.NAME)) AS priority FROM (WSMP_ADMIN.S_ACT_PROD_APPL appl LEFT JOIN WSMP_ADMIN.S_PROD_INT spi ON ((appl.PRDINT_ID = spi.ROW_ID))) WHERE (appl.CONFLICT_ID = '0'::varchar(1))) iq GROUP BY iq.activity_id) details ON ((details.activity_id = ea.PAR_EVT_ID))) WHERE ((ea.EVT_STAT_CD = 'Submitted'::varchar(9)) AND (rep_p.POSTN_TYPE_CD = ANY (ARRAY['Sales Representative'::varchar(20), 'TSP Test Position'::varchar(17)])) AND (ea.OWNER_POSTN_ID <> '0-5220'::varchar(6)) AND (ea.APPT_START_DT >= '2011-01-01 00:00:00'::timestamp(0)) AND (ea.APPT_START_DT < (statement_timestamp())::timestamp) AND (ea.SUBTYPE_CD = 'Account Call'::varchar(12)) AND (ea.TODO_CD = 'Account Call'::varchar(12)));

CREATE  VIEW WSMP_ADMIN_ORA.v_siebel_demo_accounts AS
SELECT oe.ROW_ID AS csf_demo_id, p.X_SALES_FORCE AS sales_force_id, 'ACCT'::varchar(4) AS demo_type, oe.OU_TYPE_CD AS account_type, 'N'::varchar(1) AS house_acct_flag, 'A'::varchar(1) AS src_verification_status, x.ATTRIB_07 AS hms_id, x.X_ATTRIB_109 AS bp_code, p.NAME AS territory_num, btrim(oe.NAME) AS org_name, substr(btrim(ap.ADDR), 1, 75) AS address1, substr(btrim(ap.ADDR_LINE_2), 1, 75) AS address2, substr(btrim(ap.ADDR_LINE_3), 1, 75) AS address3, ap.CITY AS city, ap.STATE AS state, ap.ZIPCODE AS zip, s_accnt_postn.LAST_CALL_DT AS last_call_date, ap.ROW_ID AS siebel_addr_per_row_id, 'Y'::varchar(1) AS ora_viewable_flag, oe.CREATED AS sfa_create_date, (statement_timestamp())::timestamp AS last_build_date, CASE WHEN (length(oe.INTEGRATION_ID) = 18) THEN oe.INTEGRATION_ID ELSE NULL END AS veeva_account_id FROM ((((WSMP_ADMIN.S_ORG_EXT oe LEFT JOIN WSMP_ADMIN.S_ORG_EXT_X x ON ((oe.ROW_ID = x.ROW_ID))) LEFT JOIN WSMP_ADMIN.S_ADDR_PER ap ON ((oe.PR_ADDR_ID = ap.ROW_ID))) LEFT JOIN WSMP_ADMIN.S_ACCNT_POSTN ON ((oe.ROW_ID = s_accnt_postn.OU_EXT_ID))) LEFT JOIN WSMP_ADMIN.S_POSTN p ON ((s_accnt_postn.POSITION_ID = p.ROW_ID))) WHERE ((oe.NAME <> ALL (ARRAY['Siebel Administration'::varchar(21), 'ERM AnonUser'::varchar(12), 'Default Organization'::varchar(20)])) AND (p.NAME <> ALL (ARRAY['Siebel Administrator'::varchar(20), 'TWH Siebel Administrator'::varchar(24)])) AND (oe.OU_TYPE_CD <> 'Manufacturer'::varchar(12)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_4th_sales_roster AS
SELECT fourth_sale_force_roster.EMPLOYEE_ID AS employee_id, fourth_sale_force_roster.USERNAME AS username, CASE fourth_sale_force_roster.LAST_NAME WHEN NULLSEQUAL 'Vacant'::varchar(6) THEN NULL ELSE fourth_sale_force_roster.LAST_NAME END AS last_name, CASE fourth_sale_force_roster.FIRST_NAME WHEN NULLSEQUAL 'Vacant'::varchar(6) THEN NULL ELSE fourth_sale_force_roster.FIRST_NAME END AS first_name, fourth_sale_force_roster.MIDDLE_NAME AS middle_name, fourth_sale_force_roster.SALUTATION AS salutation, fourth_sale_force_roster.SUFFIX AS suffix, fourth_sale_force_roster.TITLE AS title, fourth_sale_force_roster.TERRITORY AS territory, fourth_sale_force_roster.TERRITORY_NAME AS territory_name, CASE WHEN (substr(fourth_sale_force_roster.MANAGER_TERRITORY, 3, 4) = 'ZZZZ'::varchar(4)) THEN NULL WHEN (fourth_sale_force_roster.MANAGER_TERRITORY = 'TOFRMZ00'::varchar(8)) THEN NULL WHEN (fourth_sale_force_roster.MANAGER_TERRITORY = 'TOSCGZ00'::varchar(8)) THEN NULL ELSE fourth_sale_force_roster.MANAGER_TERRITORY END AS manager_territory, fourth_sale_force_roster.TEAM AS team, fourth_sale_force_roster.BUSINESS_LINE_1_ADDR AS business_line_1_addr, fourth_sale_force_roster.BUSINESS_LINE_2_ADDR AS business_line_2_addr, fourth_sale_force_roster.BUSINESS_LINE_3_ADDR AS business_line_3_addr, fourth_sale_force_roster.BUSINESS_CITY AS business_city, fourth_sale_force_roster.BUSINESS_STATE AS business_state, fourth_sale_force_roster.BUSINESS_POSTAL_CODE AS business_postal_code, fourth_sale_force_roster.BUSINESS_COUNTRY_CODE AS business_country_code, fourth_sale_force_roster.HOME_LINE_1_ADDR AS home_line_1_addr, fourth_sale_force_roster.HOME_LINE_2_ADDR AS home_line_2_addr, fourth_sale_force_roster.HOME_LINE_3_ADDR AS home_line_3_addr, fourth_sale_force_roster.HOME_CITY AS home_city, fourth_sale_force_roster.HOME_STATE AS home_state, fourth_sale_force_roster.HOME_POSTAL_CODE AS home_postal_code, fourth_sale_force_roster.HOME_COUNTRY_CODE AS home_country_code, fourth_sale_force_roster.CORRESPONDENCE_ADDRESS AS correspondence_address, fourth_sale_force_roster.BUSINESS_PHONE AS business_phone, fourth_sale_force_roster.BUSINESS_PHONE_EXTENSION AS business_phone_extension, fourth_sale_force_roster.BUSINESS_FAX AS business_fax, fourth_sale_force_roster.VOICE_MAIL AS voice_mail, fourth_sale_force_roster.MOBILE_PHONE AS mobile_phone, fourth_sale_force_roster.HOME_PHONE AS home_phone, fourth_sale_force_roster.HOME_FAX AS home_fax, fourth_sale_force_roster.CORRESPONDENCE_PHONE AS correspondence_phone, fourth_sale_force_roster.BUSINESS_EMAIL AS business_email, fourth_sale_force_roster.HOME_EMAIL AS home_email, fourth_sale_force_roster.CORRESPONDENCE_EMAIL AS correspondence_email, fourth_sale_force_roster.COST_CENTER AS cost_center FROM WSMP_ADMIN.FOURTH_SALE_FORCE_ROSTER WHERE ((fourth_sale_force_roster.TERRITORY !~~ '%ZZZZ%'::varchar(6)) AND ((trunc(fourth_sale_force_roster.HIRE_DT, 'DD'::varchar(2)) <= (statement_timestamp())::timestamp) OR (fourth_sale_force_roster.HIRE_DT IS NULL)) AND (fourth_sale_force_roster.TERRITORY <> '111111'::varchar(6)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Agile_Mktg_Mix_SP_Attendees AS
SELECT a.EVENT_NUMBER AS event_number, e.EVENT_NAME AS event_name, e.EVENT_START_DATE AS event_start_date, a.ME_NUMBER AS me_number, a.DEA_NUMBER AS dea_number, cm.CEPH_ID AS ceph_id, a.CUSTOMER_ID AS customer_id, (cm.CUSTOMER_MASTER_ID)::varchar AS cm_id, a.ATTENDEE_FIRST_NAME AS attendee_first_name, a.ATTENDEE_LAST_NAME AS attendee_last_name, a.ATTENDEE_ADDRESS_LINE_1 AS attendee_address_line_1, a.ATTENDEE_ADDRESS_LINE_2 AS attendee_address_line_2, a.ATTENDEE_ADDRESS_LINE_3 AS attendee_address_line_3, a.ATTENDEE_CITY AS attendee_city, a.ATTENDEE_STATE_PROVINCE AS attendee_state_province, a.ATTENDEE_POSTAL_CODE AS attendee_postal_code, a.ATTENDEE_SPECIALTY AS attendee_specialty, a.ATTENDEE_DEGREE AS attendee_degree FROM ((WSMP_ADMIN.STG_AHM_EVENT_ATTENDEE a JOIN WSMP_ADMIN.STG_AHM_EVENT e ON ((e.EVENT_NUMBER = a.EVENT_NUMBER))) LEFT JOIN WSMP_ADMIN.STG_CUSTOMER_MASTER cm ON ((cm.SOURCE_ID = a.IMS_NUMBER))) WHERE ((e.EVENT_START_DATE >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (e.EVENT_START_DATE <= last_day(add_months((statement_timestamp())::timestamp, (-1))))) GROUP BY a.EVENT_NUMBER, e.EVENT_NAME, e.EVENT_START_DATE, a.ME_NUMBER, a.DEA_NUMBER, cm.CEPH_ID, a.CUSTOMER_ID, (cm.CUSTOMER_MASTER_ID)::varchar, a.ATTENDEE_FIRST_NAME, a.ATTENDEE_LAST_NAME, a.ATTENDEE_ADDRESS_LINE_1, a.ATTENDEE_ADDRESS_LINE_2, a.ATTENDEE_ADDRESS_LINE_3, a.ATTENDEE_CITY, a.ATTENDEE_STATE_PROVINCE, a.ATTENDEE_POSTAL_CODE, a.ATTENDEE_SPECIALTY, a.ATTENDEE_DEGREE;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_AHM_PostalCodeTerritory AS
SELECT ahm_postal_code_territory_xref.COUNTRY_CODE, ahm_postal_code_territory_xref.POSTAL_CODE, ahm_postal_code_territory_xref.TERRITORY FROM WSMP_ADMIN.AHM_POSTAL_CODE_TERRITORY_XREF WHERE (ahm_postal_code_territory_xref.TERRITORY !~~ '%ZZZZ%'::varchar(6));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Amrix_Product_Totals AS
SELECT rx.PRODUCT_CODE AS product_code, sum(CASE rx.MONTH_BUCKET WHEN 24::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt24, sum(CASE rx.MONTH_BUCKET WHEN 24::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt24, sum(CASE rx.MONTH_BUCKET WHEN 23::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt23, sum(CASE rx.MONTH_BUCKET WHEN 23::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt23, sum(CASE rx.MONTH_BUCKET WHEN 22::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt22, sum(CASE rx.MONTH_BUCKET WHEN 22::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt22, sum(CASE rx.MONTH_BUCKET WHEN 21::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt21, sum(CASE rx.MONTH_BUCKET WHEN 21::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt21, sum(CASE rx.MONTH_BUCKET WHEN 20::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt20, sum(CASE rx.MONTH_BUCKET WHEN 20::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt20, sum(CASE rx.MONTH_BUCKET WHEN 19::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt19, sum(CASE rx.MONTH_BUCKET WHEN 19::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt19, sum(CASE rx.MONTH_BUCKET WHEN 18::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt18, sum(CASE rx.MONTH_BUCKET WHEN 18::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt18, sum(CASE rx.MONTH_BUCKET WHEN 17::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt17, sum(CASE rx.MONTH_BUCKET WHEN 17::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt17, sum(CASE rx.MONTH_BUCKET WHEN 16::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt16, sum(CASE rx.MONTH_BUCKET WHEN 16::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt16, sum(CASE rx.MONTH_BUCKET WHEN 15::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt15, sum(CASE rx.MONTH_BUCKET WHEN 15::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt15, sum(CASE rx.MONTH_BUCKET WHEN 14::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt14, sum(CASE rx.MONTH_BUCKET WHEN 14::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt14, sum(CASE rx.MONTH_BUCKET WHEN 13::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt13, sum(CASE rx.MONTH_BUCKET WHEN 13::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt13, sum(CASE rx.MONTH_BUCKET WHEN 12::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt12, sum(CASE rx.MONTH_BUCKET WHEN 12::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt12, sum(CASE rx.MONTH_BUCKET WHEN 11::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt11, sum(CASE rx.MONTH_BUCKET WHEN 11::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt11, sum(CASE rx.MONTH_BUCKET WHEN 10::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt10, sum(CASE rx.MONTH_BUCKET WHEN 10::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt10, sum(CASE rx.MONTH_BUCKET WHEN 9::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt9, sum(CASE rx.MONTH_BUCKET WHEN 9::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt9, sum(CASE rx.MONTH_BUCKET WHEN 8::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt8, sum(CASE rx.MONTH_BUCKET WHEN 8::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt8, sum(CASE rx.MONTH_BUCKET WHEN 7::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt7, sum(CASE rx.MONTH_BUCKET WHEN 7::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt7, sum(CASE rx.MONTH_BUCKET WHEN 6::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt6, sum(CASE rx.MONTH_BUCKET WHEN 6::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt6, sum(CASE rx.MONTH_BUCKET WHEN 5::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt5, sum(CASE rx.MONTH_BUCKET WHEN 5::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt5, sum(CASE rx.MONTH_BUCKET WHEN 4::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt4, sum(CASE rx.MONTH_BUCKET WHEN 4::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt4, sum(CASE rx.MONTH_BUCKET WHEN 3::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt3, sum(CASE rx.MONTH_BUCKET WHEN 3::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt3, sum(CASE rx.MONTH_BUCKET WHEN 2::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt2, sum(CASE rx.MONTH_BUCKET WHEN 2::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt2, sum(CASE rx.MONTH_BUCKET WHEN 1::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt1, sum(CASE rx.MONTH_BUCKET WHEN 1::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt1 FROM WSMP_ADMIN.DW_PRESC_PLAN_RX_M rx WHERE ((rx.PRODUCT_CODE = ANY (ARRAY['A00380'::varchar(6), 'A00100'::varchar(6), 'A00330'::varchar(6), 'A00210'::varchar(6), 'A00370'::varchar(6), 'A00220'::varchar(6), 'A00230'::varchar(6), 'A00350'::varchar(6), 'A00360'::varchar(6), 'A00240'::varchar(6), 'A00320'::varchar(6), 'A00250'::varchar(6), 'A00340'::varchar(6), 'A00260'::varchar(6), 'A00270'::varchar(6), 'A00280'::varchar(6), 'A00290'::varchar(6)])) AND (rx.MONTH_BUCKET >= 1::numeric(18,0)) AND (rx.MONTH_BUCKET <= 24::numeric(18,0))) GROUP BY rx.PRODUCT_CODE;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Azilect_Product_Totals AS
SELECT rx.PRODUCT_CODE AS product_code, sum(CASE rx.MONTH_BUCKET WHEN 24::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt24, sum(CASE rx.MONTH_BUCKET WHEN 24::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt24, sum(CASE rx.MONTH_BUCKET WHEN 23::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt23, sum(CASE rx.MONTH_BUCKET WHEN 23::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt23, sum(CASE rx.MONTH_BUCKET WHEN 22::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt22, sum(CASE rx.MONTH_BUCKET WHEN 22::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt22, sum(CASE rx.MONTH_BUCKET WHEN 21::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt21, sum(CASE rx.MONTH_BUCKET WHEN 21::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt21, sum(CASE rx.MONTH_BUCKET WHEN 20::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt20, sum(CASE rx.MONTH_BUCKET WHEN 20::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt20, sum(CASE rx.MONTH_BUCKET WHEN 19::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt19, sum(CASE rx.MONTH_BUCKET WHEN 19::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt19, sum(CASE rx.MONTH_BUCKET WHEN 18::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt18, sum(CASE rx.MONTH_BUCKET WHEN 18::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt18, sum(CASE rx.MONTH_BUCKET WHEN 17::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt17, sum(CASE rx.MONTH_BUCKET WHEN 17::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt17, sum(CASE rx.MONTH_BUCKET WHEN 16::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt16, sum(CASE rx.MONTH_BUCKET WHEN 16::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt16, sum(CASE rx.MONTH_BUCKET WHEN 15::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt15, sum(CASE rx.MONTH_BUCKET WHEN 15::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt15, sum(CASE rx.MONTH_BUCKET WHEN 14::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt14, sum(CASE rx.MONTH_BUCKET WHEN 14::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt14, sum(CASE rx.MONTH_BUCKET WHEN 13::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt13, sum(CASE rx.MONTH_BUCKET WHEN 13::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt13, sum(CASE rx.MONTH_BUCKET WHEN 12::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt12, sum(CASE rx.MONTH_BUCKET WHEN 12::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt12, sum(CASE rx.MONTH_BUCKET WHEN 11::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt11, sum(CASE rx.MONTH_BUCKET WHEN 11::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt11, sum(CASE rx.MONTH_BUCKET WHEN 10::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt10, sum(CASE rx.MONTH_BUCKET WHEN 10::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt10, sum(CASE rx.MONTH_BUCKET WHEN 9::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt9, sum(CASE rx.MONTH_BUCKET WHEN 9::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt9, sum(CASE rx.MONTH_BUCKET WHEN 8::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt8, sum(CASE rx.MONTH_BUCKET WHEN 8::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt8, sum(CASE rx.MONTH_BUCKET WHEN 7::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt7, sum(CASE rx.MONTH_BUCKET WHEN 7::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt7, sum(CASE rx.MONTH_BUCKET WHEN 6::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt6, sum(CASE rx.MONTH_BUCKET WHEN 6::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt6, sum(CASE rx.MONTH_BUCKET WHEN 5::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt5, sum(CASE rx.MONTH_BUCKET WHEN 5::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt5, sum(CASE rx.MONTH_BUCKET WHEN 4::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt4, sum(CASE rx.MONTH_BUCKET WHEN 4::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt4, sum(CASE rx.MONTH_BUCKET WHEN 3::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt3, sum(CASE rx.MONTH_BUCKET WHEN 3::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt3, sum(CASE rx.MONTH_BUCKET WHEN 2::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt2, sum(CASE rx.MONTH_BUCKET WHEN 2::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt2, sum(CASE rx.MONTH_BUCKET WHEN 1::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt1, sum(CASE rx.MONTH_BUCKET WHEN 1::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt1 FROM WSMP_ADMIN.DW_PRESC_PLAN_RX_M rx WHERE ((rx.PRODUCT_CODE = ANY (ARRAY['700105'::varchar(6), '700110'::varchar(6), '700210'::varchar(6), '700220'::varchar(6), '700310'::varchar(6), '700320'::varchar(6), '700410'::varchar(6), '700420'::varchar(6), '700510'::varchar(6), '700520'::varchar(6), '700530'::varchar(6), '700540'::varchar(6), '700550'::varchar(6), '700582'::varchar(6), '700584'::varchar(6), '700586'::varchar(6), '700588'::varchar(6), '700570'::varchar(6)])) AND (rx.MONTH_BUCKET >= 1::numeric(18,0)) AND (rx.MONTH_BUCKET <= 24::numeric(18,0))) GROUP BY rx.PRODUCT_CODE;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_cmop_rx_backup AS
SELECT rx.STATION_NUMBER, rx.VA_PRODUCT, 0 AS PRODUCT_ID, rx.PRODUCT_CODE, to_char(rx.MONTH, 'YYYY-MM-DD'::varchar(10)) AS MONTH, rx.TRX_CNT, rx.CMOP_CNT, rx.TRX_QTY, rx.CMOP_QTY, rx.CNT_30_DAY_RX, rx.ID FROM (WSMP_ADMIN.DW_CMOP_RX_TEVA rx JOIN CUSTOMER.DIM_VA_PRODUCT_XREF p ON ((rx.PRODUCT_CODE = p.WK_PROD_CODE)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_cmop_station AS
SELECT dim_va_station.VISN, dim_va_station.STATION_NUMBER, dim_va_station.STATION, dim_va_station.STATION_TYPE, dim_va_station.ADDRESS, dim_va_station.CITY, dim_va_station.STATE, dim_va_station.ZIP, dim_va_station.CMOP, dim_va_station.CMOP_DATE, to_char(dim_va_station.CREATE_DATE, 'YYYY-MM-DD'::varchar(10)) AS CREATE_DATE, to_char(dim_va_station.LAST_UPD_DATE, 'YYYY-MM-DD'::varchar(10)) AS LAST_UPD_DATE, dim_va_station.STANDARD_ZIP FROM WSMP_ADMIN.DIM_VA_STATION;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_anda_sales_backup AS
SELECT STG_ANDA_SALES.TRANSACTION_ID, to_char(STG_ANDA_SALES.INVOICE_DATE, 'YYYY-MM-DD'::varchar(10)) AS INVOICE_DATE, STG_ANDA_SALES.PRODUCT_BRAND, STG_ANDA_SALES.PRODUCT_NDC, STG_ANDA_SALES.PRODUCT_DESC, STG_ANDA_SALES.INVOICE_QTY, STG_ANDA_SALES.INVOICE_UNITS, STG_ANDA_SALES.INVOICE_COST, STG_ANDA_SALES.INVOICE_PACK_COST, STG_ANDA_SALES.INVOICE_UNIT_COST, STG_ANDA_SALES.CONTRACT_PACK_COST, STG_ANDA_SALES.CONTRACT_PURCHASES, STG_ANDA_SALES.CONTRACT_NUMBER, STG_ANDA_SALES.DISPENSING_LOCATION, STG_ANDA_SALES.DL_ADDRESS_1, STG_ANDA_SALES.DL_ADDRESS_2, STG_ANDA_SALES.DL_CITY, STG_ANDA_SALES.DL_STATE, STG_ANDA_SALES.DL_ZIP, STG_ANDA_SALES.DL_DEA_NUM, STG_ANDA_SALES.DEPOT_LOCATION, STG_ANDA_SALES.DEP_ADDRESS_1, STG_ANDA_SALES.DEP_ADDRESS_2, STG_ANDA_SALES.DEP_CITY, STG_ANDA_SALES.DEP_STATE, STG_ANDA_SALES.DEP_ZIP, STG_ANDA_SALES.DEP_DEA_NUM, STG_ANDA_SALES.UNIT_AP, STG_ANDA_SALES.AP FROM WSMP_ADMIN.STG_ANDA_SALES;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_cns_deciles AS
SELECT d.ims_id AS hcp_id, CASE d.decile_name WHEN NULLSEQUAL 'Modafinil'::varchar(9) THEN 'Wake'::varchar(4) ELSE d.decile_name END AS decile_name, d.trx_cnt_01_06 AS decile_value FROM WSMP_ADMIN.tfc_ims_decile d WHERE ((d.decile_name = ANY (ARRAY['Fentora'::varchar(7), 'Actiq'::varchar(5), 'Nuvigil'::varchar(7), 'Amrix'::varchar(5), 'Azilect'::varchar(7), 'Copaxone'::varchar(8)])) AND (NOT EXISTS (SELECT NULL FROM WSMP_ADMIN.tfc_ims_presc_demo_w pd WHERE ((pd.ims_id = d.ims_id) AND (pd.pdrp_flag = 'Y'::char(1)))))) UNION ALL SELECT d.ims_id AS hcp_id, CASE d.decile_name WHEN NULLSEQUAL 'Modafinil'::varchar(9) THEN 'Wake'::varchar(4) ELSE d.decile_name END AS decile_name, d.trx_cnt_01_06 AS decile_value FROM WSMP_ADMIN.tfc_ims_decile d WHERE (d.decile_name = ANY (ARRAY['TIRF Total'::varchar(10), 'Total Combo SAO'::varchar(15), 'Total Opioid Market'::varchar(19), 'Total LAO'::varchar(9), 'Total Pure SAO'::varchar(14), 'Branded Sleep / Sedative'::varchar(24), 'Modafinil'::varchar(9), 'Muscle Relaxant Market'::varchar(22)]));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_copay_voucher_program_backup AS
SELECT DIM_ASI_PROGRAM.REDEMPTION_TYPE, DIM_ASI_PROGRAM.ASI_PROGRAM_NUM, DIM_ASI_PROGRAM.PROGRAM_DESC, DIM_ASI_PROGRAM.SALES_FORCE_ID, DIM_ASI_PROGRAM.PROGRAM_TYPE, DIM_ASI_PROGRAM.PRODUCT_NAME, to_char(DIM_ASI_PROGRAM.PROGRAM_START_DATE, 'YYYY-MM-DD'::varchar(10)) AS PROGRAM_START_DATE, to_char(DIM_ASI_PROGRAM.PROGRAM_END_DATE, 'YYYY-MM-DD'::varchar(10)) AS PROGRAM_END_DATE, DIM_ASI_PROGRAM.NUMBER_OF_TABLETS FROM WSMP_ADMIN.DIM_ASI_PROGRAM;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_copay_voucher_redemption_backup AS
SELECT coalesce(tfc_asi_copay_detail_wkly.VEEVA_ACCOUNT_ID, tfc_asi_copay_detail_wkly.IMS_ID) AS veeva_account_id, tfc_asi_copay_detail_wkly.IMS_ID AS ims_id, tfc_asi_copay_detail_wkly.REDEMPTION_TYPE AS redemption_type, to_char(tfc_asi_copay_detail_wkly.FILL_DATE, 'YYYY-MM-DD'::varchar(10)) AS fill_date, to_char(tfc_asi_copay_detail_wkly.HCP_DATE_WRITTEN, 'YYYY-MM-DD'::varchar(10)) AS hcp_date_written, tfc_asi_copay_detail_wkly.DAYS_SUPPLY AS days_supply, tfc_asi_copay_detail_wkly.NDC_CODE AS ndc_code, tfc_asi_copay_detail_wkly.BRAND_NAME AS brand_name, tfc_asi_copay_detail_wkly.QTY AS qty, tfc_asi_copay_detail_wkly.REFILLS AS refills, tfc_asi_copay_detail_wkly.PROGRAM_NUM AS program_num, tfc_asi_copay_detail_wkly.COPAY_CARD_NUM AS copay_voucher_num, tfc_asi_copay_detail_wkly.PHARMACY_CHAIN_NUM AS pharmacy_chain_num, tfc_asi_copay_detail_wkly.PHARMACY_CHAIN AS pharmacy_chain, tfc_asi_copay_detail_wkly.PHARMACY_NAME AS pharmacy_name, tfc_asi_copay_detail_wkly.PHARMACY_ADDRESS AS pharmacy_address, tfc_asi_copay_detail_wkly.PHARMACY_ADDRESS2 AS pharmacy_address2, tfc_asi_copay_detail_wkly.PHARMACY_CITY AS pharmacy_city, tfc_asi_copay_detail_wkly.PHARMACY_STATE AS pharmacy_state, tfc_asi_copay_detail_wkly.PHARMACY_ZIP AS pharmacy_zip, tfc_asi_copay_detail_wkly.PHARMACY_NPI_NUM AS pharmacy_npi_num, NULL AS ceph_id, tfc_asi_copay_detail_wkly.ME_NUM AS me_num, tfc_asi_copay_detail_wkly.PRINCIPLE_PHYS_DEA_NUM AS principle_phys_dea_num, tfc_asi_copay_detail_wkly.PRINCIPLE_PHYS_NPI_NUM AS principle_phys_npi_num, tfc_asi_copay_detail_wkly.PHYSICIAN_NAME AS physician_name, tfc_asi_copay_detail_wkly.ASI_PHYS_ADDRESS1 AS physician_address1, tfc_asi_copay_detail_wkly.ASI_PHYS_ADDRESS2 AS physician_address2, tfc_asi_copay_detail_wkly.ASI_PHYS_CITY AS physician_city, tfc_asi_copay_detail_wkly.ASI_PHYS_STATE AS physician_state, tfc_asi_copay_detail_wkly.ASI_PHYS_ZIP AS physician_zip, tfc_asi_copay_detail_wkly.REBATE_AMOUNT AS rebate_amount, tfc_asi_copay_detail_wkly.MEMBER_CASH_EXPENSE AS member_cash_expense, tfc_asi_copay_detail_wkly.SUBMITTED_COST AS submitted_cost, tfc_asi_copay_detail_wkly.PHARMACY_FEE AS pharmacy_fee, tfc_asi_copay_detail_wkly.TOTAL_AMOUNT_DUE AS total_amount_due, tfc_asi_copay_detail_wkly.CALC_AWP AS calc_awp, tfc_asi_copay_detail_wkly.OCC_PAYMENT_TYPE AS occ_payment_type, tfc_asi_copay_detail_wkly.NEW_REFILL AS new_refill FROM WSMP_ADMIN.TFC_ASI_COPAY_DETAIL_WKLY WHERE ((tfc_asi_copay_detail_wkly.BRAND_NAME = ANY (ARRAY['NUVIGIL'::varchar(7), 'FENTORA'::varchar(7), 'AMRIX'::varchar(5), 'ADIPEX-P'::varchar(8), 'TEV-TROPIN'::varchar(10), 'AZILECT'::varchar(7), 'QUARTETTE'::varchar(9)])) AND (tfc_asi_copay_detail_wkly.FILL_DATE < (statement_timestamp())::timestamp) AND (tfc_asi_copay_detail_wkly.HCP_DATE_WRITTEN < (statement_timestamp())::timestamp) AND (months_between((statement_timestamp())::timestamp, tfc_asi_copay_detail_wkly.FILL_DATE) <= 25::float)) UNION ALL SELECT coalesce(tfc_asi_redemption_detail_wkly.VEEVA_ACCOUNT_ID, tfc_asi_redemption_detail_wkly.IMS_ID) AS veeva_account_id, tfc_asi_redemption_detail_wkly.IMS_ID AS ims_id, tfc_asi_redemption_detail_wkly.REDEMPTION_TYPE AS redemption_type, to_char(tfc_asi_redemption_detail_wkly.FILL_DATE, 'YYYY-MM-DD'::varchar(10)) AS fill_date, to_char(tfc_asi_redemption_detail_wkly.HCP_DATE_WRITTEN, 'YYYY-MM-DD'::varchar(10)) AS hcp_date_written, tfc_asi_redemption_detail_wkly.DAYS_SUPPLY AS days_supply, tfc_asi_redemption_detail_wkly.NDC_CODE AS ndc_code, tfc_asi_redemption_detail_wkly.PRODUCT_NAME AS brand_name, tfc_asi_redemption_detail_wkly.QTY AS qty, tfc_asi_redemption_detail_wkly.REFILLS AS refills, tfc_asi_redemption_detail_wkly.PROGRAM_NUM AS program_num, tfc_asi_redemption_detail_wkly.VOUCHER_NUM AS copay_voucher_num, tfc_asi_redemption_detail_wkly.PHARMACY_CHAIN_NUM AS pharmacy_chain_num, tfc_asi_redemption_detail_wkly.PHARMACY_CHAIN AS pharmacy_chain, tfc_asi_redemption_detail_wkly.PHARMACY_NAME AS pharmacy_name, tfc_asi_redemption_detail_wkly.PHARMACY_ADDRESS AS pharmacy_address, NULL AS pharmacy_address2, tfc_asi_redemption_detail_wkly.PHARMACY_CITY AS pharmacy_city, tfc_asi_redemption_detail_wkly.PHARMACY_STATE AS pharmacy_state, tfc_asi_redemption_detail_wkly.PHARMACY_ZIP AS pharmacy_zip, tfc_asi_redemption_detail_wkly.PHARMACY_NPI_NUM AS pharmacy_npi_num, NULL AS ceph_id, tfc_asi_redemption_detail_wkly.ME_NUM AS me_num, tfc_asi_redemption_detail_wkly.DEA_NUM AS dea_num, tfc_asi_redemption_detail_wkly.NPI AS npi, tfc_asi_redemption_detail_wkly.PROVIDER_NAME AS provider_name, tfc_asi_redemption_detail_wkly.PROVIDER_ADDRESS AS provider_address, NULL AS physician_address2, tfc_asi_redemption_detail_wkly.PROVIDER_CITY AS provider_city, tfc_asi_redemption_detail_wkly.PROVIDER_STATE AS provider_state, tfc_asi_redemption_detail_wkly.PROVIDER_ZIP AS provider_zip, tfc_asi_redemption_detail_wkly.REBATE_AMOUNT AS rebate_amount, tfc_asi_redemption_detail_wkly.MEMBER_CASH_EXPENSE AS member_cash_expense, tfc_asi_redemption_detail_wkly.SUBMITTED_COST AS submitted_cost, tfc_asi_redemption_detail_wkly.PHARMACY_FEE AS pharmacy_fee, tfc_asi_redemption_detail_wkly.TOTAL_AMOUNT_DUE AS total_amount_due, tfc_asi_redemption_detail_wkly.CALC_AWP AS calc_awp, NULL AS occ_payment_type, tfc_asi_redemption_detail_wkly.NEW_REFILL AS new_refill FROM WSMP_ADMIN.TFC_ASI_REDEMPTION_DETAIL_WKLY WHERE ((tfc_asi_redemption_detail_wkly.PRODUCT_NAME = ANY (ARRAY['NUVIGIL'::varchar(7), 'FENTORA'::varchar(7), 'AMRIX'::varchar(5), 'ADIPEX-P'::varchar(8), 'TEV-TROPIN'::varchar(10), 'AZILECT'::varchar(7), 'QUARTETTE'::varchar(9)])) AND (tfc_asi_redemption_detail_wkly.FILL_DATE < (statement_timestamp())::timestamp) AND (tfc_asi_redemption_detail_wkly.HCP_DATE_WRITTEN < (statement_timestamp())::timestamp) AND (months_between((statement_timestamp())::timestamp, tfc_asi_redemption_detail_wkly.FILL_DATE) <= 25::float));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_omnicare_sale_backup AS
SELECT STG_OMNICARE_SALES.TRANSACTION_ID, to_char(STG_OMNICARE_SALES.INVOICE_DATE, 'YYYY-MM-DD'::varchar(10)) AS INVOICE_DATE, STG_OMNICARE_SALES.PRODUCT_BRAND, STG_OMNICARE_SALES.PRODUCT_NDC, STG_OMNICARE_SALES.PRODUCT_DESC, STG_OMNICARE_SALES.INVOICE_QTY, STG_OMNICARE_SALES.INVOICE_UNITS, STG_OMNICARE_SALES.INVOICE_COST, STG_OMNICARE_SALES.INVOICE_PACK_COST, STG_OMNICARE_SALES.INVOICE_UNIT_COST, STG_OMNICARE_SALES.CONTRACT_PACK_COST, STG_OMNICARE_SALES.CONTRACT_PURCHASES, STG_OMNICARE_SALES.CONTRACT_NUMBER, STG_OMNICARE_SALES.DISPENSING_LOCATION, STG_OMNICARE_SALES.DL_ADDRESS_1, STG_OMNICARE_SALES.DL_ADDRESS_2, STG_OMNICARE_SALES.DL_CITY, STG_OMNICARE_SALES.DL_STATE, STG_OMNICARE_SALES.DL_ZIP, STG_OMNICARE_SALES.DL_DEA_NUM, STG_OMNICARE_SALES.DEPOT_LOCATION, STG_OMNICARE_SALES.DEP_ADDRESS_1, STG_OMNICARE_SALES.DEP_ADDRESS_2, STG_OMNICARE_SALES.DEP_CITY, STG_OMNICARE_SALES.DEP_STATE, STG_OMNICARE_SALES.DEP_ZIP, STG_OMNICARE_SALES.DEP_DEA_NUM, STG_OMNICARE_SALES.UNIT_AP, STG_OMNICARE_SALES.AP FROM WSMP_ADMIN.STG_OMNICARE_SALES;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_paragard_anda_sales_backup AS
SELECT ('A'::varchar(1) || lpad((STG_TW_ANDA_SALES.CUSTOMER_NO)::varchar, 9, '0'::varchar(1))) AS BP_CODE, NULL AS ORTHO_E, STG_TW_ANDA_SALES.CUSTOMER AS BP_NAME, coalesce(STG_TW_ANDA_SALES.CUSTOMER_ADDRESS_LINE2, STG_TW_ANDA_SALES.CUSTOMER_ADDRESS_LINE1) AS SHIP_TO_ADDRESS, STG_TW_ANDA_SALES.CITY AS SHIP_TO_CITY, STG_TW_ANDA_SALES.STATE AS SHIP_TO_STATE, STG_TW_ANDA_SALES.ZIP AS SHIP_TO_ZIP_CODE, NULL AS SHIP_TO_COUNTRY, NULL AS SHIP_TO_PHONE, NULL AS SHIP_TO_FAX, NULL AS SHIP_TO_EMAIL, coalesce(STG_TW_ANDA_SALES.BILL_ADDRESS_LINE2, STG_TW_ANDA_SALES.BILL_ADDRESS_LINE1) AS BILL_TO_ADDRESS, STG_TW_ANDA_SALES.BILL_CITY AS BILL_TO_CITY, STG_TW_ANDA_SALES.BILL_STATE AS BILL_TO_STATE, STG_TW_ANDA_SALES.BILL_ZIP AS BILL_TO_ZIP_CODE, NULL AS BILL_TO_COUNTRY, NULL AS BILL_TO_PHONE, NULL AS BILL_TO_FAX, NULL AS BILL_TO_EMAIL, STG_TW_ANDA_SALES.CUSTOMER_TYPE_CD AS CLASS_OF_TRADE, STG_TW_ANDA_SALES.ORDER_NO AS INVOICE_NUM, STG_TW_ANDA_SALES.NET_COST AS DEL_AMT, to_char(to_date(STG_TW_ANDA_SALES.SALES_DATE, 'MM/DD/YY'::varchar(8)), 'YYYY-MM-DD'::varchar(10)) AS INVOICE_DATE, STG_TW_ANDA_SALES.UNITS_NET AS "24237", NULL AS "24238", NULL AS "24800", NULL AS "33223", STG_TW_ANDA_SALES.PACKAGE_SIZE AS PACKS, NULL AS UNIT_PRICE, NULL AS TERRITORY, NULL AS ORDER_TYPE_CODE, NULL AS ORDER_TYPE_DESC, NULL AS LOB_CODE_DESC, NULL AS PRICE_MATRIX_DEF, ('A'::varchar(1) || lpad((STG_TW_ANDA_SALES.BILL_CUSTOMER_NO)::varchar, 9, '0'::varchar(1))) AS PARENT_BP_CODE, NULL AS PARENT_BP_DESC, NULL AS GRAND_PARENT_BP_DESC, NULL AS PO_NUMBER, NULL AS UPS_NUMBER, STG_TW_ANDA_SALES.ORDER_NO AS ORDER_NUMBER, NULL AS ORDER_LINE_NUMBER, NULL AS DISC_AMT, NULL AS WHSE_CD FROM WSMP_ADMIN.STG_TW_ANDA_SALES WHERE (STG_TW_ANDA_SALES.BRAND ~~ '%PARAGARD%'::varchar(10));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_tb_cb_accountsummary AS
SELECT STG_TB_CB_ACCOUNTS.ACCOUNT_ID, STG_TB_CB_ACCOUNTS.LOCATION_ID, STG_TB_CB_ACCOUNTS.DEA_NUMBER, STG_TB_CB_ACCOUNTS.END_CUSTOMER, STG_TB_CB_ACCOUNTS.ADDRESS_1, STG_TB_CB_ACCOUNTS.ADDRESS_2, STG_TB_CB_ACCOUNTS.CITY, STG_TB_CB_ACCOUNTS.STATE, STG_TB_CB_ACCOUNTS.ZIP, STG_TB_CB_ACCOUNTS.CONTRACT_TITLE, STG_TB_CB_ACCOUNTS.CONTRACT_ID, STG_TB_CB_ACCOUNTS.WHOLESALER_NAME, STG_TB_CB_ACCOUNTS.HIN, STG_TB_CB_ACCOUNTS.CONTRACT_ALIAS, STG_TB_CB_ACCOUNTS.WHOLESALER_DEA, STG_TB_CB_ACCOUNTS.COT_SOURCE, STG_TB_CB_ACCOUNTS.CLASS_OF_TRADE FROM WSMP_ADMIN.STG_TB_CB_ACCOUNTS;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_tb_cb_transactions_backup AS
SELECT STG_TB_CB_TRANSACTIONS.ACCOUNT_ID, STG_TB_CB_TRANSACTIONS.LOCATION_ID, to_char(STG_TB_CB_TRANSACTIONS.SHIPMENT_DATE, 'YYYY-MM-DD'::varchar(10)) AS SHIPMENT_DATE, STG_TB_CB_TRANSACTIONS.NDC_CODE, STG_TB_CB_TRANSACTIONS.PRODUCT_NAME, STG_TB_CB_TRANSACTIONS.CONTRACT_ID, STG_TB_CB_TRANSACTIONS.CHARGEBACK_UNITS, STG_TB_CB_TRANSACTIONS.CHARGEBACK_DOLLARS, to_char(STG_TB_CB_TRANSACTIONS.RECEIPT_DATE, 'YYYY-MM-DD'::varchar(10)) AS RECEIPT_DATE, STG_TB_CB_TRANSACTIONS.UNIT_AP, STG_TB_CB_TRANSACTIONS.AP, STG_TB_CB_TRANSACTIONS.DEBIT_MEMO_NUM, to_char(STG_TB_CB_TRANSACTIONS.CREDIT_MEMO_DATE, 'YYYY-MM-DD HH24:MI:SS'::varchar(21)) AS CREDIT_MEMO_DATE, STG_TB_CB_TRANSACTIONS.CREDIT_MEMO_NUM, to_char(STG_TB_CB_TRANSACTIONS.SETTLEMENT_DATE, 'YYYY-MM-DD HH24:MI:SS'::varchar(21)) AS SETTLEMENT_DATE, STG_TB_CB_TRANSACTIONS.CONTRACT_PRICE, STG_TB_CB_TRANSACTIONS.CONTRACT_ALIAS FROM WSMP_ADMIN.STG_TB_CB_TRANSACTIONS;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_tb_ds_transactions_backup AS
SELECT STG_TB_DS_TRANSACTIONS.ACCOUNT_ID, STG_TB_DS_TRANSACTIONS.LOCATION_ID, to_char(STG_TB_DS_TRANSACTIONS.SHIPMENT_DATE, 'YYYY-MM-DD'::varchar(10)) AS SHIPMENT_DATE, STG_TB_DS_TRANSACTIONS.NDC_CODE, STG_TB_DS_TRANSACTIONS.PRODUCT_NAME, STG_TB_DS_TRANSACTIONS.TRANSACTION_TYPE, STG_TB_DS_TRANSACTIONS.DIRECT_SALES_UNITS, STG_TB_DS_TRANSACTIONS.DIRECT_SALES_DOLLARS, STG_TB_DS_TRANSACTIONS.UNIT_AP, STG_TB_DS_TRANSACTIONS.AP FROM WSMP_ADMIN.STG_TB_DS_TRANSACTIONS;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_ddd_subcategory AS
SELECT DIM_DDD_SUBCATEGORY.SUBCATEGORY_CODE, DIM_DDD_SUBCATEGORY.CATEGORY_CODE, DIM_DDD_SUBCATEGORY.COT_CODE, DIM_DDD_SUBCATEGORY.MAILORDER_FLAG, DIM_DDD_SUBCATEGORY.NONRETAIL_FLAG, DIM_DDD_SUBCATEGORY.OUTLET_EXAMPLE, DIM_DDD_SUBCATEGORY.OUTLET_DESC, DIM_DDD_SUBCATEGORY.OUTLET_DEFN, DIM_DDD_SUBCATEGORY.MDM_FLAG, DIM_DDD_SUBCATEGORY.ADM_FLAG, DIM_DDD_SUBCATEGORY.ONC_SUBCAT_GROUP FROM WSMP_ADMIN.DIM_DDD_SUBCATEGORY;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_dnc AS
SELECT dnc.IMS_ID AS ims_id, dea.DEA_NUM AS dea_num, dnc.LAST_NAME AS last_name, dnc.FIRST_NAME AS first_name, dnc.MIDDLE_NAME AS mid_name, dnc.ADDRESS AS address, dnc.CITY AS city, dnc.STATE AS state, dnc.ZIP AS zip, npi.NPI AS npi FROM ((WSMP_ADMIN.DIM_DNC dnc LEFT JOIN WSMP_ADMIN.STG_IMS_DEA dea ON ((dnc.IMS_ID = dea.IMS_ID))) LEFT JOIN WSMP_ADMIN.STG_IMS_NPI npi ON ((dnc.IMS_ID = npi.IMS_ID))) WHERE ((dnc.PRODUCT_NAME = 'NUVIGIL'::varchar(7)) AND (dnc.SALES_FORCE_ID = 'TC'::varchar(2)) AND ((dea.DEA_NUM IS NULL) OR (regexp_replace(dea.DEA_NUM, '[0-9]'::varchar(5), ''::varchar, 1, 0, ''::varchar) IS NOT NULL)) AND ((dea.DEA_NUM IS NOT NULL) OR (npi.NPI IS NOT NULL)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_IMSZip_List AS
SELECT CASE WHEN (length(stg_ims_presc_demo_w.ims_id) = 8) THEN ('XX'::varchar(2) || substr(stg_ims_presc_demo_w.ims_id, 4)) ELSE stg_ims_presc_demo_w.ims_id END AS ims_id, stg_ims_presc_demo_w.ims_zip AS zip FROM WSMP_ADMIN.STG_IMS_PRESC_DEMO_W WHERE ((stg_ims_presc_demo_w.sales_force_id = 'TR'::varchar(2)) AND ((stg_ims_presc_demo_w.last_name <> 'l32123'::varchar(6)) OR (stg_ims_presc_demo_w.last_name IS NULL) OR (length(stg_ims_presc_demo_w.ims_id) = 8))) GROUP BY CASE WHEN (length(stg_ims_presc_demo_w.ims_id) = 8) THEN ('XX'::varchar(2) || substr(stg_ims_presc_demo_w.ims_id, 4)) ELSE stg_ims_presc_demo_w.ims_id END, stg_ims_presc_demo_w.ims_zip ORDER BY CASE WHEN (length(stg_ims_presc_demo_w.ims_id) = 8) THEN ('XX'::varchar(2) || substr(stg_ims_presc_demo_w.ims_id, 4)) ELSE stg_ims_presc_demo_w.ims_id END;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Nuvigil_Product_Totals AS
SELECT rx.PRODUCT_CODE AS product_code, sum(CASE rx.MONTH_BUCKET WHEN 24::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt24, sum(CASE rx.MONTH_BUCKET WHEN 24::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt24, sum(CASE rx.MONTH_BUCKET WHEN 23::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt23, sum(CASE rx.MONTH_BUCKET WHEN 23::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt23, sum(CASE rx.MONTH_BUCKET WHEN 22::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt22, sum(CASE rx.MONTH_BUCKET WHEN 22::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt22, sum(CASE rx.MONTH_BUCKET WHEN 21::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt21, sum(CASE rx.MONTH_BUCKET WHEN 21::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt21, sum(CASE rx.MONTH_BUCKET WHEN 20::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt20, sum(CASE rx.MONTH_BUCKET WHEN 20::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt20, sum(CASE rx.MONTH_BUCKET WHEN 19::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt19, sum(CASE rx.MONTH_BUCKET WHEN 19::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt19, sum(CASE rx.MONTH_BUCKET WHEN 18::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt18, sum(CASE rx.MONTH_BUCKET WHEN 18::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt18, sum(CASE rx.MONTH_BUCKET WHEN 17::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt17, sum(CASE rx.MONTH_BUCKET WHEN 17::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt17, sum(CASE rx.MONTH_BUCKET WHEN 16::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt16, sum(CASE rx.MONTH_BUCKET WHEN 16::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt16, sum(CASE rx.MONTH_BUCKET WHEN 15::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt15, sum(CASE rx.MONTH_BUCKET WHEN 15::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt15, sum(CASE rx.MONTH_BUCKET WHEN 14::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt14, sum(CASE rx.MONTH_BUCKET WHEN 14::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt14, sum(CASE rx.MONTH_BUCKET WHEN 13::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt13, sum(CASE rx.MONTH_BUCKET WHEN 13::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt13, sum(CASE rx.MONTH_BUCKET WHEN 12::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt12, sum(CASE rx.MONTH_BUCKET WHEN 12::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt12, sum(CASE rx.MONTH_BUCKET WHEN 11::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt11, sum(CASE rx.MONTH_BUCKET WHEN 11::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt11, sum(CASE rx.MONTH_BUCKET WHEN 10::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt10, sum(CASE rx.MONTH_BUCKET WHEN 10::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt10, sum(CASE rx.MONTH_BUCKET WHEN 9::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt9, sum(CASE rx.MONTH_BUCKET WHEN 9::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt9, sum(CASE rx.MONTH_BUCKET WHEN 8::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt8, sum(CASE rx.MONTH_BUCKET WHEN 8::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt8, sum(CASE rx.MONTH_BUCKET WHEN 7::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt7, sum(CASE rx.MONTH_BUCKET WHEN 7::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt7, sum(CASE rx.MONTH_BUCKET WHEN 6::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt6, sum(CASE rx.MONTH_BUCKET WHEN 6::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt6, sum(CASE rx.MONTH_BUCKET WHEN 5::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt5, sum(CASE rx.MONTH_BUCKET WHEN 5::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt5, sum(CASE rx.MONTH_BUCKET WHEN 4::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt4, sum(CASE rx.MONTH_BUCKET WHEN 4::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt4, sum(CASE rx.MONTH_BUCKET WHEN 3::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt3, sum(CASE rx.MONTH_BUCKET WHEN 3::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt3, sum(CASE rx.MONTH_BUCKET WHEN 2::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt2, sum(CASE rx.MONTH_BUCKET WHEN 2::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt2, sum(CASE rx.MONTH_BUCKET WHEN 1::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt1, sum(CASE rx.MONTH_BUCKET WHEN 1::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt1 FROM WSMP_ADMIN.DW_PRESC_PLAN_RX_M rx WHERE ((rx.PRODUCT_CODE = ANY (ARRAY['100N00'::varchar(6), '100100'::varchar(6), '100120'::varchar(6)])) AND (rx.MONTH_BUCKET >= 1::numeric(18,0)) AND (rx.MONTH_BUCKET <= 24::numeric(18,0))) GROUP BY rx.PRODUCT_CODE;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_pcs_ddd_nonretail AS
SELECT TFC_PCS_DDD_NONRETAIL.TERRITORY_NUM, TFC_PCS_DDD_NONRETAIL.OUTLET_CODE, TFC_PCS_DDD_NONRETAIL.SUBCATEGORY_CODE, TFC_PCS_DDD_NONRETAIL.CATEGORY_CODE, TFC_PCS_DDD_NONRETAIL.IMS_PRODUCT_CODE, TFC_PCS_DDD_NONRETAIL.PRODUCT_CODE, TFC_PCS_DDD_NONRETAIL.MTH_YYYYMM, TFC_PCS_DDD_NONRETAIL.QTY_MTH01, TFC_PCS_DDD_NONRETAIL.QTY_MTH02, TFC_PCS_DDD_NONRETAIL.QTY_MTH03, TFC_PCS_DDD_NONRETAIL.QTY_MTH04, TFC_PCS_DDD_NONRETAIL.QTY_MTH05, TFC_PCS_DDD_NONRETAIL.QTY_MTH06, TFC_PCS_DDD_NONRETAIL.QTY_MTH07, TFC_PCS_DDD_NONRETAIL.QTY_MTH08, TFC_PCS_DDD_NONRETAIL.QTY_MTH09, TFC_PCS_DDD_NONRETAIL.QTY_MTH10, TFC_PCS_DDD_NONRETAIL.QTY_MTH11, TFC_PCS_DDD_NONRETAIL.QTY_MTH12, TFC_PCS_DDD_NONRETAIL.QTY_MTH13, TFC_PCS_DDD_NONRETAIL.QTY_MTH14, TFC_PCS_DDD_NONRETAIL.QTY_MTH15, TFC_PCS_DDD_NONRETAIL.QTY_MTH16, TFC_PCS_DDD_NONRETAIL.QTY_MTH17, TFC_PCS_DDD_NONRETAIL.QTY_MTH18, TFC_PCS_DDD_NONRETAIL.QTY_MTH19, TFC_PCS_DDD_NONRETAIL.QTY_MTH20, TFC_PCS_DDD_NONRETAIL.QTY_MTH21, TFC_PCS_DDD_NONRETAIL.QTY_MTH22, TFC_PCS_DDD_NONRETAIL.QTY_MTH23, TFC_PCS_DDD_NONRETAIL.QTY_MTH24, TFC_PCS_DDD_NONRETAIL.OUTLET_NAME, TFC_PCS_DDD_NONRETAIL.OUTLET_ADDRESS, TFC_PCS_DDD_NONRETAIL.OUTLET_CITY, TFC_PCS_DDD_NONRETAIL.OUTLET_STATE, TFC_PCS_DDD_NONRETAIL.OUTLET_ZIP FROM WSMP_ADMIN.TFC_PCS_DDD_NONRETAIL;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_pdrp AS
SELECT d.IMS_ID AS ims_id, d.DEA_NUM AS dea_num, d.LAST_NAME AS last_name, d.FIRST_NAME AS first_name, d.MID_NAME AS mid_name, upper(CASE WHEN (d.SALES_FORCE_ID = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) THEN d.COMP_ADDRESS ELSE d.PTR_ADDRESS END) AS address, upper(CASE WHEN (d.SALES_FORCE_ID = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) THEN d.COMP_CITY ELSE d.PTR_CITY END) AS city, upper(CASE WHEN (d.SALES_FORCE_ID = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) THEN d.COMP_STATE ELSE d.PTR_STATE END) AS state, upper(CASE WHEN (d.SALES_FORCE_ID = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) THEN d.COMP_ZIP ELSE d.PTR_ZIP END) AS zip, npi.NPI AS npi FROM (WSMP_ADMIN.TFC_IMS_PRESC_DEMO_M d LEFT JOIN WSMP_ADMIN.STG_IMS_NPI npi ON ((d.IMS_ID = npi.IMS_ID))) WHERE ((d.PDRP_FLAG = 'Y'::char(1)) AND ((d.DEA_NUM IS NULL) OR (regexp_replace(d.DEA_NUM, '[0-9]'::varchar(5), ''::varchar, 1, 0, ''::varchar) IS NOT NULL)) AND ((d.DEA_NUM IS NOT NULL) OR (npi.NPI IS NOT NULL))) GROUP BY d.IMS_ID, d.DEA_NUM, d.LAST_NAME, d.FIRST_NAME, d.MID_NAME, upper(CASE WHEN (d.SALES_FORCE_ID = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) THEN d.COMP_ADDRESS ELSE d.PTR_ADDRESS END), upper(CASE WHEN (d.SALES_FORCE_ID = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) THEN d.COMP_CITY ELSE d.PTR_CITY END), upper(CASE WHEN (d.SALES_FORCE_ID = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) THEN d.COMP_STATE ELSE d.PTR_STATE END), upper(CASE WHEN (d.SALES_FORCE_ID = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) THEN d.COMP_ZIP ELSE d.PTR_ZIP END), npi.NPI;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_rems_extract_backup AS
SELECT coalesce(r.VEEVA_ACCOUNT_ID, r.IMS_ID) AS account_id, r.ENROLLMENT_ID AS enrollment_id, r.NPI AS npi, r.DEA_NUM AS dea_num, r.PROGRAM_ID AS program_id, substr(r.PROGRAM_NAME, 1, 4) AS REMS_PROGRAM, r.STATUS AS enrollment_status, r.IN_PROGRESS_STEP AS current_enrollment_step, to_char(r.EFFECTIVE_DATE, 'YYYY-MM-DD'::varchar(10)) AS effective_date, to_char(r.EXPIRATION_DATE, 'YYYY-MM-DD'::varchar(10)) AS expiration_date FROM WSMP_ADMIN.STG_REMS_PRESCRIBER r UNION SELECT coalesce(STG_REMS_FACILITY.VEEVA_ACCOUNT_ID, STG_REMS_FACILITY.ASI_ACCOUNT_ID) AS account_id, STG_REMS_FACILITY.ENROLLMENT_ID AS enrollment_id, STG_REMS_FACILITY.NPI AS npi, STG_REMS_FACILITY.DEA AS dea, STG_REMS_FACILITY.PROGRAM_ID AS program_id, STG_REMS_FACILITY.PROGRAM_NAME AS REMS_program, STG_REMS_FACILITY.STATUS_DESCRIPTION AS enrollment_status, STG_REMS_FACILITY.IN_PROGRESS_STEP AS current_enrollment_step, to_char(STG_REMS_FACILITY.EFFECTIVE_DATE, 'YYYY-MM-DD'::varchar(10)) AS effective_date, to_char(STG_REMS_FACILITY.EXPIRATION_DATE, 'YYYY-MM-DD'::varchar(10)) AS expiration_date FROM WSMP_ADMIN.STG_REMS_FACILITY;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_rems_program_lookup_backup AS
SELECT r.PROGRAM_ID AS program_id, r.PROGRAM_NAME AS program_name FROM WSMP_ADMIN.STG_REMS_PRESCRIBER r UNION SELECT stg_rems_facility.PROGRAM_ID AS program_id, stg_rems_facility.PROGRAM_NAME AS program_name FROM WSMP_ADMIN.STG_REMS_FACILITY;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_TC_Physician_Univ AS
SELECT npi.NPI AS npi, dc.dea_num, upper(dc.last_name) AS last_name, upper(dc.first_name) AS first_name, upper(dc.mid_name) AS middle_name, upper(dc.address) AS address, upper(dc.city) AS city, dc.state, dc.zip FROM WSMP_ADMIN.demo_combined dc, WSMP_ADMIN.STG_IMS_NPI npi WHERE (((dc.ims_id IS NOT NULL) OR (dc.dea_num IS NOT NULL)) AND (dc.ims_id = npi.IMS_ID) AND (dc.sales_force_id = 'TC'::varchar(2)) AND ((npi.NPI, dc.territory_num) IN (SELECT n.NPI AS npi, min(d.territory_num) AS min FROM WSMP_ADMIN.STG_IMS_NPI n, WSMP_ADMIN.demo_combined d WHERE ((d.sales_force_id = 'TC'::varchar(2)) AND (n.IMS_ID = d.ims_id)) GROUP BY n.NPI)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_TP_Physician_Univ AS
SELECT npi.NPI AS npi, dc.dea_num, upper(dc.last_name) AS last_name, upper(dc.first_name) AS first_name, upper(dc.mid_name) AS middle_name, upper(dc.address) AS address, upper(dc.city) AS city, dc.state, dc.zip FROM WSMP_ADMIN.demo_combined dc, WSMP_ADMIN.STG_IMS_NPI npi WHERE (((dc.ims_id IS NOT NULL) OR (dc.dea_num IS NOT NULL)) AND (dc.ims_id = npi.IMS_ID) AND (dc.sales_force_id = 'TP'::varchar(2)) AND ((npi.NPI, dc.territory_num) IN (SELECT n.NPI AS npi, min(d.territory_num) AS min FROM WSMP_ADMIN.STG_IMS_NPI n, WSMP_ADMIN.demo_combined d WHERE ((d.sales_force_id = 'TP'::varchar(2)) AND (n.IMS_ID = d.ims_id)) GROUP BY n.NPI)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_zs_tr_calls_obw AS
SELECT c.SALES_FORCE_ID AS sales_force_id, c.TERRITORY_NUM AS territory_num, c.VEEVA_ACCOUNT_ID AS veeva_account_id, c.IMS_ID AS ims_id, c.CALL_DATE AS call_date, cd1.PRODUCT AS first_product_detailed, cd2.PRODUCT AS second_product_detailed, cd3.PRODUCT AS third_product_detailed, cd4.PRODUCT AS fourth_product_detailed FROM ((((WSMP_ADMIN.DW_CALL c LEFT JOIN WSMP_ADMIN.DW_CALL_DETAIL cd1 ON (((c.DW_CALL_KEY = cd1.DW_CALL_KEY) AND (cd1.DETAIL_POSITION = 1::numeric(18,0))))) LEFT JOIN WSMP_ADMIN.DW_CALL_DETAIL cd2 ON (((c.DW_CALL_KEY = cd2.DW_CALL_KEY) AND (cd2.DETAIL_POSITION = 2::numeric(18,0))))) LEFT JOIN WSMP_ADMIN.DW_CALL_DETAIL cd3 ON (((c.DW_CALL_KEY = cd3.DW_CALL_KEY) AND (cd3.DETAIL_POSITION = 3::numeric(18,0))))) LEFT JOIN WSMP_ADMIN.DW_CALL_DETAIL cd4 ON (((c.DW_CALL_KEY = cd4.DW_CALL_KEY) AND (cd4.DETAIL_POSITION = 4::numeric(18,0))))) WHERE ((c.SALES_FORCE_ID = 'TR'::varchar(2)) AND (c.CALL_DATE > ((trunc(((statement_timestamp())::timestamp + 1::float), 'd'::varchar(1)) + (-2)::float) + (-42)::float)) AND (c.CALL_DATE <= (trunc(((statement_timestamp())::timestamp + 1::float), 'd'::varchar(1)) + (-2)::float)) AND (c.VEEVA_ACCOUNT_ID IN (SELECT vv_account.ID AS id FROM WSMP_ADMIN.VV_ACCOUNT WHERE (vv_account.ISPERSONACCOUNT = 'true'::varchar(4)))));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_debarred_with_veevaid AS
SELECT dnc.SALES_FORCE_ID AS sales_force_id, sln.veeva_id, sln.state_license_number, coalesce(dea.DEA_NUM, x.ID_NUM) AS dea_num FROM (((WSMP_ADMIN.DIM_DNC dnc LEFT JOIN (SELECT acc.ID AS veeva_id, acc.ID_VOD__C AS ims_id, addr.LICENSE_VOD__C AS state_license_number FROM (((((WSMP_ADMIN.VV_ACCOUNT acc JOIN WSMP_ADMIN.VV_RECORDTYPE rta ON ((acc.RECORDTYPEID = rta.ID))) JOIN WSMP_ADMIN.VV_ACCOUNTSHARE acctshr ON (((acc.ID = acctshr.ACCOUNTID) AND (acctshr.ROWCAUSE = 'TerritoryManual'::varchar(15))))) JOIN WSMP_ADMIN.VV_GROUP g ON ((acctshr.USERORGROUPID = g.ID))) JOIN WSMP_ADMIN.VV_TSF_VOD__C tsf ON (((tsf.ACCOUNT_VOD__C = acc.ID) AND (tsf.TERRITORY_VOD__C = g.DEVELOPERNAME)))) JOIN WSMP_ADMIN.VV_ADDRESS_VOD__C addr ON (((addr.ACCOUNT_VOD__C = acc.ID) AND (tsf.ADDRESS_VOD__C = addr.ID)))) WHERE ((g.DEVELOPERNAME ~~ 'TC%'::varchar(3)) AND (addr.LICENSE_VOD__C IS NOT NULL))) sln ON ((dnc.IMS_ID = sln.ims_id))) LEFT JOIN WSMP_ADMIN.STG_IMS_DEA dea ON ((dnc.IMS_ID = dea.IMS_ID))) LEFT JOIN WSMP_ADMIN.STG_CM_ID_XREF x ON (((dnc.CM_ID = x.CM_ID) AND (x.ID_TYPE = 'DEA_NUM'::varchar(7))))) WHERE ((dnc.DEBARRED = 'Y'::varchar(1)) AND (dnc.SALES_FORCE_ID = 'TC'::varchar(2)) AND ((dea.DEA_NUM IS NOT NULL) OR (sln.state_license_number IS NOT NULL))) GROUP BY dnc.SALES_FORCE_ID, sln.veeva_id, sln.state_license_number, coalesce(dea.DEA_NUM, x.ID_NUM);

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_do_not_promote_with_veevaid_backup AS
(SELECT d.SALES_FORCE_ID AS sales_force_id, acct.ID AS veeva_id, sln.state_license_number, dea.DEA_NUM AS dea_num, d.PRODUCT_NAME AS product_name, d.SPECIALTY_GROUP AS specialty_group, 'N'::varchar(1) AS app FROM (((WSMP_ADMIN.DIM_DNC d JOIN WSMP_ADMIN.STG_IMS_DEA dea ON ((d.IMS_ID = dea.IMS_ID))) LEFT JOIN (SELECT substr(g.DEVELOPERNAME, 1, 2) AS sales_force_id, acct.ID_VOD__C AS ims_id, addr.LICENSE_VOD__C AS state_license_number FROM ((((WSMP_ADMIN.VV_ACCOUNT acct JOIN WSMP_ADMIN.VV_RECORDTYPE rta ON ((acct.RECORDTYPEID = rta.ID))) JOIN WSMP_ADMIN.VV_ACCOUNTSHARE acctshr ON (((acct.ID = acctshr.ACCOUNTID) AND (acctshr.ROWCAUSE = 'TerritoryManual'::varchar(15))))) JOIN WSMP_ADMIN.VV_GROUP g ON ((acctshr.USERORGROUPID = g.ID))) JOIN WSMP_ADMIN.VV_ADDRESS_VOD__C addr ON ((addr.ACCOUNT_VOD__C = acct.ID))) WHERE ((addr.LICENSE_VOD__C IS NOT NULL) AND (acct.ID_VOD__C IS NOT NULL)) GROUP BY substr(g.DEVELOPERNAME, 1, 2), acct.ID_VOD__C, addr.LICENSE_VOD__C) sln ON (((d.IMS_ID = sln.ims_id) AND (d.SALES_FORCE_ID = sln.sales_force_id)))) LEFT JOIN WSMP_ADMIN.VV_ACCOUNT acct ON ((d.IMS_ID = acct.ID_VOD__C))) UNION SELECT 'TC'::varchar(2) AS sales_force_id, acct.ID AS veeva_id, addr.LICENSE_VOD__C AS state_license_number, dea.DEA_NUM AS dea_num, 'NUVIGIL'::varchar(7) AS product_name, ssx.SPECIALTY_CODE AS specialty_code, 'Y'::varchar(1) AS app FROM (((WSMP_ADMIN.VV_ACCOUNT acct JOIN WSMP_ADMIN.STG_IMS_DEA dea ON ((acct.ID_VOD__C = dea.IMS_ID))) LEFT JOIN WSMP_ADMIN.VV_ADDRESS_VOD__C addr ON (((addr.ACCOUNT_VOD__C = acct.ID) AND (addr.LICENSE_VOD__C IS NOT NULL)))) LEFT JOIN WSMP_ADMIN.SIEBEL_SPECIALTY_XREF ssx ON ((acct.SPECIALTY_1_VOD__C = ssx.SPECIALTY_DESCRIPTION))) WHERE (acct.NUVIGIL_APP_TVA__C = 'true'::varchar(4))) UNION SELECT 'TP'::varchar(2) AS sales_force_id, acct.ID AS veeva_id, addr.LICENSE_VOD__C AS state_license_number, dea.DEA_NUM AS dea_num, 'FENTORA'::varchar(7) AS product_name, ssx.SPECIALTY_CODE AS specialty_code, 'Y'::varchar(1) AS app FROM (((WSMP_ADMIN.VV_ACCOUNT acct JOIN WSMP_ADMIN.STG_IMS_DEA dea ON ((acct.ID_VOD__C = dea.IMS_ID))) LEFT JOIN WSMP_ADMIN.VV_ADDRESS_VOD__C addr ON (((addr.ACCOUNT_VOD__C = acct.ID) AND (addr.LICENSE_VOD__C IS NOT NULL)))) LEFT JOIN WSMP_ADMIN.SIEBEL_SPECIALTY_XREF ssx ON ((acct.SPECIALTY_1_VOD__C = ssx.SPECIALTY_DESCRIPTION))) WHERE (acct.FENTORA_APP_TVA__C = 'true'::varchar(4));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_cmop_rx AS
SELECT rx.STATION_NUMBER, rx.VA_PRODUCT, 0 AS PRODUCT_ID, rx.PRODUCT_CODE, to_char(rx.MONTH, 'YYYY-MM-DD'::varchar(10)) AS MONTH, CASE mod(rx.TRX_CNT, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((rx.TRX_CNT)::int)::varchar ELSE rtrim((rx.TRX_CNT)::varchar, '0'::varchar(1)) END AS TRX_CNT, CASE mod(rx.CMOP_CNT, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((rx.CMOP_CNT)::int)::varchar ELSE rtrim((rx.CMOP_CNT)::varchar, '0'::varchar(1)) END AS CMOP_CNT, CASE mod(rx.TRX_QTY, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((rx.TRX_QTY)::int)::varchar ELSE rtrim((rx.TRX_QTY)::varchar, '0'::varchar(1)) END AS TRX_QTY, CASE mod(rx.CMOP_QTY, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((rx.CMOP_QTY)::int)::varchar ELSE rtrim((rx.CMOP_QTY)::varchar, '0'::varchar(1)) END AS CMOP_QTY, CASE mod(rx.CNT_30_DAY_RX, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((rx.CNT_30_DAY_RX)::int)::varchar ELSE rtrim((rx.CNT_30_DAY_RX)::varchar, '0'::varchar(1)) END AS CNT_30_DAY_RX, rx.ID FROM (WSMP_ADMIN.DW_CMOP_RX_TEVA rx JOIN (SELECT dim_va_product_xref.WK_PROD_CODE AS wk_prod_code FROM CUSTOMER.DIM_VA_PRODUCT_XREF GROUP BY dim_va_product_xref.WK_PROD_CODE) p ON ((rx.PRODUCT_CODE = p.wk_prod_code)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_copay_voucher_program AS
SELECT DIM_ASI_PROGRAM.REDEMPTION_TYPE, DIM_ASI_PROGRAM.ASI_PROGRAM_NUM, DIM_ASI_PROGRAM.PROGRAM_DESC, DIM_ASI_PROGRAM.SALES_FORCE_ID, DIM_ASI_PROGRAM.PROGRAM_TYPE, DIM_ASI_PROGRAM.PRODUCT_NAME, to_char(DIM_ASI_PROGRAM.PROGRAM_START_DATE, 'YYYY-MM-DD'::varchar(10)) AS PROGRAM_START_DATE, to_char(DIM_ASI_PROGRAM.PROGRAM_END_DATE, 'YYYY-MM-DD'::varchar(10)) AS PROGRAM_END_DATE, (DIM_ASI_PROGRAM.NUMBER_OF_TABLETS)::int AS NUMBER_OF_TABLETS FROM WSMP_ADMIN.DIM_ASI_PROGRAM;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_copay_voucher_redemption AS
SELECT coalesce(TFC_ASI_COPAY_DETAIL_WKLY.VEEVA_ACCOUNT_ID, TFC_ASI_COPAY_DETAIL_WKLY.IMS_ID) AS veeva_account_id, TFC_ASI_COPAY_DETAIL_WKLY.IMS_ID AS ims_id, TFC_ASI_COPAY_DETAIL_WKLY.REDEMPTION_TYPE AS redemption_type, to_char(TFC_ASI_COPAY_DETAIL_WKLY.FILL_DATE, 'YYYY-MM-DD'::varchar(10)) AS fill_date, to_char(TFC_ASI_COPAY_DETAIL_WKLY.HCP_DATE_WRITTEN, 'YYYY-MM-DD'::varchar(10)) AS hcp_date_written, CASE mod(TFC_ASI_COPAY_DETAIL_WKLY.DAYS_SUPPLY, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_COPAY_DETAIL_WKLY.DAYS_SUPPLY)::int)::varchar ELSE rtrim((TFC_ASI_COPAY_DETAIL_WKLY.DAYS_SUPPLY)::varchar, '0'::varchar(1)) END AS days_supply, TFC_ASI_COPAY_DETAIL_WKLY.NDC_CODE AS ndc_code, TFC_ASI_COPAY_DETAIL_WKLY.BRAND_NAME AS brand_name, CASE mod(TFC_ASI_COPAY_DETAIL_WKLY.QTY, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_COPAY_DETAIL_WKLY.QTY)::int)::varchar ELSE rtrim((TFC_ASI_COPAY_DETAIL_WKLY.QTY)::varchar, '0'::varchar(1)) END AS qty, CASE mod(TFC_ASI_COPAY_DETAIL_WKLY.REFILLS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_COPAY_DETAIL_WKLY.REFILLS)::int)::varchar ELSE rtrim((TFC_ASI_COPAY_DETAIL_WKLY.REFILLS)::varchar, '0'::varchar(1)) END AS refills, TFC_ASI_COPAY_DETAIL_WKLY.PROGRAM_NUM AS program_num, TFC_ASI_COPAY_DETAIL_WKLY.COPAY_CARD_NUM AS copay_voucher_num, TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_CHAIN_NUM AS pharmacy_chain_num, TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_CHAIN AS pharmacy_chain, TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_NAME AS pharmacy_name, TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_ADDRESS AS pharmacy_address, TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_ADDRESS2 AS pharmacy_address2, TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_CITY AS pharmacy_city, TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_STATE AS pharmacy_state, TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_ZIP AS pharmacy_zip, CASE mod(TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_NPI_NUM, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_NPI_NUM)::int)::varchar ELSE rtrim((TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_NPI_NUM)::varchar, '0'::varchar(1)) END AS pharmacy_npi_num, NULL AS ceph_id, TFC_ASI_COPAY_DETAIL_WKLY.ME_NUM AS me_num, TFC_ASI_COPAY_DETAIL_WKLY.PRINCIPLE_PHYS_DEA_NUM AS principle_phys_dea_num, CASE mod(TFC_ASI_COPAY_DETAIL_WKLY.PRINCIPLE_PHYS_NPI_NUM, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_COPAY_DETAIL_WKLY.PRINCIPLE_PHYS_NPI_NUM)::int)::varchar ELSE rtrim((TFC_ASI_COPAY_DETAIL_WKLY.PRINCIPLE_PHYS_NPI_NUM)::varchar, '0'::varchar(1)) END AS principle_phys_npi_num, TFC_ASI_COPAY_DETAIL_WKLY.PHYSICIAN_NAME AS physician_name, TFC_ASI_COPAY_DETAIL_WKLY.ASI_PHYS_ADDRESS1 AS physician_address1, TFC_ASI_COPAY_DETAIL_WKLY.ASI_PHYS_ADDRESS2 AS physician_address2, TFC_ASI_COPAY_DETAIL_WKLY.ASI_PHYS_CITY AS physician_city, TFC_ASI_COPAY_DETAIL_WKLY.ASI_PHYS_STATE AS physician_state, TFC_ASI_COPAY_DETAIL_WKLY.ASI_PHYS_ZIP AS physician_zip, CASE mod(TFC_ASI_COPAY_DETAIL_WKLY.REBATE_AMOUNT, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_COPAY_DETAIL_WKLY.REBATE_AMOUNT)::int)::varchar ELSE rtrim((TFC_ASI_COPAY_DETAIL_WKLY.REBATE_AMOUNT)::varchar, '0'::varchar(1)) END AS rebate_amount, CASE mod(TFC_ASI_COPAY_DETAIL_WKLY.MEMBER_CASH_EXPENSE, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_COPAY_DETAIL_WKLY.MEMBER_CASH_EXPENSE)::int)::varchar ELSE rtrim((TFC_ASI_COPAY_DETAIL_WKLY.MEMBER_CASH_EXPENSE)::varchar, '0'::varchar(1)) END AS member_cash_expense, CASE mod(TFC_ASI_COPAY_DETAIL_WKLY.SUBMITTED_COST, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_COPAY_DETAIL_WKLY.SUBMITTED_COST)::int)::varchar ELSE rtrim((TFC_ASI_COPAY_DETAIL_WKLY.SUBMITTED_COST)::varchar, '0'::varchar(1)) END AS submitted_cost, CASE mod(TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_FEE, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_FEE)::int)::varchar ELSE rtrim((TFC_ASI_COPAY_DETAIL_WKLY.PHARMACY_FEE)::varchar, '0'::varchar(1)) END AS pharmacy_fee, CASE mod(TFC_ASI_COPAY_DETAIL_WKLY.TOTAL_AMOUNT_DUE, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_COPAY_DETAIL_WKLY.TOTAL_AMOUNT_DUE)::int)::varchar ELSE rtrim((TFC_ASI_COPAY_DETAIL_WKLY.TOTAL_AMOUNT_DUE)::varchar, '0'::varchar(1)) END AS total_amount_due, CASE mod(TFC_ASI_COPAY_DETAIL_WKLY.CALC_AWP, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_COPAY_DETAIL_WKLY.CALC_AWP)::int)::varchar ELSE rtrim((TFC_ASI_COPAY_DETAIL_WKLY.CALC_AWP)::varchar, '0'::varchar(1)) END AS calc_awp, TFC_ASI_COPAY_DETAIL_WKLY.OCC_PAYMENT_TYPE AS occ_payment_type, CASE mod(TFC_ASI_COPAY_DETAIL_WKLY.NEW_REFILL, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_COPAY_DETAIL_WKLY.NEW_REFILL)::int)::varchar ELSE rtrim((TFC_ASI_COPAY_DETAIL_WKLY.NEW_REFILL)::varchar, '0'::varchar(1)) END AS new_refill FROM WSMP_ADMIN.TFC_ASI_COPAY_DETAIL_WKLY WHERE ((TFC_ASI_COPAY_DETAIL_WKLY.BRAND_NAME = ANY (ARRAY['NUVIGIL'::varchar(7), 'FENTORA'::varchar(7), 'AMRIX'::varchar(5), 'ADIPEX-P'::varchar(8), 'TEV-TROPIN'::varchar(10), 'AZILECT'::varchar(7), 'QUARTETTE'::varchar(9)])) AND (TFC_ASI_COPAY_DETAIL_WKLY.FILL_DATE < (statement_timestamp())::timestamp) AND (TFC_ASI_COPAY_DETAIL_WKLY.HCP_DATE_WRITTEN < (statement_timestamp())::timestamp) AND (months_between((statement_timestamp())::timestamp, TFC_ASI_COPAY_DETAIL_WKLY.FILL_DATE) <= 25::float)) UNION ALL SELECT coalesce(TFC_ASI_REDEMPTION_DETAIL_WKLY.VEEVA_ACCOUNT_ID, TFC_ASI_REDEMPTION_DETAIL_WKLY.IMS_ID) AS veeva_account_id, TFC_ASI_REDEMPTION_DETAIL_WKLY.IMS_ID AS ims_id, TFC_ASI_REDEMPTION_DETAIL_WKLY.REDEMPTION_TYPE AS redemption_type, to_char(TFC_ASI_REDEMPTION_DETAIL_WKLY.FILL_DATE, 'YYYY-MM-DD'::varchar(10)) AS fill_date, to_char(TFC_ASI_REDEMPTION_DETAIL_WKLY.HCP_DATE_WRITTEN, 'YYYY-MM-DD'::varchar(10)) AS hcp_date_written, CASE mod(TFC_ASI_REDEMPTION_DETAIL_WKLY.DAYS_SUPPLY, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_REDEMPTION_DETAIL_WKLY.DAYS_SUPPLY)::int)::varchar ELSE rtrim((TFC_ASI_REDEMPTION_DETAIL_WKLY.DAYS_SUPPLY)::varchar, '0'::varchar(1)) END AS days_supply, TFC_ASI_REDEMPTION_DETAIL_WKLY.NDC_CODE AS ndc_code, TFC_ASI_REDEMPTION_DETAIL_WKLY.PRODUCT_NAME AS brand_name, CASE mod(TFC_ASI_REDEMPTION_DETAIL_WKLY.QTY, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_REDEMPTION_DETAIL_WKLY.QTY)::int)::varchar ELSE rtrim((TFC_ASI_REDEMPTION_DETAIL_WKLY.QTY)::varchar, '0'::varchar(1)) END AS qty, CASE mod(TFC_ASI_REDEMPTION_DETAIL_WKLY.REFILLS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_REDEMPTION_DETAIL_WKLY.REFILLS)::int)::varchar ELSE rtrim((TFC_ASI_REDEMPTION_DETAIL_WKLY.REFILLS)::varchar, '0'::varchar(1)) END AS refills, TFC_ASI_REDEMPTION_DETAIL_WKLY.PROGRAM_NUM AS program_num, TFC_ASI_REDEMPTION_DETAIL_WKLY.VOUCHER_NUM AS copay_voucher_num, TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_CHAIN_NUM AS pharmacy_chain_num, TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_CHAIN AS pharmacy_chain, TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_NAME AS pharmacy_name, TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_ADDRESS AS pharmacy_address, NULL AS pharmacy_address2, TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_CITY AS pharmacy_city, TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_STATE AS pharmacy_state, TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_ZIP AS pharmacy_zip, CASE mod(TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_NPI_NUM, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_NPI_NUM)::int)::varchar ELSE rtrim((TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_NPI_NUM)::varchar, '0'::varchar(1)) END AS pharmacy_npi_num, NULL AS ceph_id, TFC_ASI_REDEMPTION_DETAIL_WKLY.ME_NUM AS me_num, TFC_ASI_REDEMPTION_DETAIL_WKLY.DEA_NUM AS dea_num, CASE mod(TFC_ASI_REDEMPTION_DETAIL_WKLY.NPI, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_REDEMPTION_DETAIL_WKLY.NPI)::int)::varchar ELSE rtrim((TFC_ASI_REDEMPTION_DETAIL_WKLY.NPI)::varchar, '0'::varchar(1)) END AS npi, TFC_ASI_REDEMPTION_DETAIL_WKLY.PROVIDER_NAME AS provider_name, TFC_ASI_REDEMPTION_DETAIL_WKLY.PROVIDER_ADDRESS AS provider_address, NULL AS physician_address2, TFC_ASI_REDEMPTION_DETAIL_WKLY.PROVIDER_CITY AS provider_city, TFC_ASI_REDEMPTION_DETAIL_WKLY.PROVIDER_STATE AS provider_state, TFC_ASI_REDEMPTION_DETAIL_WKLY.PROVIDER_ZIP AS provider_zip, CASE mod(TFC_ASI_REDEMPTION_DETAIL_WKLY.REBATE_AMOUNT, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_REDEMPTION_DETAIL_WKLY.REBATE_AMOUNT)::int)::varchar ELSE rtrim((TFC_ASI_REDEMPTION_DETAIL_WKLY.REBATE_AMOUNT)::varchar, '0'::varchar(1)) END AS rebate_amount, CASE mod(TFC_ASI_REDEMPTION_DETAIL_WKLY.MEMBER_CASH_EXPENSE, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_REDEMPTION_DETAIL_WKLY.MEMBER_CASH_EXPENSE)::int)::varchar ELSE rtrim((TFC_ASI_REDEMPTION_DETAIL_WKLY.MEMBER_CASH_EXPENSE)::varchar, '0'::varchar(1)) END AS member_cash_expense, CASE mod(TFC_ASI_REDEMPTION_DETAIL_WKLY.SUBMITTED_COST, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_REDEMPTION_DETAIL_WKLY.SUBMITTED_COST)::int)::varchar ELSE rtrim((TFC_ASI_REDEMPTION_DETAIL_WKLY.SUBMITTED_COST)::varchar, '0'::varchar(1)) END AS submitted_cost, CASE mod(TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_FEE, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_FEE)::int)::varchar ELSE rtrim((TFC_ASI_REDEMPTION_DETAIL_WKLY.PHARMACY_FEE)::varchar, '0'::varchar(1)) END AS pharmacy_fee, CASE mod(TFC_ASI_REDEMPTION_DETAIL_WKLY.TOTAL_AMOUNT_DUE, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_REDEMPTION_DETAIL_WKLY.TOTAL_AMOUNT_DUE)::int)::varchar ELSE rtrim((TFC_ASI_REDEMPTION_DETAIL_WKLY.TOTAL_AMOUNT_DUE)::varchar, '0'::varchar(1)) END AS total_amount_due, CASE mod(TFC_ASI_REDEMPTION_DETAIL_WKLY.CALC_AWP, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_REDEMPTION_DETAIL_WKLY.CALC_AWP)::int)::varchar ELSE rtrim((TFC_ASI_REDEMPTION_DETAIL_WKLY.CALC_AWP)::varchar, '0'::varchar(1)) END AS calc_awp, NULL AS occ_payment_type, CASE mod(TFC_ASI_REDEMPTION_DETAIL_WKLY.NEW_REFILL, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((TFC_ASI_REDEMPTION_DETAIL_WKLY.NEW_REFILL)::int)::varchar ELSE rtrim((TFC_ASI_REDEMPTION_DETAIL_WKLY.NEW_REFILL)::varchar, '0'::varchar(1)) END AS new_refill FROM WSMP_ADMIN.TFC_ASI_REDEMPTION_DETAIL_WKLY WHERE ((TFC_ASI_REDEMPTION_DETAIL_WKLY.PRODUCT_NAME = ANY (ARRAY['NUVIGIL'::varchar(7), 'FENTORA'::varchar(7), 'AMRIX'::varchar(5), 'ADIPEX-P'::varchar(8), 'TEV-TROPIN'::varchar(10), 'AZILECT'::varchar(7), 'QUARTETTE'::varchar(9)])) AND (TFC_ASI_REDEMPTION_DETAIL_WKLY.FILL_DATE < (statement_timestamp())::timestamp) AND (TFC_ASI_REDEMPTION_DETAIL_WKLY.HCP_DATE_WRITTEN < (statement_timestamp())::timestamp) AND (months_between((statement_timestamp())::timestamp, TFC_ASI_REDEMPTION_DETAIL_WKLY.FILL_DATE) <= 25::float));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_rxnormalizationControl2014 AS
SELECT p.IMS_CLIENT_NUM_W AS ClientNo, p.IMS_REPORT_NUM_W_CNT AS RxReportNo, lpad(p.IMS_PRODUCT_GROUP_NUM, 9, '0'::varchar(1)) AS ProductGroupNo, p.IMS_REPORT_NUM_W_QTY AS CorrespondingUnitsReportNo, p.PRODUCT_NAME AS ProductGroupName, CASE mod(nf.DIVISOR, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((nf.DIVISOR)::int)::varchar ELSE rtrim((nf.DIVISOR)::varchar, '0'::varchar(1)) END AS Divisor, CASE mod(nf.MULTIPLIER, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((nf.MULTIPLIER)::int)::varchar ELSE rtrim((nf.MULTIPLIER)::varchar, '0'::varchar(1)) END AS Multiplier FROM (WSMP_ADMIN.DRM45_PRODUCT_2014 p JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Agile_Mktg_Mix_SP_Programs AS
SELECT p.EVENT_NUMBER, p.PARENT_EVENT_NUMBER, p.EVENT_NAME, p.EVENT_STATUS_CODE, p.EVENT_STATUS_DESCRIPTION, to_char(p.EVENT_STATUS_CHANGE_DATE, 'YYYY-MM-DD'::varchar(10)) AS EVENT_STATUS_CHANGE_DATE, to_char(p.EVENT_START_DATE, 'YYYY-MM-DD'::varchar(10)) AS EVENT_START_DATE, to_char(p.EVENT_END_DATE, 'YYYY-MM-DD'::varchar(10)) AS EVENT_END_DATE, p.EVENT_TIME_ZONE, p.FUNDING_SOURCE, p.EVENT_TYPE, p.EVENT_TYPE_DESCRIPTION, p.EVENT_FORMAT, p.EVENT_LOCATION, to_char(p.PENDING_MGMNT_APPROVAL_DATE, 'YYYY-MM-DD'::varchar(10)) AS PENDING_MGMNT_APPROVAL_DATE, to_char(p.EVENT_APPROVAL_DATE, 'YYYY-MM-DD'::varchar(10)) AS EVENT_APPROVAL_DATE, p.EVENT_APPROVER_ID, to_char(p.EVENT_SCHEDULE_DATE, 'YYYY-MM-DD'::varchar(10)) AS EVENT_SCHEDULE_DATE, to_char(p.ATTENDEE_CLOSEOUT_DATE, 'YYYY-MM-DD'::varchar(10)) AS ATTENDEE_CLOSEOUT_DATE, to_char(p.FINANCIAL_CLOSEOUT_DATE, 'YYYY-MM-DD'::varchar(10)) AS FINANCIAL_CLOSEOUT_DATE, to_char(p.CANCELLATION_DATE, 'YYYY-MM-DD'::varchar(10)) AS CANCELLATION_DATE, p.CANCELLATION_REASON, p.CANCELLATION_SOURCE, p.EVENT_VENUE_MIN_CNT_REQ_IND, p.EVENT_VENUE_MIN_COUNT, p.ESTIMATED_ATTENDANCE, p.VENUE_ID, p.VENUE_FULL_NAME, p.VENUE_ADDRESS_LINE_1, p.VENUE_ADDRESS_LINE_2, p.VENUE_ADDRESS_LINE_3, p.VENUE_ADDRESS_LINE_4, p.VENUE_CITY, p.VENUE_STATE_PROVINCE, p.VENUE_POSTAL_CODE, p.VENUE_POSTAL_EXTENDED_CODE, p.VENUE_COUNTRY_CODE, p.VENUE_CONTACT, p.VENUE_PHONE, p.VENUE_FAX, p.VENUE_EMAIL, p.TRADE_SECRET_INDICATOR, p.TRADE_SECRET_REASON, p.CUSTOM_FIELD_1, p.CUSTOM_FIELD_2, p.CUSTOM_FIELD_3, p.CUSTOM_FIELD_4, p.CUSTOM_FIELD_5, p.REC_STAT_CD, e.PAYMENT_ID AS payment_id, e.EXPENSE_CATEGORY AS expense_category, CASE mod(e.AMOUNT, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((e.AMOUNT)::int)::varchar ELSE rtrim((e.AMOUNT)::varchar, '0'::varchar(1)) END AS amount FROM (WSMP_ADMIN.STG_AHM_EVENT p LEFT JOIN WSMP_ADMIN.STG_AHM_EVENT_EXPENSE e ON ((e.EVENT_NUMBER = p.EVENT_NUMBER)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_caremark_external_match AS
SELECT foo2.caremark_md_id AS source_key, 'CAREMARK'::varchar(8) AS source_name, 'CAREMARK'::varchar(8) AS file_name, btrim(((foo2.first_name || ' '::varchar(1)) || foo2.last_name)) AS person_name, NULL AS organization_name, 99 AS ex_sub_type, 1 AS ex_hce_type, NULL AS ex_communication_type, NULL AS ex_alt_id_value, NULL AS ex_alt_id, NULL AS ex_communication_value, foo2.state AS ex_state, foo2.zip AS ex_zip, NULL AS ex_alt_id_state, foo2.city AS ex_city, NULL AS ex_suffix, btrim(((coalesce(foo2.first_name, ''::varchar) || ' '::varchar(1)) || coalesce(foo2.last_name, ''::varchar))) AS ex_person_name, NULL AS ex_organization_name, foo2.address1 AS address_part1, foo2.address1 AS ex_address_line1, foo2.address2 AS ex_address_line2, btrim(((coalesce(foo2.address1, ''::varchar) || ' '::varchar(1)) || coalesce(foo2.address2, ''::varchar))) AS ex_address FROM (SELECT foo1.CAREMARK_MD_ID AS caremark_md_id, foo1.LAST_NAME AS last_name, foo1.FIRST_NAME AS first_name, foo1.NPI AS npi, CASE WHEN ((foo1.ADDRESS1 IS NULL) AND (foo1.ADDRESS2 IS NOT NULL)) THEN foo1.ADDRESS2 WHEN ((foo1.ADDRESS1 ~~ 'STE %'::varchar(5)) AND (foo1.ADDRESS2 IS NOT NULL)) THEN foo1.ADDRESS2 ELSE foo1.ADDRESS1 END AS address1, CASE WHEN ((foo1.ADDRESS1 IS NULL) AND (foo1.ADDRESS2 IS NOT NULL)) THEN NULL WHEN ((foo1.ADDRESS1 ~~ 'STE %'::varchar(5)) AND (foo1.ADDRESS2 IS NOT NULL)) THEN foo1.ADDRESS1 ELSE foo1.ADDRESS2 END AS address2, foo1.CITY AS city, foo1.STATE AS state, foo1.ZIP AS zip, foo1.oldest_ship_date, foo1.SHIP_DATE AS current_ship_date, foo1.how_many_rows FROM (SELECT c.CAREMARK_MD_ID, c.LAST_NAME, c.FIRST_NAME, c.NPI, c.ADDRESS1, c.ADDRESS2, c.CITY, c.STATE, c.ZIP, c.PRODUCT_NDC, c.SHIP_DATE, c.QTY, c.IMS_ID, c.IMS_ID_VIA, c.LAST_BUILD_DATE, c.PRODUCT_CODE, c.TRX_CNT, c.IMS_PRODUCT_GROUP_NUM, row_number() OVER (PARTITION BY c.CAREMARK_MD_ID ORDER BY c.SHIP_DATE DESC) AS rnk, count(1) OVER (PARTITION BY c.CAREMARK_MD_ID) AS how_many_rows, min(c.SHIP_DATE) OVER (PARTITION BY c.CAREMARK_MD_ID) AS oldest_ship_date FROM WSMP_ADMIN.STG_CAREMARK_RX c WHERE ((c.IMS_ID IS NULL) AND (c.LAST_NAME <> 'UNAVAILABLE'::varchar(11)) AND ((c.ADDRESS1 IS NOT NULL) OR (c.ADDRESS2 IS NOT NULL)))) foo1 WHERE (foo1.rnk = 1)) foo2 ORDER BY foo2.caremark_md_id;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_ftf_ims_monthly_market_obm AS
SELECT substr(rx.payer_plan_num, 1, 6) AS "PLAN ID", rx.plan_name AS "PLAN NAME", substr(rx.payer_plan_num, ((length(rx.payer_plan_num) - 4) + 1), 4) AS "PAYER ID", rx.payer_name AS "PAYER NAME", rx.market_name AS "MARKET NAME", rx.product_name AS "PRODUCT NAME", rx.zip AS ZIP, to_char(rx.month_ending, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum(rx.trx_cnt) AS TRx, sum(rx.nrx_cnt) AS NRx FROM WSMP_ADMIN.dw_zip_plan_rx_ims rx WHERE (rx.market_name = ANY (ARRAY['ANTI-PARKINSON'::varchar(14), 'BDP NASAL'::varchar(9), 'ICS'::varchar(3), 'MULTIPLE SCLEROSIS'::varchar(18), 'SABA'::varchar(4), 'WAKE'::varchar(4)])) GROUP BY rx.payer_plan_num, rx.plan_name, rx.payer_name, rx.market_name, rx.product_name, rx.zip, rx.month_ending;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_anda_sales AS
SELECT clozapine_sales.transaction_id AS TRANSACTION_ID, to_char(clozapine_sales.invoice_date, 'YYYY-MM-DD'::varchar(10)) AS INVOICE_DATE, clozapine_sales.product_brand AS PRODUCT_BRAND, clozapine_sales.product_ndc AS PRODUCT_NDC, clozapine_sales.product_desc AS PRODUCT_DESC, clozapine_sales.invoice_qty AS INVOICE_QTY, clozapine_sales.invoice_units AS INVOICE_UNITS, clozapine_sales.invoice_cost AS INVOICE_COST, clozapine_sales.invoice_pack_cost AS INVOICE_PACK_COST, clozapine_sales.invoice_unit_cost AS INVOICE_UNIT_COST, clozapine_sales.contract_pack_cost AS CONTRACT_PACK_COST, clozapine_sales.contract_purchases AS CONTRACT_PURCHASES, clozapine_sales.contract_number AS CONTRACT_NUMBER, clozapine_sales.dispensing_location AS DISPENSING_LOCATION, clozapine_sales.dl_address_1 AS DL_ADDRESS_1, clozapine_sales.dl_address_2 AS DL_ADDRESS_2, clozapine_sales.dl_city AS DL_CITY, clozapine_sales.dl_state AS DL_STATE, clozapine_sales.dl_zip AS DL_ZIP, clozapine_sales.dl_dea_number AS DL_DEA_NUMBER, clozapine_sales.depot_location AS DEPOT_LOCATION, clozapine_sales.dep_address_1 AS DEP_ADDRESS_1, clozapine_sales.dep_address_2 AS DEP_ADDRESS_2, clozapine_sales.dep_city AS DEP_CITY, clozapine_sales.dep_state AS DEP_STATE, clozapine_sales.dep_zip AS DEP_ZIP, clozapine_sales.dep_dea_number AS DEP_DEA_NUMBER, clozapine_sales.unit_ap AS UNIT_AP, clozapine_sales.ap AS AP FROM datamart.clozapine_sales WHERE (clozapine_sales.data_source = 'Anda'::varchar(4));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_AHM_Sales_Roster AS
SELECT AHM_SALE_FORCE_ROSTER.EMPLOYEE_ID AS employee_id, AHM_SALE_FORCE_ROSTER.USERNAME AS username, CASE AHM_SALE_FORCE_ROSTER.LAST_NAME WHEN NULLSEQUAL 'Vacant'::varchar(6) THEN NULL ELSE AHM_SALE_FORCE_ROSTER.LAST_NAME END AS last_name, CASE AHM_SALE_FORCE_ROSTER.FIRST_NAME WHEN NULLSEQUAL 'Vacant'::varchar(6) THEN NULL ELSE AHM_SALE_FORCE_ROSTER.FIRST_NAME END AS first_name, AHM_SALE_FORCE_ROSTER.MIDDLE_NAME AS middle_name, AHM_SALE_FORCE_ROSTER.SALUTATION AS salutation, AHM_SALE_FORCE_ROSTER.SUFFIX AS suffix, AHM_SALE_FORCE_ROSTER.TITLE AS title, AHM_SALE_FORCE_ROSTER.TERRITORY AS territory, AHM_SALE_FORCE_ROSTER.TERRITORY_NAME AS territory_name, CASE WHEN (substr(AHM_SALE_FORCE_ROSTER.MANAGER_TERRITORY, 3, 4) = 'ZZZZ'::varchar(4)) THEN NULL WHEN (AHM_SALE_FORCE_ROSTER.MANAGER_TERRITORY = 'TOFRMZ00'::varchar(8)) THEN NULL WHEN (AHM_SALE_FORCE_ROSTER.MANAGER_TERRITORY = 'TOSCGZ00'::varchar(8)) THEN NULL ELSE AHM_SALE_FORCE_ROSTER.MANAGER_TERRITORY END AS manager_territory, AHM_SALE_FORCE_ROSTER.TEAM AS team, AHM_SALE_FORCE_ROSTER.BUSINESS_LINE_1_ADDR AS business_line_1_addr, AHM_SALE_FORCE_ROSTER.BUSINESS_LINE_2_ADDR AS business_line_2_addr, AHM_SALE_FORCE_ROSTER.BUSINESS_LINE_3_ADDR AS business_line_3_addr, AHM_SALE_FORCE_ROSTER.BUSINESS_CITY AS business_city, AHM_SALE_FORCE_ROSTER.BUSINESS_STATE AS business_state, AHM_SALE_FORCE_ROSTER.BUSINESS_POSTAL_CODE AS business_postal_code, AHM_SALE_FORCE_ROSTER.BUSINESS_COUNTRY_CODE AS business_country_code, AHM_SALE_FORCE_ROSTER.HOME_LINE_1_ADDR AS home_line_1_addr, AHM_SALE_FORCE_ROSTER.HOME_LINE_2_ADDR AS home_line_2_addr, AHM_SALE_FORCE_ROSTER.HOME_LINE_3_ADDR AS home_line_3_addr, AHM_SALE_FORCE_ROSTER.HOME_CITY AS home_city, AHM_SALE_FORCE_ROSTER.HOME_STATE AS home_state, AHM_SALE_FORCE_ROSTER.HOME_POSTAL_CODE AS home_postal_code, AHM_SALE_FORCE_ROSTER.HOME_COUNTRY_CODE AS home_country_code, AHM_SALE_FORCE_ROSTER.CORRESPONDENCE_ADDRESS AS correspondence_address, AHM_SALE_FORCE_ROSTER.BUSINESS_PHONE AS business_phone, AHM_SALE_FORCE_ROSTER.BUSINESS_PHONE_EXTENSION AS business_phone_extension, AHM_SALE_FORCE_ROSTER.BUSINESS_FAX AS business_fax, AHM_SALE_FORCE_ROSTER.VOICE_MAIL AS voice_mail, AHM_SALE_FORCE_ROSTER.MOBILE_PHONE AS mobile_phone, AHM_SALE_FORCE_ROSTER.HOME_PHONE AS home_phone, AHM_SALE_FORCE_ROSTER.HOME_FAX AS home_fax, AHM_SALE_FORCE_ROSTER.CORRESPONDENCE_PHONE AS correspondence_phone, AHM_SALE_FORCE_ROSTER.BUSINESS_EMAIL AS business_email, AHM_SALE_FORCE_ROSTER.HOME_EMAIL AS home_email, AHM_SALE_FORCE_ROSTER.CORRESPONDENCE_EMAIL AS correspondence_email, AHM_SALE_FORCE_ROSTER.COST_CENTER AS cost_center FROM WSMP_ADMIN.AHM_SALE_FORCE_ROSTER WHERE ((AHM_SALE_FORCE_ROSTER.TERRITORY !~~ '%ZZZZ%'::varchar(6)) AND (AHM_SALE_FORCE_ROSTER.TEAM <> ALL (ARRAY['Teva Clin Nurse Educ'::varchar(20), 'Field Medical Affairs'::varchar(21), 'Clinical Nurse Educator'::varchar(23)])));

CREATE  VIEW WSMP_ADMIN_ORA.v_do_not_promote AS
SELECT iq2.ims_id, iq2.last_name, iq2.first_name, iq2.mid_name, iq2.suffix FROM (SELECT iq1.ims_id, iq1.last_name, iq1.first_name, iq1.mid_name, iq1.suffix, row_number() OVER (PARTITION BY iq1.ims_id ORDER BY iq1.u_rnk) AS rnk FROM (SELECT dim_debarred.IMS_ID AS ims_id, dim_debarred.LAST_NAME AS last_name, dim_debarred.FIRST_NAME AS first_name, dim_debarred.MID_NAME AS mid_name, dim_debarred.SUFFIX AS suffix, 2 AS u_rnk FROM teva_archive.DIM_DEBARRED WHERE (dim_debarred.IMS_ID IS NOT NULL) UNION SELECT debarred.IMS_ID AS ims_id, debarred.LAST_NAME AS last_name, debarred.FIRST_NAME AS first_name, debarred.MIDDLE_NAME AS middle_name, debarred.SUFFIX AS suffix, 1 AS u_rnk FROM WSMP_ADMIN.DEBARRED WHERE ((debarred.IMS_ID IS NOT NULL) AND (debarred.CURRENT_IND = 'Y'::varchar(1)))) iq1) iq2 WHERE (iq2.rnk = 1);

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_zs_tr_demo_obw AS
SELECT acct.ID AS veeva_account_id, acct.ID_VOD__C AS ims_id, g.DEVELOPERNAME AS territory_num, acct.FIRSTNAME AS first_name, acct.LASTNAME AS last_name, addr.NAME AS address1, addr.ADDRESS_LINE_2_VOD__C AS address2, addr.CITY_VOD__C AS city, addr.STATE_VOD__C AS state, addr.ZIP_VOD__C AS zip, cg.call_goal, cg.committed_p1, cg.committed_p2, cg.committed_p3 FROM ((((((WSMP_ADMIN.VV_ACCOUNT acct JOIN WSMP_ADMIN.VV_RECORDTYPE rta ON ((acct.RECORDTYPEID = rta.ID))) JOIN WSMP_ADMIN.VV_ACCOUNTSHARE acctshr ON (((acct.ID = acctshr.ACCOUNTID) AND (acctshr.ROWCAUSE = 'TerritoryManual'::varchar(15))))) JOIN WSMP_ADMIN.VV_GROUP g ON ((acctshr.USERORGROUPID = g.ID))) JOIN WSMP_ADMIN.VV_TSF_VOD__C tsf ON (((tsf.ACCOUNT_VOD__C = acct.ID) AND (tsf.TERRITORY_VOD__C = g.DEVELOPERNAME)))) JOIN WSMP_ADMIN.VV_ADDRESS_VOD__C addr ON (((addr.ACCOUNT_VOD__C = acct.ID) AND (tsf.ADDRESS_VOD__C = addr.ID)))) LEFT JOIN (SELECT cg.ACCOUNT_TVA__C AS account_tva__c, cg.TERRITORY_TVA__C AS territory_tva__c, sum(CASE WHEN (cg.PRIORITY_TVA__C = 1::numeric(18,0)) THEN cg.GOAL_TVA__C ELSE 0::numeric(18,0) END) AS call_goal, min(CASE WHEN (cg.PRIORITY_TVA__C = 1::numeric(18,0)) THEN p.NAME ELSE NULL END) AS committed_p1, min(CASE WHEN (cg.PRIORITY_TVA__C = 2::numeric(18,0)) THEN p.NAME ELSE NULL END) AS committed_p2, min(CASE WHEN (cg.PRIORITY_TVA__C = 3::numeric(18,0)) THEN p.NAME ELSE NULL END) AS committed_p3 FROM (WSMP_ADMIN.VV_CALL_GOAL_TVA__C cg JOIN WSMP_ADMIN.VV_PRODUCT_VOD__C p ON ((cg.PRODUCT_CATALOG_TVA__C = p.ID))) WHERE (cg.TERRITORY_TVA__C ~~ 'TR%'::varchar(3)) GROUP BY cg.ACCOUNT_TVA__C, cg.TERRITORY_TVA__C) cg ON (((cg.account_tva__c = acct.ID) AND (cg.territory_tva__c = g.DEVELOPERNAME)))) WHERE ((g.DEVELOPERNAME ~~ 'TR%'::varchar(3)) AND (acct.ISPERSONACCOUNT = 'true'::varchar(4)) AND (acct.ID IN (SELECT dw_call.VEEVA_ACCOUNT_ID AS veeva_account_id FROM WSMP_ADMIN.DW_CALL WHERE (dw_call.CALL_DATE > ((trunc(((statement_timestamp())::timestamp + 1::float), 'd'::varchar(1)) + (-2)::float) + (-42)::float)))));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_survey_backup AS
((SELECT a.account_id, a.bu, a.survey_update_date, a.survey, a.question, a.answer, a.response_update_date, a.response_create_date FROM (SELECT yr.account_id, yr.bu, yr.survey_update_date, yr.survey, '*Future Scheduled Adasuve Formulary Review Date'::varchar(47) AS question, ((((coalesce(yr.answer, '    '::varchar(4)) || '-'::varchar(1)) || CASE substr(mth.answer, 1, 3) WHEN NULLSEQUAL 'Jan'::varchar(3) THEN '01'::varchar(2) WHEN NULLSEQUAL 'Feb'::varchar(3) THEN '02'::varchar(2) WHEN NULLSEQUAL 'Mar'::varchar(3) THEN '03'::varchar(2) WHEN NULLSEQUAL 'Apr'::varchar(3) THEN '04'::varchar(2) WHEN NULLSEQUAL 'May'::varchar(3) THEN '05'::varchar(2) WHEN NULLSEQUAL 'Jun'::varchar(3) THEN '06'::varchar(2) WHEN NULLSEQUAL 'Jul'::varchar(3) THEN '07'::varchar(2) WHEN NULLSEQUAL 'Aug'::varchar(3) THEN '08'::varchar(2) WHEN NULLSEQUAL 'Sep'::varchar(3) THEN '09'::varchar(2) WHEN NULLSEQUAL 'Oct'::varchar(3) THEN '10'::varchar(2) WHEN NULLSEQUAL 'Nov'::varchar(3) THEN '11'::varchar(2) WHEN NULLSEQUAL 'Dec'::varchar(3) THEN '12'::varchar(2) ELSE '  '::varchar(2) END) || '-'::varchar(1)) || coalesce(lpad(dy.answer, 2, '0'::varchar(1)), '  '::varchar(2))) AS answer, yr.response_update_date, yr.response_create_date FROM (((SELECT x.account_id, x.bu, x.survey, x.question, x.answer, x.response_create_date, x.response_update_date, x.answer_type, x.survey_target_vod__c, x.rnk, x.nm, x.survey_update_date FROM (SELECT w.account_id, w.bu, w.survey, w.question, w.answer, w.response_create_date, w.response_update_date, w.answer_type, w.survey_target_vod__c, w.rnk, w.nm, max(w.response_update_date) OVER (PARTITION BY w.account_id) AS survey_update_date FROM (SELECT st.ACCOUNT_VOD__C AS account_id, substr(s.TERRITORY_VOD__C, 1, 2) AS bu, coalesce(b.SURVEY_NAME, s.NAME) AS survey, coalesce(a.QUESTION_TEXT_VOD__C, sq.TEXT_VOD__C) AS question, CASE ty.NAME WHEN NULLSEQUAL 'Date_vod'::varchar(8) THEN to_char(qr.DATE_VOD__C, 'YYYY-MM-DD'::varchar(10)) WHEN NULLSEQUAL 'Text_vod'::varchar(8) THEN qr.TEXT_VOD__C ELSE qr.RESPONSE_VOD__C END AS answer, to_char(qr.CREATEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_create_date, to_char(qr.LASTMODIFIEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_update_date, ty.NAME AS answer_type, st.ID AS survey_target_vod__c, row_number() OVER (PARTITION BY st.ACCOUNT_VOD__C, sq.ID ORDER BY qr.LASTMODIFIEDDATE DESC) AS rnk, s.NAME AS nm FROM ((((((WSMP_ADMIN.VV_SURVEY_VOD__C s JOIN WSMP_ADMIN.VV_SURVEY_QUESTION_VOD__C sq ON ((s.ID = sq.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_SURVEY_TARGET_VOD__C st ON ((s.ID = st.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_QUESTION_RESPONSE_VOD__C qr ON (((st.ID = qr.SURVEY_TARGET_VOD__C) AND (sq.ID = qr.SURVEY_QUESTION_VOD__C)))) JOIN WSMP_ADMIN.VV_RECORDTYPE ty ON ((qr.TYPE_VOD__C = ty.ID))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_QUESTION_ABBR a ON ((sq.ID = a.SURVEY_QUESTION_VOD__C))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_NAME_ABBR b ON ((s.ID = b.SURVEY_VOD__C)))) w WHERE ((w.rnk = 1) AND (w.nm = ANY (ARRAY['Profiling and Developing Product Champions'::varchar(42), 'REMS Enrollment and Formulary'::varchar(29)])))) x WHERE (x.question = '*Future Scheduled Adasuve Formulary Review Year'::varchar(47))) yr JOIN (SELECT x.account_id, x.bu, x.survey, x.question, x.answer, x.response_create_date, x.response_update_date, x.answer_type, x.survey_target_vod__c, x.rnk, x.nm, x.survey_update_date FROM (SELECT w.account_id, w.bu, w.survey, w.question, w.answer, w.response_create_date, w.response_update_date, w.answer_type, w.survey_target_vod__c, w.rnk, w.nm, max(w.response_update_date) OVER (PARTITION BY w.account_id) AS survey_update_date FROM (SELECT st.ACCOUNT_VOD__C AS account_id, substr(s.TERRITORY_VOD__C, 1, 2) AS bu, coalesce(b.SURVEY_NAME, s.NAME) AS survey, coalesce(a.QUESTION_TEXT_VOD__C, sq.TEXT_VOD__C) AS question, CASE ty.NAME WHEN NULLSEQUAL 'Date_vod'::varchar(8) THEN to_char(qr.DATE_VOD__C, 'YYYY-MM-DD'::varchar(10)) WHEN NULLSEQUAL 'Text_vod'::varchar(8) THEN qr.TEXT_VOD__C ELSE qr.RESPONSE_VOD__C END AS answer, to_char(qr.CREATEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_create_date, to_char(qr.LASTMODIFIEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_update_date, ty.NAME AS answer_type, st.ID AS survey_target_vod__c, row_number() OVER (PARTITION BY st.ACCOUNT_VOD__C, sq.ID ORDER BY qr.LASTMODIFIEDDATE DESC) AS rnk, s.NAME AS nm FROM ((((((WSMP_ADMIN.VV_SURVEY_VOD__C s JOIN WSMP_ADMIN.VV_SURVEY_QUESTION_VOD__C sq ON ((s.ID = sq.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_SURVEY_TARGET_VOD__C st ON ((s.ID = st.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_QUESTION_RESPONSE_VOD__C qr ON (((st.ID = qr.SURVEY_TARGET_VOD__C) AND (sq.ID = qr.SURVEY_QUESTION_VOD__C)))) JOIN WSMP_ADMIN.VV_RECORDTYPE ty ON ((qr.TYPE_VOD__C = ty.ID))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_QUESTION_ABBR a ON ((sq.ID = a.SURVEY_QUESTION_VOD__C))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_NAME_ABBR b ON ((s.ID = b.SURVEY_VOD__C)))) w WHERE ((w.rnk = 1) AND (w.nm = ANY (ARRAY['Profiling and Developing Product Champions'::varchar(42), 'REMS Enrollment and Formulary'::varchar(29)])))) x WHERE (x.question ~~ '*Future Scheduled Adasuve % Review Month'::varchar(40))) mth ON ((yr.survey_target_vod__c = mth.survey_target_vod__c))) JOIN (SELECT x.account_id, x.bu, x.survey, x.question, x.answer, x.response_create_date, x.response_update_date, x.answer_type, x.survey_target_vod__c, x.rnk, x.nm, x.survey_update_date FROM (SELECT w.account_id, w.bu, w.survey, w.question, w.answer, w.response_create_date, w.response_update_date, w.answer_type, w.survey_target_vod__c, w.rnk, w.nm, max(w.response_update_date) OVER (PARTITION BY w.account_id) AS survey_update_date FROM (SELECT st.ACCOUNT_VOD__C AS account_id, substr(s.TERRITORY_VOD__C, 1, 2) AS bu, coalesce(b.SURVEY_NAME, s.NAME) AS survey, coalesce(a.QUESTION_TEXT_VOD__C, sq.TEXT_VOD__C) AS question, CASE ty.NAME WHEN NULLSEQUAL 'Date_vod'::varchar(8) THEN to_char(qr.DATE_VOD__C, 'YYYY-MM-DD'::varchar(10)) WHEN NULLSEQUAL 'Text_vod'::varchar(8) THEN qr.TEXT_VOD__C ELSE qr.RESPONSE_VOD__C END AS answer, to_char(qr.CREATEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_create_date, to_char(qr.LASTMODIFIEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_update_date, ty.NAME AS answer_type, st.ID AS survey_target_vod__c, row_number() OVER (PARTITION BY st.ACCOUNT_VOD__C, sq.ID ORDER BY qr.LASTMODIFIEDDATE DESC) AS rnk, s.NAME AS nm FROM ((((((WSMP_ADMIN.VV_SURVEY_VOD__C s JOIN WSMP_ADMIN.VV_SURVEY_QUESTION_VOD__C sq ON ((s.ID = sq.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_SURVEY_TARGET_VOD__C st ON ((s.ID = st.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_QUESTION_RESPONSE_VOD__C qr ON (((st.ID = qr.SURVEY_TARGET_VOD__C) AND (sq.ID = qr.SURVEY_QUESTION_VOD__C)))) JOIN WSMP_ADMIN.VV_RECORDTYPE ty ON ((qr.TYPE_VOD__C = ty.ID))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_QUESTION_ABBR a ON ((sq.ID = a.SURVEY_QUESTION_VOD__C))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_NAME_ABBR b ON ((s.ID = b.SURVEY_VOD__C)))) w WHERE ((w.rnk = 1) AND (w.nm = ANY (ARRAY['Profiling and Developing Product Champions'::varchar(42), 'REMS Enrollment and Formulary'::varchar(29)])))) x WHERE (x.question = '*Future Scheduled Adasuve Formulary Review Date'::varchar(47))) dy ON ((yr.survey_target_vod__c = dy.survey_target_vod__c)))) a UNION ALL SELECT b.account_id, b.bu, b.survey_update_date, b.survey, b.question, b.answer, b.response_update_date, b.response_create_date FROM (SELECT yr.account_id, yr.bu, yr.survey_update_date, yr.survey, '*Prior Adasuve Formulary Review Date'::varchar(36) AS question, ((coalesce(yr.answer, '    '::varchar(4)) || '-'::varchar(1)) || CASE substr(mth.answer, 1, 3) WHEN NULLSEQUAL 'Jan'::varchar(3) THEN '01'::varchar(2) WHEN NULLSEQUAL 'Feb'::varchar(3) THEN '02'::varchar(2) WHEN NULLSEQUAL 'Mar'::varchar(3) THEN '03'::varchar(2) WHEN NULLSEQUAL 'Apr'::varchar(3) THEN '04'::varchar(2) WHEN NULLSEQUAL 'May'::varchar(3) THEN '05'::varchar(2) WHEN NULLSEQUAL 'Jun'::varchar(3) THEN '06'::varchar(2) WHEN NULLSEQUAL 'Jul'::varchar(3) THEN '07'::varchar(2) WHEN NULLSEQUAL 'Aug'::varchar(3) THEN '08'::varchar(2) WHEN NULLSEQUAL 'Sep'::varchar(3) THEN '09'::varchar(2) WHEN NULLSEQUAL 'Oct'::varchar(3) THEN '10'::varchar(2) WHEN NULLSEQUAL 'Nov'::varchar(3) THEN '11'::varchar(2) WHEN NULLSEQUAL 'Dec'::varchar(3) THEN '12'::varchar(2) ELSE '  '::varchar(2) END) AS answer, yr.response_update_date, yr.response_create_date FROM ((SELECT x.account_id, x.bu, x.survey, x.question, x.answer, x.response_create_date, x.response_update_date, x.answer_type, x.survey_target_vod__c, x.rnk, x.nm, x.survey_update_date FROM (SELECT w.account_id, w.bu, w.survey, w.question, w.answer, w.response_create_date, w.response_update_date, w.answer_type, w.survey_target_vod__c, w.rnk, w.nm, max(w.response_update_date) OVER (PARTITION BY w.account_id) AS survey_update_date FROM (SELECT st.ACCOUNT_VOD__C AS account_id, substr(s.TERRITORY_VOD__C, 1, 2) AS bu, coalesce(b.SURVEY_NAME, s.NAME) AS survey, coalesce(a.QUESTION_TEXT_VOD__C, sq.TEXT_VOD__C) AS question, CASE ty.NAME WHEN NULLSEQUAL 'Date_vod'::varchar(8) THEN to_char(qr.DATE_VOD__C, 'YYYY-MM-DD'::varchar(10)) WHEN NULLSEQUAL 'Text_vod'::varchar(8) THEN qr.TEXT_VOD__C ELSE qr.RESPONSE_VOD__C END AS answer, to_char(qr.CREATEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_create_date, to_char(qr.LASTMODIFIEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_update_date, ty.NAME AS answer_type, st.ID AS survey_target_vod__c, row_number() OVER (PARTITION BY st.ACCOUNT_VOD__C, sq.ID ORDER BY qr.LASTMODIFIEDDATE DESC) AS rnk, s.NAME AS nm FROM ((((((WSMP_ADMIN.VV_SURVEY_VOD__C s JOIN WSMP_ADMIN.VV_SURVEY_QUESTION_VOD__C sq ON ((s.ID = sq.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_SURVEY_TARGET_VOD__C st ON ((s.ID = st.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_QUESTION_RESPONSE_VOD__C qr ON (((st.ID = qr.SURVEY_TARGET_VOD__C) AND (sq.ID = qr.SURVEY_QUESTION_VOD__C)))) JOIN WSMP_ADMIN.VV_RECORDTYPE ty ON ((qr.TYPE_VOD__C = ty.ID))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_QUESTION_ABBR a ON ((sq.ID = a.SURVEY_QUESTION_VOD__C))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_NAME_ABBR b ON ((s.ID = b.SURVEY_VOD__C)))) w WHERE ((w.rnk = 1) AND (w.nm = ANY (ARRAY['Profiling and Developing Product Champions'::varchar(42), 'REMS Enrollment and Formulary'::varchar(29)])))) x WHERE (x.question = '*Prior Adasuve Formulary Review Year'::varchar(36))) yr JOIN (SELECT x.account_id, x.bu, x.survey, x.question, x.answer, x.response_create_date, x.response_update_date, x.answer_type, x.survey_target_vod__c, x.rnk, x.nm, x.survey_update_date FROM (SELECT w.account_id, w.bu, w.survey, w.question, w.answer, w.response_create_date, w.response_update_date, w.answer_type, w.survey_target_vod__c, w.rnk, w.nm, max(w.response_update_date) OVER (PARTITION BY w.account_id) AS survey_update_date FROM (SELECT st.ACCOUNT_VOD__C AS account_id, substr(s.TERRITORY_VOD__C, 1, 2) AS bu, coalesce(b.SURVEY_NAME, s.NAME) AS survey, coalesce(a.QUESTION_TEXT_VOD__C, sq.TEXT_VOD__C) AS question, CASE ty.NAME WHEN NULLSEQUAL 'Date_vod'::varchar(8) THEN to_char(qr.DATE_VOD__C, 'YYYY-MM-DD'::varchar(10)) WHEN NULLSEQUAL 'Text_vod'::varchar(8) THEN qr.TEXT_VOD__C ELSE qr.RESPONSE_VOD__C END AS answer, to_char(qr.CREATEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_create_date, to_char(qr.LASTMODIFIEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_update_date, ty.NAME AS answer_type, st.ID AS survey_target_vod__c, row_number() OVER (PARTITION BY st.ACCOUNT_VOD__C, sq.ID ORDER BY qr.LASTMODIFIEDDATE DESC) AS rnk, s.NAME AS nm FROM ((((((WSMP_ADMIN.VV_SURVEY_VOD__C s JOIN WSMP_ADMIN.VV_SURVEY_QUESTION_VOD__C sq ON ((s.ID = sq.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_SURVEY_TARGET_VOD__C st ON ((s.ID = st.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_QUESTION_RESPONSE_VOD__C qr ON (((st.ID = qr.SURVEY_TARGET_VOD__C) AND (sq.ID = qr.SURVEY_QUESTION_VOD__C)))) JOIN WSMP_ADMIN.VV_RECORDTYPE ty ON ((qr.TYPE_VOD__C = ty.ID))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_QUESTION_ABBR a ON ((sq.ID = a.SURVEY_QUESTION_VOD__C))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_NAME_ABBR b ON ((s.ID = b.SURVEY_VOD__C)))) w WHERE ((w.rnk = 1) AND (w.nm = ANY (ARRAY['Profiling and Developing Product Champions'::varchar(42), 'REMS Enrollment and Formulary'::varchar(29)])))) x WHERE (x.question ~~ '*Prior Adasuve % Review Month'::varchar(29))) mth ON ((yr.survey_target_vod__c = mth.survey_target_vod__c)))) b) UNION ALL SELECT c.account_id, c.bu, c.survey_update_date, c.survey, c.question, c.answer, c.response_update_date, c.response_create_date FROM (SELECT x.account_id, x.bu, x.survey_update_date, x.survey, x.question, x.answer, x.response_update_date, x.response_create_date FROM (SELECT w.account_id, w.bu, w.survey, w.question, w.answer, w.response_create_date, w.response_update_date, w.answer_type, w.survey_target_vod__c, w.rnk, w.nm, max(w.response_update_date) OVER (PARTITION BY w.account_id) AS survey_update_date FROM (SELECT st.ACCOUNT_VOD__C AS account_id, substr(s.TERRITORY_VOD__C, 1, 2) AS bu, coalesce(b.SURVEY_NAME, s.NAME) AS survey, coalesce(a.QUESTION_TEXT_VOD__C, sq.TEXT_VOD__C) AS question, CASE ty.NAME WHEN NULLSEQUAL 'Date_vod'::varchar(8) THEN to_char(qr.DATE_VOD__C, 'YYYY-MM-DD'::varchar(10)) WHEN NULLSEQUAL 'Text_vod'::varchar(8) THEN qr.TEXT_VOD__C ELSE qr.RESPONSE_VOD__C END AS answer, to_char(qr.CREATEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_create_date, to_char(qr.LASTMODIFIEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_update_date, ty.NAME AS answer_type, st.ID AS survey_target_vod__c, row_number() OVER (PARTITION BY st.ACCOUNT_VOD__C, sq.ID ORDER BY qr.LASTMODIFIEDDATE DESC) AS rnk, s.NAME AS nm FROM ((((((WSMP_ADMIN.VV_SURVEY_VOD__C s JOIN WSMP_ADMIN.VV_SURVEY_QUESTION_VOD__C sq ON ((s.ID = sq.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_SURVEY_TARGET_VOD__C st ON ((s.ID = st.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_QUESTION_RESPONSE_VOD__C qr ON (((st.ID = qr.SURVEY_TARGET_VOD__C) AND (sq.ID = qr.SURVEY_QUESTION_VOD__C)))) JOIN WSMP_ADMIN.VV_RECORDTYPE ty ON ((qr.TYPE_VOD__C = ty.ID))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_QUESTION_ABBR a ON ((sq.ID = a.SURVEY_QUESTION_VOD__C))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_NAME_ABBR b ON ((s.ID = b.SURVEY_VOD__C)))) w WHERE ((w.rnk = 1) AND (w.nm = ANY (ARRAY['Profiling and Developing Product Champions'::varchar(42), 'REMS Enrollment and Formulary'::varchar(29)])))) x WHERE (x.question !~~ '%Adasuve%Review%'::varchar(16))) c) UNION ALL SELECT y.account_id, y.bu, y.survey_update_date, y.survey, y.question, y.answer, y.response_update_date, y.response_create_date FROM (SELECT w.account_id, w.bu, max(w.response_update_date) OVER (PARTITION BY w.account_id) AS survey_update_date, w.survey, w.question, w.answer, w.response_update_date, w.response_create_date FROM (SELECT st.ACCOUNT_VOD__C AS account_id, substr(s.TERRITORY_VOD__C, 1, 2) AS bu, coalesce(b.SURVEY_NAME, s.NAME) AS survey, coalesce(a.QUESTION_TEXT_VOD__C, sq.TEXT_VOD__C) AS question, CASE ty.NAME WHEN NULLSEQUAL 'Date_vod'::varchar(8) THEN to_char(qr.DATE_VOD__C, 'YYYY-MM-DD'::varchar(10)) WHEN NULLSEQUAL 'Text_vod'::varchar(8) THEN qr.TEXT_VOD__C ELSE qr.RESPONSE_VOD__C END AS answer, to_char(qr.CREATEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_create_date, to_char(qr.LASTMODIFIEDDATE, 'YYYY-MM-DD'::varchar(10)) AS response_update_date, ty.NAME AS answer_type, st.ID AS survey_target_vod__c, row_number() OVER (PARTITION BY st.ACCOUNT_VOD__C, sq.ID ORDER BY qr.LASTMODIFIEDDATE DESC) AS rnk, s.NAME AS nm FROM ((((((WSMP_ADMIN.VV_SURVEY_VOD__C s JOIN WSMP_ADMIN.VV_SURVEY_QUESTION_VOD__C sq ON ((s.ID = sq.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_SURVEY_TARGET_VOD__C st ON ((s.ID = st.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_QUESTION_RESPONSE_VOD__C qr ON (((st.ID = qr.SURVEY_TARGET_VOD__C) AND (sq.ID = qr.SURVEY_QUESTION_VOD__C)))) JOIN WSMP_ADMIN.VV_RECORDTYPE ty ON ((qr.TYPE_VOD__C = ty.ID))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_QUESTION_ABBR a ON ((sq.ID = a.SURVEY_QUESTION_VOD__C))) LEFT JOIN WSMP_ADMIN.STG_VV_SURVEY_NAME_ABBR b ON ((s.ID = b.SURVEY_VOD__C)))) w WHERE ((w.rnk = 1) AND (w.nm = 'e-Rx Survey'::varchar(11)))) y;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Amrix_Market AS
SELECT rx.payer_plan_num AS plan_num, rx.product_code, sum(CASE rx.month_bucket WHEN 24::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt24, sum(CASE rx.month_bucket WHEN 24::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt24, sum(CASE rx.month_bucket WHEN 23::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt23, sum(CASE rx.month_bucket WHEN 23::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt23, sum(CASE rx.month_bucket WHEN 22::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt22, sum(CASE rx.month_bucket WHEN 22::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt22, sum(CASE rx.month_bucket WHEN 21::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt21, sum(CASE rx.month_bucket WHEN 21::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt21, sum(CASE rx.month_bucket WHEN 20::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt20, sum(CASE rx.month_bucket WHEN 20::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt20, sum(CASE rx.month_bucket WHEN 19::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt19, sum(CASE rx.month_bucket WHEN 19::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt19, sum(CASE rx.month_bucket WHEN 18::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt18, sum(CASE rx.month_bucket WHEN 18::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt18, sum(CASE rx.month_bucket WHEN 17::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt17, sum(CASE rx.month_bucket WHEN 17::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt17, sum(CASE rx.month_bucket WHEN 16::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt16, sum(CASE rx.month_bucket WHEN 16::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt16, sum(CASE rx.month_bucket WHEN 15::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt15, sum(CASE rx.month_bucket WHEN 15::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt15, sum(CASE rx.month_bucket WHEN 14::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt14, sum(CASE rx.month_bucket WHEN 14::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt14, sum(CASE rx.month_bucket WHEN 13::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt13, sum(CASE rx.month_bucket WHEN 13::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt13, sum(CASE rx.month_bucket WHEN 12::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt12, sum(CASE rx.month_bucket WHEN 12::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt12, sum(CASE rx.month_bucket WHEN 11::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt11, sum(CASE rx.month_bucket WHEN 11::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt11, sum(CASE rx.month_bucket WHEN 10::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt10, sum(CASE rx.month_bucket WHEN 10::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt10, sum(CASE rx.month_bucket WHEN 9::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt9, sum(CASE rx.month_bucket WHEN 9::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt9, sum(CASE rx.month_bucket WHEN 8::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt8, sum(CASE rx.month_bucket WHEN 8::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt8, sum(CASE rx.month_bucket WHEN 7::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt7, sum(CASE rx.month_bucket WHEN 7::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt7, sum(CASE rx.month_bucket WHEN 6::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt6, sum(CASE rx.month_bucket WHEN 6::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt6, sum(CASE rx.month_bucket WHEN 5::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt5, sum(CASE rx.month_bucket WHEN 5::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt5, sum(CASE rx.month_bucket WHEN 4::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt4, sum(CASE rx.month_bucket WHEN 4::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt4, sum(CASE rx.month_bucket WHEN 3::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt3, sum(CASE rx.month_bucket WHEN 3::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt3, sum(CASE rx.month_bucket WHEN 2::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt2, sum(CASE rx.month_bucket WHEN 2::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt2, sum(CASE rx.month_bucket WHEN 1::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt1, sum(CASE rx.month_bucket WHEN 1::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt1 FROM WSMP_ADMIN.dw_presc_plan_rx_m rx WHERE ((rx.product_code = ANY (ARRAY['A00380'::varchar(6), 'A00100'::varchar(6), 'A00330'::varchar(6), 'A00210'::varchar(6), 'A00370'::varchar(6), 'A00220'::varchar(6), 'A00230'::varchar(6), 'A00350'::varchar(6), 'A00360'::varchar(6), 'A00240'::varchar(6), 'A00320'::varchar(6), 'A00250'::varchar(6), 'A00340'::varchar(6), 'A00260'::varchar(6), 'A00270'::varchar(6), 'A00280'::varchar(6), 'A00290'::varchar(6)])) AND (rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0))) GROUP BY rx.payer_plan_num, rx.product_code;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Azilect_Market AS
SELECT rx.payer_plan_num AS plan_num, rx.product_code, sum(CASE rx.month_bucket WHEN 24::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt24, sum(CASE rx.month_bucket WHEN 24::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt24, sum(CASE rx.month_bucket WHEN 23::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt23, sum(CASE rx.month_bucket WHEN 23::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt23, sum(CASE rx.month_bucket WHEN 22::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt22, sum(CASE rx.month_bucket WHEN 22::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt22, sum(CASE rx.month_bucket WHEN 21::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt21, sum(CASE rx.month_bucket WHEN 21::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt21, sum(CASE rx.month_bucket WHEN 20::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt20, sum(CASE rx.month_bucket WHEN 20::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt20, sum(CASE rx.month_bucket WHEN 19::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt19, sum(CASE rx.month_bucket WHEN 19::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt19, sum(CASE rx.month_bucket WHEN 18::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt18, sum(CASE rx.month_bucket WHEN 18::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt18, sum(CASE rx.month_bucket WHEN 17::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt17, sum(CASE rx.month_bucket WHEN 17::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt17, sum(CASE rx.month_bucket WHEN 16::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt16, sum(CASE rx.month_bucket WHEN 16::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt16, sum(CASE rx.month_bucket WHEN 15::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt15, sum(CASE rx.month_bucket WHEN 15::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt15, sum(CASE rx.month_bucket WHEN 14::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt14, sum(CASE rx.month_bucket WHEN 14::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt14, sum(CASE rx.month_bucket WHEN 13::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt13, sum(CASE rx.month_bucket WHEN 13::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt13, sum(CASE rx.month_bucket WHEN 12::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt12, sum(CASE rx.month_bucket WHEN 12::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt12, sum(CASE rx.month_bucket WHEN 11::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt11, sum(CASE rx.month_bucket WHEN 11::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt11, sum(CASE rx.month_bucket WHEN 10::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt10, sum(CASE rx.month_bucket WHEN 10::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt10, sum(CASE rx.month_bucket WHEN 9::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt9, sum(CASE rx.month_bucket WHEN 9::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt9, sum(CASE rx.month_bucket WHEN 8::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt8, sum(CASE rx.month_bucket WHEN 8::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt8, sum(CASE rx.month_bucket WHEN 7::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt7, sum(CASE rx.month_bucket WHEN 7::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt7, sum(CASE rx.month_bucket WHEN 6::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt6, sum(CASE rx.month_bucket WHEN 6::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt6, sum(CASE rx.month_bucket WHEN 5::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt5, sum(CASE rx.month_bucket WHEN 5::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt5, sum(CASE rx.month_bucket WHEN 4::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt4, sum(CASE rx.month_bucket WHEN 4::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt4, sum(CASE rx.month_bucket WHEN 3::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt3, sum(CASE rx.month_bucket WHEN 3::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt3, sum(CASE rx.month_bucket WHEN 2::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt2, sum(CASE rx.month_bucket WHEN 2::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt2, sum(CASE rx.month_bucket WHEN 1::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt1, sum(CASE rx.month_bucket WHEN 1::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt1 FROM WSMP_ADMIN.dw_presc_plan_rx_m rx WHERE ((rx.product_code = ANY (ARRAY['700105'::varchar(6), '700110'::varchar(6), '700210'::varchar(6), '700220'::varchar(6), '700310'::varchar(6), '700320'::varchar(6), '700410'::varchar(6), '700420'::varchar(6), '700510'::varchar(6), '700520'::varchar(6), '700530'::varchar(6), '700540'::varchar(6), '700550'::varchar(6), '700582'::varchar(6), '700584'::varchar(6), '700586'::varchar(6), '700588'::varchar(6), '700570'::varchar(6)])) AND (rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0))) GROUP BY rx.payer_plan_num, rx.product_code;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Nuvigil_Market AS
SELECT rx.payer_plan_num AS plan_num, rx.product_code, sum(CASE rx.month_bucket WHEN 24::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt24, sum(CASE rx.month_bucket WHEN 24::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt24, sum(CASE rx.month_bucket WHEN 23::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt23, sum(CASE rx.month_bucket WHEN 23::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt23, sum(CASE rx.month_bucket WHEN 22::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt22, sum(CASE rx.month_bucket WHEN 22::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt22, sum(CASE rx.month_bucket WHEN 21::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt21, sum(CASE rx.month_bucket WHEN 21::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt21, sum(CASE rx.month_bucket WHEN 20::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt20, sum(CASE rx.month_bucket WHEN 20::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt20, sum(CASE rx.month_bucket WHEN 19::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt19, sum(CASE rx.month_bucket WHEN 19::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt19, sum(CASE rx.month_bucket WHEN 18::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt18, sum(CASE rx.month_bucket WHEN 18::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt18, sum(CASE rx.month_bucket WHEN 17::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt17, sum(CASE rx.month_bucket WHEN 17::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt17, sum(CASE rx.month_bucket WHEN 16::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt16, sum(CASE rx.month_bucket WHEN 16::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt16, sum(CASE rx.month_bucket WHEN 15::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt15, sum(CASE rx.month_bucket WHEN 15::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt15, sum(CASE rx.month_bucket WHEN 14::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt14, sum(CASE rx.month_bucket WHEN 14::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt14, sum(CASE rx.month_bucket WHEN 13::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt13, sum(CASE rx.month_bucket WHEN 13::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt13, sum(CASE rx.month_bucket WHEN 12::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt12, sum(CASE rx.month_bucket WHEN 12::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt12, sum(CASE rx.month_bucket WHEN 11::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt11, sum(CASE rx.month_bucket WHEN 11::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt11, sum(CASE rx.month_bucket WHEN 10::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt10, sum(CASE rx.month_bucket WHEN 10::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt10, sum(CASE rx.month_bucket WHEN 9::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt9, sum(CASE rx.month_bucket WHEN 9::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt9, sum(CASE rx.month_bucket WHEN 8::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt8, sum(CASE rx.month_bucket WHEN 8::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt8, sum(CASE rx.month_bucket WHEN 7::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt7, sum(CASE rx.month_bucket WHEN 7::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt7, sum(CASE rx.month_bucket WHEN 6::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt6, sum(CASE rx.month_bucket WHEN 6::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt6, sum(CASE rx.month_bucket WHEN 5::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt5, sum(CASE rx.month_bucket WHEN 5::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt5, sum(CASE rx.month_bucket WHEN 4::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt4, sum(CASE rx.month_bucket WHEN 4::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt4, sum(CASE rx.month_bucket WHEN 3::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt3, sum(CASE rx.month_bucket WHEN 3::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt3, sum(CASE rx.month_bucket WHEN 2::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt2, sum(CASE rx.month_bucket WHEN 2::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt2, sum(CASE rx.month_bucket WHEN 1::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt1, sum(CASE rx.month_bucket WHEN 1::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt1 FROM WSMP_ADMIN.dw_presc_plan_rx_m rx WHERE ((rx.product_code = ANY (ARRAY['100N00'::varchar(6), '100100'::varchar(6), '100120'::varchar(6)])) AND (rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0))) GROUP BY rx.payer_plan_num, rx.product_code;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_rxnormalizationControl2014_backup AS
SELECT p.IMS_CLIENT_NUM_W AS ClientNo, p.IMS_REPORT_NUM_W_CNT AS RxReportNo, lpad(p.IMS_PRODUCT_GROUP_NUM, 9, '0'::varchar(1)) AS ProductGroupNo, p.IMS_REPORT_NUM_W_QTY AS CorrespondingUnitsReportNo, p.PRODUCT_NAME AS ProductGroupName, nf.DIVISOR AS Divisor, nf.MULTIPLIER AS Multiplier FROM (WSMP_ADMIN.DRM45_PRODUCT_2014 p JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_sharepoint_onc AS
SELECT lower(dim_csf_sales_roster_teva.USERNAME) AS title, dim_csf_sales_roster_teva.TERRITORY_NUM AS territory FROM WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA WHERE ((dim_csf_sales_roster_teva.USERNAME IS NOT NULL) AND (dim_csf_sales_roster_teva.SALES_FORCE_ID = ANY (ARRAY['ONC'::varchar(3), 'TO'::varchar(2)])));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_ceph_sales_roster AS
SELECT DIM_CSF_SALES_ROSTER_TEVA.EMAIL AS email, DIM_CSF_SALES_ROSTER_TEVA.FIRST_NAME AS first_name, DIM_CSF_SALES_ROSTER_TEVA.LAST_NAME AS last_name, NULL AS PASSWORD, CASE WHEN (DIM_CSF_SALES_ROSTER_TEVA.REP_TYPE = 'REP'::varchar(3)) THEN 'Sales Representative'::varchar(20) WHEN (DIM_CSF_SALES_ROSTER_TEVA.REP_TYPE = 'AD'::varchar(2)) THEN 'Regional Sales Manager'::varchar(22) WHEN (DIM_CSF_SALES_ROSTER_TEVA.REP_TYPE = 'RM'::varchar(2)) THEN 'Regional Sales Manager'::varchar(22) ELSE NULL END AS rep_desc, DIM_CSF_SALES_ROSTER_TEVA.REP_TYPE AS rep_type FROM WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA WHERE ((DIM_CSF_SALES_ROSTER_TEVA.SALES_FORCE_ID = ANY (ARRAY['TC'::varchar(2), 'TR'::varchar(2), 'TN'::varchar(2)])) AND (DIM_CSF_SALES_ROSTER_TEVA.LAST_NAME <> 'Vacant'::varchar(6)) AND (DIM_CSF_SALES_ROSTER_TEVA.REP_TYPE IS NOT NULL));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_tb_ds_accountsummary AS
SELECT STG_TB_DS_ACCOUNTS.ACCOUNT_ID, STG_TB_DS_ACCOUNTS.LOCATION_ID, STG_TB_DS_ACCOUNTS.ACCOUNT_NAME, STG_TB_DS_ACCOUNTS.ACCOUNT_CLASS, STG_TB_DS_ACCOUNTS.ADDRESS_1, STG_TB_DS_ACCOUNTS.ADDRESS_2, STG_TB_DS_ACCOUNTS.CITY, STG_TB_DS_ACCOUNTS.STATE, STG_TB_DS_ACCOUNTS.ZIP FROM WSMP_ADMIN.STG_TB_DS_ACCOUNTS;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Touchpoint_Presentation AS
SELECT STG_TOUCHPOINT_PRESENTATION.CALL_ID, STG_TOUCHPOINT_PRESENTATION.CALL_ATTEMPT_ID, STG_TOUCHPOINT_PRESENTATION.PRESENTATION_ID, STG_TOUCHPOINT_PRESENTATION.PRODUCT, STG_TOUCHPOINT_PRESENTATION."POSITION", STG_TOUCHPOINT_PRESENTATION.ITEM_TYPE, STG_TOUCHPOINT_PRESENTATION.ITEM_DESCRIPTION, STG_TOUCHPOINT_PRESENTATION.QUANTITY FROM WSMP_ADMIN.STG_TOUCHPOINT_PRESENTATION;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Touchpoint_Call AS
SELECT STG_TOUCHPOINT_CALL.CALL_ID, STG_TOUCHPOINT_CALL.CALL_ATTEMPT_ID, STG_TOUCHPOINT_CALL.TOUCHPOINT_ID, STG_TOUCHPOINT_CALL.CLIENT_ID, STG_TOUCHPOINT_CALL.IMS_ID, STG_TOUCHPOINT_CALL.FIRST_NAME, STG_TOUCHPOINT_CALL.LAST_NAME, STG_TOUCHPOINT_CALL.CALL_TYPE, STG_TOUCHPOINT_CALL.CALL_DATE, STG_TOUCHPOINT_CALL.STATUS_CODE, STG_TOUCHPOINT_CALL.STATUS_DESCRIPTION, STG_TOUCHPOINT_CALL.REP_ID, STG_TOUCHPOINT_CALL.REP_FIRST_NAME, STG_TOUCHPOINT_CALL.REP_LAST_NAME FROM WSMP_ADMIN.STG_TOUCHPOINT_CALL;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_anda_sales_backup_2 AS
SELECT STG_ANDA_SALES.TRANSACTION_ID, to_char(STG_ANDA_SALES.INVOICE_DATE, 'YYYY-MM-DD'::varchar(10)) AS INVOICE_DATE, STG_ANDA_SALES.PRODUCT_BRAND, STG_ANDA_SALES.PRODUCT_NDC, STG_ANDA_SALES.PRODUCT_DESC, CASE mod(STG_ANDA_SALES.INVOICE_QTY, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_ANDA_SALES.INVOICE_QTY)::int)::varchar ELSE rtrim((STG_ANDA_SALES.INVOICE_QTY)::varchar, '0'::varchar(1)) END AS INVOICE_QTY, CASE mod(STG_ANDA_SALES.INVOICE_UNITS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_ANDA_SALES.INVOICE_UNITS)::int)::varchar ELSE rtrim((STG_ANDA_SALES.INVOICE_UNITS)::varchar, '0'::varchar(1)) END AS INVOICE_UNITS, CASE mod(STG_ANDA_SALES.INVOICE_COST, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_ANDA_SALES.INVOICE_COST)::int)::varchar ELSE rtrim((STG_ANDA_SALES.INVOICE_COST)::varchar, '0'::varchar(1)) END AS INVOICE_COST, CASE mod(STG_ANDA_SALES.INVOICE_PACK_COST, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_ANDA_SALES.INVOICE_PACK_COST)::int)::varchar ELSE rtrim((STG_ANDA_SALES.INVOICE_PACK_COST)::varchar, '0'::varchar(1)) END AS INVOICE_PACK_COST, CASE mod(STG_ANDA_SALES.INVOICE_UNIT_COST, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_ANDA_SALES.INVOICE_UNIT_COST)::int)::varchar ELSE rtrim((STG_ANDA_SALES.INVOICE_UNIT_COST)::varchar, '0'::varchar(1)) END AS INVOICE_UNIT_COST, CASE mod(STG_ANDA_SALES.CONTRACT_PACK_COST, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_ANDA_SALES.CONTRACT_PACK_COST)::int)::varchar ELSE rtrim((STG_ANDA_SALES.CONTRACT_PACK_COST)::varchar, '0'::varchar(1)) END AS CONTRACT_PACK_COST, CASE mod(STG_ANDA_SALES.CONTRACT_PURCHASES, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_ANDA_SALES.CONTRACT_PURCHASES)::int)::varchar ELSE rtrim((STG_ANDA_SALES.CONTRACT_PURCHASES)::varchar, '0'::varchar(1)) END AS CONTRACT_PURCHASES, STG_ANDA_SALES.CONTRACT_NUMBER, STG_ANDA_SALES.DISPENSING_LOCATION, STG_ANDA_SALES.DL_ADDRESS_1, STG_ANDA_SALES.DL_ADDRESS_2, STG_ANDA_SALES.DL_CITY, STG_ANDA_SALES.DL_STATE, STG_ANDA_SALES.DL_ZIP, STG_ANDA_SALES.DL_DEA_NUM, STG_ANDA_SALES.DEPOT_LOCATION, STG_ANDA_SALES.DEP_ADDRESS_1, STG_ANDA_SALES.DEP_ADDRESS_2, STG_ANDA_SALES.DEP_CITY, STG_ANDA_SALES.DEP_STATE, STG_ANDA_SALES.DEP_ZIP, STG_ANDA_SALES.DEP_DEA_NUM, CASE mod(STG_ANDA_SALES.UNIT_AP, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_ANDA_SALES.UNIT_AP)::int)::varchar ELSE rtrim((STG_ANDA_SALES.UNIT_AP)::varchar, '0'::varchar(1)) END AS UNIT_AP, CASE mod(STG_ANDA_SALES.AP, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_ANDA_SALES.AP)::int)::varchar ELSE rtrim((STG_ANDA_SALES.AP)::varchar, '0'::varchar(1)) END AS AP FROM WSMP_ADMIN.STG_ANDA_SALES;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_omnicare_sale AS
SELECT STG_OMNICARE_SALES.TRANSACTION_ID, to_char(STG_OMNICARE_SALES.INVOICE_DATE, 'YYYY-MM-DD'::varchar(10)) AS INVOICE_DATE, STG_OMNICARE_SALES.PRODUCT_BRAND, STG_OMNICARE_SALES.PRODUCT_NDC, STG_OMNICARE_SALES.PRODUCT_DESC, CASE mod(STG_OMNICARE_SALES.INVOICE_QTY, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_OMNICARE_SALES.INVOICE_QTY)::int)::varchar ELSE rtrim((STG_OMNICARE_SALES.INVOICE_QTY)::varchar, '0'::varchar(1)) END AS INVOICE_QTY, CASE mod(STG_OMNICARE_SALES.INVOICE_UNITS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_OMNICARE_SALES.INVOICE_UNITS)::int)::varchar ELSE rtrim((STG_OMNICARE_SALES.INVOICE_UNITS)::varchar, '0'::varchar(1)) END AS INVOICE_UNITS, CASE mod(STG_OMNICARE_SALES.INVOICE_COST, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_OMNICARE_SALES.INVOICE_COST)::int)::varchar ELSE rtrim((STG_OMNICARE_SALES.INVOICE_COST)::varchar, '0'::varchar(1)) END AS INVOICE_COST, CASE mod(STG_OMNICARE_SALES.INVOICE_PACK_COST, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_OMNICARE_SALES.INVOICE_PACK_COST)::int)::varchar ELSE rtrim((STG_OMNICARE_SALES.INVOICE_PACK_COST)::varchar, '0'::varchar(1)) END AS INVOICE_PACK_COST, CASE mod(STG_OMNICARE_SALES.INVOICE_UNIT_COST, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_OMNICARE_SALES.INVOICE_UNIT_COST)::int)::varchar ELSE rtrim((STG_OMNICARE_SALES.INVOICE_UNIT_COST)::varchar, '0'::varchar(1)) END AS INVOICE_UNIT_COST, CASE mod(STG_OMNICARE_SALES.CONTRACT_PACK_COST, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_OMNICARE_SALES.CONTRACT_PACK_COST)::int)::varchar ELSE rtrim((STG_OMNICARE_SALES.CONTRACT_PACK_COST)::varchar, '0'::varchar(1)) END AS CONTRACT_PACK_COST, CASE mod(STG_OMNICARE_SALES.CONTRACT_PURCHASES, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_OMNICARE_SALES.CONTRACT_PURCHASES)::int)::varchar ELSE rtrim((STG_OMNICARE_SALES.CONTRACT_PURCHASES)::varchar, '0'::varchar(1)) END AS CONTRACT_PURCHASES, STG_OMNICARE_SALES.CONTRACT_NUMBER, STG_OMNICARE_SALES.DISPENSING_LOCATION, STG_OMNICARE_SALES.DL_ADDRESS_1, STG_OMNICARE_SALES.DL_ADDRESS_2, STG_OMNICARE_SALES.DL_CITY, STG_OMNICARE_SALES.DL_STATE, STG_OMNICARE_SALES.DL_ZIP, STG_OMNICARE_SALES.DL_DEA_NUM, STG_OMNICARE_SALES.DEPOT_LOCATION, STG_OMNICARE_SALES.DEP_ADDRESS_1, STG_OMNICARE_SALES.DEP_ADDRESS_2, STG_OMNICARE_SALES.DEP_CITY, STG_OMNICARE_SALES.DEP_STATE, STG_OMNICARE_SALES.DEP_ZIP, STG_OMNICARE_SALES.DEP_DEA_NUM, CASE mod(STG_OMNICARE_SALES.UNIT_AP, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_OMNICARE_SALES.UNIT_AP)::int)::varchar ELSE rtrim((STG_OMNICARE_SALES.UNIT_AP)::varchar, '0'::varchar(1)) END AS UNIT_AP, CASE mod(STG_OMNICARE_SALES.AP, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_OMNICARE_SALES.AP)::int)::varchar ELSE rtrim((STG_OMNICARE_SALES.AP)::varchar, '0'::varchar(1)) END AS AP FROM WSMP_ADMIN.STG_OMNICARE_SALES;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_tb_cb_transactions AS
SELECT STG_TB_CB_TRANSACTIONS.ACCOUNT_ID, STG_TB_CB_TRANSACTIONS.LOCATION_ID, to_char(STG_TB_CB_TRANSACTIONS.SHIPMENT_DATE, 'YYYY-MM-DD'::varchar(10)) AS SHIPMENT_DATE, STG_TB_CB_TRANSACTIONS.NDC_CODE, STG_TB_CB_TRANSACTIONS.PRODUCT_NAME, STG_TB_CB_TRANSACTIONS.CONTRACT_ID, CASE mod(STG_TB_CB_TRANSACTIONS.CHARGEBACK_UNITS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TB_CB_TRANSACTIONS.CHARGEBACK_UNITS)::int)::varchar ELSE rtrim((STG_TB_CB_TRANSACTIONS.CHARGEBACK_UNITS)::varchar, '0'::varchar(1)) END AS CHARGEBACK_UNITS, CASE mod(STG_TB_CB_TRANSACTIONS.CHARGEBACK_DOLLARS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TB_CB_TRANSACTIONS.CHARGEBACK_DOLLARS)::int)::varchar ELSE rtrim((STG_TB_CB_TRANSACTIONS.CHARGEBACK_DOLLARS)::varchar, '0'::varchar(1)) END AS CHARGEBACK_DOLLARS, to_char(STG_TB_CB_TRANSACTIONS.RECEIPT_DATE, 'YYYY-MM-DD'::varchar(10)) AS RECEIPT_DATE, CASE mod(STG_TB_CB_TRANSACTIONS.UNIT_AP, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TB_CB_TRANSACTIONS.UNIT_AP)::int)::varchar ELSE rtrim((STG_TB_CB_TRANSACTIONS.UNIT_AP)::varchar, '0'::varchar(1)) END AS UNIT_AP, CASE mod(STG_TB_CB_TRANSACTIONS.AP, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TB_CB_TRANSACTIONS.AP)::int)::varchar ELSE rtrim((STG_TB_CB_TRANSACTIONS.AP)::varchar, '0'::varchar(1)) END AS AP, STG_TB_CB_TRANSACTIONS.DEBIT_MEMO_NUM, to_char(STG_TB_CB_TRANSACTIONS.CREDIT_MEMO_DATE, 'YYYY-MM-DD HH24:MI:SS'::varchar(21)) AS CREDIT_MEMO_DATE, STG_TB_CB_TRANSACTIONS.CREDIT_MEMO_NUM, to_char(STG_TB_CB_TRANSACTIONS.SETTLEMENT_DATE, 'YYYY-MM-DD HH24:MI:SS'::varchar(21)) AS SETTLEMENT_DATE, CASE mod(STG_TB_CB_TRANSACTIONS.CONTRACT_PRICE, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TB_CB_TRANSACTIONS.CONTRACT_PRICE)::int)::varchar ELSE rtrim((STG_TB_CB_TRANSACTIONS.CONTRACT_PRICE)::varchar, '0'::varchar(1)) END AS CONTRACT_PRICE, STG_TB_CB_TRANSACTIONS.CONTRACT_ALIAS FROM WSMP_ADMIN.STG_TB_CB_TRANSACTIONS;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_tb_ds_transactions AS
SELECT STG_TB_DS_TRANSACTIONS.ACCOUNT_ID, STG_TB_DS_TRANSACTIONS.LOCATION_ID, to_char(STG_TB_DS_TRANSACTIONS.SHIPMENT_DATE, 'YYYY-MM-DD'::varchar(10)) AS SHIPMENT_DATE, STG_TB_DS_TRANSACTIONS.NDC_CODE, STG_TB_DS_TRANSACTIONS.PRODUCT_NAME, STG_TB_DS_TRANSACTIONS.TRANSACTION_TYPE, CASE mod(STG_TB_DS_TRANSACTIONS.DIRECT_SALES_UNITS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TB_DS_TRANSACTIONS.DIRECT_SALES_UNITS)::int)::varchar ELSE rtrim((STG_TB_DS_TRANSACTIONS.DIRECT_SALES_UNITS)::varchar, '0'::varchar(1)) END AS DIRECT_SALES_UNITS, CASE mod(STG_TB_DS_TRANSACTIONS.DIRECT_SALES_DOLLARS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TB_DS_TRANSACTIONS.DIRECT_SALES_DOLLARS)::int)::varchar ELSE rtrim((STG_TB_DS_TRANSACTIONS.DIRECT_SALES_DOLLARS)::varchar, '0'::varchar(1)) END AS DIRECT_SALES_DOLLARS, CASE mod(STG_TB_DS_TRANSACTIONS.UNIT_AP, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TB_DS_TRANSACTIONS.UNIT_AP)::int)::varchar ELSE rtrim((STG_TB_DS_TRANSACTIONS.UNIT_AP)::varchar, '0'::varchar(1)) END AS UNIT_AP, CASE mod(STG_TB_DS_TRANSACTIONS.AP, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TB_DS_TRANSACTIONS.AP)::int)::varchar ELSE rtrim((STG_TB_DS_TRANSACTIONS.AP)::varchar, '0'::varchar(1)) END AS AP FROM WSMP_ADMIN.STG_TB_DS_TRANSACTIONS;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_rems_account AS
SELECT stg.ASI_ACCOUNT_ID AS HCP_ID, align.TERRITORY_NUM AS territory_num, stg.SITE_NAME AS ACCOUNT_NAME, stg.ADDRESS_1 AS ADDRESS1, stg.ADDRESS_2 AS ADDRESS2, NULL AS ADDRESS3, stg.CITY, stg.STATE, stg.ZIP_CODE AS ZIP, 'Y'::varchar(1) AS PRIMARY_ADDRESS, stg.PHONE_NUMBER, fact.IMS_ORG_ID AS EXTERNAL_ID, 'HOSPITAL'::varchar(8) AS CUSTOMER_TYPE, NULL AS BPNUMBER, NULL AS SUBTYPE, NULL AS CM_ID FROM ((WSMP_ADMIN.STG_REMS_FACILITY stg LEFT JOIN (SELECT kc_zip_to_territory.ZIP, kc_zip_to_territory.CITY, kc_zip_to_territory.STATE, kc_zip_to_territory.TERRITORY_NUM, kc_zip_to_territory.IS_A_MIRROR, kc_zip_to_territory.MIRROR_TERRITORY_NUM, kc_zip_to_territory.TERRITORY_NAME, kc_zip_to_territory.AREA_NAME, kc_zip_to_territory.REGION_NAME, kc_zip_to_territory.SALES_FORCE_ID, kc_zip_to_territory.ORGANIZATION_CODE, kc_zip_to_territory.COMMENTS FROM WSMP_ADMIN.KC_ZIP_TO_TERRITORY WHERE (kc_zip_to_territory.SALES_FORCE_ID = 'TB'::varchar(2))) align ON ((substr(stg.ZIP_CODE, 1, 5) = align.ZIP))) LEFT JOIN WSMP_ADMIN.HCOS_IDENTIFIER_FACT fact ON (((fact.IDENTIFIER_ID = 15::numeric(18,0)) AND (fact.IDENTIFIER = stg.NPI)))) WHERE (stg.VEEVA_ACCOUNT_ID IS NULL);

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_paragard_anda_sales AS
SELECT ('A'::varchar(1) || btrim(to_char(STG_TW_ANDA_SALES.CUSTOMER_NO, '000000000'::varchar(9)))) AS BP_CODE, NULL AS ORTHO_E, STG_TW_ANDA_SALES.CUSTOMER AS BP_NAME, coalesce(STG_TW_ANDA_SALES.CUSTOMER_ADDRESS_LINE2, STG_TW_ANDA_SALES.CUSTOMER_ADDRESS_LINE1) AS SHIP_TO_ADDRESS, STG_TW_ANDA_SALES.CITY AS SHIP_TO_CITY, STG_TW_ANDA_SALES.STATE AS SHIP_TO_STATE, STG_TW_ANDA_SALES.ZIP AS SHIP_TO_ZIP_CODE, NULL AS SHIP_TO_COUNTRY, NULL AS SHIP_TO_PHONE, NULL AS SHIP_TO_FAX, NULL AS SHIP_TO_EMAIL, coalesce(STG_TW_ANDA_SALES.BILL_ADDRESS_LINE2, STG_TW_ANDA_SALES.BILL_ADDRESS_LINE1) AS BILL_TO_ADDRESS, STG_TW_ANDA_SALES.BILL_CITY AS BILL_TO_CITY, STG_TW_ANDA_SALES.BILL_STATE AS BILL_TO_STATE, STG_TW_ANDA_SALES.BILL_ZIP AS BILL_TO_ZIP_CODE, NULL AS BILL_TO_COUNTRY, NULL AS BILL_TO_PHONE, NULL AS BILL_TO_FAX, NULL AS BILL_TO_EMAIL, CASE mod(STG_TW_ANDA_SALES.CUSTOMER_TYPE_CD, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TW_ANDA_SALES.CUSTOMER_TYPE_CD)::int)::varchar ELSE rtrim((STG_TW_ANDA_SALES.CUSTOMER_TYPE_CD)::varchar, '0'::varchar(1)) END AS CLASS_OF_TRADE, CASE mod(STG_TW_ANDA_SALES.ORDER_NO, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TW_ANDA_SALES.ORDER_NO)::int)::varchar ELSE rtrim((STG_TW_ANDA_SALES.ORDER_NO)::varchar, '0'::varchar(1)) END AS INVOICE_NUM, CASE mod(STG_TW_ANDA_SALES.NET_COST, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TW_ANDA_SALES.NET_COST)::int)::varchar ELSE rtrim((STG_TW_ANDA_SALES.NET_COST)::varchar, '0'::varchar(1)) END AS DEL_AMT, to_char(to_date(STG_TW_ANDA_SALES.SALES_DATE, 'MM/DD/YY'::varchar(8)), 'YYYY-MM-DD'::varchar(10)) AS INVOICE_DATE, CASE mod(STG_TW_ANDA_SALES.UNITS_NET, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TW_ANDA_SALES.UNITS_NET)::int)::varchar ELSE rtrim((STG_TW_ANDA_SALES.UNITS_NET)::varchar, '0'::varchar(1)) END AS "24237", NULL AS "24238", NULL AS "24800", NULL AS "33223", CASE mod(STG_TW_ANDA_SALES.PACKAGE_SIZE, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TW_ANDA_SALES.PACKAGE_SIZE)::int)::varchar ELSE rtrim((STG_TW_ANDA_SALES.PACKAGE_SIZE)::varchar, '0'::varchar(1)) END AS PACKS, NULL AS UNIT_PRICE, NULL AS TERRITORY, NULL AS ORDER_TYPE_CODE, NULL AS ORDER_TYPE_DESC, NULL AS LOB_CODE_DESC, NULL AS PRICE_MATRIX_DEF, ('A'::varchar(1) || btrim(to_char(STG_TW_ANDA_SALES.BILL_CUSTOMER_NO, '000000000'::varchar(9)))) AS PARENT_BP_CODE, NULL AS PARENT_BP_DESC, NULL AS GRAND_PARENT_BP_DESC, NULL AS PO_NUMBER, NULL AS UPS_NUMBER, CASE mod(STG_TW_ANDA_SALES.ORDER_NO, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_TW_ANDA_SALES.ORDER_NO)::int)::varchar ELSE rtrim((STG_TW_ANDA_SALES.ORDER_NO)::varchar, '0'::varchar(1)) END AS ORDER_NUMBER, NULL AS ORDER_LINE_NUMBER, NULL AS DISC_AMT, NULL AS WHSE_CD FROM WSMP_ADMIN.STG_TW_ANDA_SALES WHERE (STG_TW_ANDA_SALES.BRAND ~~ '%PARAGARD%'::varchar(10));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_rems_extract AS
SELECT coalesce(r.VEEVA_ACCOUNT_ID, r.IMS_ID) AS account_id, r.ENROLLMENT_ID AS enrollment_id, r.NPI AS npi, r.DEA_NUM AS dea_num, (r.PROGRAM_ID)::int AS program_id, substr(r.PROGRAM_NAME, 1, 4) AS REMS_PROGRAM, r.STATUS AS enrollment_status, r.IN_PROGRESS_STEP AS current_enrollment_step, to_char(r.EFFECTIVE_DATE, 'YYYY-MM-DD'::varchar(10)) AS effective_date, to_char(r.EXPIRATION_DATE, 'YYYY-MM-DD'::varchar(10)) AS expiration_date FROM WSMP_ADMIN.STG_REMS_PRESCRIBER r UNION SELECT coalesce(STG_REMS_FACILITY.VEEVA_ACCOUNT_ID, STG_REMS_FACILITY.ASI_ACCOUNT_ID) AS account_id, STG_REMS_FACILITY.ENROLLMENT_ID AS enrollment_id, STG_REMS_FACILITY.NPI AS npi, STG_REMS_FACILITY.DEA AS dea, (STG_REMS_FACILITY.PROGRAM_ID)::int AS program_id, STG_REMS_FACILITY.PROGRAM_NAME AS REMS_program, STG_REMS_FACILITY.STATUS_DESCRIPTION AS enrollment_status, STG_REMS_FACILITY.IN_PROGRESS_STEP AS current_enrollment_step, to_char(STG_REMS_FACILITY.EFFECTIVE_DATE, 'YYYY-MM-DD'::varchar(10)) AS effective_date, to_char(STG_REMS_FACILITY.EXPIRATION_DATE, 'YYYY-MM-DD'::varchar(10)) AS expiration_date FROM WSMP_ADMIN.STG_REMS_FACILITY;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_rems_program_lookup AS
SELECT (r.PROGRAM_ID)::int AS program_id, r.PROGRAM_NAME AS program_name FROM WSMP_ADMIN.STG_REMS_PRESCRIBER r UNION SELECT (STG_REMS_FACILITY.PROGRAM_ID)::int AS program_id, STG_REMS_FACILITY.PROGRAM_NAME AS program_name FROM WSMP_ADMIN.STG_REMS_FACILITY;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_ddd_category AS
SELECT DIM_DDD_CATEGORY.CATEGORY_CODE, DIM_DDD_CATEGORY.CATEGORY_DESC, DIM_DDD_CATEGORY.CATEGORY_DEFN FROM WSMP_ADMIN.DIM_DDD_CATEGORY ORDER BY DIM_DDD_CATEGORY.CATEGORY_CODE LIMIT 100;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_BrandedIMS_MedicaidPlanGroups AS
SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id, coalesce(demo.veeva_account_id, rx.ims_id) AS hcp_id, rx.payer_plan_num AS plan_code, rx.plan_name, rx.model, rx.payer_name AS plan_group, CASE WHEN (rx.product_code = '330-15-019'::varchar(10)) THEN 'NASACORT'::varchar(8) WHEN (rx.product_code = '330-12-003'::varchar(10)) THEN 'NASONEX'::varchar(7) WHEN (rx.product_code = '330-15-025'::varchar(10)) THEN 'OMNARIS'::varchar(7) WHEN (rx.product_code = '330-15-001'::varchar(10)) THEN 'QNASL 80'::varchar(8) WHEN (rx.product_code = '330-15-002'::varchar(10)) THEN 'QNASL 40'::varchar(8) WHEN (rx.product_code = '330-15-030'::varchar(10)) THEN 'RHINOCORT'::varchar(9) WHEN (rx.product_code = '330-15-047'::varchar(10)) THEN 'VERAMYST'::varchar(8) WHEN (rx.product_code = '330-15-040'::varchar(10)) THEN 'ZETONNA'::varchar(7) ELSE 'UNKNOWN'::varchar(7) END AS product, (sum(CASE WHEN (rx.month_bucket = 24::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth24, (sum(CASE WHEN (rx.month_bucket = 23.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth23, (sum(CASE WHEN (rx.month_bucket = 22.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth22, (sum(CASE WHEN (rx.month_bucket = 21.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth21, (sum(CASE WHEN (rx.month_bucket = 20.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth20, (sum(CASE WHEN (rx.month_bucket = 19.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth19, (sum(CASE WHEN (rx.month_bucket = 18.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth18, (sum(CASE WHEN (rx.month_bucket = 17.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth17, (sum(CASE WHEN (rx.month_bucket = 16.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth16, (sum(CASE WHEN (rx.month_bucket = 15.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth15, (sum(CASE WHEN (rx.month_bucket = 14.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth14, (sum(CASE WHEN (rx.month_bucket = 13.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth13, (sum(CASE WHEN (rx.month_bucket = 12.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth12, (sum(CASE WHEN (rx.month_bucket = 11.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth11, (sum(CASE WHEN (rx.month_bucket = 10.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth10, (sum(CASE WHEN (rx.month_bucket = 9.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth9, (sum(CASE WHEN (rx.month_bucket = 8.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth8, (sum(CASE WHEN (rx.month_bucket = 7.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth7, (sum(CASE WHEN (rx.month_bucket = 6.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth6, (sum(CASE WHEN (rx.month_bucket = 5.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth5, (sum(CASE WHEN (rx.month_bucket = 4.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth4, (sum(CASE WHEN (rx.month_bucket = 3.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth3, (sum(CASE WHEN (rx.month_bucket = 2.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth2, (sum(CASE WHEN (rx.month_bucket = 1.000) THEN rx.trx_cnt ELSE 0.000 END))::numeric(18,3) AS trx_mth1 FROM (WSMP_ADMIN.dw_presc_plan_rx_w rx LEFT JOIN (SELECT iq1.ims_id, iq1.veeva_account_id FROM (SELECT VV_ACCOUNT.ID_VOD__C AS ims_id, VV_ACCOUNT.ID AS veeva_account_id, row_number() OVER (PARTITION BY VV_ACCOUNT.ID_VOD__C ORDER BY VV_ACCOUNT.ID) AS rnk FROM WSMP_ADMIN.VV_ACCOUNT WHERE (VV_ACCOUNT.ID_VOD__C IS NOT NULL)) iq1 WHERE (iq1.rnk = 1)) demo ON ((demo.ims_id = rx.ims_id))) WHERE ((rx.product_code = ANY (ARRAY['330-15-019'::varchar(10), '330-12-003'::varchar(10), '330-15-025'::varchar(10), '330-15-001'::varchar(10), '330-15-002'::varchar(10), '330-15-030'::varchar(10), '330-15-047'::varchar(10), '330-15-040'::varchar(10)])) AND (rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0)) AND ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) OR (rx.payer_plan_num = ANY (ARRAY['7001720001'::varchar(10), '0013670087'::varchar(10)])))) GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END, coalesce(demo.veeva_account_id, rx.ims_id), rx.payer_plan_num, rx.plan_name, rx.model, rx.payer_name, CASE WHEN (rx.product_code = '330-15-019'::varchar(10)) THEN 'NASACORT'::varchar(8) WHEN (rx.product_code = '330-12-003'::varchar(10)) THEN 'NASONEX'::varchar(7) WHEN (rx.product_code = '330-15-025'::varchar(10)) THEN 'OMNARIS'::varchar(7) WHEN (rx.product_code = '330-15-001'::varchar(10)) THEN 'QNASL 80'::varchar(8) WHEN (rx.product_code = '330-15-002'::varchar(10)) THEN 'QNASL 40'::varchar(8) WHEN (rx.product_code = '330-15-030'::varchar(10)) THEN 'RHINOCORT'::varchar(9) WHEN (rx.product_code = '330-15-047'::varchar(10)) THEN 'VERAMYST'::varchar(8) WHEN (rx.product_code = '330-15-040'::varchar(10)) THEN 'ZETONNA'::varchar(7) ELSE 'UNKNOWN'::varchar(7) END;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_BrandedIMS_MoP AS
SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END AS hcp_id, coalesce(rx.payment_method, 'COMMERCIAL 3RD PTY'::varchar(18)) AS payment_method, CASE WHEN (rx.product_code = '330-15-019'::varchar(10)) THEN 'NASACORT'::varchar(8) WHEN (rx.product_code = '330-12-003'::varchar(10)) THEN 'NASONEX'::varchar(7) WHEN (rx.product_code = '330-15-025'::varchar(10)) THEN 'OMNARIS'::varchar(7) WHEN (rx.product_code = '330-15-001'::varchar(10)) THEN 'QNASL 80'::varchar(8) WHEN (rx.product_code = '330-15-002'::varchar(10)) THEN 'QNASL 40'::varchar(8) WHEN (rx.product_code = '330-15-030'::varchar(10)) THEN 'RHINOCORT'::varchar(9) WHEN (rx.product_code = '330-15-047'::varchar(10)) THEN 'VERAMYST'::varchar(8) WHEN (rx.product_code = '330-15-040'::varchar(10)) THEN 'ZETONNA'::varchar(7) ELSE 'UNKNOWN'::varchar(7) END AS product, (sum(CASE WHEN (rx.month_bucket = 24::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth24, (sum(CASE WHEN (rx.month_bucket = 23::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth23, (sum(CASE WHEN (rx.month_bucket = 22::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth22, (sum(CASE WHEN (rx.month_bucket = 21::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth21, (sum(CASE WHEN (rx.month_bucket = 20::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth20, (sum(CASE WHEN (rx.month_bucket = 19::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth19, (sum(CASE WHEN (rx.month_bucket = 18::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth18, (sum(CASE WHEN (rx.month_bucket = 17::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth17, (sum(CASE WHEN (rx.month_bucket = 16::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth16, (sum(CASE WHEN (rx.month_bucket = 15::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth15, (sum(CASE WHEN (rx.month_bucket = 14::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth14, (sum(CASE WHEN (rx.month_bucket = 13::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth13, (sum(CASE WHEN (rx.month_bucket = 12::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth12, (sum(CASE WHEN (rx.month_bucket = 11::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth11, (sum(CASE WHEN (rx.month_bucket = 10::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth10, (sum(CASE WHEN (rx.month_bucket = 9::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth9, (sum(CASE WHEN (rx.month_bucket = 8::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth8, (sum(CASE WHEN (rx.month_bucket = 7::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth7, (sum(CASE WHEN (rx.month_bucket = 6::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth6, (sum(CASE WHEN (rx.month_bucket = 5::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth5, (sum(CASE WHEN (rx.month_bucket = 4::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth4, (sum(CASE WHEN (rx.month_bucket = 3::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth3, (sum(CASE WHEN (rx.month_bucket = 2::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth2, (sum(CASE WHEN (rx.month_bucket = 1::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth1 FROM (WSMP_ADMIN.dw_presc_plan_rx_w rx LEFT JOIN (SELECT iq1.ims_id, iq1.veeva_account_id FROM (SELECT VV_ACCOUNT.ID_VOD__C AS ims_id, VV_ACCOUNT.ID AS veeva_account_id, row_number() OVER (PARTITION BY VV_ACCOUNT.ID_VOD__C ORDER BY VV_ACCOUNT.ID) AS rnk FROM WSMP_ADMIN.VV_ACCOUNT WHERE (VV_ACCOUNT.ID_VOD__C IS NOT NULL)) iq1 WHERE (iq1.rnk = 1)) demo ON ((demo.ims_id = rx.ims_id))) WHERE ((rx.product_code = ANY (ARRAY['330-15-019'::varchar(10), '330-12-003'::varchar(10), '330-15-025'::varchar(10), '330-15-001'::varchar(10), '330-15-002'::varchar(10), '330-15-030'::varchar(10), '330-15-047'::varchar(10), '330-15-040'::varchar(10)])) AND (rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0))) GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END, coalesce(rx.payment_method, 'COMMERCIAL 3RD PTY'::varchar(18)), CASE WHEN (rx.product_code = '330-15-019'::varchar(10)) THEN 'NASACORT'::varchar(8) WHEN (rx.product_code = '330-12-003'::varchar(10)) THEN 'NASONEX'::varchar(7) WHEN (rx.product_code = '330-15-025'::varchar(10)) THEN 'OMNARIS'::varchar(7) WHEN (rx.product_code = '330-15-001'::varchar(10)) THEN 'QNASL 80'::varchar(8) WHEN (rx.product_code = '330-15-002'::varchar(10)) THEN 'QNASL 40'::varchar(8) WHEN (rx.product_code = '330-15-030'::varchar(10)) THEN 'RHINOCORT'::varchar(9) WHEN (rx.product_code = '330-15-047'::varchar(10)) THEN 'VERAMYST'::varchar(8) WHEN (rx.product_code = '330-15-040'::varchar(10)) THEN 'ZETONNA'::varchar(7) ELSE 'UNKNOWN'::varchar(7) END;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_ICS_MedicaidPlanGroups AS
SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END AS hcp_id, rx.payer_plan_num AS plan_code, rx.plan_name, rx.model, rx.payer_name AS plan_group, CASE WHEN (rx.product_code = '330-16-020'::varchar(10)) THEN 'AEROSPAN'::varchar(8) WHEN (rx.product_code = '330-13-010'::varchar(10)) THEN 'AEROBID'::varchar(7) WHEN (rx.product_code = '330-13-021'::varchar(10)) THEN 'ALVESCO'::varchar(7) WHEN (rx.product_code = '330-13-016'::varchar(10)) THEN 'ASMANEX'::varchar(7) WHEN (rx.product_code = '330-13-008'::varchar(10)) THEN 'AZMACORT'::varchar(8) WHEN (rx.product_code = '330-13-011'::varchar(10)) THEN 'ARNUITY ELLIPTA'::varchar(15) WHEN (rx.product_code = '330-13-017'::varchar(10)) THEN 'ASMANEX HFA MDI'::varchar(15) WHEN (rx.product_code = ANY (ARRAY['330-13-022'::varchar(10), '330-13-023'::varchar(10), '330-13-024'::varchar(10), '330-13-025'::varchar(10), '330-13-026'::varchar(10), '330-13-027'::varchar(10), '330-13-028'::varchar(10), '330-13-029'::varchar(10), '330-13-030'::varchar(10)])) THEN 'FLOVENT'::varchar(7) WHEN (rx.product_code = '330-13-009'::varchar(10)) THEN 'PULMICORT'::varchar(9) WHEN (rx.product_code = ANY (ARRAY['330-13-005'::varchar(10), '330-13-006'::varchar(10)])) THEN 'QVAR'::varchar(4) ELSE 'UNKNOWN'::varchar(7) END AS product, (sum(CASE WHEN (rx.month_bucket = 24::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth24, (sum(CASE WHEN (rx.month_bucket = 23::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth23, (sum(CASE WHEN (rx.month_bucket = 22::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth22, (sum(CASE WHEN (rx.month_bucket = 21::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth21, (sum(CASE WHEN (rx.month_bucket = 20::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth20, (sum(CASE WHEN (rx.month_bucket = 19::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth19, (sum(CASE WHEN (rx.month_bucket = 18::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth18, (sum(CASE WHEN (rx.month_bucket = 17::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth17, (sum(CASE WHEN (rx.month_bucket = 16::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth16, (sum(CASE WHEN (rx.month_bucket = 15::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth15, (sum(CASE WHEN (rx.month_bucket = 14::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth14, (sum(CASE WHEN (rx.month_bucket = 13::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth13, (sum(CASE WHEN (rx.month_bucket = 12::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth12, (sum(CASE WHEN (rx.month_bucket = 11::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth11, (sum(CASE WHEN (rx.month_bucket = 10::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth10, (sum(CASE WHEN (rx.month_bucket = 9::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth9, (sum(CASE WHEN (rx.month_bucket = 8::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth8, (sum(CASE WHEN (rx.month_bucket = 7::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth7, (sum(CASE WHEN (rx.month_bucket = 6::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth6, (sum(CASE WHEN (rx.month_bucket = 5::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth5, (sum(CASE WHEN (rx.month_bucket = 4::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth4, (sum(CASE WHEN (rx.month_bucket = 3::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth3, (sum(CASE WHEN (rx.month_bucket = 2::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth2, (sum(CASE WHEN (rx.month_bucket = 1::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth1 FROM (WSMP_ADMIN.dw_presc_plan_rx_w rx LEFT JOIN (SELECT iq1.ims_id, iq1.veeva_account_id FROM (SELECT VV_ACCOUNT.ID_VOD__C AS ims_id, VV_ACCOUNT.ID AS veeva_account_id, row_number() OVER (PARTITION BY VV_ACCOUNT.ID_VOD__C ORDER BY VV_ACCOUNT.ID) AS rnk FROM WSMP_ADMIN.VV_ACCOUNT WHERE (VV_ACCOUNT.ID_VOD__C IS NOT NULL)) iq1 WHERE (iq1.rnk = 1)) demo ON ((demo.ims_id = rx.ims_id))) WHERE ((rx.product_code = ANY (ARRAY['330-13-010'::varchar(10), '330-16-020'::varchar(10), '330-13-021'::varchar(10), '330-13-016'::varchar(10), '330-13-008'::varchar(10), '330-13-011'::varchar(10), '330-13-017'::varchar(10), '330-13-022'::varchar(10), '330-13-023'::varchar(10), '330-13-024'::varchar(10), '330-13-025'::varchar(10), '330-13-026'::varchar(10), '330-13-027'::varchar(10), '330-13-028'::varchar(10), '330-13-029'::varchar(10), '330-13-030'::varchar(10), '330-13-009'::varchar(10), '330-13-005'::varchar(10), '330-13-006'::varchar(10)])) AND (rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0)) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10))) GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END, rx.payer_plan_num, rx.plan_name, rx.model, rx.payer_name, CASE WHEN (rx.product_code = '330-16-020'::varchar(10)) THEN 'AEROSPAN'::varchar(8) WHEN (rx.product_code = '330-13-010'::varchar(10)) THEN 'AEROBID'::varchar(7) WHEN (rx.product_code = '330-13-021'::varchar(10)) THEN 'ALVESCO'::varchar(7) WHEN (rx.product_code = '330-13-016'::varchar(10)) THEN 'ASMANEX'::varchar(7) WHEN (rx.product_code = '330-13-008'::varchar(10)) THEN 'AZMACORT'::varchar(8) WHEN (rx.product_code = '330-13-011'::varchar(10)) THEN 'ARNUITY ELLIPTA'::varchar(15) WHEN (rx.product_code = '330-13-017'::varchar(10)) THEN 'ASMANEX HFA MDI'::varchar(15) WHEN (rx.product_code = ANY (ARRAY['330-13-022'::varchar(10), '330-13-023'::varchar(10), '330-13-024'::varchar(10), '330-13-025'::varchar(10), '330-13-026'::varchar(10), '330-13-027'::varchar(10), '330-13-028'::varchar(10), '330-13-029'::varchar(10), '330-13-030'::varchar(10)])) THEN 'FLOVENT'::varchar(7) WHEN (rx.product_code = '330-13-009'::varchar(10)) THEN 'PULMICORT'::varchar(9) WHEN (rx.product_code = ANY (ARRAY['330-13-005'::varchar(10), '330-13-006'::varchar(10)])) THEN 'QVAR'::varchar(4) ELSE 'UNKNOWN'::varchar(7) END;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_ics_mop AS
SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END AS hcp_id, coalesce(rx.payment_method, 'COMMERCIAL 3RD PTY'::varchar(18)) AS payment_method, CASE WHEN (rx.product_code = '330-16-020'::varchar(10)) THEN 'AEROSPAN'::varchar(8) WHEN (rx.product_code = '330-13-010'::varchar(10)) THEN 'AEROBID'::varchar(7) WHEN (rx.product_code = '330-13-021'::varchar(10)) THEN 'ALVESCO'::varchar(7) WHEN (rx.product_code = '330-13-016'::varchar(10)) THEN 'ASMANEX'::varchar(7) WHEN (rx.product_code = '330-13-008'::varchar(10)) THEN 'AZMACORT'::varchar(8) WHEN (rx.product_code = ANY (ARRAY['330-13-022'::varchar(10), '330-13-023'::varchar(10), '330-13-024'::varchar(10), '330-13-025'::varchar(10), '330-13-026'::varchar(10), '330-13-027'::varchar(10), '330-13-028'::varchar(10), '330-13-029'::varchar(10), '330-13-030'::varchar(10)])) THEN 'FLOVENT'::varchar(7) WHEN (rx.product_code = '330-13-009'::varchar(10)) THEN 'PULMICORT'::varchar(9) WHEN (rx.product_code = ANY (ARRAY['330-13-005'::varchar(10), '330-13-006'::varchar(10)])) THEN 'QVAR'::varchar(4) WHEN (rx.product_code = '330-13-011'::varchar(10)) THEN 'ARNUITY ELLIPTA'::varchar(15) WHEN (rx.product_code = '330-13-017'::varchar(10)) THEN 'ASMANEX HFA MDI'::varchar(15) ELSE 'UNKOWN'::varchar(6) END AS product, (sum(CASE WHEN (rx.month_bucket = 24::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth24, (sum(CASE WHEN (rx.month_bucket = 23::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth23, (sum(CASE WHEN (rx.month_bucket = 22::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth22, (sum(CASE WHEN (rx.month_bucket = 21::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth21, (sum(CASE WHEN (rx.month_bucket = 20::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth20, (sum(CASE WHEN (rx.month_bucket = 19::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth19, (sum(CASE WHEN (rx.month_bucket = 18::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth18, (sum(CASE WHEN (rx.month_bucket = 17::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth17, (sum(CASE WHEN (rx.month_bucket = 16::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth16, (sum(CASE WHEN (rx.month_bucket = 15::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth15, (sum(CASE WHEN (rx.month_bucket = 14::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth14, (sum(CASE WHEN (rx.month_bucket = 13::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth13, (sum(CASE WHEN (rx.month_bucket = 12::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth12, (sum(CASE WHEN (rx.month_bucket = 11::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth11, (sum(CASE WHEN (rx.month_bucket = 10::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth10, (sum(CASE WHEN (rx.month_bucket = 9::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth9, (sum(CASE WHEN (rx.month_bucket = 8::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth8, (sum(CASE WHEN (rx.month_bucket = 7::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth7, (sum(CASE WHEN (rx.month_bucket = 6::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth6, (sum(CASE WHEN (rx.month_bucket = 5::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth5, (sum(CASE WHEN (rx.month_bucket = 4::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth4, (sum(CASE WHEN (rx.month_bucket = 3::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth3, (sum(CASE WHEN (rx.month_bucket = 2::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth2, (sum(CASE WHEN (rx.month_bucket = 1::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth1 FROM (WSMP_ADMIN.dw_presc_plan_rx_w rx LEFT JOIN (SELECT iq1.ims_id, iq1.veeva_account_id FROM (SELECT VV_ACCOUNT.ID_VOD__C AS ims_id, VV_ACCOUNT.ID AS veeva_account_id, row_number() OVER (PARTITION BY VV_ACCOUNT.ID_VOD__C ORDER BY VV_ACCOUNT.ID) AS rnk FROM WSMP_ADMIN.VV_ACCOUNT WHERE (VV_ACCOUNT.ID_VOD__C IS NOT NULL)) iq1 WHERE (iq1.rnk = 1)) demo ON ((demo.ims_id = rx.ims_id))) WHERE ((rx.product_code = ANY (ARRAY['330-13-010'::varchar(10), '330-16-020'::varchar(10), '330-13-021'::varchar(10), '330-13-016'::varchar(10), '330-13-008'::varchar(10), '330-13-022'::varchar(10), '330-13-023'::varchar(10), '330-13-024'::varchar(10), '330-13-025'::varchar(10), '330-13-026'::varchar(10), '330-13-027'::varchar(10), '330-13-028'::varchar(10), '330-13-029'::varchar(10), '330-13-030'::varchar(10), '330-13-009'::varchar(10), '330-13-005'::varchar(10), '330-13-006'::varchar(10), '330-13-011'::varchar(10), '330-13-017'::varchar(10)])) AND (rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0))) GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END, coalesce(rx.payment_method, 'COMMERCIAL 3RD PTY'::varchar(18)), CASE WHEN (rx.product_code = '330-16-020'::varchar(10)) THEN 'AEROSPAN'::varchar(8) WHEN (rx.product_code = '330-13-010'::varchar(10)) THEN 'AEROBID'::varchar(7) WHEN (rx.product_code = '330-13-021'::varchar(10)) THEN 'ALVESCO'::varchar(7) WHEN (rx.product_code = '330-13-016'::varchar(10)) THEN 'ASMANEX'::varchar(7) WHEN (rx.product_code = '330-13-008'::varchar(10)) THEN 'AZMACORT'::varchar(8) WHEN (rx.product_code = ANY (ARRAY['330-13-022'::varchar(10), '330-13-023'::varchar(10), '330-13-024'::varchar(10), '330-13-025'::varchar(10), '330-13-026'::varchar(10), '330-13-027'::varchar(10), '330-13-028'::varchar(10), '330-13-029'::varchar(10), '330-13-030'::varchar(10)])) THEN 'FLOVENT'::varchar(7) WHEN (rx.product_code = '330-13-009'::varchar(10)) THEN 'PULMICORT'::varchar(9) WHEN (rx.product_code = ANY (ARRAY['330-13-005'::varchar(10), '330-13-006'::varchar(10)])) THEN 'QVAR'::varchar(4) WHEN (rx.product_code = '330-13-011'::varchar(10)) THEN 'ARNUITY ELLIPTA'::varchar(15) WHEN (rx.product_code = '330-13-017'::varchar(10)) THEN 'ASMANEX HFA MDI'::varchar(15) ELSE 'UNKOWN'::varchar(6) END;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_NASAL_MedicaidPlanGroups AS
SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END AS hcp_id, rx.payer_plan_num AS plan_code, rx.plan_name, rx.model, rx.payer_name AS plan_group, CASE WHEN (rx.product_code = '330-15-005'::varchar(10)) THEN 'FLONASE'::varchar(7) WHEN (rx.product_code = '330-15-010'::varchar(10)) THEN 'FLUTICASONE'::varchar(11) WHEN (rx.product_code = '330-15-019'::varchar(10)) THEN 'NASACORT'::varchar(8) WHEN (rx.product_code = '330-15-015'::varchar(10)) THEN 'NASONEX'::varchar(7) WHEN (rx.product_code = '330-15-025'::varchar(10)) THEN 'OMNARIS'::varchar(7) WHEN (rx.product_code = '330-15-030'::varchar(10)) THEN 'RHINOCORT'::varchar(9) WHEN (rx.product_code = '330-15-047'::varchar(10)) THEN 'VERAMYST'::varchar(8) WHEN (rx.product_code = '330-15-050'::varchar(10)) THEN 'OTHER (NASAL)'::varchar(13) ELSE 'UNKNOWN'::varchar(7) END AS product, (sum(CASE WHEN (rx.month_bucket = 24::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth24, (sum(CASE WHEN (rx.month_bucket = 23::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth23, (sum(CASE WHEN (rx.month_bucket = 22::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth22, (sum(CASE WHEN (rx.month_bucket = 21::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth21, (sum(CASE WHEN (rx.month_bucket = 20::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth20, (sum(CASE WHEN (rx.month_bucket = 19::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth19, (sum(CASE WHEN (rx.month_bucket = 18::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth18, (sum(CASE WHEN (rx.month_bucket = 17::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth17, (sum(CASE WHEN (rx.month_bucket = 16::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth16, (sum(CASE WHEN (rx.month_bucket = 15::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth15, (sum(CASE WHEN (rx.month_bucket = 14::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth14, (sum(CASE WHEN (rx.month_bucket = 13::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth13, (sum(CASE WHEN (rx.month_bucket = 12::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth12, (sum(CASE WHEN (rx.month_bucket = 11::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth11, (sum(CASE WHEN (rx.month_bucket = 10::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth10, (sum(CASE WHEN (rx.month_bucket = 9::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth9, (sum(CASE WHEN (rx.month_bucket = 8::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth8, (sum(CASE WHEN (rx.month_bucket = 7::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth7, (sum(CASE WHEN (rx.month_bucket = 6::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth6, (sum(CASE WHEN (rx.month_bucket = 5::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth5, (sum(CASE WHEN (rx.month_bucket = 4::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth4, (sum(CASE WHEN (rx.month_bucket = 3::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth3, (sum(CASE WHEN (rx.month_bucket = 2::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth2, (sum(CASE WHEN (rx.month_bucket = 1::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth1 FROM (WSMP_ADMIN.dw_presc_plan_rx_w rx LEFT JOIN (SELECT iq1.ims_id, iq1.veeva_account_id FROM (SELECT VV_ACCOUNT.ID_VOD__C AS ims_id, VV_ACCOUNT.ID AS veeva_account_id, row_number() OVER (PARTITION BY VV_ACCOUNT.ID_VOD__C ORDER BY VV_ACCOUNT.ID) AS rnk FROM WSMP_ADMIN.VV_ACCOUNT WHERE (VV_ACCOUNT.ID_VOD__C IS NOT NULL)) iq1 WHERE (iq1.rnk = 1)) demo ON ((demo.ims_id = rx.ims_id))) WHERE ((rx.product_code = ANY (ARRAY['330-15-005'::varchar(10), '330-15-010'::varchar(10), '330-15-019'::varchar(10), '330-15-015'::varchar(10), '330-15-025'::varchar(10), '330-15-030'::varchar(10), '330-15-047'::varchar(10), '330-15-050'::varchar(10)])) AND (rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0)) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10))) GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END, rx.payer_plan_num, rx.plan_name, rx.model, rx.payer_name, CASE WHEN (rx.product_code = '330-15-005'::varchar(10)) THEN 'FLONASE'::varchar(7) WHEN (rx.product_code = '330-15-010'::varchar(10)) THEN 'FLUTICASONE'::varchar(11) WHEN (rx.product_code = '330-15-019'::varchar(10)) THEN 'NASACORT'::varchar(8) WHEN (rx.product_code = '330-15-015'::varchar(10)) THEN 'NASONEX'::varchar(7) WHEN (rx.product_code = '330-15-025'::varchar(10)) THEN 'OMNARIS'::varchar(7) WHEN (rx.product_code = '330-15-030'::varchar(10)) THEN 'RHINOCORT'::varchar(9) WHEN (rx.product_code = '330-15-047'::varchar(10)) THEN 'VERAMYST'::varchar(8) WHEN (rx.product_code = '330-15-050'::varchar(10)) THEN 'OTHER (NASAL)'::varchar(13) ELSE 'UNKNOWN'::varchar(7) END;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_nasal_mop AS
SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END AS hcp_id, coalesce(rx.payment_method, 'COMMERCIAL 3RD PTY'::varchar(18)) AS payment_method, CASE WHEN (rx.product_code = '330-15-005'::varchar(10)) THEN 'FLONASE'::varchar(7) WHEN (rx.product_code = '330-15-010'::varchar(10)) THEN 'FLUTICASONE'::varchar(11) WHEN (rx.product_code = '330-15-019'::varchar(10)) THEN 'NASACORT'::varchar(8) WHEN (rx.product_code = '330-15-015'::varchar(10)) THEN 'NASONEX'::varchar(7) WHEN (rx.product_code = '330-15-025'::varchar(10)) THEN 'OMNARIS'::varchar(7) WHEN (rx.product_code = '330-15-030'::varchar(10)) THEN 'RHINOCORT'::varchar(9) WHEN (rx.product_code = '330-15-047'::varchar(10)) THEN 'VERAMYST'::varchar(8) WHEN (rx.product_code = '330-15-050'::varchar(10)) THEN 'OTHER (NASAL)'::varchar(13) ELSE 'UNKNOWN'::varchar(7) END AS product, (sum(CASE WHEN (rx.month_bucket = 24::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth24, (sum(CASE WHEN (rx.month_bucket = 23::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth23, (sum(CASE WHEN (rx.month_bucket = 22::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth22, (sum(CASE WHEN (rx.month_bucket = 21::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth21, (sum(CASE WHEN (rx.month_bucket = 20::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth20, (sum(CASE WHEN (rx.month_bucket = 19::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth19, (sum(CASE WHEN (rx.month_bucket = 18::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth18, (sum(CASE WHEN (rx.month_bucket = 17::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth17, (sum(CASE WHEN (rx.month_bucket = 16::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth16, (sum(CASE WHEN (rx.month_bucket = 15::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth15, (sum(CASE WHEN (rx.month_bucket = 14::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth14, (sum(CASE WHEN (rx.month_bucket = 13::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth13, (sum(CASE WHEN (rx.month_bucket = 12::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth12, (sum(CASE WHEN (rx.month_bucket = 11::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth11, (sum(CASE WHEN (rx.month_bucket = 10::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth10, (sum(CASE WHEN (rx.month_bucket = 9::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth9, (sum(CASE WHEN (rx.month_bucket = 8::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth8, (sum(CASE WHEN (rx.month_bucket = 7::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth7, (sum(CASE WHEN (rx.month_bucket = 6::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth6, (sum(CASE WHEN (rx.month_bucket = 5::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth5, (sum(CASE WHEN (rx.month_bucket = 4::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth4, (sum(CASE WHEN (rx.month_bucket = 3::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth3, (sum(CASE WHEN (rx.month_bucket = 2::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth2, (sum(CASE WHEN (rx.month_bucket = 1::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth1 FROM (WSMP_ADMIN.dw_presc_plan_rx_w rx LEFT JOIN (SELECT iq1.ims_id, iq1.veeva_account_id FROM (SELECT VV_ACCOUNT.ID_VOD__C AS ims_id, VV_ACCOUNT.ID AS veeva_account_id, row_number() OVER (PARTITION BY VV_ACCOUNT.ID_VOD__C ORDER BY VV_ACCOUNT.ID) AS rnk FROM WSMP_ADMIN.VV_ACCOUNT WHERE (VV_ACCOUNT.ID_VOD__C IS NOT NULL)) iq1 WHERE (iq1.rnk = 1)) demo ON ((demo.ims_id = rx.ims_id))) WHERE ((rx.product_code = ANY (ARRAY['330-15-005'::varchar(10), '330-15-010'::varchar(10), '330-15-019'::varchar(10), '330-15-015'::varchar(10), '330-15-025'::varchar(10), '330-15-030'::varchar(10), '330-15-047'::varchar(10), '330-15-050'::varchar(10)])) AND (rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0))) GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END, coalesce(rx.payment_method, 'COMMERCIAL 3RD PTY'::varchar(18)), CASE WHEN (rx.product_code = '330-15-005'::varchar(10)) THEN 'FLONASE'::varchar(7) WHEN (rx.product_code = '330-15-010'::varchar(10)) THEN 'FLUTICASONE'::varchar(11) WHEN (rx.product_code = '330-15-019'::varchar(10)) THEN 'NASACORT'::varchar(8) WHEN (rx.product_code = '330-15-015'::varchar(10)) THEN 'NASONEX'::varchar(7) WHEN (rx.product_code = '330-15-025'::varchar(10)) THEN 'OMNARIS'::varchar(7) WHEN (rx.product_code = '330-15-030'::varchar(10)) THEN 'RHINOCORT'::varchar(9) WHEN (rx.product_code = '330-15-047'::varchar(10)) THEN 'VERAMYST'::varchar(8) WHEN (rx.product_code = '330-15-050'::varchar(10)) THEN 'OTHER (NASAL)'::varchar(13) ELSE 'UNKNOWN'::varchar(7) END;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_SABA_MedicaidPlanGroups AS
SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END AS hcp_id, rx.payer_plan_num AS plan_code, rx.plan_name, rx.model, rx.payer_name AS plan_group, CASE WHEN (rx.product_code = '330-14-001'::varchar(10)) THEN 'ALBUTEROL CFC'::varchar(13) WHEN (rx.product_code = '330-14-007'::varchar(10)) THEN 'MAXAIR'::varchar(6) WHEN (rx.product_code = ANY (ARRAY['330-14-009'::varchar(10), '330-14-002'::varchar(10)])) THEN 'PROAIR'::varchar(6) WHEN (rx.product_code = ANY (ARRAY['330-16-050'::varchar(10), '330-14-003'::varchar(10)])) THEN 'PROVENTIL'::varchar(9) WHEN (rx.product_code = '330-14-008'::varchar(10)) THEN 'RELION'::varchar(6) WHEN (rx.product_code = ANY (ARRAY['330-16-055'::varchar(10), '330-14-004'::varchar(10)])) THEN 'VENTOLIN'::varchar(8) WHEN (rx.product_code = ANY (ARRAY['330-16-056'::varchar(10), '330-14-006'::varchar(10)])) THEN 'XOPENEX'::varchar(7) WHEN (rx.product_code = '330-14-005'::varchar(10)) THEN 'OTHER (SABA)'::varchar(12) ELSE 'UNKNOWN'::varchar(7) END AS product, (sum(CASE WHEN (rx.month_bucket = 24::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth24, (sum(CASE WHEN (rx.month_bucket = 23::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth23, (sum(CASE WHEN (rx.month_bucket = 22::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth22, (sum(CASE WHEN (rx.month_bucket = 21::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth21, (sum(CASE WHEN (rx.month_bucket = 20::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth20, (sum(CASE WHEN (rx.month_bucket = 19::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth19, (sum(CASE WHEN (rx.month_bucket = 18::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth18, (sum(CASE WHEN (rx.month_bucket = 17::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth17, (sum(CASE WHEN (rx.month_bucket = 16::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth16, (sum(CASE WHEN (rx.month_bucket = 15::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth15, (sum(CASE WHEN (rx.month_bucket = 14::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth14, (sum(CASE WHEN (rx.month_bucket = 13::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth13, (sum(CASE WHEN (rx.month_bucket = 12::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth12, (sum(CASE WHEN (rx.month_bucket = 11::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth11, (sum(CASE WHEN (rx.month_bucket = 10::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth10, (sum(CASE WHEN (rx.month_bucket = 9::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth9, (sum(CASE WHEN (rx.month_bucket = 8::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth8, (sum(CASE WHEN (rx.month_bucket = 7::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth7, (sum(CASE WHEN (rx.month_bucket = 6::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth6, (sum(CASE WHEN (rx.month_bucket = 5::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth5, (sum(CASE WHEN (rx.month_bucket = 4::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth4, (sum(CASE WHEN (rx.month_bucket = 3::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth3, (sum(CASE WHEN (rx.month_bucket = 2::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth2, (sum(CASE WHEN (rx.month_bucket = 1::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth1 FROM (WSMP_ADMIN.dw_presc_plan_rx_w rx LEFT JOIN (SELECT iq1.ims_id, iq1.veeva_account_id FROM (SELECT VV_ACCOUNT.ID_VOD__C AS ims_id, VV_ACCOUNT.ID AS veeva_account_id, row_number() OVER (PARTITION BY VV_ACCOUNT.ID_VOD__C ORDER BY VV_ACCOUNT.ID) AS rnk FROM WSMP_ADMIN.VV_ACCOUNT WHERE (VV_ACCOUNT.ID_VOD__C IS NOT NULL)) iq1 WHERE (iq1.rnk = 1)) demo ON ((demo.ims_id = rx.ims_id))) WHERE ((rx.product_code = ANY (ARRAY['330-14-001'::varchar(10), '330-14-007'::varchar(10), '330-14-009'::varchar(10), '330-14-002'::varchar(10), '330-14-003'::varchar(10), '330-14-008'::varchar(10), '330-14-004'::varchar(10), '330-14-006'::varchar(10), '330-14-005'::varchar(10)])) AND (rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0)) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10))) GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END, rx.payer_plan_num, rx.plan_name, rx.model, rx.payer_name, CASE WHEN (rx.product_code = '330-14-001'::varchar(10)) THEN 'ALBUTEROL CFC'::varchar(13) WHEN (rx.product_code = '330-14-007'::varchar(10)) THEN 'MAXAIR'::varchar(6) WHEN (rx.product_code = ANY (ARRAY['330-14-009'::varchar(10), '330-14-002'::varchar(10)])) THEN 'PROAIR'::varchar(6) WHEN (rx.product_code = ANY (ARRAY['330-16-050'::varchar(10), '330-14-003'::varchar(10)])) THEN 'PROVENTIL'::varchar(9) WHEN (rx.product_code = '330-14-008'::varchar(10)) THEN 'RELION'::varchar(6) WHEN (rx.product_code = ANY (ARRAY['330-16-055'::varchar(10), '330-14-004'::varchar(10)])) THEN 'VENTOLIN'::varchar(8) WHEN (rx.product_code = ANY (ARRAY['330-16-056'::varchar(10), '330-14-006'::varchar(10)])) THEN 'XOPENEX'::varchar(7) WHEN (rx.product_code = '330-14-005'::varchar(10)) THEN 'OTHER (SABA)'::varchar(12) ELSE 'UNKNOWN'::varchar(7) END;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_saba_mop AS
SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END AS hcp_id, coalesce(rx.payment_method, 'COMMERCIAL 3RD PTY'::varchar(18)) AS payment_method, CASE WHEN (rx.product_code = '330-14-001'::varchar(10)) THEN 'ALBUTEROL CFC'::varchar(13) WHEN (rx.product_code = '330-14-007'::varchar(10)) THEN 'MAXAIR'::varchar(6) WHEN (rx.product_code = ANY (ARRAY['330-14-009'::varchar(10), '330-14-002'::varchar(10)])) THEN 'PROAIR'::varchar(6) WHEN (rx.product_code = ANY (ARRAY['330-16-050'::varchar(10), '330-14-003'::varchar(10)])) THEN 'PROVENTIL'::varchar(9) WHEN (rx.product_code = '330-14-008'::varchar(10)) THEN 'RELION'::varchar(6) WHEN (rx.product_code = ANY (ARRAY['330-16-055'::varchar(10), '330-14-004'::varchar(10)])) THEN 'VENTOLIN'::varchar(8) WHEN (rx.product_code = '330-14-006'::varchar(10)) THEN 'XOPENEX'::varchar(7) WHEN (rx.product_code = '330-14-005'::varchar(10)) THEN 'OTHER (SABA)'::varchar(12) ELSE 'UNKNOWN'::varchar(7) END AS product, (sum(CASE WHEN (rx.month_bucket = 24::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth24, (sum(CASE WHEN (rx.month_bucket = 23::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth23, (sum(CASE WHEN (rx.month_bucket = 22::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth22, (sum(CASE WHEN (rx.month_bucket = 21::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth21, (sum(CASE WHEN (rx.month_bucket = 20::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth20, (sum(CASE WHEN (rx.month_bucket = 19::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth19, (sum(CASE WHEN (rx.month_bucket = 18::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth18, (sum(CASE WHEN (rx.month_bucket = 17::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth17, (sum(CASE WHEN (rx.month_bucket = 16::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth16, (sum(CASE WHEN (rx.month_bucket = 15::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth15, (sum(CASE WHEN (rx.month_bucket = 14::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth14, (sum(CASE WHEN (rx.month_bucket = 13::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth13, (sum(CASE WHEN (rx.month_bucket = 12::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth12, (sum(CASE WHEN (rx.month_bucket = 11::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth11, (sum(CASE WHEN (rx.month_bucket = 10::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth10, (sum(CASE WHEN (rx.month_bucket = 9::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth9, (sum(CASE WHEN (rx.month_bucket = 8::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth8, (sum(CASE WHEN (rx.month_bucket = 7::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth7, (sum(CASE WHEN (rx.month_bucket = 6::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth6, (sum(CASE WHEN (rx.month_bucket = 5::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth5, (sum(CASE WHEN (rx.month_bucket = 4::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth4, (sum(CASE WHEN (rx.month_bucket = 3::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth3, (sum(CASE WHEN (rx.month_bucket = 2::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth2, (sum(CASE WHEN (rx.month_bucket = 1::numeric(18,0)) THEN rx.trx_cnt ELSE 0::numeric(18,0) END))::numeric(18,3) AS trx_mth1 FROM (WSMP_ADMIN.dw_presc_plan_rx_w rx LEFT JOIN (SELECT iq1.ims_id, iq1.veeva_account_id FROM (SELECT VV_ACCOUNT.ID_VOD__C AS ims_id, VV_ACCOUNT.ID AS veeva_account_id, row_number() OVER (PARTITION BY VV_ACCOUNT.ID_VOD__C ORDER BY VV_ACCOUNT.ID) AS rnk FROM WSMP_ADMIN.VV_ACCOUNT WHERE (VV_ACCOUNT.ID_VOD__C IS NOT NULL)) iq1 WHERE (iq1.rnk = 1)) demo ON ((demo.ims_id = rx.ims_id))) WHERE ((rx.product_code = ANY (ARRAY['330-14-001'::varchar(10), '330-14-007'::varchar(10), '330-14-009'::varchar(10), '330-14-002'::varchar(10), '330-14-003'::varchar(10), '330-14-008'::varchar(10), '330-14-004'::varchar(10), '330-14-006'::varchar(10), '330-14-005'::varchar(10)])) AND (rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0))) GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END, CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(demo.veeva_account_id, rx.ims_id) END, coalesce(rx.payment_method, 'COMMERCIAL 3RD PTY'::varchar(18)), CASE WHEN (rx.product_code = '330-14-001'::varchar(10)) THEN 'ALBUTEROL CFC'::varchar(13) WHEN (rx.product_code = '330-14-007'::varchar(10)) THEN 'MAXAIR'::varchar(6) WHEN (rx.product_code = ANY (ARRAY['330-14-009'::varchar(10), '330-14-002'::varchar(10)])) THEN 'PROAIR'::varchar(6) WHEN (rx.product_code = ANY (ARRAY['330-16-050'::varchar(10), '330-14-003'::varchar(10)])) THEN 'PROVENTIL'::varchar(9) WHEN (rx.product_code = '330-14-008'::varchar(10)) THEN 'RELION'::varchar(6) WHEN (rx.product_code = ANY (ARRAY['330-16-055'::varchar(10), '330-14-004'::varchar(10)])) THEN 'VENTOLIN'::varchar(8) WHEN (rx.product_code = '330-14-006'::varchar(10)) THEN 'XOPENEX'::varchar(7) WHEN (rx.product_code = '330-14-005'::varchar(10)) THEN 'OTHER (SABA)'::varchar(12) ELSE 'UNKNOWN'::varchar(7) END;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_nuvigil_demo AS
SELECT CASE mod(dem.tvcmid, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((dem.tvcmid)::int)::varchar ELSE rtrim((dem.tvcmid)::varchar, '0'::varchar(1)) END AS tvcmid, dem.ims_id, dem.veeva_account_id, initcap(dem.first_name) AS first_name, initcap(dem.middle_name) AS middle_name, initcap(dem.last_name) AS last_name, dem.DEGREE, initcap(dem.address1) AS address1, initcap(dem.address2) AS address2, initcap(dem.address3) AS address3, initcap(dem.city) AS city, dem.state, dem.zip, dem.prim_specialty, dem.nuvigil_report_group, dec1.trx_cnt_01_06 AS nuvigil_decile, dec2.trx_cnt_01_06 AS wake_decile FROM (((SELECT demo.tvcmid, demo.ims_id, demo.veeva_account_id, demo.first_name, demo.middle_name, demo.last_name, demo.DEGREE, demo.address1, demo.address2, demo.address3, demo.city, demo.state, demo.zip, demo.prim_specialty, demo.nuvigil_report_group, demo.source_rank, rank() OVER (PARTITION BY demo.tvcmid, demo.ims_id ORDER BY demo.source_rank) AS demo_rank FROM (SELECT d.TVCMID AS tvcmid, d.IMS_ID AS ims_id, d.VEEVA_ACCOUNT_ID AS veeva_account_id, d.FIRST_NAME AS first_name, d.MIDDLE_NAME AS middle_name, d.LAST_NAME AS last_name, d.CREDENTIALS AS DEGREE, d.ADDRESS1 AS address1, d.ADDRESS2 AS address2, d.ADDRESS3 AS address3, d.CITY AS city, d.STATE AS state, d.ZIP AS zip, coalesce(d2.specialty, coalesce(s1.SPECIALTY_CODE, coalesce(s2.specialty_code, d.PRIM_SPECIALTY))) AS prim_specialty, coalesce(s1.NUVIGIL_REPORT_GROUP, s2.nuvigil_report_group) AS nuvigil_report_group, 1 AS source_rank FROM (((WSMP_ADMIN.DIM_SFA_CSF_DEMO d LEFT JOIN WSMP_ADMIN.TFC_IMS_PRESC_DEMO_M d2 ON (((d2.ims_id = d.IMS_ID) AND (d2.sales_force_id = 'TC'::varchar(2))))) LEFT JOIN WSMP_ADMIN.TFC_SPECIALTY_XREF s1 ON ((s1.SPECIALTY_CODE = d.PRIM_SPECIALTY))) LEFT JOIN (SELECT TFC_SPECIALTY_XREF.SPECIALTY_CODE AS specialty_code, TFC_SPECIALTY_XREF.SPECIALTY_DESC AS specialty_desc, TFC_SPECIALTY_XREF.NUVIGIL_REPORT_GROUP AS nuvigil_report_group FROM WSMP_ADMIN.TFC_SPECIALTY_XREF WHERE (TFC_SPECIALTY_XREF.SPECIALTY_CODE IN (SELECT iq1.specialty_code FROM (SELECT TFC_SPECIALTY_XREF.SPECIALTY_DESC AS specialty_desc, min(TFC_SPECIALTY_XREF.SPECIALTY_CODE) AS specialty_code FROM WSMP_ADMIN.TFC_SPECIALTY_XREF GROUP BY TFC_SPECIALTY_XREF.SPECIALTY_DESC) iq1))) s2 ON ((upper(CASE d.PRIM_SPECIALTY WHEN NULLSEQUAL 'Other'::varchar(5) THEN 'OTHER SPECIALTY'::varchar(15) ELSE d.PRIM_SPECIALTY END) = s2.specialty_desc))) WHERE ((d.SALES_FORCE_ID = 'TC'::varchar(2)) AND (d.DEMO_TYPE = 'PROF'::varchar(4)) AND (d.DEMO_RANK = 1::numeric(18,0))) UNION ALL SELECT s1.tvcmid, s1.ims_id, NULL AS siebel_id, s1.first_name, s1.mid_name, s1.last_name, s1.DEGREE AS degree, s1.address1, s1.address2, s1.address3, s1.city, s1.state, s1.zip, s1.prim_specialty, s1.nuvigil_report_group, s1.source_rank FROM (SELECT cm1.TVCMID AS tvcmid, d.ims_id, cm1.ID_NUM AS siebel_id, d.first_name, d.mid_name, d.last_name, NULL AS DEGREE, d.ptr_address AS address1, NULL AS address2, NULL AS address3, d.ptr_city AS city, d.ptr_state AS state, d.ptr_zip AS zip, d.specialty AS prim_specialty, s1.NUVIGIL_REPORT_GROUP AS nuvigil_report_group, 2 AS source_rank FROM ((WSMP_ADMIN.TFC_IMS_PRESC_DEMO_M d LEFT JOIN WSMP_ADMIN.TFC_SPECIALTY_XREF s1 ON ((s1.SPECIALTY_CODE = d.specialty))) LEFT JOIN WSMP_ADMIN.tvcmid_xref cm1 ON (((cm1.ID_NUM = d.ims_id) AND (cm1.ID_TYPE = 'IMS_ID'::varchar(6))))) WHERE (d.sales_force_id = 'TC'::varchar(2))) s1) demo) dem LEFT JOIN WSMP_ADMIN.TFC_IMS_DECILE dec1 ON (((dec1.ims_id = dem.ims_id) AND (dec1.category = 'Provigil'::varchar(8)) AND (dec1.decile_name = 'Nuvigil'::varchar(7))))) LEFT JOIN WSMP_ADMIN.TFC_IMS_DECILE dec2 ON (((dec2.ims_id = dem.ims_id) AND (dec2.category = 'Provigil'::varchar(8)) AND (dec2.decile_name = 'Modafinil'::varchar(9))))) WHERE (dem.demo_rank = 1);

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_pvs_for_data_stewards AS
SELECT sp_pharm_address_lookups.SOURCE_ID AS source_id, sp_pharm_address_lookups.TEVA_LAST_NAME AS last_name, sp_pharm_address_lookups.TEVA_FIRST_NAME AS first_name, sp_pharm_address_lookups.TEVA_PROFESSIONAL_ID AS npi, sp_pharm_address_lookups.TEVA_ADDRESS1 AS address1, sp_pharm_address_lookups.TEVA_ADDRESS2 AS address2, sp_pharm_address_lookups.TEVA_CITY AS city, sp_pharm_address_lookups.TEVA_STATE AS state, sp_pharm_address_lookups.TEVA_ZIP AS zip, NULL AS IMS_ID, NULL AS HCE_ID FROM WSMP_ADMIN.sp_pharm_address_lookups WHERE (trunc(sp_pharm_address_lookups.CREATE_DATE, 'DD'::varchar(2)) = trunc((statement_timestamp())::timestamp, 'DD'::varchar(2))) ORDER BY sp_pharm_address_lookups.TEVA_LAST_NAME, sp_pharm_address_lookups.TEVA_FIRST_NAME, sp_pharm_address_lookups.TEVA_ZIP;

CREATE  VIEW WSMP_ADMIN_ORA.v_veeva_tb_affiliations AS
SELECT affl.FROM_ACCOUNT_VOD__C AS affiliated_from_id, replace(rt1.NAME, '_vod'::varchar(4), ''::varchar) AS affiliated_from_account_type, acct1.OUTLET_ID_TVA__C AS ims_outlet_code, acct1.ACCOUNT_DEMO_ID_TVA__C AS acct_demo_id, affl.TO_ACCOUNT_VOD__C AS affiliated_to_id, replace(rt2.NAME, '_vod'::varchar(4), ''::varchar) AS affiliated_to_account_type, acct2.ID_VOD__C AS ims_id FROM (((((WSMP_ADMIN.VV_ACCOUNT acct1 JOIN WSMP_ADMIN.VV_AFFILIATION_VOD__C affl ON ((acct1.ID = affl.FROM_ACCOUNT_VOD__C))) JOIN WSMP_ADMIN.VV_ACCOUNT acct2 ON ((affl.TO_ACCOUNT_VOD__C = acct2.ID))) JOIN WSMP_ADMIN.VV_RECORDTYPE rt1 ON ((acct1.RECORDTYPEID = rt1.ID))) JOIN WSMP_ADMIN.VV_RECORDTYPE rt2 ON ((acct2.RECORDTYPEID = rt2.ID))) JOIN (SELECT acctshr.ACCOUNTID AS accountid FROM (WSMP_ADMIN.VV_ACCOUNTSHARE acctshr JOIN WSMP_ADMIN.VV_GROUP g ON ((acctshr.USERORGROUPID = g.ID))) WHERE (g.DEVELOPERNAME ~~ 'TB%'::varchar(3)) GROUP BY acctshr.ACCOUNTID) x ON ((acct1.ID = x.accountid))) WHERE (rt1.NAME <> ALL (ARRAY['Professional_vod'::varchar(16), 'Staff'::varchar(5)]));

CREATE  VIEW WSMP_ADMIN_ORA.v_veeva_segment AS
SELECT iq.veeva_account_id, iq.product_name, iq.segment FROM (SELECT pm.ACCOUNT_VOD__C AS veeva_account_id, p.NAME AS product_name, coalesce(pm.SEGMENT__C, pm.BUSINESS_SEGMENT_TVA__C) AS segment, row_number() OVER (PARTITION BY pm.ACCOUNT_VOD__C, p.NAME ORDER BY pm.LASTMODIFIEDDATE) AS rnk FROM (WSMP_ADMIN.VV_PRODUCT_METRICS_VOD__C pm JOIN WSMP_ADMIN.VV_PRODUCT_VOD__C p ON ((pm.PRODUCTS_VOD__C = p.ID))) WHERE ((pm.SEGMENT__C IS NOT NULL) OR (pm.BUSINESS_SEGMENT_TVA__C IS NOT NULL))) iq WHERE (iq.rnk = 1);

CREATE  VIEW WSMP_ADMIN_ORA.v_veeva_samples AS
SELECT s.ID AS sample_id, c.ID AS call_id, a.ID AS veeva_account_id, trunc(c.LOCAL_CALL_DATETIME_VOD__C, 'DD'::varchar(2)) AS call_date, substr(c.TERRITORY_VOD__C, 1, 2) AS sales_force_id, c.TERRITORY_VOD__C AS territory_num, c.CALL_TYPE_VOD__C AS call_type, c.ATTENDEE_TYPE_VOD__C AS attendee_type, CASE WHEN (rta.NAME = ANY (ARRAY['Hospital_vod'::varchar(12), 'Pharmacy_vod'::varchar(12), 'Practice_vod'::varchar(12)])) THEN 'ACCT'::varchar(4) WHEN ((rta.NAME = 'Professional_vod'::varchar(16)) AND (a.ID_VOD__C IS NULL) AND (a.CREDENTIALS_VOD__C = ANY (ARRAY['Nurse'::varchar(5), 'Billing Staff'::varchar(13), 'Office Staff'::varchar(12), 'Other Contact'::varchar(13), 'Pharmacist/Pharm D'::varchar(18), 'Practice Manager'::varchar(16), 'Refill Coordinator'::varchar(18), 'Reimbursement Specialist'::varchar(24)]))) THEN 'CONT'::varchar(4) WHEN (rta.NAME = 'Staff'::varchar(5)) THEN 'CONT'::varchar(4) WHEN (rta.NAME = 'Professional_vod'::varchar(16)) THEN 'PROF'::varchar(4) ELSE 'UNK'::varchar(3) END AS demo_type, CASE WHEN (p.PRODUCT_TYPE_VOD__C = 'BRC'::varchar(3)) THEN 'REQUEST'::varchar(7) ELSE 'DROP'::varchar(4) END AS sample_type, upper(pp.NAME) AS product_name, upper(p.NAME) AS sample_name, p.PRODUCT_ID_TEVA__C AS sample_ndc, s.QUANTITY_VOD__C AS qty, c.ENTITY_DISPLAY_NAME_VOD__C AS name_on_call, c.ADDRESS_LINE_1_VOD__C AS address1_on_call, c.ADDRESS_LINE_2_VOD__C AS address2_on_call, c.CITY_VOD__C AS city_on_call, c.STATE_VOD__C AS state_on_call, c.ZIP_VOD__C AS zip_on_call, a.ID_VOD__C AS ims_id, c.DEA_VOD__C AS dea_num, c.OWNERID AS ownerid, u.EMPLOYEENUMBER AS employeenumber, c.PARENT_CALL_VOD__C AS parent_call_id, c.CREATEDBYID AS created_by, c.CREATEDDATE AS created_date FROM (((((((WSMP_ADMIN.VV_CALL2_VOD__C c JOIN WSMP_ADMIN.VV_CALL2_SAMPLE_VOD__C s ON ((c.ID = s.CALL2_VOD__C))) JOIN WSMP_ADMIN.VV_PRODUCT_VOD__C p ON ((s.PRODUCT_VOD__C = p.ID))) LEFT JOIN WSMP_ADMIN.VV_PRODUCT_VOD__C pp ON ((p.PARENT_PRODUCT_VOD__C = pp.ID))) JOIN WSMP_ADMIN.VV_ACCOUNT a ON ((c.ACCOUNT_VOD__C = a.ID))) JOIN WSMP_ADMIN.VV_RECORDTYPE rtc ON ((c.RECORDTYPEID = rtc.ID))) JOIN WSMP_ADMIN.VV_RECORDTYPE rta ON ((a.RECORDTYPEID = rta.ID))) LEFT JOIN WSMP_ADMIN.VV_USER u ON ((c.OWNERID = u.ID))) WHERE ((c.LOCAL_CALL_DATETIME_VOD__C >= '2012-01-01 00:00:00'::timestamp(0)) AND (c.STATUS_VOD__C = 'Submitted_vod'::varchar(13)) AND (p.PRODUCT_TYPE_VOD__C = ANY (ARRAY['BRC'::varchar(3), 'Sample'::varchar(6)])));

CREATE  VIEW WSMP_ADMIN_ORA.v_veeva_rtm AS
SELECT substr(c.TERRITORY_VOD__C, 1, 2) AS sales_force_id, c.TERRITORY_VOD__C AS territory_num, c.ID AS call_id, c.ACCOUNT_VOD__C AS veeva_account_id, a.ID_VOD__C AS ims_id, a.EXTERNAL_ID_VOD__C AS siebel_id, trunc(c.CALL_DATETIME_VOD__C, 'DD'::varchar(2)) AS rtm_letter_date, CASE WHEN (p.PRODUCT_ID_TEVA__C ~~ 'AMR%'::varchar(4)) THEN 'AMRIX'::varchar(5) WHEN (p.PRODUCT_ID_TEVA__C ~~ 'FEN%'::varchar(4)) THEN 'FENTORA'::varchar(7) WHEN (p.PRODUCT_ID_TEVA__C ~~ 'NUV%'::varchar(4)) THEN 'NUVIGIL'::varchar(7) WHEN (p.PRODUCT_ID_TEVA__C ~~ 'TIRF%'::varchar(5)) THEN 'FENTORA'::varchar(7) WHEN (p.PRODUCT_ID_TEVA__C ~~ 'TRE%'::varchar(4)) THEN 'TREANDA'::varchar(7) ELSE 'error'::varchar(5) END AS product_name, CASE WHEN (p.PRODUCT_ID_TEVA__C ~~ 'AMR%'::varchar(4)) THEN 'A00100'::varchar(6) WHEN (p.PRODUCT_ID_TEVA__C ~~ 'FEN%'::varchar(4)) THEN '300500'::varchar(6) WHEN (p.PRODUCT_ID_TEVA__C ~~ 'NUV%'::varchar(4)) THEN '100N00'::varchar(6) WHEN (p.PRODUCT_ID_TEVA__C ~~ 'TIRF%'::varchar(5)) THEN '300500'::varchar(6) WHEN (p.PRODUCT_ID_TEVA__C ~~ 'TRE%'::varchar(4)) THEN 'ONC590'::varchar(6) ELSE 'error'::varchar(5) END AS product_code, p.PRODUCT_ID_TEVA__C AS rtm_letter_code, p.DESCRIPTION_VOD__C AS description, c.ENTITY_DISPLAY_NAME_VOD__C AS prof_full_name, u.EMPLOYEENUMBER AS emp_id, u.NAME AS emp_full_name, c.CREATEDBYID AS created_by, c.CREATEDDATE AS created_date FROM ((((WSMP_ADMIN.VV_CALL2_VOD__C c JOIN WSMP_ADMIN.VV_CALL2_SAMPLE_VOD__C s ON ((c.ID = s.CALL2_VOD__C))) JOIN WSMP_ADMIN.VV_PRODUCT_VOD__C p ON ((s.PRODUCT_VOD__C = p.ID))) JOIN WSMP_ADMIN.VV_ACCOUNT a ON ((c.ACCOUNT_VOD__C = a.ID))) LEFT JOIN WSMP_ADMIN.VV_USER u ON ((c.OWNERID = u.ID))) WHERE ((p.PRODUCT_TYPE_VOD__C = 'Educational'::varchar(11)) AND (p.SUB_TYPE__C = 'Letters'::varchar(7)) AND (c.STATUS_VOD__C = 'Submitted_vod'::varchar(13)));

CREATE  VIEW WSMP_ADMIN_ORA.v_veeva_merge_history AS
SELECT vv_acct_merge_history_vod__c.NAME AS old_veeva_account_id, vv_acct_merge_history_vod__c.ACCOUNT_VOD__C AS new_veeva_account_id, vv_acct_merge_history_vod__c.CREATEDDATE AS merge_date FROM WSMP_ADMIN.VV_ACCT_MERGE_HISTORY_VOD__C;

CREATE  VIEW WSMP_ADMIN_ORA.v_veeva_call_plan AS
SELECT iq.account_tva__c AS veeva_account_id, iq.id_vod__c AS ims_id, substr(iq.territory_tva__c, 1, 2) AS sales_force_id, iq.territory_tva__c AS territory_num, initcap(iq.name) AS prod, sum(CASE WHEN (iq.priority_tva__c = 1::numeric(18,0)) THEN iq.goal_tva__c ELSE 0::numeric(18,0) END) AS committed_p1, sum(CASE WHEN (iq.priority_tva__c = 2::numeric(18,0)) THEN iq.goal_tva__c ELSE 0::numeric(18,0) END) AS committed_p2, sum(CASE WHEN (iq.priority_tva__c = 3::numeric(18,0)) THEN iq.goal_tva__c ELSE 0::numeric(18,0) END) AS committed_p3, iq.lastname AS last_name, iq.firstname AS first_name, iq.start_date_tva__c AS start_date, iq.end_date_tva__c AS end_date FROM (SELECT cg.ACCOUNT_TVA__C AS account_tva__c, a.ID_VOD__C AS id_vod__c, cg.TERRITORY_TVA__C AS territory_tva__c, p.NAME AS name, cg.PRIORITY_TVA__C AS priority_tva__c, cg.GOAL_TVA__C AS goal_tva__c, a.LASTNAME AS lastname, a.FIRSTNAME AS firstname, cg.START_DATE_TVA__C AS start_date_tva__c, cg.END_DATE_TVA__C AS end_date_tva__c FROM ((WSMP_ADMIN.VV_CALL_GOAL_TVA__C cg JOIN WSMP_ADMIN.VV_PRODUCT_VOD__C p ON ((cg.PRODUCT_CATALOG_TVA__C = p.ID))) JOIN WSMP_ADMIN.VV_ACCOUNT a ON ((cg.ACCOUNT_TVA__C = a.ID)))) iq GROUP BY iq.account_tva__c, iq.id_vod__c, iq.territory_tva__c, iq.name, iq.lastname, iq.firstname, iq.start_date_tva__c, iq.end_date_tva__c;

CREATE  VIEW WSMP_ADMIN_ORA.v_veeva_bp_affiliations AS
SELECT affl.FROM_ACCOUNT_VOD__C AS affiliated_from_id, acct1.EXTERNAL_ID_VOD__C AS bp_code, affl.TO_ACCOUNT_VOD__C AS affiliated_to_id, acct2.ID_VOD__C AS ims_id FROM (((WSMP_ADMIN.VV_ACCOUNT acct1 JOIN WSMP_ADMIN.VV_AFFILIATION_VOD__C affl ON ((acct1.ID = affl.FROM_ACCOUNT_VOD__C))) JOIN WSMP_ADMIN.VV_RECORDTYPE rt ON ((acct1.RECORDTYPEID = rt.ID))) JOIN WSMP_ADMIN.VV_ACCOUNT acct2 ON ((affl.TO_ACCOUNT_VOD__C = acct2.ID))) WHERE (rt.NAME = 'ParaGard_TVA'::varchar(12));

CREATE  VIEW WSMP_ADMIN_ORA.v_veeva_affiliations AS
SELECT affl.FROM_ACCOUNT_VOD__C AS affiliated_from_id, replace(rt1.NAME, '_vod'::varchar(4), ''::varchar) AS affiliated_from_account_type, acct1.OUTLET_ID_TVA__C AS ims_outlet_code, acct1.ACCOUNT_DEMO_ID_TVA__C AS acct_demo_id, affl.TO_ACCOUNT_VOD__C AS affiliated_to_id, replace(rt2.NAME, '_vod'::varchar(4), ''::varchar) AS affiliated_to_account_type, acct2.ID_VOD__C AS ims_id FROM (((((WSMP_ADMIN.VV_ACCOUNT acct1 JOIN WSMP_ADMIN.VV_AFFILIATION_VOD__C affl ON ((acct1.ID = affl.FROM_ACCOUNT_VOD__C))) JOIN WSMP_ADMIN.VV_ACCOUNT acct2 ON ((affl.TO_ACCOUNT_VOD__C = acct2.ID))) JOIN WSMP_ADMIN.VV_RECORDTYPE rt1 ON ((acct1.RECORDTYPEID = rt1.ID))) JOIN WSMP_ADMIN.VV_RECORDTYPE rt2 ON ((acct2.RECORDTYPEID = rt2.ID))) JOIN (SELECT acctshr.ACCOUNTID AS accountid FROM (WSMP_ADMIN.VV_ACCOUNTSHARE acctshr JOIN WSMP_ADMIN.VV_GROUP g ON ((acctshr.USERORGROUPID = g.ID))) GROUP BY acctshr.ACCOUNTID) x ON ((acct1.ID = x.accountid))) WHERE (rt1.NAME <> ALL (ARRAY['Professional_vod'::varchar(16), 'Staff'::varchar(5)]));

CREATE  VIEW WSMP_ADMIN_ORA.v_territory_rep_mgr_dir AS
SELECT rep.SALES_FORCE_ID AS sales_force_id, rep.TERRITORY_NUM AS rep_territory_num, rep.TERRITORY_NAME AS rep_territory_name, m.TERRITORY_NUM AS m_territory_num, m.TERRITORY_NAME AS m_territory_name, d.TERRITORY_NUM AS d_territory_num, d.TERRITORY_NAME AS d_territory_name, h.TERRITORY_NUM AS h_territory_num, h.TERRITORY_NAME AS h_territory_name FROM (((WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA rep LEFT JOIN WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA m ON ((rep.PARENT_TERRITORY_NUM = m.TERRITORY_NUM))) LEFT JOIN WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA d ON (((m.PARENT_TERRITORY_NUM = d.TERRITORY_NUM) AND (d.REP_TYPE IS NOT NULL)))) LEFT JOIN WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA h ON ((d.PARENT_TERRITORY_NUM = h.TERRITORY_NUM))) WHERE (rep.REP_TYPE = 'REP'::varchar(3));

CREATE  VIEW WSMP_ADMIN_ORA.v_roster_teva_rep_mgr_dir AS
SELECT rep.SALES_FORCE_ID AS sales_force_id, rep.EMPLOYEE_ID AS rep_emp_id, rep.TERRITORY_NUM AS rep_territory_num, rep.FIRST_NAME AS rep_first_name, rep.LAST_NAME AS rep_last_name, rep.FULL_NAME AS rep_full_name, rep.EMAIL AS rep_email, rep.USERNAME AS rep_username, rep.HIRE_DATE AS rep_hire_date, m.EMPLOYEE_ID AS m_emp_id, m.TERRITORY_NUM AS m_territory_num, m.FIRST_NAME AS m_first_name, m.LAST_NAME AS m_last_name, m.FULL_NAME AS m_full_name, m.EMAIL AS m_email, m.USERNAME AS m_username, d.EMPLOYEE_ID AS d_emp_id, d.TERRITORY_NUM AS d_territory_num, d.FIRST_NAME AS d_first_name, d.LAST_NAME AS d_last_name, d.FULL_NAME AS d_full_name, d.EMAIL AS d_email, d.USERNAME AS d_username, h.EMPLOYEE_ID AS h_emp_id, h.TERRITORY_NUM AS h_territory_num, h.FIRST_NAME AS h_first_name, h.LAST_NAME AS h_last_name, h.FULL_NAME AS h_full_name, h.EMAIL AS h_email, h.USERNAME AS h_username FROM (((WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA rep LEFT JOIN WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA m ON ((rep.PARENT_TERRITORY_NUM = m.TERRITORY_NUM))) LEFT JOIN WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA d ON (((m.PARENT_TERRITORY_NUM = d.TERRITORY_NUM) AND (d.REP_TYPE IS NOT NULL)))) LEFT JOIN WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA h ON ((d.PARENT_TERRITORY_NUM = h.TERRITORY_NUM))) WHERE (rep.REP_TYPE = 'REP'::varchar(3)) ORDER BY rep.TERRITORY_NUM;

CREATE  VIEW WSMP_ADMIN_ORA.v_onc_related_accounts AS
SELECT ra.ACCT_DEMO_ID AS acct_demo_id, coalesce(ad.OUTLET_NAME, ad.FACILITY_NAME, ad.PRESCRIBER_NAME) AS acct_name, ra.REL_TYPE AS rel_type, ra.REL_ACCT_DEMO_ID AS rel_acct_demo_id, coalesce(rd.OUTLET_NAME, rd.FACILITY_NAME, rd.PRESCRIBER_NAME) AS rel_acct_name FROM ((WSMP_ADMIN.DIM_ONC_RELATED_ACCOUNTS ra JOIN WSMP_ADMIN.DIM_ONC_ACCOUNT_DEMO ad ON ((ad.ACCT_DEMO_ID = ra.ACCT_DEMO_ID))) JOIN WSMP_ADMIN.DIM_ONC_ACCOUNT_DEMO rd ON ((rd.ACCT_DEMO_ID = ra.REL_ACCT_DEMO_ID)));

CREATE  VIEW WSMP_ADMIN_ORA.v_hcos_kaiser_prof_affil AS
SELECT p.IMS_ID AS ims_id, p.NPI AS npi, p.ALL_DEA AS all_dea, p.LAST_NAME AS last_name, p.FIRST_NAME AS first_name, p.MIDDLE_NAME AS middle_name, at.AFFIL_TYPE_DESC AS affil_type_desc, b.IMS_ORG_ID AS ims_facility_number, b.COT_FACILITY_TYPE AS cot_facility_type, b.BUSINESS_NAME AS business_name, b.PHYSICAL_ADDR_1 AS physical_addr_1, b.PHYSICAL_ADDR_2 AS physical_addr_2, b.PHYSICAL_CITY AS physical_city, b.PHYSICAL_STATE AS physical_state, b.PHYSICAL_ZIP AS physical_zip FROM ((((WSMP_ADMIN.HCOS_BUSINESS b JOIN WSMP_ADMIN.HCOS_PROVIDER_AFFILIATION_FACT paf ON ((b.IMS_ORG_ID = paf.IMS_ORG_ID))) JOIN WSMP_ADMIN.HCOS_PROFESSIONAL p ON ((paf.HCE_ID_PRFSNL = p.HCE_ID_PRFSNL))) LEFT JOIN WSMP_ADMIN.HCOS_AFFILIATION_TYPE at ON ((paf.AFFIL_TYPE_ID = at.AFFIL_TYPE_ID))) JOIN WSMP_ADMIN.HCOS_RELATIONSHIP_FACT rf ON ((b.IMS_ORG_ID = rf.IMS_ORG_ID_CHILD))) WHERE ((rf.IMS_ORG_ID_PARENT = 'INS00000226'::varchar(11)) AND (b.PHYSICAL_STATE = 'CA'::varchar(2)));

CREATE  VIEW WSMP_ADMIN_ORA.v_hcos_kaiser_contact_affil AS
SELECT p.IMS_ID AS ims_id, p.NPI AS npi, p.ALL_DEA AS all_dea, p.LAST_NAME AS last_name, p.FIRST_NAME AS first_name, p.MIDDLE_NAME AS middle_name, pt.TITLE_GROUP_DESC AS title_group_desc, b.IMS_ORG_ID AS ims_facility_number, b.BUSINESS_NAME AS business_name, b.PHYSICAL_ADDR_1 AS physical_addr_1, b.PHYSICAL_ADDR_2 AS physical_addr_2, b.PHYSICAL_CITY AS physical_city, b.PHYSICAL_STATE AS physical_state, b.PHYSICAL_ZIP AS physical_zip FROM ((((WSMP_ADMIN.HCOS_BUSINESS b JOIN WSMP_ADMIN.HCOS_CONTACT_AFFILTN_FACT caf ON ((b.IMS_ORG_ID = caf.IMS_ORG_ID))) JOIN WSMP_ADMIN.HCOS_PROFESSIONAL p ON ((caf.HCE_ID_PRFSNL = p.HCE_ID_PRFSNL))) LEFT JOIN WSMP_ADMIN.HCOS_PROFESSIONAL_TITLE pt ON ((caf.TITLE_GROUP_CODE = pt.TITLE_GROUP_CODE))) JOIN WSMP_ADMIN.HCOS_RELATIONSHIP_FACT rf ON ((b.IMS_ORG_ID = rf.IMS_ORG_ID_CHILD))) WHERE ((rf.IMS_ORG_ID_PARENT = 'INS00000226'::varchar(11)) AND (b.PHYSICAL_STATE = 'CA'::varchar(2)));

CREATE  VIEW WSMP_ADMIN_ORA.v_asi_voucher_redemption AS
SELECT 'asi'::varchar(3) AS provider, ar.RD_KEY AS rd_key, ar.PROGRAM_NUM AS program_num, ar.VOUCHER_NUM AS voucher_num, ar.CEPH_ID AS ceph_id, ar.NDC_CODE AS ndc_code, ar.PRODUCT_NAME AS product_name, ar.FILL_DATE AS fill_date, ar.QTY AS qty, ap.PROGRAM_DESC AS program_desc, ap.SALES_FORCE_ID AS sales_force_id, ap.PROGRAM_TYPE AS program_type, ar.COMP_INCLUDE AS comp_include FROM (WSMP_ADMIN.TFC_ASI_REDEMPTION_DETAIL ar LEFT JOIN WSMP_ADMIN.DIM_ASI_PROGRAM ap ON ((ap.ASI_PROGRAM_NUM = ar.PROGRAM_NUM))) WHERE (ar.REDEMPTION_TYPE = 'VOUCHER'::varchar(7)) ORDER BY ar.CEPH_ID, ar.FILL_DATE, ar.NDC_CODE;

CREATE  VIEW WSMP_ADMIN_ORA.v_asi_plan_name AS
SELECT tfc_ims_plan_xref.PAYER_PLAN_NUM AS payer_plan_num, tfc_ims_plan_xref.PLAN_NAME AS plan_name, CASE tfc_ims_plan_xref.PAYER_NUM WHEN NULLSEQUAL '000002'::varchar(6) THEN tfc_ims_plan_xref.PLAN_NAME ELSE tfc_ims_plan_xref.PAYER_NAME END AS payer_name, tfc_ims_plan_xref.MODEL AS model FROM WSMP_ADMIN.TFC_IMS_PLAN_XREF ORDER BY tfc_ims_plan_xref.PAYER_PLAN_NUM;

CREATE  VIEW WSMP_ADMIN_ORA.v_adasuve_sampling AS
SELECT stg_rems_facility.ENROLLMENT_ID AS enrollment_id, stg_rems_facility.SITE_NAME AS site_name, stg_rems_facility.ADDRESS_1 AS address_1, stg_rems_facility.ADDRESS_2 AS address_2, stg_rems_facility.CITY AS city, stg_rems_facility.STATE AS state, stg_rems_facility.ZIP_CODE AS zip_code FROM WSMP_ADMIN.STG_REMS_FACILITY WHERE ((stg_rems_facility.STATUS_DESCRIPTION = 'Enrolled'::varchar(8)) AND (stg_rems_facility.EXPIRATION_DATE > (statement_timestamp())::timestamp));

CREATE  VIEW WSMP_ADMIN_ORA.i_adasuve_rems_facility AS
SELECT stg_rems_facility.VEEVA_ACCOUNT_ID AS veeva_account_id, stg_rems_facility.NPI AS npi, stg_rems_facility.DEA AS dea, stg_rems_facility.ENROLLMENT_ID AS enrollment_id, stg_rems_facility.PROGRAM_NAME AS program_name, stg_rems_facility.HEALTHCARE_FACILITY_TYPE AS healthcare_facility_type, stg_rems_facility.SITE_NAME AS site_name, stg_rems_facility.ADDRESS_1 AS address_1, stg_rems_facility.ADDRESS_2 AS address_2, stg_rems_facility.CITY AS city, stg_rems_facility.STATE AS state, stg_rems_facility.ZIP_CODE AS zip_code, stg_rems_facility.FIRST_NAME AS first_name, stg_rems_facility.MIDDLE_NAME AS middle_name, stg_rems_facility.LAST_NAME AS last_name, stg_rems_facility.STATUS_DESCRIPTION AS status_description, stg_rems_facility.IN_PROGRESS_STEP AS in_progress_step, stg_rems_facility.PHONE_NUMBER AS phone_number, stg_rems_facility.EFFECTIVE_DATE AS effective_date, stg_rems_facility.EXPIRATION_DATE AS expiration_date, stg_rems_facility.LAST_BUILD_DATE AS last_build_date FROM WSMP_ADMIN.STG_REMS_FACILITY;

CREATE  VIEW WSMP_ADMIN_ORA.i_contact_data AS
SELECT d.ims_id, d.veeva_account_id, CASE WHEN (dncn.PRODUCT_NAME = 'NUVIGIL'::varchar(7)) THEN 'Y'::varchar(1) ELSE NULL END AS nuvigil_dnc_flag, CASE WHEN (dncf.PRODUCT_NAME = 'FENTORA'::varchar(7)) THEN 'Y'::varchar(1) ELSE NULL END AS fentora_dnc_flag, CASE WHEN (s.IMS_ID IS NOT NULL) THEN 'Y'::varchar(1) ELSE NULL END AS dnp_flag, r.status AS tirf_rems_flag, r.effective_date AS tirf_rems_effective_date, r.expiration_date AS tirf_rems_expiration_date, seg.PARAGARD_SEGMENT AS paragard_segment FROM ((((((SELECT ims_ids.ims_id, a.ID AS veeva_account_id FROM ((((SELECT tfc_ims_presc_demo_w.ims_id FROM WSMP_ADMIN.tfc_ims_presc_demo_w UNION SELECT dim_dnc.IMS_ID AS ims_id FROM WSMP_ADMIN.DIM_DNC) UNION SELECT debarred.IMS_ID AS ims_id FROM WSMP_ADMIN.DEBARRED WHERE (debarred.CURRENT_IND = 'Y'::varchar(1))) UNION SELECT vv_account.ID_VOD__C AS ims_id FROM WSMP_ADMIN.VV_ACCOUNT WHERE (vv_account.ID_VOD__C IS NOT NULL)) ims_ids LEFT JOIN WSMP_ADMIN.VV_ACCOUNT a ON ((ims_ids.ims_id = a.ID_VOD__C)))) d LEFT JOIN WSMP_ADMIN.DIM_DNC dncn ON (((d.ims_id = dncn.IMS_ID) AND (dncn.PRODUCT_NAME = 'NUVIGIL'::varchar(7))))) LEFT JOIN WSMP_ADMIN.DIM_DNC dncf ON (((d.ims_id = dncf.IMS_ID) AND (dncf.PRODUCT_NAME = 'FENTORA'::varchar(7))))) LEFT JOIN WSMP_ADMIN.DEBARRED s ON (((d.ims_id = s.IMS_ID) AND (s.CURRENT_IND = 'Y'::varchar(1))))) LEFT JOIN (SELECT r.IMS_ID AS ims_id, CASE WHEN ((r.STATUS = 'Enrolled'::varchar(8)) AND (r.PPAF_COUNT IS NOT NULL)) THEN concat('Enrolled-'::varchar(9), (r.PPAF_COUNT)::varchar) ELSE r.STATUS END AS status, r.EFFECTIVE_DATE AS effective_date, r.EXPIRATION_DATE AS expiration_date FROM WSMP_ADMIN.STG_REMS_PRESCRIBER r GROUP BY r.IMS_ID, CASE WHEN ((r.STATUS = 'Enrolled'::varchar(8)) AND (r.PPAF_COUNT IS NOT NULL)) THEN concat('Enrolled-'::varchar(9), (r.PPAF_COUNT)::varchar) ELSE r.STATUS END, r.EFFECTIVE_DATE, r.EXPIRATION_DATE) r ON ((d.ims_id = r.ims_id))) LEFT JOIN WSMP_ADMIN.STG_TW_PARAGARD_SEGMENT seg ON ((d.ims_id = seg.IMS_ID))) GROUP BY d.ims_id, d.veeva_account_id, CASE WHEN (dncn.PRODUCT_NAME = 'NUVIGIL'::varchar(7)) THEN 'Y'::varchar(1) ELSE NULL END, CASE WHEN (dncf.PRODUCT_NAME = 'FENTORA'::varchar(7)) THEN 'Y'::varchar(1) ELSE NULL END, CASE WHEN (s.IMS_ID IS NOT NULL) THEN 'Y'::varchar(1) ELSE NULL END, r.status, r.effective_date, r.expiration_date, seg.PARAGARD_SEGMENT;

CREATE  VIEW WSMP_ADMIN_ORA.roster_office_toolkit AS
(((((((((((SELECT lower(dim_csf_sales_roster_teva.USERNAME) AS username, dim_csf_sales_roster_teva.SALES_FORCE_ID AS sales_force_id FROM WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA WHERE ((dim_csf_sales_roster_teva.USERNAME IS NOT NULL) AND (length(dim_csf_sales_roster_teva.TERRITORY_NUM) = 8)) UNION SELECT 'afoote'::varchar(6), 'TN'::varchar(2) FROM v_catalog.dual) UNION SELECT 'sbischof'::varchar(8), 'TN'::varchar(2) FROM v_catalog.dual) UNION SELECT 'phazel'::varchar(6), 'TN'::varchar(2) FROM v_catalog.dual) UNION SELECT 'gfowler'::varchar(7), 'TN'::varchar(2) FROM v_catalog.dual) UNION SELECT 'mtarrant'::varchar(8), 'TN'::varchar(2) FROM v_catalog.dual) UNION SELECT 'jpage'::varchar(5), 'TC'::varchar(2) FROM v_catalog.dual) UNION SELECT 'mday'::varchar(4), 'TC'::varchar(2) FROM v_catalog.dual) UNION SELECT 'kreedy'::varchar(6), 'TC'::varchar(2) FROM v_catalog.dual) UNION SELECT 'trainey'::varchar(7), 'TO'::varchar(2) FROM v_catalog.dual) UNION SELECT 'mkartman'::varchar(8), 'TO'::varchar(2) FROM v_catalog.dual) UNION SELECT 'dmack01'::varchar(7), 'TN'::varchar(2) FROM v_catalog.dual) UNION SELECT 'rkim'::varchar(4), 'TN'::varchar(2) FROM v_catalog.dual;

CREATE  VIEW WSMP_ADMIN_ORA.v_siebel_demo AS
SELECT c.ROW_ID AS csf_demo_id, p.X_SALES_FORCE AS sales_force_id, 'PROF'::varchar(4) AS demo_type, x.ATTRIB_03 AS ims_id, x.X_ATTRIB_50 AS hms_id, substr(btrim(x.ATTRIB_36), 1, 10) AS me_num, ca.DEA_NUM AS dea_num, ca.DEA_EXPR_DT AS dea_expir_date, substr(ca.X_ATTRIB_03, 1, 12) AS dea_drug_schedule, p.NAME AS territory_num, 'N'::varchar(1) AS house_acct_flag, 'A'::varchar(1) AS src_verification_status, c.LAST_NAME AS last_name, c.FST_NAME AS first_name, c.MID_NAME AS middle_name, c.PER_TITLE_SUFFIX AS suffix_name, fnx.CRRPT_FMT_CD AS degree, substr(btrim(ap.ADDR), 1, 75) AS address1, substr(btrim(ap.ADDR_LINE_2), 1, 75) AS address2, substr(btrim(ap.ADDR_LINE_3), 1, 75) AS address3, ap.CITY AS city, ap.STATE AS state, ap.ZIPCODE AS zip, c.WORK_PH_NUM AS phone, c.FAX_PH_NUM AS fax, c.CELL_PH_NUM AS mobile, c.EMAIL_ADDR AS email, ms.NAME AS prim_specialty, substr(btrim(l.LICENSE_NUM), 1, 20) AS state_license_number, l.STATE_CD AS state_license_state, CASE WHEN (l.X_OK_TO_SAMPLE_FLG = 'Y'::char(1)) THEN 'E'::varchar(1) ELSE 'I'::varchar(1) END AS state_license_elig_code, l.LICENSE_EXP_DT AS state_license_expir_date, substr(btrim(CASE WHEN ((btrim(fnx.CRRPT_FMT_CD) IS NOT NULL) AND (btrim(l.STATE_CD) IS NOT NULL) AND (btrim(l.LICENSE_NUM) IS NOT NULL)) THEN ((((btrim(fnx.CRRPT_FMT_CD) || '-'::varchar(1)) || btrim(l.STATE_CD)) || '-'::varchar(1)) || btrim(l.LICENSE_NUM)) ELSE NULL END), 1, 30) AS state_num, l.X_VALIDATION_DT AS sln_validation_date, CASE WHEN ((l.X_VALIDATION_DT IS NOT NULL) AND (l.X_OK_TO_SAMPLE_FLG = 'Y'::char(1))) THEN 'MedPro'::varchar(6) ELSE NULL END AS sln_validation_source, x.ATTRIB_09 AS no_spend, pc.X_ATTRIB_11 AS treats_es, CASE WHEN (p.X_SALES_FORCE = 'TC'::varchar(2)) THEN x.X_ATTRIB_58 ELSE NULL END AS nuvigil_dnc, CASE WHEN (p.X_SALES_FORCE = 'TC'::varchar(2)) THEN x.X_ATTRIB_83 ELSE NULL::"char" END AS nuvigil_rems_pb, CASE WHEN (p.X_SALES_FORCE = 'TC'::varchar(2)) THEN substr(x.X_ATTRIB_73, 1, 1) ELSE NULL END AS nuvigil_app, CASE WHEN (p.X_SALES_FORCE = 'TP'::varchar(2)) THEN x.X_ATTRIB_72 ELSE NULL END AS fentora_dnc, CASE WHEN (p.X_SALES_FORCE = 'TP'::varchar(2)) THEN x.X_ATTRIB_71 ELSE NULL::"char" END AS fentora_app, CASE WHEN (p.X_SALES_FORCE = 'TP'::varchar(2)) THEN x.ATTRIB_42 ELSE NULL END AS fentora_rems_status, pc.LAST_CALL_DT AS sfa_last_call_date, coalesce(cm2.CM_ID, cm1.CM_ID) AS cm_id, c.ROW_ID AS siebel_contact_row_id, ap.ROW_ID AS siebel_addr_per_row_id, 'Y'::varchar(1) AS ora_viewable_flag, c.CREATED AS sfa_create_date, (statement_timestamp())::timestamp AS last_build_date, NULL AS ceph_id, CASE WHEN (length(c.INTEGRATION_ID) = 18) THEN c.INTEGRATION_ID ELSE NULL END AS veeva_account_id, pc.STATUS AS territory_status FROM (((((((((((WSMP_ADMIN.S_CONTACT c JOIN WSMP_ADMIN.S_POSTN_CON pc ON ((pc.CON_ID = c.ROW_ID))) JOIN WSMP_ADMIN.S_POSTN p ON ((pc.POSTN_ID = p.ROW_ID))) JOIN WSMP_ADMIN.S_ORG_EXT o ON ((p.BU_ID = o.ROW_ID))) LEFT JOIN WSMP_ADMIN.S_CONTACT_X x ON ((x.ROW_ID = c.ROW_ID))) LEFT JOIN WSMP_ADMIN.S_CONTACT_FNX fnx ON ((fnx.ROW_ID = c.ROW_ID))) LEFT JOIN WSMP_ADMIN.S_ADDR_PER ap ON ((ap.ROW_ID = pc.PR_ADDR_ID))) LEFT JOIN WSMP_ADMIN.S_MED_SPEC ms ON ((ms.ROW_ID = c.MED_SPEC_ID))) LEFT JOIN (SELECT iq.ROW_ID, iq.CREATED, iq.CREATED_BY, iq.LAST_UPD, iq.LAST_UPD_BY, iq.MODIFICATION_NUM, iq.CONFLICT_ID, iq.ACTIVE_FLG, iq.ADDR_PER_ID, iq.BL_ADDR_FLG, iq.FRAUD_FLG, iq.MAIN_ADDR_FLG, iq.RELATION_TYPE_CD, iq.SHIP_ADDR_FLG, iq.DEA_EXPR_DT, iq.END_DT, iq.FRI_1ST_CLOSE_TM, iq.FRI_1ST_OPEN_TM, iq.FRI_2ND_CLOSE_TM, iq.FRI_2ND_OPEN_TM, iq.MON_1ST_CLOSE_TM, iq.MON_1ST_OPEN_TM, iq.MON_2ND_CLOSE_TM, iq.MON_2ND_OPEN_TM, iq.NUM_MONTHS_AT_ADDR, iq.SAT_1ST_CLOSE_TM, iq.SAT_1ST_OPEN_TM, iq.SAT_2ND_CLOSE_TM, iq.SAT_2ND_OPEN_TM, iq.START_DT, iq.SUN_1ST_CLOSE_TM, iq.SUN_1ST_OPEN_TM, iq.SUN_2ND_CLOSE_TM, iq.SUN_2ND_OPEN_TM, iq.THU_1ST_CLOSE_TM, iq.THU_1ST_OPEN_TM, iq.THU_2ND_CLOSE_TM, iq.THU_2ND_OPEN_TM, iq.TUE_1ST_CLOSE_TM, iq.TUE_1ST_OPEN_TM, iq.TUE_2ND_CLOSE_TM, iq.TUE_2ND_OPEN_TM, iq.WED_1ST_CLOSE_TM, iq.WED_1ST_OPEN_TM, iq.WED_2ND_CLOSE_TM, iq.WED_2ND_OPEN_TM, iq.ACCNT_ID, iq.ADDR_MAIL_CD, iq.ADDR_TYPE_CD, iq.BRICK_ID, iq.BU_ID, iq.CONTACT_ID, iq.DEA_NUM, iq.DFLT_SHIP_PRIO_CD, iq.EMAIL_ADDR, iq.FAX_PH_NUM, iq.MAIL_TYPE_CD, iq.OCCUPANCY_CD, iq.ORG_GROUP_ID, iq.PH_NUM, iq.TRNSPRT_ZONE_CD, iq.X_ATTRIB_01, iq.X_ATTRIB_02, iq.X_ATTRIB_03, iq.X_ATTRIB_04, iq.X_ATTRIB_05, iq.X_ATTRIB_06, iq.X_ATTRIB_07, iq.X_OK_TO_SAMPLE, iq.ADDRESSEE, iq.ALIGNMENT_FLG, iq.DB_LAST_UPD, iq.DB_LAST_UPD_SRC, iq.YEARLY_END_DT, iq.YEARLY_START_DT, iq.X_SRC_LAST_UPD, iq.rnk FROM (SELECT sca.ROW_ID, sca.CREATED, sca.CREATED_BY, sca.LAST_UPD, sca.LAST_UPD_BY, sca.MODIFICATION_NUM, sca.CONFLICT_ID, sca.ACTIVE_FLG, sca.ADDR_PER_ID, sca.BL_ADDR_FLG, sca.FRAUD_FLG, sca.MAIN_ADDR_FLG, sca.RELATION_TYPE_CD, sca.SHIP_ADDR_FLG, sca.DEA_EXPR_DT, sca.END_DT, sca.FRI_1ST_CLOSE_TM, sca.FRI_1ST_OPEN_TM, sca.FRI_2ND_CLOSE_TM, sca.FRI_2ND_OPEN_TM, sca.MON_1ST_CLOSE_TM, sca.MON_1ST_OPEN_TM, sca.MON_2ND_CLOSE_TM, sca.MON_2ND_OPEN_TM, sca.NUM_MONTHS_AT_ADDR, sca.SAT_1ST_CLOSE_TM, sca.SAT_1ST_OPEN_TM, sca.SAT_2ND_CLOSE_TM, sca.SAT_2ND_OPEN_TM, sca.START_DT, sca.SUN_1ST_CLOSE_TM, sca.SUN_1ST_OPEN_TM, sca.SUN_2ND_CLOSE_TM, sca.SUN_2ND_OPEN_TM, sca.THU_1ST_CLOSE_TM, sca.THU_1ST_OPEN_TM, sca.THU_2ND_CLOSE_TM, sca.THU_2ND_OPEN_TM, sca.TUE_1ST_CLOSE_TM, sca.TUE_1ST_OPEN_TM, sca.TUE_2ND_CLOSE_TM, sca.TUE_2ND_OPEN_TM, sca.WED_1ST_CLOSE_TM, sca.WED_1ST_OPEN_TM, sca.WED_2ND_CLOSE_TM, sca.WED_2ND_OPEN_TM, sca.ACCNT_ID, sca.ADDR_MAIL_CD, sca.ADDR_TYPE_CD, sca.BRICK_ID, sca.BU_ID, sca.CONTACT_ID, sca.DEA_NUM, sca.DFLT_SHIP_PRIO_CD, sca.EMAIL_ADDR, sca.FAX_PH_NUM, sca.MAIL_TYPE_CD, sca.OCCUPANCY_CD, sca.ORG_GROUP_ID, sca.PH_NUM, sca.TRNSPRT_ZONE_CD, sca.X_ATTRIB_01, sca.X_ATTRIB_02, sca.X_ATTRIB_03, sca.X_ATTRIB_04, sca.X_ATTRIB_05, sca.X_ATTRIB_06, sca.X_ATTRIB_07, sca.X_OK_TO_SAMPLE, sca.ADDRESSEE, sca.ALIGNMENT_FLG, sca.DB_LAST_UPD, sca.DB_LAST_UPD_SRC, sca.YEARLY_END_DT, sca.YEARLY_START_DT, sca.X_SRC_LAST_UPD, row_number() OVER (PARTITION BY sca.CONTACT_ID, sca.ADDR_PER_ID ORDER BY sca.LAST_UPD DESC, sca.CREATED DESC) AS rnk FROM WSMP_ADMIN.S_CON_ADDR sca) iq WHERE (iq.rnk = 1)) ca ON (((ca.ADDR_PER_ID = pc.PR_ADDR_ID) AND (ca.CONTACT_ID = pc.CON_ID)))) LEFT JOIN WSMP_ADMIN.S_STATE_LIC_LS l ON (((l.ROW_ID = ca.X_ATTRIB_02) AND (l.CONTACT_ID = ca.CONTACT_ID) AND (l.STATUS_CD <> 'Invalid'::varchar(7))))) LEFT JOIN WSMP_ADMIN.STG_CM_ID_XREF cm1 ON (((c.ROW_ID = cm1.ID_NUM) AND (cm1.ID_TYPE = 'SIEBEL_ID'::varchar(9))))) LEFT JOIN WSMP_ADMIN.STG_CM_ID_XREF cm2 ON (((x.ATTRIB_03 = cm2.ID_NUM) AND (cm2.ID_TYPE = 'IMS_ID'::varchar(6))))) WHERE ((p.X_SALES_FORCE = ANY (ARRAY['TB'::varchar(2), 'TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TW'::varchar(2)])) AND (p.NAME !~~ '%SiebelAdministrator%'::varchar(21)) AND (p.NAME <> 'Align_2007'::varchar(10)) AND (NOT ((x.ATTRIB_03 IS NULL) AND (c.DEGREE = ANY (ARRAY['Billing Staff'::varchar(13), 'Office Staff'::varchar(12), 'Other Contact'::varchar(13), 'Pharmacist/Pharm D'::varchar(18), 'Practice Manager'::varchar(16), 'Refill Coordinator'::varchar(18), 'Reimbursement Specialist'::varchar(24)])))));

CREATE  VIEW WSMP_ADMIN_ORA.v_siebel_calls AS
SELECT rep_p.X_SALES_FORCE AS sales_force_id, ea.PAR_EVT_ID AS par_evt_id, ea.ROW_ID AS csf_call_id, ea.TARGET_PER_ID AS csf_demo_id, 'PROF'::varchar(4) AS legacy_call_type, ea.NAME AS name_on_call, ea.ZIPCODE AS zip_on_call, ea.SUBTYPE_CD AS subtype_cd, ea.TODO_CD AS todo_cd, ea.INTEGRATION_ID AS integration_id, ea.ROW_ID AS siebel_evt_act_row_id, ea.TARGET_PER_ID AS siebel_target_per_id, d.ims_id, d.cm_id, d.me_num, ca.DEA_NUM AS dea_num, emp.CSN AS rep_id, rep_p.NAME AS territory_num, trunc(ea.APPT_START_DT, 'DD'::varchar(2)) AS call_date, details.first_detailed_product, details.second_detailed_product, details.third_detailed_product, details.fourth_detailed_product, details.fifth_detailed_product, details.sixth_detailed_product, CASE WHEN (length(c.INTEGRATION_ID) = 18) THEN c.INTEGRATION_ID ELSE NULL END AS veeva_account_id FROM (((((((WSMP_ADMIN.S_EVT_ACT ea JOIN WSMP_ADMIN.S_CONTACT c ON ((c.ROW_ID = ea.TARGET_PER_ID))) LEFT JOIN WSMP_ADMIN.S_CONTACT_X x ON ((x.ROW_ID = c.ROW_ID))) JOIN WSMP_ADMIN.S_POSTN rep_p ON ((rep_p.ROW_ID = ea.OWNER_POSTN_ID))) LEFT JOIN WSMP_ADMIN.S_CONTACT emp ON ((emp.ROW_ID = ea.CREATED_BY))) LEFT JOIN (SELECT iq.ims_id, iq.cm_id, iq.me_num, iq.siebel_contact_row_id, iq.rnk FROM (SELECT v_siebel_demo.ims_id, v_siebel_demo.cm_id, v_siebel_demo.me_num, v_siebel_demo.siebel_contact_row_id, row_number() OVER (PARTITION BY v_siebel_demo.siebel_contact_row_id ORDER BY v_siebel_demo.veeva_account_id, v_siebel_demo.sales_force_id) AS rnk FROM WSMP_ADMIN.v_siebel_demo) iq WHERE (iq.rnk = 1)) d ON ((c.ROW_ID = d.siebel_contact_row_id))) LEFT JOIN (SELECT iq2.ROW_ID, iq2.CREATED, iq2.CREATED_BY, iq2.LAST_UPD, iq2.LAST_UPD_BY, iq2.MODIFICATION_NUM, iq2.CONFLICT_ID, iq2.ACTIVE_FLG, iq2.ADDR_PER_ID, iq2.BL_ADDR_FLG, iq2.FRAUD_FLG, iq2.MAIN_ADDR_FLG, iq2.RELATION_TYPE_CD, iq2.SHIP_ADDR_FLG, iq2.DEA_EXPR_DT, iq2.END_DT, iq2.FRI_1ST_CLOSE_TM, iq2.FRI_1ST_OPEN_TM, iq2.FRI_2ND_CLOSE_TM, iq2.FRI_2ND_OPEN_TM, iq2.MON_1ST_CLOSE_TM, iq2.MON_1ST_OPEN_TM, iq2.MON_2ND_CLOSE_TM, iq2.MON_2ND_OPEN_TM, iq2.NUM_MONTHS_AT_ADDR, iq2.SAT_1ST_CLOSE_TM, iq2.SAT_1ST_OPEN_TM, iq2.SAT_2ND_CLOSE_TM, iq2.SAT_2ND_OPEN_TM, iq2.START_DT, iq2.SUN_1ST_CLOSE_TM, iq2.SUN_1ST_OPEN_TM, iq2.SUN_2ND_CLOSE_TM, iq2.SUN_2ND_OPEN_TM, iq2.THU_1ST_CLOSE_TM, iq2.THU_1ST_OPEN_TM, iq2.THU_2ND_CLOSE_TM, iq2.THU_2ND_OPEN_TM, iq2.TUE_1ST_CLOSE_TM, iq2.TUE_1ST_OPEN_TM, iq2.TUE_2ND_CLOSE_TM, iq2.TUE_2ND_OPEN_TM, iq2.WED_1ST_CLOSE_TM, iq2.WED_1ST_OPEN_TM, iq2.WED_2ND_CLOSE_TM, iq2.WED_2ND_OPEN_TM, iq2.ACCNT_ID, iq2.ADDR_MAIL_CD, iq2.ADDR_TYPE_CD, iq2.BRICK_ID, iq2.BU_ID, iq2.CONTACT_ID, iq2.DEA_NUM, iq2.DFLT_SHIP_PRIO_CD, iq2.EMAIL_ADDR, iq2.FAX_PH_NUM, iq2.MAIL_TYPE_CD, iq2.OCCUPANCY_CD, iq2.ORG_GROUP_ID, iq2.PH_NUM, iq2.TRNSPRT_ZONE_CD, iq2.X_ATTRIB_01, iq2.X_ATTRIB_02, iq2.X_ATTRIB_03, iq2.X_ATTRIB_04, iq2.X_ATTRIB_05, iq2.X_ATTRIB_06, iq2.X_ATTRIB_07, iq2.X_OK_TO_SAMPLE, iq2.ADDRESSEE, iq2.ALIGNMENT_FLG, iq2.DB_LAST_UPD, iq2.DB_LAST_UPD_SRC, iq2.YEARLY_END_DT, iq2.YEARLY_START_DT, iq2.X_SRC_LAST_UPD, iq2.rnk FROM (SELECT ca.ROW_ID, ca.CREATED, ca.CREATED_BY, ca.LAST_UPD, ca.LAST_UPD_BY, ca.MODIFICATION_NUM, ca.CONFLICT_ID, ca.ACTIVE_FLG, ca.ADDR_PER_ID, ca.BL_ADDR_FLG, ca.FRAUD_FLG, ca.MAIN_ADDR_FLG, ca.RELATION_TYPE_CD, ca.SHIP_ADDR_FLG, ca.DEA_EXPR_DT, ca.END_DT, ca.FRI_1ST_CLOSE_TM, ca.FRI_1ST_OPEN_TM, ca.FRI_2ND_CLOSE_TM, ca.FRI_2ND_OPEN_TM, ca.MON_1ST_CLOSE_TM, ca.MON_1ST_OPEN_TM, ca.MON_2ND_CLOSE_TM, ca.MON_2ND_OPEN_TM, ca.NUM_MONTHS_AT_ADDR, ca.SAT_1ST_CLOSE_TM, ca.SAT_1ST_OPEN_TM, ca.SAT_2ND_CLOSE_TM, ca.SAT_2ND_OPEN_TM, ca.START_DT, ca.SUN_1ST_CLOSE_TM, ca.SUN_1ST_OPEN_TM, ca.SUN_2ND_CLOSE_TM, ca.SUN_2ND_OPEN_TM, ca.THU_1ST_CLOSE_TM, ca.THU_1ST_OPEN_TM, ca.THU_2ND_CLOSE_TM, ca.THU_2ND_OPEN_TM, ca.TUE_1ST_CLOSE_TM, ca.TUE_1ST_OPEN_TM, ca.TUE_2ND_CLOSE_TM, ca.TUE_2ND_OPEN_TM, ca.WED_1ST_CLOSE_TM, ca.WED_1ST_OPEN_TM, ca.WED_2ND_CLOSE_TM, ca.WED_2ND_OPEN_TM, ca.ACCNT_ID, ca.ADDR_MAIL_CD, ca.ADDR_TYPE_CD, ca.BRICK_ID, ca.BU_ID, ca.CONTACT_ID, ca.DEA_NUM, ca.DFLT_SHIP_PRIO_CD, ca.EMAIL_ADDR, ca.FAX_PH_NUM, ca.MAIL_TYPE_CD, ca.OCCUPANCY_CD, ca.ORG_GROUP_ID, ca.PH_NUM, ca.TRNSPRT_ZONE_CD, ca.X_ATTRIB_01, ca.X_ATTRIB_02, ca.X_ATTRIB_03, ca.X_ATTRIB_04, ca.X_ATTRIB_05, ca.X_ATTRIB_06, ca.X_ATTRIB_07, ca.X_OK_TO_SAMPLE, ca.ADDRESSEE, ca.ALIGNMENT_FLG, ca.DB_LAST_UPD, ca.DB_LAST_UPD_SRC, ca.YEARLY_END_DT, ca.YEARLY_START_DT, ca.X_SRC_LAST_UPD, row_number() OVER (PARTITION BY ca.CONTACT_ID, ca.ADDR_PER_ID ORDER BY ca.LAST_UPD DESC, ca.CREATED DESC) AS rnk FROM WSMP_ADMIN.S_CON_ADDR ca) iq2 WHERE (iq2.rnk = 1)) ca ON (((ca.ADDR_PER_ID = ea.TARGET_PER_ADDR_ID) AND (ca.CONTACT_ID = ea.TARGET_PER_ID)))) LEFT JOIN (SELECT d.activity_id, max(CASE WHEN (d.priority = 1) THEN d.product_name ELSE NULL END) AS first_detailed_product, max(CASE WHEN (d.priority = 2) THEN d.product_name ELSE NULL END) AS second_detailed_product, max(CASE WHEN (d.priority = 3) THEN d.product_name ELSE NULL END) AS third_detailed_product, max(CASE WHEN (d.priority = 4) THEN d.product_name ELSE NULL END) AS fourth_detailed_product, max(CASE WHEN (d.priority = 5) THEN d.product_name ELSE NULL END) AS fifth_detailed_product, max(CASE WHEN (d.priority = 6) THEN d.product_name ELSE NULL END) AS sixth_detailed_product FROM (SELECT appl.ACTIVITY_ID AS activity_id, upper(spi.NAME) AS product_name, row_number() OVER (PARTITION BY appl.ACTIVITY_ID ORDER BY appl.PRIORITY_NUM, upper(spi.NAME)) AS priority FROM (WSMP_ADMIN.S_ACT_PROD_APPL appl LEFT JOIN WSMP_ADMIN.S_PROD_INT spi ON ((appl.PRDINT_ID = spi.ROW_ID))) WHERE (appl.CONFLICT_ID = '0'::varchar(1))) d GROUP BY d.activity_id) details ON ((details.activity_id = ea.PAR_EVT_ID))) WHERE ((ea.EVT_STAT_CD = 'Submitted'::varchar(9)) AND (rep_p.POSTN_TYPE_CD = ANY (ARRAY['Sales Representative'::varchar(20), 'TSP Test Position'::varchar(17)])) AND (ea.OWNER_POSTN_ID <> '0-5220'::varchar(6)) AND (((ea.APPT_START_DT >= '2012-01-01 00:00:00'::timestamp) AND (rep_p.X_SALES_FORCE = ANY (ARRAY['TB'::varchar(2), 'TN'::varchar(2), 'TR'::varchar(2), 'TW'::varchar(2)]))) OR ((ea.APPT_START_DT >= '2012-03-01 00:00:00'::timestamp) AND (rep_p.X_SALES_FORCE = ANY (ARRAY['TC'::varchar(2), 'TP'::varchar(2)])))) AND (ea.APPT_START_DT < (statement_timestamp())::timestamp) AND (ea.SUBTYPE_CD = ANY (ARRAY['Contact Call'::varchar(12), 'Attendee Call'::varchar(13)])) AND ((ea.TODO_CD ~~ '%Detail%'::varchar(8)) OR (ea.TODO_CD ~~ '%Call%'::varchar(6))));

CREATE  VIEW WSMP_ADMIN_ORA.v_siebel_bp_affiliations AS
SELECT oex.ROW_ID AS siebel_account_row_id, oex.X_ATTRIB_109 AS bp_code, c.ROW_ID AS siebel_contact_row_id, cx.ATTRIB_03 AS ims_id FROM (((WSMP_ADMIN.S_ORG_EXT_X oex JOIN WSMP_ADMIN.S_PARTY_PER pp ON ((oex.ROW_ID = pp.PARTY_ID))) JOIN WSMP_ADMIN.S_CONTACT c ON ((pp.PERSON_ID = c.ROW_ID))) LEFT JOIN WSMP_ADMIN.S_CONTACT_X cx ON ((cx.ROW_ID = c.ROW_ID))) WHERE (oex.X_ATTRIB_109 IS NOT NULL);

CREATE  VIEW WSMP_ADMIN_ORA.v_veeva_calls AS
SELECT c.ID AS call_id, trunc((c.LOCAL_CALL_DATETIME_VOD__C)::timestamp, 'DD'::varchar(2)) AS call_date, h.submit_date, c.LOCAL_CALL_DATETIME_VOD__C AS call_datetime, a.ID AS csf_demo_id, substr(c.TERRITORY_VOD__C, 1, 2) AS sales_force_id, c.TERRITORY_VOD__C AS territory_num, c.CALL_TYPE_VOD__C AS call_type_vod__c, c.ACCOUNT_VOD__C AS demo_id, CASE WHEN (rta.NAME = ANY (ARRAY['Hospital_vod'::varchar(12), 'Pharmacy_vod'::varchar(12), 'Practice_vod'::varchar(12), 'ParaGard_TVA'::varchar(12)])) THEN 'ACCT'::varchar(4) WHEN ((rta.NAME = 'Professional_vod'::varchar(16)) AND (a.ID_VOD__C IS NULL) AND (a.CREDENTIALS_VOD__C = ANY (ARRAY['Nurse'::varchar(5), 'Billing Staff'::varchar(13), 'Office Staff'::varchar(12), 'Other Contact'::varchar(13), 'Pharmacist/Pharm D'::varchar(18), 'Practice Manager'::varchar(16), 'Refill Coordinator'::varchar(18), 'Reimbursement Specialist'::varchar(24)]))) THEN 'CONT'::varchar(4) WHEN (rta.NAME = 'Staff'::varchar(5)) THEN 'CONT'::varchar(4) WHEN (rta.NAME = 'Professional_vod'::varchar(16)) THEN 'PROF'::varchar(4) ELSE 'UNK'::varchar(3) END AS legacy_call_type, substr(c.ENTITY_DISPLAY_NAME_VOD__C, 1, 150) AS name_on_call, c.ZIP_VOD__C AS zip_on_call, a.ID_VOD__C AS ims_id, a.ACCOUNT_MASTER_ID_TVA__C AS hms_id, a.NPI_VOD__C AS npi, a.CREDENTIALS_VOD__C AS degree, a.ID AS veeva_account_id, substr(btrim(a.ME__C), 1, 10) AS me_num, c.DEA_VOD__C AS dea_num, CASE WHEN (NOT regexp_like(a.EXTERNAL_ID_VOD__C, '[[:digit:]]{9}'::varchar(14), ''::varchar)) THEN a.EXTERNAL_ID_VOD__C ELSE NULL END AS siebel_target_per_id, CASE WHEN regexp_like(a.EXTERNAL_ID_VOD__C, '[[:digit:]]{9}'::varchar(14), ''::varchar) THEN a.EXTERNAL_ID_VOD__C ELSE NULL END AS bp_code, c.OWNERID AS ownerid, u.EMPLOYEENUMBER AS employeenumber, c.PARENT_CALL_VOD__C AS parent_call_vod__c, CASE WHEN (rtc.NAME = 'Account Management'::varchar(18)) THEN upper(rtc.NAME) ELSE d.first_detailed_product END AS first_detailed_product, d.second_detailed_product, d.third_detailed_product, d.fourth_detailed_product, d.fifth_detailed_product, d.sixth_detailed_product, c.CREATEDBYID AS created_by, c.CREATEDDATE AS created_date, coalesce(c.ATTENDEES_VOD__C, 0::numeric(18,0)) AS attendees, CASE WHEN (c.ATTENDEE_TYPE_VOD__C = 'Group_Account_vod'::varchar(17)) THEN 'Group'::varchar(5) WHEN (c.ATTENDEE_TYPE_VOD__C = 'Person_Account_vod'::varchar(18)) THEN 'Person'::varchar(6) ELSE c.ATTENDEE_TYPE_VOD__C END AS attendee_type FROM ((((((WSMP_ADMIN.VV_CALL2_VOD__C c JOIN WSMP_ADMIN.VV_ACCOUNT a ON ((c.ACCOUNT_VOD__C = a.ID))) JOIN WSMP_ADMIN.VV_RECORDTYPE rtc ON ((c.RECORDTYPEID = rtc.ID))) JOIN WSMP_ADMIN.VV_RECORDTYPE rta ON ((a.RECORDTYPEID = rta.ID))) LEFT JOIN (SELECT VV_CALL2_VOD__HISTORY.PARENTID AS parentid, trunc(max(VV_CALL2_VOD__HISTORY.CREATEDDATE), 'DD'::varchar(2)) AS submit_date FROM WSMP_ADMIN.VV_CALL2_VOD__HISTORY WHERE (VV_CALL2_VOD__HISTORY.NEWVALUE = 'Submitted_vod'::varchar(13)) GROUP BY VV_CALL2_VOD__HISTORY.PARENTID) h ON ((c.ID = h.parentid))) LEFT JOIN WSMP_ADMIN.VV_USER u ON ((c.OWNERID = u.ID))) LEFT JOIN (SELECT d.call2_vod__c, max(CASE WHEN (d.priority = 1) THEN d.product_name ELSE NULL END) AS first_detailed_product, max(CASE WHEN (d.priority = 2) THEN d.product_name ELSE NULL END) AS second_detailed_product, max(CASE WHEN (d.priority = 3) THEN d.product_name ELSE NULL END) AS third_detailed_product, max(CASE WHEN (d.priority = 4) THEN d.product_name ELSE NULL END) AS fourth_detailed_product, max(CASE WHEN (d.priority = 5) THEN d.product_name ELSE NULL END) AS fifth_detailed_product, max(CASE WHEN (d.priority = 6) THEN d.product_name ELSE NULL END) AS sixth_detailed_product FROM (SELECT d.CALL2_VOD__C AS call2_vod__c, row_number() OVER (PARTITION BY d.CALL2_VOD__C ORDER BY d.DETAIL_PRIORITY_VOD__C, p.NAME) AS priority, upper(p.NAME) AS product_name FROM (WSMP_ADMIN.VV_CALL2_DETAIL_VOD__C d JOIN WSMP_ADMIN.VV_PRODUCT_VOD__C p ON ((d.PRODUCT_VOD__C = p.ID)))) d GROUP BY d.call2_vod__c) d ON ((d.call2_vod__c = c.ID))) WHERE ((c.STATUS_VOD__C = 'Submitted_vod'::varchar(13)) AND (c.CALL_DATE_VOD__C < trunc((statement_timestamp())::timestamp, 'DD'::varchar(2))) AND (c.CALL_TYPE_VOD__C <> 'Sample Only'::varchar(11)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_asi_mkt_access_obw_wake AS
SELECT mpzd.ZIP AS zip, mpzd.STATE AS state, rx.plan_id AS payer_plan_num, to_char(rx.ims_report_num, '00'::varchar(2)) AS report_num, to_char(rx.ims_product_group_num, '000000000'::varchar(9)) AS ims_product_group_num, ((substr(rx.data_date, 1, 2) || '/20'::varchar(3)) || substr(rx.data_date, 5, 2)) AS data_month, sum((((rx.nrx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_001, sum((((rx.nrx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_002, sum((((rx.nrx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_003, sum((((rx.nrx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_004, sum((((rx.nrx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_005, sum((((rx.nrx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_006, sum((((rx.nrx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_007, sum((((rx.nrx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_008, sum((((rx.nrx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_009, sum((((rx.nrx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_010, sum((((rx.nrx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_011, sum((((rx.nrx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_012, sum((((rx.nrx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_013, sum((((rx.nrx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_014, sum((((rx.nrx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_015, sum((((rx.nrx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_016, sum((((rx.nrx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_017, sum((((rx.nrx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_018, sum((((rx.nrx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_019, sum((((rx.nrx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_020, sum((((rx.nrx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_021, sum((((rx.nrx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_022, sum((((rx.nrx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_023, sum((((rx.nrx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS nrx_024, sum((((rx.trx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_001, sum((((rx.trx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_002, sum((((rx.trx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_003, sum((((rx.trx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_004, sum((((rx.trx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_005, sum((((rx.trx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_006, sum((((rx.trx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_007, sum((((rx.trx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_008, sum((((rx.trx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_009, sum((((rx.trx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_010, sum((((rx.trx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_011, sum((((rx.trx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_012, sum((((rx.trx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_013, sum((((rx.trx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_014, sum((((rx.trx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_015, sum((((rx.trx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_016, sum((((rx.trx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_017, sum((((rx.trx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_018, sum((((rx.trx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_019, sum((((rx.trx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_020, sum((((rx.trx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_021, sum((((rx.trx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_022, sum((((rx.trx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_023, sum((((rx.trx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3)) AS trx_024 FROM (((ims.stg_ims_mhj_qty_m rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_QTY) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) JOIN WSMP_ADMIN.MARKET_PRESC_ZIP_DIVISOR mpzd ON (((p.MARKET_NAME = mpzd.MARKET_NAME) AND (rx.ims_id = mpzd.IMS_ID)))) WHERE (p.MARKET_NAME = 'WAKE'::varchar(4)) GROUP BY mpzd.ZIP, mpzd.STATE, rx.plan_id, to_char(rx.ims_report_num, '00'::varchar(2)), to_char(rx.ims_product_group_num, '000000000'::varchar(9)), ((substr(rx.data_date, 1, 2) || '/20'::varchar(3)) || substr(rx.data_date, 5, 2)) UNION ALL SELECT mpzd.ZIP AS zip, mpzd.STATE AS state, rx.plan_id AS payer_plan_num, to_char(rx.ims_report_num, '00'::varchar(2)) AS report_num, to_char(rx.ims_product_group_num, '000000000'::varchar(9)) AS ims_product_group_num, ((substr(rx.data_date, 1, 2) || '/20'::varchar(3)) || substr(rx.data_date, 5, 2)) AS data_month, sum(rx.nrx_001) AS nrx_001, sum(rx.nrx_002) AS nrx_002, sum(rx.nrx_003) AS nrx_003, sum(rx.nrx_004) AS nrx_004, sum(rx.nrx_005) AS nrx_005, sum(rx.nrx_006) AS nrx_006, sum(rx.nrx_007) AS nrx_007, sum(rx.nrx_008) AS nrx_008, sum(rx.nrx_009) AS nrx_009, sum(rx.nrx_010) AS nrx_010, sum(rx.nrx_011) AS nrx_011, sum(rx.nrx_012) AS nrx_012, sum(rx.nrx_013) AS nrx_013, sum(rx.nrx_014) AS nrx_014, sum(rx.nrx_015) AS nrx_015, sum(rx.nrx_016) AS nrx_016, sum(rx.nrx_017) AS nrx_017, sum(rx.nrx_018) AS nrx_018, sum(rx.nrx_019) AS nrx_019, sum(rx.nrx_020) AS nrx_020, sum(rx.nrx_021) AS nrx_021, sum(rx.nrx_022) AS nrx_022, sum(rx.nrx_023) AS nrx_023, sum(rx.nrx_024) AS nrx_024, sum(rx.trx_001) AS trx_001, sum(rx.trx_002) AS trx_002, sum(rx.trx_003) AS trx_003, sum(rx.trx_004) AS trx_004, sum(rx.trx_005) AS trx_005, sum(rx.trx_006) AS trx_006, sum(rx.trx_007) AS trx_007, sum(rx.trx_008) AS trx_008, sum(rx.trx_009) AS trx_009, sum(rx.trx_010) AS trx_010, sum(rx.trx_011) AS trx_011, sum(rx.trx_012) AS trx_012, sum(rx.trx_013) AS trx_013, sum(rx.trx_014) AS trx_014, sum(rx.trx_015) AS trx_015, sum(rx.trx_016) AS trx_016, sum(rx.trx_017) AS trx_017, sum(rx.trx_018) AS trx_018, sum(rx.trx_019) AS trx_019, sum(rx.trx_020) AS trx_020, sum(rx.trx_021) AS trx_021, sum(rx.trx_022) AS trx_022, sum(rx.trx_023) AS trx_023, sum(rx.trx_024) AS trx_024 FROM (((ims.stg_ims_mhj_cnt_m rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_CNT) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) LEFT JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) JOIN WSMP_ADMIN.MARKET_PRESC_ZIP_DIVISOR mpzd ON (((p.MARKET_NAME = mpzd.MARKET_NAME) AND (rx.ims_id = mpzd.IMS_ID)))) WHERE ((p.MARKET_NAME = 'WAKE'::varchar(4)) AND (nf.PRODUCT_CODE IS NULL)) GROUP BY mpzd.ZIP, mpzd.STATE, rx.plan_id, to_char(rx.ims_report_num, '00'::varchar(2)), to_char(rx.ims_product_group_num, '000000000'::varchar(9)), ((substr(rx.data_date, 1, 2) || '/20'::varchar(3)) || substr(rx.data_date, 5, 2));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Paytype AS
SELECT rx.model, rx.payment_method FROM WSMP_ADMIN.dw_presc_plan_rx_w rx WHERE ((rx.product_code = ANY (ARRAY['330-14-001'::varchar(10), '330-14-007'::varchar(10), '330-14-009'::varchar(10), '330-14-0025'::varchar(11), '330-16-050'::varchar(10), '330-14-003'::varchar(10), '330-14-008'::varchar(10), '330-16-055'::varchar(10), '330-14-004'::varchar(10), '330-16-056'::varchar(10), '330-14-006'::varchar(10), '330-15-050'::varchar(10), '330-14-005'::varchar(10), '330-15-005'::varchar(10), '330-12-002'::varchar(10), '330-15-010'::varchar(10), '330-15-019'::varchar(10), '330-12-015'::varchar(10), '330-15-015'::varchar(10), '330-12-003'::varchar(10), '330-15-025'::varchar(10), '330-12-023'::varchar(10), '330-15-030'::varchar(10), '330-12-019'::varchar(10), '330-15-047'::varchar(10), '330-15-050'::varchar(10), '330-13-020'::varchar(10), '330-16-020'::varchar(10), '330-13-021'::varchar(10), '330-13-016'::varchar(10), '330-13-022'::varchar(10), '330-13-023'::varchar(10), '330-13-024'::varchar(10), '330-13-025'::varchar(10), '330-13-026'::varchar(10), '330-13-027'::varchar(10), '330-13-028'::varchar(10), '330-13-029'::varchar(10), '330-13-030'::varchar(10), '330-16-027'::varchar(10), '330-16-028'::varchar(10), '330-16-029'::varchar(10), '330-13-009'::varchar(10), '330-13-005'::varchar(10), '330-13-006'::varchar(10), '330-13-011'::varchar(10), '330-15-019'::varchar(10), '330-12-015'::varchar(10), '330-15-015'::varchar(10), '330-12-003'::varchar(10), '330-15-025'::varchar(10), '330-12-023'::varchar(10), '330-15-001'::varchar(10), '330-15-030'::varchar(10), '330-12-019'::varchar(10), '330-15-047'::varchar(10), '330-15-040'::varchar(10)])) AND (length(rx.ims_id) = 7)) GROUP BY rx.model, rx.payment_method;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_planname AS
SELECT rx.payer_plan_num, rx.plan_name, rx.model, rx.payer_name FROM WSMP_ADMIN.dw_presc_plan_rx_w rx WHERE ((rx.product_code = ANY (ARRAY['330-14-001'::varchar(10), '330-14-007'::varchar(10), '330-14-009'::varchar(10), '330-14-0025'::varchar(11), '330-16-050'::varchar(10), '330-14-003'::varchar(10), '330-14-008'::varchar(10), '330-16-055'::varchar(10), '330-14-004'::varchar(10), '330-16-056'::varchar(10), '330-14-006'::varchar(10), '330-15-050'::varchar(10), '330-14-005'::varchar(10), '330-15-005'::varchar(10), '330-12-002'::varchar(10), '330-15-010'::varchar(10), '330-15-019'::varchar(10), '330-12-015'::varchar(10), '330-15-015'::varchar(10), '330-12-003'::varchar(10), '330-15-025'::varchar(10), '330-12-023'::varchar(10), '330-15-030'::varchar(10), '330-12-019'::varchar(10), '330-15-047'::varchar(10), '330-15-050'::varchar(10), '330-13-020'::varchar(10), '330-16-020'::varchar(10), '330-13-021'::varchar(10), '330-13-016'::varchar(10), '330-13-022'::varchar(10), '330-13-023'::varchar(10), '330-13-024'::varchar(10), '330-13-025'::varchar(10), '330-13-026'::varchar(10), '330-13-027'::varchar(10), '330-13-028'::varchar(10), '330-13-029'::varchar(10), '330-13-030'::varchar(10), '330-16-027'::varchar(10), '330-16-028'::varchar(10), '330-16-029'::varchar(10), '330-13-009'::varchar(10), '330-13-005'::varchar(10), '330-13-006'::varchar(10), '330-13-011'::varchar(10), '330-15-019'::varchar(10), '330-12-015'::varchar(10), '330-15-015'::varchar(10), '330-12-003'::varchar(10), '330-15-025'::varchar(10), '330-12-023'::varchar(10), '330-15-001'::varchar(10), '330-15-030'::varchar(10), '330-12-019'::varchar(10), '330-15-047'::varchar(10), '330-15-040'::varchar(10)])) AND (length(rx.ims_id) = 7)) GROUP BY rx.payer_plan_num, rx.plan_name, rx.model, rx.payer_name;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_factory_sales_852 AS
SELECT STG_FACTORY_SALES_852.TRADING_PARTNER, STG_FACTORY_SALES_852.DISTRIB_CENTER, STG_FACTORY_SALES_852.DISTRIB_CENTER_DEA_NUM, to_char(STG_FACTORY_SALES_852.REPORTING_DATE, 'DD-MON-YY'::varchar(9)) AS REPORTING_DATE, STG_FACTORY_SALES_852.NDC, STG_FACTORY_SALES_852.PRODUCT_CODE, STG_FACTORY_SALES_852.PRODUCT_NAME, STG_FACTORY_SALES_852.DESCRIPTION, CASE mod(STG_FACTORY_SALES_852.QTY_RECEIVED, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.QTY_RECEIVED)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.QTY_RECEIVED)::varchar, '0'::varchar(1)) END AS QTY_RECEIVED, CASE mod(STG_FACTORY_SALES_852.QTY_RECEIVED_DOLLARS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.QTY_RECEIVED_DOLLARS)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.QTY_RECEIVED_DOLLARS)::varchar, '0'::varchar(1)) END AS QTY_RECEIVED_DOLLARS, CASE mod(STG_FACTORY_SALES_852.QTY_SOLD, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.QTY_SOLD)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.QTY_SOLD)::varchar, '0'::varchar(1)) END AS QTY_SOLD, CASE mod(STG_FACTORY_SALES_852.QTY_SOLD_DOLLARS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.QTY_SOLD_DOLLARS)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.QTY_SOLD_DOLLARS)::varchar, '0'::varchar(1)) END AS QTY_SOLD_DOLLARS, CASE mod(STG_FACTORY_SALES_852.QTY_OMIT, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.QTY_OMIT)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.QTY_OMIT)::varchar, '0'::varchar(1)) END AS QTY_OMIT, CASE mod(STG_FACTORY_SALES_852.QTY_OMIT_DOLLARS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.QTY_OMIT_DOLLARS)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.QTY_OMIT_DOLLARS)::varchar, '0'::varchar(1)) END AS QTY_OMIT_DOLLARS, CASE mod(STG_FACTORY_SALES_852.MTH_END_QTY_ON_HAND, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.MTH_END_QTY_ON_HAND)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.MTH_END_QTY_ON_HAND)::varchar, '0'::varchar(1)) END AS MTH_END_QTY_ON_HAND, CASE mod(STG_FACTORY_SALES_852.MTH_END_QTY_ON_HAND_DOLLARS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.MTH_END_QTY_ON_HAND_DOLLARS)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.MTH_END_QTY_ON_HAND_DOLLARS)::varchar, '0'::varchar(1)) END AS MTH_END_QTY_ON_HAND_DOLLARS, CASE mod(STG_FACTORY_SALES_852.MTH_END_COMMITTED, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.MTH_END_COMMITTED)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.MTH_END_COMMITTED)::varchar, '0'::varchar(1)) END AS MTH_END_COMMITTED, CASE mod(STG_FACTORY_SALES_852.MTH_END_COMMITTED_DOLLARS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.MTH_END_COMMITTED_DOLLARS)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.MTH_END_COMMITTED_DOLLARS)::varchar, '0'::varchar(1)) END AS MTH_END_COMMITTED_DOLLARS, CASE mod(STG_FACTORY_SALES_852.MTH_END_RESERVED, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.MTH_END_RESERVED)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.MTH_END_RESERVED)::varchar, '0'::varchar(1)) END AS MTH_END_RESERVED, CASE mod(STG_FACTORY_SALES_852.MTH_END_RESERVED_DOLLARS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.MTH_END_RESERVED_DOLLARS)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.MTH_END_RESERVED_DOLLARS)::varchar, '0'::varchar(1)) END AS MTH_END_RESERVED_DOLLARS, CASE mod(STG_FACTORY_SALES_852.QTY_RETURN, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.QTY_RETURN)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.QTY_RETURN)::varchar, '0'::varchar(1)) END AS QTY_RETURN, CASE mod(STG_FACTORY_SALES_852.QTY_RETURN_DOLLARS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.QTY_RETURN_DOLLARS)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.QTY_RETURN_DOLLARS)::varchar, '0'::varchar(1)) END AS QTY_RETURN_DOLLARS, CASE mod(STG_FACTORY_SALES_852.QTY_CUSTOMER_RETURN, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.QTY_CUSTOMER_RETURN)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.QTY_CUSTOMER_RETURN)::varchar, '0'::varchar(1)) END AS QTY_CUSTOMER_RETURN, CASE mod(STG_FACTORY_SALES_852.QTY_CUSTOMER_RETURN_DOLLARS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_FACTORY_SALES_852.QTY_CUSTOMER_RETURN_DOLLARS)::int)::varchar ELSE rtrim((STG_FACTORY_SALES_852.QTY_CUSTOMER_RETURN_DOLLARS)::varchar, '0'::varchar(1)) END AS QTY_CUSTOMER_RETURN_DOLLARS, to_char(STG_FACTORY_SALES_852.LAST_BUILD_DATE, 'DD-MON-YY'::varchar(9)) AS LAST_BUILD_DATE FROM WSMP_ADMIN.STG_FACTORY_SALES_852;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Agile_Mktg_Mix_CSP_Attendees AS
SELECT (a.COGENIX_PROGRAM_ID)::int AS cogenix_program_id, a.PROGRAM_NAME, a.PROGRAM_DATE, a.SFA_PROF_ID, a.ME_NUM, a.DEA_NUM, (a.COGENIX_ID)::int AS cogenix_id, coalesce(a.CM_ID, (cm.CUSTOMER_MASTER_ID)::varchar) AS cm_id, a.STATE_LICENSE_STATE, a.STATE_LICENSE_NUMBER, a.FIRST_NAME, a.LAST_NAME, a.ADDRESS1, a.ADDRESS2, a.ADDRESS3, a.CITY, a.STATE, a.ZIP, a.PRIMARY_SPECIALTY, a.HCP_TYPE AS hcp_type, a.PRESCRIBER_FLAG FROM ((WSMP_ADMIN.STG_COGENIX_CSP_ATTENDEE a JOIN WSMP_ADMIN.STG_COGENIX_CSP_PROGRAM p ON ((p.COGENIX_PROGRAM_ID = a.COGENIX_PROGRAM_ID))) LEFT JOIN WSMP_ADMIN.STG_CUSTOMER_MASTER cm ON (((cm.SOURCE_ID = CASE WHEN (a.PRESCRIBER_FLAG = 'N'::varchar(1)) THEN ('NONHCP_'::varchar(7) || (a.COGENIX_ID)::varchar) ELSE (a.COGENIX_ID)::varchar END) AND (cm.RECORD_SOURCE_SYSTEM = 'CGX'::varchar(3))))) WHERE ((p.PROGRAM_DATE >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (p.PROGRAM_DATE <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (p.PRODUCT = 'Nuvigil'::varchar(7)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Agile_Mktg_Mix_CSP_Programs AS
SELECT CASE mod(STG_COGENIX_CSP_PROGRAM.COGENIX_PROGRAM_ID, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.COGENIX_PROGRAM_ID)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.COGENIX_PROGRAM_ID)::varchar, '0'::varchar(1)) END AS COGENIX_PROGRAM_ID, STG_COGENIX_CSP_PROGRAM.PROGRAM_NAME, to_char(STG_COGENIX_CSP_PROGRAM.PROGRAM_REQUEST_DATE, 'YYYY-MM-DD'::varchar(10)) AS PROGRAM_REQUEST_DATE, to_char(STG_COGENIX_CSP_PROGRAM.PROGRAM_DATE, 'YYYY-MM-DD'::varchar(10)) AS PROGRAM_DATE, STG_COGENIX_CSP_PROGRAM.PRODUCT, STG_COGENIX_CSP_PROGRAM.TOPIC, STG_COGENIX_CSP_PROGRAM.PROGRAM_TYPE, STG_COGENIX_CSP_PROGRAM.PROGRAM_STATUS, STG_COGENIX_CSP_PROGRAM.VENUE_NAME, STG_COGENIX_CSP_PROGRAM.VENUE_CITY, STG_COGENIX_CSP_PROGRAM.VENUE_STATE, CASE mod(STG_COGENIX_CSP_PROGRAM.ESTIMATED_ATTENDANCE, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.ESTIMATED_ATTENDANCE)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.ESTIMATED_ATTENDANCE)::varchar, '0'::varchar(1)) END AS ESTIMATED_ATTENDANCE, CASE mod(STG_COGENIX_CSP_PROGRAM.NONPRESCRIBER_CEPHALON_COUNTS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.NONPRESCRIBER_CEPHALON_COUNTS)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.NONPRESCRIBER_CEPHALON_COUNTS)::varchar, '0'::varchar(1)) END AS NONPRESCRIBER_CEPHALON_COUNTS, CASE mod(STG_COGENIX_CSP_PROGRAM.PRESCRIBERS_W_O_DEA, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.PRESCRIBERS_W_O_DEA)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.PRESCRIBERS_W_O_DEA)::varchar, '0'::varchar(1)) END AS PRESCRIBERS_W_O_DEA, CASE mod(STG_COGENIX_CSP_PROGRAM.NONHCP_OFFICE_STAFF_COUNTS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.NONHCP_OFFICE_STAFF_COUNTS)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.NONHCP_OFFICE_STAFF_COUNTS)::varchar, '0'::varchar(1)) END AS NONHCP_OFFICE_STAFF_COUNTS, CASE mod(STG_COGENIX_CSP_PROGRAM.PRESCRIBERS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.PRESCRIBERS)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.PRESCRIBERS)::varchar, '0'::varchar(1)) END AS PRESCRIBERS, CASE mod(STG_COGENIX_CSP_PROGRAM.HCPS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.HCPS)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.HCPS)::varchar, '0'::varchar(1)) END AS HCPS, CASE mod(STG_COGENIX_CSP_PROGRAM.TOTAL_PRESCRIBERS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.TOTAL_PRESCRIBERS)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.TOTAL_PRESCRIBERS)::varchar, '0'::varchar(1)) END AS TOTAL_PRESCRIBERS, CASE mod(STG_COGENIX_CSP_PROGRAM.PRESCRIBERS_ACCEPTED_NO_SHOW, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.PRESCRIBERS_ACCEPTED_NO_SHOW)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.PRESCRIBERS_ACCEPTED_NO_SHOW)::varchar, '0'::varchar(1)) END AS PRESCRIBERS_ACCEPTED_NO_SHOW, STG_COGENIX_CSP_PROGRAM.ATTENDEE_FORM_RECEIVED, STG_COGENIX_CSP_PROGRAM.ATTENDEE_SIGN_IN_SHEET_RECVD, CASE mod(STG_COGENIX_CSP_PROGRAM.ACTUAL_ATTENDANCE, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.ACTUAL_ATTENDANCE)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.ACTUAL_ATTENDANCE)::varchar, '0'::varchar(1)) END AS ACTUAL_ATTENDANCE, CASE mod(STG_COGENIX_CSP_PROGRAM.ESTIMATED_COSTS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.ESTIMATED_COSTS)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.ESTIMATED_COSTS)::varchar, '0'::varchar(1)) END AS ESTIMATED_COSTS, STG_COGENIX_CSP_PROGRAM.OFFICES_REPRESENTED, CASE mod(STG_COGENIX_CSP_PROGRAM.AV_EXPENSES, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.AV_EXPENSES)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.AV_EXPENSES)::varchar, '0'::varchar(1)) END AS AV_EXPENSES, CASE mod(STG_COGENIX_CSP_PROGRAM.FOOD_AND_BEVERAGE, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.FOOD_AND_BEVERAGE)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.FOOD_AND_BEVERAGE)::varchar, '0'::varchar(1)) END AS FOOD_AND_BEVERAGE, CASE mod(STG_COGENIX_CSP_PROGRAM.MEETING_EXPENSES, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.MEETING_EXPENSES)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.MEETING_EXPENSES)::varchar, '0'::varchar(1)) END AS MEETING_EXPENSES, CASE mod(STG_COGENIX_CSP_PROGRAM.MISCELLANEOUS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.MISCELLANEOUS)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.MISCELLANEOUS)::varchar, '0'::varchar(1)) END AS MISCELLANEOUS, CASE mod(STG_COGENIX_CSP_PROGRAM.SPEAKER_EXPENSES, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.SPEAKER_EXPENSES)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.SPEAKER_EXPENSES)::varchar, '0'::varchar(1)) END AS SPEAKER_EXPENSES, CASE mod(STG_COGENIX_CSP_PROGRAM.SPEAKER_HONORARIA, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.SPEAKER_HONORARIA)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.SPEAKER_HONORARIA)::varchar, '0'::varchar(1)) END AS SPEAKER_HONORARIA, CASE mod(STG_COGENIX_CSP_PROGRAM.SPEAKER_TRAVEL, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.SPEAKER_TRAVEL)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.SPEAKER_TRAVEL)::varchar, '0'::varchar(1)) END AS SPEAKER_TRAVEL, CASE mod(STG_COGENIX_CSP_PROGRAM.VENUE_ROOM_RENTAL, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.VENUE_ROOM_RENTAL)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.VENUE_ROOM_RENTAL)::varchar, '0'::varchar(1)) END AS VENUE_ROOM_RENTAL, CASE mod(STG_COGENIX_CSP_PROGRAM.ACTUAL_COSTS, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.ACTUAL_COSTS)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.ACTUAL_COSTS)::varchar, '0'::varchar(1)) END AS ACTUAL_COSTS, CASE mod(STG_COGENIX_CSP_PROGRAM.UNMET_MINIMUM, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.UNMET_MINIMUM)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.UNMET_MINIMUM)::varchar, '0'::varchar(1)) END AS UNMET_MINIMUM, to_char(STG_COGENIX_CSP_PROGRAM.CREATE_DATE, 'YYYY-MM-DD'::varchar(10)) AS CREATE_DATE, CASE mod(STG_COGENIX_CSP_PROGRAM.TAKEDA_ATTENDEES, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((STG_COGENIX_CSP_PROGRAM.TAKEDA_ATTENDEES)::int)::varchar ELSE rtrim((STG_COGENIX_CSP_PROGRAM.TAKEDA_ATTENDEES)::varchar, '0'::varchar(1)) END AS TAKEDA_ATTENDEES FROM WSMP_ADMIN.STG_COGENIX_CSP_PROGRAM WHERE ((STG_COGENIX_CSP_PROGRAM.PROGRAM_DATE >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (STG_COGENIX_CSP_PROGRAM.PROGRAM_DATE <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (STG_COGENIX_CSP_PROGRAM.PRODUCT = 'Nuvigil'::varchar(7)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Agile_Mktg_Mix_Copay_Voucher_Drops AS
SELECT CASE mod(x.tvcmid, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((x.tvcmid)::int)::varchar ELSE rtrim((x.tvcmid)::varchar, '0'::varchar(1)) END AS tvcmid, x.ims_id, x.veeva_account_id, d.RESOURCE_TYPE AS Resource_type, d.TERRITORY_NUM AS Territory_num, d.DISTRIBUTION_DATE AS distribution_date, (d.QTY)::int AS qty FROM WSMP_ADMIN.TFC_SFA_RESOURCE_DIST_DETAIL d, (SELECT demo_combined.ims_id, demo_combined.tvcmid, demo_combined.veeva_account_id FROM WSMP_ADMIN.demo_combined WHERE ((demo_combined.sales_force_id = 'TC'::varchar(2)) AND (demo_combined.veeva_account_id IS NOT NULL)) GROUP BY demo_combined.ims_id, demo_combined.tvcmid, demo_combined.veeva_account_id) x WHERE ((d.PRODUCT_NAME = 'NUVIGIL'::varchar(7)) AND (d.DISTRIBUTION_DATE >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (d.DISTRIBUTION_DATE <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (d.IMS_ID = x.ims_id));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Agile_Mktg_Mix_Demo AS
SELECT CASE mod(d.tvcmid, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((d.tvcmid)::int)::varchar ELSE rtrim((d.tvcmid)::varchar, '0'::varchar(1)) END AS tvcmid, d.ims_id, d.veeva_account_id, d.first_name, d.mid_name, d.last_name, d.degree AS DEGREE, d.address, d.city, d.state, d.zip, d.specialty AS prim_specialty, s1.NUVIGIL_REPORT_GROUP AS nuvigil_report_group, dec1.trx_cnt_01_06 AS nuvigil_decile, dec2.trx_cnt_01_06 AS wake_decile, cp.TARGET_VALUE AS target_flag FROM (((((WSMP_ADMIN.demo_combined d LEFT JOIN WSMP_ADMIN.TFC_SPECIALTY_XREF s1 ON ((s1.SPECIALTY_CODE = d.specialty))) LEFT JOIN WSMP_ADMIN.TFC_IMS_DECILE dec1 ON (((dec1.ims_id = d.ims_id) AND (dec1.category = 'Provigil'::varchar(8)) AND (dec1.decile_name = 'Nuvigil'::varchar(7))))) LEFT JOIN WSMP_ADMIN.TFC_IMS_DECILE dec2 ON (((dec2.ims_id = d.ims_id) AND (dec2.category = 'Provigil'::varchar(8)) AND (dec2.decile_name = 'Modafinil'::varchar(9))))) JOIN (SELECT prodx.ims_id FROM (SELECT dw_presc_plan_rx_m.ims_id FROM WSMP_ADMIN.dw_presc_plan_rx_m WHERE ((dw_presc_plan_rx_m.product_code = '100N00'::varchar(6)) AND (dw_presc_plan_rx_m.month_bucket >= 1::numeric(18,0)) AND (dw_presc_plan_rx_m.month_bucket <= 24::numeric(18,0))) UNION ALL SELECT DIM_SFA_CSF_DEMO.IMS_ID AS ims_id FROM WSMP_ADMIN.DIM_SFA_CSF_DEMO WHERE (DIM_SFA_CSF_DEMO.SALES_FORCE_ID = 'TC'::varchar(2))) prodx GROUP BY prodx.ims_id) r ON ((d.ims_id = r.ims_id))) LEFT JOIN WSMP_ADMIN.DIM_SFA_TARGETS cp ON (((d.ims_id = cp.IMS_ID) AND (cp.NAME = 'Nuvigil'::varchar(7)) AND (cp.PERIOD ~~ '2015%'::varchar(5))))) WHERE ((d.sales_force_id = 'TC'::varchar(2)) AND (d.last_name <> 'NATIONAL ASSIGNMENT'::varchar(19)) AND (d.first_name IS NOT NULL));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_agile_mktg_mix_rx AS
SELECT rx.ims_id AS IMS_ID, rx.product_code, p.NAME AS product_name, rx.month_ending AS MONTH_ENDING, sum(CASE mod(rx.nrx_qty, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((rx.nrx_qty)::int)::varchar ELSE rtrim((rx.nrx_qty)::varchar, '0'::varchar(1)) END) AS nrx_qty, sum(CASE mod(rx.trx_qty, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((rx.trx_qty)::int)::varchar ELSE rtrim((rx.trx_qty)::varchar, '0'::varchar(1)) END) AS trx_qty, sum(CASE mod(rx.nrx_cnt, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((rx.nrx_cnt)::int)::varchar ELSE rtrim((rx.nrx_cnt)::varchar, '0'::varchar(1)) END) AS nrx_cnt, sum(CASE mod(rx.trx_cnt, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((rx.trx_cnt)::int)::varchar ELSE rtrim((rx.trx_cnt)::varchar, '0'::varchar(1)) END) AS trx_cnt FROM WSMP_ADMIN.dw_presc_plan_rx_m rx, CUSTOMER.PRODUCT p WHERE ((rx.product_code = p.PRODUCT_CODE) AND (rx.month_ending >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (rx.month_ending <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (rx.product_code = ANY (ARRAY['100100'::varchar(6), '100101'::varchar(6), '100102'::varchar(6), '100N00'::varchar(6), '100N05'::varchar(6), '100N15'::varchar(6), '100N20'::varchar(6), '100N25'::varchar(6), '100700'::varchar(6)])) AND (length(rx.ims_id) = 7)) GROUP BY rx.ims_id, rx.product_code, p.NAME, rx.month_ending;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Agile_Mktg_Mix_Samples AS
SELECT S.sales_force_id, S.territory_num, CASE mod(IX.tvcmid, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((IX.tvcmid)::int)::varchar ELSE rtrim((IX.tvcmid)::varchar, '0'::varchar(1)) END AS tvcmid, IX.ims_id, IX.veeva_account_id, to_char(S.ship_date, 'YYYY-MM-DD'::varchar(10)) AS ship_date, S.product_code, S.product, CASE mod(S.ship_qty, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((S.ship_qty)::int)::varchar ELSE rtrim((S.ship_qty)::varchar, '0'::varchar(1)) END AS ship_qty FROM ((SELECT ss.SALES_FORCE_ID AS sales_force_id, ss.TERRITORY_NUM AS territory_num, NULL AS tvcmid, ss.IMS_ID AS ims_id, ss.DEMO_ID AS demo_id, ss.SHIP_DATE AS ship_date, ss.PRODUCT_CODE AS product_code, ss.PRODUCT AS product, ss.SHIP_QTY AS ship_qty FROM WSMP_ADMIN.STG_KNIPPER_SAMPLES_SHIPPED ss WHERE ((ss.SALES_FORCE_ID = 'TC'::varchar(2)) AND (ss.SHIP_DATE >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (ss.SHIP_DATE <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (ss.PRODUCT_CODE ~~ '100N%'::varchar(5)))) S LEFT JOIN (SELECT demo_combined.tvcmid, demo_combined.ims_id, demo_combined.veeva_account_id FROM WSMP_ADMIN.demo_combined WHERE ((demo_combined.sales_force_id = 'TC'::varchar(2)) AND (demo_combined.veeva_account_id IS NOT NULL)) GROUP BY demo_combined.tvcmid, demo_combined.ims_id, demo_combined.veeva_account_id) IX ON ((S.demo_id = IX.veeva_account_id)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Agile_Mktg_Mix_Details AS
SELECT CASE mod(d.TVCMID, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((d.TVCMID)::int)::varchar ELSE rtrim((d.TVCMID)::varchar, '0'::varchar(1)) END AS tvcmid, cd.IMS_ID AS ims_id, cd.VEEVA_ACCOUNT_ID AS veeva_account_id, initcap(d.LAST_NAME) AS last_name, initcap(d.FIRST_NAME) AS first_name, initcap(d.MIDDLE_NAME) AS middle_name, d.CREDENTIALS AS DEGREE, d.ZIP AS zip, cd.REP_ID AS rep_id, cd.TERRITORY_NUM AS territory_num, to_char(cd.CALL_DATE, 'YYYY-MM-DD'::varchar(10)) AS call_date, 'NUVIGIL'::varchar(7) AS product, CASE WHEN (cd.FIRST_DETAILED_PRODUCT = 'NUVIGIL'::varchar(7)) THEN 1 WHEN (cd.SECOND_DETAILED_PRODUCT = 'NUVIGIL'::varchar(7)) THEN 2 ELSE NULL::int END AS detail_position FROM WSMP_ADMIN.TFC_SFA_CSF_CALL_DETAIL cd, WSMP_ADMIN.DIM_SFA_CSF_DEMO d, WSMP_ADMIN.TFC_CURRENT_ZIP_ALIGNMENT z WHERE ((cd.SALES_FORCE_ID = 'TC'::varchar(2)) AND (cd.SALES_FORCE_ID = d.SALES_FORCE_ID) AND (cd.TERRITORY_NUM = d.TERRITORY_NUM) AND (cd.CALL_DATE >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (cd.CALL_DATE <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (cd.VEEVA_ACCOUNT_ID = d.VEEVA_ACCOUNT_ID) AND (d.ZIP = z.ZIP) AND ((cd.FIRST_DETAILED_PRODUCT = 'NUVIGIL'::varchar(7)) OR (cd.SECOND_DETAILED_PRODUCT = 'NUVIGIL'::varchar(7))) AND (cd.LEGACY_CALL_TYPE = 'PROF'::varchar(4)) AND ((cd.FIRST_DETAILED_PRODUCT = 'NUVIGIL'::varchar(7)) OR (cd.SECOND_DETAILED_PRODUCT = 'NUVIGIL'::varchar(7))) AND (cd.LEGACY_CALL_TYPE = 'PROF'::varchar(4))) GROUP BY d.TVCMID, cd.IMS_ID, cd.VEEVA_ACCOUNT_ID, initcap(d.LAST_NAME), initcap(d.FIRST_NAME), initcap(d.MIDDLE_NAME), d.CREDENTIALS, d.ZIP, cd.REP_ID, cd.TERRITORY_NUM, cd.CALL_DATE, 'NUVIGIL'::varchar(7), CASE WHEN (cd.FIRST_DETAILED_PRODUCT = 'NUVIGIL'::varchar(7)) THEN 1 WHEN (cd.SECOND_DETAILED_PRODUCT = 'NUVIGIL'::varchar(7)) THEN 2 ELSE NULL::int END;

CREATE  VIEW WSMP_ADMIN_ORA.dim_ims_month_buckets AS
SELECT dw_presc_rx_m.month_bucket, dw_presc_rx_m.month_ending FROM WSMP_ADMIN.dw_presc_rx_m GROUP BY dw_presc_rx_m.month_bucket, dw_presc_rx_m.month_ending;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_ValueCentricRxDataExtract AS
((SELECT '4416451422'::varchar(10) AS customerid, CASE WHEN (x.product_code = '100N05'::varchar(6)) THEN 'Nuvigil 50mg'::varchar(12) WHEN (x.product_code = '100N15'::varchar(6)) THEN 'Nuvigil 150mg'::varchar(13) WHEN (x.product_code = '100N25'::varchar(6)) THEN 'Nuvigil 250mg'::varchar(13) WHEN (x.product_code = '100N20'::varchar(6)) THEN 'Nuvigil 200mg'::varchar(13) ELSE NULL END AS brand_name, CASE WHEN (x.product_code = '100N05'::varchar(6)) THEN '63459020530'::varchar(11) WHEN (x.product_code = '100N15'::varchar(6)) THEN '63459021530'::varchar(11) WHEN (x.product_code = '100N25'::varchar(6)) THEN '63459022530'::varchar(11) WHEN (x.product_code = '100N20'::varchar(6)) THEN '63459022030'::varchar(11) ELSE NULL END AS ndcupc, d.zip, x.month_ending AS period_end_date, sum(x.trx_cnt) AS trx_cnt, sum(x.trx_qty) AS trx_qty FROM WSMP_ADMIN.dw_presc_plan_rx_m x, (SELECT DEMO_COMBINED.sales_force_id, DEMO_COMBINED.ims_id, min(DEMO_COMBINED.zip) AS zip FROM WSMP_ADMIN.DEMO_COMBINED WHERE (DEMO_COMBINED.sales_force_id = 'TC'::varchar(2)) GROUP BY DEMO_COMBINED.sales_force_id, DEMO_COMBINED.ims_id) d WHERE ((d.ims_id = x.ims_id) AND (x.product_code = ANY (ARRAY['100N05'::varchar(6), '100N15'::varchar(6), '100N25'::varchar(6), '100N20'::varchar(6)])) AND (x.sales_category = '1'::varchar(2)) AND (x.month_bucket >= 1::numeric(18,0)) AND (x.month_bucket <= 12::numeric(18,0))) GROUP BY '4416451422'::varchar(10), CASE WHEN (x.product_code = '100N05'::varchar(6)) THEN 'Nuvigil 50mg'::varchar(12) WHEN (x.product_code = '100N15'::varchar(6)) THEN 'Nuvigil 150mg'::varchar(13) WHEN (x.product_code = '100N25'::varchar(6)) THEN 'Nuvigil 250mg'::varchar(13) WHEN (x.product_code = '100N20'::varchar(6)) THEN 'Nuvigil 200mg'::varchar(13) ELSE NULL END, CASE WHEN (x.product_code = '100N05'::varchar(6)) THEN '63459020530'::varchar(11) WHEN (x.product_code = '100N15'::varchar(6)) THEN '63459021530'::varchar(11) WHEN (x.product_code = '100N25'::varchar(6)) THEN '63459022530'::varchar(11) WHEN (x.product_code = '100N20'::varchar(6)) THEN '63459022030'::varchar(11) ELSE NULL END, d.zip, x.month_ending UNION SELECT '4416451422'::varchar(10) AS customerid, CASE WHEN (x.product_code = '330-14-002'::varchar(10)) THEN 'PROAIR HFA'::varchar(10) WHEN (x.product_code = '330-14-009'::varchar(10)) THEN 'PROAIR HFA COUNTER'::varchar(18) WHEN (x.product_code = '330-15-001'::varchar(10)) THEN 'QNASL'::varchar(5) WHEN (x.product_code = '330-13-005'::varchar(10)) THEN 'QVAR 40MCG'::varchar(10) WHEN (x.product_code = '330-13-006'::varchar(10)) THEN 'QVAR 80MCG'::varchar(10) ELSE NULL END AS brand_name, CASE WHEN (x.product_code = '330-14-002'::varchar(10)) THEN '59310057920'::varchar(11) WHEN (x.product_code = '330-14-009'::varchar(10)) THEN '59310057922'::varchar(11) WHEN (x.product_code = '330-15-001'::varchar(10)) THEN '59310021012'::varchar(11) WHEN (x.product_code = '330-13-005'::varchar(10)) THEN '59310020240'::varchar(11) WHEN (x.product_code = '330-13-006'::varchar(10)) THEN '59310020480'::varchar(11) ELSE NULL END AS ndcupc, d.zip, x.month_ending AS period_end_date, sum(x.trx_cnt) AS trx_cnt, sum(0) AS trx_qty FROM WSMP_ADMIN.dw_presc_plan_rx_w x, (SELECT DEMO_COMBINED.sales_force_id, DEMO_COMBINED.ims_id, min(DEMO_COMBINED.zip) AS zip FROM WSMP_ADMIN.DEMO_COMBINED WHERE (DEMO_COMBINED.sales_force_id = 'TR'::varchar(2)) GROUP BY DEMO_COMBINED.sales_force_id, DEMO_COMBINED.ims_id) d WHERE ((d.ims_id = x.ims_id) AND (x.product_code = ANY (ARRAY['330-14-002'::varchar(10), '330-14-009'::varchar(10), '330-15-001'::varchar(10), '330-13-005'::varchar(10), '330-13-006'::varchar(10)])) AND (x.sales_category = '1'::varchar(2)) AND (x.month_bucket >= 1::numeric(18,0)) AND (x.month_bucket <= 12::numeric(18,0))) GROUP BY '4416451422'::varchar(10), CASE WHEN (x.product_code = '330-14-002'::varchar(10)) THEN 'PROAIR HFA'::varchar(10) WHEN (x.product_code = '330-14-009'::varchar(10)) THEN 'PROAIR HFA COUNTER'::varchar(18) WHEN (x.product_code = '330-15-001'::varchar(10)) THEN 'QNASL'::varchar(5) WHEN (x.product_code = '330-13-005'::varchar(10)) THEN 'QVAR 40MCG'::varchar(10) WHEN (x.product_code = '330-13-006'::varchar(10)) THEN 'QVAR 80MCG'::varchar(10) ELSE NULL END, CASE WHEN (x.product_code = '330-14-002'::varchar(10)) THEN '59310057920'::varchar(11) WHEN (x.product_code = '330-14-009'::varchar(10)) THEN '59310057922'::varchar(11) WHEN (x.product_code = '330-15-001'::varchar(10)) THEN '59310021012'::varchar(11) WHEN (x.product_code = '330-13-005'::varchar(10)) THEN '59310020240'::varchar(11) WHEN (x.product_code = '330-13-006'::varchar(10)) THEN '59310020480'::varchar(11) ELSE NULL END, d.zip, x.month_ending) UNION SELECT '4416451422'::varchar(10) AS customerid, CASE WHEN (x.product_code = '982-23-204'::varchar(10)) THEN 'QUARTETTE'::varchar(9) ELSE NULL END AS brand_name, CASE WHEN (x.product_code = '982-23-204'::varchar(10)) THEN '51285043165'::varchar(11) ELSE NULL END AS ndcupc, d.zip, x.month_ending AS period_end_date, sum(x.trx_cnt) AS trx_cnt, sum(0) AS trx_qty FROM WSMP_ADMIN.dw_presc_plan_rx_m x, (SELECT DEMO_COMBINED.sales_force_id, DEMO_COMBINED.ims_id, min(DEMO_COMBINED.zip) AS zip FROM WSMP_ADMIN.DEMO_COMBINED WHERE (DEMO_COMBINED.sales_force_id = 'TW'::varchar(2)) GROUP BY DEMO_COMBINED.sales_force_id, DEMO_COMBINED.ims_id) d WHERE ((d.ims_id = x.ims_id) AND (x.product_code = '982-23-204'::varchar(10)) AND (x.sales_category = '1'::varchar(2)) AND (x.month_bucket >= 1::numeric(18,0)) AND (x.month_bucket <= 12::numeric(18,0))) GROUP BY '4416451422'::varchar(10), CASE WHEN (x.product_code = '982-23-204'::varchar(10)) THEN 'QUARTETTE'::varchar(9) ELSE NULL END, CASE WHEN (x.product_code = '982-23-204'::varchar(10)) THEN '51285043165'::varchar(11) ELSE NULL END, d.zip, x.month_ending) UNION SELECT '4416451422'::varchar(10) AS customerid, CASE WHEN (x.product_code = '600120'::varchar(6)) THEN 'COPAXONE 20mg'::varchar(13) WHEN (x.product_code = '600140'::varchar(6)) THEN 'COPAXONE 40mg'::varchar(13) ELSE NULL END AS brand_name, CASE WHEN (x.product_code = '600120'::varchar(6)) THEN '68546031730'::varchar(11) WHEN (x.product_code = '600140'::varchar(6)) THEN '68546032512'::varchar(11) ELSE NULL END AS ndcupc, d.zip, x.month_ending AS period_end_date, sum(x.trx_cnt) AS trx_cnt, sum(0) AS trx_qty FROM WSMP_ADMIN.dw_presc_plan_rx_m x, (SELECT DEMO_COMBINED.sales_force_id, DEMO_COMBINED.ims_id, min(DEMO_COMBINED.zip) AS zip FROM WSMP_ADMIN.DEMO_COMBINED WHERE (DEMO_COMBINED.sales_force_id = 'TN'::varchar(2)) GROUP BY DEMO_COMBINED.sales_force_id, DEMO_COMBINED.ims_id) d WHERE ((d.ims_id = x.ims_id) AND (x.product_code = ANY (ARRAY['600120'::varchar(6), '600140'::varchar(6)])) AND (x.sales_category = '1'::varchar(2)) AND (x.month_bucket >= 1::numeric(18,0)) AND (x.month_bucket <= 12::numeric(18,0))) GROUP BY '4416451422'::varchar(10), CASE WHEN (x.product_code = '600120'::varchar(6)) THEN 'COPAXONE 20mg'::varchar(13) WHEN (x.product_code = '600140'::varchar(6)) THEN 'COPAXONE 40mg'::varchar(13) ELSE NULL END, CASE WHEN (x.product_code = '600120'::varchar(6)) THEN '68546031730'::varchar(11) WHEN (x.product_code = '600140'::varchar(6)) THEN '68546032512'::varchar(11) ELSE NULL END, d.zip, x.month_ending;

CREATE  VIEW WSMP_ADMIN_ORA.v_veeva_demo AS
SELECT substr(tsf.territory_vod__c, 1, 2) AS sales_force_id, CASE WHEN (rta.NAME = ANY (ARRAY['Hospital_vod'::varchar(12), 'Pharmacy_vod'::varchar(12), 'Practice_vod'::varchar(12), 'ParaGard_TVA'::varchar(12)])) THEN 'ACCT'::varchar(4) WHEN ((rta.NAME = 'Professional_vod'::varchar(16)) AND (acc.ID_VOD__C IS NULL) AND (acc.DESIGNATION_TVA__C = ANY (ARRAY['Nurse'::varchar(5), 'Billing Staff'::varchar(13), 'Office Staff'::varchar(12), 'Other Contact'::varchar(13), 'Pharmacist/Pharm D'::varchar(18), 'Practice Manager'::varchar(16), 'Refill Coordinator'::varchar(18), 'Reimbursement Specialist'::varchar(24)]))) THEN 'CONT'::varchar(4) WHEN (rta.NAME = 'Staff'::varchar(5)) THEN 'CONT'::varchar(4) WHEN (rta.NAME = 'Professional_vod'::varchar(16)) THEN 'PROF'::varchar(4) ELSE 'UNK'::varchar(3) END AS legacy_demo_type, replace(rta.NAME, '_vod'::varchar(4), ''::varchar) AS veeva_account_type, acc.TYPE AS veeva_business_type, acc.ID AS csf_demo_id, acc.CM_ID_TVA__C AS tvcmid, acc.ID_VOD__C AS ims_id, acc.ACCOUNT_MASTER_ID_TVA__C AS hms_id, substr(btrim(acc.ME__C), 1, 10) AS me_num, acc.NPI_VOD__C AS npi, addr.DEA_VOD__C AS dea_num, addr.DEA_EXPIRATION_DATE_VOD__C AS dea_expir_date, addr.DEA_SCHEDULE_VOD__C AS dea_drug_schedule, tsf.territory_vod__c AS territory_num, tsf.territory_status_tva__c AS territory_status, 'N'::varchar(1) AS house_acct_flag, 'A'::varchar(1) AS src_verification_status, CASE WHEN (rta.NAME = ANY (ARRAY['Hospital_vod'::varchar(12), 'Pharmacy_vod'::varchar(12), 'Practice_vod'::varchar(12), 'ParaGard_TVA'::varchar(12)])) THEN substr(acc.NAME, 1, 60) ELSE acc.LASTNAME END AS last_name, acc.FIRSTNAME AS first_name, acc.MIDDLE_VOD__C AS middle_name, acc.SUFFIX_TVA__C AS suffix_name, acc.CREDENTIALS_VOD__C AS credentials, acc.DESIGNATION_TVA__C AS designation, addr.NAME AS address1, addr.ADDRESS_LINE_2_VOD__C AS address2, addr.ADDRESS_LINE_3_TVA__C AS address3, addr.CITY_VOD__C AS city, addr.STATE_VOD__C AS state, addr.ZIP_VOD__C AS zip, acc.PHONE AS phone, CASE WHEN (addr.INACTIVE_VOD__C = 'false'::varchar(5)) THEN 'Active'::varchar(6) ELSE 'Inactive'::varchar(8) END AS address_status, acc.FAX AS fax, acc.CELL_PHONE_TVA__C AS cell_phone, acc.PERSONEMAIL AS email, CASE WHEN (acc.CML_PROFILED_TVA__C = 'false'::varchar(5)) THEN 'N'::varchar(1) WHEN (acc.CML_PROFILED_TVA__C = 'true'::varchar(4)) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS cml_profiled, acc.SPECIALTY_1_VOD__C AS prim_specialty, CASE WHEN (acc.NO_CONTACT_TVA__C = 'false'::varchar(5)) THEN 'N'::varchar(1) WHEN (acc.NO_CONTACT_TVA__C = 'true'::varchar(4)) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS no_contact, addr.LICENSE_VOD__C AS state_license_number, addr.STATE_VOD__C AS state_license_state, CASE WHEN (addr.LICENSE_VALID_TO_SAMPLE_VOD__C = 'Valid'::varchar(5)) THEN 'E'::varchar(1) ELSE 'I'::varchar(1) END AS state_license_elig_code, addr.LICENSE_EXPIRATION_DATE_VOD__C AS state_license_expir_date, substr(btrim(CASE WHEN ((btrim(acc.CREDENTIALS_VOD__C) IS NOT NULL) AND (btrim(addr.STATE_VOD__C) IS NOT NULL) AND (btrim(addr.LICENSE_VOD__C) IS NOT NULL)) THEN ((((btrim(acc.CREDENTIALS_VOD__C) || '-'::varchar(1)) || btrim(addr.STATE_VOD__C)) || '-'::varchar(1)) || btrim(addr.LICENSE_VOD__C)) ELSE NULL END), 1, 30) AS state_num, CASE WHEN (acc.NO_SPEND_TVA__C = 'false'::varchar(5)) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END AS no_spend, acc.DNC_CNS_TVA__C AS nuvigil_dnc, CASE WHEN (acc.NUVIGIL_APP_TVA__C = 'false'::varchar(5)) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END AS nuvigil_app, acc.DNC_PCS_TVA__C AS fentora_dnc, CASE WHEN (acc.FENTORA_APP_TVA__C = 'false'::varchar(5)) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END AS fentora_app, acc.TIRF_REMS_TVA__C AS fentora_rems_status, tsf.last_activity_date_vod__c AS sfa_last_call_date, acc.ID AS veeva_account_id, addr.ID AS veeva_address_id, 'Y'::varchar(1) AS ora_viewable_flag, acc.CREATEDDATE AS sfa_create_date, trunc(tsf.createddate, 'DD'::varchar(2)) AS sfa_align_date, (statement_timestamp())::timestamp AS last_build_date, CASE WHEN (NOT regexp_like(acc.EXTERNAL_ID_VOD__C, '[[:digit:]]{9}'::varchar(14), ''::varchar)) THEN acc.EXTERNAL_ID_VOD__C ELSE NULL END AS siebel_contact_row_id, CASE WHEN regexp_like(acc.EXTERNAL_ID_VOD__C, '[[:digit:]]{9}'::varchar(14), ''::varchar) THEN acc.EXTERNAL_ID_VOD__C ELSE NULL END AS bp_code, acc.OUTLET_ID_TVA__C AS ims_outlet_code, acc.PMO_GPO_ACCOUNT_AFFILIATIONS AS pmo_gpo_account_affiliations, tsf.synribo_target_tva__c AS onc_synribo_target, tsf.treanda_sbo_tva__c AS onc_treanda_sbo, tsf.trisenox_sbo_tva__c AS onc_trisenox_sbo, CASE WHEN (tsf.territory_vod__c ~~ 'TO%'::varchar(3)) THEN acc.TREANDA_LQ_TGT_TVA__C ELSE NULL END AS onc_treanda_target, acc.BUSINESS_ASSOCIATE_AGREEMENT AS business_associate_agreement, CASE WHEN (tsf.territory_vod__c ~~ 'TO%'::varchar(3)) THEN acc.TBO_FILGRASTIM_TARGET_TVA__C ELSE NULL END AS granix_indicator, acc.ACCOUNT_DEMO_ID_TVA__C AS acct_demo_id FROM (((((WSMP_ADMIN.VV_ACCOUNT acc JOIN WSMP_ADMIN.VV_RECORDTYPE rta ON ((acc.RECORDTYPEID = rta.ID))) JOIN WSMP_ADMIN.VV_ACCOUNTSHARE acctshr ON (((acc.ID = acctshr.ACCOUNTID) AND (acctshr.ROWCAUSE = 'TerritoryManual'::varchar(15))))) JOIN WSMP_ADMIN.VV_GROUP g ON ((acctshr.USERORGROUPID = g.ID))) JOIN (SELECT x.id, x.isdeleted, x.name, x.recordtypeid, x.createddate, x.createdbyid, x.lastmodifieddate, x.lastmodifiedbyid, x.systemmodstamp, x.mayedit, x.islocked, x.account_vod__c, x.address_vod__c, x.last_activity_date_vod__c, x.my_target_vod__c, x.route_vod__c, x.mobile_id_vod__c, x.external_id_vod__c, x.territory_vod__c, x.ytd_activity_vod__c, x.preferred_account_vod__c, x.allowed_products_vod__c, x.territory_status_tva__c, x.territory_specialty_tva__c, x.treats_es_osa_tva__c, x.osa_patients_tva__c, x.account_status_tva__c, x.dea_number_tva__c, x.synribo_target_tva__c, x.treanda_sbo_tva__c, x.trisenox_sbo_tva__c, x.appt_index_tva__c, x.merged_mvn__c, x.call_plan_designation_tva__c, x.campaign_tva__c, x.rnk FROM (SELECT x.id, x.isdeleted, x.name, x.recordtypeid, x.createddate, x.createdbyid, x.lastmodifieddate, x.lastmodifiedbyid, x.systemmodstamp, x.mayedit, x.islocked, x.account_vod__c, x.address_vod__c, x.last_activity_date_vod__c, x.my_target_vod__c, x.route_vod__c, x.mobile_id_vod__c, x.external_id_vod__c, x.territory_vod__c, x.ytd_activity_vod__c, x.preferred_account_vod__c, x.allowed_products_vod__c, x.territory_status_tva__c, x.territory_specialty_tva__c, x.treats_es_osa_tva__c, x.osa_patients_tva__c, x.account_status_tva__c, x.dea_number_tva__c, x.synribo_target_tva__c, x.treanda_sbo_tva__c, x.trisenox_sbo_tva__c, x.appt_index_tva__c, x.merged_mvn__c, x.call_plan_designation_tva__c, x.campaign_tva__c, row_number() OVER (PARTITION BY x.account_vod__c, x.territory_vod__c ORDER BY x.createddate, x.lastmodifieddate, x.systemmodstamp, x.address_vod__c) AS rnk FROM WSMP_ADMIN.vv_tsf_vod__c x) x WHERE (x.rnk = 1)) tsf ON (((tsf.account_vod__c = acc.ID) AND (tsf.territory_vod__c = g.DEVELOPERNAME)))) JOIN WSMP_ADMIN.VV_ADDRESS_VOD__C addr ON (((addr.ACCOUNT_VOD__C = acc.ID) AND (tsf.address_vod__c = addr.ID))));

CREATE  VIEW WSMP_ADMIN_ORA.i_bag_territory_product_terr AS
SELECT bt.TERRITORY_NUM AS territory_num, b.BAG_NAME AS bag_name, bp."POSITION" AS "position", bp.PRODUCT_NAME AS product_name FROM ((WSMP_ADMIN.BAG b JOIN WSMP_ADMIN.BAG_TERRITORY bt ON ((b.BAG_ID = bt.BAG_ID))) JOIN WSMP_ADMIN.BAG_PRODUCT bp ON ((b.BAG_ID = bp.BAG_ID))) WHERE ((b.VALID_FOR_TODAY = 'Y'::varchar(1)) AND (bt.VALID_FOR_TODAY = 'Y'::varchar(1)));

CREATE  VIEW WSMP_ADMIN_ORA.i_bag_territory_product_mgr AS
SELECT m.territory_num, (m.sales_force_id || 'MGR'::varchar(3)) AS bag_name, row_number() OVER (PARTITION BY m.territory_num ORDER BY p.product_name) AS "position", p.product_name FROM ((SELECT substr(i_bag_territory_product_terr.territory_num, 1, 2) AS sales_force_id, i_bag_territory_product_terr.product_name FROM WSMP_ADMIN.i_bag_territory_product_terr GROUP BY substr(i_bag_territory_product_terr.territory_num, 1, 2), i_bag_territory_product_terr.product_name) p JOIN (SELECT substr(i_bag_territory_product_terr.territory_num, 1, 2) AS sales_force_id, (substr(i_bag_territory_product_terr.territory_num, 1, 6) || '00'::varchar(2)) AS territory_num FROM WSMP_ADMIN.i_bag_territory_product_terr GROUP BY substr(i_bag_territory_product_terr.territory_num, 1, 2), (substr(i_bag_territory_product_terr.territory_num, 1, 6) || '00'::varchar(2))) m ON ((p.sales_force_id = m.sales_force_id)));

CREATE  VIEW WSMP_ADMIN_ORA.i_bag_territory_product AS
SELECT i_bag_territory_product_terr.territory_num, i_bag_territory_product_terr.bag_name, i_bag_territory_product_terr."position", i_bag_territory_product_terr.product_name FROM WSMP_ADMIN.i_bag_territory_product_terr UNION SELECT i_bag_territory_product_mgr.territory_num, i_bag_territory_product_mgr.bag_name, i_bag_territory_product_mgr."position", i_bag_territory_product_mgr.product_name FROM WSMP_ADMIN.i_bag_territory_product_mgr;

CREATE  VIEW WSMP_ADMIN_ORA.Syneos_Cinqair_dddmd AS
 SELECT ca.sales_force_id,
        ca.territory_number,
        dddmd.onc_account_demo_id,
        dddmd.outlet_name,
        demo.outlet_address,
        demo.outlet_city,
        demo.outlet_state,
        demo.outlet_zip,
        dddmd.outlet_code,
        dddmd.tvcmid,
        dddmd.subcategory_code,
        dddmd.basket_name,
        dddmd.data_date,
        dddmd.date,
        dddmd.rollup_month,
        dddmd.quantity,
        dddmd.dollars,
        dddmd.rollup_week
 FROM datamart.ddd_md dddmd, datamart.dddmd_demographics demo, datamart.current_alignment ca
 WHERE ((demo.outlet_zip = ca.zip_code) AND (dddmd.outlet_code = demo.outlet_code) AND (ca.territory_number = ANY (ARRAY['TSATCZ48'::varchar(8), 'TSATNZ43'::varchar(8), 'TSATGZ45'::varchar(8), 'TSATGZ47'::varchar(8), 'TSATGZ50'::varchar(8), 'TSATNZ44'::varchar(8), 'TSATNZ49'::varchar(8), 'TSATCZ43'::varchar(8), 'TSATWZ49'::varchar(8), 'TSATNZ41'::varchar(8), 'TSATSZ42'::varchar(8), 'TSATSZ48'::varchar(8)])) AND (dddmd.basket_name ~~* '%CINQ%'::varchar(6)) AND (dddmd.rollup_month > '2019-12-31'::date))
 GROUP BY ca.sales_force_id,
          ca.territory_number,
          dddmd.onc_account_demo_id,
          dddmd.outlet_name,
          demo.outlet_address,
          demo.outlet_city,
          demo.outlet_state,
          demo.outlet_zip,
          dddmd.outlet_code,
          dddmd.tvcmid,
          dddmd.subcategory_code,
          dddmd.basket_name,
          dddmd.data_date,
          dddmd.date,
          dddmd.rollup_month,
          dddmd.quantity,
          dddmd.dollars,
          dddmd.rollup_week;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_roster AS
SELECT r.TERRITORY_NUM AS territory_num, r.LAST_NAME AS last_name, r.FIRST_NAME AS first_name, r.SHIP_ADDRESS_LINE1 AS ship_address_line1, r.SHIP_ADDRESS_LINE2 AS ship_address_line2, r.SHIP_CITY AS ship_city, r.SHIP_STATE AS ship_state, r.SHIP_ZIP AS ship_zip, coalesce(r.BUSINESS_PHONE, r.CELL_PHONE, r.HOME_PHONE) AS phone, r.EMAIL AS email, CASE WHEN (r.REP_TYPE = 'REP'::varchar(3)) THEN p.m_territory_num WHEN (r.REP_TYPE = 'RM'::varchar(2)) THEN r.TERRITORY_NUM ELSE NULL END AS district, CASE WHEN (r.REP_TYPE = 'REP'::varchar(3)) THEN p.d_territory_num WHEN (r.REP_TYPE = 'RM'::varchar(2)) THEN r.PARENT_TERRITORY_NUM WHEN (r.REP_TYPE = 'AD'::varchar(2)) THEN r.TERRITORY_NUM ELSE NULL END AS region FROM (WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA r LEFT JOIN WSMP_ADMIN.v_roster_teva_rep_mgr_dir p ON (((r.TERRITORY_NUM = p.rep_territory_num) AND (r.EMPLOYEE_ID = p.rep_emp_id)))) WHERE ((r.SALES_FORCE_ID = ANY (ARRAY['TO'::varchar(2), 'TN'::varchar(2)])) AND (r.LAST_NAME <> 'Vacant'::varchar(6)) AND (r.REP_TYPE = ANY (ARRAY['REP'::varchar(3), 'RM'::varchar(2), 'AD'::varchar(2)])));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_sharepoint_tw AS
((SELECT lower(dim_csf_sales_roster_teva.USERNAME) AS title, dim_csf_sales_roster_teva.TERRITORY_NUM AS territory FROM WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA WHERE ((dim_csf_sales_roster_teva.USERNAME IS NOT NULL) AND (dim_csf_sales_roster_teva.SALES_FORCE_ID = 'TW'::varchar(2))) UNION SELECT lower(v_roster_teva_rep_mgr_dir.d_username) AS title, (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2)) AS territory FROM WSMP_ADMIN.v_roster_teva_rep_mgr_dir WHERE ((v_roster_teva_rep_mgr_dir.rep_username IS NOT NULL) AND (v_roster_teva_rep_mgr_dir.sales_force_id = 'TW'::varchar(2))) GROUP BY lower(v_roster_teva_rep_mgr_dir.d_username), (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2))) UNION SELECT lower(v_roster_teva_rep_mgr_dir.h_username) AS lower, (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2)) FROM WSMP_ADMIN.v_roster_teva_rep_mgr_dir WHERE ((v_roster_teva_rep_mgr_dir.rep_username IS NOT NULL) AND (v_roster_teva_rep_mgr_dir.sales_force_id = 'TW'::varchar(2))) GROUP BY lower(v_roster_teva_rep_mgr_dir.h_username), (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2))) UNION SELECT lower(v_roster_teva_rep_mgr_dir.h_username) AS lower, (substr(v_roster_teva_rep_mgr_dir.d_territory_num, 1, 6) || '_I'::varchar(2)) FROM WSMP_ADMIN.v_roster_teva_rep_mgr_dir WHERE ((v_roster_teva_rep_mgr_dir.rep_username IS NOT NULL) AND (v_roster_teva_rep_mgr_dir.sales_force_id = 'TW'::varchar(2))) GROUP BY lower(v_roster_teva_rep_mgr_dir.h_username), (substr(v_roster_teva_rep_mgr_dir.d_territory_num, 1, 6) || '_I'::varchar(2));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_sharepoint_tr AS
((SELECT lower(dim_csf_sales_roster_teva.USERNAME) AS title, dim_csf_sales_roster_teva.TERRITORY_NUM AS territory FROM WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA WHERE ((dim_csf_sales_roster_teva.USERNAME IS NOT NULL) AND (dim_csf_sales_roster_teva.SALES_FORCE_ID = 'TR'::varchar(2))) UNION SELECT lower(v_roster_teva_rep_mgr_dir.d_username) AS title, (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2)) AS territory FROM WSMP_ADMIN.v_roster_teva_rep_mgr_dir WHERE ((v_roster_teva_rep_mgr_dir.rep_username IS NOT NULL) AND (v_roster_teva_rep_mgr_dir.sales_force_id = 'TR'::varchar(2))) GROUP BY lower(v_roster_teva_rep_mgr_dir.d_username), (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2))) UNION SELECT lower(v_roster_teva_rep_mgr_dir.h_username) AS lower, (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2)) FROM WSMP_ADMIN.v_roster_teva_rep_mgr_dir WHERE ((v_roster_teva_rep_mgr_dir.rep_username IS NOT NULL) AND (v_roster_teva_rep_mgr_dir.sales_force_id = 'TR'::varchar(2))) GROUP BY lower(v_roster_teva_rep_mgr_dir.h_username), (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2))) UNION SELECT lower(v_roster_teva_rep_mgr_dir.h_username) AS lower, (substr(v_roster_teva_rep_mgr_dir.d_territory_num, 1, 6) || '_I'::varchar(2)) FROM WSMP_ADMIN.v_roster_teva_rep_mgr_dir WHERE ((v_roster_teva_rep_mgr_dir.rep_username IS NOT NULL) AND (v_roster_teva_rep_mgr_dir.sales_force_id = 'TR'::varchar(2))) GROUP BY lower(v_roster_teva_rep_mgr_dir.h_username), (substr(v_roster_teva_rep_mgr_dir.d_territory_num, 1, 6) || '_I'::varchar(2));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_sharepoint_tc_tn_tp AS
((SELECT lower(dim_csf_sales_roster_teva.USERNAME) AS title, dim_csf_sales_roster_teva.TERRITORY_NUM AS territory FROM WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA WHERE ((dim_csf_sales_roster_teva.USERNAME IS NOT NULL) AND (dim_csf_sales_roster_teva.SALES_FORCE_ID = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)]))) UNION SELECT lower(v_roster_teva_rep_mgr_dir.d_username) AS title, (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2)) AS territory FROM WSMP_ADMIN.v_roster_teva_rep_mgr_dir WHERE ((v_roster_teva_rep_mgr_dir.rep_username IS NOT NULL) AND (v_roster_teva_rep_mgr_dir.sales_force_id = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)]))) GROUP BY lower(v_roster_teva_rep_mgr_dir.d_username), (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2))) UNION SELECT lower(v_roster_teva_rep_mgr_dir.h_username) AS lower, (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2)) FROM WSMP_ADMIN.v_roster_teva_rep_mgr_dir WHERE ((v_roster_teva_rep_mgr_dir.rep_username IS NOT NULL) AND (v_roster_teva_rep_mgr_dir.sales_force_id = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)]))) GROUP BY lower(v_roster_teva_rep_mgr_dir.h_username), (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2))) UNION SELECT lower(v_roster_teva_rep_mgr_dir.h_username) AS lower, (substr(v_roster_teva_rep_mgr_dir.d_territory_num, 1, 6) || '_I'::varchar(2)) FROM WSMP_ADMIN.v_roster_teva_rep_mgr_dir WHERE ((v_roster_teva_rep_mgr_dir.rep_username IS NOT NULL) AND (v_roster_teva_rep_mgr_dir.sales_force_id = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)]))) GROUP BY lower(v_roster_teva_rep_mgr_dir.h_username), (substr(v_roster_teva_rep_mgr_dir.d_territory_num, 1, 6) || '_I'::varchar(2));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_sharepoint_tb AS
((SELECT lower(dim_csf_sales_roster_teva.USERNAME) AS title, dim_csf_sales_roster_teva.TERRITORY_NUM AS territory FROM WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA WHERE ((dim_csf_sales_roster_teva.USERNAME IS NOT NULL) AND (dim_csf_sales_roster_teva.SALES_FORCE_ID = 'TB'::varchar(2))) UNION SELECT lower(v_roster_teva_rep_mgr_dir.d_username) AS title, (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2)) AS territory FROM WSMP_ADMIN.v_roster_teva_rep_mgr_dir WHERE ((v_roster_teva_rep_mgr_dir.rep_username IS NOT NULL) AND (v_roster_teva_rep_mgr_dir.sales_force_id = 'TB'::varchar(2))) GROUP BY lower(v_roster_teva_rep_mgr_dir.d_username), (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2))) UNION SELECT lower(v_roster_teva_rep_mgr_dir.h_username) AS lower, (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2)) FROM WSMP_ADMIN.v_roster_teva_rep_mgr_dir WHERE ((v_roster_teva_rep_mgr_dir.rep_username IS NOT NULL) AND (v_roster_teva_rep_mgr_dir.sales_force_id = 'TB'::varchar(2))) GROUP BY lower(v_roster_teva_rep_mgr_dir.h_username), (substr(v_roster_teva_rep_mgr_dir.m_territory_num, 1, 6) || '_I'::varchar(2))) UNION SELECT lower(v_roster_teva_rep_mgr_dir.h_username) AS lower, (substr(v_roster_teva_rep_mgr_dir.d_territory_num, 1, 6) || '_I'::varchar(2)) FROM WSMP_ADMIN.v_roster_teva_rep_mgr_dir WHERE ((v_roster_teva_rep_mgr_dir.rep_username IS NOT NULL) AND (v_roster_teva_rep_mgr_dir.sales_force_id = 'TB'::varchar(2))) GROUP BY lower(v_roster_teva_rep_mgr_dir.h_username), (substr(v_roster_teva_rep_mgr_dir.d_territory_num, 1, 6) || '_I'::varchar(2));

CREATE  VIEW WSMP_ADMIN_ORA.v_adasuve_survey AS
SELECT t.ACCOUNT_VOD__C AS veeva_account_id, demo.last_name AS account_name, demo.npi, acc.ACCOUNT_DEA_TVA__C AS dea, acc.IMS_ORG_ID_TVA__C AS ims_org_id, acc.ADASUVE_ACCOUNT_INDICATOR AS adasuve_account_indicator, demo.address1, demo.address2, demo.address3, demo.city, demo.state, demo.zip, q.LASTMODIFIEDDATE AS updated_date, s.NAME AS survey, q.ORDER_VOD__C AS question_order, q.QUESTION_TEXT_VOD__C AS question, CASE ty.NAME WHEN NULLSEQUAL 'date_vod'::varchar(8) THEN to_char(q.DATE_VOD__C, 'yyyy-mm-dd'::varchar(10)) WHEN NULLSEQUAL 'text_vod'::varchar(8) THEN q.TEXT_VOD__C ELSE q.RESPONSE_VOD__C END AS answer, rep.LAST_NAME AS rep_last_name, rep.FIRST_NAME AS rep_first_name, hier.rep_territory_name, hier.m_territory_num AS region_territory_num, hier.m_territory_name AS region_territory_name, hier.d_territory_num AS area_territory_num, hier.d_territory_name AS area_territory_name FROM (((((((WSMP_ADMIN.VV_SURVEY_VOD__C s JOIN WSMP_ADMIN.VV_SURVEY_TARGET_VOD__C t ON ((s.ID = t.SURVEY_VOD__C))) JOIN WSMP_ADMIN.VV_QUESTION_RESPONSE_VOD__C q ON ((t.ID = q.SURVEY_TARGET_VOD__C))) JOIN WSMP_ADMIN.VV_RECORDTYPE ty ON ((q.TYPE_VOD__C = ty.ID))) JOIN WSMP_ADMIN.VV_ACCOUNT acc ON ((t.ACCOUNT_VOD__C = acc.ID))) JOIN WSMP_ADMIN.v_veeva_demo demo ON ((t.ACCOUNT_VOD__C = demo.veeva_account_id))) LEFT JOIN (SELECT dim_csf_sales_roster_teva.EMPLOYEE_ID, dim_csf_sales_roster_teva.TERRITORY_NUM, dim_csf_sales_roster_teva.TERRITORY_NAME, dim_csf_sales_roster_teva.SALES_FORCE_ID, dim_csf_sales_roster_teva.FULL_NAME, dim_csf_sales_roster_teva.LAST_NAME, dim_csf_sales_roster_teva.FIRST_NAME, dim_csf_sales_roster_teva.MIDDLE_NAME, dim_csf_sales_roster_teva.ADDRESS_LINE1, dim_csf_sales_roster_teva.ADDRESS_LINE2, dim_csf_sales_roster_teva.CITY, dim_csf_sales_roster_teva.STATE, dim_csf_sales_roster_teva.ZIP, dim_csf_sales_roster_teva.BUS_ADDRESS_LINE1, dim_csf_sales_roster_teva.BUS_ADDRESS_LINE2, dim_csf_sales_roster_teva.BUS_CITY, dim_csf_sales_roster_teva.BUS_STATE, dim_csf_sales_roster_teva.BUS_ZIP, dim_csf_sales_roster_teva.SHIP_ADDRESS_LINE1, dim_csf_sales_roster_teva.SHIP_ADDRESS_LINE2, dim_csf_sales_roster_teva.SHIP_CITY, dim_csf_sales_roster_teva.SHIP_STATE, dim_csf_sales_roster_teva.SHIP_ZIP, dim_csf_sales_roster_teva.BUSINESS_PHONE, dim_csf_sales_roster_teva.HOME_PHONE, dim_csf_sales_roster_teva.CELL_PHONE, dim_csf_sales_roster_teva.FAX, dim_csf_sales_roster_teva.VOICE_MAIL_EXT, dim_csf_sales_roster_teva.EMAIL, dim_csf_sales_roster_teva.HIRE_DATE, dim_csf_sales_roster_teva.BIRTHDAY, dim_csf_sales_roster_teva.TITLE, dim_csf_sales_roster_teva.REP_TYPE, dim_csf_sales_roster_teva.AREA_TRAINER, dim_csf_sales_roster_teva.USERNAME, dim_csf_sales_roster_teva.OUT_OF_TERRITORY, dim_csf_sales_roster_teva.PARENT_TERRITORY_NUM, dim_csf_sales_roster_teva.LAST_BUILD_DATE, dim_csf_sales_roster_teva.COMPANY_CD, dim_csf_sales_roster_teva.ORIG_HIRE_DATE FROM WSMP_ADMIN.DIM_CSF_SALES_ROSTER_TEVA WHERE ((dim_csf_sales_roster_teva.SALES_FORCE_ID = 'TB'::varchar(2)) AND (dim_csf_sales_roster_teva.REP_TYPE = 'REP'::varchar(3)))) rep ON ((demo.territory_num = rep.TERRITORY_NUM))) LEFT JOIN (SELECT v_territory_rep_mgr_dir.sales_force_id, v_territory_rep_mgr_dir.rep_territory_num, v_territory_rep_mgr_dir.rep_territory_name, v_territory_rep_mgr_dir.m_territory_num, v_territory_rep_mgr_dir.m_territory_name, v_territory_rep_mgr_dir.d_territory_num, v_territory_rep_mgr_dir.d_territory_name, v_territory_rep_mgr_dir.h_territory_num, v_territory_rep_mgr_dir.h_territory_name FROM WSMP_ADMIN.v_territory_rep_mgr_dir WHERE (v_territory_rep_mgr_dir.sales_force_id = 'TB'::varchar(2))) hier ON ((demo.territory_num = hier.rep_territory_num))) WHERE ((s.NAME = ANY (ARRAY['Profiling and Developing Product Champions'::varchar(42), 'REMS Enrollment and Formulary'::varchar(29)])) AND (demo.sales_force_id = 'TB'::varchar(2))) ORDER BY t.ACCOUNT_VOD__C, s.NAME, q.QUESTION_TEXT_VOD__C;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_cmop_product AS
SELECT v.VA_PRODUCT AS va_product, v.WK_PROD_CODE AS prod_code, upper(v.CEPH_PROD_DESC) AS prod_name, coalesce(p.brand_code, v.WK_PROD_CODE) AS brand_code, coalesce(p.brand_name, upper(v.CEPH_PROD_DESC)) AS brand_name, coalesce(p.market_code, v.WK_PROD_CODE) AS market_code, CASE WHEN (v.WK_PROD_CODE = 'TR0900'::varchar(6)) THEN 'RESPIRATORY'::varchar(11) ELSE CASE WHEN (v.WK_PROD_CODE = 'TW0900'::varchar(6)) THEN 'WOMENS HEALTH'::varchar(13) ELSE p.market_name END END AS market_name FROM (CUSTOMER.DIM_VA_PRODUCT_XREF v LEFT JOIN CUSTOMER.dim_product p ON ((v.WK_PROD_CODE = p.product_code))) WHERE (v.WK_PROD_CODE <> ALL (ARRAY['200102'::varchar(6), '200104'::varchar(6), '200112'::varchar(6), '200116'::varchar(6), 'V00100'::varchar(6)]));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_mm_ram_to_rsm AS
SELECT x.MM_RAM, x.RSM FROM (SELECT a.MM_RAM, (substr(b.TERRITORY_NUM, 1, 6) || '00'::varchar(2)) AS RSM FROM (teva_ingestion.EXT_MM_RAM_TO_STATE a JOIN WSMP_ADMIN.KC_ZIP_TO_TERRITORY b ON ((a.STATE = b.STATE))) WHERE ((substr(b.TERRITORY_NUM, 5, 2) <> 'ZZ'::varchar(2)) AND (b.TERRITORY_NAME IS NOT NULL)) GROUP BY a.MM_RAM, (substr(b.TERRITORY_NUM, 1, 6) || '00'::varchar(2))) x;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_rems_account_backup AS
SELECT stg.ASI_ACCOUNT_ID AS HCP_ID, align.TERRITORY_NUM AS territory_num, stg.SITE_NAME AS ACCOUNT_NAME, stg.ADDRESS_1 AS ADDRESS1, stg.ADDRESS_2 AS ADDRESS2, NULL AS ADDRESS3, stg.CITY, stg.STATE, stg.ZIP_CODE AS ZIP, 'Y'::varchar(1) AS PRIMARY_ADDRESS, stg.PHONE_NUMBER, fact.IMS_ORG_ID AS EXTERNAL_ID, 'HOSPITAL'::varchar(8) AS CUSTOMER_TYPE, NULL AS BPNUMBER, NULL AS SUBTYPE FROM ((WSMP_ADMIN.STG_REMS_FACILITY stg LEFT JOIN (SELECT ext_kc_zip_to_territory.ZIP, ext_kc_zip_to_territory.CITY, ext_kc_zip_to_territory.STATE, ext_kc_zip_to_territory.TERRITORY_NUM, ext_kc_zip_to_territory.TERRITORY_NAME, ext_kc_zip_to_territory.AREA_NAME, ext_kc_zip_to_territory.REGION_NAME, ext_kc_zip_to_territory.SALES_FORCE_ID, ext_kc_zip_to_territory.ORGANIZATION_CODE, ext_kc_zip_to_territory.INACTIVE_FLAG, ext_kc_zip_to_territory.COMMENTS, ext_kc_zip_to_territory.MIRROR_FLAG, ext_kc_zip_to_territory.MIRROR_TERRITORY_NUM, ext_kc_zip_to_territory.batch_id, ext_kc_zip_to_territory.row_id, ext_kc_zip_to_territory.update_ts FROM teva_ingestion.ext_kc_zip_to_territory WHERE (ext_kc_zip_to_territory.SALES_FORCE_ID = 'TB'::varchar(2))) align ON ((substr(stg.ZIP_CODE, 1, 5) = align.ZIP))) LEFT JOIN WSMP_ADMIN.HCOS_IDENTIFIER_FACT fact ON (((fact.IDENTIFIER_ID = 15::numeric(18,0)) AND (fact.IDENTIFIER = stg.NPI)))) WHERE (stg.VEEVA_ACCOUNT_ID IS NULL);

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Fentora_Market AS
SELECT rx.payer_plan_num AS plan_num, rx.product_code, sum(CASE rx.month_bucket WHEN 24::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt24, sum(CASE rx.month_bucket WHEN 24::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt24, sum(CASE rx.month_bucket WHEN 23::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt23, sum(CASE rx.month_bucket WHEN 23::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt23, sum(CASE rx.month_bucket WHEN 22::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt22, sum(CASE rx.month_bucket WHEN 22::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt22, sum(CASE rx.month_bucket WHEN 21::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt21, sum(CASE rx.month_bucket WHEN 21::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt21, sum(CASE rx.month_bucket WHEN 20::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt20, sum(CASE rx.month_bucket WHEN 20::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt20, sum(CASE rx.month_bucket WHEN 19::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt19, sum(CASE rx.month_bucket WHEN 19::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt19, sum(CASE rx.month_bucket WHEN 18::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt18, sum(CASE rx.month_bucket WHEN 18::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt18, sum(CASE rx.month_bucket WHEN 17::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt17, sum(CASE rx.month_bucket WHEN 17::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt17, sum(CASE rx.month_bucket WHEN 16::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt16, sum(CASE rx.month_bucket WHEN 16::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt16, sum(CASE rx.month_bucket WHEN 15::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt15, sum(CASE rx.month_bucket WHEN 15::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt15, sum(CASE rx.month_bucket WHEN 14::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt14, sum(CASE rx.month_bucket WHEN 14::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt14, sum(CASE rx.month_bucket WHEN 13::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt13, sum(CASE rx.month_bucket WHEN 13::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt13, sum(CASE rx.month_bucket WHEN 12::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt12, sum(CASE rx.month_bucket WHEN 12::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt12, sum(CASE rx.month_bucket WHEN 11::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt11, sum(CASE rx.month_bucket WHEN 11::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt11, sum(CASE rx.month_bucket WHEN 10::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt10, sum(CASE rx.month_bucket WHEN 10::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt10, sum(CASE rx.month_bucket WHEN 9::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt9, sum(CASE rx.month_bucket WHEN 9::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt9, sum(CASE rx.month_bucket WHEN 8::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt8, sum(CASE rx.month_bucket WHEN 8::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt8, sum(CASE rx.month_bucket WHEN 7::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt7, sum(CASE rx.month_bucket WHEN 7::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt7, sum(CASE rx.month_bucket WHEN 6::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt6, sum(CASE rx.month_bucket WHEN 6::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt6, sum(CASE rx.month_bucket WHEN 5::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt5, sum(CASE rx.month_bucket WHEN 5::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt5, sum(CASE rx.month_bucket WHEN 4::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt4, sum(CASE rx.month_bucket WHEN 4::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt4, sum(CASE rx.month_bucket WHEN 3::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt3, sum(CASE rx.month_bucket WHEN 3::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt3, sum(CASE rx.month_bucket WHEN 2::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt2, sum(CASE rx.month_bucket WHEN 2::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt2, sum(CASE rx.month_bucket WHEN 1::numeric(18,0) THEN rx.trx_cnt ELSE 0::numeric(18,0) END) AS trx_cnt1, sum(CASE rx.month_bucket WHEN 1::numeric(18,0) THEN rx.nrx_cnt ELSE 0::numeric(18,0) END) AS nrx_cnt1 FROM WSMP_ADMIN.dw_presc_plan_rx_m rx, CUSTOMER.dim_product p WHERE ((rx.product_code = ANY (ARRAY['300500'::varchar(6), '300100'::varchar(6), '300180'::varchar(6), '300170'::varchar(6), '300130'::varchar(6), '300140'::varchar(6), '300110'::varchar(6)])) AND (rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0)) AND (rx.product_code = p.product_code)) GROUP BY rx.payer_plan_num, rx.product_code;

CREATE  VIEW WSMP_ADMIN_ORA.stg_ims_npi AS
SELECT y.ims_id, y.npi FROM (SELECT x.ims_id, x.npi, row_number() OVER (PARTITION BY x.ims_id ORDER BY x.rnk, x.npi) AS rnk FROM (SELECT x1.ID_NUM AS ims_id, x2.ID_NUM AS npi, 1 AS rnk FROM (teva_ingestion.tvcmid_xref x1 JOIN teva_ingestion.tvcmid_xref x2 ON ((x1.TVCMID = x2.TVCMID))) WHERE ((x1.ID_TYPE = 'IMS_ID'::varchar(6)) AND (x2.ID_TYPE = 'NPI'::varchar(3))) UNION SELECT hcos_professional.IMS_ID AS ims_id, hcos_professional.NPI AS npi, 2 AS rnk FROM WSMP_ADMIN.HCOS_PROFESSIONAL WHERE ((hcos_professional.IMS_ID IS NOT NULL) AND (hcos_professional.NPI IS NOT NULL))) x) y WHERE (y.rnk = 1);

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_do_not_promote_with_veevaid AS
(((SELECT d.SALES_FORCE_ID AS sales_force_id, acct.ID AS veeva_id, sln.state_license_number, dea.dea_num, d.PRODUCT_NAME AS product_name, d.SPECIALTY_GROUP AS specialty_group, 'N'::varchar(1) AS app, CASE WHEN (d.DEBARRED = 'Y'::varchar(1)) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS DNP FROM (((WSMP_ADMIN.DIM_DNC d JOIN WSMP_ADMIN.stg_ims_dea dea ON ((d.IMS_ID = dea.ims_id))) LEFT JOIN (SELECT substr(g.DEVELOPERNAME, 1, 2) AS sales_force_id, acct.ID_VOD__C AS ims_id, addr.LICENSE_VOD__C AS state_license_number FROM ((((WSMP_ADMIN.VV_ACCOUNT acct JOIN WSMP_ADMIN.VV_RECORDTYPE rta ON ((acct.RECORDTYPEID = rta.ID))) JOIN WSMP_ADMIN.VV_ACCOUNTSHARE acctshr ON (((acct.ID = acctshr.ACCOUNTID) AND (acctshr.ROWCAUSE = 'TerritoryManual'::varchar(15))))) JOIN WSMP_ADMIN.VV_GROUP g ON ((acctshr.USERORGROUPID = g.ID))) JOIN WSMP_ADMIN.VV_ADDRESS_VOD__C addr ON ((addr.ACCOUNT_VOD__C = acct.ID))) WHERE ((addr.LICENSE_VOD__C IS NOT NULL) AND (acct.ID_VOD__C IS NOT NULL)) GROUP BY substr(g.DEVELOPERNAME, 1, 2), acct.ID_VOD__C, addr.LICENSE_VOD__C) sln ON (((d.IMS_ID = sln.ims_id) AND (d.SALES_FORCE_ID = sln.sales_force_id)))) LEFT JOIN WSMP_ADMIN.VV_ACCOUNT acct ON ((d.IMS_ID = acct.ID_VOD__C))) UNION SELECT 'TC'::varchar(2), acct.ID AS veeva_id, sln.state_license_number, dea.dea_num, 'NUVIGIL'::varchar(7), d.SPECIALTY_PRIMARY_CODE AS specialty_primary_code, 'N'::varchar(1) AS APP, 'Y'::varchar(1) AS DNP FROM (((WSMP_ADMIN.DEBARRED d JOIN WSMP_ADMIN.stg_ims_dea dea ON ((d.IMS_ID = dea.ims_id))) LEFT JOIN (SELECT substr(g.DEVELOPERNAME, 1, 2) AS sales_force_id, acct.ID_VOD__C AS ims_id, addr.LICENSE_VOD__C AS state_license_number FROM ((((WSMP_ADMIN.VV_ACCOUNT acct JOIN WSMP_ADMIN.VV_RECORDTYPE rta ON ((acct.RECORDTYPEID = rta.ID))) JOIN WSMP_ADMIN.VV_ACCOUNTSHARE acctshr ON (((acct.ID = acctshr.ACCOUNTID) AND (acctshr.ROWCAUSE = 'TerritoryManual'::varchar(15))))) JOIN WSMP_ADMIN.VV_GROUP g ON ((acctshr.USERORGROUPID = g.ID))) JOIN WSMP_ADMIN.VV_ADDRESS_VOD__C addr ON ((addr.ACCOUNT_VOD__C = acct.ID))) WHERE ((addr.LICENSE_VOD__C IS NOT NULL) AND (acct.ID_VOD__C IS NOT NULL)) GROUP BY substr(g.DEVELOPERNAME, 1, 2), acct.ID_VOD__C, addr.LICENSE_VOD__C) sln ON (((d.IMS_ID = sln.ims_id) AND (sln.sales_force_id = 'TC'::varchar(2))))) LEFT JOIN WSMP_ADMIN.VV_ACCOUNT acct ON ((d.IMS_ID = acct.ID_VOD__C))) WHERE (d.CURRENT_IND = 'Y'::varchar(1)) GROUP BY 'TC'::varchar(2), acct.ID, sln.state_license_number, dea.dea_num, 'NUVIGIL'::varchar(7), d.SPECIALTY_PRIMARY_CODE, 'N'::varchar(1), 'Y'::varchar(1)) UNION SELECT 'TP'::varchar(2), acct.ID AS veeva_id, sln.state_license_number, dea.dea_num, 'FENTORA'::varchar(7), d.SPECIALTY_PRIMARY_CODE AS specialty_primary_code, 'N'::varchar(1) AS APP, 'Y'::varchar(1) AS DNP FROM (((WSMP_ADMIN.DEBARRED d JOIN WSMP_ADMIN.stg_ims_dea dea ON ((d.IMS_ID = dea.ims_id))) LEFT JOIN (SELECT substr(g.DEVELOPERNAME, 1, 2) AS sales_force_id, acct.ID_VOD__C AS ims_id, addr.LICENSE_VOD__C AS state_license_number FROM ((((WSMP_ADMIN.VV_ACCOUNT acct JOIN WSMP_ADMIN.VV_RECORDTYPE rta ON ((acct.RECORDTYPEID = rta.ID))) JOIN WSMP_ADMIN.VV_ACCOUNTSHARE acctshr ON (((acct.ID = acctshr.ACCOUNTID) AND (acctshr.ROWCAUSE = 'TerritoryManual'::varchar(15))))) JOIN WSMP_ADMIN.VV_GROUP g ON ((acctshr.USERORGROUPID = g.ID))) JOIN WSMP_ADMIN.VV_ADDRESS_VOD__C addr ON ((addr.ACCOUNT_VOD__C = acct.ID))) WHERE ((addr.LICENSE_VOD__C IS NOT NULL) AND (acct.ID_VOD__C IS NOT NULL)) GROUP BY substr(g.DEVELOPERNAME, 1, 2), acct.ID_VOD__C, addr.LICENSE_VOD__C) sln ON (((d.IMS_ID = sln.ims_id) AND (sln.sales_force_id = 'TP'::varchar(2))))) LEFT JOIN WSMP_ADMIN.VV_ACCOUNT acct ON ((d.IMS_ID = acct.ID_VOD__C))) WHERE (d.CURRENT_IND = 'Y'::varchar(1)) GROUP BY 'TP'::varchar(2), acct.ID, sln.state_license_number, dea.dea_num, 'FENTORA'::varchar(7), d.SPECIALTY_PRIMARY_CODE, 'N'::varchar(1), 'Y'::varchar(1)) UNION SELECT 'TC'::varchar(2) AS sales_force_id, acct.ID AS veeva_id, addr.LICENSE_VOD__C AS state_license_number, dea.dea_num, 'NUVIGIL'::varchar(7) AS product_name, ssx.SPECIALTY_CODE AS specialty_code, 'Y'::varchar(1) AS app, 'N'::varchar(1) AS DNP FROM (((WSMP_ADMIN.VV_ACCOUNT acct JOIN WSMP_ADMIN.stg_ims_dea dea ON ((acct.ID_VOD__C = dea.ims_id))) LEFT JOIN WSMP_ADMIN.VV_ADDRESS_VOD__C addr ON (((addr.ACCOUNT_VOD__C = acct.ID) AND (addr.LICENSE_VOD__C IS NOT NULL)))) LEFT JOIN WSMP_ADMIN.SIEBEL_SPECIALTY_XREF ssx ON ((acct.SPECIALTY_1_VOD__C = ssx.SPECIALTY_DESCRIPTION))) WHERE (acct.NUVIGIL_APP_TVA__C = 'true'::varchar(4))) UNION SELECT 'TP'::varchar(2) AS sales_force_id, acct.ID AS veeva_id, addr.LICENSE_VOD__C AS state_license_number, dea.dea_num, 'FENTORA'::varchar(7) AS product_name, SSX.SPECIALTY_CODE AS specialty_code, 'Y'::varchar(1) AS app, 'N'::varchar(1) AS DNP FROM (((WSMP_ADMIN.VV_ACCOUNT acct JOIN WSMP_ADMIN.stg_ims_dea dea ON ((acct.ID_VOD__C = dea.ims_id))) LEFT JOIN WSMP_ADMIN.VV_ADDRESS_VOD__C addr ON (((addr.ACCOUNT_VOD__C = acct.ID) AND (addr.LICENSE_VOD__C IS NOT NULL)))) LEFT JOIN WSMP_ADMIN.SIEBEL_SPECIALTY_XREF SSX ON ((acct.SPECIALTY_1_VOD__C = SSX.SPECIALTY_DESCRIPTION))) WHERE (acct.FENTORA_APP_TVA__C = 'true'::varchar(4));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_dmd_product AS
SELECT lpad(dim_product_ims_ddd.ims_product_code, 8, '0'::varchar(1)) AS ims_product_code, 'GCSF'::varchar(4) AS market_name, dim_product_ims_ddd.brand_name, dim_product_ims_ddd.ims_product_name AS product_name FROM CUSTOMER.dim_product_ims_ddd WHERE ((dim_product_ims_ddd.brand_name = ANY (ARRAY['NEUPOGEN'::varchar(8), 'GRANIX'::varchar(6), 'LEUKINE'::varchar(7)])) AND (dim_product_ims_ddd.market_name = 'ONCOLOGY'::varchar(8)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Fentora_Product_Totals AS
SELECT rx.PRODUCT_CODE AS product_code, sum(CASE rx.MONTH_BUCKET WHEN 24::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt24, sum(CASE rx.MONTH_BUCKET WHEN 24::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt24, sum(CASE rx.MONTH_BUCKET WHEN 23::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt23, sum(CASE rx.MONTH_BUCKET WHEN 23::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt23, sum(CASE rx.MONTH_BUCKET WHEN 22::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt22, sum(CASE rx.MONTH_BUCKET WHEN 22::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt22, sum(CASE rx.MONTH_BUCKET WHEN 21::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt21, sum(CASE rx.MONTH_BUCKET WHEN 21::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt21, sum(CASE rx.MONTH_BUCKET WHEN 20::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt20, sum(CASE rx.MONTH_BUCKET WHEN 20::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt20, sum(CASE rx.MONTH_BUCKET WHEN 19::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt19, sum(CASE rx.MONTH_BUCKET WHEN 19::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt19, sum(CASE rx.MONTH_BUCKET WHEN 18::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt18, sum(CASE rx.MONTH_BUCKET WHEN 18::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt18, sum(CASE rx.MONTH_BUCKET WHEN 17::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt17, sum(CASE rx.MONTH_BUCKET WHEN 17::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt17, sum(CASE rx.MONTH_BUCKET WHEN 16::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt16, sum(CASE rx.MONTH_BUCKET WHEN 16::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt16, sum(CASE rx.MONTH_BUCKET WHEN 15::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt15, sum(CASE rx.MONTH_BUCKET WHEN 15::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt15, sum(CASE rx.MONTH_BUCKET WHEN 14::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt14, sum(CASE rx.MONTH_BUCKET WHEN 14::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt14, sum(CASE rx.MONTH_BUCKET WHEN 13::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt13, sum(CASE rx.MONTH_BUCKET WHEN 13::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt13, sum(CASE rx.MONTH_BUCKET WHEN 12::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt12, sum(CASE rx.MONTH_BUCKET WHEN 12::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt12, sum(CASE rx.MONTH_BUCKET WHEN 11::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt11, sum(CASE rx.MONTH_BUCKET WHEN 11::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt11, sum(CASE rx.MONTH_BUCKET WHEN 10::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt10, sum(CASE rx.MONTH_BUCKET WHEN 10::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt10, sum(CASE rx.MONTH_BUCKET WHEN 9::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt9, sum(CASE rx.MONTH_BUCKET WHEN 9::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt9, sum(CASE rx.MONTH_BUCKET WHEN 8::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt8, sum(CASE rx.MONTH_BUCKET WHEN 8::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt8, sum(CASE rx.MONTH_BUCKET WHEN 7::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt7, sum(CASE rx.MONTH_BUCKET WHEN 7::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt7, sum(CASE rx.MONTH_BUCKET WHEN 6::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt6, sum(CASE rx.MONTH_BUCKET WHEN 6::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt6, sum(CASE rx.MONTH_BUCKET WHEN 5::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt5, sum(CASE rx.MONTH_BUCKET WHEN 5::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt5, sum(CASE rx.MONTH_BUCKET WHEN 4::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt4, sum(CASE rx.MONTH_BUCKET WHEN 4::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt4, sum(CASE rx.MONTH_BUCKET WHEN 3::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt3, sum(CASE rx.MONTH_BUCKET WHEN 3::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt3, sum(CASE rx.MONTH_BUCKET WHEN 2::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt2, sum(CASE rx.MONTH_BUCKET WHEN 2::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt2, sum(CASE rx.MONTH_BUCKET WHEN 1::numeric(18,0) THEN rx.TRX_CNT ELSE 0::numeric(18,0) END) AS trx_cnt1, sum(CASE rx.MONTH_BUCKET WHEN 1::numeric(18,0) THEN rx.NRX_CNT ELSE 0::numeric(18,0) END) AS nrx_cnt1 FROM WSMP_ADMIN.DW_PRESC_PLAN_RX_M rx, CUSTOMER.dim_product p WHERE ((rx.PRODUCT_CODE = ANY (ARRAY['300500'::varchar(6), '300100'::varchar(6), '300180'::varchar(6), '300170'::varchar(6), '300130'::varchar(6), '300140'::varchar(6), '300110'::varchar(6)])) AND (rx.MONTH_BUCKET >= 1::numeric(18,0)) AND (rx.MONTH_BUCKET <= 24::numeric(18,0)) AND (rx.PRODUCT_CODE = p.product_code)) GROUP BY rx.PRODUCT_CODE;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_tr_launch_analytics_rx AS
SELECT rx.ims_id, px.MODEL AS model, mpm.PAYMENT_METHOD AS method_of_payment, rx.payer_plan_num, p.product_name, rx.product_code, to_char(rx.month_ending, ' YYYY-MM-DD'::varchar(11)) AS month_ending, rx.month_bucket, to_char(rx.week_ending, ' YYYY-MM-DD'::varchar(11)) AS week_ending, rx.week_bucket, rx.nrx_cnt, rx.trx_cnt, rx.sales_category FROM (((WSMP_ADMIN.dw_presc_plan_rx_w rx JOIN CUSTOMER.dim_product p ON ((rx.product_code = p.product_code))) LEFT JOIN WSMP_ADMIN.TFC_IMS_PLAN_XREF px ON ((rx.payer_plan_num = px.PAYER_PLAN_NUM))) LEFT JOIN WSMP_ADMIN.DIM_IMS_MODEL_PAYMENT_METHOD mpm ON ((px.MODEL = mpm.MODEL))) WHERE ((rx.product_code ~~ '330-14%'::varchar(7)) AND (rx.product_code NOT IN (SELECT drm45_rollup.ROLLUP_WK_PRODUCT_CODE AS rollup_wk_product_code FROM WSMP_ADMIN.DRM45_ROLLUP GROUP BY drm45_rollup.ROLLUP_WK_PRODUCT_CODE)) AND (rx.week_bucket >= 1::numeric(18,0)) AND (rx.week_bucket <= 52::numeric(18,0)));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Nuvigil_Monthly_Rx AS
SELECT x.IMS_ID AS ims_id, x.PRODUCT_CODE AS product_code, p.product_name, x.MONTH_ENDING AS month_ending, sum(x.NRX_QTY) AS nrx_qty, sum(x.TRX_QTY) AS trx_qty, sum(x.UNNORMALIZED_NRX_CNT) AS nrx_cnt, sum(x.UNNORMALIZED_TRX_CNT) AS trx_cnt FROM WSMP_ADMIN.DW_PRESC_RX_M x, CUSTOMER.dim_product p WHERE ((x.MONTH_BUCKET >= 1::numeric(18,0)) AND (x.MONTH_BUCKET <= 24::numeric(18,0)) AND (x.PRODUCT_CODE = ANY (ARRAY['100N05'::varchar(6), '100N15'::varchar(6), '100N25'::varchar(6), '100101'::varchar(6), '100102'::varchar(6), '100120'::varchar(6)])) AND (x.PRODUCT_CODE = p.product_code)) GROUP BY x.IMS_ID, x.PRODUCT_CODE, p.product_name, x.MONTH_ENDING ORDER BY x.IMS_ID, x.PRODUCT_CODE, p.product_name, x.MONTH_ENDING;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_gcsf_dmd AS
SELECT coalesce(z.TO_TERRITORY_NUM_1, 'TOHZHZ99'::varchar(8)) AS TERRITORY_NUM, s.IMS_OUTLET_CODE, s.SUBCATEGORY_CODE, s.CATEGORY_CODE, s.IMS_PRODUCT_CODE, p.product_code AS PRODUCT_CODE, to_char(s.DATA_DATE, 'YYYYMM'::varchar(6)) AS MTH_YYYYMM, s.DOL_MTH01, s.DOL_MTH02, s.DOL_MTH03, s.DOL_MTH04, s.DOL_MTH05, s.DOL_MTH06, s.DOL_MTH07, s.DOL_MTH08, s.DOL_MTH09, s.DOL_MTH10, s.DOL_MTH11, s.DOL_MTH12, s.DOL_MTH13, s.DOL_MTH14, s.DOL_MTH15, s.DOL_MTH16, s.DOL_MTH17, s.DOL_MTH18, s.DOL_MTH19, s.DOL_MTH20, s.DOL_MTH21, s.DOL_MTH22, s.DOL_MTH23, s.DOL_MTH24, s.OUTLET_NAME, s.OUTLET_ADDRESS, s.OUTLET_CITY, s.OUTLET_STATE, s.OUTLET_ZIP FROM ((WSMP_ADMIN.STG_ONC_DMD_MONTHLY_DOLLARS s JOIN CUSTOMER.dim_product_ims_ddd p ON ((s.IMS_PRODUCT_CODE = p.ims_product_code))) LEFT JOIN WSMP_ADMIN.TFC_CURRENT_ZIP_ALIGNMENT z ON ((s.OUTLET_ZIP = z.ZIP))) WHERE (p.brand_name = ANY (ARRAY['NEUPOGEN'::varchar(8), 'GRANIX'::varchar(6), 'LEUKINE'::varchar(7)]));

CREATE  VIEW WSMP_ADMIN_ORA.v_ims_npi AS
SELECT x1.ID_NUM AS ims_id, x2.ID_NUM AS npi FROM (teva_ingestion.tvcmid_xref x1 JOIN teva_ingestion.tvcmid_xref x2 ON ((x1.TVCMID = x2.TVCMID))) WHERE ((x1.ID_TYPE = 'IMS_ID'::varchar(6)) AND (x2.ID_TYPE = 'NPI'::varchar(3))) UNION SELECT hcos_professional.IMS_ID AS ims_id, hcos_professional.NPI AS npi FROM WSMP_ADMIN.HCOS_PROFESSIONAL;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_create_mm_ram_to_rsm_test AS
SELECT x.MM_RAM, x.RSM FROM (SELECT a.MM_RAM, (substr(b.TERRITORY_NUM, 1, 6) || '00'::varchar(2)) AS RSM FROM (teva_ingestion.EXT_MM_RAM_TO_STATE a JOIN WSMP_ADMIN.KC_ZIP_TO_TERRITORY b ON ((a.STATE = b.STATE))) WHERE ((substr(b.TERRITORY_NUM, 5, 2) <> 'ZZ'::varchar(2)) AND (b.TERRITORY_NAME IS NOT NULL)) GROUP BY a.MM_RAM, (substr(b.TERRITORY_NUM, 1, 6) || '00'::varchar(2))) x ORDER BY x.MM_RAM, x.RSM LIMIT 1000000;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_agile_mktg_copay_redemptions AS
SELECT CASE mod(npi.tvcmid, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((npi.tvcmid)::int)::varchar ELSE rtrim((npi.tvcmid)::varchar, '0'::varchar(1)) END AS tvcmid, npi.ims_id, cd.VEEVA_ACCOUNT_ID AS veeva_account_id, p.ASI_PROGRAM_NUM AS asi_program_num, p.PROGRAM_DESC AS program_desc, cd.COPAY_CARD_NUM AS copay_card_num, coalesce(cd.ASI_PHYS_ZIP, cd.PHARMACY_ZIP) AS zip_code, to_char(cd.FILL_DATE, 'YYYY-MM-DD'::varchar(10)) AS fill_date, cd.BRAND_NAME AS brand_name, cd.DRUG_DESC AS drug_desc, (cd.QTY)::int AS qty FROM WSMP_ADMIN.TFC_ASI_COPAY_DETAIL_WKLY cd, WSMP_ADMIN.DIM_ASI_PROGRAM p, (SELECT tvcmid_hcp_demo.TVCMID AS tvcmid, tvcmid_hcp_demo.NPI AS npi, tvcmid_hcp_demo.IMS_ID AS ims_id FROM teva_ingestion.tvcmid_hcp_demo WHERE (tvcmid_hcp_demo.NPI IS NOT NULL) GROUP BY tvcmid_hcp_demo.TVCMID, tvcmid_hcp_demo.NPI, tvcmid_hcp_demo.IMS_ID) npi WHERE ((cd.IMS_ID = npi.ims_id) AND (cd.BRAND_NAME = 'NUVIGIL'::varchar(7)) AND (cd.PROGRAM_NUM = p.ASI_PROGRAM_NUM) AND (cd.FILL_DATE >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (cd.FILL_DATE <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (cd.REDEMPTION_TYPE = p.REDEMPTION_TYPE));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_Agile_Mktg_Mix_Voucher_Redemptions AS
SELECT CASE mod(v.tvcmid, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((v.tvcmid)::int)::varchar ELSE rtrim((v.tvcmid)::varchar, '0'::varchar(1)) END AS tvcmid, x.ims_id, x.veeva_account_id, v.asi_program_num, v.program_desc, v.voucher_num, v.zip_code, to_char(v.fill_date, 'YYYY-MM-DD'::varchar(10)) AS fill_date, v.product_name, v.drug_desc, CASE mod(v.qty, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((v.qty)::int)::varchar ELSE rtrim((v.qty)::varchar, '0'::varchar(1)) END AS qty FROM ((SELECT v.tvcmid, v.ims_id, v.asi_program_num, v.program_desc, v.voucher_num, v.zip_code, v.fill_date, v.product_name, v.drug_desc, v.qty FROM (SELECT npi.tvcmid, npi.ims_id, p.ASI_PROGRAM_NUM AS asi_program_num, p.PROGRAM_DESC AS program_desc, vd.VOUCHER_NUM AS voucher_num, coalesce(vd.PROVIDER_ZIP, vd.PHARMACY_ZIP) AS zip_code, vd.FILL_DATE AS fill_date, vd.PRODUCT_NAME AS product_name, vd.DRUG_DESC AS drug_desc, vd.QTY AS qty FROM ((WSMP_ADMIN.TFC_ASI_REDEMPTION_DETAIL_WKLY vd JOIN WSMP_ADMIN.DIM_ASI_PROGRAM p ON (((vd.PROGRAM_NUM = p.ASI_PROGRAM_NUM) AND (vd.REDEMPTION_TYPE = p.REDEMPTION_TYPE)))) LEFT JOIN (SELECT tvcmid_hcp_demo.TVCMID AS tvcmid, tvcmid_hcp_demo.NPI AS npi, tvcmid_hcp_demo.IMS_ID AS ims_id FROM teva_ingestion.tvcmid_hcp_demo WHERE (tvcmid_hcp_demo.NPI IS NOT NULL) GROUP BY tvcmid_hcp_demo.TVCMID, tvcmid_hcp_demo.NPI, tvcmid_hcp_demo.IMS_ID) npi ON ((vd.NPI = npi.npi))) WHERE ((vd.PRODUCT_NAME = 'NUVIGIL'::varchar(7)) AND (vd.FILL_DATE >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (vd.FILL_DATE <= last_day(add_months((statement_timestamp())::timestamp, (-1)))))) v) v LEFT JOIN (SELECT demo_combined.ims_id, demo_combined.veeva_account_id FROM WSMP_ADMIN.demo_combined WHERE ((demo_combined.sales_force_id = 'TC'::varchar(2)) AND (demo_combined.veeva_account_id IS NOT NULL)) GROUP BY demo_combined.ims_id, demo_combined.veeva_account_id) x ON ((v.ims_id = x.ims_id)));

CREATE  VIEW WSMP_ADMIN_ORA.v_tmp_ms AS
SELECT rx.ims_client_num, 2 AS ims_report_num, rx.zip_other, rx.ims_id, rx.specialty, rx.plan_id, rx.sales_category, rx.rx_type, rx.ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.middle_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, rx.bucket_count, (((rx.nrx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_001, (((rx.nrx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_002, (((rx.nrx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_003, (((rx.nrx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_004, (((rx.nrx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_005, (((rx.nrx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_006, (((rx.nrx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_007, (((rx.nrx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_008, (((rx.nrx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_009, (((rx.nrx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_010, (((rx.nrx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_011, (((rx.nrx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_012, (((rx.nrx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_013, (((rx.nrx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_014, (((rx.nrx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_015, (((rx.nrx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_016, (((rx.nrx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_017, (((rx.nrx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_018, (((rx.nrx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_019, (((rx.nrx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_020, (((rx.nrx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_021, (((rx.nrx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_022, (((rx.nrx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_023, (((rx.nrx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_024, (((rx.trx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_001, (((rx.trx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_002, (((rx.trx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_003, (((rx.trx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_004, (((rx.trx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_005, (((rx.trx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_006, (((rx.trx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_007, (((rx.trx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_008, (((rx.trx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_009, (((rx.trx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_010, (((rx.trx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_011, (((rx.trx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_012, (((rx.trx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_013, (((rx.trx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_014, (((rx.trx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_015, (((rx.trx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_016, (((rx.trx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_017, (((rx.trx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_018, (((rx.trx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_019, (((rx.trx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_020, (((rx.trx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_021, (((rx.trx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_022, (((rx.trx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_023, (((rx.trx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_024, 'stg_ims_mhj_qty_m'::varchar(17) AS row_source FROM ((teva_ingestion.EXT_IMS_MHJ_QTY_M rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_QTY) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) WHERE (p.MARKET_NAME = 'MULTIPLE SCLEROSIS'::varchar(18)) UNION ALL SELECT rx.ims_client_num, rx.ims_report_num, rx.sra_1, rx.sra_2, rx.sra_3, rx.sra_4, rx.sales_category, rx.rx_type, rx.ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.mid_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.filler_02, CASE WHEN (rx.payer_plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.payer_plan_name) || '"'::varchar(1)) ELSE rx.payer_plan_name END AS plan_name, rx.data_month, 48 AS bucket_count, rx.nrx_01, rx.nrx_02, rx.nrx_03, rx.nrx_04, rx.nrx_05, rx.nrx_06, rx.nrx_07, rx.nrx_08, rx.nrx_09, rx.nrx_10, rx.nrx_11, rx.nrx_12, rx.nrx_13, rx.nrx_14, rx.nrx_15, rx.nrx_16, rx.nrx_17, rx.nrx_18, rx.nrx_19, rx.nrx_20, rx.nrx_21, rx.nrx_22, rx.nrx_23, rx.nrx_24, rx.trx_01, rx.trx_02, rx.trx_03, rx.trx_04, rx.trx_05, rx.trx_06, rx.trx_07, rx.trx_08, rx.trx_09, rx.trx_10, rx.trx_11, rx.trx_12, rx.trx_13, rx.trx_14, rx.trx_15, rx.trx_16, rx.trx_17, rx.trx_18, rx.trx_19, rx.trx_20, rx.trx_21, rx.trx_22, rx.trx_23, rx.trx_24, 'stg_asi_ms_rx_cnt'::varchar(17) AS row_source FROM WSMP_ADMIN.stg_asi_ms_rx_cnt rx;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_asi_ims_obm_wake AS
SELECT rx.ims_client_num, 71 AS ims_report_num, rx.zip_other, rx.ims_id, rx.specialty, rx.plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.rx_type, btrim(to_char(rx.ims_product_group_num, '000000000'::varchar(9))) AS ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.middle_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, rx.bucket_count, (((rx.nrx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_001, (((rx.nrx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_002, (((rx.nrx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_003, (((rx.nrx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_004, (((rx.nrx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_005, (((rx.nrx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_006, (((rx.nrx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_007, (((rx.nrx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_008, (((rx.nrx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_009, (((rx.nrx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_010, (((rx.nrx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_011, (((rx.nrx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_012, (((rx.nrx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_013, (((rx.nrx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_014, (((rx.nrx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_015, (((rx.nrx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_016, (((rx.nrx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_017, (((rx.nrx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_018, (((rx.nrx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_019, (((rx.nrx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_020, (((rx.nrx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_021, (((rx.nrx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_022, (((rx.nrx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_023, (((rx.nrx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_024, (((rx.trx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_001, (((rx.trx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_002, (((rx.trx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_003, (((rx.trx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_004, (((rx.trx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_005, (((rx.trx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_006, (((rx.trx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_007, (((rx.trx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_008, (((rx.trx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_009, (((rx.trx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_010, (((rx.trx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_011, (((rx.trx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_012, (((rx.trx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_013, (((rx.trx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_014, (((rx.trx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_015, (((rx.trx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_016, (((rx.trx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_017, (((rx.trx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_018, (((rx.trx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_019, (((rx.trx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_020, (((rx.trx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_021, (((rx.trx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_022, (((rx.trx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_023, (((rx.trx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_024 FROM ((teva_ingestion.EXT_IMS_MHJ_QTY_M rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_QTY) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) WHERE (p.MARKET_NAME = 'WAKE'::varchar(4)) UNION ALL SELECT rx.ims_client_num, 71 AS ims_report_num, rx.zip_other, rx.ims_id, rx.specialty, rx.plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.rx_type, btrim(to_char(rx.ims_product_group_num, '000000000'::varchar(9))) AS ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.middle_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, rx.bucket_count, rx.nrx_001, rx.nrx_002, rx.nrx_003, rx.nrx_004, rx.nrx_005, rx.nrx_006, rx.nrx_007, rx.nrx_008, rx.nrx_009, rx.nrx_010, rx.nrx_011, rx.nrx_012, rx.nrx_013, rx.nrx_014, rx.nrx_015, rx.nrx_016, rx.nrx_017, rx.nrx_018, rx.nrx_019, rx.nrx_020, rx.nrx_021, rx.nrx_022, rx.nrx_023, rx.nrx_024, rx.trx_001, rx.trx_002, rx.trx_003, rx.trx_004, rx.trx_005, rx.trx_006, rx.trx_007, rx.trx_008, rx.trx_009, rx.trx_010, rx.trx_011, rx.trx_012, rx.trx_013, rx.trx_014, rx.trx_015, rx.trx_016, rx.trx_017, rx.trx_018, rx.trx_019, rx.trx_020, rx.trx_021, rx.trx_022, rx.trx_023, rx.trx_024 FROM ((teva_ingestion.EXT_IMS_MHJ_CNT_M rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_CNT) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) LEFT JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) WHERE ((p.MARKET_NAME = 'WAKE'::varchar(4)) AND (nf.PRODUCT_CODE IS NULL));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_asi_ims_obm_smr AS
SELECT rx.ims_client_num, 81 AS ims_report_num, rx.zip_other, rx.ims_id, rx.specialty, rx.plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.rx_type, btrim(to_char(rx.ims_product_group_num, '000000000'::varchar(9))) AS ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.middle_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, rx.bucket_count, (((rx.nrx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_001, (((rx.nrx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_002, (((rx.nrx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_003, (((rx.nrx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_004, (((rx.nrx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_005, (((rx.nrx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_006, (((rx.nrx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_007, (((rx.nrx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_008, (((rx.nrx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_009, (((rx.nrx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_010, (((rx.nrx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_011, (((rx.nrx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_012, (((rx.nrx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_013, (((rx.nrx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_014, (((rx.nrx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_015, (((rx.nrx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_016, (((rx.nrx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_017, (((rx.nrx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_018, (((rx.nrx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_019, (((rx.nrx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_020, (((rx.nrx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_021, (((rx.nrx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_022, (((rx.nrx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_023, (((rx.nrx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_024, (((rx.trx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_001, (((rx.trx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_002, (((rx.trx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_003, (((rx.trx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_004, (((rx.trx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_005, (((rx.trx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_006, (((rx.trx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_007, (((rx.trx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_008, (((rx.trx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_009, (((rx.trx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_010, (((rx.trx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_011, (((rx.trx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_012, (((rx.trx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_013, (((rx.trx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_014, (((rx.trx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_015, (((rx.trx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_016, (((rx.trx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_017, (((rx.trx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_018, (((rx.trx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_019, (((rx.trx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_020, (((rx.trx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_021, (((rx.trx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_022, (((rx.trx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_023, (((rx.trx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_024 FROM ((teva_ingestion.EXT_IMS_MHJ_QTY_M rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_QTY) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) WHERE (p.MARKET_NAME = 'SMR'::varchar(3)) UNION ALL SELECT rx.ims_client_num, 81 AS ims_report_num, rx.zip_other, rx.ims_id, rx.specialty, rx.plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.rx_type, btrim(to_char(rx.ims_product_group_num, '000000000'::varchar(9))) AS ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.middle_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, rx.bucket_count, rx.nrx_001, rx.nrx_002, rx.nrx_003, rx.nrx_004, rx.nrx_005, rx.nrx_006, rx.nrx_007, rx.nrx_008, rx.nrx_009, rx.nrx_010, rx.nrx_011, rx.nrx_012, rx.nrx_013, rx.nrx_014, rx.nrx_015, rx.nrx_016, rx.nrx_017, rx.nrx_018, rx.nrx_019, rx.nrx_020, rx.nrx_021, rx.nrx_022, rx.nrx_023, rx.nrx_024, rx.trx_001, rx.trx_002, rx.trx_003, rx.trx_004, rx.trx_005, rx.trx_006, rx.trx_007, rx.trx_008, rx.trx_009, rx.trx_010, rx.trx_011, rx.trx_012, rx.trx_013, rx.trx_014, rx.trx_015, rx.trx_016, rx.trx_017, rx.trx_018, rx.trx_019, rx.trx_020, rx.trx_021, rx.trx_022, rx.trx_023, rx.trx_024 FROM ((teva_ingestion.EXT_IMS_MHJ_CNT_M rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_CNT) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) LEFT JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) WHERE ((p.MARKET_NAME = 'SMR'::varchar(3)) AND (nf.PRODUCT_CODE IS NULL));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_asi_ims_obm_pd AS
(SELECT rx.ims_client_num, 6 AS ims_report_num, rx.zip_other, rx.ims_id, rx.specialty, rx.plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.rx_type, btrim(to_char(rx.ims_product_group_num, '000000000'::varchar(9))) AS ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.middle_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, rx.bucket_count, (((rx.nrx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_001, (((rx.nrx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_002, (((rx.nrx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_003, (((rx.nrx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_004, (((rx.nrx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_005, (((rx.nrx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_006, (((rx.nrx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_007, (((rx.nrx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_008, (((rx.nrx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_009, (((rx.nrx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_010, (((rx.nrx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_011, (((rx.nrx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_012, (((rx.nrx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_013, (((rx.nrx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_014, (((rx.nrx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_015, (((rx.nrx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_016, (((rx.nrx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_017, (((rx.nrx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_018, (((rx.nrx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_019, (((rx.nrx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_020, (((rx.nrx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_021, (((rx.nrx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_022, (((rx.nrx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_023, (((rx.nrx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_024, (((rx.trx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_001, (((rx.trx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_002, (((rx.trx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_003, (((rx.trx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_004, (((rx.trx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_005, (((rx.trx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_006, (((rx.trx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_007, (((rx.trx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_008, (((rx.trx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_009, (((rx.trx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_010, (((rx.trx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_011, (((rx.trx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_012, (((rx.trx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_013, (((rx.trx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_014, (((rx.trx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_015, (((rx.trx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_016, (((rx.trx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_017, (((rx.trx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_018, (((rx.trx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_019, (((rx.trx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_020, (((rx.trx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_021, (((rx.trx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_022, (((rx.trx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_023, (((rx.trx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_024 FROM ((teva_ingestion.EXT_IMS_MHJ_QTY_M rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_QTY) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) WHERE (p.MARKET_NAME = 'ANTI-PARKINSON'::varchar(14)) UNION ALL SELECT rx.ims_client_num, 6 AS ims_report_num, rx.zip_other, rx.ims_id, rx.specialty, rx.plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.rx_type, btrim(to_char(rx.ims_product_group_num, '000000000'::varchar(9))) AS ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.middle_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, rx.bucket_count, rx.nrx_001, rx.nrx_002, rx.nrx_003, rx.nrx_004, rx.nrx_005, rx.nrx_006, rx.nrx_007, rx.nrx_008, rx.nrx_009, rx.nrx_010, rx.nrx_011, rx.nrx_012, rx.nrx_013, rx.nrx_014, rx.nrx_015, rx.nrx_016, rx.nrx_017, rx.nrx_018, rx.nrx_019, rx.nrx_020, rx.nrx_021, rx.nrx_022, rx.nrx_023, rx.nrx_024, rx.trx_001, rx.trx_002, rx.trx_003, rx.trx_004, rx.trx_005, rx.trx_006, rx.trx_007, rx.trx_008, rx.trx_009, rx.trx_010, rx.trx_011, rx.trx_012, rx.trx_013, rx.trx_014, rx.trx_015, rx.trx_016, rx.trx_017, rx.trx_018, rx.trx_019, rx.trx_020, rx.trx_021, rx.trx_022, rx.trx_023, rx.trx_024 FROM ((teva_ingestion.EXT_IMS_MHJ_CNT_M rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_CNT) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) LEFT JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) WHERE ((p.MARKET_NAME = 'ANTI-PARKINSON'::varchar(14)) AND (nf.PRODUCT_CODE IS NULL))) UNION ALL SELECT rx.ims_client_num, 6 AS ims_report_num, rx.sra_1, rx.sra_2, rx.sra_3, rx.sra_4, to_char(rx.sales_category, '00'::varchar(2)) AS sales_category, rx.rx_type, to_char(rx.ims_product_group_num, '000000000'::varchar(9)) AS ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.mid_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.filler_02, CASE WHEN (rx.payer_plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.payer_plan_name) || '"'::varchar(1)) ELSE rx.payer_plan_name END AS plan_name, rx.data_month, 48 AS bucket_count, rx.nrx_01, rx.nrx_02, rx.nrx_03, rx.nrx_04, rx.nrx_05, rx.nrx_06, rx.nrx_07, rx.nrx_08, rx.nrx_09, rx.nrx_10, rx.nrx_11, rx.nrx_12, rx.nrx_13, rx.nrx_14, rx.nrx_15, rx.nrx_16, rx.nrx_17, rx.nrx_18, rx.nrx_19, rx.nrx_20, rx.nrx_21, rx.nrx_22, rx.nrx_23, rx.nrx_24, rx.trx_01, rx.trx_02, rx.trx_03, rx.trx_04, rx.trx_05, rx.trx_06, rx.trx_07, rx.trx_08, rx.trx_09, rx.trx_10, rx.trx_11, rx.trx_12, rx.trx_13, rx.trx_14, rx.trx_15, rx.trx_16, rx.trx_17, rx.trx_18, rx.trx_19, rx.trx_20, rx.trx_21, rx.trx_22, rx.trx_23, rx.trx_24 FROM WSMP_ADMIN.stg_asi_pd_rx_cnt rx;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_asi_ims_obm_ms AS
(SELECT rx.ims_client_num, 2 AS ims_report_num, rx.zip_other, rx.ims_id, rx.specialty, rx.plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.rx_type, btrim(to_char(rx.ims_product_group_num, '000000000'::varchar(9))) AS ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.middle_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, rx.bucket_count, (((rx.nrx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_001, (((rx.nrx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_002, (((rx.nrx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_003, (((rx.nrx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_004, (((rx.nrx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_005, (((rx.nrx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_006, (((rx.nrx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_007, (((rx.nrx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_008, (((rx.nrx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_009, (((rx.nrx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_010, (((rx.nrx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_011, (((rx.nrx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_012, (((rx.nrx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_013, (((rx.nrx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_014, (((rx.nrx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_015, (((rx.nrx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_016, (((rx.nrx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_017, (((rx.nrx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_018, (((rx.nrx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_019, (((rx.nrx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_020, (((rx.nrx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_021, (((rx.nrx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_022, (((rx.nrx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_023, (((rx.nrx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_024, (((rx.trx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_001, (((rx.trx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_002, (((rx.trx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_003, (((rx.trx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_004, (((rx.trx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_005, (((rx.trx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_006, (((rx.trx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_007, (((rx.trx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_008, (((rx.trx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_009, (((rx.trx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_010, (((rx.trx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_011, (((rx.trx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_012, (((rx.trx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_013, (((rx.trx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_014, (((rx.trx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_015, (((rx.trx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_016, (((rx.trx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_017, (((rx.trx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_018, (((rx.trx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_019, (((rx.trx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_020, (((rx.trx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_021, (((rx.trx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_022, (((rx.trx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_023, (((rx.trx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_024 FROM ((teva_ingestion.EXT_IMS_MHJ_QTY_M rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_QTY) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) WHERE (p.MARKET_NAME = 'MULTIPLE SCLEROSIS'::varchar(18)) UNION ALL SELECT rx.ims_client_num, 2 AS ims_report_num, rx.zip_other, rx.ims_id, rx.specialty, rx.plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.rx_type, btrim(to_char(rx.ims_product_group_num, '000000000'::varchar(9))) AS ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.middle_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, rx.bucket_count, rx.nrx_001, rx.nrx_002, rx.nrx_003, rx.nrx_004, rx.nrx_005, rx.nrx_006, rx.nrx_007, rx.nrx_008, rx.nrx_009, rx.nrx_010, rx.nrx_011, rx.nrx_012, rx.nrx_013, rx.nrx_014, rx.nrx_015, rx.nrx_016, rx.nrx_017, rx.nrx_018, rx.nrx_019, rx.nrx_020, rx.nrx_021, rx.nrx_022, rx.nrx_023, rx.nrx_024, rx.trx_001, rx.trx_002, rx.trx_003, rx.trx_004, rx.trx_005, rx.trx_006, rx.trx_007, rx.trx_008, rx.trx_009, rx.trx_010, rx.trx_011, rx.trx_012, rx.trx_013, rx.trx_014, rx.trx_015, rx.trx_016, rx.trx_017, rx.trx_018, rx.trx_019, rx.trx_020, rx.trx_021, rx.trx_022, rx.trx_023, rx.trx_024 FROM ((teva_ingestion.EXT_IMS_MHJ_CNT_M rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_CNT) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) LEFT JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) WHERE ((p.MARKET_NAME = 'MULTIPLE SCLEROSIS'::varchar(18)) AND (nf.PRODUCT_CODE IS NULL))) UNION ALL SELECT rx.ims_client_num, 2 AS ims_report_num, rx.sra_1, rx.sra_2, rx.sra_3, rx.sra_4, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.rx_type, btrim(to_char(rx.ims_product_group_num, '000000000'::varchar(9))) AS ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.mid_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.filler_02, CASE WHEN (rx.payer_plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.payer_plan_name) || '"'::varchar(1)) ELSE rx.payer_plan_name END AS plan_name, rx.data_month, 48 AS bucket_count, rx.nrx_01, rx.nrx_02, rx.nrx_03, rx.nrx_04, rx.nrx_05, rx.nrx_06, rx.nrx_07, rx.nrx_08, rx.nrx_09, rx.nrx_10, rx.nrx_11, rx.nrx_12, rx.nrx_13, rx.nrx_14, rx.nrx_15, rx.nrx_16, rx.nrx_17, rx.nrx_18, rx.nrx_19, rx.nrx_20, rx.nrx_21, rx.nrx_22, rx.nrx_23, rx.nrx_24, rx.trx_01, rx.trx_02, rx.trx_03, rx.trx_04, rx.trx_05, rx.trx_06, rx.trx_07, rx.trx_08, rx.trx_09, rx.trx_10, rx.trx_11, rx.trx_12, rx.trx_13, rx.trx_14, rx.trx_15, rx.trx_16, rx.trx_17, rx.trx_18, rx.trx_19, rx.trx_20, rx.trx_21, rx.trx_22, rx.trx_23, rx.trx_24 FROM WSMP_ADMIN.stg_asi_ms_rx_cnt rx;

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_asi_ims_obm_pain AS
SELECT rx.ims_client_num, 74 AS ims_report_num, rx.zip_other, rx.ims_id, rx.specialty, rx.plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.rx_type, btrim(to_char(rx.ims_product_group_num, '000000000'::varchar(9))) AS ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.middle_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, rx.bucket_count, (((rx.nrx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_001, (((rx.nrx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_002, (((rx.nrx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_003, (((rx.nrx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_004, (((rx.nrx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_005, (((rx.nrx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_006, (((rx.nrx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_007, (((rx.nrx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_008, (((rx.nrx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_009, (((rx.nrx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_010, (((rx.nrx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_011, (((rx.nrx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_012, (((rx.nrx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_013, (((rx.nrx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_014, (((rx.nrx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_015, (((rx.nrx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_016, (((rx.nrx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_017, (((rx.nrx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_018, (((rx.nrx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_019, (((rx.nrx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_020, (((rx.nrx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_021, (((rx.nrx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_022, (((rx.nrx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_023, (((rx.nrx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS nrx_024, (((rx.trx_001 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_001, (((rx.trx_002 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_002, (((rx.trx_003 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_003, (((rx.trx_004 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_004, (((rx.trx_005 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_005, (((rx.trx_006 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_006, (((rx.trx_007 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_007, (((rx.trx_008 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_008, (((rx.trx_009 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_009, (((rx.trx_010 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_010, (((rx.trx_011 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_011, (((rx.trx_012 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_012, (((rx.trx_013 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_013, (((rx.trx_014 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_014, (((rx.trx_015 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_015, (((rx.trx_016 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_016, (((rx.trx_017 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_017, (((rx.trx_018 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_018, (((rx.trx_019 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_019, (((rx.trx_020 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_020, (((rx.trx_021 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_021, (((rx.trx_022 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_022, (((rx.trx_023 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_023, (((rx.trx_024 / nf.DIVISOR) * nf.MULTIPLIER))::numeric(9,3) AS trx_024 FROM ((teva_ingestion.EXT_IMS_MHJ_QTY_M rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_QTY) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) WHERE (p.MARKET_NAME = 'PAIN'::varchar(4)) UNION ALL SELECT rx.ims_client_num, 74 AS ims_report_num, rx.zip_other, rx.ims_id, rx.specialty, rx.plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.rx_type, btrim(to_char(rx.ims_product_group_num, '000000000'::varchar(9))) AS ims_product_group_num, rx.filler_01, rx.me_num, rx.last_name, rx.first_name, rx.middle_name, CASE WHEN (rx.address ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.address) || '"'::varchar(1)) ELSE rx.address END AS address, rx.city, rx.state, rx.zip, rx.supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, rx.bucket_count, rx.nrx_001, rx.nrx_002, rx.nrx_003, rx.nrx_004, rx.nrx_005, rx.nrx_006, rx.nrx_007, rx.nrx_008, rx.nrx_009, rx.nrx_010, rx.nrx_011, rx.nrx_012, rx.nrx_013, rx.nrx_014, rx.nrx_015, rx.nrx_016, rx.nrx_017, rx.nrx_018, rx.nrx_019, rx.nrx_020, rx.nrx_021, rx.nrx_022, rx.nrx_023, rx.nrx_024, rx.trx_001, rx.trx_002, rx.trx_003, rx.trx_004, rx.trx_005, rx.trx_006, rx.trx_007, rx.trx_008, rx.trx_009, rx.trx_010, rx.trx_011, rx.trx_012, rx.trx_013, rx.trx_014, rx.trx_015, rx.trx_016, rx.trx_017, rx.trx_018, rx.trx_019, rx.trx_020, rx.trx_021, rx.trx_022, rx.trx_023, rx.trx_024 FROM ((teva_ingestion.EXT_IMS_MHJ_CNT_M rx JOIN WSMP_ADMIN.DRM45_PRODUCT_2014 p ON (((rx.ims_client_num = p.IMS_CLIENT_NUM_M) AND (rx.ims_report_num = p.IMS_REPORT_NUM_M_CNT) AND (rx.ims_product_group_num = p.IMS_PRODUCT_GROUP_NUM)))) LEFT JOIN WSMP_ADMIN.DIM_IMS_NORMALIZATION_FACTOR nf ON ((p.PRODUCT_CODE = nf.PRODUCT_CODE))) WHERE ((p.MARKET_NAME = 'PAIN'::varchar(4)) AND (nf.PRODUCT_CODE IS NULL));

CREATE  VIEW WSMP_ADMIN_ORA.v_ob_FTF_IMS_Monthly_Market_OBM_slow AS
((((SELECT xref.PLAN_NUM AS "PLAN ID", xref.PLAN_NAME AS "PLAN NAME", xref.PAYER_NUM AS "PAYER ID", xref.PAYER_NAME AS "PAYER NAME", drm.market_name AS "MARKET NAME", drm.product_name AS "PRODUCT NAME", rx.zip AS ZIP, to_char(rx.month_ending, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum(rx.trx_cnt) AS TRx, sum(rx.nrx_cnt) AS NRx FROM WSMP_ADMIN.dw_zip_plan_rx_ims rx, WSMP_ADMIN.TFC_IMS_PLAN_XREF xref, CUSTOMER.dim_product drm WHERE ((rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0)) AND (xref.PAYER_PLAN_NUM = rx.payer_plan_num) AND (rx.market_name = 'WAKE'::varchar(4)) AND (drm.product_code = rx.product_code) AND (drm.market_name = rx.market_name)) GROUP BY xref.PLAN_NUM, xref.PLAN_NAME, xref.PAYER_NUM, xref.PAYER_NAME, drm.market_name, drm.product_name, rx.zip, rx.month_ending UNION SELECT xref.PLAN_NUM AS "PLAN ID", xref.PLAN_NAME AS "PLAN NAME", xref.PAYER_NUM AS "PAYER ID", xref.PAYER_NAME AS "PAYER NAME", drm.market_name AS "MARKET NAME", drm.product_name AS "PRODUCT NAME", rx.zip AS ZIP, to_char(rx.month_ending, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum(rx.trx_cnt) AS TRx, sum(rx.nrx_cnt) AS NRx FROM WSMP_ADMIN.dw_zip_plan_rx_ims rx, WSMP_ADMIN.TFC_IMS_PLAN_XREF xref, CUSTOMER.dim_product drm WHERE ((rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0)) AND (xref.PAYER_PLAN_NUM = rx.payer_plan_num) AND (rx.market_name = 'ICS'::varchar(3)) AND (drm.product_code = rx.product_code) AND (drm.market_name = rx.market_name)) GROUP BY xref.PLAN_NUM, xref.PLAN_NAME, xref.PAYER_NUM, xref.PAYER_NAME, drm.market_name, drm.product_name, rx.zip, rx.month_ending) UNION SELECT xref.PLAN_NUM AS "PLAN ID", xref.PLAN_NAME AS "PLAN NAME", xref.PAYER_NUM AS "PAYER ID", xref.PAYER_NAME AS "PAYER NAME", drm.market_name AS "MARKET NAME", drm.product_name AS "PRODUCT NAME", rx.zip AS ZIP, to_char(rx.month_ending, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum(rx.trx_cnt) AS TRx, sum(rx.nrx_cnt) AS NRx FROM WSMP_ADMIN.dw_zip_plan_rx_ims rx, WSMP_ADMIN.TFC_IMS_PLAN_XREF xref, CUSTOMER.dim_product drm WHERE ((rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0)) AND (xref.PAYER_PLAN_NUM = rx.payer_plan_num) AND (rx.market_name = 'SABA'::varchar(4)) AND (drm.product_code = rx.product_code) AND (drm.market_name = rx.market_name)) GROUP BY xref.PLAN_NUM, xref.PLAN_NAME, xref.PAYER_NUM, xref.PAYER_NAME, drm.market_name, drm.product_name, rx.zip, rx.month_ending) UNION SELECT xref.PLAN_NUM AS "PLAN ID", xref.PLAN_NAME AS "PLAN NAME", xref.PAYER_NUM AS "PAYER ID", xref.PAYER_NAME AS "PAYER NAME", drm.market_name AS "MARKET NAME", drm.product_name AS "PRODUCT NAME", rx.zip AS ZIP, to_char(rx.month_ending, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum(rx.trx_cnt) AS TRx, sum(rx.nrx_cnt) AS NRx FROM WSMP_ADMIN.dw_zip_plan_rx_ims rx, WSMP_ADMIN.TFC_IMS_PLAN_XREF xref, CUSTOMER.dim_product drm WHERE ((rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0)) AND (xref.PAYER_PLAN_NUM = rx.payer_plan_num) AND (rx.market_name = 'BDP NASAL'::varchar(9)) AND (drm.product_code = rx.product_code) AND (drm.market_name = rx.market_name)) GROUP BY xref.PLAN_NUM, xref.PLAN_NAME, xref.PAYER_NUM, xref.PAYER_NAME, drm.market_name, drm.product_name, rx.zip, rx.month_ending) UNION SELECT xref.PLAN_NUM AS "PLAN ID", xref.PLAN_NAME AS "PLAN NAME", xref.PAYER_NUM AS "PAYER ID", xref.PAYER_NAME AS "PAYER NAME", drm.market_name AS "MARKET NAME", drm.product_name AS "PRODUCT NAME", rx.zip AS ZIP, to_char(rx.month_ending, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum(rx.trx_cnt) AS TRx, sum(rx.nrx_cnt) AS NRx FROM WSMP_ADMIN.dw_zip_plan_rx_ims rx, WSMP_ADMIN.TFC_IMS_PLAN_XREF xref, CUSTOMER.dim_product drm WHERE ((rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0)) AND (xref.PAYER_PLAN_NUM = rx.payer_plan_num) AND (rx.market_name = 'ANTI-PARKINSON'::varchar(14)) AND (drm.product_code = rx.product_code) AND (drm.market_name = rx.market_name)) GROUP BY xref.PLAN_NUM, xref.PLAN_NAME, xref.PAYER_NUM, xref.PAYER_NAME, drm.market_name, drm.product_name, rx.zip, rx.month_ending) UNION SELECT xref.PLAN_NUM AS "PLAN ID", xref.PLAN_NAME AS "PLAN NAME", xref.PAYER_NUM AS "PAYER ID", xref.PAYER_NAME AS "PAYER NAME", drm.market_name AS "MARKET NAME", drm.product_name AS "PRODUCT NAME", rx.zip AS ZIP, to_char(rx.month_ending, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum(rx.trx_cnt) AS TRx, sum(rx.nrx_cnt) AS NRx FROM WSMP_ADMIN.dw_zip_plan_rx_ims rx, WSMP_ADMIN.TFC_IMS_PLAN_XREF xref, CUSTOMER.dim_product drm WHERE ((rx.month_bucket >= 1::numeric(18,0)) AND (rx.month_bucket <= 24::numeric(18,0)) AND (xref.PAYER_PLAN_NUM = rx.payer_plan_num) AND (rx.market_name = 'MULTIPLE SCLEROSIS'::varchar(18)) AND (drm.product_code = rx.product_code) AND (drm.market_name = rx.market_name)) GROUP BY xref.PLAN_NUM, xref.PLAN_NAME, xref.PAYER_NUM, xref.PAYER_NAME, drm.market_name, drm.product_name, rx.zip, rx.month_ending;
==> failed_tevaQA12G_all_schemas_access_export.sql <==

update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.IMS ID ISSUE_AUSTEDO_10262020) where table_schema = 'sandbox' and table_name = 'IMS ID ISSUE_AUSTEDO_10262020';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.SYNEOS TERRs MISSING IMS IDs) where table_schema = 'sandbox' and table_name = 'SYNEOS TERRs MISSING IMS IDs';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.SYNEOS MISSING IMSIDs) where table_schema = 'sandbox' and table_name = 'SYNEOS MISSING IMSIDs';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.digital-affinity) where table_schema = 'sandbox' and table_name = 'digital-affinity';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.MA Missing STATE) where table_schema = 'sandbox' and table_name = 'MA Missing STATE';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.SYNEOS TARGET FILE) where table_schema = 'sandbox' and table_name = 'SYNEOS TARGET FILE';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.J_CHUNG_HCP DEA-2) where table_schema = 'sandbox' and table_name = 'J_CHUNG_HCP DEA-2';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.IQVIA OPTUM OUTLETS11032020) where table_schema = 'sandbox' and table_name = 'IQVIA OPTUM OUTLETS11032020';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.TN Mising HCPS for TN IC) where table_schema = 'sandbox' and table_name = 'TN Mising HCPS for TN IC';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.IMS ID ISSUES_AJOVY10262020) where table_schema = 'sandbox' and table_name = 'IMS ID ISSUES_AJOVY10262020';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.KNIPPER QVARs IDs1033) where table_schema = 'sandbox' and table_name = 'KNIPPER QVARs IDs1033';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.Returns_IQVIA ) where table_schema = 'sandbox' and table_name = 'Returns_IQVIA ';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.MediCal HCPs) where table_schema = 'sandbox' and table_name = 'MediCal HCPs';
update migration.source_schemas set audit_init_ts = now(),  audit_init_epoch =  (select max(epoch) from sandbox.QNASL_MRKT IMSID_ALL) where table_schema = 'sandbox' and table_name = 'QNASL_MRKT IMSID_ALL';
==> failed_tevaQA12G_all_schemas_ddl_export.sql <==

==> failed_tevaQA12G_archive_csv_export.sql <==

==> failed_tevaQA12G_archive_ddl_export.sql <==

==> failed_tevaQA12G_cleansed_csv_export.sql <==

==> failed_tevaQA12G_cleansed_ddl_export.sql <==

==> failed_tevaQA12G_customer_master_csv_export.sql <==

==> failed_tevaQA12G_customer_master_ddl_export.sql <==

==> failed_tevaQA12G_datamart_csv_export.sql <==
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.dynamic_segment) where table_schema = 'datamart' and table_name = 'dynamic_segment';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.sfa_reprints) where table_schema = 'datamart' and table_name = 'sfa_reprints';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.do_not_promote) where table_schema = 'datamart' and table_name = 'do_not_promote';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.drm45_product_list) where table_schema = 'datamart' and table_name = 'drm45_product_list';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.oncology_invoice_adjustments) where table_schema = 'datamart' and table_name = 'oncology_invoice_adjustments';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.time_off_territory) where table_schema = 'datamart' and table_name = 'time_off_territory';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.sfa_survey) where table_schema = 'datamart' and table_name = 'sfa_survey';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.event_expense) where table_schema = 'datamart' and table_name = 'event_expense';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.event_attendee_count) where table_schema = 'datamart' and table_name = 'event_attendee_count';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.xpd_demographics_antimigraine) where table_schema = 'datamart' and table_name = 'xpd_demographics_antimigraine';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.sfa_promotional_items) where table_schema = 'datamart' and table_name = 'sfa_promotional_items';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.touchpoint_presentation) where table_schema = 'datamart' and table_name = 'touchpoint_presentation';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.customer_hco_demographics) where table_schema = 'datamart' and table_name = 'customer_hco_demographics';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.cmop_rx) where table_schema = 'datamart' and table_name = 'cmop_rx';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.xpd_core_metrics_antimigraine) where table_schema = 'datamart' and table_name = 'xpd_core_metrics_antimigraine';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.specialty_pharmacy_shipment) where table_schema = 'datamart' and table_name = 'specialty_pharmacy_shipment';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.customer_address) where table_schema = 'datamart' and table_name = 'customer_address';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.factory_sales_852) where table_schema = 'datamart' and table_name = 'factory_sales_852';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.wholesaler_sales_867) where table_schema = 'datamart' and table_name = 'wholesaler_sales_867';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.prescriber_combined_demographics) where table_schema = 'datamart' and table_name = 'prescriber_combined_demographics';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.xpd_switch_details_respiratory) where table_schema = 'datamart' and table_name = 'xpd_switch_details_respiratory';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.xpd_restart_diff_details) where table_schema = 'datamart' and table_name = 'xpd_restart_diff_details';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.prescriber_rx_cnt_base_adhoc) where table_schema = 'datamart' and table_name = 'prescriber_rx_cnt_base_adhoc';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.leave_of_absence) where table_schema = 'datamart' and table_name = 'leave_of_absence';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.roster) where table_schema = 'datamart' and table_name = 'roster';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.oncology_sales_quotas) where table_schema = 'datamart' and table_name = 'oncology_sales_quotas';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.specialty_pharmacy_rx) where table_schema = 'datamart' and table_name = 'specialty_pharmacy_rx';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.product_basket) where table_schema = 'datamart' and table_name = 'product_basket';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.plantrak_workbook) where table_schema = 'datamart' and table_name = 'plantrak_workbook';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.rems_pharmacy) where table_schema = 'datamart' and table_name = 'rems_pharmacy';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.call_plan) where table_schema = 'datamart' and table_name = 'call_plan';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.ahm_participant) where table_schema = 'datamart' and table_name = 'ahm_participant';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.oncology_target_accounts) where table_schema = 'datamart' and table_name = 'oncology_target_accounts';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.sample_shipment) where table_schema = 'datamart' and table_name = 'sample_shipment';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.enrollment_summary) where table_schema = 'datamart' and table_name = 'enrollment_summary';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.current_alignment) where table_schema = 'datamart' and table_name = 'current_alignment';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.formulary_restrictions) where table_schema = 'datamart' and table_name = 'formulary_restrictions';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.oncology_adjusted_sales) where table_schema = 'datamart' and table_name = 'oncology_adjusted_sales';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.sfa_call_detail) where table_schema = 'datamart' and table_name = 'sfa_call_detail';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.alternate_alignments) where table_schema = 'datamart' and table_name = 'alternate_alignments';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.copay) where table_schema = 'datamart' and table_name = 'copay';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.tvcmid_xref) where table_schema = 'datamart' and table_name = 'tvcmid_xref';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.rx_deciles) where table_schema = 'datamart' and table_name = 'rx_deciles';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.prescriber_combined_demo_frozen) where table_schema = 'datamart' and table_name = 'prescriber_combined_demo_frozen';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.xpd_add_on_details) where table_schema = 'datamart' and table_name = 'xpd_add_on_details';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.prescriber_rx) where table_schema = 'datamart' and table_name = 'prescriber_rx';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.psr_enrollment_rej) where table_schema = 'datamart' and table_name = 'psr_enrollment_rej';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.oncology_fcr) where table_schema = 'datamart' and table_name = 'oncology_fcr';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.patient_months_count) where table_schema = 'datamart' and table_name = 'patient_months_count';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.ahm_interactions) where table_schema = 'datamart' and table_name = 'ahm_interactions';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.ahm_unnamedparticipant) where table_schema = 'datamart' and table_name = 'ahm_unnamedparticipant';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.rems_prescriber) where table_schema = 'datamart' and table_name = 'rems_prescriber';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.event) where table_schema = 'datamart' and table_name = 'event';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.dx_claims) where table_schema = 'datamart' and table_name = 'dx_claims';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.direct_sales) where table_schema = 'datamart' and table_name = 'direct_sales';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.ahm_expense) where table_schema = 'datamart' and table_name = 'ahm_expense';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.chargebacks) where table_schema = 'datamart' and table_name = 'chargebacks';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.dddmd_demographics) where table_schema = 'datamart' and table_name = 'dddmd_demographics';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.sfa_demographics) where table_schema = 'datamart' and table_name = 'sfa_demographics';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.touchpoint_call) where table_schema = 'datamart' and table_name = 'touchpoint_call';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.sfa_sample) where table_schema = 'datamart' and table_name = 'sfa_sample';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.sfa_affiliations) where table_schema = 'datamart' and table_name = 'sfa_affiliations';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.ddd_adhoc) where table_schema = 'datamart' and table_name = 'ddd_adhoc';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.ddd) where table_schema = 'datamart' and table_name = 'ddd';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.alternate_call_plans) where table_schema = 'datamart' and table_name = 'alternate_call_plans';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.xpd_demographics_respiratory) where table_schema = 'datamart' and table_name = 'xpd_demographics_respiratory';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.ddd_md) where table_schema = 'datamart' and table_name = 'ddd_md';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.customer_level_flags) where table_schema = 'datamart' and table_name = 'customer_level_flags';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.formulary) where table_schema = 'datamart' and table_name = 'formulary';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.customer_address_link) where table_schema = 'datamart' and table_name = 'customer_address_link';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.xpd_core_metrics_respiratory) where table_schema = 'datamart' and table_name = 'xpd_core_metrics_respiratory';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.fia_adhoc) where table_schema = 'datamart' and table_name = 'fia_adhoc';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.fia) where table_schema = 'datamart' and table_name = 'fia';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.prescriber_rx_adhoc) where table_schema = 'datamart' and table_name = 'prescriber_rx_adhoc';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.dx_code) where table_schema = 'datamart' and table_name = 'dx_code';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.direct_sales_demographics) where table_schema = 'datamart' and table_name = 'direct_sales_demographics';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.specialty_pharmacy_enrollment) where table_schema = 'datamart' and table_name = 'specialty_pharmacy_enrollment';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.sales_geography) where table_schema = 'datamart' and table_name = 'sales_geography';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.mm_ram_to_rsm) where table_schema = 'datamart' and table_name = 'mm_ram_to_rsm';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.titration_dosage) where table_schema = 'datamart' and table_name = 'titration_dosage';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.oncology_sales_adjustments) where table_schema = 'datamart' and table_name = 'oncology_sales_adjustments';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.territory_history) where table_schema = 'datamart' and table_name = 'territory_history';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.specialty_pharmacy_patient_txn) where table_schema = 'datamart' and table_name = 'specialty_pharmacy_patient_txn';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.chargeback_demographics) where table_schema = 'datamart' and table_name = 'chargeback_demographics';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.select_brand_sales) where table_schema = 'datamart' and table_name = 'select_brand_sales';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.dddmd_demographics_detail) where table_schema = 'datamart' and table_name = 'dddmd_demographics_detail';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.aggregated_activity) where table_schema = 'datamart' and table_name = 'aggregated_activity';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.event_attendee) where table_schema = 'datamart' and table_name = 'event_attendee';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.ims_outlet_master) where table_schema = 'datamart' and table_name = 'ims_outlet_master';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.veeva_sync) where table_schema = 'datamart' and table_name = 'veeva_sync';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.xpd_switch_details_antimigraine) where table_schema = 'datamart' and table_name = 'xpd_switch_details_antimigraine';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.psr_enrollment) where table_schema = 'datamart' and table_name = 'psr_enrollment';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.patient_response) where table_schema = 'datamart' and table_name = 'patient_response';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.digital_sales_aid_analysis) where table_schema = 'datamart' and table_name = 'digital_sales_aid_analysis';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.customer_hcp_demographics) where table_schema = 'datamart' and table_name = 'customer_hcp_demographics';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.affiliations) where table_schema = 'datamart' and table_name = 'affiliations';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.prescriber_rx_qty_base_adhoc) where table_schema = 'datamart' and table_name = 'prescriber_rx_qty_base_adhoc';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from datamart.prescriber_rx_qty_base) where table_schema = 'datamart' and table_name = 'prescriber_rx_qty_base';
==> failed_tevaQA12G_datamart_ddl_export.sql <==

==> failed_tevaQA12G_hcos_csv_export.sql <==

==> failed_tevaQA12G_hcos_ddl_export.sql <==

==> failed_tevaQA12G_integration_csv_export.sql <==

==> failed_tevaQA12G_integration_ddl_export.sql <==

==> failed_tevaQA12G_mdm_csv_export.sql <==

==> failed_tevaQA12G_mdm_ddl_export.sql <==

==> failed_tevaQA12G_metadata_csv_export.sql <==

==> failed_tevaQA12G_metadata_ddl_export.sql <==


CREATE  VIEW metadata.outbound_table_counts AS
SELECT A.outbound_table, A.counts FROM ((((((((((((((((((((((((SELECT 'datamart.v_ob_asi_market_access'::varchar(31) AS outbound_table, count(*) AS counts FROM datamart.v_ob_asi_market_access GROUP BY 'datamart.v_ob_asi_market_access'::varchar(31) UNION ALL SELECT 'datamart.v_ob_asi_rems_extract'::varchar(30) AS outbound_table, count(*) AS counts FROM datamart.v_ob_asi_rems_extract GROUP BY 'datamart.v_ob_asi_rems_extract'::varchar(30)) UNION ALL SELECT 'datamart.v_ob_asi_rems_programs'::varchar(31) AS outbound_table, count(*) AS counts FROM datamart.v_ob_asi_rems_programs GROUP BY 'datamart.v_ob_asi_rems_programs'::varchar(31)) UNION ALL SELECT 'datamart.v_ob_asi_rx_by_market'::varchar(30) AS outbound_table, count(*) AS counts FROM datamart.v_ob_asi_rx_by_market GROUP BY 'datamart.v_ob_asi_rx_by_market'::varchar(30)) UNION ALL SELECT 'datamart.v_ob_asi_survey_data'::varchar(29) AS outbound_table, count(*) AS counts FROM datamart.v_ob_asi_survey_data GROUP BY 'datamart.v_ob_asi_survey_data'::varchar(29)) UNION ALL SELECT 'datamart.v_ob_axiom_market'::varchar(26) AS outbound_table, count(*) AS counts FROM datamart.v_ob_axiom_market GROUP BY 'datamart.v_ob_axiom_market'::varchar(26)) UNION ALL SELECT 'datamart.v_ob_axiom_product_totals'::varchar(34) AS outbound_table, count(*) AS counts FROM datamart.v_ob_axiom_product_totals GROUP BY 'datamart.v_ob_axiom_product_totals'::varchar(34)) UNION ALL SELECT 'datamart.v_ob_kc_copay_voucher_program'::varchar(38) AS outbound_table, count(*) AS counts FROM datamart.v_ob_kc_copay_voucher_program GROUP BY 'datamart.v_ob_kc_copay_voucher_program'::varchar(38)) UNION ALL SELECT 'datamart.v_ob_kc_copay_voucher_redemption'::varchar(41) AS outbound_table, count(*) AS counts FROM datamart.v_ob_kc_copay_voucher_redemption GROUP BY 'datamart.v_ob_kc_copay_voucher_redemption'::varchar(41)) UNION ALL SELECT 'datamart.v_ob_touchpoint_call'::varchar(29) AS outbound_table, count(*) AS counts FROM datamart.v_ob_touchpoint_call GROUP BY 'datamart.v_ob_touchpoint_call'::varchar(29)) UNION ALL SELECT 'datamart.v_ob_zs_agile_copay_redemptions'::varchar(40) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_agile_copay_redemptions GROUP BY 'datamart.v_ob_zs_agile_copay_redemptions'::varchar(40)) UNION ALL SELECT 'datamart.v_ob_zs_agile_copay_voucher_drops'::varchar(42) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_agile_copay_voucher_drops GROUP BY 'datamart.v_ob_zs_agile_copay_voucher_drops'::varchar(42)) UNION ALL SELECT 'datamart.v_ob_zs_agile_demographics'::varchar(35) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_agile_demographics GROUP BY 'datamart.v_ob_zs_agile_demographics'::varchar(35)) UNION ALL SELECT 'datamart.v_ob_zs_agile_details'::varchar(30) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_agile_details GROUP BY 'datamart.v_ob_zs_agile_details'::varchar(30)) UNION ALL SELECT 'datamart.v_ob_zs_agile_rx'::varchar(25) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_agile_rx GROUP BY 'datamart.v_ob_zs_agile_rx'::varchar(25)) UNION ALL SELECT 'datamart.v_ob_zs_agile_samples'::varchar(30) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_agile_samples GROUP BY 'datamart.v_ob_zs_agile_samples'::varchar(30)) UNION ALL SELECT 'datamart.v_ob_zs_agile_sp_attendees'::varchar(35) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_agile_sp_attendees GROUP BY 'datamart.v_ob_zs_agile_sp_attendees'::varchar(35)) UNION ALL SELECT 'datamart.v_ob_zs_agile_sp_programs'::varchar(34) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_agile_sp_programs GROUP BY 'datamart.v_ob_zs_agile_sp_programs'::varchar(34)) UNION ALL SELECT 'datamart.v_ob_zs_agile_voucher_redemptions'::varchar(42) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_agile_voucher_redemptions GROUP BY 'datamart.v_ob_zs_agile_voucher_redemptions'::varchar(42)) UNION ALL SELECT 'datamart.v_ob_zs_ic_ims_zip_list'::varchar(32) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_ic_ims_zip_list GROUP BY 'datamart.v_ob_zs_ic_ims_zip_list'::varchar(32)) UNION ALL SELECT 'datamart.v_ob_zs_ic_medicaid_plan_groups'::varchar(40) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_ic_medicaid_plan_groups GROUP BY 'datamart.v_ob_zs_ic_medicaid_plan_groups'::varchar(40)) UNION ALL SELECT 'datamart.v_ob_zs_ic_mop'::varchar(23) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_ic_mop GROUP BY 'datamart.v_ob_zs_ic_mop'::varchar(23)) UNION ALL SELECT 'datamart.v_ob_zs_tr_calls_obw'::varchar(29) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_tr_calls_obw GROUP BY 'datamart.v_ob_zs_tr_calls_obw'::varchar(29)) UNION ALL SELECT 'datamart.v_ob_zs_tr_demographics'::varchar(32) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_tr_demographics GROUP BY 'datamart.v_ob_zs_tr_demographics'::varchar(32)) UNION ALL SELECT 'datamart.v_ob_zs_tr_launch_analytics'::varchar(36) AS outbound_table, count(*) AS counts FROM datamart.v_ob_zs_tr_launch_analytics GROUP BY 'datamart.v_ob_zs_tr_launch_analytics'::varchar(36)) A;

CREATE  VIEW metadata.reference_table_counts AS
SELECT A.reference_table, A.counts FROM ((((((((((((((((((((((((SELECT 'reference.alignment_active_dates'::varchar(32) AS reference_table, count(*) AS counts FROM reference.alignment_active_dates GROUP BY 'reference.alignment_active_dates'::varchar(32) UNION ALL SELECT 'reference.bag'::varchar(13) AS reference_table, count(*) AS counts FROM reference.bag GROUP BY 'reference.bag'::varchar(13)) UNION ALL SELECT 'reference.bag_product'::varchar(21) AS reference_table, count(*) AS counts FROM reference.bag_product GROUP BY 'reference.bag_product'::varchar(21)) UNION ALL SELECT 'reference.bag_territory'::varchar(23) AS reference_table, count(*) AS counts FROM reference.bag_territory GROUP BY 'reference.bag_territory'::varchar(23)) UNION ALL SELECT 'reference.calendar'::varchar(18) AS reference_table, count(*) AS counts FROM reference.calendar GROUP BY 'reference.calendar'::varchar(18)) UNION ALL SELECT 'reference.call_plan_active_dates'::varchar(32) AS reference_table, count(*) AS counts FROM reference.call_plan_active_dates GROUP BY 'reference.call_plan_active_dates'::varchar(32)) UNION ALL SELECT 'reference.caremark_md_id_to_tvcmid'::varchar(34) AS reference_table, count(*) AS counts FROM reference.caremark_md_id_to_tvcmid GROUP BY 'reference.caremark_md_id_to_tvcmid'::varchar(34)) UNION ALL SELECT 'reference.city_state_zip'::varchar(24) AS reference_table, count(*) AS counts FROM reference.city_state_zip GROUP BY 'reference.city_state_zip'::varchar(24)) UNION ALL SELECT 'reference.comp_alignment_exceptions'::varchar(35) AS reference_table, count(*) AS counts FROM reference.comp_alignment_exceptions GROUP BY 'reference.comp_alignment_exceptions'::varchar(35)) UNION ALL SELECT 'reference.copay_voucher_program'::varchar(31) AS reference_table, count(*) AS counts FROM reference.copay_voucher_program GROUP BY 'reference.copay_voucher_program'::varchar(31)) UNION ALL SELECT 'reference.ddd_445_calendar'::varchar(26) AS reference_table, count(*) AS counts FROM reference.ddd_445_calendar GROUP BY 'reference.ddd_445_calendar'::varchar(26)) UNION ALL SELECT 'reference.ddd_category'::varchar(22) AS reference_table, count(*) AS counts FROM reference.ddd_category GROUP BY 'reference.ddd_category'::varchar(22)) UNION ALL SELECT 'reference.ddd_subcategory'::varchar(25) AS reference_table, count(*) AS counts FROM reference.ddd_subcategory GROUP BY 'reference.ddd_subcategory'::varchar(25)) UNION ALL SELECT 'reference.ims_model_payment_method'::varchar(34) AS reference_table, count(*) AS counts FROM reference.ims_model_payment_method GROUP BY 'reference.ims_model_payment_method'::varchar(34)) UNION ALL SELECT 'reference.invoice_adjustments'::varchar(29) AS reference_table, count(*) AS counts FROM reference.invoice_adjustments GROUP BY 'reference.invoice_adjustments'::varchar(29)) UNION ALL SELECT 'reference.market_sales_force'::varchar(28) AS reference_table, count(*) AS counts FROM reference.market_sales_force GROUP BY 'reference.market_sales_force'::varchar(28)) UNION ALL SELECT 'reference.oncology_account_id_867_xref'::varchar(38) AS reference_table, count(*) AS counts FROM reference.oncology_account_id_867_xref GROUP BY 'reference.oncology_account_id_867_xref'::varchar(38)) UNION ALL SELECT 'reference.oncology_account_id_ims_xref'::varchar(38) AS reference_table, count(*) AS counts FROM reference.oncology_account_id_ims_xref GROUP BY 'reference.oncology_account_id_ims_xref'::varchar(38)) UNION ALL SELECT 'reference.oncology_excluded_outlets'::varchar(35) AS reference_table, count(*) AS counts FROM reference.oncology_excluded_outlets GROUP BY 'reference.oncology_excluded_outlets'::varchar(35)) UNION ALL SELECT 'reference.payer_parent'::varchar(22) AS reference_table, count(*) AS counts FROM reference.payer_parent GROUP BY 'reference.payer_parent'::varchar(22)) UNION ALL SELECT 'reference.pbm_parent'::varchar(20) AS reference_table, count(*) AS counts FROM reference.pbm_parent GROUP BY 'reference.pbm_parent'::varchar(20)) UNION ALL SELECT 'reference.specialty_xref'::varchar(24) AS reference_table, count(*) AS counts FROM reference.specialty_xref GROUP BY 'reference.specialty_xref'::varchar(24)) UNION ALL SELECT 'reference.unreported_sales'::varchar(26) AS reference_table, count(*) AS counts FROM reference.unreported_sales GROUP BY 'reference.unreported_sales'::varchar(26)) UNION ALL SELECT 'reference.us_states'::varchar(19) AS reference_table, count(*) AS counts FROM reference.us_states GROUP BY 'reference.us_states'::varchar(19)) UNION ALL SELECT 'reference.zipcode_timezone'::varchar(26) AS reference_table, count(*) AS counts FROM reference.zipcode_timezone GROUP BY 'reference.zipcode_timezone'::varchar(26)) A;

CREATE  VIEW metadata.cleansed_table_counts_by_file_id AS
SELECT A.cleansed_table, A.file_id, A.counts FROM (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((SELECT 'cleansed.kc_hr_addresses'::varchar(24) AS cleansed_table, kc_hr_addresses.file_id, count(*) AS counts FROM cleansed.kc_hr_addresses GROUP BY 'cleansed.kc_hr_addresses'::varchar(24), kc_hr_addresses.file_id UNION ALL SELECT 'cleansed.kc_hr_associates'::varchar(25) AS cleansed_table, kc_hr_associates.file_id, count(*) AS counts FROM cleansed.kc_hr_associates GROUP BY 'cleansed.kc_hr_associates'::varchar(25), kc_hr_associates.file_id) UNION ALL SELECT 'cleansed.kc_hr_aud_associates'::varchar(29) AS cleansed_table, kc_hr_aud_associates.file_id, count(*) AS counts FROM cleansed.kc_hr_aud_associates GROUP BY 'cleansed.kc_hr_aud_associates'::varchar(29), kc_hr_aud_associates.file_id) UNION ALL SELECT 'customer_master.alternate_identifier'::varchar(36) AS cleansed_table, alternate_identifier.file_id, count(*) AS counts FROM customer_master.alternate_identifier GROUP BY 'customer_master.alternate_identifier'::varchar(36), alternate_identifier.file_id) UNION ALL SELECT 'customer_master.raw_dea'::varchar(23) AS cleansed_table, raw_dea.file_id, count(*) AS counts FROM customer_master.raw_dea GROUP BY 'customer_master.raw_dea'::varchar(23), raw_dea.file_id) UNION ALL SELECT 'customer_master.hcp_detail'::varchar(26) AS cleansed_table, hcp_detail.file_id, count(*) AS counts FROM customer_master.hcp_detail GROUP BY 'customer_master.hcp_detail'::varchar(26), hcp_detail.file_id) UNION ALL SELECT 'customer_master.ims_flag'::varchar(24) AS cleansed_table, ims_flag.file_id, count(*) AS counts FROM customer_master.ims_flag GROUP BY 'customer_master.ims_flag'::varchar(24), ims_flag.file_id) UNION ALL SELECT 'customer_master.teva_flag'::varchar(25) AS cleansed_table, teva_flag.file_id, count(*) AS counts FROM customer_master.teva_flag GROUP BY 'customer_master.teva_flag'::varchar(25), teva_flag.file_id) UNION ALL SELECT 'customer_master.sample_eligibility'::varchar(34) AS cleansed_table, sample_eligibility.file_id, count(*) AS counts FROM customer_master.sample_eligibility GROUP BY 'customer_master.sample_eligibility'::varchar(34), sample_eligibility.file_id) UNION ALL SELECT 'cleansed.ahm_event'::varchar(18) AS cleansed_table, ahm_event.file_id, count(*) AS counts FROM cleansed.ahm_event GROUP BY 'cleansed.ahm_event'::varchar(18), ahm_event.file_id) UNION ALL SELECT 'cleansed.ahm_event_attendee'::varchar(27) AS cleansed_table, ahm_event_attendee.file_id, count(*) AS counts FROM cleansed.ahm_event_attendee GROUP BY 'cleansed.ahm_event_attendee'::varchar(27), ahm_event_attendee.file_id) UNION ALL SELECT 'cleansed.ahm_event_count'::varchar(24) AS cleansed_table, ahm_event_count.file_id, count(*) AS counts FROM cleansed.ahm_event_count GROUP BY 'cleansed.ahm_event_count'::varchar(24), ahm_event_count.file_id) UNION ALL SELECT 'cleansed.ahm_event_expense'::varchar(26) AS cleansed_table, ahm_event_expense.file_id, count(*) AS counts FROM cleansed.ahm_event_expense GROUP BY 'cleansed.ahm_event_expense'::varchar(26), ahm_event_expense.file_id) UNION ALL SELECT 'cleansed.ahm_event_host'::varchar(23) AS cleansed_table, ahm_event_host.file_id, count(*) AS counts FROM cleansed.ahm_event_host GROUP BY 'cleansed.ahm_event_host'::varchar(23), ahm_event_host.file_id) UNION ALL SELECT 'cleansed.ahm_event_product'::varchar(26) AS cleansed_table, ahm_event_product.file_id, count(*) AS counts FROM cleansed.ahm_event_product GROUP BY 'cleansed.ahm_event_product'::varchar(26), ahm_event_product.file_id) UNION ALL SELECT 'cleansed.ahm_event_speaker'::varchar(26) AS cleansed_table, ahm_event_speaker.file_id, count(*) AS counts FROM cleansed.ahm_event_speaker GROUP BY 'cleansed.ahm_event_speaker'::varchar(26), ahm_event_speaker.file_id) UNION ALL SELECT 'cleansed.ahm_organization'::varchar(25) AS cleansed_table, ahm_organization.file_id, count(*) AS counts FROM cleansed.ahm_organization GROUP BY 'cleansed.ahm_organization'::varchar(25), ahm_organization.file_id) UNION ALL SELECT 'cleansed.ahm_speaker_contract'::varchar(29) AS cleansed_table, ahm_speaker_contract.file_id, count(*) AS counts FROM cleansed.ahm_speaker_contract GROUP BY 'cleansed.ahm_speaker_contract'::varchar(29), ahm_speaker_contract.file_id) UNION ALL SELECT 'cleansed.ahm_speaker_license'::varchar(28) AS cleansed_table, ahm_speaker_license.file_id, count(*) AS counts FROM cleansed.ahm_speaker_license GROUP BY 'cleansed.ahm_speaker_license'::varchar(28), ahm_speaker_license.file_id) UNION ALL SELECT 'cleansed.ahm_speaker_profile'::varchar(28) AS cleansed_table, ahm_speaker_profile.file_id, count(*) AS counts FROM cleansed.ahm_speaker_profile GROUP BY 'cleansed.ahm_speaker_profile'::varchar(28), ahm_speaker_profile.file_id) UNION ALL SELECT 'cleansed.ahm_speaker_training'::varchar(29) AS cleansed_table, ahm_speaker_training.file_id, count(*) AS counts FROM cleansed.ahm_speaker_training GROUP BY 'cleansed.ahm_speaker_training'::varchar(29), ahm_speaker_training.file_id) UNION ALL SELECT 'cleansed.ahm_topic_product'::varchar(26) AS cleansed_table, ahm_topic_product.file_id, count(*) AS counts FROM cleansed.ahm_topic_product GROUP BY 'cleansed.ahm_topic_product'::varchar(26), ahm_topic_product.file_id) UNION ALL SELECT 'cleansed.anda_sales'::varchar(19) AS cleansed_table, anda_sales.file_id, count(*) AS counts FROM cleansed.anda_sales GROUP BY 'cleansed.anda_sales'::varchar(19), anda_sales.file_id) UNION ALL SELECT 'cleansed.alphascrip_weekly_copay_detail'::varchar(39) AS cleansed_table, alphascrip_weekly_copay_detail.file_id, count(*) AS counts FROM cleansed.alphascrip_weekly_copay_detail GROUP BY 'cleansed.alphascrip_weekly_copay_detail'::varchar(39), alphascrip_weekly_copay_detail.file_id) UNION ALL SELECT 'cleansed.alphascrip_weekly_copay_cgd'::varchar(36) AS cleansed_table, alphascrip_weekly_copay_cgd.file_id, count(*) AS counts FROM cleansed.alphascrip_weekly_copay_cgd GROUP BY 'cleansed.alphascrip_weekly_copay_cgd'::varchar(36), alphascrip_weekly_copay_cgd.file_id) UNION ALL SELECT 'cleansed.alphascrip_weekly_copay_detail_2'::varchar(41) AS cleansed_table, alphascrip_weekly_copay_detail_2.file_id, count(*) AS counts FROM cleansed.alphascrip_weekly_copay_detail_2 GROUP BY 'cleansed.alphascrip_weekly_copay_detail_2'::varchar(41), alphascrip_weekly_copay_detail_2.file_id) UNION ALL SELECT 'cleansed.alphascrip_weekly_copay_detail_3'::varchar(41) AS cleansed_table, alphascrip_weekly_copay_detail_3.file_id, count(*) AS counts FROM cleansed.alphascrip_weekly_copay_detail_3 GROUP BY 'cleansed.alphascrip_weekly_copay_detail_3'::varchar(41), alphascrip_weekly_copay_detail_3.file_id) UNION ALL SELECT 'cleansed.alphascrip_weekly_copay_pskw'::varchar(37) AS cleansed_table, alphascrip_weekly_copay_pskw.file_id, count(*) AS counts FROM cleansed.alphascrip_weekly_copay_pskw GROUP BY 'cleansed.alphascrip_weekly_copay_pskw'::varchar(37), alphascrip_weekly_copay_pskw.file_id) UNION ALL SELECT 'cleansed.alphascrip_copay_redemptions'::varchar(37) AS cleansed_table, alphascrip_copay_redemptions.file_id, count(*) AS counts FROM cleansed.alphascrip_copay_redemptions GROUP BY 'cleansed.alphascrip_copay_redemptions'::varchar(37), alphascrip_copay_redemptions.file_id) UNION ALL SELECT 'cleansed.alphascrip_redemptions'::varchar(31) AS cleansed_table, alphascrip_redemptions.file_id, count(*) AS counts FROM cleansed.alphascrip_redemptions GROUP BY 'cleansed.alphascrip_redemptions'::varchar(31), alphascrip_redemptions.file_id) UNION ALL SELECT 'cleansed.alphascrip_weekly_voucher_detail_3'::varchar(43) AS cleansed_table, alphascrip_weekly_voucher_detail_3.file_id, count(*) AS counts FROM cleansed.alphascrip_weekly_voucher_detail_3 GROUP BY 'cleansed.alphascrip_weekly_voucher_detail_3'::varchar(43), alphascrip_weekly_voucher_detail_3.file_id) UNION ALL SELECT 'cleansed.alphascrip_weekly_voucher_detail_2'::varchar(43) AS cleansed_table, alphascrip_weekly_voucher_detail_2.file_id, count(*) AS counts FROM cleansed.alphascrip_weekly_voucher_detail_2 GROUP BY 'cleansed.alphascrip_weekly_voucher_detail_2'::varchar(43), alphascrip_weekly_voucher_detail_2.file_id) UNION ALL SELECT 'cleansed.kc_sales_call_goals'::varchar(28) AS cleansed_table, kc_sales_call_goals.file_id, count(*) AS counts FROM cleansed.kc_sales_call_goals GROUP BY 'cleansed.kc_sales_call_goals'::varchar(28), kc_sales_call_goals.file_id) UNION ALL SELECT 'cleansed.caremark_rx_aob'::varchar(24) AS cleansed_table, caremark_rx_aob.file_id, count(*) AS counts FROM cleansed.caremark_rx_aob GROUP BY 'cleansed.caremark_rx_aob'::varchar(24), caremark_rx_aob.file_id) UNION ALL SELECT 'cleansed.caremark_rx_medicare'::varchar(29) AS cleansed_table, caremark_rx_medicare.file_id, count(*) AS counts FROM cleansed.caremark_rx_medicare GROUP BY 'cleansed.caremark_rx_medicare'::varchar(29), caremark_rx_medicare.file_id) UNION ALL SELECT 'veeva.dsa_slide'::varchar(15) AS cleansed_table, dsa_slide.file_id, count(*) AS counts FROM veeva.dsa_slide GROUP BY 'veeva.dsa_slide'::varchar(15), dsa_slide.file_id) UNION ALL SELECT 'veeva.dsa_presentation'::varchar(22) AS cleansed_table, dsa_presentation.file_id, count(*) AS counts FROM veeva.dsa_presentation GROUP BY 'veeva.dsa_presentation'::varchar(22), dsa_presentation.file_id) UNION ALL SELECT 'cleansed.clozapine_unit_ap'::varchar(26) AS cleansed_table, clozapine_unit_ap.file_id, count(*) AS counts FROM cleansed.clozapine_unit_ap GROUP BY 'cleansed.clozapine_unit_ap'::varchar(26), clozapine_unit_ap.file_id) UNION ALL SELECT 'cleansed.cmop_rx'::varchar(16) AS cleansed_table, cmop_rx.file_id, count(*) AS counts FROM cleansed.cmop_rx GROUP BY 'cleansed.cmop_rx'::varchar(16), cmop_rx.file_id) UNION ALL SELECT 'customer_master.customer_flags'::varchar(30) AS cleansed_table, customer_flags.file_id, count(*) AS counts FROM customer_master.customer_flags GROUP BY 'customer_master.customer_flags'::varchar(30), customer_flags.file_id) UNION ALL SELECT 'cleansed.ims_ddd_dod_qty'::varchar(24) AS cleansed_table, ims_ddd_dod_qty.file_id, count(*) AS counts FROM cleansed.ims_ddd_dod_qty GROUP BY 'cleansed.ims_ddd_dod_qty'::varchar(24), ims_ddd_dod_qty.file_id) UNION ALL SELECT 'cleansed.ims_ddd_dod_dollars_ms'::varchar(31) AS cleansed_table, ims_ddd_dod_dollars_ms.file_id, count(*) AS counts FROM cleansed.ims_ddd_dod_dollars_ms GROUP BY 'cleansed.ims_ddd_dod_dollars_ms'::varchar(31), ims_ddd_dod_dollars_ms.file_id) UNION ALL SELECT 'cleansed.ims_ddd_dod_dollars_pd'::varchar(31) AS cleansed_table, ims_ddd_dod_dollars_pd.file_id, count(*) AS counts FROM cleansed.ims_ddd_dod_dollars_pd GROUP BY 'cleansed.ims_ddd_dod_dollars_pd'::varchar(31), ims_ddd_dod_dollars_pd.file_id) UNION ALL SELECT 'cleansed.diplomat_enrollment'::varchar(28) AS cleansed_table, diplomat_enrollment.file_id, count(*) AS counts FROM cleansed.diplomat_enrollment GROUP BY 'cleansed.diplomat_enrollment'::varchar(28), diplomat_enrollment.file_id) UNION ALL SELECT 'cleansed.diplomat_rx'::varchar(20) AS cleansed_table, diplomat_rx.file_id, count(*) AS counts FROM cleansed.diplomat_rx GROUP BY 'cleansed.diplomat_rx'::varchar(20), diplomat_rx.file_id) UNION ALL SELECT 'cleansed.ims_outlet_master'::varchar(26) AS cleansed_table, ims_outlet_master.file_id, count(*) AS counts FROM cleansed.ims_outlet_master GROUP BY 'cleansed.ims_outlet_master'::varchar(26), ims_outlet_master.file_id) UNION ALL SELECT 'cleansed.valuecentric_852'::varchar(25) AS cleansed_table, valuecentric_852.file_id, count(*) AS counts FROM cleansed.valuecentric_852 GROUP BY 'cleansed.valuecentric_852'::varchar(25), valuecentric_852.file_id) UNION ALL SELECT 'cleansed.ftf_accounts'::varchar(21) AS cleansed_table, ftf_accounts.file_id, count(*) AS counts FROM cleansed.ftf_accounts GROUP BY 'cleansed.ftf_accounts'::varchar(21), ftf_accounts.file_id) UNION ALL SELECT 'cleansed.ftf_control'::varchar(20) AS cleansed_table, ftf_control.file_id, count(*) AS counts FROM cleansed.ftf_control GROUP BY 'cleansed.ftf_control'::varchar(20), ftf_control.file_id) UNION ALL SELECT 'cleansed.ftf_copays'::varchar(19) AS cleansed_table, ftf_copays.file_id, count(*) AS counts FROM cleansed.ftf_copays GROUP BY 'cleansed.ftf_copays'::varchar(19), ftf_copays.file_id) UNION ALL SELECT 'cleansed.ftf_drug_class_therapeutic_area'::varchar(40) AS cleansed_table, ftf_drug_class_therapeutic_area.file_id, count(*) AS counts FROM cleansed.ftf_drug_class_therapeutic_area GROUP BY 'cleansed.ftf_drug_class_therapeutic_area'::varchar(40), ftf_drug_class_therapeutic_area.file_id) UNION ALL SELECT 'cleansed.ftf_drugs'::varchar(18) AS cleansed_table, ftf_drugs.file_id, count(*) AS counts FROM cleansed.ftf_drugs GROUP BY 'cleansed.ftf_drugs'::varchar(18), ftf_drugs.file_id) UNION ALL SELECT 'cleansed.ftf_formularies'::varchar(24) AS cleansed_table, ftf_formularies.file_id, count(*) AS counts FROM cleansed.ftf_formularies GROUP BY 'cleansed.ftf_formularies'::varchar(24), ftf_formularies.file_id) UNION ALL SELECT 'cleansed.ftf_health_plan_geography'::varchar(34) AS cleansed_table, ftf_health_plan_geography.file_id, count(*) AS counts FROM cleansed.ftf_health_plan_geography GROUP BY 'cleansed.ftf_health_plan_geography'::varchar(34), ftf_health_plan_geography.file_id) UNION ALL SELECT 'cleansed.ftf_health_plans'::varchar(25) AS cleansed_table, ftf_health_plans.file_id, count(*) AS counts FROM cleansed.ftf_health_plans GROUP BY 'cleansed.ftf_health_plans'::varchar(25), ftf_health_plans.file_id) UNION ALL SELECT 'cleansed.ftf_ims_bridge'::varchar(23) AS cleansed_table, ftf_ims_bridge.file_id, count(*) AS counts FROM cleansed.ftf_ims_bridge GROUP BY 'cleansed.ftf_ims_bridge'::varchar(23), ftf_ims_bridge.file_id) UNION ALL SELECT 'cleansed.ftf_pbms'::varchar(17) AS cleansed_table, ftf_pbms.file_id, count(*) AS counts FROM cleansed.ftf_pbms GROUP BY 'cleansed.ftf_pbms'::varchar(17), ftf_pbms.file_id) UNION ALL SELECT 'cleansed.ftf_restrictions'::varchar(25) AS cleansed_table, ftf_restrictions.file_id, count(*) AS counts FROM cleansed.ftf_restrictions GROUP BY 'cleansed.ftf_restrictions'::varchar(25), ftf_restrictions.file_id) UNION ALL SELECT 'cleansed.ftf_wk_bridge'::varchar(22) AS cleansed_table, ftf_wk_bridge.file_id, count(*) AS counts FROM cleansed.ftf_wk_bridge GROUP BY 'cleansed.ftf_wk_bridge'::varchar(22), ftf_wk_bridge.file_id) UNION ALL SELECT 'cleansed.ftf_tiers'::varchar(18) AS cleansed_table, ftf_tiers.file_id, count(*) AS counts FROM cleansed.ftf_tiers GROUP BY 'cleansed.ftf_tiers'::varchar(18), ftf_tiers.file_id) UNION ALL SELECT 'hcos.ims_hcos_aco_detail'::varchar(24) AS cleansed_table, ims_hcos_aco_detail.file_id, count(*) AS counts FROM hcos.ims_hcos_aco_detail GROUP BY 'hcos.ims_hcos_aco_detail'::varchar(24), ims_hcos_aco_detail.file_id) UNION ALL SELECT 'hcos.ims_hcos_aco_detail_fact'::varchar(29) AS cleansed_table, ims_hcos_aco_detail_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_aco_detail_fact GROUP BY 'hcos.ims_hcos_aco_detail_fact'::varchar(29), ims_hcos_aco_detail_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_aco_org_fact'::varchar(26) AS cleansed_table, ims_hcos_aco_org_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_aco_org_fact GROUP BY 'hcos.ims_hcos_aco_org_fact'::varchar(26), ims_hcos_aco_org_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_aco_roster'::varchar(24) AS cleansed_table, ims_hcos_aco_roster.file_id, count(*) AS counts FROM hcos.ims_hcos_aco_roster GROUP BY 'hcos.ims_hcos_aco_roster'::varchar(24), ims_hcos_aco_roster.file_id) UNION ALL SELECT 'hcos.ims_hcos_aco_type'::varchar(22) AS cleansed_table, ims_hcos_aco_type.file_id, count(*) AS counts FROM hcos.ims_hcos_aco_type GROUP BY 'hcos.ims_hcos_aco_type'::varchar(22), ims_hcos_aco_type.file_id) UNION ALL SELECT 'hcos.ims_hcos_affiliation_type'::varchar(30) AS cleansed_table, ims_hcos_affiliation_type.file_id, count(*) AS counts FROM hcos.ims_hcos_affiliation_type GROUP BY 'hcos.ims_hcos_affiliation_type'::varchar(30), ims_hcos_affiliation_type.file_id) UNION ALL SELECT 'hcos.ims_hcos_bed_cluster_type'::varchar(30) AS cleansed_table, ims_hcos_bed_cluster_type.file_id, count(*) AS counts FROM hcos.ims_hcos_bed_cluster_type GROUP BY 'hcos.ims_hcos_bed_cluster_type'::varchar(30), ims_hcos_bed_cluster_type.file_id) UNION ALL SELECT 'hcos.ims_hcos_bed_fact'::varchar(22) AS cleansed_table, ims_hcos_bed_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_bed_fact GROUP BY 'hcos.ims_hcos_bed_fact'::varchar(22), ims_hcos_bed_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_bed_type'::varchar(22) AS cleansed_table, ims_hcos_bed_type.file_id, count(*) AS counts FROM hcos.ims_hcos_bed_type GROUP BY 'hcos.ims_hcos_bed_type'::varchar(22), ims_hcos_bed_type.file_id) UNION ALL SELECT 'hcos.ims_hcos_business'::varchar(22) AS cleansed_table, ims_hcos_business.file_id, count(*) AS counts FROM hcos.ims_hcos_business GROUP BY 'hcos.ims_hcos_business'::varchar(22), ims_hcos_business.file_id) UNION ALL SELECT 'hcos.ims_hcos_business_detail'::varchar(29) AS cleansed_table, ims_hcos_business_detail.file_id, count(*) AS counts FROM hcos.ims_hcos_business_detail GROUP BY 'hcos.ims_hcos_business_detail'::varchar(29), ims_hcos_business_detail.file_id) UNION ALL SELECT 'hcos.ims_hcos_business_detail_fact'::varchar(34) AS cleansed_table, ims_hcos_business_detail_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_business_detail_fact GROUP BY 'hcos.ims_hcos_business_detail_fact'::varchar(34), ims_hcos_business_detail_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_class_of_trade'::varchar(28) AS cleansed_table, ims_hcos_class_of_trade.file_id, count(*) AS counts FROM hcos.ims_hcos_class_of_trade GROUP BY 'hcos.ims_hcos_class_of_trade'::varchar(28), ims_hcos_class_of_trade.file_id) UNION ALL SELECT 'hcos.ims_hcos_clinical_code'::varchar(27) AS cleansed_table, ims_hcos_clinical_code.file_id, count(*) AS counts FROM hcos.ims_hcos_clinical_code GROUP BY 'hcos.ims_hcos_clinical_code'::varchar(27), ims_hcos_clinical_code.file_id) UNION ALL SELECT 'hcos.ims_hcos_clinical_fact'::varchar(27) AS cleansed_table, ims_hcos_clinical_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_clinical_fact GROUP BY 'hcos.ims_hcos_clinical_fact'::varchar(27), ims_hcos_clinical_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_clinical_fact_national'::varchar(36) AS cleansed_table, ims_hcos_clinical_fact_national.file_id, count(*) AS counts FROM hcos.ims_hcos_clinical_fact_national GROUP BY 'hcos.ims_hcos_clinical_fact_national'::varchar(36), ims_hcos_clinical_fact_national.file_id) UNION ALL SELECT 'hcos.ims_hcos_clinical_fact_state'::varchar(33) AS cleansed_table, ims_hcos_clinical_fact_state.file_id, count(*) AS counts FROM hcos.ims_hcos_clinical_fact_state GROUP BY 'hcos.ims_hcos_clinical_fact_state'::varchar(33), ims_hcos_clinical_fact_state.file_id) UNION ALL SELECT 'hcos.ims_hcos_contact_affiliation_fact'::varchar(38) AS cleansed_table, ims_hcos_contact_affiliation_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_contact_affiliation_fact GROUP BY 'hcos.ims_hcos_contact_affiliation_fact'::varchar(38), ims_hcos_contact_affiliation_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_cot_fact'::varchar(22) AS cleansed_table, ims_hcos_cot_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_cot_fact GROUP BY 'hcos.ims_hcos_cot_fact'::varchar(22), ims_hcos_cot_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_financial_fact'::varchar(28) AS cleansed_table, ims_hcos_financial_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_financial_fact GROUP BY 'hcos.ims_hcos_financial_fact'::varchar(28), ims_hcos_financial_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_identifier_fact'::varchar(29) AS cleansed_table, ims_hcos_identifier_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_identifier_fact GROUP BY 'hcos.ims_hcos_identifier_fact'::varchar(29), ims_hcos_identifier_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_identifier_type'::varchar(29) AS cleansed_table, ims_hcos_identifier_type.file_id, count(*) AS counts FROM hcos.ims_hcos_identifier_type GROUP BY 'hcos.ims_hcos_identifier_type'::varchar(29), ims_hcos_identifier_type.file_id) UNION ALL SELECT 'hcos.ims_hcos_identifier_category_type'::varchar(38) AS cleansed_table, ims_hcos_identifier_category_type.file_id, count(*) AS counts FROM hcos.ims_hcos_identifier_category_type GROUP BY 'hcos.ims_hcos_identifier_category_type'::varchar(38), ims_hcos_identifier_category_type.file_id) UNION ALL SELECT 'hcos.ims_hcos_identifier_term_type'::varchar(34) AS cleansed_table, ims_hcos_identifier_term_type.file_id, count(*) AS counts FROM hcos.ims_hcos_identifier_term_type GROUP BY 'hcos.ims_hcos_identifier_term_type'::varchar(34), ims_hcos_identifier_term_type.file_id) UNION ALL SELECT 'hcos.ims_hcos_professional'::varchar(26) AS cleansed_table, ims_hcos_professional.file_id, count(*) AS counts FROM hcos.ims_hcos_professional GROUP BY 'hcos.ims_hcos_professional'::varchar(26), ims_hcos_professional.file_id) UNION ALL SELECT 'hcos.ims_hcos_professional_detail'::varchar(33) AS cleansed_table, ims_hcos_professional_detail.file_id, count(*) AS counts FROM hcos.ims_hcos_professional_detail GROUP BY 'hcos.ims_hcos_professional_detail'::varchar(33), ims_hcos_professional_detail.file_id) UNION ALL SELECT 'hcos.ims_hcos_professional_detail_fact'::varchar(38) AS cleansed_table, ims_hcos_professional_detail_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_professional_detail_fact GROUP BY 'hcos.ims_hcos_professional_detail_fact'::varchar(38), ims_hcos_professional_detail_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_professional_specialty_fact'::varchar(41) AS cleansed_table, ims_hcos_professional_specialty_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_professional_specialty_fact GROUP BY 'hcos.ims_hcos_professional_specialty_fact'::varchar(41), ims_hcos_professional_specialty_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_professional_specialty'::varchar(36) AS cleansed_table, ims_hcos_professional_specialty.file_id, count(*) AS counts FROM hcos.ims_hcos_professional_specialty GROUP BY 'hcos.ims_hcos_professional_specialty'::varchar(36), ims_hcos_professional_specialty.file_id) UNION ALL SELECT 'hcos.ims_hcos_professional_title'::varchar(32) AS cleansed_table, ims_hcos_professional_title.file_id, count(*) AS counts FROM hcos.ims_hcos_professional_title GROUP BY 'hcos.ims_hcos_professional_title'::varchar(32), ims_hcos_professional_title.file_id) UNION ALL SELECT 'hcos.ims_hcos_provider_affiliation_fact'::varchar(39) AS cleansed_table, ims_hcos_provider_affiliation_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_provider_affiliation_fact GROUP BY 'hcos.ims_hcos_provider_affiliation_fact'::varchar(39), ims_hcos_provider_affiliation_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_relationship_fact'::varchar(31) AS cleansed_table, ims_hcos_relationship_fact.file_id, count(*) AS counts FROM hcos.ims_hcos_relationship_fact GROUP BY 'hcos.ims_hcos_relationship_fact'::varchar(31), ims_hcos_relationship_fact.file_id) UNION ALL SELECT 'hcos.ims_hcos_relationship_type'::varchar(31) AS cleansed_table, ims_hcos_relationship_type.file_id, count(*) AS counts FROM hcos.ims_hcos_relationship_type GROUP BY 'hcos.ims_hcos_relationship_type'::varchar(31), ims_hcos_relationship_type.file_id) UNION ALL SELECT 'cleansed.i3_rx_by_strength'::varchar(26) AS cleansed_table, i3_rx_by_strength.file_id, count(*) AS counts FROM cleansed.i3_rx_by_strength GROUP BY 'cleansed.i3_rx_by_strength'::varchar(26), i3_rx_by_strength.file_id) UNION ALL SELECT 'cleansed.i3_rx'::varchar(14) AS cleansed_table, i3_rx.file_id, count(*) AS counts FROM cleansed.i3_rx GROUP BY 'cleansed.i3_rx'::varchar(14), i3_rx.file_id) UNION ALL SELECT 'cleansed.i3_rx_tysabri'::varchar(22) AS cleansed_table, i3_rx_tysabri.file_id, count(*) AS counts FROM cleansed.i3_rx_tysabri GROUP BY 'cleansed.i3_rx_tysabri'::varchar(22), i3_rx_tysabri.file_id) UNION ALL SELECT 'veeva.ids_call_detail'::varchar(21) AS cleansed_table, ids_call_detail.file_id, count(*) AS counts FROM veeva.ids_call_detail GROUP BY 'veeva.ids_call_detail'::varchar(21), ids_call_detail.file_id) UNION ALL SELECT 'veeva.ids_call'::varchar(14) AS cleansed_table, ids_call.file_id, count(*) AS counts FROM veeva.ids_call GROUP BY 'veeva.ids_call'::varchar(14), ids_call.file_id) UNION ALL SELECT 'cleansed.ims_product_list_monthly'::varchar(33) AS cleansed_table, ims_product_list_monthly.file_id, count(*) AS counts FROM cleansed.ims_product_list_monthly GROUP BY 'cleansed.ims_product_list_monthly'::varchar(33), ims_product_list_monthly.file_id) UNION ALL SELECT 'cleansed.ims_product_list_weekly'::varchar(32) AS cleansed_table, ims_product_list_weekly.file_id, count(*) AS counts FROM cleansed.ims_product_list_weekly GROUP BY 'cleansed.ims_product_list_weekly'::varchar(32), ims_product_list_weekly.file_id) UNION ALL SELECT 'cleansed.ims_mhj_cnt_m'::varchar(22) AS cleansed_table, ims_mhj_cnt_m.file_id, count(*) AS counts FROM cleansed.ims_mhj_cnt_m GROUP BY 'cleansed.ims_mhj_cnt_m'::varchar(22), ims_mhj_cnt_m.file_id) UNION ALL SELECT 'cleansed.ims_mhj_cnt_w'::varchar(22) AS cleansed_table, ims_mhj_cnt_w.file_id, count(*) AS counts FROM cleansed.ims_mhj_cnt_w GROUP BY 'cleansed.ims_mhj_cnt_w'::varchar(22), ims_mhj_cnt_w.file_id) UNION ALL SELECT 'cleansed.ims_mhj_control_m'::varchar(26) AS cleansed_table, ims_mhj_control_m.file_id, count(*) AS counts FROM cleansed.ims_mhj_control_m GROUP BY 'cleansed.ims_mhj_control_m'::varchar(26), ims_mhj_control_m.file_id) UNION ALL SELECT 'cleansed.ims_mhj_control_w'::varchar(26) AS cleansed_table, ims_mhj_control_w.file_id, count(*) AS counts FROM cleansed.ims_mhj_control_w GROUP BY 'cleansed.ims_mhj_control_w'::varchar(26), ims_mhj_control_w.file_id) UNION ALL SELECT 'cleansed.ims_mhj_qty_m'::varchar(22) AS cleansed_table, ims_mhj_qty_m.file_id, count(*) AS counts FROM cleansed.ims_mhj_qty_m GROUP BY 'cleansed.ims_mhj_qty_m'::varchar(22), ims_mhj_qty_m.file_id) UNION ALL SELECT 'cleansed.ims_mhj_qty_w'::varchar(22) AS cleansed_table, ims_mhj_qty_w.file_id, count(*) AS counts FROM cleansed.ims_mhj_qty_w GROUP BY 'cleansed.ims_mhj_qty_w'::varchar(22), ims_mhj_qty_w.file_id) UNION ALL SELECT 'cleansed.ims_pbm_xref'::varchar(21) AS cleansed_table, ims_pbm_xref.file_id, count(*) AS counts FROM cleansed.ims_pbm_xref GROUP BY 'cleansed.ims_pbm_xref'::varchar(21), ims_pbm_xref.file_id) UNION ALL SELECT 'cleansed.ims_plan_xref'::varchar(22) AS cleansed_table, ims_plan_xref.file_id, count(*) AS counts FROM cleansed.ims_plan_xref GROUP BY 'cleansed.ims_plan_xref'::varchar(22), ims_plan_xref.file_id) UNION ALL SELECT 'cleansed.ims_plan_xref_accelerated'::varchar(34) AS cleansed_table, ims_plan_xref_accelerated.file_id, count(*) AS counts FROM cleansed.ims_plan_xref_accelerated GROUP BY 'cleansed.ims_plan_xref_accelerated'::varchar(34), ims_plan_xref_accelerated.file_id) UNION ALL SELECT 'cleansed.kc_sales_zip_to_territory'::varchar(34) AS cleansed_table, kc_sales_zip_to_territory.file_id, count(*) AS counts FROM cleansed.kc_sales_zip_to_territory GROUP BY 'cleansed.kc_sales_zip_to_territory'::varchar(34), kc_sales_zip_to_territory.file_id) UNION ALL SELECT 'cleansed.knipper_samples_shipped'::varchar(32) AS cleansed_table, knipper_samples_shipped.file_id, count(*) AS counts FROM cleansed.knipper_samples_shipped GROUP BY 'cleansed.knipper_samples_shipped'::varchar(32), knipper_samples_shipped.file_id) UNION ALL SELECT 'cleansed.mm_ram_to_state'::varchar(24) AS cleansed_table, mm_ram_to_state.file_id, count(*) AS counts FROM cleansed.mm_ram_to_state GROUP BY 'cleansed.mm_ram_to_state'::varchar(24), mm_ram_to_state.file_id) UNION ALL SELECT 'cleansed.omnicare_sales'::varchar(23) AS cleansed_table, omnicare_sales.file_id, count(*) AS counts FROM cleansed.omnicare_sales GROUP BY 'cleansed.omnicare_sales'::varchar(23), omnicare_sales.file_id) UNION ALL SELECT 'cleansed.onc_account_targets'::varchar(28) AS cleansed_table, onc_account_targets.file_id, count(*) AS counts FROM cleansed.onc_account_targets GROUP BY 'cleansed.onc_account_targets'::varchar(28), onc_account_targets.file_id) UNION ALL SELECT 'cleansed.onc_call_detail_goals'::varchar(30) AS cleansed_table, onc_call_detail_goals.file_id, count(*) AS counts FROM cleansed.onc_call_detail_goals GROUP BY 'cleansed.onc_call_detail_goals'::varchar(30), onc_call_detail_goals.file_id) UNION ALL SELECT 'cleansed.ims_ddd_monthly_retail_onc'::varchar(35) AS cleansed_table, ims_ddd_monthly_retail_onc.file_id, count(*) AS counts FROM cleansed.ims_ddd_monthly_retail_onc GROUP BY 'cleansed.ims_ddd_monthly_retail_onc'::varchar(35), ims_ddd_monthly_retail_onc.file_id) UNION ALL SELECT 'cleansed.ims_ddd_weekly_retail_onc'::varchar(34) AS cleansed_table, ims_ddd_weekly_retail_onc.file_id, count(*) AS counts FROM cleansed.ims_ddd_weekly_retail_onc GROUP BY 'cleansed.ims_ddd_weekly_retail_onc'::varchar(34), ims_ddd_weekly_retail_onc.file_id) UNION ALL SELECT 'cleansed.ims_ddd_md_demo_monthly_dollars'::varchar(40) AS cleansed_table, ims_ddd_md_demo_monthly_dollars.file_id, count(*) AS counts FROM cleansed.ims_ddd_md_demo_monthly_dollars GROUP BY 'cleansed.ims_ddd_md_demo_monthly_dollars'::varchar(40), ims_ddd_md_demo_monthly_dollars.file_id) UNION ALL SELECT 'cleansed.ims_ddd_md_demo_monthly_qty'::varchar(36) AS cleansed_table, ims_ddd_md_demo_monthly_qty.file_id, count(*) AS counts FROM cleansed.ims_ddd_md_demo_monthly_qty GROUP BY 'cleansed.ims_ddd_md_demo_monthly_qty'::varchar(36), ims_ddd_md_demo_monthly_qty.file_id) UNION ALL SELECT 'cleansed.ims_ddd_md_monthly_dollars_onc'::varchar(39) AS cleansed_table, ims_ddd_md_monthly_dollars_onc.file_id, count(*) AS counts FROM cleansed.ims_ddd_md_monthly_dollars_onc GROUP BY 'cleansed.ims_ddd_md_monthly_dollars_onc'::varchar(39), ims_ddd_md_monthly_dollars_onc.file_id) UNION ALL SELECT 'cleansed.ims_ddd_md_monthly_quantity_onc'::varchar(40) AS cleansed_table, ims_ddd_md_monthly_quantity_onc.file_id, count(*) AS counts FROM cleansed.ims_ddd_md_monthly_quantity_onc GROUP BY 'cleansed.ims_ddd_md_monthly_quantity_onc'::varchar(40), ims_ddd_md_monthly_quantity_onc.file_id) UNION ALL SELECT 'cleansed.ims_ddd_md_demo_weekly'::varchar(31) AS cleansed_table, ims_ddd_md_demo_weekly.file_id, count(*) AS counts FROM cleansed.ims_ddd_md_demo_weekly GROUP BY 'cleansed.ims_ddd_md_demo_weekly'::varchar(31), ims_ddd_md_demo_weekly.file_id) UNION ALL SELECT 'cleansed.ims_ddd_md_weekly_sales_onc'::varchar(36) AS cleansed_table, ims_ddd_md_weekly_sales_onc.file_id, count(*) AS counts FROM cleansed.ims_ddd_md_weekly_sales_onc GROUP BY 'cleansed.ims_ddd_md_weekly_sales_onc'::varchar(36), ims_ddd_md_weekly_sales_onc.file_id) UNION ALL SELECT 'cleansed.onc_manual_fcrs'::varchar(24) AS cleansed_table, onc_manual_fcrs.file_id, count(*) AS counts FROM cleansed.onc_manual_fcrs GROUP BY 'cleansed.onc_manual_fcrs'::varchar(24), onc_manual_fcrs.file_id) UNION ALL SELECT 'cleansed.onc_sales_quotas'::varchar(25) AS cleansed_table, onc_sales_quotas.file_id, count(*) AS counts FROM cleansed.onc_sales_quotas GROUP BY 'cleansed.onc_sales_quotas'::varchar(25), onc_sales_quotas.file_id) UNION ALL SELECT 'cleansed.ims_ddd_non_retail_pcs'::varchar(31) AS cleansed_table, ims_ddd_non_retail_pcs.file_id, count(*) AS counts FROM cleansed.ims_ddd_non_retail_pcs GROUP BY 'cleansed.ims_ddd_non_retail_pcs'::varchar(31), ims_ddd_non_retail_pcs.file_id) UNION ALL SELECT 'cleansed.ims_ddd_retail_pcs'::varchar(27) AS cleansed_table, ims_ddd_retail_pcs.file_id, count(*) AS counts FROM cleansed.ims_ddd_retail_pcs GROUP BY 'cleansed.ims_ddd_retail_pcs'::varchar(27), ims_ddd_retail_pcs.file_id) UNION ALL SELECT 'cleansed.prime_rx'::varchar(17) AS cleansed_table, prime_rx.file_id, count(*) AS counts FROM cleansed.prime_rx GROUP BY 'cleansed.prime_rx'::varchar(17), prime_rx.file_id) UNION ALL SELECT 'cleansed.rems_facility'::varchar(22) AS cleansed_table, rems_facility.file_id, count(*) AS counts FROM cleansed.rems_facility GROUP BY 'cleansed.rems_facility'::varchar(22), rems_facility.file_id) UNION ALL SELECT 'cleansed.rems_pharmacy'::varchar(22) AS cleansed_table, rems_pharmacy.file_id, count(*) AS counts FROM cleansed.rems_pharmacy GROUP BY 'cleansed.rems_pharmacy'::varchar(22), rems_pharmacy.file_id) UNION ALL SELECT 'cleansed.rems_prescriber'::varchar(24) AS cleansed_table, rems_prescriber.file_id, count(*) AS counts FROM cleansed.rems_prescriber GROUP BY 'cleansed.rems_prescriber'::varchar(24), rems_prescriber.file_id) UNION ALL SELECT 'cleansed.specialty_pharmacy_cm_lookup'::varchar(37) AS cleansed_table, specialty_pharmacy_cm_lookup.file_id, count(*) AS counts FROM cleansed.specialty_pharmacy_cm_lookup GROUP BY 'cleansed.specialty_pharmacy_cm_lookup'::varchar(37), specialty_pharmacy_cm_lookup.file_id) UNION ALL SELECT 'cleansed.specialty_pharmacy_lookups'::varchar(35) AS cleansed_table, specialty_pharmacy_lookups.file_id, count(*) AS counts FROM cleansed.specialty_pharmacy_lookups GROUP BY 'cleansed.specialty_pharmacy_lookups'::varchar(35), specialty_pharmacy_lookups.file_id) UNION ALL SELECT 'cleansed.tb_cb_accounts'::varchar(23) AS cleansed_table, tb_cb_accounts.file_id, count(*) AS counts FROM cleansed.tb_cb_accounts GROUP BY 'cleansed.tb_cb_accounts'::varchar(23), tb_cb_accounts.file_id) UNION ALL SELECT 'cleansed.tb_cb_transactions'::varchar(27) AS cleansed_table, tb_cb_transactions.file_id, count(*) AS counts FROM cleansed.tb_cb_transactions GROUP BY 'cleansed.tb_cb_transactions'::varchar(27), tb_cb_transactions.file_id) UNION ALL SELECT 'cleansed.tb_ds_accounts'::varchar(23) AS cleansed_table, tb_ds_accounts.file_id, count(*) AS counts FROM cleansed.tb_ds_accounts GROUP BY 'cleansed.tb_ds_accounts'::varchar(23), tb_ds_accounts.file_id) UNION ALL SELECT 'cleansed.tb_ds_transactions'::varchar(27) AS cleansed_table, tb_ds_transactions.file_id, count(*) AS counts FROM cleansed.tb_ds_transactions GROUP BY 'cleansed.tb_ds_transactions'::varchar(27), tb_ds_transactions.file_id) UNION ALL SELECT 'veeva.time_off_territory_kc'::varchar(27) AS cleansed_table, time_off_territory_kc.file_id, count(*) AS counts FROM veeva.time_off_territory_kc GROUP BY 'veeva.time_off_territory_kc'::varchar(27), time_off_territory_kc.file_id) UNION ALL SELECT 'veeva.time_off_territory'::varchar(24) AS cleansed_table, time_off_territory.file_id, count(*) AS counts FROM veeva.time_off_territory GROUP BY 'veeva.time_off_territory'::varchar(24), time_off_territory.file_id) UNION ALL SELECT 'cleansed.publicis_touchpoint_call'::varchar(33) AS cleansed_table, publicis_touchpoint_call.file_id, count(*) AS counts FROM cleansed.publicis_touchpoint_call GROUP BY 'cleansed.publicis_touchpoint_call'::varchar(33), publicis_touchpoint_call.file_id) UNION ALL SELECT 'cleansed.publicis_touchpoint_presentation'::varchar(41) AS cleansed_table, publicis_touchpoint_presentation.file_id, count(*) AS counts FROM cleansed.publicis_touchpoint_presentation GROUP BY 'cleansed.publicis_touchpoint_presentation'::varchar(41), publicis_touchpoint_presentation.file_id) UNION ALL SELECT 'cleansed.anda_sales_tw'::varchar(22) AS cleansed_table, anda_sales_tw.file_id, count(*) AS counts FROM cleansed.anda_sales_tw GROUP BY 'cleansed.anda_sales_tw'::varchar(22), anda_sales_tw.file_id) UNION ALL SELECT 'cleansed.biologics_sales_tw'::varchar(27) AS cleansed_table, biologics_sales_tw.file_id, count(*) AS counts FROM cleansed.biologics_sales_tw GROUP BY 'cleansed.biologics_sales_tw'::varchar(27), biologics_sales_tw.file_id) UNION ALL SELECT 'cleansed.hd_smith_sales_tw'::varchar(26) AS cleansed_table, hd_smith_sales_tw.file_id, count(*) AS counts FROM cleansed.hd_smith_sales_tw GROUP BY 'cleansed.hd_smith_sales_tw'::varchar(26), hd_smith_sales_tw.file_id) UNION ALL SELECT 'cleansed.ics_account_tw'::varchar(23) AS cleansed_table, ics_account_tw.file_id, count(*) AS counts FROM cleansed.ics_account_tw GROUP BY 'cleansed.ics_account_tw'::varchar(23), ics_account_tw.file_id) UNION ALL SELECT 'cleansed.ics_sales_tw'::varchar(21) AS cleansed_table, ics_sales_tw.file_id, count(*) AS counts FROM cleansed.ics_sales_tw GROUP BY 'cleansed.ics_sales_tw'::varchar(21), ics_sales_tw.file_id) UNION ALL SELECT 'veeva.account'::varchar(13) AS cleansed_table, account.file_id, count(*) AS counts FROM veeva.account GROUP BY 'veeva.account'::varchar(13), account.file_id) UNION ALL SELECT 'veeva.accountshare'::varchar(18) AS cleansed_table, accountshare.file_id, count(*) AS counts FROM veeva.accountshare GROUP BY 'veeva.accountshare'::varchar(18), accountshare.file_id) UNION ALL SELECT 'veeva.account_merge_history'::varchar(27) AS cleansed_table, account_merge_history.file_id, count(*) AS counts FROM veeva.account_merge_history GROUP BY 'veeva.account_merge_history'::varchar(27), account_merge_history.file_id) UNION ALL SELECT 'veeva.address'::varchar(13) AS cleansed_table, address.file_id, count(*) AS counts FROM veeva.address GROUP BY 'veeva.address'::varchar(13), address.file_id) UNION ALL SELECT 'veeva.affiliation'::varchar(17) AS cleansed_table, affiliation.file_id, count(*) AS counts FROM veeva.affiliation GROUP BY 'veeva.affiliation'::varchar(17), affiliation.file_id) UNION ALL SELECT 'veeva.assessment'::varchar(16) AS cleansed_table, assessment.file_id, count(*) AS counts FROM veeva.assessment GROUP BY 'veeva.assessment'::varchar(16), assessment.file_id) UNION ALL SELECT 'veeva.call_goal'::varchar(15) AS cleansed_table, call_goal.file_id, count(*) AS counts FROM veeva.call_goal GROUP BY 'veeva.call_goal'::varchar(15), call_goal.file_id) UNION ALL SELECT 'veeva.call_detail'::varchar(17) AS cleansed_table, call_detail.file_id, count(*) AS counts FROM veeva.call_detail GROUP BY 'veeva.call_detail'::varchar(17), call_detail.file_id) UNION ALL SELECT 'veeva.call_key_message'::varchar(22) AS cleansed_table, call_key_message.file_id, count(*) AS counts FROM veeva.call_key_message GROUP BY 'veeva.call_key_message'::varchar(22), call_key_message.file_id) UNION ALL SELECT 'veeva.call_sample'::varchar(17) AS cleansed_table, call_sample.file_id, count(*) AS counts FROM veeva.call_sample GROUP BY 'veeva.call_sample'::varchar(17), call_sample.file_id) UNION ALL SELECT 'veeva.call'::varchar(10) AS cleansed_table, call.file_id, count(*) AS counts FROM veeva.call GROUP BY 'veeva.call'::varchar(10), call.file_id) UNION ALL SELECT 'veeva.call_history'::varchar(18) AS cleansed_table, call_history.file_id, count(*) AS counts FROM veeva.call_history GROUP BY 'veeva.call_history'::varchar(18), call_history.file_id) UNION ALL SELECT 'veeva.deciles'::varchar(13) AS cleansed_table, deciles.file_id, count(*) AS counts FROM veeva.deciles GROUP BY 'veeva.deciles'::varchar(13), deciles.file_id) UNION ALL SELECT 'veeva.group'::varchar(11) AS cleansed_table, "group".file_id, count(*) AS counts FROM veeva."group" GROUP BY 'veeva.group'::varchar(11), "group".file_id) UNION ALL SELECT 'veeva.key_message'::varchar(17) AS cleansed_table, key_message.file_id, count(*) AS counts FROM veeva.key_message GROUP BY 'veeva.key_message'::varchar(17), key_message.file_id) UNION ALL SELECT 'veeva.medical_inquiry'::varchar(21) AS cleansed_table, medical_inquiry.file_id, count(*) AS counts FROM veeva.medical_inquiry GROUP BY 'veeva.medical_inquiry'::varchar(21), medical_inquiry.file_id) UNION ALL SELECT 'veeva.product_metrics'::varchar(21) AS cleansed_table, product_metrics.file_id, count(*) AS counts FROM veeva.product_metrics GROUP BY 'veeva.product_metrics'::varchar(21), product_metrics.file_id) UNION ALL SELECT 'veeva.product'::varchar(13) AS cleansed_table, product.file_id, count(*) AS counts FROM veeva.product GROUP BY 'veeva.product'::varchar(13), product.file_id) UNION ALL SELECT 'veeva.survey_question_response'::varchar(30) AS cleansed_table, survey_question_response.file_id, count(*) AS counts FROM veeva.survey_question_response GROUP BY 'veeva.survey_question_response'::varchar(30), survey_question_response.file_id) UNION ALL SELECT 'veeva.recordtype'::varchar(16) AS cleansed_table, recordtype.file_id, count(*) AS counts FROM veeva.recordtype GROUP BY 'veeva.recordtype'::varchar(16), recordtype.file_id) UNION ALL SELECT 'veeva.survey_question'::varchar(21) AS cleansed_table, survey_question.file_id, count(*) AS counts FROM veeva.survey_question GROUP BY 'veeva.survey_question'::varchar(21), survey_question.file_id) UNION ALL SELECT 'veeva.survey_target'::varchar(19) AS cleansed_table, survey_target.file_id, count(*) AS counts FROM veeva.survey_target GROUP BY 'veeva.survey_target'::varchar(19), survey_target.file_id) UNION ALL SELECT 'veeva.survey'::varchar(12) AS cleansed_table, survey.file_id, count(*) AS counts FROM veeva.survey GROUP BY 'veeva.survey'::varchar(12), survey.file_id) UNION ALL SELECT 'veeva.sync_tracking'::varchar(19) AS cleansed_table, sync_tracking.file_id, count(*) AS counts FROM veeva.sync_tracking GROUP BY 'veeva.sync_tracking'::varchar(19), sync_tracking.file_id) UNION ALL SELECT 'veeva.territory'::varchar(15) AS cleansed_table, territory.file_id, count(*) AS counts FROM veeva.territory GROUP BY 'veeva.territory'::varchar(15), territory.file_id) UNION ALL SELECT 'veeva.tsf'::varchar(9) AS cleansed_table, tsf.file_id, count(*) AS counts FROM veeva.tsf GROUP BY 'veeva.tsf'::varchar(9), tsf.file_id) UNION ALL SELECT 'veeva.veeva_user'::varchar(16) AS cleansed_table, veeva_user.file_id, count(*) AS counts FROM veeva.veeva_user GROUP BY 'veeva.veeva_user'::varchar(16), veeva_user.file_id) UNION ALL SELECT 'veeva.user_role'::varchar(15) AS cleansed_table, user_role.file_id, count(*) AS counts FROM veeva.user_role GROUP BY 'veeva.user_role'::varchar(15), user_role.file_id) UNION ALL SELECT 'veeva.user_territory'::varchar(20) AS cleansed_table, user_territory.file_id, count(*) AS counts FROM veeva.user_territory GROUP BY 'veeva.user_territory'::varchar(20), user_territory.file_id) UNION ALL SELECT 'cleansed.valuecentric_867'::varchar(25) AS cleansed_table, valuecentric_867.file_id, count(*) AS counts FROM cleansed.valuecentric_867 GROUP BY 'cleansed.valuecentric_867'::varchar(25), valuecentric_867.file_id) UNION ALL SELECT 'cleansed.zs_call_plan_tc'::varchar(24) AS cleansed_table, zs_call_plan_tc.file_id, count(*) AS counts FROM cleansed.zs_call_plan_tc GROUP BY 'cleansed.zs_call_plan_tc'::varchar(24), zs_call_plan_tc.file_id) UNION ALL SELECT 'cleansed.zs_call_plan_tn'::varchar(24) AS cleansed_table, zs_call_plan_tn.file_id, count(*) AS counts FROM cleansed.zs_call_plan_tn GROUP BY 'cleansed.zs_call_plan_tn'::varchar(24), zs_call_plan_tn.file_id) UNION ALL SELECT 'cleansed.zs_call_plan_tp'::varchar(24) AS cleansed_table, zs_call_plan_tp.file_id, count(*) AS counts FROM cleansed.zs_call_plan_tp GROUP BY 'cleansed.zs_call_plan_tp'::varchar(24), zs_call_plan_tp.file_id) UNION ALL SELECT 'cleansed.zs_call_plan_tr'::varchar(24) AS cleansed_table, zs_call_plan_tr.file_id, count(*) AS counts FROM cleansed.zs_call_plan_tr GROUP BY 'cleansed.zs_call_plan_tr'::varchar(24), zs_call_plan_tr.file_id) UNION ALL SELECT 'cleansed.zs_call_plan_tw'::varchar(24) AS cleansed_table, zs_call_plan_tw.file_id, count(*) AS counts FROM cleansed.zs_call_plan_tw GROUP BY 'cleansed.zs_call_plan_tw'::varchar(24), zs_call_plan_tw.file_id) UNION ALL SELECT 'cleansed.kc_hr_job_titles'::varchar(25) AS cleansed_table, kc_hr_job_titles.file_id, count(*) AS counts FROM cleansed.kc_hr_job_titles GROUP BY 'cleansed.kc_hr_job_titles'::varchar(25), kc_hr_job_titles.file_id) UNION ALL SELECT 'cleansed.kc_hr_people'::varchar(21) AS cleansed_table, kc_hr_people.file_id, count(*) AS counts FROM cleansed.kc_hr_people GROUP BY 'cleansed.kc_hr_people'::varchar(21), kc_hr_people.file_id) UNION ALL SELECT 'cleansed.kc_hr_people_addresses'::varchar(31) AS cleansed_table, kc_hr_people_addresses.file_id, count(*) AS counts FROM cleansed.kc_hr_people_addresses GROUP BY 'cleansed.kc_hr_people_addresses'::varchar(31), kc_hr_people_addresses.file_id) UNION ALL SELECT 'cleansed.kc_hr_people_phones'::varchar(28) AS cleansed_table, kc_hr_people_phones.file_id, count(*) AS counts FROM cleansed.kc_hr_people_phones GROUP BY 'cleansed.kc_hr_people_phones'::varchar(28), kc_hr_people_phones.file_id) UNION ALL SELECT 'cleansed.kc_hr_phones'::varchar(21) AS cleansed_table, kc_hr_phones.file_id, count(*) AS counts FROM cleansed.kc_hr_phones GROUP BY 'cleansed.kc_hr_phones'::varchar(21), kc_hr_phones.file_id) UNION ALL SELECT 'cleansed.kc_hr_territories'::varchar(26) AS cleansed_table, kc_hr_territories.file_id, count(*) AS counts FROM cleansed.kc_hr_territories GROUP BY 'cleansed.kc_hr_territories'::varchar(26), kc_hr_territories.file_id) UNION ALL SELECT 'customer_master.hco_demo'::varchar(24) AS cleansed_table, hco_demo.file_id, count(*) AS counts FROM customer_master.hco_demo GROUP BY 'customer_master.hco_demo'::varchar(24), hco_demo.file_id) UNION ALL SELECT 'customer_master.hcp_demo'::varchar(24) AS cleansed_table, hcp_demo.file_id, count(*) AS counts FROM customer_master.hcp_demo GROUP BY 'customer_master.hcp_demo'::varchar(24), hcp_demo.file_id) UNION ALL SELECT 'customer_master.tvcmid_merges'::varchar(29) AS cleansed_table, tvcmid_merges.file_id, count(*) AS counts FROM customer_master.tvcmid_merges GROUP BY 'customer_master.tvcmid_merges'::varchar(29), tvcmid_merges.file_id) UNION ALL SELECT 'customer_master.tvcmid_xref'::varchar(27) AS cleansed_table, tvcmid_xref.file_id, count(*) AS counts FROM customer_master.tvcmid_xref GROUP BY 'customer_master.tvcmid_xref'::varchar(27), tvcmid_xref.file_id) UNION ALL SELECT 'cleansed.nw_hr_sales_loa'::varchar(24) AS cleansed_table, nw_hr_sales_loa.file_id, count(*) AS counts FROM cleansed.nw_hr_sales_loa GROUP BY 'cleansed.nw_hr_sales_loa'::varchar(24), nw_hr_sales_loa.file_id) UNION ALL SELECT 'cleansed.nw_hr_sales_roster'::varchar(27) AS cleansed_table, nw_hr_sales_roster.file_id, count(*) AS counts FROM cleansed.nw_hr_sales_roster GROUP BY 'cleansed.nw_hr_sales_roster'::varchar(27), nw_hr_sales_roster.file_id) UNION ALL SELECT 'cleansed.nw_hr_terr_id_change'::varchar(29) AS cleansed_table, nw_hr_terr_id_change.file_id, count(*) AS counts FROM cleansed.nw_hr_terr_id_change GROUP BY 'cleansed.nw_hr_terr_id_change'::varchar(29), nw_hr_terr_id_change.file_id) A ORDER BY A.cleansed_table, A.file_id;

CREATE  VIEW metadata.datamart_table_counts AS
SELECT A.datamart_table, A.counts FROM (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((SELECT 'datamart.activity_hub'::varchar(21) AS datamart_table, count(*) AS counts FROM datamart.activity_hub GROUP BY 'datamart.activity_hub'::varchar(21) UNION ALL SELECT 'datamart.affiliations'::varchar(21) AS datamart_table, count(*) AS counts FROM datamart.affiliations GROUP BY 'datamart.affiliations'::varchar(21)) UNION ALL SELECT 'datamart.alternate_alignments'::varchar(29) AS datamart_table, count(*) AS counts FROM datamart.alternate_alignments GROUP BY 'datamart.alternate_alignments'::varchar(29)) UNION ALL SELECT 'datamart.alternate_call_plans'::varchar(29) AS datamart_table, count(*) AS counts FROM datamart.alternate_call_plans GROUP BY 'datamart.alternate_call_plans'::varchar(29)) UNION ALL SELECT 'datamart.call_plan'::varchar(18) AS datamart_table, count(*) AS counts FROM datamart.call_plan GROUP BY 'datamart.call_plan'::varchar(18)) UNION ALL SELECT 'datamart.chargeback_demographics'::varchar(32) AS datamart_table, count(*) AS counts FROM datamart.chargeback_demographics GROUP BY 'datamart.chargeback_demographics'::varchar(32)) UNION ALL SELECT 'datamart.chargebacks'::varchar(20) AS datamart_table, count(*) AS counts FROM datamart.chargebacks GROUP BY 'datamart.chargebacks'::varchar(20)) UNION ALL SELECT 'datamart.clozapine_sales'::varchar(24) AS datamart_table, count(*) AS counts FROM datamart.clozapine_sales GROUP BY 'datamart.clozapine_sales'::varchar(24)) UNION ALL SELECT 'datamart.cmop_rx'::varchar(16) AS datamart_table, count(*) AS counts FROM datamart.cmop_rx GROUP BY 'datamart.cmop_rx'::varchar(16)) UNION ALL SELECT 'datamart.copay'::varchar(14) AS datamart_table, count(*) AS counts FROM datamart.copay GROUP BY 'datamart.copay'::varchar(14)) UNION ALL SELECT 'datamart.current_alignment'::varchar(26) AS datamart_table, count(*) AS counts FROM datamart.current_alignment GROUP BY 'datamart.current_alignment'::varchar(26)) UNION ALL SELECT 'datamart.customer_hco_demographics'::varchar(34) AS datamart_table, count(*) AS counts FROM datamart.customer_hco_demographics GROUP BY 'datamart.customer_hco_demographics'::varchar(34)) UNION ALL SELECT 'datamart.customer_hcp_demographics'::varchar(34) AS datamart_table, count(*) AS counts FROM datamart.customer_hcp_demographics GROUP BY 'datamart.customer_hcp_demographics'::varchar(34)) UNION ALL SELECT 'datamart.customer_level_flags'::varchar(29) AS datamart_table, count(*) AS counts FROM datamart.customer_level_flags GROUP BY 'datamart.customer_level_flags'::varchar(29)) UNION ALL SELECT 'datamart.ddd'::varchar(12) AS datamart_table, count(*) AS counts FROM datamart.ddd GROUP BY 'datamart.ddd'::varchar(12)) UNION ALL SELECT 'datamart.ddd_md'::varchar(15) AS datamart_table, count(*) AS counts FROM datamart.ddd_md GROUP BY 'datamart.ddd_md'::varchar(15)) UNION ALL SELECT 'datamart.digital_sales_aid_analysis'::varchar(35) AS datamart_table, count(*) AS counts FROM datamart.digital_sales_aid_analysis GROUP BY 'datamart.digital_sales_aid_analysis'::varchar(35)) UNION ALL SELECT 'datamart.direct_sales'::varchar(21) AS datamart_table, count(*) AS counts FROM datamart.direct_sales GROUP BY 'datamart.direct_sales'::varchar(21)) UNION ALL SELECT 'datamart.direct_sales_demographics'::varchar(34) AS datamart_table, count(*) AS counts FROM datamart.direct_sales_demographics GROUP BY 'datamart.direct_sales_demographics'::varchar(34)) UNION ALL SELECT 'datamart.dnc'::varchar(12) AS datamart_table, count(*) AS counts FROM datamart.dnc GROUP BY 'datamart.dnc'::varchar(12)) UNION ALL SELECT 'datamart.do_not_promote'::varchar(23) AS datamart_table, count(*) AS counts FROM datamart.do_not_promote GROUP BY 'datamart.do_not_promote'::varchar(23)) UNION ALL SELECT 'datamart.event'::varchar(14) AS datamart_table, count(*) AS counts FROM datamart.event GROUP BY 'datamart.event'::varchar(14)) UNION ALL SELECT 'datamart.event_attendee'::varchar(23) AS datamart_table, count(*) AS counts FROM datamart.event_attendee GROUP BY 'datamart.event_attendee'::varchar(23)) UNION ALL SELECT 'datamart.event_attendee_count'::varchar(29) AS datamart_table, count(*) AS counts FROM datamart.event_attendee_count GROUP BY 'datamart.event_attendee_count'::varchar(29)) UNION ALL SELECT 'datamart.event_expense'::varchar(22) AS datamart_table, count(*) AS counts FROM datamart.event_expense GROUP BY 'datamart.event_expense'::varchar(22)) UNION ALL SELECT 'datamart.factory_sales_852'::varchar(26) AS datamart_table, count(*) AS counts FROM datamart.factory_sales_852 GROUP BY 'datamart.factory_sales_852'::varchar(26)) UNION ALL SELECT 'datamart.formulary'::varchar(18) AS datamart_table, count(*) AS counts FROM datamart.formulary GROUP BY 'datamart.formulary'::varchar(18)) UNION ALL SELECT 'datamart.ic_demographics_semi_annual_frozen_snapshot'::varchar(52) AS datamart_table, count(*) AS counts FROM datamart.ic_demographics_semi_annual_frozen_snapshot GROUP BY 'datamart.ic_demographics_semi_annual_frozen_snapshot'::varchar(52)) UNION ALL SELECT 'datamart.ic_demographics_snapshot'::varchar(33) AS datamart_table, count(*) AS counts FROM datamart.ic_demographics_snapshot GROUP BY 'datamart.ic_demographics_snapshot'::varchar(33)) UNION ALL SELECT 'datamart.ims_outlet_master'::varchar(26) AS datamart_table, count(*) AS counts FROM datamart.ims_outlet_master GROUP BY 'datamart.ims_outlet_master'::varchar(26)) UNION ALL SELECT 'datamart.leave_of_absence'::varchar(25) AS datamart_table, count(*) AS counts FROM datamart.leave_of_absence GROUP BY 'datamart.leave_of_absence'::varchar(25)) UNION ALL SELECT 'datamart.mm_ram_to_rsm'::varchar(22) AS datamart_table, count(*) AS counts FROM datamart.mm_ram_to_rsm GROUP BY 'datamart.mm_ram_to_rsm'::varchar(22)) UNION ALL SELECT 'datamart.oncology_adjusted_sales'::varchar(32) AS datamart_table, count(*) AS counts FROM datamart.oncology_adjusted_sales GROUP BY 'datamart.oncology_adjusted_sales'::varchar(32)) UNION ALL SELECT 'datamart.oncology_demographics'::varchar(30) AS datamart_table, count(*) AS counts FROM datamart.oncology_demographics GROUP BY 'datamart.oncology_demographics'::varchar(30)) UNION ALL SELECT 'datamart.oncology_fcr'::varchar(21) AS datamart_table, count(*) AS counts FROM datamart.oncology_fcr GROUP BY 'datamart.oncology_fcr'::varchar(21)) UNION ALL SELECT 'datamart.oncology_related_accounts'::varchar(34) AS datamart_table, count(*) AS counts FROM datamart.oncology_related_accounts GROUP BY 'datamart.oncology_related_accounts'::varchar(34)) UNION ALL SELECT 'datamart.oncology_sales_adjustments'::varchar(35) AS datamart_table, count(*) AS counts FROM datamart.oncology_sales_adjustments GROUP BY 'datamart.oncology_sales_adjustments'::varchar(35)) UNION ALL SELECT 'datamart.oncology_sales_deciles'::varchar(31) AS datamart_table, count(*) AS counts FROM datamart.oncology_sales_deciles GROUP BY 'datamart.oncology_sales_deciles'::varchar(31)) UNION ALL SELECT 'datamart.oncology_sales_quotas'::varchar(30) AS datamart_table, count(*) AS counts FROM datamart.oncology_sales_quotas GROUP BY 'datamart.oncology_sales_quotas'::varchar(30)) UNION ALL SELECT 'datamart.oncology_target_accounts'::varchar(33) AS datamart_table, count(*) AS counts FROM datamart.oncology_target_accounts GROUP BY 'datamart.oncology_target_accounts'::varchar(33)) UNION ALL SELECT 'datamart.plantrak_workbook'::varchar(26) AS datamart_table, count(*) AS counts FROM datamart.plantrak_workbook GROUP BY 'datamart.plantrak_workbook'::varchar(26)) UNION ALL SELECT 'datamart.prescriber_combined_demographics'::varchar(41) AS datamart_table, count(*) AS counts FROM datamart.prescriber_combined_demographics GROUP BY 'datamart.prescriber_combined_demographics'::varchar(41)) UNION ALL SELECT 'datamart.prescriber_rx'::varchar(22) AS datamart_table, count(*) AS counts FROM datamart.prescriber_rx GROUP BY 'datamart.prescriber_rx'::varchar(22)) UNION ALL SELECT 'datamart.product_basket'::varchar(23) AS datamart_table, count(*) AS counts FROM datamart.product_basket GROUP BY 'datamart.product_basket'::varchar(23)) UNION ALL SELECT 'datamart.rems_pharmacy'::varchar(22) AS datamart_table, count(*) AS counts FROM datamart.rems_pharmacy GROUP BY 'datamart.rems_pharmacy'::varchar(22)) UNION ALL SELECT 'datamart.rems_prescriber'::varchar(24) AS datamart_table, count(*) AS counts FROM datamart.rems_prescriber GROUP BY 'datamart.rems_prescriber'::varchar(24)) UNION ALL SELECT 'datamart.roster'::varchar(15) AS datamart_table, count(*) AS counts FROM datamart.roster GROUP BY 'datamart.roster'::varchar(15)) UNION ALL SELECT 'datamart.rx_deciles'::varchar(19) AS datamart_table, count(*) AS counts FROM datamart.rx_deciles GROUP BY 'datamart.rx_deciles'::varchar(19)) UNION ALL SELECT 'datamart.sample_shipment'::varchar(24) AS datamart_table, count(*) AS counts FROM datamart.sample_shipment GROUP BY 'datamart.sample_shipment'::varchar(24)) UNION ALL SELECT 'datamart.sfa_call'::varchar(17) AS datamart_table, count(*) AS counts FROM datamart.sfa_call GROUP BY 'datamart.sfa_call'::varchar(17)) UNION ALL SELECT 'datamart.sfa_call_detail'::varchar(24) AS datamart_table, count(*) AS counts FROM datamart.sfa_call_detail GROUP BY 'datamart.sfa_call_detail'::varchar(24)) UNION ALL SELECT 'datamart.sfa_demographics'::varchar(25) AS datamart_table, count(*) AS counts FROM datamart.sfa_demographics GROUP BY 'datamart.sfa_demographics'::varchar(25)) UNION ALL SELECT 'datamart.sfa_promotional_items'::varchar(30) AS datamart_table, count(*) AS counts FROM datamart.sfa_promotional_items GROUP BY 'datamart.sfa_promotional_items'::varchar(30)) UNION ALL SELECT 'datamart.sfa_reprints'::varchar(21) AS datamart_table, count(*) AS counts FROM datamart.sfa_reprints GROUP BY 'datamart.sfa_reprints'::varchar(21)) UNION ALL SELECT 'datamart.sfa_sample'::varchar(19) AS datamart_table, count(*) AS counts FROM datamart.sfa_sample GROUP BY 'datamart.sfa_sample'::varchar(19)) UNION ALL SELECT 'datamart.sfa_survey'::varchar(19) AS datamart_table, count(*) AS counts FROM datamart.sfa_survey GROUP BY 'datamart.sfa_survey'::varchar(19)) UNION ALL SELECT 'datamart.specialty_pharmacy_enrollment'::varchar(38) AS datamart_table, count(*) AS counts FROM datamart.specialty_pharmacy_enrollment GROUP BY 'datamart.specialty_pharmacy_enrollment'::varchar(38)) UNION ALL SELECT 'datamart.specialty_pharmacy_rx'::varchar(30) AS datamart_table, count(*) AS counts FROM datamart.specialty_pharmacy_rx GROUP BY 'datamart.specialty_pharmacy_rx'::varchar(30)) UNION ALL SELECT 'datamart.specialty_pharmacy_shipment'::varchar(36) AS datamart_table, count(*) AS counts FROM datamart.specialty_pharmacy_shipment GROUP BY 'datamart.specialty_pharmacy_shipment'::varchar(36)) UNION ALL SELECT 'datamart.territory_history'::varchar(26) AS datamart_table, count(*) AS counts FROM datamart.territory_history GROUP BY 'datamart.territory_history'::varchar(26)) UNION ALL SELECT 'datamart.time_off_territory'::varchar(27) AS datamart_table, count(*) AS counts FROM datamart.time_off_territory GROUP BY 'datamart.time_off_territory'::varchar(27)) UNION ALL SELECT 'datamart.touchpoint_call'::varchar(24) AS datamart_table, count(*) AS counts FROM datamart.touchpoint_call GROUP BY 'datamart.touchpoint_call'::varchar(24)) UNION ALL SELECT 'datamart.touchpoint_presentation'::varchar(32) AS datamart_table, count(*) AS counts FROM datamart.touchpoint_presentation GROUP BY 'datamart.touchpoint_presentation'::varchar(32)) UNION ALL SELECT 'datamart.tvcmid_xref'::varchar(20) AS datamart_table, count(*) AS counts FROM datamart.tvcmid_xref GROUP BY 'datamart.tvcmid_xref'::varchar(20)) UNION ALL SELECT 'datamart.tw_account'::varchar(19) AS datamart_table, count(*) AS counts FROM datamart.tw_account GROUP BY 'datamart.tw_account'::varchar(19)) UNION ALL SELECT 'datamart.tw_address'::varchar(19) AS datamart_table, count(*) AS counts FROM datamart.tw_address GROUP BY 'datamart.tw_address'::varchar(19)) UNION ALL SELECT 'datamart.tw_address_xref'::varchar(24) AS datamart_table, count(*) AS counts FROM datamart.tw_address_xref GROUP BY 'datamart.tw_address_xref'::varchar(24)) UNION ALL SELECT 'datamart.unmatched_caremark_md_id'::varchar(33) AS datamart_table, count(*) AS counts FROM datamart.unmatched_caremark_md_id GROUP BY 'datamart.unmatched_caremark_md_id'::varchar(33)) UNION ALL SELECT 'datamart.veeva_sync'::varchar(19) AS datamart_table, count(*) AS counts FROM datamart.veeva_sync GROUP BY 'datamart.veeva_sync'::varchar(19)) UNION ALL SELECT 'datamart.wholesaler_sales_867'::varchar(29) AS datamart_table, count(*) AS counts FROM datamart.wholesaler_sales_867 GROUP BY 'datamart.wholesaler_sales_867'::varchar(29)) A;

CREATE  VIEW metadata.raw_view_counts_by_file_id AS
 SELECT A.raw_view,
        A.file_id,
        A.counts
 FROM ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( SELECT 'raw.addresses'::varchar(13) AS raw_view,
        addresses.file_id,
        count(*) AS counts
 FROM raw.addresses
 GROUP BY 'raw.addresses'::varchar(13),
          addresses.file_id UNION ALL  SELECT 'raw.associates'::varchar(14) AS raw_view,
        associates.file_id,
        count(*) AS counts
 FROM raw.associates
 GROUP BY 'raw.associates'::varchar(14),
          associates.file_id) UNION ALL  SELECT 'raw.aud_associates'::varchar(18) AS raw_view,
        aud_associates.file_id,
        count(*) AS counts
 FROM raw.aud_associates
 GROUP BY 'raw.aud_associates'::varchar(18),
          aud_associates.file_id) UNION ALL  SELECT 'raw.c_bo_hce_alt_identifier'::varchar(27) AS raw_view,
        c_bo_hce_alt_identifier.file_id,
        count(*) AS counts
 FROM raw.c_bo_hce_alt_identifier
 GROUP BY 'raw.c_bo_hce_alt_identifier'::varchar(27),
          c_bo_hce_alt_identifier.file_id) UNION ALL  SELECT 'raw.c_bo_hce_raw_dea'::varchar(20) AS raw_view,
        c_bo_hce_raw_dea.file_id,
        count(*) AS counts
 FROM raw.c_bo_hce_raw_dea
 GROUP BY 'raw.c_bo_hce_raw_dea'::varchar(20),
          c_bo_hce_raw_dea.file_id) UNION ALL  SELECT 'raw.c_bo_hcp_detail'::varchar(19) AS raw_view,
        c_bo_hcp_detail.file_id,
        count(*) AS counts
 FROM raw.c_bo_hcp_detail
 GROUP BY 'raw.c_bo_hcp_detail'::varchar(19),
          c_bo_hcp_detail.file_id) UNION ALL  SELECT 'raw.c_bo_ims_flag'::varchar(17) AS raw_view,
        c_bo_ims_flag.file_id,
        count(*) AS counts
 FROM raw.c_bo_ims_flag
 GROUP BY 'raw.c_bo_ims_flag'::varchar(17),
          c_bo_ims_flag.file_id) UNION ALL  SELECT 'raw.c_bo_teva_flag'::varchar(18) AS raw_view,
        c_bo_teva_flag.file_id,
        count(*) AS counts
 FROM raw.c_bo_teva_flag
 GROUP BY 'raw.c_bo_teva_flag'::varchar(18),
          c_bo_teva_flag.file_id) UNION ALL  SELECT 'raw.c_bo_teva_sample_elig'::varchar(25) AS raw_view,
        c_bo_teva_sample_elig.file_id,
        count(*) AS counts
 FROM raw.c_bo_teva_sample_elig
 GROUP BY 'raw.c_bo_teva_sample_elig'::varchar(25),
          c_bo_teva_sample_elig.file_id) UNION ALL  SELECT 'raw.ext_ahm_event'::varchar(17) AS raw_view,
        ext_ahm_event.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_event
 GROUP BY 'raw.ext_ahm_event'::varchar(17),
          ext_ahm_event.file_id) UNION ALL  SELECT 'raw.ext_ahm_event_attendee'::varchar(26) AS raw_view,
        ext_ahm_event_attendee.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_event_attendee
 GROUP BY 'raw.ext_ahm_event_attendee'::varchar(26),
          ext_ahm_event_attendee.file_id) UNION ALL  SELECT 'raw.ext_ahm_event_count'::varchar(23) AS raw_view,
        ext_ahm_event_count.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_event_count
 GROUP BY 'raw.ext_ahm_event_count'::varchar(23),
          ext_ahm_event_count.file_id) UNION ALL  SELECT 'raw.ext_ahm_event_expense'::varchar(25) AS raw_view,
        ext_ahm_event_expense.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_event_expense
 GROUP BY 'raw.ext_ahm_event_expense'::varchar(25),
          ext_ahm_event_expense.file_id) UNION ALL  SELECT 'raw.ext_ahm_event_host'::varchar(22) AS raw_view,
        ext_ahm_event_host.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_event_host
 GROUP BY 'raw.ext_ahm_event_host'::varchar(22),
          ext_ahm_event_host.file_id) UNION ALL  SELECT 'raw.ext_ahm_event_product'::varchar(25) AS raw_view,
        ext_ahm_event_product.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_event_product
 GROUP BY 'raw.ext_ahm_event_product'::varchar(25),
          ext_ahm_event_product.file_id) UNION ALL  SELECT 'raw.ext_ahm_event_speaker'::varchar(25) AS raw_view,
        ext_ahm_event_speaker.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_event_speaker
 GROUP BY 'raw.ext_ahm_event_speaker'::varchar(25),
          ext_ahm_event_speaker.file_id) UNION ALL  SELECT 'raw.ext_ahm_organization'::varchar(24) AS raw_view,
        ext_ahm_organization.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_organization
 GROUP BY 'raw.ext_ahm_organization'::varchar(24),
          ext_ahm_organization.file_id) UNION ALL  SELECT 'raw.ext_ahm_speaker_contract'::varchar(28) AS raw_view,
        ext_ahm_speaker_contract.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_speaker_contract
 GROUP BY 'raw.ext_ahm_speaker_contract'::varchar(28),
          ext_ahm_speaker_contract.file_id) UNION ALL  SELECT 'raw.ext_ahm_speaker_license'::varchar(27) AS raw_view,
        ext_ahm_speaker_license.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_speaker_license
 GROUP BY 'raw.ext_ahm_speaker_license'::varchar(27),
          ext_ahm_speaker_license.file_id) UNION ALL  SELECT 'raw.ext_ahm_speaker_profile'::varchar(27) AS raw_view,
        ext_ahm_speaker_profile.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_speaker_profile
 GROUP BY 'raw.ext_ahm_speaker_profile'::varchar(27),
          ext_ahm_speaker_profile.file_id) UNION ALL  SELECT 'raw.ext_ahm_speaker_training'::varchar(28) AS raw_view,
        ext_ahm_speaker_training.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_speaker_training
 GROUP BY 'raw.ext_ahm_speaker_training'::varchar(28),
          ext_ahm_speaker_training.file_id) UNION ALL  SELECT 'raw.ext_ahm_topic_product'::varchar(25) AS raw_view,
        ext_ahm_topic_product.file_id,
        count(*) AS counts
 FROM raw.ext_ahm_topic_product
 GROUP BY 'raw.ext_ahm_topic_product'::varchar(25),
          ext_ahm_topic_product.file_id) UNION ALL  SELECT 'raw.ext_anda_sales'::varchar(18) AS raw_view,
        ext_anda_sales.file_id,
        count(*) AS counts
 FROM raw.ext_anda_sales
 GROUP BY 'raw.ext_anda_sales'::varchar(18),
          ext_anda_sales.file_id) UNION ALL  SELECT 'raw.ext_asi_copay_detail_wkly'::varchar(29) AS raw_view,
        ext_asi_copay_detail_wkly.file_id,
        count(*) AS counts
 FROM raw.ext_asi_copay_detail_wkly
 GROUP BY 'raw.ext_asi_copay_detail_wkly'::varchar(29),
          ext_asi_copay_detail_wkly.file_id) UNION ALL  SELECT 'raw.ext_asi_copay_detail_wkly_cgd'::varchar(33) AS raw_view,
        ext_asi_copay_detail_wkly_cgd.file_id,
        count(*) AS counts
 FROM raw.ext_asi_copay_detail_wkly_cgd
 GROUP BY 'raw.ext_asi_copay_detail_wkly_cgd'::varchar(33),
          ext_asi_copay_detail_wkly_cgd.file_id) UNION ALL  SELECT 'raw.ext_asi_copay_detail_wkly_combo_2'::varchar(37) AS raw_view,
        ext_asi_copay_detail_wkly_combo_2.file_id,
        count(*) AS counts
 FROM raw.ext_asi_copay_detail_wkly_combo_2
 GROUP BY 'raw.ext_asi_copay_detail_wkly_combo_2'::varchar(37),
          ext_asi_copay_detail_wkly_combo_2.file_id) UNION ALL  SELECT 'raw.ext_asi_copay_detail_wkly_combo_3'::varchar(37) AS raw_view,
        ext_asi_copay_detail_wkly_combo_3.file_id,
        count(*) AS counts
 FROM raw.ext_asi_copay_detail_wkly_combo_3
 GROUP BY 'raw.ext_asi_copay_detail_wkly_combo_3'::varchar(37),
          ext_asi_copay_detail_wkly_combo_3.file_id) UNION ALL  SELECT 'raw.ext_asi_copay_detail_wkly_pskw'::varchar(34) AS raw_view,
        ext_asi_copay_detail_wkly_pskw.file_id,
        count(*) AS counts
 FROM raw.ext_asi_copay_detail_wkly_pskw
 GROUP BY 'raw.ext_asi_copay_detail_wkly_pskw'::varchar(34),
          ext_asi_copay_detail_wkly_pskw.file_id) UNION ALL  SELECT 'raw.ext_asi_copay_redemptions'::varchar(29) AS raw_view,
        ext_asi_copay_redemptions.file_id,
        count(*) AS counts
 FROM raw.ext_asi_copay_redemptions
 GROUP BY 'raw.ext_asi_copay_redemptions'::varchar(29),
          ext_asi_copay_redemptions.file_id) UNION ALL  SELECT 'raw.ext_asi_redemptions'::varchar(23) AS raw_view,
        ext_asi_redemptions.file_id,
        count(*) AS counts
 FROM raw.ext_asi_redemptions
 GROUP BY 'raw.ext_asi_redemptions'::varchar(23),
          ext_asi_redemptions.file_id) UNION ALL  SELECT 'raw.ext_asi_voucher_detail_wkly_combo_1'::varchar(39) AS raw_view,
        ext_asi_voucher_detail_wkly_combo_1.file_id,
        count(*) AS counts
 FROM raw.ext_asi_voucher_detail_wkly_combo_1
 GROUP BY 'raw.ext_asi_voucher_detail_wkly_combo_1'::varchar(39),
          ext_asi_voucher_detail_wkly_combo_1.file_id) UNION ALL  SELECT 'raw.ext_asi_voucher_detail_wkly_voucher'::varchar(39) AS raw_view,
        ext_asi_voucher_detail_wkly_voucher.file_id,
        count(*) AS counts
 FROM raw.ext_asi_voucher_detail_wkly_voucher
 GROUP BY 'raw.ext_asi_voucher_detail_wkly_voucher'::varchar(39),
          ext_asi_voucher_detail_wkly_voucher.file_id) UNION ALL  SELECT 'raw.ext_call_goals_kc'::varchar(21) AS raw_view,
        ext_call_goals_kc.file_id,
        count(*) AS counts
 FROM raw.ext_call_goals_kc
 GROUP BY 'raw.ext_call_goals_kc'::varchar(21),
          ext_call_goals_kc.file_id) UNION ALL  SELECT 'raw.ext_caremark_rx2_aob'::varchar(24) AS raw_view,
        ext_caremark_rx2_aob.file_id,
        count(*) AS counts
 FROM raw.ext_caremark_rx2_aob
 GROUP BY 'raw.ext_caremark_rx2_aob'::varchar(24),
          ext_caremark_rx2_aob.file_id) UNION ALL  SELECT 'raw.ext_caremark_rx2_medicare'::varchar(29) AS raw_view,
        ext_caremark_rx2_medicare.file_id,
        count(*) AS counts
 FROM raw.ext_caremark_rx2_medicare
 GROUP BY 'raw.ext_caremark_rx2_medicare'::varchar(29),
          ext_caremark_rx2_medicare.file_id) UNION ALL  SELECT 'raw.ext_clm_presentation_slide_vc'::varchar(33) AS raw_view,
        ext_clm_presentation_slide_vc.file_id,
        count(*) AS counts
 FROM raw.ext_clm_presentation_slide_vc
 GROUP BY 'raw.ext_clm_presentation_slide_vc'::varchar(33),
          ext_clm_presentation_slide_vc.file_id) UNION ALL  SELECT 'raw.ext_clm_presentation_vod__c'::varchar(31) AS raw_view,
        ext_clm_presentation_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_clm_presentation_vod__c
 GROUP BY 'raw.ext_clm_presentation_vod__c'::varchar(31),
          ext_clm_presentation_vod__c.file_id) UNION ALL  SELECT 'raw.ext_clozapine_unit_ap'::varchar(25) AS raw_view,
        ext_clozapine_unit_ap.file_id,
        count(*) AS counts
 FROM raw.ext_clozapine_unit_ap
 GROUP BY 'raw.ext_clozapine_unit_ap'::varchar(25),
          ext_clozapine_unit_ap.file_id) UNION ALL  SELECT 'raw.ext_cmop_rx_data_teva'::varchar(25) AS raw_view,
        ext_cmop_rx_data_teva.file_id,
        count(*) AS counts
 FROM raw.ext_cmop_rx_data_teva
 GROUP BY 'raw.ext_cmop_rx_data_teva'::varchar(25),
          ext_cmop_rx_data_teva.file_id) UNION ALL  SELECT 'raw.ext_customer_flags'::varchar(22) AS raw_view,
        ext_customer_flags.file_id,
        count(*) AS counts
 FROM raw.ext_customer_flags
 GROUP BY 'raw.ext_customer_flags'::varchar(22),
          ext_customer_flags.file_id) UNION ALL  SELECT 'raw.ext_ddd_dod_qty'::varchar(19) AS raw_view,
        ext_ddd_dod_qty.file_id,
        count(*) AS counts
 FROM raw.ext_ddd_dod_qty
 GROUP BY 'raw.ext_ddd_dod_qty'::varchar(19),
          ext_ddd_dod_qty.file_id) UNION ALL  SELECT 'raw.ext_ddd_dod_sales_ms'::varchar(24) AS raw_view,
        ext_ddd_dod_sales_ms.file_id,
        count(*) AS counts
 FROM raw.ext_ddd_dod_sales_ms
 GROUP BY 'raw.ext_ddd_dod_sales_ms'::varchar(24),
          ext_ddd_dod_sales_ms.file_id) UNION ALL  SELECT 'raw.ext_ddd_dod_sales_pd'::varchar(24) AS raw_view,
        ext_ddd_dod_sales_pd.file_id,
        count(*) AS counts
 FROM raw.ext_ddd_dod_sales_pd
 GROUP BY 'raw.ext_ddd_dod_sales_pd'::varchar(24),
          ext_ddd_dod_sales_pd.file_id) UNION ALL  SELECT 'raw.ext_diplomat_enrollment'::varchar(27) AS raw_view,
        ext_diplomat_enrollment.file_id,
        count(*) AS counts
 FROM raw.ext_diplomat_enrollment
 GROUP BY 'raw.ext_diplomat_enrollment'::varchar(27),
          ext_diplomat_enrollment.file_id) UNION ALL  SELECT 'raw.ext_diplomat_rx'::varchar(19) AS raw_view,
        ext_diplomat_rx.file_id,
        count(*) AS counts
 FROM raw.ext_diplomat_rx
 GROUP BY 'raw.ext_diplomat_rx'::varchar(19),
          ext_diplomat_rx.file_id) UNION ALL  SELECT 'raw.ext_f60q'::varchar(12) AS raw_view,
        ext_f60q.file_id,
        count(*) AS counts
 FROM raw.ext_f60q
 GROUP BY 'raw.ext_f60q'::varchar(12),
          ext_f60q.file_id) UNION ALL  SELECT 'raw.ext_factory_sales_852'::varchar(25) AS raw_view,
        ext_factory_sales_852.file_id,
        count(*) AS counts
 FROM raw.ext_factory_sales_852
 GROUP BY 'raw.ext_factory_sales_852'::varchar(25),
          ext_factory_sales_852.file_id) UNION ALL  SELECT 'raw.ext_ftf_accounts'::varchar(20) AS raw_view,
        ext_ftf_accounts.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_accounts
 GROUP BY 'raw.ext_ftf_accounts'::varchar(20),
          ext_ftf_accounts.file_id) UNION ALL  SELECT 'raw.ext_ftf_control'::varchar(19) AS raw_view,
        ext_ftf_control.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_control
 GROUP BY 'raw.ext_ftf_control'::varchar(19),
          ext_ftf_control.file_id) UNION ALL  SELECT 'raw.ext_ftf_copays'::varchar(18) AS raw_view,
        ext_ftf_copays.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_copays
 GROUP BY 'raw.ext_ftf_copays'::varchar(18),
          ext_ftf_copays.file_id) UNION ALL  SELECT 'raw.ext_ftf_drug_class_thrptc_area'::varchar(34) AS raw_view,
        ext_ftf_drug_class_thrptc_area.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_drug_class_thrptc_area
 GROUP BY 'raw.ext_ftf_drug_class_thrptc_area'::varchar(34),
          ext_ftf_drug_class_thrptc_area.file_id) UNION ALL  SELECT 'raw.ext_ftf_drugs'::varchar(17) AS raw_view,
        ext_ftf_drugs.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_drugs
 GROUP BY 'raw.ext_ftf_drugs'::varchar(17),
          ext_ftf_drugs.file_id) UNION ALL  SELECT 'raw.ext_ftf_formularies'::varchar(23) AS raw_view,
        ext_ftf_formularies.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_formularies
 GROUP BY 'raw.ext_ftf_formularies'::varchar(23),
          ext_ftf_formularies.file_id) UNION ALL  SELECT 'raw.ext_ftf_health_plan_geography'::varchar(33) AS raw_view,
        ext_ftf_health_plan_geography.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_health_plan_geography
 GROUP BY 'raw.ext_ftf_health_plan_geography'::varchar(33),
          ext_ftf_health_plan_geography.file_id) UNION ALL  SELECT 'raw.ext_ftf_health_plans'::varchar(24) AS raw_view,
        ext_ftf_health_plans.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_health_plans
 GROUP BY 'raw.ext_ftf_health_plans'::varchar(24),
          ext_ftf_health_plans.file_id) UNION ALL  SELECT 'raw.ext_ftf_ims_bridge'::varchar(22) AS raw_view,
        ext_ftf_ims_bridge.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_ims_bridge
 GROUP BY 'raw.ext_ftf_ims_bridge'::varchar(22),
          ext_ftf_ims_bridge.file_id) UNION ALL  SELECT 'raw.ext_ftf_pbms'::varchar(16) AS raw_view,
        ext_ftf_pbms.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_pbms
 GROUP BY 'raw.ext_ftf_pbms'::varchar(16),
          ext_ftf_pbms.file_id) UNION ALL  SELECT 'raw.ext_ftf_restrictions'::varchar(24) AS raw_view,
        ext_ftf_restrictions.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_restrictions
 GROUP BY 'raw.ext_ftf_restrictions'::varchar(24),
          ext_ftf_restrictions.file_id) UNION ALL  SELECT 'raw.ext_ftf_teva_wk_bridge'::varchar(26) AS raw_view,
        ext_ftf_teva_wk_bridge.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_teva_wk_bridge
 GROUP BY 'raw.ext_ftf_teva_wk_bridge'::varchar(26),
          ext_ftf_teva_wk_bridge.file_id) UNION ALL  SELECT 'raw.ext_ftf_tiers'::varchar(17) AS raw_view,
        ext_ftf_tiers.file_id,
        count(*) AS counts
 FROM raw.ext_ftf_tiers
 GROUP BY 'raw.ext_ftf_tiers'::varchar(17),
          ext_ftf_tiers.file_id) UNION ALL  SELECT 'raw.ext_hcos_aco_detail'::varchar(23) AS raw_view,
        ext_hcos_aco_detail.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_aco_detail
 GROUP BY 'raw.ext_hcos_aco_detail'::varchar(23),
          ext_hcos_aco_detail.file_id) UNION ALL  SELECT 'raw.ext_hcos_aco_detail_fact'::varchar(28) AS raw_view,
        ext_hcos_aco_detail_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_aco_detail_fact
 GROUP BY 'raw.ext_hcos_aco_detail_fact'::varchar(28),
          ext_hcos_aco_detail_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_aco_org_fact'::varchar(25) AS raw_view,
        ext_hcos_aco_org_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_aco_org_fact
 GROUP BY 'raw.ext_hcos_aco_org_fact'::varchar(25),
          ext_hcos_aco_org_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_aco_professional_rstr'::varchar(34) AS raw_view,
        ext_hcos_aco_professional_rstr.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_aco_professional_rstr
 GROUP BY 'raw.ext_hcos_aco_professional_rstr'::varchar(34),
          ext_hcos_aco_professional_rstr.file_id) UNION ALL  SELECT 'raw.ext_hcos_aco_type'::varchar(21) AS raw_view,
        ext_hcos_aco_type.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_aco_type
 GROUP BY 'raw.ext_hcos_aco_type'::varchar(21),
          ext_hcos_aco_type.file_id) UNION ALL  SELECT 'raw.ext_hcos_affiliation_type'::varchar(29) AS raw_view,
        ext_hcos_affiliation_type.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_affiliation_type
 GROUP BY 'raw.ext_hcos_affiliation_type'::varchar(29),
          ext_hcos_affiliation_type.file_id) UNION ALL  SELECT 'raw.ext_hcos_bed_cluster_type'::varchar(29) AS raw_view,
        ext_hcos_bed_cluster_type.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_bed_cluster_type
 GROUP BY 'raw.ext_hcos_bed_cluster_type'::varchar(29),
          ext_hcos_bed_cluster_type.file_id) UNION ALL  SELECT 'raw.ext_hcos_bed_fact'::varchar(21) AS raw_view,
        ext_hcos_bed_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_bed_fact
 GROUP BY 'raw.ext_hcos_bed_fact'::varchar(21),
          ext_hcos_bed_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_bed_type'::varchar(21) AS raw_view,
        ext_hcos_bed_type.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_bed_type
 GROUP BY 'raw.ext_hcos_bed_type'::varchar(21),
          ext_hcos_bed_type.file_id) UNION ALL  SELECT 'raw.ext_hcos_business'::varchar(21) AS raw_view,
        ext_hcos_business.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_business
 GROUP BY 'raw.ext_hcos_business'::varchar(21),
          ext_hcos_business.file_id) UNION ALL  SELECT 'raw.ext_hcos_business_detail'::varchar(28) AS raw_view,
        ext_hcos_business_detail.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_business_detail
 GROUP BY 'raw.ext_hcos_business_detail'::varchar(28),
          ext_hcos_business_detail.file_id) UNION ALL  SELECT 'raw.ext_hcos_business_detail_fact'::varchar(33) AS raw_view,
        ext_hcos_business_detail_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_business_detail_fact
 GROUP BY 'raw.ext_hcos_business_detail_fact'::varchar(33),
          ext_hcos_business_detail_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_class_of_trade'::varchar(27) AS raw_view,
        ext_hcos_class_of_trade.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_class_of_trade
 GROUP BY 'raw.ext_hcos_class_of_trade'::varchar(27),
          ext_hcos_class_of_trade.file_id) UNION ALL  SELECT 'raw.ext_hcos_clinical_code'::varchar(26) AS raw_view,
        ext_hcos_clinical_code.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_clinical_code
 GROUP BY 'raw.ext_hcos_clinical_code'::varchar(26),
          ext_hcos_clinical_code.file_id) UNION ALL  SELECT 'raw.ext_hcos_clinical_fact'::varchar(26) AS raw_view,
        ext_hcos_clinical_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_clinical_fact
 GROUP BY 'raw.ext_hcos_clinical_fact'::varchar(26),
          ext_hcos_clinical_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_clinical_fact_national'::varchar(35) AS raw_view,
        ext_hcos_clinical_fact_national.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_clinical_fact_national
 GROUP BY 'raw.ext_hcos_clinical_fact_national'::varchar(35),
          ext_hcos_clinical_fact_national.file_id) UNION ALL  SELECT 'raw.ext_hcos_clinical_fact_state'::varchar(32) AS raw_view,
        ext_hcos_clinical_fact_state.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_clinical_fact_state
 GROUP BY 'raw.ext_hcos_clinical_fact_state'::varchar(32),
          ext_hcos_clinical_fact_state.file_id) UNION ALL  SELECT 'raw.ext_hcos_contact_affiltn_fact'::varchar(33) AS raw_view,
        ext_hcos_contact_affiltn_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_contact_affiltn_fact
 GROUP BY 'raw.ext_hcos_contact_affiltn_fact'::varchar(33),
          ext_hcos_contact_affiltn_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_cot_fact'::varchar(21) AS raw_view,
        ext_hcos_cot_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_cot_fact
 GROUP BY 'raw.ext_hcos_cot_fact'::varchar(21),
          ext_hcos_cot_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_financial_fact'::varchar(27) AS raw_view,
        ext_hcos_financial_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_financial_fact
 GROUP BY 'raw.ext_hcos_financial_fact'::varchar(27),
          ext_hcos_financial_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_identifier_fact'::varchar(28) AS raw_view,
        ext_hcos_identifier_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_identifier_fact
 GROUP BY 'raw.ext_hcos_identifier_fact'::varchar(28),
          ext_hcos_identifier_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_identifier_type'::varchar(28) AS raw_view,
        ext_hcos_identifier_type.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_identifier_type
 GROUP BY 'raw.ext_hcos_identifier_type'::varchar(28),
          ext_hcos_identifier_type.file_id) UNION ALL  SELECT 'raw.ext_hcos_indentifier_cat_type'::varchar(33) AS raw_view,
        ext_hcos_indentifier_cat_type.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_indentifier_cat_type
 GROUP BY 'raw.ext_hcos_indentifier_cat_type'::varchar(33),
          ext_hcos_indentifier_cat_type.file_id) UNION ALL  SELECT 'raw.ext_hcos_indentifier_term_type'::varchar(34) AS raw_view,
        ext_hcos_indentifier_term_type.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_indentifier_term_type
 GROUP BY 'raw.ext_hcos_indentifier_term_type'::varchar(34),
          ext_hcos_indentifier_term_type.file_id) UNION ALL  SELECT 'raw.ext_hcos_professional'::varchar(25) AS raw_view,
        ext_hcos_professional.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_professional
 GROUP BY 'raw.ext_hcos_professional'::varchar(25),
          ext_hcos_professional.file_id) UNION ALL  SELECT 'raw.ext_hcos_professional_detail'::varchar(32) AS raw_view,
        ext_hcos_professional_detail.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_professional_detail
 GROUP BY 'raw.ext_hcos_professional_detail'::varchar(32),
          ext_hcos_professional_detail.file_id) UNION ALL  SELECT 'raw.ext_hcos_professional_detail_fact'::varchar(37) AS raw_view,
        ext_hcos_professional_detail_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_professional_detail_fact
 GROUP BY 'raw.ext_hcos_professional_detail_fact'::varchar(37),
          ext_hcos_professional_detail_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_professional_spec_fact'::varchar(35) AS raw_view,
        ext_hcos_professional_spec_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_professional_spec_fact
 GROUP BY 'raw.ext_hcos_professional_spec_fact'::varchar(35),
          ext_hcos_professional_spec_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_professional_specialty'::varchar(35) AS raw_view,
        ext_hcos_professional_specialty.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_professional_specialty
 GROUP BY 'raw.ext_hcos_professional_specialty'::varchar(35),
          ext_hcos_professional_specialty.file_id) UNION ALL  SELECT 'raw.ext_hcos_professional_title'::varchar(31) AS raw_view,
        ext_hcos_professional_title.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_professional_title
 GROUP BY 'raw.ext_hcos_professional_title'::varchar(31),
          ext_hcos_professional_title.file_id) UNION ALL  SELECT 'raw.ext_hcos_provider_affiliation_fact'::varchar(38) AS raw_view,
        ext_hcos_provider_affiliation_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_provider_affiliation_fact
 GROUP BY 'raw.ext_hcos_provider_affiliation_fact'::varchar(38),
          ext_hcos_provider_affiliation_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_relationship_fact'::varchar(30) AS raw_view,
        ext_hcos_relationship_fact.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_relationship_fact
 GROUP BY 'raw.ext_hcos_relationship_fact'::varchar(30),
          ext_hcos_relationship_fact.file_id) UNION ALL  SELECT 'raw.ext_hcos_relationship_type'::varchar(30) AS raw_view,
        ext_hcos_relationship_type.file_id,
        count(*) AS counts
 FROM raw.ext_hcos_relationship_type
 GROUP BY 'raw.ext_hcos_relationship_type'::varchar(30),
          ext_hcos_relationship_type.file_id) UNION ALL  SELECT 'raw.ext_i3_by_strength_rx'::varchar(25) AS raw_view,
        ext_i3_by_strength_rx.file_id,
        count(*) AS counts
 FROM raw.ext_i3_by_strength_rx
 GROUP BY 'raw.ext_i3_by_strength_rx'::varchar(25),
          ext_i3_by_strength_rx.file_id) UNION ALL  SELECT 'raw.ext_i3_rx'::varchar(13) AS raw_view,
        ext_i3_rx.file_id,
        count(*) AS counts
 FROM raw.ext_i3_rx
 GROUP BY 'raw.ext_i3_rx'::varchar(13),
          ext_i3_rx.file_id) UNION ALL  SELECT 'raw.ext_i3_tysabri_rx'::varchar(21) AS raw_view,
        ext_i3_tysabri_rx.file_id,
        count(*) AS counts
 FROM raw.ext_i3_tysabri_rx
 GROUP BY 'raw.ext_i3_tysabri_rx'::varchar(21),
          ext_i3_tysabri_rx.file_id) UNION ALL  SELECT 'raw.ext_ids_call2_detail_vod__c'::varchar(31) AS raw_view,
        ext_ids_call2_detail_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_ids_call2_detail_vod__c
 GROUP BY 'raw.ext_ids_call2_detail_vod__c'::varchar(31),
          ext_ids_call2_detail_vod__c.file_id) UNION ALL  SELECT 'raw.ext_ids_call2_vod__c'::varchar(24) AS raw_view,
        ext_ids_call2_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_ids_call2_vod__c
 GROUP BY 'raw.ext_ids_call2_vod__c'::varchar(24),
          ext_ids_call2_vod__c.file_id) UNION ALL  SELECT 'raw.ext_ims_drm45_m'::varchar(19) AS raw_view,
        ext_ims_drm45_m.file_id,
        count(*) AS counts
 FROM raw.ext_ims_drm45_m
 GROUP BY 'raw.ext_ims_drm45_m'::varchar(19),
          ext_ims_drm45_m.file_id) UNION ALL  SELECT 'raw.ext_ims_drm45_w'::varchar(19) AS raw_view,
        ext_ims_drm45_w.file_id,
        count(*) AS counts
 FROM raw.ext_ims_drm45_w
 GROUP BY 'raw.ext_ims_drm45_w'::varchar(19),
          ext_ims_drm45_w.file_id) UNION ALL  SELECT 'raw.ext_ims_mhj_cnt_m'::varchar(21) AS raw_view,
        ext_ims_mhj_cnt_m.file_id,
        count(*) AS counts
 FROM raw.ext_ims_mhj_cnt_m
 GROUP BY 'raw.ext_ims_mhj_cnt_m'::varchar(21),
          ext_ims_mhj_cnt_m.file_id) UNION ALL  SELECT 'raw.ext_ims_mhj_cnt_w'::varchar(21) AS raw_view,
        ext_ims_mhj_cnt_w.file_id,
        count(*) AS counts
 FROM raw.ext_ims_mhj_cnt_w
 GROUP BY 'raw.ext_ims_mhj_cnt_w'::varchar(21),
          ext_ims_mhj_cnt_w.file_id) UNION ALL  SELECT 'raw.ext_ims_mhj_control_m'::varchar(25) AS raw_view,
        ext_ims_mhj_control_m.file_id,
        count(*) AS counts
 FROM raw.ext_ims_mhj_control_m
 GROUP BY 'raw.ext_ims_mhj_control_m'::varchar(25),
          ext_ims_mhj_control_m.file_id) UNION ALL  SELECT 'raw.ext_ims_mhj_control_w'::varchar(25) AS raw_view,
        ext_ims_mhj_control_w.file_id,
        count(*) AS counts
 FROM raw.ext_ims_mhj_control_w
 GROUP BY 'raw.ext_ims_mhj_control_w'::varchar(25),
          ext_ims_mhj_control_w.file_id) UNION ALL  SELECT 'raw.ext_ims_mhj_qty_m'::varchar(21) AS raw_view,
        ext_ims_mhj_qty_m.file_id,
        count(*) AS counts
 FROM raw.ext_ims_mhj_qty_m
 GROUP BY 'raw.ext_ims_mhj_qty_m'::varchar(21),
          ext_ims_mhj_qty_m.file_id) UNION ALL  SELECT 'raw.ext_ims_mhj_qty_w'::varchar(21) AS raw_view,
        ext_ims_mhj_qty_w.file_id,
        count(*) AS counts
 FROM raw.ext_ims_mhj_qty_w
 GROUP BY 'raw.ext_ims_mhj_qty_w'::varchar(21),
          ext_ims_mhj_qty_w.file_id) UNION ALL  SELECT 'raw.ext_ims_pbm_xref'::varchar(20) AS raw_view,
        ext_ims_pbm_xref.file_id,
        count(*) AS counts
 FROM raw.ext_ims_pbm_xref
 GROUP BY 'raw.ext_ims_pbm_xref'::varchar(20),
          ext_ims_pbm_xref.file_id) UNION ALL  SELECT 'raw.ext_ims_plan_xref'::varchar(21) AS raw_view,
        ext_ims_plan_xref.file_id,
        count(*) AS counts
 FROM raw.ext_ims_plan_xref
 GROUP BY 'raw.ext_ims_plan_xref'::varchar(21),
          ext_ims_plan_xref.file_id) UNION ALL  SELECT 'raw.ext_ims_plan_xref_accelerated'::varchar(33) AS raw_view,
        ext_ims_plan_xref_accelerated.file_id,
        count(*) AS counts
 FROM raw.ext_ims_plan_xref_accelerated
 GROUP BY 'raw.ext_ims_plan_xref_accelerated'::varchar(33),
          ext_ims_plan_xref_accelerated.file_id) UNION ALL  SELECT 'raw.ext_kc_zip_to_territory'::varchar(27) AS raw_view,
        ext_kc_zip_to_territory.file_id,
        count(*) AS counts
 FROM raw.ext_kc_zip_to_territory
 GROUP BY 'raw.ext_kc_zip_to_territory'::varchar(27),
          ext_kc_zip_to_territory.file_id) UNION ALL  SELECT 'raw.ext_knipper_samples_shipped'::varchar(31) AS raw_view,
        ext_knipper_samples_shipped.file_id,
        count(*) AS counts
 FROM raw.ext_knipper_samples_shipped
 GROUP BY 'raw.ext_knipper_samples_shipped'::varchar(31),
          ext_knipper_samples_shipped.file_id) UNION ALL  SELECT 'raw.ext_mm_ram_to_state'::varchar(23) AS raw_view,
        ext_mm_ram_to_state.file_id,
        count(*) AS counts
 FROM raw.ext_mm_ram_to_state
 GROUP BY 'raw.ext_mm_ram_to_state'::varchar(23),
          ext_mm_ram_to_state.file_id) UNION ALL  SELECT 'raw.ext_omnicare_sales'::varchar(22) AS raw_view,
        ext_omnicare_sales.file_id,
        count(*) AS counts
 FROM raw.ext_omnicare_sales
 GROUP BY 'raw.ext_omnicare_sales'::varchar(22),
          ext_omnicare_sales.file_id) UNION ALL  SELECT 'raw.ext_onc_account_targets'::varchar(27) AS raw_view,
        ext_onc_account_targets.file_id,
        count(*) AS counts
 FROM raw.ext_onc_account_targets
 GROUP BY 'raw.ext_onc_account_targets'::varchar(27),
          ext_onc_account_targets.file_id) UNION ALL  SELECT 'raw.ext_onc_call_detail_goals'::varchar(29) AS raw_view,
        ext_onc_call_detail_goals.file_id,
        count(*) AS counts
 FROM raw.ext_onc_call_detail_goals
 GROUP BY 'raw.ext_onc_call_detail_goals'::varchar(29),
          ext_onc_call_detail_goals.file_id) UNION ALL  SELECT 'raw.ext_onc_ddd_monthly_retail'::varchar(30) AS raw_view,
        ext_onc_ddd_monthly_retail.file_id,
        count(*) AS counts
 FROM raw.ext_onc_ddd_monthly_retail
 GROUP BY 'raw.ext_onc_ddd_monthly_retail'::varchar(30),
          ext_onc_ddd_monthly_retail.file_id) UNION ALL  SELECT 'raw.ext_onc_ddd_weekly_retail'::varchar(29) AS raw_view,
        ext_onc_ddd_weekly_retail.file_id,
        count(*) AS counts
 FROM raw.ext_onc_ddd_weekly_retail
 GROUP BY 'raw.ext_onc_ddd_weekly_retail'::varchar(29),
          ext_onc_ddd_weekly_retail.file_id) UNION ALL  SELECT 'raw.ext_onc_dmd_monthly_demo_dol'::varchar(32) AS raw_view,
        ext_onc_dmd_monthly_demo_dol.file_id,
        count(*) AS counts
 FROM raw.ext_onc_dmd_monthly_demo_dol
 GROUP BY 'raw.ext_onc_dmd_monthly_demo_dol'::varchar(32),
          ext_onc_dmd_monthly_demo_dol.file_id) UNION ALL  SELECT 'raw.ext_onc_dmd_monthly_demo_qty'::varchar(32) AS raw_view,
        ext_onc_dmd_monthly_demo_qty.file_id,
        count(*) AS counts
 FROM raw.ext_onc_dmd_monthly_demo_qty
 GROUP BY 'raw.ext_onc_dmd_monthly_demo_qty'::varchar(32),
          ext_onc_dmd_monthly_demo_qty.file_id) UNION ALL  SELECT 'raw.ext_onc_dmd_monthly_dollars'::varchar(31) AS raw_view,
        ext_onc_dmd_monthly_dollars.file_id,
        count(*) AS counts
 FROM raw.ext_onc_dmd_monthly_dollars
 GROUP BY 'raw.ext_onc_dmd_monthly_dollars'::varchar(31),
          ext_onc_dmd_monthly_dollars.file_id) UNION ALL  SELECT 'raw.ext_onc_dmd_monthly_quantity'::varchar(32) AS raw_view,
        ext_onc_dmd_monthly_quantity.file_id,
        count(*) AS counts
 FROM raw.ext_onc_dmd_monthly_quantity
 GROUP BY 'raw.ext_onc_dmd_monthly_quantity'::varchar(32),
          ext_onc_dmd_monthly_quantity.file_id) UNION ALL  SELECT 'raw.ext_onc_dmd_weekly_demo'::varchar(27) AS raw_view,
        ext_onc_dmd_weekly_demo.file_id,
        count(*) AS counts
 FROM raw.ext_onc_dmd_weekly_demo
 GROUP BY 'raw.ext_onc_dmd_weekly_demo'::varchar(27),
          ext_onc_dmd_weekly_demo.file_id) UNION ALL  SELECT 'raw.ext_onc_dmd_weekly_sales'::varchar(28) AS raw_view,
        ext_onc_dmd_weekly_sales.file_id,
        count(*) AS counts
 FROM raw.ext_onc_dmd_weekly_sales
 GROUP BY 'raw.ext_onc_dmd_weekly_sales'::varchar(28),
          ext_onc_dmd_weekly_sales.file_id) UNION ALL  SELECT 'raw.ext_onc_manual_fcrs'::varchar(23) AS raw_view,
        ext_onc_manual_fcrs.file_id,
        count(*) AS counts
 FROM raw.ext_onc_manual_fcrs
 GROUP BY 'raw.ext_onc_manual_fcrs'::varchar(23),
          ext_onc_manual_fcrs.file_id) UNION ALL  SELECT 'raw.ext_onc_sales_quotas'::varchar(24) AS raw_view,
        ext_onc_sales_quotas.file_id,
        count(*) AS counts
 FROM raw.ext_onc_sales_quotas
 GROUP BY 'raw.ext_onc_sales_quotas'::varchar(24),
          ext_onc_sales_quotas.file_id) UNION ALL  SELECT 'raw.ext_pcs_ddd_nonretail'::varchar(25) AS raw_view,
        ext_pcs_ddd_nonretail.file_id,
        count(*) AS counts
 FROM raw.ext_pcs_ddd_nonretail
 GROUP BY 'raw.ext_pcs_ddd_nonretail'::varchar(25),
          ext_pcs_ddd_nonretail.file_id) UNION ALL  SELECT 'raw.ext_pcs_ddd_retail'::varchar(22) AS raw_view,
        ext_pcs_ddd_retail.file_id,
        count(*) AS counts
 FROM raw.ext_pcs_ddd_retail
 GROUP BY 'raw.ext_pcs_ddd_retail'::varchar(22),
          ext_pcs_ddd_retail.file_id) UNION ALL  SELECT 'raw.ext_prime_rx'::varchar(16) AS raw_view,
        ext_prime_rx.file_id,
        count(*) AS counts
 FROM raw.ext_prime_rx
 GROUP BY 'raw.ext_prime_rx'::varchar(16),
          ext_prime_rx.file_id) UNION ALL  SELECT 'raw.ext_rems_facility'::varchar(21) AS raw_view,
        ext_rems_facility.file_id,
        count(*) AS counts
 FROM raw.ext_rems_facility
 GROUP BY 'raw.ext_rems_facility'::varchar(21),
          ext_rems_facility.file_id) UNION ALL  SELECT 'raw.ext_rems_pharmacy'::varchar(21) AS raw_view,
        ext_rems_pharmacy.file_id,
        count(*) AS counts
 FROM raw.ext_rems_pharmacy
 GROUP BY 'raw.ext_rems_pharmacy'::varchar(21),
          ext_rems_pharmacy.file_id) UNION ALL  SELECT 'raw.ext_rems_prescriber'::varchar(23) AS raw_view,
        ext_rems_prescriber.file_id,
        count(*) AS counts
 FROM raw.ext_rems_prescriber
 GROUP BY 'raw.ext_rems_prescriber'::varchar(23),
          ext_rems_prescriber.file_id) UNION ALL  SELECT 'raw.ext_specialty_pharmacy_cm_lkup'::varchar(34) AS raw_view,
        ext_specialty_pharmacy_cm_lkup.file_id,
        count(*) AS counts
 FROM raw.ext_specialty_pharmacy_cm_lkup
 GROUP BY 'raw.ext_specialty_pharmacy_cm_lkup'::varchar(34),
          ext_specialty_pharmacy_cm_lkup.file_id) UNION ALL  SELECT 'raw.ext_specialty_pharmacy_lookups'::varchar(34) AS raw_view,
        ext_specialty_pharmacy_lookups.file_id,
        count(*) AS counts
 FROM raw.ext_specialty_pharmacy_lookups
 GROUP BY 'raw.ext_specialty_pharmacy_lookups'::varchar(34),
          ext_specialty_pharmacy_lookups.file_id) UNION ALL  SELECT 'raw.ext_tb_cb_accounts'::varchar(22) AS raw_view,
        ext_tb_cb_accounts.file_id,
        count(*) AS counts
 FROM raw.ext_tb_cb_accounts
 GROUP BY 'raw.ext_tb_cb_accounts'::varchar(22),
          ext_tb_cb_accounts.file_id) UNION ALL  SELECT 'raw.ext_tb_cb_transactions'::varchar(26) AS raw_view,
        ext_tb_cb_transactions.file_id,
        count(*) AS counts
 FROM raw.ext_tb_cb_transactions
 GROUP BY 'raw.ext_tb_cb_transactions'::varchar(26),
          ext_tb_cb_transactions.file_id) UNION ALL  SELECT 'raw.ext_tb_ds_accounts'::varchar(22) AS raw_view,
        ext_tb_ds_accounts.file_id,
        count(*) AS counts
 FROM raw.ext_tb_ds_accounts
 GROUP BY 'raw.ext_tb_ds_accounts'::varchar(22),
          ext_tb_ds_accounts.file_id) UNION ALL  SELECT 'raw.ext_tb_ds_transactions'::varchar(26) AS raw_view,
        ext_tb_ds_transactions.file_id,
        count(*) AS counts
 FROM raw.ext_tb_ds_transactions
 GROUP BY 'raw.ext_tb_ds_transactions'::varchar(26),
          ext_tb_ds_transactions.file_id) UNION ALL  SELECT 'raw.ext_time_off_territory_kc_veev'::varchar(34) AS raw_view,
        ext_time_off_territory_kc_veev.file_id,
        count(*) AS counts
 FROM raw.ext_time_off_territory_kc_veev
 GROUP BY 'raw.ext_time_off_territory_kc_veev'::varchar(34),
          ext_time_off_territory_kc_veev.file_id) UNION ALL  SELECT 'raw.ext_time_off_territory_vod__c'::varchar(33) AS raw_view,
        ext_time_off_territory_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_time_off_territory_vod__c
 GROUP BY 'raw.ext_time_off_territory_vod__c'::varchar(33),
          ext_time_off_territory_vod__c.file_id) UNION ALL  SELECT 'raw.ext_touchpoint_call'::varchar(23) AS raw_view,
        ext_touchpoint_call.file_id,
        count(*) AS counts
 FROM raw.ext_touchpoint_call
 GROUP BY 'raw.ext_touchpoint_call'::varchar(23),
          ext_touchpoint_call.file_id) UNION ALL  SELECT 'raw.ext_touchpoint_presentation'::varchar(31) AS raw_view,
        ext_touchpoint_presentation.file_id,
        count(*) AS counts
 FROM raw.ext_touchpoint_presentation
 GROUP BY 'raw.ext_touchpoint_presentation'::varchar(31),
          ext_touchpoint_presentation.file_id) UNION ALL  SELECT 'raw.ext_tw_anda_sales'::varchar(21) AS raw_view,
        ext_tw_anda_sales.file_id,
        count(*) AS counts
 FROM raw.ext_tw_anda_sales
 GROUP BY 'raw.ext_tw_anda_sales'::varchar(21),
          ext_tw_anda_sales.file_id) UNION ALL  SELECT 'raw.ext_tw_biologics_sales'::varchar(26) AS raw_view,
        ext_tw_biologics_sales.file_id,
        count(*) AS counts
 FROM raw.ext_tw_biologics_sales
 GROUP BY 'raw.ext_tw_biologics_sales'::varchar(26),
          ext_tw_biologics_sales.file_id) UNION ALL  SELECT 'raw.ext_tw_hd_smith_sales'::varchar(25) AS raw_view,
        ext_tw_hd_smith_sales.file_id,
        count(*) AS counts
 FROM raw.ext_tw_hd_smith_sales
 GROUP BY 'raw.ext_tw_hd_smith_sales'::varchar(25),
          ext_tw_hd_smith_sales.file_id) UNION ALL  SELECT 'raw.ext_tw_ics_account'::varchar(22) AS raw_view,
        ext_tw_ics_account.file_id,
        count(*) AS counts
 FROM raw.ext_tw_ics_account
 GROUP BY 'raw.ext_tw_ics_account'::varchar(22),
          ext_tw_ics_account.file_id) UNION ALL  SELECT 'raw.ext_tw_ics_sales'::varchar(20) AS raw_view,
        ext_tw_ics_sales.file_id,
        count(*) AS counts
 FROM raw.ext_tw_ics_sales
 GROUP BY 'raw.ext_tw_ics_sales'::varchar(20),
          ext_tw_ics_sales.file_id) UNION ALL  SELECT 'raw.ext_vv_account'::varchar(18) AS raw_view,
        ext_vv_account.file_id,
        count(*) AS counts
 FROM raw.EXT_VV_ACCOUNT
 GROUP BY 'raw.ext_vv_account'::varchar(18),
          ext_vv_account.file_id) UNION ALL  SELECT 'raw.ext_vv_accountshare'::varchar(23) AS raw_view,
        ext_vv_accountshare.file_id,
        count(*) AS counts
 FROM raw.ext_vv_accountshare
 GROUP BY 'raw.ext_vv_accountshare'::varchar(23),
          ext_vv_accountshare.file_id) UNION ALL  SELECT 'raw.ext_vv_acct_merge_history_vod'::varchar(33) AS raw_view,
        ext_vv_acct_merge_history_vod.file_id,
        count(*) AS counts
 FROM raw.ext_vv_acct_merge_history_vod
 GROUP BY 'raw.ext_vv_acct_merge_history_vod'::varchar(33),
          ext_vv_acct_merge_history_vod.file_id) UNION ALL  SELECT 'raw.ext_vv_address_vod__c'::varchar(25) AS raw_view,
        ext_vv_address_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_address_vod__c
 GROUP BY 'raw.ext_vv_address_vod__c'::varchar(25),
          ext_vv_address_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_affiliation_vod__c'::varchar(29) AS raw_view,
        ext_vv_affiliation_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_affiliation_vod__c
 GROUP BY 'raw.ext_vv_affiliation_vod__c'::varchar(29),
          ext_vv_affiliation_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_assessment__c'::varchar(24) AS raw_view,
        ext_vv_assessment__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_assessment__c
 GROUP BY 'raw.ext_vv_assessment__c'::varchar(24),
          ext_vv_assessment__c.file_id) UNION ALL  SELECT 'raw.ext_vv_call_goal_tva__c'::varchar(27) AS raw_view,
        ext_vv_call_goal_tva__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_call_goal_tva__c
 GROUP BY 'raw.ext_vv_call_goal_tva__c'::varchar(27),
          ext_vv_call_goal_tva__c.file_id) UNION ALL  SELECT 'raw.ext_vv_call2_detail_vod__c'::varchar(30) AS raw_view,
        ext_vv_call2_detail_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_call2_detail_vod__c
 GROUP BY 'raw.ext_vv_call2_detail_vod__c'::varchar(30),
          ext_vv_call2_detail_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_call2_key_message_vod'::varchar(32) AS raw_view,
        ext_vv_call2_key_message_vod.file_id,
        count(*) AS counts
 FROM raw.ext_vv_call2_key_message_vod
 GROUP BY 'raw.ext_vv_call2_key_message_vod'::varchar(32),
          ext_vv_call2_key_message_vod.file_id) UNION ALL  SELECT 'raw.ext_vv_call2_sample_vod__c'::varchar(30) AS raw_view,
        ext_vv_call2_sample_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_call2_sample_vod__c
 GROUP BY 'raw.ext_vv_call2_sample_vod__c'::varchar(30),
          ext_vv_call2_sample_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_call2_vod__c'::varchar(23) AS raw_view,
        ext_vv_call2_vod__c.file_id,
        count(*) AS counts
 FROM raw.EXT_VV_CALL2_VOD__C
 GROUP BY 'raw.ext_vv_call2_vod__c'::varchar(23),
          ext_vv_call2_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_call2_vod__history'::varchar(29) AS raw_view,
        ext_vv_call2_vod__history.file_id,
        count(*) AS counts
 FROM raw.ext_vv_call2_vod__history
 GROUP BY 'raw.ext_vv_call2_vod__history'::varchar(29),
          ext_vv_call2_vod__history.file_id) UNION ALL  SELECT 'raw.ext_vv_deciles_tva__c'::varchar(25) AS raw_view,
        ext_vv_deciles_tva__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_deciles_tva__c
 GROUP BY 'raw.ext_vv_deciles_tva__c'::varchar(25),
          ext_vv_deciles_tva__c.file_id) UNION ALL  SELECT 'raw.ext_vv_group'::varchar(16) AS raw_view,
        ext_vv_group.file_id,
        count(*) AS counts
 FROM raw.ext_vv_group
 GROUP BY 'raw.ext_vv_group'::varchar(16),
          ext_vv_group.file_id) UNION ALL  SELECT 'raw.ext_vv_key_message_vod__c'::varchar(29) AS raw_view,
        ext_vv_key_message_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_key_message_vod__c
 GROUP BY 'raw.ext_vv_key_message_vod__c'::varchar(29),
          ext_vv_key_message_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_medical_inquiry_vod__c'::varchar(33) AS raw_view,
        ext_vv_medical_inquiry_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_medical_inquiry_vod__c
 GROUP BY 'raw.ext_vv_medical_inquiry_vod__c'::varchar(33),
          ext_vv_medical_inquiry_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_product_metrics_vod__c'::varchar(33) AS raw_view,
        ext_vv_product_metrics_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_product_metrics_vod__c
 GROUP BY 'raw.ext_vv_product_metrics_vod__c'::varchar(33),
          ext_vv_product_metrics_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_product_vod__c'::varchar(25) AS raw_view,
        ext_vv_product_vod__c.file_id,
        count(*) AS counts
 FROM raw.EXT_VV_PRODUCT_VOD__C
 GROUP BY 'raw.ext_vv_product_vod__c'::varchar(25),
          ext_vv_product_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_question_response_vod'::varchar(32) AS raw_view,
        ext_vv_question_response_vod.file_id,
        count(*) AS counts
 FROM raw.ext_vv_question_response_vod
 GROUP BY 'raw.ext_vv_question_response_vod'::varchar(32),
          ext_vv_question_response_vod.file_id) UNION ALL  SELECT 'raw.ext_vv_recordtype'::varchar(21) AS raw_view,
        ext_vv_recordtype.file_id,
        count(*) AS counts
 FROM raw.ext_vv_recordtype
 GROUP BY 'raw.ext_vv_recordtype'::varchar(21),
          ext_vv_recordtype.file_id) UNION ALL  SELECT 'raw.ext_vv_survey_question_vod__c'::varchar(33) AS raw_view,
        ext_vv_survey_question_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_survey_question_vod__c
 GROUP BY 'raw.ext_vv_survey_question_vod__c'::varchar(33),
          ext_vv_survey_question_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_survey_target_vod__c'::varchar(31) AS raw_view,
        ext_vv_survey_target_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_survey_target_vod__c
 GROUP BY 'raw.ext_vv_survey_target_vod__c'::varchar(31),
          ext_vv_survey_target_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_survey_vod__c'::varchar(24) AS raw_view,
        ext_vv_survey_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_survey_vod__c
 GROUP BY 'raw.ext_vv_survey_vod__c'::varchar(24),
          ext_vv_survey_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_sync_tracking_vod__c'::varchar(31) AS raw_view,
        ext_vv_sync_tracking_vod__c.file_id,
        count(*) AS counts
 FROM raw.ext_vv_sync_tracking_vod__c
 GROUP BY 'raw.ext_vv_sync_tracking_vod__c'::varchar(31),
          ext_vv_sync_tracking_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_territory'::varchar(20) AS raw_view,
        ext_vv_territory.file_id,
        count(*) AS counts
 FROM raw.ext_vv_territory
 GROUP BY 'raw.ext_vv_territory'::varchar(20),
          ext_vv_territory.file_id) UNION ALL  SELECT 'raw.ext_vv_tsf_vod__c'::varchar(21) AS raw_view,
        ext_vv_tsf_vod__c.file_id,
        count(*) AS counts
 FROM raw.EXT_VV_TSF_VOD__C
 GROUP BY 'raw.ext_vv_tsf_vod__c'::varchar(21),
          ext_vv_tsf_vod__c.file_id) UNION ALL  SELECT 'raw.ext_vv_user'::varchar(15) AS raw_view,
        ext_vv_user.file_id,
        count(*) AS counts
 FROM raw.ext_vv_user
 GROUP BY 'raw.ext_vv_user'::varchar(15),
          ext_vv_user.file_id) UNION ALL  SELECT 'raw.ext_vv_userrole'::varchar(19) AS raw_view,
        ext_vv_userrole.file_id,
        count(*) AS counts
 FROM raw.ext_vv_userrole
 GROUP BY 'raw.ext_vv_userrole'::varchar(19),
          ext_vv_userrole.file_id) UNION ALL  SELECT 'raw.ext_vv_userterritory'::varchar(24) AS raw_view,
        ext_vv_userterritory.file_id,
        count(*) AS counts
 FROM raw.ext_vv_userterritory
 GROUP BY 'raw.ext_vv_userterritory'::varchar(24),
          ext_vv_userterritory.file_id) UNION ALL  SELECT 'raw.ext_wholesale_867'::varchar(21) AS raw_view,
        ext_wholesale_867.file_id,
        count(*) AS counts
 FROM raw.ext_wholesale_867
 GROUP BY 'raw.ext_wholesale_867'::varchar(21),
          ext_wholesale_867.file_id) UNION ALL  SELECT 'raw.ext_zs_call_plan_tc'::varchar(23) AS raw_view,
        ext_zs_call_plan_tc.file_id,
        count(*) AS counts
 FROM raw.ext_zs_call_plan_tc
 GROUP BY 'raw.ext_zs_call_plan_tc'::varchar(23),
          ext_zs_call_plan_tc.file_id) UNION ALL  SELECT 'raw.ext_zs_call_plan_tn'::varchar(23) AS raw_view,
        ext_zs_call_plan_tn.file_id,
        count(*) AS counts
 FROM raw.ext_zs_call_plan_tn
 GROUP BY 'raw.ext_zs_call_plan_tn'::varchar(23),
          ext_zs_call_plan_tn.file_id) UNION ALL  SELECT 'raw.ext_zs_call_plan_tp'::varchar(23) AS raw_view,
        ext_zs_call_plan_tp.file_id,
        count(*) AS counts
 FROM raw.ext_zs_call_plan_tp
 GROUP BY 'raw.ext_zs_call_plan_tp'::varchar(23),
          ext_zs_call_plan_tp.file_id) UNION ALL  SELECT 'raw.ext_zs_call_plan_tr'::varchar(23) AS raw_view,
        ext_zs_call_plan_tr.file_id,
        count(*) AS counts
 FROM raw.ext_zs_call_plan_tr
 GROUP BY 'raw.ext_zs_call_plan_tr'::varchar(23),
          ext_zs_call_plan_tr.file_id) UNION ALL  SELECT 'raw.ext_zs_call_plan_tw'::varchar(23) AS raw_view,
        ext_zs_call_plan_tw.file_id,
        count(*) AS counts
 FROM raw.ext_zs_call_plan_tw
 GROUP BY 'raw.ext_zs_call_plan_tw'::varchar(23),
          ext_zs_call_plan_tw.file_id) UNION ALL  SELECT 'raw.job_title_defs'::varchar(18) AS raw_view,
        job_title_defs.file_id,
        count(*) AS counts
 FROM raw.job_title_defs
 GROUP BY 'raw.job_title_defs'::varchar(18),
          job_title_defs.file_id) UNION ALL  SELECT 'raw.people'::varchar(10) AS raw_view,
        people.file_id,
        count(*) AS counts
 FROM raw.people
 GROUP BY 'raw.people'::varchar(10),
          people.file_id) UNION ALL  SELECT 'raw.people_addresses'::varchar(20) AS raw_view,
        people_addresses.file_id,
        count(*) AS counts
 FROM raw.people_addresses
 GROUP BY 'raw.people_addresses'::varchar(20),
          people_addresses.file_id) UNION ALL  SELECT 'raw.people_phones'::varchar(17) AS raw_view,
        people_phones.file_id,
        count(*) AS counts
 FROM raw.people_phones
 GROUP BY 'raw.people_phones'::varchar(17),
          people_phones.file_id) UNION ALL  SELECT 'raw.phones'::varchar(10) AS raw_view,
        phones.file_id,
        count(*) AS counts
 FROM raw.phones
 GROUP BY 'raw.phones'::varchar(10),
          phones.file_id) UNION ALL  SELECT 'raw.territories'::varchar(15) AS raw_view,
        territories.file_id,
        count(*) AS counts
 FROM raw.territories
 GROUP BY 'raw.territories'::varchar(15),
          territories.file_id) UNION ALL  SELECT 'raw.tvcmid_hco_demo'::varchar(19) AS raw_view,
        tvcmid_hco_demo.file_id,
        count(*) AS counts
 FROM raw.tvcmid_hco_demo
 GROUP BY 'raw.tvcmid_hco_demo'::varchar(19),
          tvcmid_hco_demo.file_id) UNION ALL  SELECT 'raw.tvcmid_hcp_demo'::varchar(19) AS raw_view,
        tvcmid_hcp_demo.file_id,
        count(*) AS counts
 FROM raw.tvcmid_hcp_demo
 GROUP BY 'raw.tvcmid_hcp_demo'::varchar(19),
          tvcmid_hcp_demo.file_id) UNION ALL  SELECT 'raw.tvcmid_merges'::varchar(17) AS raw_view,
        tvcmid_merges.file_id,
        count(*) AS counts
 FROM raw.tvcmid_merges
 GROUP BY 'raw.tvcmid_merges'::varchar(17),
          tvcmid_merges.file_id) UNION ALL  SELECT 'raw.tvcmid_xref'::varchar(15) AS raw_view,
        tvcmid_xref.file_id,
        count(*) AS counts
 FROM raw.tvcmid_xref
 GROUP BY 'raw.tvcmid_xref'::varchar(15),
          tvcmid_xref.file_id) UNION ALL  SELECT 'raw.xx_sales_loa_mv'::varchar(19) AS raw_view,
        xx_sales_loa_mv.file_id,
        count(*) AS counts
 FROM raw.xx_sales_loa_mv
 GROUP BY 'raw.xx_sales_loa_mv'::varchar(19),
          xx_sales_loa_mv.file_id) UNION ALL  SELECT 'raw.xx_sales_mv'::varchar(15) AS raw_view,
        xx_sales_mv.file_id,
        count(*) AS counts
 FROM raw.xx_sales_mv
 GROUP BY 'raw.xx_sales_mv'::varchar(15),
          xx_sales_mv.file_id) UNION ALL  SELECT 'raw.xx_terr_id_change_v'::varchar(23) AS raw_view,
        xx_terr_id_change_v.file_id,
        count(*) AS counts
 FROM raw.xx_terr_id_change_v
 GROUP BY 'raw.xx_terr_id_change_v'::varchar(23),
          xx_terr_id_change_v.file_id) A
 ORDER BY A.raw_view,
          A.file_id;
==> failed_tevaQA12G_migration_csv_export.sql <==

==> failed_tevaQA12G_migration_ddl_export.sql <==
CREATE SCHEMA migration;


CREATE TABLE migration.target_grants
(
    id int,
    script varchar(500),
    processed boolean,
    ts_run_date timestamp
);


CREATE TABLE migration.target_grants_src
(
    id int,
    script varchar(500)
);


CREATE TABLE migration.source_schemas
(
    table_schema varchar(128),
    table_name varchar(128),
    is_partitioned boolean,
    row_count int,
    partition_expression varchar(8192),
    export_type varchar(20)
);


CREATE TABLE migration.data_exports
(
    id int,
    rowcnt int,
    schema_nm varchar(50),
    table_nm varchar(75),
    script varchar(500),
    processed boolean,
    ts_run_date timestamp
);


CREATE TABLE migration.odd_parms_src
(
    grant_order int,
    sql varchar(50000),
    object_type varchar(8192),
    object_name varchar(512)
);


CREATE TABLE migration.grants_src
(
    grant_order int,
    principal_name varchar(128),
    sql varchar(50000),
    object_type varchar(8192),
    object_name varchar(512)
);


CREATE  VIEW migration.grants AS
 SELECT grants_src.sql
 FROM migration.grants_src
 ORDER BY grants_src.grant_order,
          grants_src.principal_name;

CREATE  VIEW migration.odd_parms_vw AS
 SELECT odd_parms_src.sql
 FROM migration.odd_parms_src
 ORDER BY odd_parms_src.grant_order;

CREATE  VIEW migration.users_only_vw AS
((( SELECT 0 AS grant_order,
        vr.name AS principal_name,
        ((('CREATE ROLE "'::varchar(13) || vr.name) || '"'::varchar(1)) || ';'::varchar(1)) AS sql,
        'NONE'::varchar(4) AS object_type,
        'NONE'::varchar(4) AS object_name
 FROM v_internal.vs_roles vr
 WHERE ((NOT vr.predefined_role) AND (vr.ldapdn = ''::varchar)) UNION ALL  SELECT 1 AS grant_order,
        users.user_name AS principal_name,
        (((((((((((('CREATE USER "'::varchar(13) || users.user_name) || '"'::varchar(1)) || CASE users.is_locked WHEN NULLSEQUAL true THEN ' ACCOUNT LOCK'::varchar(13) ELSE ''::varchar END) || CASE users.grace_period WHEN NULLSEQUAL 'undefined'::varchar(9) THEN ''::varchar ELSE ((' GRACEPERIOD  '''::varchar(15) || users.grace_period) || ''''::varchar(1)) END) || CASE users.idle_session_timeout WHEN NULLSEQUAL 'unlimited'::varchar(9) THEN ''::varchar ELSE ((' IDLESESSIONTIMEOUT '''::varchar(21) || users.idle_session_timeout) || ''''::varchar(1)) END) || CASE users.max_connections WHEN NULLSEQUAL 'unlimited'::varchar(9) THEN ''::varchar ELSE (((' MAXCONNECTIONS '::varchar(16) || users.max_connections) || ' ON '::varchar(4)) || users.connection_limit_mode) END) || CASE users.memory_cap_kb WHEN NULLSEQUAL 'unlimited'::varchar(9) THEN ''::varchar ELSE ((' MEMORYCAP '''::varchar(12) || users.memory_cap_kb) || 'K'''::varchar(2)) END) || CASE users.resource_pool WHEN NULLSEQUAL 'general'::varchar(7) THEN ''::varchar ELSE (' RESOURCE POOL '::varchar(15) || users.resource_pool) END) || CASE users.run_time_cap WHEN NULLSEQUAL 'unlimited'::varchar(9) THEN ''::varchar ELSE ((' RUNTIMECAP '''::varchar(13) || users.run_time_cap) || ''''::varchar(1)) END) || CASE users.search_path WHEN NULLSEQUAL ''::varchar THEN ''::varchar ELSE (' SEARCH_PATH '::varchar(13) || users.search_path) END) || CASE users.temp_space_cap_kb WHEN NULLSEQUAL 'unlimited'::varchar(9) THEN ''::varchar ELSE ((' TEMPSPACECAP '''::varchar(15) || users.temp_space_cap_kb) || 'K'''::varchar(2)) END) || ';'::varchar(1)) AS sql,
        foo.object_type,
        foo.object_name
 FROM ( SELECT grants.grantee,
        grants.object_type,
        grants.object_schema,
        grants.object_name,
        grants.object_id,
        v_txtindex.StringTokenizerDelim(CASE grants.privileges_description WHEN NULLSEQUAL ''::varchar THEN ','::varchar(1) ELSE grants.privileges_description END, ','::varchar(1)) OVER (PARTITION BY grants.grantee, grants.object_type, grants.object_schema, grants.object_name, grants.object_id) AS ( words )
 FROM v_catalog.grants) foo
 ORDER BY CASE replace(btrim(foo.words, ' '::varchar(1)), '*'::varchar(1), ''::varchar) WHEN 'USAGE'::varchar(5) THEN 1 ELSE 2 END)) UNION ALL  SELECT 3 AS grant_order,
        users.user_name AS principal_name,
        (((('ALTER USER "'::varchar(12) || users.user_name) || '"'::varchar(1)) || CASE users.default_roles WHEN NULLSEQUAL ''::varchar THEN ''::varchar ELSE (' DEFAULT ROLE '::varchar(14) || replace(users.default_roles, '*'::varchar(1), ''::varchar)) END) || ';'::varchar(1)) AS sql,
        'NONE'::varchar(4) AS object_type,
        'NONE'::varchar(4) AS object_name
 FROM v_catalog.users
 WHERE (users.default_roles <> ''::varchar)) UNION ALL  SELECT 4 AS grant_order,
        foo.user_name AS principal_name,
        (((('GRANT '::varchar(6) || replace(btrim(foo.words, ' '::varchar(1)), '*'::varchar(1), ''::varchar)) || ' TO '::varchar(4)) || foo.user_name) || ' WITH ADMIN OPTION;'::varchar(19)) AS sql,
        'NONE'::varchar(4) AS object_type,
        'NONE'::varchar(4) AS object_name
 FROM ( SELECT users.user_name,
        v_txtindex.StringTokenizerDelim(CASE users.all_roles WHEN NULLSEQUAL ''::varchar THEN ','::varchar(1) ELSE users.all_roles END, ','::varchar(1)) OVER (PARTITION BY users.user_name) AS ( words )
 FROM v_catalog.users
 WHERE (users.all_roles <> ''::varchar)) foo
 WHERE (instr(foo.words, '*'::varchar(1), 1, 1) > 0);

CREATE  VIEW migration.user_ddl AS
((((((((( SELECT 0 AS grant_order,
        vr.name AS principal_name,
        ((('CREATE ROLE "'::varchar(13) || vr.name) || '"'::varchar(1)) || ';'::varchar(1)) AS sql,
        'NONE'::varchar(4) AS object_type,
        'NONE'::varchar(4) AS object_name
 FROM v_internal.vs_roles vr
 WHERE ((NOT vr.predefined_role) AND (vr.ldapdn = ''::varchar)) UNION ALL  SELECT 1 AS grant_order,
        users.user_name AS principal_name,
        (((((((((((('CREATE USER "'::varchar(13) || users.user_name) || '"'::varchar(1)) || CASE users.is_locked WHEN NULLSEQUAL true THEN ' ACCOUNT LOCK'::varchar(13) ELSE ''::varchar END) || CASE users.grace_period WHEN NULLSEQUAL 'undefined'::varchar(9) THEN ''::varchar ELSE ((' GRACEPERIOD  '''::varchar(15) || users.grace_period) || ''''::varchar(1)) END) || CASE users.idle_session_timeout WHEN NULLSEQUAL 'unlimited'::varchar(9) THEN ''::varchar ELSE ((' IDLESESSIONTIMEOUT '''::varchar(21) || users.idle_session_timeout) || ''''::varchar(1)) END) || CASE users.max_connections WHEN NULLSEQUAL 'unlimited'::varchar(9) THEN ''::varchar ELSE (((' MAXCONNECTIONS '::varchar(16) || users.max_connections) || ' ON '::varchar(4)) || users.connection_limit_mode) END) || CASE users.memory_cap_kb WHEN NULLSEQUAL 'unlimited'::varchar(9) THEN ''::varchar ELSE ((' MEMORYCAP '''::varchar(12) || users.memory_cap_kb) || 'K'''::varchar(2)) END) || CASE users.resource_pool WHEN NULLSEQUAL 'general'::varchar(7) THEN ''::varchar ELSE (' RESOURCE POOL '::varchar(15) || users.resource_pool) END) || CASE users.run_time_cap WHEN NULLSEQUAL 'unlimited'::varchar(9) THEN ''::varchar ELSE ((' RUNTIMECAP '''::varchar(13) || users.run_time_cap) || ''''::varchar(1)) END) || CASE users.search_path WHEN NULLSEQUAL ''::varchar THEN ''::varchar ELSE (' SEARCH_PATH '::varchar(13) || users.search_path) END) || CASE users.temp_space_cap_kb WHEN NULLSEQUAL 'unlimited'::varchar(9) THEN ''::varchar ELSE ((' TEMPSPACECAP '''::varchar(15) || users.temp_space_cap_kb) || 'K'''::varchar(2)) END) || ';'::varchar(1)) AS sql,
        foo.object_type,
        foo.object_name
 FROM ( SELECT grants.grantee,
        grants.object_type,
        grants.object_schema,
        grants.object_name,
        grants.object_id,
        v_txtindex.StringTokenizerDelim(CASE grants.privileges_description WHEN NULLSEQUAL ''::varchar THEN ','::varchar(1) ELSE grants.privileges_description END, ','::varchar(1)) OVER (PARTITION BY grants.grantee, grants.object_type, grants.object_schema, grants.object_name, grants.object_id) AS ( words )
 FROM v_catalog.grants) foo
 ORDER BY CASE replace(btrim(foo.words, ' '::varchar(1)), '*'::varchar(1), ''::varchar) WHEN 'USAGE'::varchar(5) THEN 1 ELSE 2 END)) UNION ALL  SELECT 3 AS grant_order,
        users.user_name AS principal_name,
        (((('ALTER USER "'::varchar(12) || users.user_name) || '"'::varchar(1)) || CASE users.default_roles WHEN NULLSEQUAL ''::varchar THEN ''::varchar ELSE (' DEFAULT ROLE '::varchar(14) || replace(users.default_roles, '*'::varchar(1), ''::varchar)) END) || ';'::varchar(1)) AS sql,
        'NONE'::varchar(4) AS object_type,
        'NONE'::varchar(4) AS object_name
 FROM v_catalog.users
 WHERE (users.default_roles <> ''::varchar)) UNION ALL  SELECT 4 AS grant_order,
        foo.user_name AS principal_name,
        (((('GRANT '::varchar(6) || replace(btrim(foo.words, ' '::varchar(1)), '*'::varchar(1), ''::varchar)) || ' TO '::varchar(4)) || foo.user_name) || ' WITH ADMIN OPTION;'::varchar(19)) AS sql,
        'NONE'::varchar(4) AS object_type,
        'NONE'::varchar(4) AS object_name
 FROM ( SELECT users.user_name,
        v_txtindex.StringTokenizerDelim(CASE users.all_roles WHEN NULLSEQUAL ''::varchar THEN ','::varchar(1) ELSE users.all_roles END, ','::varchar(1)) OVER (PARTITION BY users.user_name) AS ( words )
 FROM v_catalog.users
 WHERE (users.all_roles <> ''::varchar)) foo
 WHERE (instr(foo.words, '*'::varchar(1), 1, 1) > 0)) UNION ALL  SELECT 5 AS grant_order,
        'public'::varchar(6) AS principal_name,
        ((('ALTER SCHEMA '::varchar(13) || vs_schemata.name) || ' DEFAULT '::varchar(9)) || CASE WHEN vs_schemata.defaultinheritprivileges THEN 'INCLUDE PRIVILEGES;'::varchar(19) ELSE 'EXCLUDE PRIVILEGES;'::varchar(19) END) AS sql,
        'SCHEMA'::varchar(6) AS object_type,
        vs_schemata.name AS object_name
 FROM v_internal.vs_schemata
 WHERE (NOT vs_schemata.issys)) UNION ALL  SELECT 6 AS grant_order,
        'public'::varchar(6) AS principal_name,
        (((('ALTER DATABASE '::varchar(15) || databases.database_name) || ' SET disableinheritedprivileges = '::varchar(34)) || vs_configuration_parameters.current_value) || ';'::varchar(1)) AS sql,
        'DATABASE'::varchar(8) AS object_type,
        databases.database_name AS object_name
 FROM (v_internal.vs_configuration_parameters CROSS  JOIN v_catalog.databases)
 WHERE (vs_configuration_parameters.parameter_name = 'DisableInheritedPrivileges'::varchar(26))) UNION ALL  SELECT 7 AS grant_order,
        'public'::varchar(6) AS principal_name,
        (((('ALTER TABLE '::varchar(12) || tables.table_schema) || '.'::varchar(1)) || tables.table_name) || CASE WHEN vs_tables.inheritprivileges THEN ' INCLUDE PRIVILEGES;'::varchar(20) ELSE ' EXCLUDE PRIVILEGES;'::varchar(20) END) AS sql,
        'TABLE'::varchar(5) AS object_type,
        ((tables.table_schema || '.'::varchar(1)) || tables.table_name) AS object_name
 FROM (v_internal.vs_tables JOIN v_catalog.tables ON ((tables.table_id = vs_tables.oid)))) UNION ALL  SELECT 8 AS grant_order,
        'public'::varchar(6) AS principal_name,
        (((('ALTER VIEW '::varchar(11) || views.table_schema) || '.'::varchar(1)) || views.table_name) || CASE WHEN views.inherit_privileges THEN ' INCLUDE PRIVILEGES;'::varchar(20) ELSE ' EXCLUDE PRIVILEGES; '::varchar(21) END) AS sql,
        'TABLE'::varchar(5) AS object_type,
        ((views.table_schema || '.'::varchar(1)) || views.table_name) AS object_name
 FROM v_catalog.views) UNION ALL  SELECT 9 AS grant_order,
        tables.owner_name AS principal_name,
        (((((('ALTER TABLE '::varchar(12) || tables.table_schema) || '.'::varchar(1)) || tables.table_name) || ' OWNER TO '::varchar(10)) || tables.owner_name) || ';'::varchar(1)) AS sql,
        'TABLE'::varchar(5) AS object_type,
        ((tables.table_schema || '.'::varchar(1)) || tables.table_name) AS object_name
 FROM v_catalog.tables) UNION ALL  SELECT 10 AS grant_order,
        views.owner_name AS principal_name,
        (((((('ALTER VIEW '::varchar(11) || views.table_schema) || '.'::varchar(1)) || views.table_name) || ' OWNER TO '::varchar(10)) || views.owner_name) || ';'::varchar(1)) AS sql,
        'TABLE'::varchar(5) AS object_type,
        ((views.table_schema || '.'::varchar(1)) || views.table_name) AS object_name
 FROM v_catalog.views;
==> failed_tevaQA12G_outbound_csv_export.sql <==
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from outbound.market_presc_zip_divisor) where table_schema = 'outbound' and table_name = 'market_presc_zip_divisor';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from outbound.zs_monitor_sales_force_product) where table_schema = 'outbound' and table_name = 'zs_monitor_sales_force_product';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from outbound.tmp_rep_status) where table_schema = 'outbound' and table_name = 'tmp_rep_status';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from outbound.oncology_adjusted_sales_final) where table_schema = 'outbound' and table_name = 'oncology_adjusted_sales_final';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from outbound.asi_ims_presc_demo) where table_schema = 'outbound' and table_name = 'asi_ims_presc_demo';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from outbound.asi_xponent_demographics) where table_schema = 'outbound' and table_name = 'asi_xponent_demographics';
==> failed_tevaQA12G_outbound_ddl_export.sql <==
CREATE SCHEMA outbound;


CREATE TABLE outbound.sample_shipment
(
    veeva_id varchar(50),
    tvcmid int,
    ims_id varchar(10),
    first_name varchar(50),
    middle_name varchar(50),
    last_name varchar(50),
    designation varchar(30),
    state_license_number varchar(20),
    address_line_1 varchar(35),
    address_line_2 varchar(35),
    address_line_3 varchar(35),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    dea_license_number varchar(20),
    order_id varchar(20),
    ndc varchar(15),
    basket_id int,
    basket_name varchar(300),
    order_job_code varchar(14),
    order_job_description varchar(50),
    ship_qty int,
    ship_date date,
    file_id int,
    record_id int
);


CREATE TABLE outbound.market_presc_zip_divisor
(
    sales_force_id varchar(5),
    ims_client_number varchar(64),
    ims_report_number varchar(64),
    ims_id varchar(10),
    state varchar(2),
    zip varchar(5),
    divisor int
);


CREATE TABLE outbound.fourth_sales_force_roster
(
    EMPLOYEE_ID varchar(50),
    USERNAME varchar(15),
    LAST_NAME varchar(50),
    FIRST_NAME varchar(50),
    MIDDLE_NAME varchar(50),
    SALUTATION varchar(15),
    SUFFIX varchar(40),
    TITLE varchar(100),
    TERRITORY varchar(25),
    TERRITORY_NAME varchar(100),
    MANAGER_TERRITORY varchar(25),
    TEAM varchar(100),
    BUSINESS_LINE_1_ADDR varchar(200),
    BUSINESS_LINE_2_ADDR varchar(200),
    BUSINESS_LINE_3_ADDR varchar(200),
    BUSINESS_CITY varchar(50),
    BUSINESS_STATE varchar(50),
    BUSINESS_POSTAL_CODE varchar(50),
    BUSINESS_COUNTRY_CODE varchar(2),
    HOME_LINE_1_ADDR varchar(200),
    HOME_LINE_2_ADDR varchar(200),
    HOME_LINE_3_ADDR varchar(200),
    HOME_CITY varchar(50),
    HOME_STATE varchar(50),
    HOME_POSTAL_CODE varchar(50),
    HOME_COUNTRY_CODE varchar(2),
    CORRESPONDENCE_ADDRESS varchar(25),
    BUSINESS_PHONE varchar(20),
    BUSINESS_PHONE_EXTENSION varchar(50),
    BUSINESS_FAX varchar(20),
    VOICE_MAIL varchar(20),
    MOBILE_PHONE varchar(20),
    HOME_PHONE varchar(20),
    HOME_FAX varchar(20),
    CORRESPONDENCE_PHONE varchar(25),
    BUSINESS_EMAIL varchar(200),
    HOME_EMAIL varchar(200),
    CORRESPONDENCE_EMAIL varchar(25),
    COST_CENTER varchar(50),
    HIRE_DT timestamp
);


CREATE TABLE outbound.asi_xponent_demographics
(
    ims_client_number varchar(5),
    ims_report_number varchar(5),
    ims_id varchar(10),
    ims_specialty varchar(10),
    ims_product_group varchar(10),
    ims_zip_other varchar(10),
    ims_me_num varchar(10),
    ims_last_name varchar(25),
    ims_first_name varchar(25),
    ims_middle_name varchar(2),
    ims_address varchar(30),
    ims_city varchar(25),
    ims_state varchar(2),
    ims_zip varchar(5)
);


CREATE TABLE outbound.asi_ims_presc_demo
(
    sales_force_id varchar(20),
    ims_id varchar(10),
    tvcmid int,
    me_num varchar(255),
    specialty varchar(255),
    specialty_source varchar(1),
    first_name varchar(50),
    last_name varchar(50),
    mid_name varchar(50),
    ptr_address varchar(301),
    ptr_city varchar(50),
    ptr_state varchar(2),
    ptr_zip varchar(5),
    ptr_territory_num varchar(15),
    last_build_date timestamp,
    npi varchar(10)
);


CREATE TABLE outbound.tmp_rep_status
(
    employee_id varchar(100),
    rms_territory_number__c varchar(255),
    rms_territory_name__c varchar(255),
    assignment_start_Date__c varchar(255),
    assignment_End_date__c varchar(255),
    assignment_status__c varchar(255),
    first_name varchar(100),
    last_name varchar(100),
    rep_type varchar(10),
    hire_date date,
    original_hire_date date,
    separation_date__c varchar(255),
    end_reason varchar(4),
    id varchar(18)
);


CREATE TABLE outbound.zs_monitor_sales_force_product
(
    sales_force_id varchar(25),
    basket_name varchar(300),
    semester varchar(50)
);


CREATE TABLE outbound.oncology_adjusted_sales_final
(
    acct_demo_id int,
    outlet_name varchar(100),
    outlet_zip varchar(5),
    basket_id int,
    basket_name varchar(300),
    date date,
    rollup_week date,
    rollup_month date,
    source_quantity float,
    source_dollars float,
    adjustment_quantity float,
    adjustment_dollars float,
    reported_quantity float,
    reported_dollars float,
    data_date date,
    file_id int,
    record_id int,
    reported_trx_strength_units float,
    report_frequency varchar(20),
    rollup_flag char(1),
    basket_type varchar(100),
    rollup_445_month date,
    tvcmid int,
    sales_force_id varchar(10)
);


CREATE  VIEW outbound.ims_plan_workbook AS
 SELECT plantrak_workbook.payer_plan_number AS PAYER_PLAN_NUM,
        plantrak_workbook.plan_name AS PLAN_NAME,
        plantrak_workbook.payer_name AS PAYER_NAME,
        plantrak_workbook.method_of_payment AS PAYMENT_METHOD,
        plantrak_workbook.model AS MODEL,
        coalesce(plantrak_workbook.pbm_number, '999999'::varchar(6)) AS PBM_NUMBER,
        coalesce(plantrak_workbook.pbm_name, 'N/A'::varchar(3)) AS PBM_NAME
 FROM datamart.plantrak_workbook;

CREATE  VIEW outbound.zzz_activity_voucher_coupon_redemption_alphascrip AS
 SELECT cmid.id_num AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(cw.rx_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(concat((cw.file_id)::varchar, '-'::varchar(1)), (cw.record_id)::varchar) AS trackback_id,
        NULL AS previous_activity,
        coalesce((sp.entity_id)::varchar(20), cw.ndc_code) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((('Voucher/Coupon Redemption,'::varchar(26) || b.name) || ','::varchar(1)) || cw.occ_payment_type) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((integration.copay_detail_weekly cw JOIN datamart.tvcmid_xref cmid ON (((cw.tvcmid_physician = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dm ON ((cw.file_id = dm.file_id))) LEFT  JOIN product.source_product sp ON (((cw.ndc_code = sp.source_product_code) AND (dm.feed_id = sp.feed_id) AND (dm.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE ((cw.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'ALPHASCRIP_COPAY_DETAIL_WKLY'::varchar(28)))), 0)) AND (cw.rx_date >= add_months((now())::date, (-6)))) EXCEPT  SELECT cmid.id_num AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(cw.rx_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(concat((cw.file_id)::varchar, '-'::varchar(1)), (cw.record_id)::varchar) AS trackback_id,
        NULL AS previous_activity,
        coalesce((sp.entity_id)::varchar(20), cw.ndc_code) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((('Voucher/Coupon Redemption,'::varchar(26) || b.name) || ','::varchar(1)) || cw.occ_payment_type) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((integration.copay_detail_weekly cw JOIN datamart.tvcmid_xref cmid ON (((cw.tvcmid_physician = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dm ON ((cw.file_id = dm.file_id))) LEFT  JOIN product.source_product sp ON (((cw.ndc_code = sp.source_product_code) AND (dm.feed_id = sp.feed_id) AND (dm.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE ((cw.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'ALPHASCRIP_COPAY_DETAIL_WKLY'::varchar(28)))), 0)) AND (cw.rx_date >= add_months((now())::date, (-6))));

CREATE  VIEW outbound.zzz_kc_copay_voucher_redemption AS
 SELECT coalesce(c.physician_veeva_id, c.physician_ims_id) AS VEEVA_ACCOUNT_ID,
        c.physician_ims_id AS IMS_ID,
        c.redemption_type AS REDEMPTION_TYPE,
        to_char(c.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        to_char(c.date_written, 'YYYY-MM-DD'::varchar(10)) AS HCP_DATE_WRITTEN,
        CASE mod(c.days_supply, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.days_supply)::varchar ELSE rtrim((c.days_supply)::varchar, '0'::varchar(1)) END AS DAYS_SUPPLY,
        c.ndc_code AS NDC_CODE,
        c.basket_name AS BRAND_NAME,
        CASE mod(c.quantity, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.quantity)::int)::varchar ELSE rtrim((c.quantity)::varchar, '0'::varchar(1)) END AS QTY,
        CASE mod(c.refills, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.refills)::varchar ELSE rtrim((c.refills)::varchar, '0'::varchar(1)) END AS REFILLS,
        c.program_number AS PROGRAM_NUM,
        c.copay_card_number AS COPAY_VOUCHER_NUM,
        c.pharmacy_chain_number AS PHARMACY_CHAIN_NUM,
        c.pharmacy_chain AS PHARMACY_CHAIN,
        c.pharmacy_name AS PHARMACY_NAME,
        c.pharmacy_address AS PHARMACY_ADDRESS,
        c.pharmacy_address2 AS PHARMACY_ADDRESS2,
        c.pharmacy_city AS PHARMACY_CITY,
        c.pharmacy_state AS PHARMACY_STATE,
        c.pharmacy_zip AS PHARMACY_ZIP,
        CASE mod(c.pharmacy_npi_num, 1::float) WHEN NULLSEQUAL 0::float THEN c.pharmacy_npi_num ELSE rtrim(c.pharmacy_npi_num, '0'::varchar(1)) END AS PHARMACY_NPI_NUM,
        NULL AS CEPH_ID,
        NULL AS ME_NUM,
        c.principle_physician_dea AS PRINCIPLE_PHYS_DEA_NUM,
        CASE mod(c.physician_npi, 1::float) WHEN NULLSEQUAL 0::float THEN c.physician_npi ELSE rtrim(c.physician_npi, '0'::varchar(1)) END AS PRINCIPLE_PHYS_NPI_NUM,
        c.physician_name AS PHYSICIAN_NAME,
        c.physician_address1 AS PHYSICIAN_ADDRESS1,
        c.physician_address2 AS PHYSICIAN_ADDRESS2,
        c.physician_city AS PHYSICIAN_CITY,
        c.physician_state AS PHYSICIAN_STATE,
        c.physician_zip AS PHYSICIAN_ZIP,
        CASE mod(c.rebate_amount, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.rebate_amount)::int)::varchar ELSE rtrim((c.rebate_amount)::varchar, '0'::varchar(1)) END AS REBATE_AMOUNT,
        CASE mod(c.member_cash_expense, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.member_cash_expense)::int)::varchar ELSE rtrim((c.member_cash_expense)::varchar, '0'::varchar(1)) END AS MEMBER_CASH_EXPENSE,
        CASE mod(c.submitted_cost, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.submitted_cost)::int)::varchar ELSE rtrim((c.submitted_cost)::varchar, '0'::varchar(1)) END AS SUBMITTED_COST,
        CASE mod(c.pharmacy_fee, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.pharmacy_fee)::int)::varchar ELSE rtrim((c.pharmacy_fee)::varchar, '0'::varchar(1)) END AS PHARMACY_FEE,
        CASE mod(c.total_amount_due, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.total_amount_due)::int)::varchar ELSE rtrim((c.total_amount_due)::varchar, '0'::varchar(1)) END AS TOTAL_AMOUNT_DUE,
        CASE mod(c.calc_awp, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.calc_awp)::int)::varchar ELSE rtrim((c.calc_awp)::varchar, '0'::varchar(1)) END AS CALC_AWP,
        c.occ_payment_type AS OCC_PAYMENT_TYPE,
        CASE mod(c.new_refill, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.new_refill)::varchar ELSE rtrim((c.new_refill)::varchar, '0'::varchar(1)) END AS NEW_REFILL
 FROM datamart.copay c
 WHERE ((c.basket_name = ANY (ARRAY['PROAIR RESPICLICK'::varchar(17), 'QNASL'::varchar(5), 'QNASL CHILDREN'::varchar(14), 'ZECUITY'::varchar(7), 'AMRIX'::varchar(5), 'APIDPEX-P'::varchar(9), 'TEV-TROPIN'::varchar(10), 'AZILECT'::varchar(7), 'NUVIGIL'::varchar(7), 'QUARTETTE'::varchar(9), 'ADIPEX'::varchar(6)])) AND (c.fill_date < (statement_timestamp())::date) AND (coalesce(c.date_written, c.fill_date) < (statement_timestamp())::date) AND (months_between((statement_timestamp())::date, c.fill_date) <= 25::float)) UNION  SELECT coalesce(c.physician_veeva_id, c.physician_ims_id) AS VEEVA_ACCOUNT_ID,
        c.physician_ims_id AS IMS_ID,
        c.redemption_type AS REDEMPTION_TYPE,
        to_char(c.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        to_char(c.date_written, 'YYYY-MM-DD'::varchar(10)) AS HCP_DATE_WRITTEN,
        CASE mod(c.days_supply, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.days_supply)::varchar ELSE rtrim((c.days_supply)::varchar, '0'::varchar(1)) END AS DAYS_SUPPLY,
        c.ndc_code AS NDC_CODE,
        b.name AS BRAND_NAME,
        CASE mod(c.quantity, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.quantity)::int)::varchar ELSE rtrim((c.quantity)::varchar, '0'::varchar(1)) END AS QTY,
        CASE mod(c.refills, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.refills)::varchar ELSE rtrim((c.refills)::varchar, '0'::varchar(1)) END AS REFILLS,
        c.program_number AS PROGRAM_NUM,
        c.copay_card_number AS COPAY_VOUCHER_NUM,
        c.pharmacy_chain_number AS PHARMACY_CHAIN_NUM,
        c.pharmacy_chain AS PHARMACY_CHAIN,
        c.pharmacy_name AS PHARMACY_NAME,
        c.pharmacy_address AS PHARMACY_ADDRESS,
        c.pharmacy_address2 AS PHARMACY_ADDRESS2,
        c.pharmacy_city AS PHARMACY_CITY,
        c.pharmacy_state AS PHARMACY_STATE,
        c.pharmacy_zip AS PHARMACY_ZIP,
        CASE mod(c.pharmacy_npi_num, 1::float) WHEN NULLSEQUAL 0::float THEN c.pharmacy_npi_num ELSE rtrim(c.pharmacy_npi_num, '0'::varchar(1)) END AS PHARMACY_NPI_NUM,
        NULL AS CEPH_ID,
        NULL AS ME_NUM,
        c.principle_physician_dea AS PRINCIPLE_PHYS_DEA_NUM,
        CASE mod(c.physician_npi, 1::float) WHEN NULLSEQUAL 0::float THEN c.physician_npi ELSE rtrim(c.physician_npi, '0'::varchar(1)) END AS PRINCIPLE_PHYS_NPI_NUM,
        c.physician_name AS PHYSICIAN_NAME,
        c.physician_address1 AS PHYSICIAN_ADDRESS1,
        c.physician_address2 AS PHYSICIAN_ADDRESS2,
        c.physician_city AS PHYSICIAN_CITY,
        c.physician_state AS PHYSICIAN_STATE,
        c.physician_zip AS PHYSICIAN_ZIP,
        CASE mod(c.rebate_amount, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.rebate_amount)::int)::varchar ELSE rtrim((c.rebate_amount)::varchar, '0'::varchar(1)) END AS REBATE_AMOUNT,
        CASE mod(c.member_cash_expense, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.member_cash_expense)::int)::varchar ELSE rtrim((c.member_cash_expense)::varchar, '0'::varchar(1)) END AS MEMBER_CASH_EXPENSE,
        CASE mod(c.submitted_cost, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.submitted_cost)::int)::varchar ELSE rtrim((c.submitted_cost)::varchar, '0'::varchar(1)) END AS SUBMITTED_COST,
        CASE mod(c.pharmacy_fee, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.pharmacy_fee)::int)::varchar ELSE rtrim((c.pharmacy_fee)::varchar, '0'::varchar(1)) END AS PHARMACY_FEE,
        CASE mod(c.total_amount_due, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.total_amount_due)::int)::varchar ELSE rtrim((c.total_amount_due)::varchar, '0'::varchar(1)) END AS TOTAL_AMOUNT_DUE,
        CASE mod(c.calc_awp, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.calc_awp)::int)::varchar ELSE rtrim((c.calc_awp)::varchar, '0'::varchar(1)) END AS CALC_AWP,
        c.occ_payment_type AS OCC_PAYMENT_TYPE,
        CASE mod(c.new_refill, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.new_refill)::varchar ELSE rtrim((c.new_refill)::varchar, '0'::varchar(1)) END AS NEW_REFILL
 FROM ((datamart.copay c LEFT  JOIN product.basket_item bi ON ((c.basket_id = bi.entity_id))) LEFT  JOIN product.basket b ON ((bi.basket_id = b.basket_id)))
 WHERE ((b.name = ANY (ARRAY['PROAIR RESPICLICK'::varchar(17), 'QNASL'::varchar(5), 'QNASL CHILDREN'::varchar(14), 'ZECUITY'::varchar(7), 'AMRIX'::varchar(5), 'APIDPEX-P'::varchar(9), 'TEV-TROPIN'::varchar(10), 'AZILECT'::varchar(7), 'NUVIGIL'::varchar(7), 'QUARTETTE'::varchar(9), 'ADIPEX'::varchar(6)])) AND (c.fill_date < (statement_timestamp())::date) AND (coalesce(c.date_written, c.fill_date) < (statement_timestamp())::date) AND (months_between((statement_timestamp())::date, c.fill_date) <= 25::float));

CREATE  VIEW outbound.zzz_zs_agile_sp_attendees AS
 SELECT a.event_number AS EVENT_NUMBER,
        e.event_name AS EVENT_NAME,
        (e.event_start_date)::date AS EVENT_START_DATE,
        a.me_number AS ME_NUMBER,
        a.dea_number AS DEA_NUMBER,
        c.ceph_id AS CEPH_ID,
        a.tvcmid AS CUSTOMER_ID,
        a.attendee_id AS CM_ID,
        a.attendee_first_name AS ATTENDEE_FIRST_NAME,
        a.attendee_last_name AS ATTENDEE_LAST_NAME,
        a.attendee_address AS ATTENDEE_ADDRESS_LINE_1,
        NULL AS ATTENDEE_ADDRESS_LINE_2,
        NULL AS ATTENDEE_ADDRESS_LINE_3,
        a.attendee_city AS ATTENDEE_CITY,
        a.attendee_state AS ATTENDEE_STATE_PROVINCE,
        a.attendee_zip AS ATTENDEE_POSTAL_CODE,
        d.specialty AS ATTENDEE_SPECIALTY,
        d.degree AS ATTENDEE_DEGREE,
        d.ims_id AS IMS_NUM
 FROM (((datamart.event_attendee a JOIN datamart.event e ON ((e.event_number = a.event_number))) LEFT  JOIN ( SELECT a.tvcmid,
        a.specialty,
        a.degree,
        a.ims_id
 FROM ( SELECT DISTINCT prescriber_combined_demographics.tvcmid,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.degree,
        prescriber_combined_demographics.ims_id,
        row_number() OVER (PARTITION BY prescriber_combined_demographics.tvcmid ORDER BY prescriber_combined_demographics.degree) AS rnk
 FROM datamart.prescriber_combined_demographics
 ORDER BY prescriber_combined_demographics.tvcmid,
          prescriber_combined_demographics.specialty,
          prescriber_combined_demographics.degree,
          prescriber_combined_demographics.ims_id,
          row_number() OVER (PARTITION BY prescriber_combined_demographics.tvcmid ORDER BY prescriber_combined_demographics.degree)) a
 WHERE (a.rnk = 1)) d ON ((d.tvcmid = a.tvcmid))) LEFT  JOIN ( SELECT sfa_call.tvcmid,
        sfa_call.ceph_id
 FROM datamart.sfa_call
 GROUP BY sfa_call.tvcmid,
          sfa_call.ceph_id) c ON ((a.tvcmid = c.tvcmid)))
 WHERE ((e.event_start_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (trunc(e.event_start_date, 'DD'::varchar(2)) <= trunc((last_day(add_months((statement_timestamp())::timestamp, (-1))))::timestamp, 'DD'::varchar(2))))
 GROUP BY a.event_number,
          e.event_name,
          e.event_start_date,
          a.me_number,
          a.dea_number,
          c.ceph_id,
          a.attendee_id,
          a.tvcmid,
          a.attendee_first_name,
          a.attendee_last_name,
          a.attendee_address,
          NULL,
          a.attendee_city,
          a.attendee_state,
          a.attendee_zip,
          d.specialty,
          d.degree,
          d.ims_id;

CREATE  VIEW outbound.zzz_axiom_market AS
 SELECT prescriber_rx.market_name,
        prescriber_rx.payer_plan_number AS plan_num,
        b.teva_product_code AS product_code,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt24,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt24
 FROM ((datamart.prescriber_rx prescriber_rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON ((prescriber_rx.rollup_month = mth.month_ending))) LEFT  JOIN product.basket b ON ((prescriber_rx.basket_id = b.basket_id)))
 WHERE ((prescriber_rx.nrx_count IS NOT NULL) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (prescriber_rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY prescriber_rx.market_name,
          prescriber_rx.payer_plan_number,
          b.teva_product_code
 ORDER BY prescriber_rx.payer_plan_number,
          b.teva_product_code,
          sum(CASE WHEN (prescriber_rx.date = add_months(last_day(prescriber_rx.data_date), (-1))) THEN prescriber_rx.nrx_count ELSE NULL::float END);

CREATE  VIEW outbound.zzz_axiom_product_totals AS
 SELECT prescriber_rx.market_name,
        b.teva_product_code AS product_code,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt24,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt24
 FROM ((datamart.prescriber_rx prescriber_rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON ((prescriber_rx.rollup_month = mth.month_ending))) LEFT  JOIN product.basket b ON ((prescriber_rx.basket_id = b.basket_id)))
 WHERE ((prescriber_rx.nrx_count IS NOT NULL) AND (mth.month_bucket <= 24) AND (mth.month_bucket >= 1) AND (prescriber_rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY prescriber_rx.market_name,
          b.teva_product_code
 ORDER BY prescriber_rx.market_name,
          b.teva_product_code;

CREATE  VIEW outbound.dnc AS
 SELECT ims.id_num AS IMS_ID,
        tx.id_num AS DEA_NUM,
        hcp.last_name AS LAST_NAME,
        hcp.first_name AS FIRST_NAME,
        hcp.middle_name AS MID_NAME,
        hcp.address_line1 AS ADDRESS,
        hcp.city AS CITY,
        hcp.state_code AS STATE,
        hcp.zip AS ZIP,
        hcp.npi AS NPI
 FROM (((datamart.customer_level_flags clf JOIN datamart.customer_hcp_demographics hcp ON ((hcp.tvcmid = clf.tvcmid))) JOIN datamart.tvcmid_xref ims ON (((ims.tvcmid = hcp.tvcmid) AND (ims.id_type = 'IMS_ID'::varchar(6))))) LEFT  JOIN datamart.tvcmid_xref tx ON (((tx.tvcmid = hcp.tvcmid) AND (tx.id_type = 'DEA_NUM'::varchar(7)))))
 WHERE ((clf.flag_type = 'DNC'::varchar(3)) AND (clf.basket_name = 'NUVIGIL'::varchar(7)) AND (coalesce(clf.flag_effective_end_date, (statement_timestamp())::timestamp) >= (statement_timestamp())::timestamp) AND ((tx.id_num IS NOT NULL) OR (hcp.npi IS NOT NULL)) AND (hcp.ims_id IS NOT NULL))
 GROUP BY ims.id_num,
          tx.id_num,
          hcp.last_name,
          hcp.first_name,
          hcp.middle_name,
          hcp.address_line1,
          hcp.city,
          hcp.state_code,
          hcp.zip,
          hcp.npi;

CREATE  VIEW outbound.zzz_create_anda_sales AS
 SELECT sbs.transaction_id AS TRANSACTION_ID,
        to_char(sbs.invoice_date, 'YYYY-MM-DD'::varchar(10)) AS INVOICE_DATE,
        sbs.product_brand AS PRODUCT_BRAND,
        sbs.product_ndc AS PRODUCT_NDC,
        sbs.product_desc AS PRODUCT_DESC,
        (sbs.invoice_qty)::int AS INVOICE_QTY,
        (sbs.invoice_units)::int AS INVOICE_UNITS,
        sbs.invoice_cost AS INVOICE_COST,
        sbs.invoice_pack_cost AS INVOICE_PACK_COST,
        sbs.invoice_unit_cost AS INVOICE_UNIT_COST,
        sbs.contract_pack_cost AS CONTRACT_PACK_COST,
        sbs.contract_purchases AS CONTRACT_PURCHASES,
        sbs.contract_number AS CONTRACT_NUMBER,
        sbs.dispensing_location AS DISPENSING_LOCATION,
        sbs.dl_address_1 AS DL_ADDRESS_1,
        sbs.dl_address_2 AS DL_ADDRESS_2,
        sbs.dl_city AS DL_CITY,
        sbs.dl_state AS DL_STATE,
        sbs.dl_zip AS DL_ZIP,
        sbs.dl_dea_number AS DL_DEA_NUMBER,
        sbs.depot_location AS DEPOT_LOCATION,
        sbs.dep_address_1 AS DEP_ADDRESS_1,
        sbs.dep_address_2 AS DEP_ADDRESS_2,
        sbs.dep_city AS DEP_CITY,
        sbs.dep_state AS DEP_STATE,
        sbs.dep_zip AS DEP_ZIP,
        sbs.dep_dea_number AS DEP_DEA_NUMBER,
        (sbs.unit_ap)::numeric(15,2) AS UNIT_AP,
        (sbs.ap)::numeric(15,2) AS AP
 FROM datamart.select_brand_sales sbs
 WHERE (sbs.data_source = 'Anda'::varchar(4));

CREATE  VIEW outbound.activity_speaker_event AS
 SELECT cmid.id_num AS federation_id,
        e.event_location AS contact,
        ea.source_system_name AS source,
        to_char(e.event_start_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (b.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Speaker_Program'::varchar(15) AS type,
        'Speaker_Program'::varchar(15) AS native_type,
        ((((('Speaker Program -, '::varchar(19) || e.funding_source) || ', '::varchar(2)) || e.estimated_attendance) || ' Attendees, '::varchar(12)) || CASE WHEN (ea.attended = 1) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((( SELECT event_attendee.source_system_name,
        event_attendee.event_number,
        event_attendee.attended,
        event_attendee.customer_id,
        event_attendee.file_id
 FROM integration.event_attendee
 GROUP BY event_attendee.source_system_name,
          event_attendee.event_number,
          event_attendee.attended,
          event_attendee.customer_id,
          event_attendee.file_id) ea JOIN ( SELECT event.event_number,
        event.event_name,
        event.event_start_date,
        event.funding_source,
        event.estimated_attendance,
        event.event_location
 FROM integration.event
 WHERE (event.event_start_date >= add_months((now())::date, (-6)))
 GROUP BY event.event_number,
          event.event_name,
          event.event_start_date,
          event.funding_source,
          event.estimated_attendance,
          event.event_location) e ON ((ea.event_number = e.event_number))) JOIN datamart.tvcmid_xref cmid ON (((ea.customer_id = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN ( SELECT event_product.event_number,
        event_product.product_id
 FROM integration.event_product
 GROUP BY event_product.event_number,
          event_product.product_id) ep ON ((ea.event_number = ep.event_number))) LEFT  JOIN product.basket b ON (((upper(ep.product_id) = upper(b.name)) AND (b.basket_type = 'brand'::varchar(5)))))
 WHERE (ea.file_id > ( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_EVENT_ATTENDEE'::varchar(22)))))
 GROUP BY cmid.id_num,
          e.event_location,
          ea.source_system_name,
          to_char(e.event_start_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)),
          concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar),
          NULL,
          (b.basket_id)::varchar(20),
          'HCP'::varchar(3),
          'Speaker_Program'::varchar(15),
          ((((('Speaker Program -, '::varchar(19) || e.funding_source) || ', '::varchar(2)) || e.estimated_attendance) || ' Attendees, '::varchar(12)) || CASE WHEN (ea.attended = 1) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END),
          to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) EXCEPT  SELECT cmid.id_num AS federation_id,
        e.event_location AS contact,
        ea.source_system_name AS source,
        to_char(e.event_start_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (b.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Speaker_Program'::varchar(15) AS type,
        'Speaker_Program'::varchar(15) AS native_type,
        ((((('Speaker Program -, '::varchar(19) || e.funding_source) || ', '::varchar(2)) || e.estimated_attendance) || ' Attendees, '::varchar(12)) || CASE WHEN (ea.attended = 1) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((( SELECT event_attendee.source_system_name,
        event_attendee.event_number,
        event_attendee.attended,
        event_attendee.customer_id,
        event_attendee.file_id
 FROM integration.event_attendee
 GROUP BY event_attendee.source_system_name,
          event_attendee.event_number,
          event_attendee.attended,
          event_attendee.customer_id,
          event_attendee.file_id) ea JOIN ( SELECT event.event_number,
        event.event_name,
        event.event_start_date,
        event.funding_source,
        event.estimated_attendance,
        event.event_location
 FROM integration.event
 WHERE (event.event_start_date >= add_months((now())::date, (-6)))
 GROUP BY event.event_number,
          event.event_name,
          event.event_start_date,
          event.funding_source,
          event.estimated_attendance,
          event.event_location) e ON ((ea.event_number = e.event_number))) JOIN datamart.tvcmid_xref cmid ON (((ea.customer_id = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN ( SELECT event_product.event_number,
        event_product.product_id
 FROM integration.event_product
 GROUP BY event_product.event_number,
          event_product.product_id) ep ON ((ea.event_number = ep.event_number))) LEFT  JOIN product.basket b ON (((upper(ep.product_id) = upper(b.name)) AND (b.basket_type = 'brand'::varchar(5)))))
 WHERE (ea.file_id <= ( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_EVENT_ATTENDEE'::varchar(22)))))
 GROUP BY cmid.id_num,
          e.event_location,
          ea.source_system_name,
          to_char(e.event_start_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)),
          concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar),
          NULL,
          (b.basket_id)::varchar(20),
          'HCP'::varchar(3),
          'Speaker_Program'::varchar(15),
          ((((('Speaker Program -, '::varchar(19) || e.funding_source) || ', '::varchar(2)) || e.estimated_attendance) || ' Attendees, '::varchar(12)) || CASE WHEN (ea.attended = 1) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END),
          to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23));

CREATE  VIEW outbound.activity_npp_sample_orders AS
 SELECT cmid.id_num AS federation_id,
        ss.hcp_zip AS contact,
        'Knipper'::varchar(7) AS source,
        to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ss.order_source_order_id AS trackback_id,
        NULL AS previous_activity,
        (bb.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Alternate_Sample_Programs'::varchar(25) AS type,
        'Alternate_Sample_Programs'::varchar(25) AS native_type,
        concat((('Alternate Sample Programs-'::varchar(26) || coalesce(bp.name, ''::varchar)) || ','::varchar(1)), (ss.quantity)::varchar) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((((integration.sample_shipment ss JOIN datamart.tvcmid_xref cmid ON (((ss.tvcmid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dfm ON ((dfm.file_id = ss.file_id))) LEFT  JOIN product.source_product sp ON (((ss.ndc = sp.source_product_code) AND (dfm.feed_id = sp.feed_id) AND (dfm.feed_version = sp.feed_version)))) LEFT  JOIN ( SELECT bb.name,
        bb.basket_id,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) bb ON ((sp.entity_id = bb.prod_id))) LEFT  JOIN product.basket bp ON ((sp.entity_id = bp.basket_id))) LEFT  JOIN product.source s ON ((sp.source_id = s.source_id)))
 WHERE ((substr(ss.order_source_order_id, 1, 1) <> 'C'::varchar(1)) AND (ss.ship_date >= add_months((now())::date, (-6))) AND (ss.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_KNIPPER_SAMPLES'::varchar(19)))), 0))) EXCEPT  SELECT cmid.id_num AS federation_id,
        ss.hcp_zip AS contact,
        'Knipper'::varchar(7) AS source,
        to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ss.order_source_order_id AS trackback_id,
        NULL AS previous_activity,
        (bb.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Alternate_Sample_Programs'::varchar(25) AS type,
        'Alternate_Sample_Programs'::varchar(25) AS native_type,
        concat((('Alternate Sample Programs-'::varchar(26) || coalesce(bp.name, ''::varchar)) || ','::varchar(1)), (ss.quantity)::varchar) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((((integration.sample_shipment ss JOIN datamart.tvcmid_xref cmid ON (((ss.tvcmid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dfm ON ((dfm.file_id = ss.file_id))) LEFT  JOIN product.source_product sp ON (((ss.ndc = sp.source_product_code) AND (dfm.feed_id = sp.feed_id) AND (dfm.feed_version = sp.feed_version)))) LEFT  JOIN ( SELECT bb.name,
        bb.basket_id,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) bb ON ((sp.entity_id = bb.prod_id))) LEFT  JOIN product.basket bp ON ((sp.entity_id = bp.basket_id))) LEFT  JOIN product.source s ON ((sp.source_id = s.source_id)))
 WHERE ((substr(ss.order_source_order_id, 1, 1) <> 'C'::varchar(1)) AND (ss.ship_date >= add_months((now())::date, (-6))) AND (ss.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_KNIPPER_SAMPLES'::varchar(19)))), 0)));

CREATE  VIEW outbound.activity_line_item_speaker_event AS
 SELECT concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar) AS activity,
        to_char(e.event_start_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar) AS trackback_id,
        NULL AS previous_line_item,
        (ep.topic_id)::varchar(20) AS level_master_id,
        'Topics'::varchar(6) AS type,
        'Topics'::varchar(6) AS native_type,
        ep.topic_name AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((( SELECT event.event_number,
        event.event_name,
        event.event_start_date,
        max(event.file_id) AS file_id
 FROM integration.event
 WHERE (event.event_start_date >= add_months((now())::date, (-6)))
 GROUP BY event.event_number,
          event.event_name,
          event.event_start_date) e LEFT  JOIN ( SELECT event_product.source_system_name,
        event_product.event_number,
        event_product.product_id,
        event_product.product_name,
        event_product.topic_id,
        event_product.topic_name
 FROM integration.event_product
 GROUP BY event_product.source_system_name,
          event_product.event_number,
          event_product.product_id,
          event_product.product_name,
          event_product.topic_id,
          event_product.topic_name) ep ON ((e.event_number = ep.event_number))) LEFT  JOIN product.basket b ON (((upper(ep.product_name) = b.name) AND (b.basket_type = 'brand'::varchar(5))))) LEFT  JOIN ( SELECT event_attendee.source_system_name,
        event_attendee.event_number,
        event_attendee.attended,
        event_attendee.customer_id,
        event_attendee.file_id
 FROM integration.event_attendee
 GROUP BY event_attendee.source_system_name,
          event_attendee.event_number,
          event_attendee.attended,
          event_attendee.customer_id,
          event_attendee.file_id) ea ON ((ea.event_number = e.event_number))) JOIN datamart.tvcmid_xref cmid ON (((ea.customer_id = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6)))))
 WHERE (ea.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_EVENT_ATTENDEE'::varchar(22)))), 0)) EXCEPT  SELECT concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar) AS activity,
        to_char(e.event_start_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar) AS trackback_id,
        NULL AS previous_line_item,
        (ep.topic_id)::varchar(20) AS level_master_id,
        'Topics'::varchar(6) AS type,
        'Topics'::varchar(6) AS native_type,
        ep.topic_name AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((( SELECT event.event_number,
        event.event_name,
        event.event_start_date,
        max(event.file_id) AS file_id
 FROM integration.event
 WHERE (event.event_start_date >= add_months((now())::date, (-6)))
 GROUP BY event.event_number,
          event.event_name,
          event.event_start_date) e LEFT  JOIN ( SELECT event_product.source_system_name,
        event_product.event_number,
        event_product.product_id,
        event_product.product_name,
        event_product.topic_id,
        event_product.topic_name
 FROM integration.event_product
 GROUP BY event_product.source_system_name,
          event_product.event_number,
          event_product.product_id,
          event_product.product_name,
          event_product.topic_id,
          event_product.topic_name) ep ON ((e.event_number = ep.event_number))) LEFT  JOIN product.basket b ON (((upper(ep.product_name) = b.name) AND (b.basket_type = 'brand'::varchar(5))))) LEFT  JOIN ( SELECT event_attendee.source_system_name,
        event_attendee.event_number,
        event_attendee.attended,
        event_attendee.customer_id,
        event_attendee.file_id
 FROM integration.event_attendee
 GROUP BY event_attendee.source_system_name,
          event_attendee.event_number,
          event_attendee.attended,
          event_attendee.customer_id,
          event_attendee.file_id) ea ON ((ea.event_number = e.event_number))) JOIN datamart.tvcmid_xref cmid ON (((ea.customer_id = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6)))))
 WHERE (ea.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_EVENT_ATTENDEE'::varchar(22)))), 0));

CREATE  VIEW outbound.activity_line_item_non_npp_sample_orders AS
 SELECT ss.order_source_order_id AS activity,
        to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ((ss.order_source_order_id || '-'::varchar(1)) || coalesce(bp.name, ''::varchar)) AS trackback_id,
        NULL AS previous_line_item,
        (bp.basket_id)::varchar(20) AS level_master_id,
        'Alternate_Sample_Programs'::varchar(25) AS type,
        'Alternate_Sample_Programs'::varchar(25) AS native_type,
        concat((('Alternate Sample Programs-'::varchar(26) || coalesce(bp.name, ''::varchar)) || ' , '::varchar(3)), (ss.quantity)::varchar) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM (((( SELECT sample_shipment.order_source_order_id,
        sample_shipment.ship_date,
        sample_shipment.ndc,
        sample_shipment.quantity,
        sample_shipment.file_id,
        sample_shipment.record_id
 FROM integration.sample_shipment
 WHERE ((substr(sample_shipment.order_source_order_id, 1, 1) = 'C'::varchar(1)) AND (sample_shipment.ship_date >= add_months((now())::date, (-6))))) ss LEFT  JOIN product.source_product sp ON (((ss.ndc = sp.source_product_code) AND (sp.feed_id = 435) AND (sp.feed_version = 1)))) LEFT  JOIN ( SELECT bb.name,
        bb.basket_id,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) bb ON ((sp.entity_id = bb.prod_id))) LEFT  JOIN product.basket bp ON ((sp.entity_id = bp.basket_id)))
 WHERE (ss.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_VV_CALL2_SAMPLE_VOD__C'::varchar(26)))), 0))
 GROUP BY ss.order_source_order_id,
          to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)),
          ((ss.order_source_order_id || '-'::varchar(1)) || coalesce(bp.name, ''::varchar)),
          NULL,
          (bp.basket_id)::varchar(20),
          'Alternate_Sample_Programs'::varchar(25),
          concat((('Alternate Sample Programs-'::varchar(26) || coalesce(bp.name, ''::varchar)) || ' , '::varchar(3)), (ss.quantity)::varchar),
          to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) EXCEPT  SELECT ss.order_source_order_id AS activity,
        to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ((ss.order_source_order_id || '-'::varchar(1)) || coalesce(bp.name, ''::varchar)) AS trackback_id,
        NULL AS previous_line_item,
        (bp.basket_id)::varchar(20) AS level_master_id,
        'Alternate_Sample_Programs'::varchar(25) AS type,
        'Alternate_Sample_Programs'::varchar(25) AS native_type,
        concat((('Alternate Sample Programs-'::varchar(26) || coalesce(bp.name, ''::varchar)) || ' , '::varchar(3)), (ss.quantity)::varchar) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM (((( SELECT sample_shipment.order_source_order_id,
        sample_shipment.ship_date,
        sample_shipment.ndc,
        sample_shipment.quantity,
        sample_shipment.file_id,
        sample_shipment.record_id
 FROM integration.sample_shipment
 WHERE ((substr(sample_shipment.order_source_order_id, 1, 1) = 'C'::varchar(1)) AND (sample_shipment.ship_date >= add_months((now())::date, (-6))))) ss LEFT  JOIN product.source_product sp ON (((ss.ndc = sp.source_product_code) AND (sp.feed_id = 435) AND (sp.feed_version = 1)))) LEFT  JOIN ( SELECT bb.name,
        bb.basket_id,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) bb ON ((sp.entity_id = bb.prod_id))) LEFT  JOIN product.basket bp ON ((sp.entity_id = bp.basket_id)))
 WHERE (ss.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_VV_CALL2_SAMPLE_VOD__C'::varchar(26)))), 0))
 GROUP BY ss.order_source_order_id,
          to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)),
          ((ss.order_source_order_id || '-'::varchar(1)) || coalesce(bp.name, ''::varchar)),
          NULL,
          (bp.basket_id)::varchar(20),
          'Alternate_Sample_Programs'::varchar(25),
          concat((('Alternate Sample Programs-'::varchar(26) || coalesce(bp.name, ''::varchar)) || ' , '::varchar(3)), (ss.quantity)::varchar),
          to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23));

CREATE  VIEW outbound.zzz_activity_line_item_npp_sample_orders AS
 SELECT ss.order_source_order_id AS activity,
        to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ((ss.order_source_order_id || '-'::varchar(1)) || coalesce(b.name, ''::varchar)) AS trackback_id,
        NULL AS previous_line_item,
        (b.basket_id)::varchar(20) AS level_master_id,
        'Alternate_Sample_Programs'::varchar(25) AS activity_type,
        'Alternate_Sample_Programs'::varchar(25) AS native_type,
        concat((('Alternate Sample Programs-'::varchar(26) || coalesce(b.name, ''::varchar)) || ' , '::varchar(3)), (ss.quantity)::varchar) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM (((((integration.sample_shipment ss JOIN datamart.tvcmid_xref fed ON (((ss.tvcmid = fed.tvcmid) AND (fed.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dfm ON ((dfm.file_id = ss.file_id))) LEFT  JOIN product.source_product sp ON (((ss.ndc = sp.source_product_code) AND (dfm.feed_id = sp.feed_id) AND (dfm.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id))) LEFT  JOIN ( SELECT bb.name,
        bb.basket_id,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON (((bip.entity_id = bp.basket_id) AND (bp.basket_type = 'product'::varchar(7))))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) bb ON ((sp.entity_id = bb.prod_id)))
 WHERE ((substr(ss.order_source_order_id, 1, 1) <> 'C'::varchar(1)) AND (ss.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_KNIPPER_SAMPLES'::varchar(19)))), 0))) EXCEPT  SELECT ss.order_source_order_id AS activity,
        to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ((ss.order_source_order_id || '-'::varchar(1)) || coalesce(b.name, ''::varchar)) AS trackback_id,
        NULL AS previous_line_item,
        (b.basket_id)::varchar(20) AS level_master_id,
        'Alternate_Sample_Programs'::varchar(25) AS activity_type,
        'Alternate_Sample_Programs'::varchar(25) AS native_type,
        concat((('Alternate Sample Programs-'::varchar(26) || coalesce(b.name, ''::varchar)) || ' , '::varchar(3)), (ss.quantity)::varchar) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM (((((integration.sample_shipment ss JOIN datamart.tvcmid_xref fed ON (((ss.tvcmid = fed.tvcmid) AND (fed.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dfm ON ((dfm.file_id = ss.file_id))) LEFT  JOIN product.source_product sp ON (((ss.ndc = sp.source_product_code) AND (dfm.feed_id = sp.feed_id) AND (dfm.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id))) LEFT  JOIN ( SELECT bb.name,
        bb.basket_id,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON (((bip.entity_id = bp.basket_id) AND (bp.basket_type = 'product'::varchar(7))))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) bb ON ((sp.entity_id = bb.prod_id)))
 WHERE ((substr(ss.order_source_order_id, 1, 1) <> 'C'::varchar(1)) AND (ss.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_KNIPPER_SAMPLES'::varchar(19)))), 0)));

CREATE  VIEW outbound.zzz_activity_line_item_copay AS
 SELECT ((c.file_id)::varchar || (c.record_id)::varchar) AS activity,
        to_char(c.fill_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ((c.file_id)::varchar || (c.record_id)::varchar) AS trackback_id,
        NULL AS previous_line_item,
        (b.basket_id)::varchar(20) AS level_master_id,
        'Voucher/Coupon Redemption'::varchar(25) AS activity_type,
        'Voucher/Coupon Redemption'::varchar(25) AS native_type,
        cvp.program_description AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM (((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.program_number = cvp.program_number) AND (c.redemption_type = cvp.redemption_type)))) LEFT  JOIN product.basket b ON ((c.basket_id = b.basket_id))) LEFT  JOIN ( SELECT bb.basket_id,
        bb.name,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON (((bip.entity_id = bp.basket_id) AND (bp.basket_type = 'product'::varchar(7))))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.basket_id)))
 WHERE ((c.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_ASI_COPAY_DETAIL_WKLY'::varchar(25)))), 0)) AND (c.fill_date >= add_months((now())::date, (-6)))) EXCEPT  SELECT ((c.file_id)::varchar || (c.record_id)::varchar) AS activity,
        to_char(c.fill_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ((c.file_id)::varchar || (c.record_id)::varchar) AS trackback_id,
        NULL AS previous_line_item,
        (b.basket_id)::varchar(20) AS level_master_id,
        'Voucher/Coupon Redemption'::varchar(25) AS activity_type,
        'Voucher/Coupon Redemption'::varchar(25) AS native_type,
        cvp.program_description AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM (((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.program_number = cvp.program_number) AND (c.redemption_type = cvp.redemption_type)))) LEFT  JOIN product.basket b ON ((c.basket_id = b.basket_id))) LEFT  JOIN ( SELECT bb.basket_id,
        bb.name,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON (((bip.entity_id = bp.basket_id) AND (bp.basket_type = 'product'::varchar(7))))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.basket_id)))
 WHERE ((c.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_ASI_COPAY_DETAIL_WKLY'::varchar(25)))), 0)) AND (c.fill_date >= add_months((now())::date, (-6))));

CREATE  VIEW outbound.zzz_rems_program_lookup AS
 SELECT rems_prescriber.program_id AS PROGRAM_ID,
        rems_prescriber.program_name AS PROGRAM_NAME
 FROM datamart.rems_prescriber
 GROUP BY rems_prescriber.program_id,
          rems_prescriber.program_name;

CREATE  VIEW outbound.zzz_asi_rems_programs AS
 SELECT p.program_id,
        p.program_name
 FROM integration.rems_prescriber p
 GROUP BY p.program_id,
          p.program_name;

CREATE  VIEW outbound.zzz_azilect_market AS
SELECT axiom_market.plan_num AS PLAN_NUM, axiom_market.product_code AS PRODUCT_CODE, coalesce(sum(axiom_market.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_market.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_market.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_market.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_market.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_market.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_market.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_market.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_market.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_market.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_market.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_market.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_market.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_market.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_market.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_market.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_market.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_market.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_market.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_market.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_market.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_market.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_market.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_market.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_market.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_market.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_market.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_market.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_market.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_market.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_market.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_market.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_market.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_market.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_market.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_market.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_market.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_market.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_market.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_market.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_market.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_market.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_market.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_market.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_market.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_market.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_market.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_market.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_market WHERE (axiom_market.product_code = ANY (ARRAY['700105'::varchar(6), '700110'::varchar(6), '700210'::varchar(6), '700220'::varchar(6), '700310'::varchar(6), '700320'::varchar(6), '700410'::varchar(6), '700420'::varchar(6), '700510'::varchar(6), '700520'::varchar(6), '700530'::varchar(6), '700540'::varchar(6), '700550'::varchar(6), '700582'::varchar(6), '700584'::varchar(6), '700586'::varchar(6), '700588'::varchar(6), '700570'::varchar(6)])) GROUP BY axiom_market.plan_num, axiom_market.product_code;

CREATE  VIEW outbound.zzz_azilect_product_totals AS
SELECT axiom_product_totals.product_code AS PRODUCT_CODE, coalesce(sum(axiom_product_totals.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_product_totals.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_product_totals.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_product_totals.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_product_totals.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_product_totals.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_product_totals.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_product_totals.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_product_totals.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_product_totals.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_product_totals.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_product_totals.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_product_totals.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_product_totals.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_product_totals.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_product_totals.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_product_totals.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_product_totals.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_product_totals.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_product_totals.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_product_totals.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_product_totals.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_product_totals.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_product_totals.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_product_totals.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_product_totals.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_product_totals.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_product_totals.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_product_totals.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_product_totals.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_product_totals.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_product_totals.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_product_totals.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_product_totals.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_product_totals.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_product_totals.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_product_totals.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_product_totals.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_product_totals.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_product_totals.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_product_totals.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_product_totals.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_product_totals.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_product_totals.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_product_totals.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_product_totals.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_product_totals.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_product_totals.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_product_totals WHERE (axiom_product_totals.product_code = ANY (ARRAY['700105'::varchar(6), '700110'::varchar(6), '700210'::varchar(6), '700220'::varchar(6), '700310'::varchar(6), '700320'::varchar(6), '700410'::varchar(6), '700420'::varchar(6), '700510'::varchar(6), '700520'::varchar(6), '700530'::varchar(6), '700540'::varchar(6), '700550'::varchar(6), '700582'::varchar(6), '700584'::varchar(6), '700586'::varchar(6), '700588'::varchar(6), '700570'::varchar(6)])) GROUP BY axiom_product_totals.product_code;

CREATE  VIEW outbound.zzz_create_mm_ram_to_rsm AS
 SELECT mm_ram_to_rsm.mm_ram AS MM_RAM,
        mm_ram_to_rsm.rsm AS RSM
 FROM datamart.mm_ram_to_rsm
 GROUP BY mm_ram_to_rsm.mm_ram,
          mm_ram_to_rsm.rsm
 ORDER BY mm_ram_to_rsm.mm_ram,
          mm_ram_to_rsm.rsm;

CREATE  VIEW outbound.zzz_create_product_lookup AS
(( SELECT '100100'::varchar(6) AS PRODUCT_ID,
        'Provigil'::varchar(8) AS PRODUCT_DESC,
        'Wake'::varchar(4) AS MARKET_DESC
 FROM v_catalog.dual UNION ALL  SELECT '100700'::varchar(6),
        'Nuvigil'::varchar(7),
        'Wake'::varchar(4)
 FROM v_catalog.dual) UNION ALL  SELECT '300500'::varchar(6),
        'Fentora'::varchar(7),
        'Pain'::varchar(4)
 FROM v_catalog.dual) UNION ALL  SELECT '700100'::varchar(6),
        'Azilect'::varchar(7),
        'Wake'::varchar(4)
 FROM v_catalog.dual;

CREATE  VIEW outbound.zzz_create_tb_ds_accountsummary AS
 SELECT dsd.account_id AS ACCOUNT_ID,
        dsd.location_id AS LOCATION_ID,
        dsd.account_name AS ACCOUNT_NAME,
        dsd.account_class AS ACCOUNT_CLASS,
        dsd.address_1 AS ADDRESS_1,
        dsd.address_2 AS ADDRESS_2,
        dsd.city AS CITY,
        dsd.state AS STATE,
        dsd.zip AS ZIP
 FROM datamart.direct_sales_demographics dsd
 WHERE (dsd.file_id = ( SELECT max(direct_sales_demographics.file_id) AS MAX
 FROM datamart.direct_sales_demographics));

CREATE  VIEW outbound.zzz_create_tb_ds_transactions AS
 SELECT ds.account_id AS ACCOUNT_ID,
        ds.location_id AS LOCATION_ID,
        ds.shipment_date AS SHIPMENT_DATE,
        ds.ndc_code AS NDC_CODE,
        ds.product_name AS PRODUCT_NAME,
        ds.transaction_type AS TRANSACTION_TYPE,
        CASE mod(ds.direct_sales_units, 1::float) WHEN NULLSEQUAL 0::float THEN ((ds.direct_sales_units)::int)::varchar ELSE rtrim((ds.direct_sales_units)::varchar, '0'::varchar(1)) END AS DIRECT_SALES_UNITS,
        CASE mod(ds.direct_sales_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((ds.direct_sales_dollars)::int)::varchar ELSE rtrim((ds.direct_sales_dollars)::varchar, '0'::varchar(1)) END AS DIRECT_SALES_DOLLARS,
        CASE mod(ds.unit_ap, 1::float) WHEN NULLSEQUAL 0::float THEN ((ds.unit_ap)::int)::varchar ELSE rtrim((ds.unit_ap)::varchar, '0'::varchar(1)) END AS UNIT_AP,
        CASE mod(ds.total_ap, 1::float) WHEN NULLSEQUAL 0::float THEN ((ds.total_ap)::int)::varchar ELSE rtrim((ds.total_ap)::varchar, '0'::varchar(1)) END AS AP
 FROM datamart.direct_sales ds
 WHERE (ds.file_id = ( SELECT max(direct_sales.file_id) AS MAX
 FROM datamart.direct_sales));

CREATE  VIEW outbound.zzz_fentora_market AS
SELECT axiom_market.plan_num AS PLAN_NUM, axiom_market.product_code AS PRODUCT_CODE, coalesce(sum(axiom_market.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_market.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_market.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_market.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_market.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_market.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_market.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_market.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_market.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_market.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_market.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_market.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_market.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_market.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_market.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_market.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_market.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_market.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_market.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_market.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_market.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_market.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_market.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_market.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_market.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_market.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_market.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_market.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_market.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_market.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_market.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_market.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_market.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_market.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_market.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_market.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_market.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_market.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_market.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_market.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_market.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_market.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_market.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_market.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_market.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_market.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_market.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_market.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_market WHERE (axiom_market.product_code = ANY (ARRAY['300500'::varchar(6), '300100'::varchar(6), '300180'::varchar(6), '300170'::varchar(6), '300130'::varchar(6), '300140'::varchar(6), '300110'::varchar(6)])) GROUP BY axiom_market.plan_num, axiom_market.product_code;

CREATE  VIEW outbound.zzz_fentora_product_totals AS
SELECT axiom_product_totals.product_code AS PRODUCT_CODE, coalesce(sum(axiom_product_totals.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_product_totals.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_product_totals.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_product_totals.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_product_totals.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_product_totals.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_product_totals.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_product_totals.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_product_totals.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_product_totals.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_product_totals.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_product_totals.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_product_totals.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_product_totals.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_product_totals.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_product_totals.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_product_totals.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_product_totals.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_product_totals.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_product_totals.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_product_totals.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_product_totals.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_product_totals.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_product_totals.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_product_totals.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_product_totals.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_product_totals.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_product_totals.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_product_totals.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_product_totals.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_product_totals.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_product_totals.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_product_totals.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_product_totals.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_product_totals.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_product_totals.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_product_totals.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_product_totals.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_product_totals.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_product_totals.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_product_totals.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_product_totals.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_product_totals.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_product_totals.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_product_totals.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_product_totals.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_product_totals.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_product_totals.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_product_totals WHERE (axiom_product_totals.product_code = ANY (ARRAY['300500'::varchar(6), '300100'::varchar(6), '300180'::varchar(6), '300170'::varchar(6), '300130'::varchar(6), '300140'::varchar(6), '300110'::varchar(6)])) GROUP BY axiom_product_totals.product_code;

CREATE  VIEW outbound.zzz_kc_copay_voucher_program AS
SELECT c.redemption_type, c.program_number, c.program_description, c.sales_force_id, c.program_type, c.product_name, to_char(c.program_start_date, 'YYYY-MM-DD'::varchar(10)) AS program_start_date, to_char(c.program_end_date, 'YYYY-MM-DD'::varchar(10)) AS program_end_date, c.number_of_tablets FROM reference.copay_voucher_program c;

CREATE  VIEW outbound.zzz_nuvigil_market AS
SELECT axiom_market.plan_num AS PLAN_NUM, axiom_market.product_code AS PRODUCT_CODE, coalesce(sum(axiom_market.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_market.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_market.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_market.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_market.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_market.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_market.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_market.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_market.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_market.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_market.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_market.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_market.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_market.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_market.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_market.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_market.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_market.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_market.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_market.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_market.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_market.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_market.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_market.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_market.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_market.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_market.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_market.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_market.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_market.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_market.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_market.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_market.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_market.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_market.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_market.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_market.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_market.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_market.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_market.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_market.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_market.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_market.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_market.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_market.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_market.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_market.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_market.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_market WHERE (axiom_market.product_code = ANY (ARRAY['100N00'::varchar(6), '100100'::varchar(6), '100120'::varchar(6)])) GROUP BY axiom_market.plan_num, axiom_market.product_code;

CREATE  VIEW outbound.zzz_nuvigil_product_totals AS
SELECT axiom_product_totals.product_code AS PRODUCT_CODE, coalesce(sum(axiom_product_totals.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_product_totals.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_product_totals.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_product_totals.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_product_totals.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_product_totals.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_product_totals.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_product_totals.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_product_totals.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_product_totals.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_product_totals.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_product_totals.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_product_totals.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_product_totals.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_product_totals.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_product_totals.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_product_totals.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_product_totals.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_product_totals.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_product_totals.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_product_totals.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_product_totals.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_product_totals.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_product_totals.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_product_totals.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_product_totals.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_product_totals.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_product_totals.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_product_totals.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_product_totals.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_product_totals.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_product_totals.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_product_totals.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_product_totals.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_product_totals.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_product_totals.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_product_totals.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_product_totals.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_product_totals.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_product_totals.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_product_totals.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_product_totals.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_product_totals.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_product_totals.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_product_totals.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_product_totals.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_product_totals.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_product_totals.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_product_totals WHERE (axiom_product_totals.product_code = ANY (ARRAY['100N00'::varchar(6), '100100'::varchar(6), '100120'::varchar(6)])) GROUP BY axiom_product_totals.product_code;

CREATE  VIEW outbound.zzz_v_factory_sales_852 AS
 SELECT fs.trading_partner AS TRADING_PARTNER,
        fs.distribution_center AS DISTRIB_CENTER,
        fs.distribution_center_dea_number AS DISTRIB_CENTER_DEA_NUM,
        to_char(fs.reporting_date, 'DD-MON-YY'::varchar(9)) AS REPORTING_DATE,
        fs.ndc AS NDC,
        coalesce(b.teva_product_code, 'ERROR'::varchar(5)) AS PRODUCT_CODE,
        fs.product_name AS PRODUCT_NAME,
        fs.description AS DESCRIPTION,
        CASE mod(fs.qty_received, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_received)::int)::varchar ELSE rtrim((fs.qty_received)::varchar, '0'::varchar(1)) END AS QTY_RECEIVED,
        CASE mod(fs.qty_received_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_received_dollars)::int)::varchar ELSE rtrim((fs.qty_received_dollars)::varchar, '0'::varchar(1)) END AS QTY_RECEIVED_DOLLARS,
        CASE mod(fs.qty_sold, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_sold)::int)::varchar ELSE rtrim((fs.qty_sold)::varchar, '0'::varchar(1)) END AS QTY_SOLD,
        CASE mod(fs.qty_sold_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_sold_dollars)::int)::varchar ELSE rtrim((fs.qty_sold_dollars)::varchar, '0'::varchar(1)) END AS QTY_SOLD_DOLLARS,
        CASE mod(fs.qty_omit, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_omit)::int)::varchar ELSE rtrim((fs.qty_omit)::varchar, '0'::varchar(1)) END AS QTY_OMIT,
        CASE mod(fs.qty_omit_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_omit_dollars)::int)::varchar ELSE rtrim((fs.qty_omit_dollars)::varchar, '0'::varchar(1)) END AS QTY_OMIT_DOLLARS,
        CASE mod(fs.month_end_qty_on_hand, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.month_end_qty_on_hand)::int)::varchar ELSE rtrim((fs.month_end_qty_on_hand)::varchar, '0'::varchar(1)) END AS MTH_END_QTY_ON_HAND,
        CASE mod(fs.month_end_qty_on_hand_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.month_end_qty_on_hand_dollars)::int)::varchar ELSE rtrim((fs.month_end_qty_on_hand_dollars)::varchar, '0'::varchar(1)) END AS MTH_END_QTY_ON_HAND_DOLLARS,
        CASE mod(fs.month_end_committed, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.month_end_committed)::int)::varchar ELSE rtrim((fs.month_end_committed)::varchar, '0'::varchar(1)) END AS MTH_END_COMMITTED,
        CASE mod(fs.month_end_committed_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.month_end_committed_dollars)::int)::varchar ELSE rtrim((fs.month_end_committed_dollars)::varchar, '0'::varchar(1)) END AS MTH_END_COMMITTED_DOLLARS,
        CASE mod(fs.month_end_reserved, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.month_end_reserved)::int)::varchar ELSE rtrim((fs.month_end_reserved)::varchar, '0'::varchar(1)) END AS MTH_END_RESERVED,
        CASE mod(fs.month_end_reserved_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.month_end_reserved_dollars)::int)::varchar ELSE rtrim((fs.month_end_reserved_dollars)::varchar, '0'::varchar(1)) END AS MTH_END_RESERVED_DOLLARS,
        CASE mod(fs.qty_return, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_return)::int)::varchar ELSE rtrim((fs.qty_return)::varchar, '0'::varchar(1)) END AS QTY_RETURN,
        CASE mod(fs.qty_return_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_return_dollars)::int)::varchar ELSE rtrim((fs.qty_return_dollars)::varchar, '0'::varchar(1)) END AS QTY_RETURN_DOLLARS,
        CASE mod(fs.qty_customer_return, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_customer_return)::int)::varchar ELSE rtrim((fs.qty_customer_return)::varchar, '0'::varchar(1)) END AS QTY_CUSTOMER_RETURN,
        CASE mod(fs.qty_customer_return_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_customer_return_dollars)::int)::varchar ELSE rtrim((fs.qty_customer_return_dollars)::varchar, '0'::varchar(1)) END AS QTY_CUSTOMER_RETURN_DOLLARS,
        to_char((statement_timestamp())::timestamp, 'DD-MON-YY'::varchar(9)) AS LAST_BUILD_DATE
 FROM (datamart.factory_sales_852 fs LEFT  JOIN product.basket b ON ((fs.basket_id = b.basket_id)));

CREATE  VIEW outbound.zzz_v_touchpoint_call AS
 SELECT tpc.call_id AS ID,
        tpc.call_attempt_id AS AttemptID,
        tpc.touchpoint_id AS TouchpointID,
        tpc.veeva_id AS ClientID,
        tpc.ims_id AS IMSID,
        tpc.first_name AS FirstName,
        tpc.last_name AS LastName,
        tpc.call_type AS Type,
        tpc.call_date AS Date,
        tpc.status_code AS StatusCode,
        tpc.status_description AS StatusDescription,
        tpc.rep_id AS RepID,
        tpc.rep_first_name AS RepFirstName,
        tpc.rep_last_name AS RepLastName
 FROM datamart.touchpoint_call tpc
 WHERE (tpc.file_id = ( SELECT max(touchpoint_call.file_id) AS MAX
 FROM datamart.touchpoint_call));

CREATE  VIEW outbound.zzz_zs_agile_voucher_redemptions AS
 SELECT c.physician_tvcmid AS TVCMID,
        c.physician_ims_id AS IMS_ID,
        c.physician_veeva_id AS VEEVA_ACCOUNT_ID,
        c.program_number AS ASI_PROGRAM_NUM,
        v.program_description AS PROGRAM_DESC,
        c.copay_card_number AS VOUCHER_NUM,
        c.physician_zip AS ZIP_CODE,
        to_char(c.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        c.basket_name AS PRODUCT_NAME,
        p.source_product_description AS DRUG_DESC,
        CASE mod(c.quantity, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.quantity)::int)::varchar ELSE rtrim((c.quantity)::varchar, '0'::varchar(1)) END AS QTY
 FROM ((datamart.copay c JOIN reference.copay_voucher_program v ON (((c.program_number = v.program_number) AND (c.redemption_type = v.redemption_type)))) LEFT  JOIN product.source_product p ON ((c.basket_id = p.entity_id)))
 WHERE ((c.basket_name = 'NUVIGIL'::varchar(7)) AND (c.fill_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (c.fill_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))));

CREATE  VIEW outbound.i_sfa_onc_trx AS
 SELECT p.time_period,
        p.ims_id,
        p.product,
        sum(p.trx_curr_mth) AS trx_curr_mth,
        sum(p.trx_prior_mth) AS trx_prior_mth,
        sum(p.trx_3mth) AS trx_3mth,
        sum(p.trx_6mth) AS trx_6mth,
        sum(p.trx_sem) AS trx_sem,
        p.sort_order,
        p.data_date
 FROM ( SELECT ((to_char(rx1.data_date, 'yyyy'::varchar(4)) || '-'::varchar(1)) || to_char(rx1.data_date, 'mm'::varchar(2))) AS time_period,
        rx1.ims_id,
        CASE rx1.basket_id WHEN NULLSEQUAL 207 THEN 'TRETINOIN'::varchar(9) WHEN NULLSEQUAL 203 THEN 'LEUKERAN'::varchar(8) WHEN NULLSEQUAL 242 THEN 'GLEEVEC'::varchar(7) WHEN NULLSEQUAL 243 THEN 'SPRYCEL'::varchar(7) WHEN NULLSEQUAL 244 THEN 'TASIGNA'::varchar(7) WHEN NULLSEQUAL 59 THEN 'BOSULIF'::varchar(7) WHEN NULLSEQUAL 450 THEN 'ICLUSIG'::varchar(7) WHEN NULLSEQUAL 79 THEN 'TKI TOTAL'::varchar(9) WHEN NULLSEQUAL 474 THEN 'IMBRUVICA'::varchar(9) WHEN NULLSEQUAL 379 THEN 'GRANIX'::varchar(6) WHEN NULLSEQUAL 666 THEN 'NEUPOGEN'::varchar(8) WHEN NULLSEQUAL 668 THEN 'LEUKINE'::varchar(7) ELSE NULL END AS product,
        sum(CASE WHEN (to_char(rx1.date, 'YYYYMM'::varchar(6)) = to_char(rx1.data_date, 'YYYYMM'::varchar(6))) THEN rx1.trx_count ELSE 0::float END) AS trx_curr_mth,
        sum(CASE WHEN (to_char(rx1.date, 'YYYYMM'::varchar(6)) = to_char(add_months(rx1.data_date, (-1)), 'YYYYMM'::varchar(6))) THEN rx1.trx_count ELSE 0::float END) AS trx_prior_mth,
        sum(CASE WHEN ((to_char(rx1.date, 'YYYYMM'::varchar(6)) >= to_char(add_months(rx1.data_date, (-2)), 'YYYYMM'::varchar(6))) AND (to_char(rx1.date, 'YYYYMM'::varchar(6)) <= to_char(rx1.data_date, 'YYYYMM'::varchar(6)))) THEN rx1.trx_count ELSE 0::float END) AS trx_3mth,
        sum(CASE WHEN ((to_char(rx1.date, 'YYYYMM'::varchar(6)) >= to_char(add_months(rx1.data_date, (-5)), 'YYYYMM'::varchar(6))) AND (to_char(rx1.date, 'YYYYMM'::varchar(6)) <= to_char(rx1.data_date, 'YYYYMM'::varchar(6)))) THEN rx1.trx_count ELSE 0::float END) AS trx_6mth,
        sum(CASE WHEN ((rx1.rollup_month >= rpt_periods.s1_start) AND (rx1.rollup_month <= rpt_periods.s1_end)) THEN rx1.trx_count ELSE 0::float END) AS trx_sem,
        CASE rx1.basket_id WHEN NULLSEQUAL 207 THEN 1 WHEN NULLSEQUAL 203 THEN 2 WHEN NULLSEQUAL 242 THEN 3 WHEN NULLSEQUAL 243 THEN 4 WHEN NULLSEQUAL 244 THEN 5 WHEN NULLSEQUAL 59 THEN 6 WHEN NULLSEQUAL 450 THEN 7 WHEN NULLSEQUAL 79 THEN 8 WHEN NULLSEQUAL 474 THEN 9 WHEN NULLSEQUAL 379 THEN 10 WHEN NULLSEQUAL 666 THEN 11 WHEN NULLSEQUAL 668 THEN 12 ELSE NULL::int END AS sort_order,
        rx1.data_date
 FROM ((datamart.prescriber_rx rx1 JOIN datamart.prescriber_combined_demographics d ON ((rx1.ims_id = d.ims_id))) CROSS  JOIN ( SELECT pr.data_date,
        s1.semester_time_period AS s1_time_period,
        s1.semester_begin_date AS s1_start,
        s1.semester_end_date AS s1_end
 FROM (reference.date_dim s1 JOIN ( SELECT rx.data_date
 FROM datamart.prescriber_rx rx
 WHERE ((rx.basket_id = 151) AND (rx.data_date IN ( SELECT max(prescriber_rx.data_date) AS max
 FROM datamart.prescriber_rx
 WHERE (prescriber_rx.basket_id = 151))))
 LIMIT 1) pr ON ((s1.calendar_date = pr.data_date)))) rpt_periods)
 WHERE ((d.sales_force_id = 'TO'::varchar(2)) AND (d.pdrp_flag = 'N'::varchar(1)) AND (rx1.basket_id = ANY (ARRAY[668, 59, 243, 244, 79, 242, 474, 666, 203, 207, 379, 450])) AND (to_char(rx1.date, 'YYYYMM'::varchar(6)) >= to_char(add_months(rx1.data_date, (-5)), 'YYYYMM'::varchar(6))) AND (to_char(rx1.date, 'YYYYMM'::varchar(6)) <= to_char(rx1.data_date, 'YYYYMM'::varchar(6))) AND (rx1.tvcmid IN ( SELECT sfa_demographics.tvcmid
 FROM datamart.sfa_demographics
 WHERE (sfa_demographics.sales_force_id = 'TO'::varchar(2)))))
 GROUP BY rx1.data_date,
          rx1.ims_id,
          rx1.basket_id) p
 GROUP BY p.time_period,
          p.ims_id,
          p.product,
          p.sort_order,
          p.data_date;

CREATE  VIEW outbound.zzz_axiom_market_w AS
 SELECT prescriber_rx.market_name,
        prescriber_rx.payer_plan_number AS plan_num,
        b.teva_product_code AS product_code,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt24,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt24
 FROM ((datamart.prescriber_rx prescriber_rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON ((prescriber_rx.rollup_month = mth.month_ending))) LEFT  JOIN product.basket b ON ((prescriber_rx.basket_id = b.basket_id)))
 WHERE ((prescriber_rx.nrx_count IS NOT NULL) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))
 GROUP BY prescriber_rx.market_name,
          prescriber_rx.payer_plan_number,
          b.teva_product_code
 ORDER BY prescriber_rx.payer_plan_number,
          b.teva_product_code,
          sum(CASE WHEN (prescriber_rx.date = add_months(last_day(prescriber_rx.data_date), (-1))) THEN prescriber_rx.nrx_count ELSE NULL::float END);

CREATE  VIEW outbound.zzz_zs_agile_sp_programs AS
 SELECT p.event_number AS EVENT_NUMBER,
        p.parent_event_number AS PARENT_EVENT_NUMBER,
        p.event_name AS EVENT_NAME,
        p.event_status_code AS EVENT_STATUS_CODE,
        p.event_status_description AS EVENT_STATUS_DESCRIPTION,
        to_char(p.event_status_change_date, 'YYYY-MM-DD'::varchar(10)) AS EVENT_STATUS_CHANGE_DATE,
        to_char(p.event_start_date, 'YYYY-MM-DD'::varchar(10)) AS EVENT_START_DATE,
        to_char(p.event_end_date, 'YYYY-MM-DD'::varchar(10)) AS EVENT_END_DATE,
        p.event_time_zone AS EVENT_TIME_ZONE,
        p.funding_source AS FUNDING_SOURCE,
        p.event_type AS EVENT_TYPE,
        p.event_type_description AS EVENT_TYPE_DESCRIPTION,
        p.event_format AS EVENT_FORMAT,
        p.event_location AS EVENT_LOCATION,
        to_char(p.pending_mgmnt_approval_date, 'YYYY-MM-DD'::varchar(10)) AS PENDING_MGMNT_APPROVAL_DATE,
        to_char(p.event_approval_date, 'YYYY-MM-DD'::varchar(10)) AS EVENT_APPROVAL_DATE,
        p.event_approver_id AS EVENT_APPROVER_ID,
        to_char(p.event_schedule_date, 'YYYY-MM-DD'::varchar(10)) AS EVENT_SCHEDULE_DATE,
        to_char(p.attendee_closeout_date, 'YYYY-MM-DD'::varchar(10)) AS ATTENDEE_CLOSEOUT_DATE,
        to_char(p.financial_closeout_date, 'YYYY-MM-DD'::varchar(10)) AS FINANCIAL_CLOSEOUT_DATE,
        to_char(p.cancellation_date, 'YYYY-MM-DD'::varchar(10)) AS CANCELLATION_DATE,
        p.cancellation_reason AS CANCELLATION_REASON,
        p.cancellation_source AS CANCELLATION_SOURCE,
        p.event_venue_min_cnt_req_ind AS EVENT_VENUE_MIN_CNT_REQ_IND,
        p.event_venue_min_count AS EVENT_VENUE_MIN_COUNT,
        p.estimated_attendance AS ESTIMATED_ATTENDANCE,
        p.venue_id AS VENUE_ID,
        p.venue_full_name AS VENUE_FULL_NAME,
        p.venue_address_line_1 AS VENUE_ADDRESS_LINE_1,
        p.venue_address_line_2 AS VENUE_ADDRESS_LINE_2,
        p.venue_address_line_3 AS VENUE_ADDRESS_LINE_3,
        p.venue_address_line_4 AS VENUE_ADDRESS_LINE_4,
        p.venue_city AS VENUE_CITY,
        p.venue_state AS VENUE_STATE_PROVINCE,
        p.venue_zip AS VENUE_POSTAL_CODE,
        p.venue_postal_extended_code AS VENUE_POSTAL_EXTENDED_CODE,
        p.venue_country_code AS VENUE_COUNTRY_CODE,
        p.venue_contact AS VENUE_CONTACT,
        p.venue_phone AS VENUE_PHONE,
        p.venue_fax AS VENUE_FAX,
        p.venue_email AS VENUE_EMAIL,
        p.trade_secret_indicator AS TRADE_SECRET_INDICATOR,
        p.trade_secret_reason AS TRADE_SECRET_REASON,
        p.custom_field_1 AS CUSTOM_FIELD_1,
        p.custom_field_2 AS CUSTOM_FIELD_2,
        p.custom_field_3 AS CUSTOM_FIELD_3,
        p.custom_field_4 AS CUSTOM_FIELD_4,
        p.custom_field_5 AS CUSTOM_FIELD_5,
        e.payment_id AS PAYEMNT_ID,
        e.expense_category AS EXPENSE_CATEGORY,
        CASE mod(e.amount, 1::float) WHEN NULLSEQUAL 0::float THEN ((e.amount)::int)::varchar ELSE rtrim((e.amount)::varchar, '0'::varchar(1)) END AS AMOUNT
 FROM (datamart.event p LEFT  JOIN datamart.event_expense e ON ((p.event_number = e.event_number)));

CREATE  VIEW outbound.zzz_asi_survey_data AS
(( SELECT a.veeva_account_id,
        a.bu,
        a.survey_update_date,
        a.survey,
        a.question,
        a.answer,
        a.response_update_date,
        a.response_create_date
 FROM ( SELECT t.account_vod__c AS veeva_account_id,
        substr(s.territory_vod__c, 1, 2) AS bu,
        to_char(sqr_main.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS survey_update_date,
        s.name AS survey,
        CASE WHEN ((s.name = ANY (ARRAY['Pharmacy Survey'::varchar(34), 'Respiratory - RespiClick Readiness'::varchar(34)])) AND (q.order_vod__c = ANY (ARRAY[0::numeric(18,0), 1::numeric(18,0), 2::numeric(18,0)]))) THEN (concat(((q.order_vod__c + 1::numeric(18,0)))::varchar, '. '::varchar(2)) || sqr_main.question_text_vod__c) WHEN ((s.name = ANY (ARRAY['Pharmacy Survey'::varchar(34), 'Respiratory - RespiClick Readiness'::varchar(34)])) AND (q.order_vod__c <> ALL (ARRAY[0::numeric(18,0), 1::numeric(18,0), 2::numeric(18,0)]))) THEN ('. '::varchar(2) || sqr_main.question_text_vod__c) ELSE sqr_main.question_text_vod__c END AS question,
        sqr_main.response AS answer,
        to_char(sqr_main.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS response_update_date,
        to_char(sqr_main.createddate, 'YYYY-MM-DD'::varchar(10)) AS response_create_date,
        row_number() OVER (PARTITION BY t.account_vod__c, q.id, sqr_main.response ORDER BY sqr_main.lastmodifieddate DESC) AS rnk
 FROM (((veeva.survey s JOIN veeva.survey_question q ON ((s.id = q.survey_vod__c))) JOIN ( SELECT sqr4.createddate,
        sqr4.lastmodifieddate,
        sqr4.survey_target_vod__c,
        sqr4.survey_question_vod__c,
        sqr4.question_text_vod__c,
        response.response
 FROM (( SELECT sqr3.id,
        sqr3.createddate,
        sqr3.lastmodifieddate,
        sqr3.survey_target_vod__c,
        sqr3.survey_question_vod__c,
        sqr3.question_text_vod__c,
        row_number() OVER (PARTITION BY sqr3.id ORDER BY sqr3.file_id DESC) AS rnk
 FROM veeva.survey_question_response sqr3
 WHERE (sqr3.question_text_vod__c !~~ '%Adasuve%Review%'::varchar(16))) sqr4 JOIN ( SELECT "substring"(v.values, 1, 18) AS id,
        "substring"(v.values, 19, length(v.values)) AS response
 FROM ( SELECT public.MapItems(r.v1) OVER () AS ( keys, values )
 FROM ( SELECT public.MapDelimitedExtractor((coalesce((sqr2.id || replace(sqr2.response_vod__c, ';'::varchar(1), (';'::varchar(1) || sqr2.id))), sqr2.id))::long varchar(10468) USING PARAMETERS delimiter=';'::varchar(1)) AS v1
 FROM ( SELECT sqr1.id,
        sqr1.response_vod__c,
        row_number() OVER (PARTITION BY st.account_vod__c, sqr1.survey_question_vod__c ORDER BY sqr1.lastmodifieddate DESC) AS rnk
 FROM (veeva.survey_question_response sqr1 JOIN veeva.survey_target st ON ((sqr1.survey_target_vod__c = st.id)))
 WHERE (sqr1.question_text_vod__c !~~ '%Adasuve%Review%'::varchar(16))) sqr2
 WHERE (sqr2.rnk = 1)) r) v
 GROUP BY "substring"(v.values, 1, 18),
          "substring"(v.values, 19, length(v.values))) response ON (((sqr4.id = response.id) AND (sqr4.rnk = 1))))) sqr_main ON ((q.id = sqr_main.survey_question_vod__c))) JOIN veeva.survey_target t ON ((t.id = sqr_main.survey_target_vod__c)))
 WHERE ((s.file_id = ( SELECT max(survey.file_id) AS MAX
 FROM veeva.survey)) AND (q.file_id = ( SELECT max(survey_question.file_id) AS MAX
 FROM veeva.survey_question)) AND (t.file_id = ( SELECT max(survey_target.file_id) AS MAX
 FROM veeva.survey_target)) AND (s.name = ANY (ARRAY['Pharmacy Survey'::varchar(42), 'Profiling and Developing Product Champions'::varchar(42), 'REMS Enrollment and Formulary'::varchar(42), 'Respiratory - RespiClick Readiness'::varchar(42), 'Respiratory Business Survey'::varchar(42), 'Respiratory Professional Survey'::varchar(42), 'e-Rx Survey'::varchar(42)])))) a
 WHERE (a.rnk = 1) UNION  SELECT B.veeva_account_id,
        B.bu,
        max(B.survey_update_date) OVER (PARTITION BY B.veeva_account_id),
        B.survey,
        B.question,
        B.answer,
        B.response_update_date,
        B.response_create_date
 FROM ( SELECT t.account_vod__c AS veeva_account_id,
        substr(s.territory_vod__c, 1, 2) AS bu,
        to_char(r.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS survey_update_date,
        (s.name || ' B'::varchar(2)) AS survey,
        r.question_text_vod__c AS question,
        r.response AS answer,
        to_char(r.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS response_update_date,
        to_char(r.createddate, 'YYYY-MM-DD'::varchar(10)) AS response_create_date,
        row_number() OVER (PARTITION BY t.account_vod__c, q.id ORDER BY r.lastmodifieddate DESC) AS rnk
 FROM (((veeva.survey s JOIN veeva.survey_question q ON ((s.id = q.survey_vod__c))) JOIN ( SELECT a.createddate,
        a.lastmodifieddate,
        a.survey_target_vod__c,
        a.survey_question_vod__c,
        a.question_text_vod__c,
        response.response
 FROM (( SELECT sqr.id,
        sqr.createddate,
        sqr.lastmodifieddate,
        sqr.survey_target_vod__c,
        sqr.survey_question_vod__c,
        sqr.question_text_vod__c
 FROM ( SELECT survey_question_response.id,
        survey_question_response.isdeleted,
        survey_question_response.name,
        survey_question_response.recordtypeid,
        survey_question_response.createddate,
        survey_question_response.createdbyid,
        survey_question_response.lastmodifieddate,
        survey_question_response.lastmodifiedbyid,
        survey_question_response.systemmodstamp,
        survey_question_response.mayedit,
        survey_question_response.islocked,
        survey_question_response.survey_target_vod__c,
        survey_question_response.answer_choice_vod__c,
        survey_question_response.date_vod__c,
        survey_question_response.datetime_vod__c,
        survey_question_response.external_id_vod__c,
        survey_question_response.mobile_id_vod__c,
        survey_question_response.number_vod__c,
        survey_question_response.order_vod__c,
        survey_question_response.question_text_vod__c,
        survey_question_response.required_vod__c,
        survey_question_response.response_hash_vod__c,
        survey_question_response.response_vod__c,
        survey_question_response.score_vod__c,
        survey_question_response.survey_question_vod__c,
        survey_question_response.text_vod__c,
        survey_question_response.type_vod__c,
        survey_question_response.file_id,
        survey_question_response.record_id
 FROM veeva.survey_question_response
 WHERE (survey_question_response.question_text_vod__c !~~ '%Adasuve%Review%'::varchar(16))) sqr) a LEFT  JOIN ( SELECT "substring"(v.values, 1, 18) AS id,
        "substring"(v.values, 19, length(v.values)) AS response
 FROM ( SELECT public.MapItems(r.v1) OVER () AS ( keys, values )
 FROM ( SELECT public.MapDelimitedExtractor(((sqr.id || replace(sqr.response_vod__c, ';'::varchar(1), (';'::varchar(1) || sqr.id))))::long varchar(10468) USING PARAMETERS delimiter=';'::varchar(1)) AS v1
 FROM veeva.survey_question_response sqr
 WHERE (sqr.file_id = ( SELECT max(survey_question_response.file_id) AS max
 FROM veeva.survey_question_response))) r) v
 GROUP BY "substring"(v.values, 1, 18),
          "substring"(v.values, 19, length(v.values))) response ON ((a.id = response.id)))) r ON ((q.id = r.survey_question_vod__c))) JOIN veeva.survey_target t ON ((t.id = r.survey_target_vod__c)))
 WHERE ((s.file_id = ( SELECT max(s1.file_id) AS MAX
 FROM veeva.survey s1)) AND (q.file_id = ( SELECT max(q1.file_id) AS MAX
 FROM veeva.survey_question q1)) AND (t.file_id = ( SELECT max(t1.file_id) AS MAX
 FROM veeva.survey_target t1)) AND (s.name = 'e-Rx Survey'::varchar(11)) AND (q.order_vod__c = 1::numeric(18,0)))) B
 WHERE (B.rnk = 1)
 GROUP BY B.veeva_account_id,
          B.bu,
          B.survey_update_date,
          B.survey,
          B.question,
          B.answer,
          B.response_update_date,
          B.response_create_date) UNION  SELECT a.veeva_account_id,
        a.bu,
        a.survey_update_date,
        a.survey,
        a.question,
        a.answer,
        a.response_update_date,
        a.response_create_date
 FROM ( SELECT t.account_vod__c AS veeva_account_id,
        substr(s.territory_vod__c, 1, 2) AS bu,
        to_char(r.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS survey_update_date,
        s.name AS survey,
        '*Future Scheduled Adasuve Formulary Review Date'::varchar(47) AS question,
        r.response AS answer,
        to_char(r.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS response_update_date,
        to_char(r.createddate, 'YYYY-MM-DD'::varchar(10)) AS response_create_date,
        row_number() OVER (PARTITION BY s.id, q.id, t.account_vod__c, r.response ORDER BY r.lastmodifieddate DESC) AS rnk
 FROM (((veeva.survey s JOIN veeva.survey_question q ON ((s.id = q.survey_vod__c))) JOIN ( SELECT sqr_yr.survey_target_vod__c,
        sqr_yr.survey_question_vod__c,
        sqr_yr.question_text_vod__c,
        sqr_yr.lastmodifieddate,
        sqr_yr.createddate,
        ((((coalesce(sqr_yr.response_vod__c, ''::varchar) || '-'::varchar(1)) || CASE WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Jan'::varchar(3)) THEN '01'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Feb'::varchar(3)) THEN '02'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Mar'::varchar(3)) THEN '03'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Apr'::varchar(3)) THEN '04'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'May'::varchar(3)) THEN '05'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Jun'::varchar(3)) THEN '06'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Jul'::varchar(3)) THEN '07'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Aug'::varchar(3)) THEN '08'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Sep'::varchar(3)) THEN '09'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Oct'::varchar(3)) THEN '10'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Nov'::varchar(3)) THEN '11'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Dec'::varchar(3)) THEN '12'::varchar(2) ELSE ''::varchar END) || '-'::varchar(1)) || coalesce(sqr_day.response_vod__c, ''::varchar)) AS response
 FROM ((( SELECT sqr.survey_target_vod__c,
        sqr.survey_question_vod__c,
        sqr.question_text_vod__c,
        sqr.response_vod__c,
        sqr.lastmodifieddate,
        sqr.createddate,
        row_number() OVER (PARTITION BY sqr.survey_target_vod__c, sqr.survey_question_vod__c ORDER BY sqr.createddate DESC) AS rnk
 FROM ( SELECT survey_question_response.survey_target_vod__c,
        survey_question_response.survey_question_vod__c,
        survey_question_response.question_text_vod__c,
        survey_question_response.response_vod__c,
        survey_question_response.lastmodifieddate,
        survey_question_response.createddate,
        row_number() OVER (PARTITION BY survey_question_response.survey_target_vod__c, survey_question_response.survey_question_vod__c ORDER BY survey_question_response.lastmodifieddate DESC) AS rnk
 FROM veeva.survey_question_response
 WHERE (survey_question_response.question_text_vod__c ~~ '%Future Scheduled Adasuve % Review Year%'::varchar(40))) sqr
 WHERE (sqr.rnk = 1)) sqr_yr JOIN ( SELECT sqr.survey_target_vod__c,
        sqr.survey_question_vod__c,
        sqr.question_text_vod__c,
        sqr.response_vod__c,
        sqr.rnk
 FROM ( SELECT qr.survey_target_vod__c,
        qr.survey_question_vod__c,
        qr.question_text_vod__c,
        qr.response_vod__c,
        row_number() OVER (PARTITION BY st.account_vod__c, qr.survey_question_vod__c ORDER BY qr.lastmodifieddate DESC) AS rnk
 FROM (veeva.survey_question_response qr JOIN ( SELECT survey_target.id,
        survey_target.account_vod__c
 FROM veeva.survey_target
 GROUP BY survey_target.id,
          survey_target.account_vod__c) st ON ((qr.survey_target_vod__c = st.id)))
 WHERE (qr.question_text_vod__c ~~ '%Future Scheduled Adasuve % Review Month%'::varchar(41))) sqr
 WHERE (sqr.rnk = 1)) sqr_mth ON (((sqr_mth.survey_target_vod__c = sqr_yr.survey_target_vod__c) AND (sqr_yr.rnk = 1)))) JOIN ( SELECT sqr.survey_target_vod__c,
        sqr.survey_question_vod__c,
        sqr.question_text_vod__c,
        sqr.response_vod__c,
        sqr.rnk
 FROM ( SELECT survey_question_response.survey_target_vod__c,
        survey_question_response.survey_question_vod__c,
        survey_question_response.question_text_vod__c,
        survey_question_response.response_vod__c,
        row_number() OVER (PARTITION BY survey_question_response.survey_target_vod__c, survey_question_response.survey_question_vod__c ORDER BY survey_question_response.lastmodifieddate DESC) AS rnk
 FROM veeva.survey_question_response
 WHERE (survey_question_response.question_text_vod__c ~~ '%Future Scheduled Adasuve % Review Date%'::varchar(40))) sqr
 WHERE (sqr.rnk = 1)) sqr_day ON ((sqr_day.survey_target_vod__c = sqr_yr.survey_target_vod__c)))) r ON ((q.id = r.survey_question_vod__c))) JOIN veeva.survey_target t ON ((t.id = r.survey_target_vod__c)))
 WHERE ((s.file_id = ( SELECT max(survey.file_id) AS max
 FROM veeva.survey)) AND (q.file_id = ( SELECT max(survey_question.file_id) AS max
 FROM veeva.survey_question)) AND (t.file_id = ( SELECT max(survey_target.file_id) AS max
 FROM veeva.survey_target)) AND (s.name = 'REMS Enrollment and Formulary'::varchar(29)))) a
 WHERE (a.rnk = 1)) UNION  SELECT a.veeva_account_id,
        a.bu,
        a.survey_update_date,
        a.survey,
        a.question,
        a.answer,
        a.response_update_date,
        a.response_create_date
 FROM ( SELECT t.account_vod__c AS veeva_account_id,
        substr(s.territory_vod__c, 1, 2) AS bu,
        to_char(r.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS survey_update_date,
        s.name AS survey,
        '*Prior Adasuve Formulary Review Date'::varchar(36) AS question,
        r.response AS answer,
        to_char(r.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS response_update_date,
        to_char(r.createddate, 'YYYY-MM-DD'::varchar(10)) AS response_create_date,
        row_number() OVER (PARTITION BY s.id, q.id, t.account_vod__c, r.response ORDER BY r.lastmodifieddate DESC) AS rnk
 FROM (((veeva.survey s JOIN veeva.survey_question q ON ((s.id = q.survey_vod__c))) JOIN ( SELECT sqr_yr.survey_target_vod__c,
        sqr_yr.survey_question_vod__c,
        sqr_yr.question_text_vod__c,
        sqr_yr.lastmodifieddate,
        sqr_yr.createddate,
        ((coalesce(sqr_yr.response_vod__c, ''::varchar) || '-'::varchar(1)) || CASE WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Jan'::varchar(3)) THEN '01'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Feb'::varchar(3)) THEN '02'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Mar'::varchar(3)) THEN '03'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Apr'::varchar(3)) THEN '04'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'May'::varchar(3)) THEN '05'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Jun'::varchar(3)) THEN '06'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Jul'::varchar(3)) THEN '07'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Aug'::varchar(3)) THEN '08'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Sep'::varchar(3)) THEN '09'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Oct'::varchar(3)) THEN '10'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Nov'::varchar(3)) THEN '11'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Dec'::varchar(3)) THEN '12'::varchar(2) ELSE ''::varchar END) AS response
 FROM (( SELECT sqr.survey_target_vod__c,
        sqr.survey_question_vod__c,
        sqr.question_text_vod__c,
        sqr.response_vod__c,
        sqr.lastmodifieddate,
        sqr.createddate,
        row_number() OVER (PARTITION BY sqr.survey_target_vod__c, sqr.survey_question_vod__c ORDER BY sqr.createddate DESC) AS rnk
 FROM ( SELECT qr.survey_target_vod__c,
        qr.survey_question_vod__c,
        qr.question_text_vod__c,
        qr.response_vod__c,
        qr.lastmodifieddate,
        qr.createddate,
        row_number() OVER (PARTITION BY st.account_vod__c, qr.survey_question_vod__c ORDER BY qr.lastmodifieddate DESC) AS rnk
 FROM (veeva.survey_question_response qr JOIN ( SELECT survey_target.id,
        survey_target.account_vod__c
 FROM veeva.survey_target
 GROUP BY survey_target.id,
          survey_target.account_vod__c) st ON ((qr.survey_target_vod__c = st.id)))
 WHERE (qr.question_text_vod__c ~~ '%Prior Adasuve % Review Year'::varchar(28))) sqr
 WHERE (sqr.rnk = 1)) sqr_yr JOIN ( SELECT sqr.survey_target_vod__c,
        sqr.survey_question_vod__c,
        sqr.question_text_vod__c,
        sqr.response_vod__c,
        sqr.rnk
 FROM ( SELECT survey_question_response.survey_target_vod__c,
        survey_question_response.survey_question_vod__c,
        survey_question_response.question_text_vod__c,
        survey_question_response.response_vod__c,
        row_number() OVER (PARTITION BY survey_question_response.survey_target_vod__c, survey_question_response.survey_question_vod__c ORDER BY survey_question_response.lastmodifieddate DESC) AS rnk
 FROM veeva.survey_question_response
 WHERE (survey_question_response.question_text_vod__c ~~ '%Prior Adasuve % Review Month'::varchar(29))) sqr
 WHERE (sqr.rnk = 1)) sqr_mth ON (((sqr_mth.survey_target_vod__c = sqr_yr.survey_target_vod__c) AND (sqr_yr.rnk = 1))))) r ON ((q.id = r.survey_question_vod__c))) JOIN veeva.survey_target t ON ((t.id = r.survey_target_vod__c)))
 WHERE ((s.file_id = ( SELECT max(survey.file_id) AS max
 FROM veeva.survey)) AND (q.file_id = ( SELECT max(survey_question.file_id) AS max
 FROM veeva.survey_question)) AND (t.file_id = ( SELECT max(survey_target.file_id) AS max
 FROM veeva.survey_target)) AND (s.name = 'REMS Enrollment and Formulary'::varchar(29)))) a
 WHERE (a.rnk = 1);

CREATE  VIEW outbound.zzz_zs_agile_copay_voucher_drops AS
 SELECT d.tvcmid AS TVCMID,
        d.ims_id AS IMS_ID,
        d.veeva_account_id AS VEEVA_ACCOUNT_ID,
        d.item_type AS RESOURCE_TYPE,
        d.territory_number AS TERRITORY_NUM,
        d.distribution_date AS DISTRIBUTION_DATE,
        d.quantity AS QTY
 FROM datamart.sfa_promotional_items d
 WHERE ((d.product_name = 'NUVIGIL'::varchar(7)) AND (d.item_type = 'Voucher/Co-Pay'::varchar(14)) AND (d.ims_id IS NOT NULL) AND (d.distribution_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (d.distribution_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))));

CREATE  VIEW outbound.zzz_create_tb_cb_accountsummary AS
 SELECT cd.account_id AS ACCOUNT_ID,
        cd.location_id AS LOCATION_ID,
        cd.dea_number AS DEA_NUMBER,
        cd.end_customer AS END_CUSTOMER,
        cd.address_1 AS ADDRESS_1,
        cd.address_2 AS ADDRESS_2,
        cd.city AS CITY,
        cd.state AS STATE,
        cd.zip AS ZIP,
        cd.contract_title AS CONTRACT_TITLE,
        cd.contract_id AS CONTRACT_ID,
        cd.wholesaler_name AS WHOLESALER_NAME,
        cd.hin AS HIN,
        NULL AS CONTRACT_ALIAS,
        cd.wholesaler_dea AS WHOLESALER_DEA,
        cd.cot_source AS COT_SOURCE,
        cd.class_of_trade AS CLASS_OF_TRADE
 FROM datamart.chargeback_demographics cd;

CREATE  VIEW outbound.zzz_asi_rx_by_market AS
(SELECT rx.market_name, rx.ims_client_number AS ims_client_num, rx.ims_report_number_cnt AS ims_report_num, NULL AS zip_other, rx.ims_id, d.primary_specialty AS specialty, rx.payer_plan_number AS plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, NULL AS rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num, NULL AS filler_01, NULL AS me_num, d.last_name, d.first_name, d.middle_name, d.address_line1 AS address, d.city, d.state, d.zip, d.address_line2 AS supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, 48 AS bucket_count, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (datamart.prescriber_rx rx JOIN customer_master.hcp_demo d ON ((rx.tvcmid = d.tvcmid))) WHERE ((rx.market_name = ANY (ARRAY['MULTIPLE SCLEROSIS'::varchar(18), 'PAIN'::varchar(4), 'ANTI-PARKINSON'::varchar(14), 'SMR'::varchar(3), 'WAKE'::varchar(4)])) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'MONTH'::varchar(5)) AND (d.file_id = (SELECT max(hcp_demo.file_id) AS file_id FROM customer_master.hcp_demo))) GROUP BY rx.market_name, rx.ims_client_number, rx.ims_report_number_cnt, rx.ims_id, d.primary_specialty, rx.payer_plan_number, btrim(to_char(rx.sales_category, '00'::varchar(2))), btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))), d.last_name, d.first_name, d.middle_name, d.address_line1, d.city, d.state, d.zip, d.address_line2, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END, rx.data_date UNION SELECT mkt.market_name, '111'::varchar(3) AS ims_client_num, '55'::varchar(2) AS ims_report_num, NULL AS zip_other, sp.ims_id, d.primary_specialty AS specialty, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END AS plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pr.ims_product_group_num, NULL AS filler_01, NULL AS me_num, d.last_name, d.first_name, d.middle_name, d.address_line1 AS address, d.city, d.state, d.zip, d.address_line2 AS supplemental_data, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3 MAIL ORDER DATA UNSPEC'::varchar(25) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3 TYSABRI MAIL ORDER DATA UNSPEC'::varchar(33) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME MAIL ORDER DATA UNSPEC'::varchar(28) ELSE NULL END AS plan_name, sp.ship_date, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 0) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((((datamart.specialty_pharmacy_shipment sp JOIN integration.ims_week_buckets mth ON ((last_day(sp.ship_date) = mth.month_ending))) JOIN customer_master.hcp_demo d ON ((sp.tvcmid = d.tvcmid))) JOIN (SELECT bi.entity_id, pb.name AS market_name FROM (product.basket_item bi JOIN product.basket pb ON ((bi.basket_id = pb.basket_id))) WHERE ((pb.basket_type = 'market'::varchar(6)) AND (pb.name = 'MS MARKET'::varchar(9)))) mkt ON ((sp.basket_id = mkt.entity_id))) LEFT JOIN (SELECT sp.entity_id AS basket_id, sp.source_product_code AS ims_product_group_num, sp.source_product_name FROM (metadata.data_feed_metadata dfeed JOIN product.source_product sp ON ((dfeed.feed_id = sp.feed_id))) WHERE ((dfeed.short_name = 'ims_mhj_cnt_m'::varchar(13)) AND (sp.source_client_num = '632'::varchar(3)) AND (sp.source_report_num = '2'::varchar(1)))) pr ON ((sp.basket_id = pr.basket_id))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['Prime Therapeutics'::varchar(18), 'OptumRx'::varchar(7)])) AND (sp.ims_id IS NOT NULL) AND (d.file_id = (SELECT max(hcp_demo.file_id) AS file_id FROM customer_master.hcp_demo))) GROUP BY mkt.market_name, sp.ims_id, d.primary_specialty, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END, pr.ims_product_group_num, d.last_name, d.first_name, d.middle_name, d.address_line1, d.city, d.state, d.zip, d.address_line2, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3 MAIL ORDER DATA UNSPEC'::varchar(25) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3 TYSABRI MAIL ORDER DATA UNSPEC'::varchar(33) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME MAIL ORDER DATA UNSPEC'::varchar(28) ELSE NULL END, sp.ship_date) UNION SELECT mkt.name AS market_name, cm.zip, '111'::varchar(3) AS ims_client_num, '55'::varchar(2) AS ims_report_num, NULL AS zip_other, NULL AS ims_id, NULL AS specialty, 'CMOP000000'::varchar(10) AS payer_plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pr.ims_product_group_num, NULL AS filler_01, NULL AS me_num, NULL AS last_name, NULL AS first_name, NULL AS address, NULL AS city, NULL AS state, NULL AS zip, NULL AS supplemental_data, 'VA DATA UNSPEC'::varchar(14) AS plan_name, mth.month_ending AS data_month, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 0) THEN cm.total_rxs ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 1) THEN cm.total_rxs ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 2) THEN cm.total_rxs ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 3) THEN cm.total_rxs ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 4) THEN cm.total_rxs ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 5) THEN cm.total_rxs ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 6) THEN cm.total_rxs ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 7) THEN cm.total_rxs ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 8) THEN cm.total_rxs ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 9) THEN cm.total_rxs ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 10) THEN cm.total_rxs ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 11) THEN cm.total_rxs ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 12) THEN cm.total_rxs ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 13) THEN cm.total_rxs ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 14) THEN cm.total_rxs ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 15) THEN cm.total_rxs ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 16) THEN cm.total_rxs ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 17) THEN cm.total_rxs ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 18) THEN cm.total_rxs ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 19) THEN cm.total_rxs ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 20) THEN cm.total_rxs ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 21) THEN cm.total_rxs ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 22) THEN cm.total_rxs ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 23) THEN cm.total_rxs ELSE NULL::float END) AS trx_024 FROM (((datamart.cmop_rx cm JOIN integration.ims_week_buckets mth ON ((last_day(cm.comp_month) = mth.month_ending))) JOIN (SELECT bi.entity_id, pb.name FROM (product.basket_item bi JOIN product.basket pb ON ((bi.basket_id = pb.basket_id))) WHERE ((pb.basket_type = 'market'::varchar(6)) AND (pb.name = ANY (ARRAY['MS MARKET'::varchar(9), 'PD MARKET'::varchar(9)])))) mkt ON ((cm.basket_id = mkt.entity_id))) LEFT JOIN (SELECT sp.entity_id AS basket_id, sp.source_product_code AS ims_product_group_num, sp.source_product_name FROM (metadata.data_feed_metadata dfeed JOIN product.source_product sp ON ((dfeed.feed_id = sp.feed_id))) WHERE ((dfeed.short_name = 'ims_mhj_cnt_m'::varchar(13)) AND (sp.source_client_num = '632'::varchar(3)) AND (sp.source_report_num = '2'::varchar(1)))) pr ON ((cm.basket_id = pr.basket_id))) GROUP BY mkt.name, cm.zip, pr.ims_product_group_num, mth.month_ending;

CREATE  VIEW outbound.zzz_asi_rx_by_market_pain AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '74'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.zzz_asi_rx_by_market_wake AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '71'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.zzz_asi_rx_by_market_oc AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '757'::varchar(3)) AND (rx.ims_report_number_cnt = '23'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.zzz_zs_agile_copay_redemptions AS
 SELECT CASE mod(cd.physician_tvcmid, 1::float) WHEN NULLSEQUAL 0::float THEN cd.physician_tvcmid ELSE cd.physician_tvcmid END AS TVCMID,
        cd.physician_ims_id AS IMS_ID,
        cd.physician_veeva_id AS VEEVA_ACCOUNT_ID,
        p.program_number AS ASI_PROGRAM_NUM,
        p.program_description AS PROGRAM_DESC,
        cd.copay_card_number AS COPAY_CARD_NUM,
        coalesce(cd.physician_zip, cd.pharmacy_zip) AS ZIP_CODE,
        to_char(cd.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        cd.basket_name AS BRAND_NAME,
        replace(cd.basket_name, 'NUVIGIL '::varchar(8), ''::varchar) AS DRUG_DESC,
        (cd.quantity)::int AS QTY
 FROM (datamart.copay cd LEFT  JOIN reference.copay_voucher_program p ON (((cd.program_number = p.program_number) AND (cd.redemption_type = p.redemption_type))))
 WHERE ((cd.basket_name ~~ '%NUVIGIL%'::varchar(9)) AND (cd.fill_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (cd.fill_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (cd.report_frequency = 'WEEK'::varchar(4)) AND (cd.redemption_type = 'COPAY'::varchar(5)))
 GROUP BY CASE mod(cd.physician_tvcmid, 1::float) WHEN NULLSEQUAL 0::float THEN cd.physician_tvcmid ELSE cd.physician_tvcmid END,
          cd.physician_ims_id,
          cd.physician_veeva_id,
          p.program_number,
          p.program_description,
          cd.copay_card_number,
          coalesce(cd.physician_zip, cd.pharmacy_zip),
          to_char(cd.fill_date, 'YYYY-MM-DD'::varchar(10)),
          cd.basket_name,
          replace(cd.basket_name, 'NUVIGIL '::varchar(8), ''::varchar),
          (cd.quantity)::int;

CREATE  VIEW outbound.zzz_zs_agile_details AS
 SELECT c.tvcmid AS TVCMID,
        c.ims_id AS IMS_ID,
        c.veeva_account_id AS VEEVA_ACCOUNT_ID,
        initcap(d.last_name) AS LAST_NAME,
        initcap(d.first_name) AS FIRST_NAME,
        initcap(d.middle_name) AS MIDDLE_NAME,
        d.credentials AS DEGREE,
        d.zip AS ZIP,
        c.rep_id AS REP_ID,
        c.territory_number AS TERRITORY_NUMBER,
        to_char(c.call_date, 'YYYY-MM-DD'::varchar(10)) AS CALL_DATE,
        cd.product AS PRODUCT,
        cd.detail_position AS DETAIL_POSITION
 FROM datamart.sfa_call c, datamart.sfa_call_detail cd, datamart.sfa_demographics d, datamart.current_alignment z
 WHERE ((c.call_id = cd.call_id) AND (c.sales_force_id = 'TC'::varchar(2)) AND (c.sales_force_id = d.sales_force_id) AND (c.territory_number = d.territory_number) AND (c.call_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (c.call_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (c.veeva_account_id = d.veeva_account_id) AND (d.zip = z.zip_code) AND (cd.product = 'NUVIGIL'::varchar(7)))
 GROUP BY c.tvcmid,
          c.ims_id,
          c.veeva_account_id,
          initcap(d.last_name),
          initcap(d.first_name),
          initcap(d.middle_name),
          d.credentials,
          d.zip,
          c.rep_id,
          c.territory_number,
          c.call_date,
          cd.product,
          cd.detail_position;

CREATE  VIEW outbound.zzz_v_asi_plan_name AS
 SELECT plantrak_workbook.payer_plan_number AS payer_plan_num,
        plantrak_workbook.plan_name,
        CASE WHEN (plantrak_workbook.payer_number = '000002'::varchar(6)) THEN plantrak_workbook.plan_name ELSE plantrak_workbook.payer_name END AS payer_name,
        plantrak_workbook.model
 FROM datamart.plantrak_workbook
 ORDER BY plantrak_workbook.payer_plan_number;

CREATE  VIEW outbound.zzz_ddd_category AS
 SELECT ddd_category.category_code AS CATEGORY_CODE,
        ddd_category.category_description AS CATEGORY_DESC,
        ddd_category.category_definition AS CATEGORY_DEFN
 FROM reference.ddd_category
 ORDER BY ddd_category.category_code;

CREATE  VIEW outbound.mcm_hcp_alignment AS
 SELECT cmid.id_num AS federation_id,
        t.territory_name,
        cp.territory_number,
        t.region_name,
        cp.region_number,
        t.area_name,
        cp.area_number,
        (now())::date AS created_date
 FROM ((datamart.call_plan cp JOIN datamart.tvcmid_xref cmid ON (((cp.tvcmid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN ( SELECT current_alignment.territory_number,
        current_alignment.territory_name,
        current_alignment.region_name,
        current_alignment.area_name
 FROM datamart.current_alignment
 GROUP BY current_alignment.territory_number,
          current_alignment.territory_name,
          current_alignment.region_name,
          current_alignment.area_name) t ON ((cp.territory_number = t.territory_number)))
 GROUP BY cmid.id_num,
          t.territory_name,
          cp.territory_number,
          t.region_name,
          cp.region_number,
          t.area_name,
          cp.area_number,
          (now())::date;

CREATE  VIEW outbound.mcm_product_segmentation AS
 SELECT cmid.id_num AS federation_id,
        rx.basket_id AS product_id,
        dec1.decile_name AS decile_name_1,
        dec1.decile_trx_count_6_mo AS "6_month_decile_1",
        dec1.decile_trx_count_12_mo AS "12_month_decile_1",
        dec2.decile_name AS decile_name_2,
        dec2.decile_trx_count_6_mo AS "6_month_decile_2",
        dec2.decile_trx_count_12_mo AS "12_month_decile_2",
        dec3.decile_name AS decile_name_3,
        dec3.decile_trx_count_6_mo AS "6_month_decile_3",
        dec3.decile_trx_count_12_mo AS "12_month_decile_3",
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, 0)) AND (rx.date <= rx.data_date)) THEN rx.trx_count ELSE NULL::float END) AS trx_cnt_01_01,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-2))) AND (rx.date <= rx.data_date)) THEN rx.trx_count ELSE NULL::float END) AS trx_cnt_01_03,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-5))) AND (rx.date <= rx.data_date)) THEN rx.trx_count ELSE NULL::float END) AS trx_cnt_01_06,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-11))) AND (rx.date <= rx.data_date)) THEN rx.trx_count ELSE NULL::float END) AS trx_cnt_01_12,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-23))) AND (rx.date <= rx.data_date)) THEN rx.trx_count ELSE NULL::float END) AS trx_cnt_01_24,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, 0)) AND (rx.date <= rx.data_date)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_cnt_01_01,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-2))) AND (rx.date <= rx.data_date)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_cnt_01_03,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-5))) AND (rx.date <= rx.data_date)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_cnt_01_06,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-11))) AND (rx.date <= rx.data_date)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_cnt_01_12,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-23))) AND (rx.date <= rx.data_date)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_cnt_01_24,
        NULL AS call_plan_target,
        NULL AS call_plan_effective_date,
        NULL AS call_plan_end_date,
        ds.segment_name,
        ds.segment_value,
        NULL AS target_type_indicator,
        (now())::date AS create_date
 FROM ((((((datamart.prescriber_rx rx LEFT  JOIN reference.decile_extract_control dectrl ON ((rx.basket_id = dectrl.basket_id))) JOIN datamart.tvcmid_xref cmid ON (((rx.tvcmid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN datamart.rx_deciles dec1 ON (((rx.ims_id = dec1.ims_id) AND (rx.basket_id = dec1.basket_id) AND (dectrl.decile_name_1 = dec1.decile_name)))) LEFT  JOIN datamart.rx_deciles dec2 ON (((rx.ims_id = dec2.ims_id) AND (rx.basket_id = dec2.basket_id) AND (dectrl.decile_name_2 = dec2.decile_name)))) LEFT  JOIN datamart.rx_deciles dec3 ON (((rx.ims_id = dec3.ims_id) AND (rx.basket_id = dec3.basket_id) AND (dectrl.decile_name_3 = dec3.decile_name)))) LEFT  JOIN datamart.dynamic_segment ds ON (((cmid.id_num = ds.federation_id) AND (rx.basket_id = ds.basket_id))))
 WHERE (rx.basket_type = 'brand'::varchar(5))
 GROUP BY cmid.id_num,
          rx.basket_id,
          dec1.decile_name,
          dec1.decile_trx_count_6_mo,
          dec1.decile_trx_count_12_mo,
          dec2.decile_name,
          dec2.decile_trx_count_6_mo,
          dec2.decile_trx_count_12_mo,
          dec3.decile_name,
          dec3.decile_trx_count_6_mo,
          dec3.decile_trx_count_12_mo,
          ds.segment_name,
          ds.segment_value,
          (now())::date;

CREATE  VIEW outbound.zzz_tw_specialty_account AS
SELECT tw_account.specialty_pharmacy_data_source AS data_source, tw_account.customer_id AS customer_code, tw_account.customer_name, tw_account.parent_customer_id AS parent_customer_code, tw_account.parent_customer_name, tw_account.customer_type AS customer_type_code, tw_account.pvp_340B_id AS pvp_340b_id, NULL AS start_date, NULL AS end_date, 'Y'::varchar(1) AS active_ind, NULL AS dea_num, NULL AS hin FROM datamart.tw_account;

CREATE  VIEW outbound.zzz_tw_specialty_address AS
SELECT tw_address.specialty_pharmacy_data_source AS data_source, tw_address.address_id, tw_address.address, tw_address.city, tw_address.state, tw_address.zip_code, tw_address.phone, tw_address.fax, tw_address.email, tw_address.tax_id FROM datamart.tw_address;

CREATE  VIEW outbound.zzz_tw_specialty_addr_xref AS
SELECT tw_address_xref.specialty_pharmacy_data_source AS data_source, tw_address_xref.customer_code, tw_address_xref.address_id, tw_address_xref.address_type, NULL AS start_date, NULL AS end_date, 'Y'::varchar(1) AS active_ind FROM datamart.tw_address_xref;

CREATE  VIEW outbound.zzz_ahm_postalcodeterritory AS
 SELECT 'US'::varchar(2) AS "COUNTRY CODE",
        current_alignment.zip_code AS "POSTAL CODE",
        current_alignment.territory_number AS TERRITORY
 FROM datamart.current_alignment
 WHERE (current_alignment.territory_number !~~ '%ZZZZ%'::varchar(6))
 GROUP BY 'US'::varchar(2),
          current_alignment.zip_code,
          current_alignment.territory_number
 ORDER BY current_alignment.territory_number,
          current_alignment.zip_code,
          'US'::varchar(2);

CREATE  VIEW outbound.zzz_activity_voucher_coupon_redemption AS
 SELECT cmid.id_num AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(cw.rx_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        coalesce(cw.asi_txn_id, concat((cw.file_id)::varchar, (cw.record_id)::varchar)) AS trackback_id,
        NULL AS previous_activity,
        coalesce((sp.entity_id)::varchar(20), cw.ndc_code) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((('Voucher/Coupon Redemption,'::varchar(26) || coalesce(b.name, ''::varchar)) || ','::varchar(1)) || coalesce(cw.program_name, ''::varchar)) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((integration.copay_weekly cw JOIN datamart.tvcmid_xref cmid ON (((cw.tvcmid_physician = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dm ON ((cw.file_id = dm.file_id))) LEFT  JOIN product.source_product sp ON (((cw.ndc_code = sp.source_product_code) AND (dm.feed_id = sp.feed_id) AND (dm.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE ((cw.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_ASI_COPAY_DETAIL_WKLY'::varchar(25)))), 0)) AND (cw.rx_date >= add_months((now())::date, (-6)))) EXCEPT  SELECT cmid.id_num AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(cw.rx_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        coalesce(cw.asi_txn_id, concat((cw.file_id)::varchar, (cw.record_id)::varchar)) AS trackback_id,
        NULL AS previous_activity,
        coalesce((sp.entity_id)::varchar(20), cw.ndc_code) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((('Voucher/Coupon Redemption,'::varchar(26) || coalesce(b.name, ''::varchar)) || ','::varchar(1)) || coalesce(cw.program_name, ''::varchar)) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((integration.copay_weekly cw JOIN datamart.tvcmid_xref cmid ON (((cw.tvcmid_physician = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dm ON ((cw.file_id = dm.file_id))) LEFT  JOIN product.source_product sp ON (((cw.ndc_code = sp.source_product_code) AND (dm.feed_id = sp.feed_id) AND (dm.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE ((cw.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_ASI_COPAY_DETAIL_WKLY'::varchar(25)))), 0)) AND (cw.rx_date >= add_months((now())::date, (-6))));

CREATE  VIEW outbound.zzz_axiom_product_totals_w AS
 SELECT prescriber_rx.market_name,
        b.teva_product_code AS product_code,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt24,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt24
 FROM ((datamart.prescriber_rx prescriber_rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON ((prescriber_rx.rollup_month = mth.month_ending))) LEFT  JOIN product.basket b ON ((prescriber_rx.basket_id = b.basket_id)))
 WHERE ((prescriber_rx.nrx_count IS NOT NULL) AND (mth.month_bucket <= 24) AND (mth.month_bucket >= 1) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))
 GROUP BY prescriber_rx.market_name,
          b.teva_product_code
 ORDER BY prescriber_rx.market_name,
          b.teva_product_code;

CREATE  VIEW outbound.zzz_ahm_sales_roster AS
 SELECT r.employee_id AS "EMPLOYEE ID",
        r.username AS USERNAME,
        CASE r.last_name WHEN NULLSEQUAL 'Vacant'::varchar(6) THEN NULL ELSE r.last_name END AS "LAST NAME",
        CASE r.first_name WHEN NULLSEQUAL 'Vacant'::varchar(6) THEN NULL ELSE r.first_name END AS "FIRST NAME",
        btrim(r.middle_name) AS "MIDDLE NAME",
        r.salutation AS SALUTATION,
        btrim(r.suffix) AS SUFFIX,
        r.title AS TITLE,
        r.territory_number AS TERRITORY,
        r.territory_name AS "TERRITORY NAME",
        CASE WHEN (substr(r.parent_territory_number, 3, 4) = 'ZZZZ'::varchar(4)) THEN NULL WHEN (r.parent_territory_number = 'TOFRMZ00'::varchar(8)) THEN NULL WHEN (r.parent_territory_number = 'TOSCGZ00'::varchar(8)) THEN NULL ELSE r.parent_territory_number END AS "MANAGER TERRITORY",
        r.team AS TEAM,
        r.business_address_line1 AS "BUSINESS LINE 1 ADDR",
        btrim(r.business_address_line2) AS "BUSINESS LINE 2 ADDR",
        NULL AS "BUSINESS LINE 3 ADDR",
        r.business_city AS "BUSINESS CITY",
        r.business_state AS "BUSINESS STATE",
        r.business_zip AS "BUSINESS POSTAL CODE",
        'US'::varchar(2) AS "BUSINESS COUNTRY CODE",
        r.address_line1 AS "HOME LINE 1 ADDR",
        btrim(r.address_line2) AS "HOME LINE 2 ADDR",
        NULL AS "HOME LINE 3 ADDR",
        r.city AS "HOME CITY",
        r.state AS "HOME STATE",
        r.zip AS "HOME POSTAL CODE",
        'US'::varchar(2) AS "HOME COUNTRY CODE",
        'Business'::varchar(8) AS "CORRESPONDENCE ADDRESS",
        r.business_phone AS "BUSINESS PHONE",
        NULL AS "BUSINESS PHONE EXTENSION",
        r.fax AS "BUSINESS FAX",
        r.voice_mail_extension AS "VOICE MAIL",
        r.mobile_phone AS "MOBILE PHONE",
        r.home_phone AS "HOME PHONE",
        NULL AS "HOME FAX",
        'Business'::varchar(8) AS "CORRESPONDENCE PHONE",
        r.email AS "BUSINESS EMAIL",
        NULL AS "HOME EMAIL",
        'Business'::varchar(8) AS "CORRESPONDENCE EMAIL",
        r.cost_center AS "COST CENTER"
 FROM datamart.roster r
 WHERE ((r.territory_number !~~ '%ZZZZ%'::varchar(6)) AND (((r.team <> 'Teva Clin Nurse Educ'::varchar(20)) AND (r.team <> 'Field Medical Affairs'::varchar(21)) AND (r.team <> 'Clinical Nurse Educator'::varchar(23)) AND (r.team <> 'Market Access'::varchar(13)) AND (r.team <> 'Specialty Pharm Strat'::varchar(21)) AND (r.team <> 'THS Sales'::varchar(9))) OR (r.team IS NULL)))
 GROUP BY r.employee_id,
          r.username,
          CASE r.last_name WHEN NULLSEQUAL 'Vacant'::varchar(6) THEN NULL ELSE r.last_name END,
          CASE r.first_name WHEN NULLSEQUAL 'Vacant'::varchar(6) THEN NULL ELSE r.first_name END,
          btrim(r.middle_name),
          r.salutation,
          btrim(r.suffix),
          r.title,
          r.territory_number,
          r.territory_name,
          CASE WHEN (substr(r.parent_territory_number, 3, 4) = 'ZZZZ'::varchar(4)) THEN NULL WHEN (r.parent_territory_number = 'TOFRMZ00'::varchar(8)) THEN NULL WHEN (r.parent_territory_number = 'TOSCGZ00'::varchar(8)) THEN NULL ELSE r.parent_territory_number END,
          r.team,
          r.business_address_line1,
          btrim(r.business_address_line2),
          NULL,
          r.business_city,
          r.business_state,
          r.business_zip,
          'US'::varchar(2),
          r.address_line1,
          btrim(r.address_line2),
          r.city,
          r.state,
          r.zip,
          'Business'::varchar(8),
          r.business_phone,
          r.fax,
          r.voice_mail_extension,
          r.mobile_phone,
          r.home_phone,
          r.email,
          r.cost_center;

CREATE  VIEW outbound.zzz_touchpoint_call AS
 SELECT tpc.call_id AS ID,
        tpc.call_attempt_id AS AttemptID,
        tpc.touchpoint_id AS TouchpointID,
        tpc.veeva_id AS ClientID,
        tpc.ims_id AS IMSID,
        tpc.first_name AS FirstName,
        tpc.last_name AS LastName,
        tpc.call_type AS Type,
        to_char(tpc.call_date, 'YYYYMMDD'::varchar(8)) AS Date,
        tpc.status_code AS StatusCode,
        tpc.status_description AS StatusDescription,
        tpc.rep_id AS RepID,
        tpc.rep_first_name AS RepFirstName,
        tpc.rep_last_name AS RepLastName
 FROM datamart.touchpoint_call tpc;

CREATE  VIEW outbound.zzz_touchpoint_presentation AS
 SELECT tpp.call_id AS CallID,
        tpp.call_attempt_id AS CallAttemptID,
        tpp.presentation_id AS ID,
        tpp.product AS Product,
        tpp."position" AS "Position",
        tpp.item_type AS ItemType,
        tpp.item_description AS ItemDescription,
        tpp.quantity AS Quantity
 FROM datamart.touchpoint_presentation tpp;

CREATE  VIEW outbound.zzz_dmd_product AS
 SELECT sp.source_product_code,
        'GCSF'::varchar(4) AS market_name,
        prod.brand_name,
        prod.product_name
 FROM (product.source_product sp LEFT  JOIN ( SELECT bm.basket_id AS market_basket_id,
        bm.name AS market_name,
        bb.basket_id AS brand_basket_id,
        bb.name AS brand_name,
        bp.basket_id AS product_basket_id,
        bp.name AS product_name
 FROM ((((product.basket_item bimb JOIN product.basket bm ON (((bimb.basket_id = bm.basket_id) AND (bm.name = 'ONCOLOGY MARKET'::varchar(15)) AND (bm.basket_type = 'market'::varchar(6))))) JOIN product.basket bb ON (((bimb.entity_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5))))) JOIN product.basket_item bibp ON ((bibp.basket_id = bb.basket_id))) JOIN product.basket bp ON (((bibp.entity_id = bp.basket_id) AND (bp.basket_type = 'product'::varchar(7)))))) prod ON (((sp.entity_id = prod.product_basket_id) AND (sp.source_id = 1))))
 WHERE ((prod.brand_name = ANY (ARRAY['NEUPOGEN'::varchar(8), 'GRANIX'::varchar(6), 'LEUKINE'::varchar(7)])) AND (prod.market_name = 'ONCOLOGY MARKET'::varchar(15)) AND (sp.feed_id = 318))
 GROUP BY sp.source_product_code,
          'GCSF'::varchar(4),
          prod.brand_name,
          prod.product_name;

CREATE  VIEW outbound.zzz_zs_ic_medicaid_plan_groups AS
(( SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.model,
        rx.payer_name AS plan_group,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['QNASL 80'::varchar(9), 'QNASL 40'::varchar(9), 'NASONEX'::varchar(9), 'NASACORT'::varchar(9), 'OMNARIS'::varchar(9), 'RHINOCORT'::varchar(9), 'VERAMYST'::varchar(9), 'ZETONNA'::varchar(9)])) AND ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) OR (rx.payer_plan_number = ANY (ARRAY['7001720001'::varchar(10), '0013670087'::varchar(10)]))) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          v.veeva_account_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name UNION ALL  SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.model,
        rx.payer_name AS plan_group,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['AEROBID'::varchar(20), 'AEROSPAN'::varchar(20), 'ALVESCO'::varchar(20), 'ARNUITY ELLIPTA'::varchar(20), 'ASMANEX HFA MDI'::varchar(20), 'ASMANEX TWISTHALER'::varchar(20), 'AZMACORT'::varchar(20), 'FLOVENT DISK 100'::varchar(20), 'FLOVENT DISK 250'::varchar(20), 'FLOVENT DISK 50'::varchar(20), 'FLOVENT MDI 110'::varchar(20), 'FLOVENT MDI 220'::varchar(20), 'FLOVENT MDI 44'::varchar(20), 'FLOVENT MDI HOSP 110'::varchar(20), 'FLOVENT MDI HOSP 220'::varchar(20), 'FLOVENT MDI HOSP 44'::varchar(20), 'PULMICORT'::varchar(20), 'QVAR 40MCG'::varchar(20), 'QVAR 80MCG'::varchar(20)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          v.veeva_account_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name) UNION ALL  SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.model,
        rx.payer_name AS plan_group,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['ALL OTHER'::varchar(16), 'FLONASE'::varchar(16), 'FLUTICASONE PROP'::varchar(16), 'NASACORT/AQ/HFA'::varchar(16), 'NASONEX'::varchar(16), 'OMNARIS'::varchar(16), 'RHINOCORT/AQUA'::varchar(16), 'VERAMYST'::varchar(16)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          v.veeva_account_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name) UNION ALL  SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.model,
        rx.payer_name AS plan_group,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['ALBUTEROL'::varchar(20), 'ALL OTHERS'::varchar(20), 'MAXAIR AUTOHALER MDI'::varchar(20), 'PROAIR HFA'::varchar(20), 'PROAIR HFA COUNTER'::varchar(20), 'PROVENTIL HFA'::varchar(20), 'RELION VENTOLIN HFA'::varchar(20), 'VENTOLIN HFA'::varchar(20), 'XOPENEX HFA'::varchar(20)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          v.veeva_account_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name;

CREATE  VIEW outbound.zzz_zs_ic_mop AS
(( SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payment_method,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['QNASL 80'::varchar(9), 'QNASL 40'::varchar(9), 'NASONEX'::varchar(9), 'NASACORT'::varchar(9), 'OMNARIS'::varchar(9), 'RHINOCORT'::varchar(9), 'VERAMYST'::varchar(9), 'ZETONNA'::varchar(9)])) AND ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) OR (rx.payer_plan_number = ANY (ARRAY['7001720001'::varchar(10), '0013670087'::varchar(10)]))) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          coalesce(v.veeva_account_id, rx.ims_id),
          rx.payment_method,
          rx.basket_name UNION ALL  SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payment_method,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['AEROBID'::varchar(20), 'AEROSPAN'::varchar(20), 'ALVESCO'::varchar(20), 'ARNUITY ELLIPTA'::varchar(20), 'ASMANEX HFA MDI'::varchar(20), 'ASMANEX TWISTHALER'::varchar(20), 'AZMACORT'::varchar(20), 'FLOVENT DISK 100'::varchar(20), 'FLOVENT DISK 250'::varchar(20), 'FLOVENT DISK 50'::varchar(20), 'FLOVENT MDI 110'::varchar(20), 'FLOVENT MDI 220'::varchar(20), 'FLOVENT MDI 44'::varchar(20), 'FLOVENT MDI HOSP 110'::varchar(20), 'FLOVENT MDI HOSP 220'::varchar(20), 'FLOVENT MDI HOSP 44'::varchar(20), 'PULMICORT'::varchar(20), 'QVAR 40MCG'::varchar(20), 'QVAR 80MCG'::varchar(20)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          coalesce(v.veeva_account_id, rx.ims_id),
          rx.payment_method,
          rx.basket_name) UNION ALL  SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payment_method,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['ALL OTHER'::varchar(16), 'FLONASE'::varchar(16), 'FLUTICASONE PROP'::varchar(16), 'NASACORT/AQ/HFA'::varchar(16), 'NASONEX'::varchar(16), 'OMNARIS'::varchar(16), 'RHINOCORT/AQUA'::varchar(16), 'VERAMYST'::varchar(16)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          coalesce(v.veeva_account_id, rx.ims_id),
          rx.payment_method,
          rx.basket_name) UNION ALL  SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payment_method,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['ALBUTEROL'::varchar(20), 'ALL OTHERS'::varchar(20), 'MAXAIR AUTOHALER MDI'::varchar(20), 'PROAIR HFA'::varchar(20), 'PROAIR HFA COUNTER'::varchar(20), 'PROVENTIL HFA'::varchar(20), 'RELION VENTOLIN HFA'::varchar(20), 'VENTOLIN HFA'::varchar(20), 'XOPENEX HFA'::varchar(20)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          coalesce(v.veeva_account_id, rx.ims_id),
          rx.payment_method,
          rx.basket_name;

CREATE  VIEW outbound.month_rollup_and_bucket AS
 SELECT prescriber_rx.rollup_month AS month_ending,
        rank() OVER (ORDER BY prescriber_rx.rollup_month DESC) AS month_bucket
 FROM datamart.prescriber_rx
 WHERE (prescriber_rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY prescriber_rx.rollup_month;

CREATE  VIEW outbound.zzz_zs_agile_demographics AS
SELECT d.tvcmid AS TVCMID, d.ims_id AS IMS_ID, d.veeva_account_id AS VEEVA_ACCOUNT_ID, d.first_name AS FIRST_NAME, d.middle_name AS MID_NAME, d.last_name AS LAST_NAME, d.degree AS DEGREE, ((((d.ptr_address_1 || ' '::varchar(1)) || d.ptr_address_2) || ' '::varchar(1)) || d.ptr_address_3) AS ADDRESS, d.ptr_city AS CITY, d.ptr_state AS STATE, d.ptr_zip AS ZIP, d.specialty AS PRIM_SPECIALTY, s1.nuvigil_report_group AS NUVIGIL_REPORT_GROUP, dec1.decile_trx_count_6_mo AS NUVIGIL_DECILE, dec2.decile_trx_count_6_mo AS WAKE_DECILE, s1.amrix_target_flag AS TARGET_FLAG FROM ((((datamart.prescriber_combined_demographics d LEFT JOIN reference.specialty_xref s1 ON ((s1.specialty_code = d.specialty))) LEFT JOIN datamart.rx_deciles dec1 ON (((dec1.ims_id = d.ims_id) AND (upper(dec1.decile_name) = 'NUVIGIL'::varchar(7))))) LEFT JOIN datamart.rx_deciles dec2 ON (((dec2.ims_id = d.ims_id) AND (upper(dec2.decile_name) = 'MODAFINIL'::varchar(9))))) JOIN (SELECT prescriber_rx.ims_id FROM datamart.prescriber_rx prescriber_rx WHERE ((prescriber_rx.basket_id = 36) AND (prescriber_rx.rollup_month >= add_months(prescriber_rx.data_date, (-24))) AND (prescriber_rx.rollup_month <= add_months(prescriber_rx.data_date, (-1))) AND (upper(prescriber_rx.basket_type) = 'PRODUCT'::varchar(7)) AND (prescriber_rx.report_frequency = 'MONTH'::varchar(5))) GROUP BY prescriber_rx.ims_id UNION SELECT sfa_demographics.ims_id FROM datamart.sfa_demographics WHERE (sfa_demographics.sales_force_id = 'TP'::varchar(2)) GROUP BY sfa_demographics.ims_id) rx ON ((d.ims_id = rx.ims_id))) WHERE ((d.sales_force_id = 'TP'::varchar(2)) AND (d.last_name <> 'NATIONAL ASSIGNMENT'::varchar(19)) AND (d.first_name IS NOT NULL)) GROUP BY d.tvcmid, d.ims_id, d.veeva_account_id, d.first_name, d.middle_name, d.last_name, d.degree, ((((d.ptr_address_1 || ' '::varchar(1)) || d.ptr_address_2) || ' '::varchar(1)) || d.ptr_address_3), d.ptr_city, d.ptr_state, d.ptr_zip, d.specialty, s1.nuvigil_report_group, dec1.decile_trx_count_6_mo, dec2.decile_trx_count_6_mo, s1.amrix_target_flag;

CREATE  VIEW outbound.zzz_cmop_product AS
 SELECT sp.source_product_code AS va_product,
        pb.teva_product_code AS prod_code,
        pb.name AS prod_name,
        coalesce(bb.teva_product_code, pb.teva_product_code) AS brand_code,
        coalesce(bb.name, pb.name) AS brand_name,
        mb.teva_product_code AS market_code,
        mb.name AS market_name
 FROM (((((product.source_product sp JOIN product.basket pb ON ((pb.basket_id = sp.entity_id))) LEFT  JOIN datamart.product_basket brand ON (((brand.child_basket_id = pb.basket_id) AND (brand.parent_basket_type = 'brand'::varchar(5))))) LEFT  JOIN product.basket bb ON ((brand.parent_basket_id = bb.basket_id))) LEFT  JOIN datamart.product_basket market ON (((market.child_basket_id = pb.basket_id) AND (market.parent_basket_type = 'market'::varchar(6))))) LEFT  JOIN product.basket mb ON ((market.parent_basket_id = mb.basket_id)))
 WHERE ((sp.feed_id = 305) AND (pb.teva_product_code <> ALL (ARRAY['200102'::varchar(6), '200104'::varchar(6), '200112'::varchar(6), '200116'::varchar(6), 'V00100'::varchar(6)])))
 ORDER BY sp.source_product_code;

CREATE  VIEW outbound.zzz_create_tb_cb_transactions AS
 SELECT c.account_id AS ACCOUNT_ID,
        c.location_id AS LOCATION_ID,
        to_char(c.shipment_date, 'YYYY-MM-DD'::varchar(10)) AS SHIPMENT_DATE,
        c.ndc_code AS NDC_CODE,
        c.product_name AS PRODUCT_NAME,
        c.contract_id AS CONTRACT_ID,
        CASE mod(c.chargeback_quantity, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.chargeback_quantity)::int)::varchar ELSE rtrim((c.chargeback_quantity)::varchar, '0'::varchar(1)) END AS CHARGEBACK_UNITS,
        CASE mod(c.chargeback_amount, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.chargeback_amount)::int)::varchar ELSE rtrim((c.chargeback_amount)::varchar, '0'::varchar(1)) END AS CHARGEBACK_DOLLARS,
        to_char(c.receipt_date, 'YYYY-MM-DD'::varchar(10)) AS RECEIPT_DATE,
        c.unit_ap AS UNIT_AP,
        c.ap AS AP,
        c.debit_memo_number AS DEBIT_MEMO_NUM,
        to_char(c.credit_memo_date, 'YYYY-MM-DD HH24:MI:SS'::varchar(21)) AS CREDIT_MEMO_DATE,
        c.credit_memo_number AS CREDIT_MEMO_NUM,
        to_char(c.settlement_date, 'YYYY-MM-DD HH24:MI:SS'::varchar(21)) AS SETTLEMENT_DATE,
        CASE mod(c.contract_price, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.contract_price)::int)::varchar ELSE rtrim((c.contract_price)::varchar, '0'::varchar(1)) END AS CONTRACT_PRICE,
        ct.contract_alias AS CONTRACT_ALIAS
 FROM (datamart.chargebacks c JOIN ( SELECT chargeback_demographics.contract_id,
        chargeback_demographics.contract_alias
 FROM datamart.chargeback_demographics
 GROUP BY chargeback_demographics.contract_id,
          chargeback_demographics.contract_alias) ct ON ((c.contract_id = ct.contract_id)))
 WHERE (c.file_id = ( SELECT max(chargebacks.file_id) AS MAX
 FROM datamart.chargebacks));

CREATE  VIEW outbound.v_ob_ahm_customer_credentials AS
 SELECT d.profession_code_shortname AS CredentialCode,
        d.profession_code_fullname AS CredentialName
 FROM reference.Designations d
 GROUP BY d.profession_code_shortname,
          d.profession_code_fullname;

CREATE  VIEW outbound.v_ob_ahm_customer_specialty AS
 SELECT sp.Specialty_Code AS SpecialtyCode,
        sp.Specialty_Description AS SpecialtyName,
        ''::varchar AS SpecialtyGroupName
 FROM reference.specialties sp
 GROUP BY sp.Specialty_Code,
          sp.Specialty_Description,
          ''::varchar;

CREATE  VIEW outbound.zzz_v_asi_pbm_lookup AS
 SELECT pbm_xref.payer_plan_number,
        pbm_xref.pbm_name
 FROM integration.pbm_xref
 GROUP BY pbm_xref.payer_plan_number,
          pbm_xref.pbm_name;

CREATE  VIEW outbound.zzz_asi_rx_by_market_ms_new AS
(SELECT rx.market_name, rx.ims_client_number AS ims_client_num, rx.ims_report_number_cnt AS ims_report_num, rx.ims_zip_other AS zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id, rx.ims_specialty AS specialty, rx.payer_plan_number AS plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.ims_rx_type AS rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num, NULL AS filler_01, axd.ims_me_num AS me_num, rx.prescriber_last_name AS last_name, rx.prescriber_first_name AS first_name, axd.ims_middle_name AS middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address, axd.ims_city AS city, axd.ims_state AS state, axd.ims_zip AS zip, replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data, rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other)))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '2'::varchar(1)) AND (rx.report_frequency = 'MONTH'::varchar(5))) GROUP BY rx.market_name, rx.ims_client_number, rx.ims_report_number_cnt, rx.ims_zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END, rx.ims_specialty, axd.ims_me_num, rx.payer_plan_number, btrim(to_char(rx.sales_category, '00'::varchar(2))), rx.ims_rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))), rx.prescriber_last_name, rx.prescriber_first_name, axd.ims_middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar), axd.ims_city, axd.ims_state, axd.ims_zip, replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar), rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) UNION ALL SELECT pg.market_name, '632'::varchar(3) AS ims_client_num, '2'::varchar(2) AS ims_report_num, rx.ims_zip AS zip_other, sp.ims_id, rx.ims_specialty AS specialty, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END AS plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pg.ims_product_group AS ims_product_group_num, NULL AS filler_01, rx.ims_me_num AS me_num, rx.ims_last_name AS last_name, rx.ims_first_name AS first_name, rx.ims_middle_name AS middle_name, rx.ims_address AS address, rx.ims_city AS city, rx.ims_state AS state_code, rx.ims_zip AS zip, NULL AS supplemental_data, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3 MAIL ORDER DATA UNSPEC'::varchar(25) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3 TYSABRI MAIL ORDER DATA UNSPEC'::varchar(33) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME MAIL ORDER DATA UNSPEC'::varchar(28) ELSE NULL END AS plan_name, to_char(max(mth.month_ending), 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM (((datamart.specialty_pharmacy_shipment sp JOIN outbound.month_rollup_and_bucket mth ON ((last_day(sp.comp_month) = mth.month_ending))) JOIN reference.asi_outbound_ims_product_group_mapping pg ON (((sp.specialty_pharmacy_data_source = pg.data_source) AND (sp.basket_id = pg.basket_id) AND (pg.market_name = 'MS MARKET'::varchar(9))))) LEFT JOIN (SELECT a.ims_last_name, a.ims_first_name, a.ims_middle_name, a.ims_address, a.ims_city, a.ims_state, a.ims_zip, a.ims_client_number, a.ims_me_num, a.ims_id, a.ims_specialty, a.rnk FROM (SELECT axd.ims_last_name, axd.ims_first_name, axd.ims_middle_name, axd.ims_address, axd.ims_city, axd.ims_state, axd.ims_zip, axd.ims_client_number, axd.ims_me_num, axd.ims_id, axd.ims_specialty, row_number() OVER (PARTITION BY axd.ims_id ORDER BY axd.ims_specialty) AS rnk FROM outbound.asi_xponent_demographics axd) a WHERE (a.rnk = 1)) rx ON ((rx.ims_id = sp.ims_id))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['Prime Therapeutics'::varchar(18), 'OptumRx'::varchar(7)])) AND (rx.ims_client_number = '632'::varchar(3)) AND (sp.ims_id IS NOT NULL)) GROUP BY pg.market_name, sp.ims_id, rx.ims_specialty, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END, pg.ims_product_group, rx.ims_me_num, rx.ims_last_name, rx.ims_first_name, rx.ims_middle_name, rx.ims_address, rx.ims_city, rx.ims_state, rx.ims_zip, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3 MAIL ORDER DATA UNSPEC'::varchar(25) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3 TYSABRI MAIL ORDER DATA UNSPEC'::varchar(33) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME MAIL ORDER DATA UNSPEC'::varchar(28) ELSE NULL END) UNION ALL SELECT pg.market_name, '632'::varchar(3) AS ims_client_num, '2'::varchar(2) AS ims_report_num, cm.zip AS zip_other, NULL AS ims_id, '01N'::varchar(3) AS specialty, 'CMOP000000'::varchar(10) AS payer_plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pg.ims_product_group AS ims_product_group_num, NULL AS filler_01, '0'::varchar(1) AS me_num, 'NATIONAL ASSIGNMENT'::varchar(19) AS last_name, NULL AS first_name, NULL AS middle_name, NULL AS address, NULL AS city, NULL AS state, '00001'::varchar(5) AS zip, NULL AS supplemental_data, 'VA DATA UNSPEC'::varchar(14) AS plan_name, (SELECT to_char(x.month_ending, 'MMDDYY'::varchar(7)) AS to_char FROM (SELECT max(ims_week_buckets.month_ending) AS month_ending FROM integration.ims_week_buckets WHERE (ims_week_buckets.full_month = 'Y'::varchar(1))) x) AS data_date, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_024 FROM ((datamart.cmop_rx cm JOIN (SELECT ims_week_buckets.month_ending, ims_week_buckets.month_bucket FROM integration.ims_week_buckets GROUP BY ims_week_buckets.month_ending, ims_week_buckets.month_bucket) mth ON ((last_day(cm.comp_month) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group FROM reference.asi_outbound_ims_product_group_mapping WHERE ((asi_outbound_ims_product_group_mapping.data_source = 'CMOP'::varchar(4)) AND (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9))) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group) pg ON ((pg.basket_id = cm.basket_id))) WHERE ((mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (cm.cmop_rxs_normalized <> 0::numeric(18,0))) GROUP BY pg.market_name, cm.zip, pg.ims_product_group, (SELECT to_char(x.month_ending, 'MMDDYY'::varchar(7)) AS to_char FROM (SELECT max(ims_week_buckets.month_ending) AS month_ending FROM integration.ims_week_buckets WHERE (ims_week_buckets.full_month = 'Y'::varchar(1))) x);

CREATE  VIEW outbound.zzz_asi_rx_by_market_pd AS
SELECT rx.market_name, rx.ims_client_number AS ims_client_num, rx.ims_report_number_cnt AS ims_report_num, rx.ims_zip_other AS zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id, rx.ims_specialty AS specialty, rx.payer_plan_number AS plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.ims_rx_type AS rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num, NULL AS filler_01, axd.ims_me_num AS me_num, rx.prescriber_last_name AS last_name, rx.prescriber_first_name AS first_name, axd.ims_middle_name AS middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address, axd.ims_city AS city, axd.ims_state AS state, axd.ims_zip AS zip, replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data, rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other)))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '6'::varchar(1)) AND (rx.report_frequency = 'MONTH'::varchar(5))) GROUP BY rx.market_name, rx.ims_client_number, rx.ims_report_number_cnt, rx.ims_zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END, rx.ims_specialty, axd.ims_me_num, rx.payer_plan_number, btrim(to_char(rx.sales_category, '00'::varchar(2))), rx.ims_rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))), rx.prescriber_last_name, rx.prescriber_first_name, axd.ims_middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar), axd.ims_city, axd.ims_state, axd.ims_zip, replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar), rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) UNION ALL SELECT pg.market_name, '632'::varchar(3) AS ims_client_num, '6'::varchar(2) AS ims_report_num, cm.zip AS zip_other, NULL AS ims_id, '01N'::varchar(3) AS specialty, 'CMOP000000'::varchar(10) AS payer_plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pg.ims_product_group AS ims_product_group_num, NULL AS filler_01, '0'::varchar(1) AS me_num, 'NATIONAL ASSIGNMENT'::varchar(19) AS last_name, NULL AS first_name, NULL AS middle_name, NULL AS address, NULL AS city, NULL AS state, '00001'::varchar(5) AS zip, NULL AS supplemental_data, 'VA DATA UNSPEC'::varchar(14) AS plan_name, (SELECT to_char(month_rollup_and_bucket.month_ending, 'MMDDYY'::varchar(6)) AS to_char FROM outbound.month_rollup_and_bucket WHERE (month_rollup_and_bucket.month_bucket = 1)) AS data_date, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_024 FROM ((datamart.cmop_rx cm JOIN outbound.month_rollup_and_bucket mth ON ((last_day(cm.comp_month) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group FROM reference.asi_outbound_ims_product_group_mapping WHERE ((asi_outbound_ims_product_group_mapping.data_source = 'CMOP'::varchar(4)) AND (asi_outbound_ims_product_group_mapping.market_name = 'PD MARKET'::varchar(9))) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group) pg ON ((pg.basket_id = cm.basket_id))) WHERE ((mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (cm.cmop_rxs_normalized <> 0::numeric(18,0))) GROUP BY pg.market_name, cm.zip, pg.ims_product_group, (SELECT to_char(month_rollup_and_bucket.month_ending, 'MMDDYY'::varchar(6)) AS to_char FROM outbound.month_rollup_and_bucket WHERE (month_rollup_and_bucket.month_bucket = 1));

CREATE  VIEW outbound.zzz_asi_market_access_w_tot AS
SELECT asi_market_access_w.report_num, asi_market_access_w.ims_product_group_num AS product_num, asi_market_access_w.data_month, sum(asi_market_access_w.nrx_001) AS total_nrx_01, sum(asi_market_access_w.nrx_002) AS total_nrx_02, sum(asi_market_access_w.nrx_003) AS total_nrx_03, sum(asi_market_access_w.nrx_004) AS total_nrx_04, sum(asi_market_access_w.nrx_005) AS total_nrx_05, sum(asi_market_access_w.nrx_006) AS total_nrx_06, sum(asi_market_access_w.nrx_007) AS total_nrx_07, sum(asi_market_access_w.nrx_008) AS total_nrx_08, sum(asi_market_access_w.nrx_009) AS total_nrx_09, sum(asi_market_access_w.nrx_010) AS total_nrx_10, sum(asi_market_access_w.nrx_011) AS total_nrx_11, sum(asi_market_access_w.nrx_012) AS total_nrx_12, sum(asi_market_access_w.nrx_013) AS total_nrx_13, sum(asi_market_access_w.nrx_014) AS total_nrx_14, sum(asi_market_access_w.nrx_015) AS total_nrx_15, sum(asi_market_access_w.nrx_016) AS total_nrx_16, sum(asi_market_access_w.nrx_017) AS total_nrx_17, sum(asi_market_access_w.nrx_018) AS total_nrx_18, sum(asi_market_access_w.nrx_019) AS total_nrx_19, sum(asi_market_access_w.nrx_020) AS total_nrx_20, sum(asi_market_access_w.nrx_021) AS total_nrx_21, sum(asi_market_access_w.nrx_022) AS total_nrx_22, sum(asi_market_access_w.nrx_023) AS total_nrx_23, sum(asi_market_access_w.nrx_024) AS total_nrx_24, sum(asi_market_access_w.trx_001) AS total_trx_01, sum(asi_market_access_w.trx_002) AS total_trx_02, sum(asi_market_access_w.trx_003) AS total_trx_03, sum(asi_market_access_w.trx_004) AS total_trx_04, sum(asi_market_access_w.trx_005) AS total_trx_05, sum(asi_market_access_w.trx_006) AS total_trx_06, sum(asi_market_access_w.trx_007) AS total_trx_07, sum(asi_market_access_w.trx_008) AS total_trx_08, sum(asi_market_access_w.trx_009) AS total_trx_09, sum(asi_market_access_w.trx_010) AS total_trx_10, sum(asi_market_access_w.trx_011) AS total_trx_11, sum(asi_market_access_w.trx_012) AS total_trx_12, sum(asi_market_access_w.trx_013) AS total_trx_13, sum(asi_market_access_w.trx_014) AS total_trx_14, sum(asi_market_access_w.trx_015) AS total_trx_15, sum(asi_market_access_w.trx_016) AS total_trx_16, sum(asi_market_access_w.trx_017) AS total_trx_17, sum(asi_market_access_w.trx_018) AS total_trx_18, sum(asi_market_access_w.trx_019) AS total_trx_19, sum(asi_market_access_w.trx_020) AS total_trx_20, sum(asi_market_access_w.trx_021) AS total_trx_21, sum(asi_market_access_w.trx_022) AS total_trx_22, sum(asi_market_access_w.trx_023) AS total_trx_23, sum(asi_market_access_w.trx_024) AS total_trx_24 FROM outbound.asi_market_access_w GROUP BY asi_market_access_w.report_num, asi_market_access_w.ims_product_group_num, asi_market_access_w.data_month;

CREATE  VIEW outbound.zzz_asi_market_access_m_tot AS
SELECT asi_market_access_m.report_num, asi_market_access_m.ims_product_group_num AS product_num, asi_market_access_m.data_month, sum(asi_market_access_m.nrx_001) AS total_nrx_01, sum(asi_market_access_m.nrx_002) AS total_nrx_02, sum(asi_market_access_m.nrx_003) AS total_nrx_03, sum(asi_market_access_m.nrx_004) AS total_nrx_04, sum(asi_market_access_m.nrx_005) AS total_nrx_05, sum(asi_market_access_m.nrx_006) AS total_nrx_06, sum(asi_market_access_m.nrx_007) AS total_nrx_07, sum(asi_market_access_m.nrx_008) AS total_nrx_08, sum(asi_market_access_m.nrx_009) AS total_nrx_09, sum(asi_market_access_m.nrx_010) AS total_nrx_10, sum(asi_market_access_m.nrx_011) AS total_nrx_11, sum(asi_market_access_m.nrx_012) AS total_nrx_12, sum(asi_market_access_m.nrx_013) AS total_nrx_13, sum(asi_market_access_m.nrx_014) AS total_nrx_14, sum(asi_market_access_m.nrx_015) AS total_nrx_15, sum(asi_market_access_m.nrx_016) AS total_nrx_16, sum(asi_market_access_m.nrx_017) AS total_nrx_17, sum(asi_market_access_m.nrx_018) AS total_nrx_18, sum(asi_market_access_m.nrx_019) AS total_nrx_19, sum(asi_market_access_m.nrx_020) AS total_nrx_20, sum(asi_market_access_m.nrx_021) AS total_nrx_21, sum(asi_market_access_m.nrx_022) AS total_nrx_22, sum(asi_market_access_m.nrx_023) AS total_nrx_23, sum(asi_market_access_m.nrx_024) AS total_nrx_24, sum(asi_market_access_m.trx_001) AS total_trx_01, sum(asi_market_access_m.trx_002) AS total_trx_02, sum(asi_market_access_m.trx_003) AS total_trx_03, sum(asi_market_access_m.trx_004) AS total_trx_04, sum(asi_market_access_m.trx_005) AS total_trx_05, sum(asi_market_access_m.trx_006) AS total_trx_06, sum(asi_market_access_m.trx_007) AS total_trx_07, sum(asi_market_access_m.trx_008) AS total_trx_08, sum(asi_market_access_m.trx_009) AS total_trx_09, sum(asi_market_access_m.trx_010) AS total_trx_10, sum(asi_market_access_m.trx_011) AS total_trx_11, sum(asi_market_access_m.trx_012) AS total_trx_12, sum(asi_market_access_m.trx_013) AS total_trx_13, sum(asi_market_access_m.trx_014) AS total_trx_14, sum(asi_market_access_m.trx_015) AS total_trx_15, sum(asi_market_access_m.trx_016) AS total_trx_16, sum(asi_market_access_m.trx_017) AS total_trx_17, sum(asi_market_access_m.trx_018) AS total_trx_18, sum(asi_market_access_m.trx_019) AS total_trx_19, sum(asi_market_access_m.trx_020) AS total_trx_20, sum(asi_market_access_m.trx_021) AS total_trx_21, sum(asi_market_access_m.trx_022) AS total_trx_22, sum(asi_market_access_m.trx_023) AS total_trx_23, sum(asi_market_access_m.trx_024) AS total_trx_24 FROM outbound.asi_market_access_m GROUP BY asi_market_access_m.report_num, asi_market_access_m.ims_product_group_num, asi_market_access_m.data_month;

CREATE  VIEW outbound.zzz_ics_medicaidplangroups AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        coalesce(a.veeva_account_id, rx.ims_id) AS HCP_ID,
        rx.payer_plan_number AS PLAN_CODE,
        rx.plan_name AS PLAN_NAME,
        rx.model AS MODEL,
        rx.payer_name AS PLAN_GROUP,
        CASE WHEN (rx.basket_name ~~ 'QVAR%'::varchar(5)) THEN 'QVAR'::varchar(4) WHEN (rx.basket_name ~~ 'FLOVENT%'::varchar(8)) THEN 'FLOVENT'::varchar(7) ELSE rx.basket_name END AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM (((( SELECT rx.ims_id,
        rx.payer_plan_number,
        rx.plan_name,
        rx.model,
        rx.payer_name,
        rx.basket_name,
        rx.basket_id,
        rx.basket_type,
        rx.rollup_month,
        rx.trx_count,
        rx.tvcmid,
        rx.payment_method,
        rx.rollup_week
 FROM (datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency))))
 WHERE ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name,
          rx.basket_id,
          rx.basket_type,
          rx.rollup_month,
          rx.trx_count,
          rx.tvcmid,
          rx.payment_method,
          rx.rollup_week) rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((b.teva_product_code = ANY (ARRAY['330-13-010'::varchar(10), '330-13-020'::varchar(10), '330-13-021'::varchar(10), '330-13-016'::varchar(10), '330-13-008'::varchar(10), '330-13-022'::varchar(10), '330-13-023'::varchar(10), '330-13-024'::varchar(10), '330-13-025'::varchar(10), '330-13-026'::varchar(10), '330-13-027'::varchar(10), '330-13-028'::varchar(10), '330-13-029'::varchar(10), '330-13-030'::varchar(10), '330-13-009'::varchar(10), '330-13-005'::varchar(10), '330-13-006'::varchar(10), '330-13-011'::varchar(10), '330-13-017'::varchar(10)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END,
          coalesce(a.veeva_account_id, rx.ims_id),
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          CASE WHEN (rx.basket_name ~~ 'QVAR%'::varchar(5)) THEN 'QVAR'::varchar(4) WHEN (rx.basket_name ~~ 'FLOVENT%'::varchar(8)) THEN 'FLOVENT'::varchar(7) ELSE rx.basket_name END;

CREATE  VIEW outbound.zzz_nasal_medicaidplangroups AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        coalesce(a.veeva_account_id, rx.ims_id) AS HCP_ID,
        rx.payer_plan_number AS PLAN_CODE,
        rx.plan_name AS PLAN_NAME,
        rx.model AS MODEL,
        rx.payer_name AS PLAN_GROUP,
        rx.basket_name AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM (((( SELECT rx.ims_id,
        rx.payer_plan_number,
        rx.plan_name,
        rx.model,
        rx.payer_name,
        rx.basket_name,
        rx.basket_id,
        rx.basket_type,
        rx.rollup_month,
        rx.trx_count,
        rx.tvcmid,
        rx.payment_method,
        rx.rollup_week
 FROM (datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency))))
 WHERE ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name,
          rx.basket_id,
          rx.basket_type,
          rx.rollup_month,
          rx.trx_count,
          rx.tvcmid,
          rx.payment_method,
          rx.rollup_week) rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((b.teva_product_code = ANY (ARRAY['330-15-005'::varchar(10), '330-15-010'::varchar(10), '330-15-019'::varchar(10), '330-15-015'::varchar(10), '330-15-025'::varchar(10), '330-15-030'::varchar(10), '330-15-047'::varchar(10), '330-15-050'::varchar(10)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END,
          coalesce(a.veeva_account_id, rx.ims_id),
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name;

CREATE  VIEW outbound.zzz_nasal_mop AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(a.veeva_account_id, rx.ims_id) END AS HCP_ID,
        rx.payment_method AS PAYMENT_METHOD,
        rx.basket_name AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM (((( SELECT rx.ims_id,
        rx.payer_plan_number,
        rx.plan_name,
        rx.model,
        rx.payer_name,
        rx.basket_name,
        rx.basket_id,
        rx.basket_type,
        rx.rollup_month,
        rx.trx_count,
        NULL::float,
        rx.tvcmid,
        rx.payment_method,
        rx.rollup_week
 FROM (datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND ((length(rx.ims_id) = 7) OR ((length(rx.ims_id) <> 7) AND (rx.basket_name = ANY (ARRAY['NASONEX'::varchar(7), 'OMNARIS'::varchar(7)])))))
 GROUP BY rx.ims_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name,
          rx.basket_id,
          rx.basket_type,
          rx.rollup_month,
          rx.trx_count,
          NULL::float,
          rx.tvcmid,
          rx.payment_method,
          rx.rollup_week UNION ALL  SELECT prescriber_rx.ims_id,
        prescriber_rx.payer_plan_number,
        prescriber_rx.plan_name,
        prescriber_rx.model,
        prescriber_rx.payer_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_type,
        prescriber_rx.rollup_month,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_count,
        prescriber_rx.tvcmid,
        prescriber_rx.payment_method,
        prescriber_rx.rollup_week
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.basket_type = 'product'::varchar(7)) AND (prescriber_rx.basket_name <> ALL (ARRAY['NASONEX'::varchar(7), 'OMNARIS'::varchar(7)])) AND (length(prescriber_rx.ims_id) <> 7))) rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((b.teva_product_code = ANY (ARRAY['330-15-005'::varchar(10), '330-15-010'::varchar(10), '330-15-019'::varchar(10), '330-15-015'::varchar(10), '330-15-025'::varchar(10), '330-15-030'::varchar(10), '330-15-047'::varchar(10), '330-15-050'::varchar(10)])) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END,
          CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(a.veeva_account_id, rx.ims_id) END,
          rx.payment_method,
          rx.basket_name;

CREATE  VIEW outbound.zzz_paytype AS
 SELECT rx.model AS MODEL,
        rx.payment_method AS PAYMENT_METHOD
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((length(rx.ims_id) = 7) AND (rx.basket_type = 'product'::varchar(7)) AND (b.teva_product_code = ANY (ARRAY['330-12-002'::varchar(11), '330-12-003'::varchar(11), '330-12-015'::varchar(11), '330-12-019'::varchar(11), '330-12-023'::varchar(11), '330-13-005'::varchar(11), '330-13-006'::varchar(11), '330-13-009'::varchar(11), '330-13-011'::varchar(11), '330-13-016'::varchar(11), '330-13-020'::varchar(11), '330-13-021'::varchar(11), '330-13-022'::varchar(11), '330-13-023'::varchar(11), '330-13-024'::varchar(11), '330-13-025'::varchar(11), '330-13-026'::varchar(11), '330-13-027'::varchar(11), '330-13-028'::varchar(11), '330-13-029'::varchar(11), '330-13-030'::varchar(11), '330-14-001'::varchar(11), '330-14-0025'::varchar(11), '330-14-003'::varchar(11), '330-14-004'::varchar(11), '330-14-005'::varchar(11), '330-14-006'::varchar(11), '330-14-007'::varchar(11), '330-14-008'::varchar(11), '330-14-009'::varchar(11), '330-15-001'::varchar(11), '330-15-005'::varchar(11), '330-15-010'::varchar(11), '330-15-015'::varchar(11), '330-15-019'::varchar(11), '330-15-025'::varchar(11), '330-15-030'::varchar(11), '330-15-040'::varchar(11), '330-15-047'::varchar(11), '330-15-050'::varchar(11), '330-16-020'::varchar(11), '330-16-027'::varchar(11), '330-16-028'::varchar(11), '330-16-029'::varchar(11), '330-16-050'::varchar(11), '330-16-055'::varchar(11), '330-16-056'::varchar(11)])))
 GROUP BY rx.model,
          rx.payment_method;

CREATE  VIEW outbound.zzz_planname AS
 SELECT rx.payer_plan_number AS PAYER_PLAN_NUM,
        rx.plan_name AS PLAN_NAME,
        rx.model AS MODEL,
        rx.payer_name AS PAYER_NAME
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((length(rx.ims_id) = 7) AND (b.teva_product_code = ANY (ARRAY['330-14-001'::varchar(11), '330-14-007'::varchar(11), '330-14-009'::varchar(11), '330-14-0025'::varchar(11), '330-16-050'::varchar(11), '330-14-003'::varchar(11), '330-14-008'::varchar(11), '330-16-055'::varchar(11), '330-14-004'::varchar(11), '330-16-056'::varchar(11), '330-14-006'::varchar(11), '330-15-050'::varchar(11), '330-14-005'::varchar(11), '330-15-005'::varchar(11), '330-12-002'::varchar(11), '330-15-010'::varchar(11), '330-15-019'::varchar(11), '330-12-015'::varchar(11), '330-15-015'::varchar(11), '330-12-003'::varchar(11), '330-15-025'::varchar(11), '330-12-023'::varchar(11), '330-15-030'::varchar(11), '330-12-019'::varchar(11), '330-15-047'::varchar(11), '330-15-050'::varchar(11), '330-13-020'::varchar(11), '330-16-020'::varchar(11), '330-13-021'::varchar(11), '330-13-016'::varchar(11), '330-13-022'::varchar(11), '330-13-023'::varchar(11), '330-13-024'::varchar(11), '330-13-025'::varchar(11), '330-13-026'::varchar(11), '330-13-027'::varchar(11), '330-13-028'::varchar(11), '330-13-029'::varchar(11), '330-13-030'::varchar(11), '330-16-027'::varchar(11), '330-16-028'::varchar(11), '330-16-029'::varchar(11), '330-13-009'::varchar(11), '330-13-005'::varchar(11), '330-13-006'::varchar(11), '330-13-011'::varchar(11), '330-15-019'::varchar(11), '330-12-015'::varchar(11), '330-15-015'::varchar(11), '330-12-003'::varchar(11), '330-15-025'::varchar(11), '330-12-023'::varchar(11), '330-15-001'::varchar(11), '330-15-030'::varchar(11), '330-12-019'::varchar(11), '330-15-047'::varchar(11), '330-15-040'::varchar(11)])))
 GROUP BY rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name;

CREATE  VIEW outbound.zzz_saba_medicaidplangroups AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        coalesce(a.veeva_account_id, rx.ims_id) AS HCP_ID,
        rx.payer_plan_number AS PLAN_CODE,
        rx.plan_name AS PLAN_NAME,
        rx.model AS MODEL,
        rx.payer_name AS PLAN_GROUP,
        CASE WHEN (rx.basket_name ~~ 'PROAIR HFA%'::varchar(11)) THEN 'PROAIR'::varchar(6) ELSE rx.basket_name END AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM (((( SELECT rx.ims_id,
        rx.payer_plan_number,
        rx.plan_name,
        rx.model,
        rx.payer_name,
        rx.basket_name,
        rx.basket_id,
        rx.basket_type,
        rx.rollup_month,
        rx.trx_count,
        rx.tvcmid,
        rx.payment_method,
        rx.rollup_week
 FROM (datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency))))
 WHERE ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name,
          rx.basket_id,
          rx.basket_type,
          rx.rollup_month,
          rx.trx_count,
          rx.tvcmid,
          rx.payment_method,
          rx.rollup_week) rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((b.teva_product_code = ANY (ARRAY['330-14-001'::varchar(10), '330-14-007'::varchar(10), '330-14-009'::varchar(10), '330-14-002'::varchar(10), '330-14-003'::varchar(10), '330-14-008'::varchar(10), '330-14-004'::varchar(10), '330-14-006'::varchar(10), '330-14-005'::varchar(10), '330-14-010'::varchar(10)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END,
          coalesce(a.veeva_account_id, rx.ims_id),
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          CASE WHEN (rx.basket_name ~~ 'PROAIR HFA%'::varchar(11)) THEN 'PROAIR'::varchar(6) ELSE rx.basket_name END;

CREATE  VIEW outbound.zzz_saba_mop AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(a.veeva_account_id, rx.ims_id) END AS HCP_ID,
        rx.payment_method AS PAYMENT_METHOD,
        CASE WHEN (rx.basket_name ~~ 'PROAIR HFA%'::varchar(11)) THEN 'PROAIR'::varchar(6) ELSE rx.basket_name END AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM (((( SELECT rx.ims_id,
        rx.payer_plan_number,
        rx.plan_name,
        rx.model,
        rx.payer_name,
        rx.basket_name,
        rx.basket_id,
        rx.basket_type,
        rx.rollup_month,
        rx.trx_count,
        rx.nrx_count,
        rx.tvcmid,
        rx.payment_method,
        rx.rollup_week
 FROM (datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency))))
 WHERE (rx.basket_type = 'product'::varchar(7))
 GROUP BY rx.ims_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name,
          rx.basket_id,
          rx.basket_type,
          rx.rollup_month,
          rx.trx_count,
          rx.nrx_count,
          rx.tvcmid,
          rx.payment_method,
          rx.rollup_week) rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((b.teva_product_code = ANY (ARRAY['330-14-001'::varchar(10), '330-14-007'::varchar(10), '330-14-009'::varchar(10), '330-14-002'::varchar(10), '330-14-003'::varchar(10), '330-14-008'::varchar(10), '330-14-004'::varchar(10), '330-14-006'::varchar(10), '330-14-005'::varchar(10), '330-14-010'::varchar(10)])) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END,
          CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(a.veeva_account_id, rx.ims_id) END,
          rx.payment_method,
          CASE WHEN (rx.basket_name ~~ 'PROAIR HFA%'::varchar(11)) THEN 'PROAIR'::varchar(6) ELSE rx.basket_name END;

CREATE  VIEW outbound.zzz_zs_agile_rx AS
 SELECT rx.ims_id AS IMS_ID,
        b.teva_product_code AS PRODUCT_CODE,
        rx.basket_name AS PRODUCT_NAME,
        rx.rollup_month AS MONTH_ENDING,
        sum(CASE mod(rx.nrx_quantity, 1::float) WHEN NULLSEQUAL 0::float THEN ((rx.nrx_quantity)::int)::varchar ELSE rtrim((rx.nrx_quantity)::varchar, '0'::varchar(1)) END) AS NRX_QTY,
        sum(CASE mod(rx.trx_quantity, 1::float) WHEN NULLSEQUAL 0::float THEN ((rx.trx_quantity)::int)::varchar ELSE rtrim((rx.trx_quantity)::varchar, '0'::varchar(1)) END) AS TRX_QTY,
        sum(CASE mod(rx.unnormalized_nrx_count, 1::float) WHEN NULLSEQUAL 0::float THEN ((rx.unnormalized_nrx_count)::int)::varchar ELSE rtrim((rx.unnormalized_nrx_count)::varchar, '0'::varchar(1)) END) AS NRX_CNT,
        sum(CASE mod(rx.unnormalized_trx_count, 1::float) WHEN NULLSEQUAL 0::float THEN ((rx.unnormalized_trx_count)::int)::varchar ELSE rtrim((rx.unnormalized_trx_count)::varchar, '0'::varchar(1)) END) AS TRX_CNT
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) LEFT  JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((rx.rollup_month >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (rx.rollup_month <= last_day(add_months((statement_timestamp())::timestamp, (-2)))) AND (((b.teva_product_code = ANY (ARRAY['100120'::varchar(6), '100N25'::varchar(6), '100N15'::varchar(6), '100101'::varchar(6), '100N20'::varchar(6), '100102'::varchar(6), '100N05'::varchar(6)])) AND (rx.basket_type = 'product'::varchar(7))) OR ((b.teva_product_code = ANY (ARRAY['100100'::varchar(6), '100N00'::varchar(6)])) AND (rx.basket_type = 'brand'::varchar(5))) OR ((b.teva_product_code = ANY (ARRAY['100700'::varchar(6)])) AND (rx.basket_type = 'submarket'::varchar(9)))) AND (length(rx.ims_id) = 7) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.ims_id,
          b.teva_product_code,
          rx.basket_name,
          rx.rollup_month;

CREATE  VIEW outbound.zzz_amrix_market AS
SELECT axiom_market.plan_num AS PLAN_NUM, axiom_market.product_code AS PRODUCT_CODE, coalesce(sum(axiom_market.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_market.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_market.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_market.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_market.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_market.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_market.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_market.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_market.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_market.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_market.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_market.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_market.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_market.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_market.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_market.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_market.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_market.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_market.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_market.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_market.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_market.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_market.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_market.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_market.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_market.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_market.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_market.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_market.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_market.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_market.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_market.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_market.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_market.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_market.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_market.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_market.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_market.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_market.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_market.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_market.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_market.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_market.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_market.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_market.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_market.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_market.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_market.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_market axiom_market WHERE (axiom_market.product_code = ANY (ARRAY['A00380'::varchar(6), 'A00100'::varchar(6), 'A00330'::varchar(6), 'A00210'::varchar(6), 'A00370'::varchar(6), 'A00220'::varchar(6), 'A00230'::varchar(6), 'A00350'::varchar(6), 'A00360'::varchar(6), 'A00240'::varchar(6), 'A00320'::varchar(6), 'A00250'::varchar(6), 'A00340'::varchar(6), 'A00260'::varchar(6), 'A00270'::varchar(6), 'A00280'::varchar(6), 'A00290'::varchar(6)])) GROUP BY axiom_market.plan_num, axiom_market.product_code;

CREATE  VIEW outbound.zzz_amrix_product_totals AS
SELECT axiom_product_totals.product_code AS PRODUCT_CODE, coalesce(sum(axiom_product_totals.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_product_totals.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_product_totals.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_product_totals.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_product_totals.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_product_totals.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_product_totals.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_product_totals.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_product_totals.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_product_totals.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_product_totals.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_product_totals.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_product_totals.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_product_totals.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_product_totals.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_product_totals.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_product_totals.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_product_totals.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_product_totals.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_product_totals.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_product_totals.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_product_totals.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_product_totals.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_product_totals.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_product_totals.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_product_totals.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_product_totals.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_product_totals.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_product_totals.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_product_totals.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_product_totals.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_product_totals.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_product_totals.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_product_totals.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_product_totals.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_product_totals.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_product_totals.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_product_totals.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_product_totals.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_product_totals.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_product_totals.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_product_totals.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_product_totals.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_product_totals.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_product_totals.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_product_totals.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_product_totals.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_product_totals.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_product_totals axiom_product_totals WHERE (axiom_product_totals.product_code = ANY (ARRAY['A00380'::varchar(6), 'A00100'::varchar(6), 'A00330'::varchar(6), 'A00210'::varchar(6), 'A00370'::varchar(6), 'A00220'::varchar(6), 'A00230'::varchar(6), 'A00350'::varchar(6), 'A00360'::varchar(6), 'A00240'::varchar(6), 'A00320'::varchar(6), 'A00250'::varchar(6), 'A00340'::varchar(6), 'A00260'::varchar(6), 'A00270'::varchar(6), 'A00280'::varchar(6), 'A00290'::varchar(6)])) GROUP BY axiom_product_totals.product_code;

CREATE  VIEW outbound.v_ob_ahm_customer_individual AS
 SELECT cm.tvcmid AS CustomerId,
        coalesce(cm.first_name, ''::varchar) AS FirstName,
        coalesce(cm.last_name, ''::varchar) AS LastName,
        coalesce(cm.middle_name, ''::varchar) AS MiddleName,
        ''::varchar AS Salutation,
        coalesce(cm.suffix, ''::varchar) AS PersonalSuffix,
        cm.sub_type_name AS CustomerType,
        CASE WHEN (cm.teva_specialty_code = 'NRP'::varchar(3)) THEN 'NP'::varchar(2) ELSE d.profession_code_shortname END AS ProfessionalDesignation,
        coalesce(cm.teva_specialty_code, ''::varchar) AS PrimarySpecialtyCode,
        ''::varchar AS SecondarySpecialtyCode,
        ''::varchar AS GovernmentEmployeeIndicator,
        ''::varchar AS TaxId,
        ''::varchar AS TaxIdType,
        ''::varchar AS BusinessEmail,
        ''::varchar AS BusinessPhone,
        ''::varchar AS BusinessFax,
        ''::varchar AS MobilePhone,
        ''::varchar AS HomePhone,
        'US'::varchar(2) AS RegionId,
        CASE WHEN (cm.healthcare_professional_status_code = 'A'::varchar(1)) THEN 'Active'::varchar(6) WHEN (cm.healthcare_professional_status_code <> 'A'::varchar(1)) THEN 'Inactive'::varchar(8) ELSE ''::varchar END AS Status
 FROM ((mdm.hcp cm LEFT  JOIN ( SELECT Desig.tvcmid,
        Desig.profession_code,
        Desig.rownum
 FROM ( SELECT DISTINCT professional.tvcmid,
        professional.profession_code,
        row_number() OVER (PARTITION BY professional.tvcmid ORDER BY professional.profession_rank, professional.updated_date DESC NULLS LAST, professional.profession_code) AS rownum
 FROM mdm.professional
 ORDER BY professional.tvcmid,
          professional.profession_code,
          row_number() OVER (PARTITION BY professional.tvcmid ORDER BY professional.profession_rank, professional.updated_date DESC NULLS LAST, professional.profession_code)) Desig
 WHERE (Desig.rownum = 1)) prof ON ((cm.tvcmid = prof.tvcmid))) JOIN reference.Designations d ON ((d.profession_code = prof.profession_code)))
 WHERE ((cm.tvcmid IS NOT NULL) AND (cm.file_id IN ( SELECT max(hcp.file_id) AS max
 FROM mdm.hcp)))
 GROUP BY cm.tvcmid,
          coalesce(cm.first_name, ''::varchar),
          coalesce(cm.last_name, ''::varchar),
          coalesce(cm.middle_name, ''::varchar),
          ''::varchar,
          coalesce(cm.suffix, ''::varchar),
          cm.sub_type_name,
          CASE WHEN (cm.teva_specialty_code = 'NRP'::varchar(3)) THEN 'NP'::varchar(2) ELSE d.profession_code_shortname END,
          coalesce(cm.teva_specialty_code, ''::varchar),
          'US'::varchar(2),
          CASE WHEN (cm.healthcare_professional_status_code = 'A'::varchar(1)) THEN 'Active'::varchar(6) WHEN (cm.healthcare_professional_status_code <> 'A'::varchar(1)) THEN 'Inactive'::varchar(8) ELSE ''::varchar END;

CREATE  VIEW outbound.zzz_zs_tr_launch_analytics AS
 SELECT rx.ims_id,
        rx.model,
        rx.payment_method AS method_of_payment,
        rx.payer_plan_number,
        rx.basket_name,
        rx.ims_product_group,
        rx.rollup_month AS month_ending,
        rx.rollup_week AS week_ending,
        rx.nrx_count,
        rx.trx_count,
        rx.sales_category
 FROM (((datamart.prescriber_rx rx JOIN product.basket b ON ((rx.basket_id = b.basket_id))) JOIN outbound.month_rollup_and_bucket mth ON ((rx.rollup_month = mth.month_ending))) JOIN reference.ims_report_cnt_qty_mapping irc ON (((rx.ims_client_number = irc.ims_client_number) AND (coalesce(rx.ims_report_number_cnt, ''::varchar) = coalesce(irc.ims_report_number_cnt, ''::varchar)) AND (coalesce(rx.ims_report_number_qty, ''::varchar) = coalesce(irc.ims_report_number_qty, ''::varchar)) AND (irc.active_flag = 'Y'::char(1)))))
 WHERE ((b.teva_product_code ~~ '330-14%'::varchar(7)) AND (rx.basket_type = 'product'::varchar(7)) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 12) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)));

CREATE  VIEW outbound.zzz_ddd_normalization_control AS
 SELECT 241 AS ClientNo,
        22 AS RxReportNo,
        sp.source_product_code AS ProductGroupNo,
        21 AS CorrespondingDollarsReportNo,
        b.name AS ProductGroupName,
        nf.divisor AS Divisor,
        nf.multiplier AS Multiplier
 FROM ((product.source_product sp JOIN product.normalization_factor nf ON ((sp.entity_id = nf.entity_id))) JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE ((sp.feed_id = 462) AND (nf.source_id = 1))
 ORDER BY sp.source_product_code;

CREATE  VIEW outbound.ftf_ims_monthly_market_obm AS
(SELECT a.plan_number AS "PLAN ID", a.plan_name AS "PLAN NAME", a.payer_number AS "PAYER ID", a.payer_name AS "PAYER NAME", pg.market_name AS "MARKET NAME", rx.basket_name AS "PRODUCT NAME", mpzd.zip, to_char(rx.rollup_month, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum((rx.trx_count / mpzd.divisor)) AS TRX, sum((rx.nrx_count / mpzd.divisor)) AS NRX FROM (((((datamart.plantrak_workbook a JOIN datamart.prescriber_rx rx ON (((a.plan_name = rx.plan_name) AND (a.payer_name = rx.payer_name) AND (a.model = rx.model) AND (a.payer_plan_number = rx.payer_plan_number) AND (a.method_of_payment = rx.payment_method)))) JOIN outbound.month_rollup_and_bucket mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) JOIN (SELECT market_presc_zip_divisor.sales_force_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.ims_id, market_presc_zip_divisor.zip, market_presc_zip_divisor.divisor FROM outbound.market_presc_zip_divisor GROUP BY market_presc_zip_divisor.sales_force_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.ims_id, market_presc_zip_divisor.zip, market_presc_zip_divisor.divisor) mpzd ON (((rx.ims_id = mpzd.ims_id) AND (rx.ims_client_number = mpzd.ims_client_number) AND (rx.ims_report_number_cnt = mpzd.ims_report_number)))) JOIN (SELECT ims_report_cnt_qty_mapping.ims_client_number, ims_report_cnt_qty_mapping.ims_report_number_cnt, ims_report_cnt_qty_mapping.report_frequency FROM reference.ims_report_cnt_qty_mapping WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.data_source = 'FTF'::varchar(3)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.data_source) pg ON ((pg.basket_id = rx.basket_id))) WHERE (rx.market_name = ANY (ARRAY['ALLERGY MARKET TOTAL'::varchar(20), 'BDP NASAL MARKET TOTAL'::varchar(22), 'ICS MARKET TOTAL'::varchar(16), 'ICS SPLIT MARKET TOTAL'::varchar(22), 'LABA MARKET TOTAL'::varchar(17), 'SABA MARKET TOTAL'::varchar(17)])) GROUP BY a.plan_number, a.plan_name, a.payer_number, a.payer_name, pg.market_name, rx.basket_name, mpzd.zip, rx.rollup_month UNION SELECT a.plan_number AS "PLAN ID", a.plan_name AS "PLAN NAME", a.payer_number AS "PAYER ID", a.payer_name AS "PAYER NAME", pg.market_name AS "MARKET NAME", rx.basket_name AS "PRODUCT NAME", mpzd.zip, to_char(rx.rollup_month, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum((rx.trx_count / mpzd.divisor)) AS TRX, sum((rx.nrx_count / mpzd.divisor)) AS NRX FROM (((((datamart.plantrak_workbook a JOIN datamart.prescriber_rx rx ON (((a.plan_name = rx.plan_name) AND (a.payer_name = rx.payer_name) AND (a.model = rx.model) AND (a.payer_plan_number = rx.payer_plan_number) AND (a.method_of_payment = rx.payment_method)))) JOIN outbound.month_rollup_and_bucket mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) JOIN (SELECT market_presc_zip_divisor.sales_force_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.ims_id, market_presc_zip_divisor.zip, market_presc_zip_divisor.divisor FROM outbound.market_presc_zip_divisor GROUP BY market_presc_zip_divisor.sales_force_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.ims_id, market_presc_zip_divisor.zip, market_presc_zip_divisor.divisor) mpzd ON (((rx.ims_id = mpzd.ims_id) AND (rx.ims_client_number = mpzd.ims_client_number) AND (rx.ims_report_number_cnt = mpzd.ims_report_number)))) JOIN (SELECT ims_report_cnt_qty_mapping.ims_client_number, ims_report_cnt_qty_mapping.ims_report_number_cnt, ims_report_cnt_qty_mapping.report_frequency FROM reference.ims_report_cnt_qty_mapping WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.data_source = 'FTF'::varchar(3)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.data_source) pg ON ((pg.basket_id = rx.basket_id))) WHERE (rx.market_name = ANY (ARRAY['MS MARKET'::varchar(9), 'PD MARKET'::varchar(9)])) GROUP BY a.plan_number, a.plan_name, a.payer_number, a.payer_name, pg.market_name, rx.basket_name, mpzd.zip, rx.rollup_month) UNION SELECT a.plan_number AS "PLAN ID", a.plan_name AS "PLAN NAME", a.payer_number AS "PAYER ID", a.payer_name AS "PAYER NAME", pg.market_name AS "MARKET NAME", rx.basket_name AS "PRODUCT NAME", mpzd.zip, to_char(rx.rollup_month, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum((rx.trx_count / mpzd.divisor)) AS TRX, sum((rx.nrx_count / mpzd.divisor)) AS NRX FROM (((((datamart.plantrak_workbook a JOIN datamart.prescriber_rx rx ON (((a.plan_name = rx.plan_name) AND (a.payer_name = rx.payer_name) AND (a.model = rx.model) AND (a.payer_plan_number = rx.payer_plan_number) AND (a.method_of_payment = rx.payment_method)))) JOIN outbound.month_rollup_and_bucket mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) JOIN (SELECT market_presc_zip_divisor.sales_force_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.ims_id, market_presc_zip_divisor.zip, market_presc_zip_divisor.divisor FROM outbound.market_presc_zip_divisor GROUP BY market_presc_zip_divisor.sales_force_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.ims_id, market_presc_zip_divisor.zip, market_presc_zip_divisor.divisor) mpzd ON (((rx.ims_id = mpzd.ims_id) AND (rx.ims_client_number = mpzd.ims_client_number) AND (rx.ims_report_number_cnt = mpzd.ims_report_number)))) JOIN (SELECT ims_report_cnt_qty_mapping.ims_client_number, ims_report_cnt_qty_mapping.ims_report_number_cnt, ims_report_cnt_qty_mapping.report_frequency FROM reference.ims_report_cnt_qty_mapping WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.data_source = 'FTF'::varchar(3)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.data_source) pg ON ((pg.basket_id = rx.basket_id))) WHERE (rx.market_name = 'TOTAL STIMULANT/SLEEP/SEDATIVE'::varchar(30)) GROUP BY a.plan_number, a.plan_name, a.payer_number, a.payer_name, pg.market_name, rx.basket_name, mpzd.zip, rx.rollup_month;

CREATE  VIEW outbound.zzz_asi_psr_enrollment AS
 SELECT enrollment_summary.tvcmid,
        enrollment_summary.ims_id,
        enrollment_summary.npi,
        CASE WHEN (enrollment_summary.veeva_account_id IS NULL) THEN enrollment_summary.ims_id ELSE enrollment_summary.veeva_account_id END AS veeva_account_id,
        enrollment_summary.ndc,
        enrollment_summary.indication,
        to_char(enrollment_summary.week_ending, 'YYYYMMDD'::varchar(8)) AS week_ending,
        enrollment_summary.in_progress_count,
        enrollment_summary.completed_count,
        enrollment_summary.cancelled_count,
        enrollment_summary.prescriber_count
 FROM datamart.enrollment_summary
 ORDER BY to_char(enrollment_summary.week_ending, 'YYYYMMDD'::varchar(8));

CREATE  VIEW outbound.zzz_tr_launch_analytics_rx AS
 SELECT rx.ims_id,
        rx.model,
        rx.payment_method AS method_of_payment,
        rx.payer_plan_number AS payer_plan_num,
        b.name AS product_name,
        b.teva_product_code AS product_code,
        rx.rollup_month AS month_ending,
        mth.month_bucket,
        rx.rollup_week AS week_ending,
        mth.calendar_week_bucket AS week_bucket,
        sum(rx.nrx_count) AS nrx_count,
        sum(rx.trx_count) AS trx_count,
        rx.sales_category
 FROM (((datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) LEFT  JOIN product.basket b ON ((rx.basket_id = b.basket_id))) JOIN ( SELECT ims_week_buckets.month_bucket,
        ims_week_buckets.calendar_week,
        ims_week_buckets.calendar_week_bucket,
        ims_week_buckets.split_week_ending,
        ims_week_buckets.month_ending
 FROM integration.ims_week_buckets) mth ON (((rx.rollup_week = mth.calendar_week) AND (rx.rollup_month = mth.month_ending))))
 WHERE (((b.teva_product_code ~~ '%330-14%'::varchar(8)) OR (b.basket_id IN ( SELECT basket_item.entity_id
 FROM product.basket_item
 WHERE (basket_item.basket_id = 5398)))) AND (rx.basket_type = 'product'::varchar(7)) AND (mth.calendar_week_bucket >= 1) AND (mth.calendar_week_bucket <= 52))
 GROUP BY rx.ims_id,
          rx.model,
          rx.payment_method,
          rx.payer_plan_number,
          b.name,
          b.teva_product_code,
          rx.rollup_month,
          mth.month_bucket,
          rx.rollup_week,
          mth.calendar_week_bucket,
          rx.nrx_count,
          rx.trx_count,
          rx.sales_category;

CREATE  VIEW outbound.v_ob_ahm_customer_address AS
 SELECT concat('A'::varchar(1), (addr.tvcmid)::varchar) AS CustomerAddressId,
        addr.tvcmid AS CustomerId,
        'Business'::varchar(8) AS AddressType,
        coalesce(addr.address_line_1, ''::varchar) AS AddressLine1,
        coalesce(addr.address_line_2, ''::varchar) AS AddressLine2,
        ''::varchar AS AddressLine3,
        coalesce(addr.city, ''::varchar) AS City,
        ''::varchar AS Neighborhood,
        coalesce(addr.state, ''::varchar) AS StateProvince,
        coalesce(addr.zip5_postal_code, ''::varchar) AS PostalCode,
        coalesce(addr.zip4_postal_extension_code, ''::varchar) AS PostalCodeExtension,
        'US'::varchar(2) AS CountryCode,
        'Y'::varchar(1) AS PrimaryIndicator,
        coalesce(deaaddr.dea_number, coalesce(rdea.dea_number, ''::varchar)) AS DEANumber,
        coalesce(((deaaddr.dea_expiration_date)::date)::varchar(10), ''::varchar) AS DEAExpirationDate,
        ''::varchar AS EffectiveDate,
        ''::varchar AS EndDate
 FROM (((mdm.address addr JOIN ( SELECT PrimaryAddress.tvcmid,
        PrimaryAddress.address_id,
        PrimaryAddress.file_id,
        PrimaryAddress.single_address_indicator
 FROM ( SELECT Address.tvcmid,
        Address.address_id,
        coalesce(Address.single_address_indicator, 'N'::varchar(1)) AS single_address_indicator,
        coalesce(Address.practice_location_rank, '- 7'::varchar(3)) AS practice_location_rank,
        Address.file_id,
        rank() OVER (PARTITION BY Address.tvcmid ORDER BY coalesce(Address.single_address_indicator, 'N'::varchar(1)) DESC, coalesce(Address.practice_location_rank, '- 7'::varchar(3)) DESC, Address.address_effective_date DESC, Address.address_id DESC) AS rnk
 FROM ( SELECT address.tvcmid,
        address.address_id,
        max(address.single_address_indicator) AS single_address_indicator,
        max(address.practice_location_rank) AS practice_location_rank,
        max(address.address_effective_date) AS address_effective_date,
        address.file_id
 FROM mdm.address
 WHERE ((address.address_type = 2::float) AND (address.address_status = 'A'::varchar(1)) AND (address.file_id = ( SELECT max(address.file_id) AS max
 FROM mdm.address)))
 GROUP BY address.tvcmid,
          address.address_id,
          address.file_id) Address) PrimaryAddress
 WHERE ((PrimaryAddress.tvcmid IN ( SELECT hcp.tvcmid
 FROM mdm.hcp
 WHERE (hcp.file_id = ( SELECT max(hcp.file_id) AS max
 FROM mdm.hcp)))) AND (PrimaryAddress.rnk = 1))) PA ON (((PA.address_id = addr.address_id) AND (addr.tvcmid = PA.tvcmid) AND (addr.file_id = PA.file_id) AND (coalesce(addr.single_address_indicator, 'N'::varchar(1)) = PA.single_address_indicator)))) LEFT  JOIN ( SELECT dea_address.tvcmid,
        max(dea_address.address_id) AS address_id,
        max(dea_address.dea_number) AS dea_number,
        max(dea_address.dea_expiration_date) AS dea_expiration_date
 FROM mdm.dea_address
 WHERE ((dea_address.file_id = ( SELECT max(dea_address.file_id) AS max
 FROM mdm.dea_address)) AND (dea_address.dea_status_code = 'A'::varchar(1)))
 GROUP BY dea_address.tvcmid) deaaddr ON (((addr.address_id = deaaddr.address_id) AND (addr.tvcmid = deaaddr.tvcmid)))) LEFT  JOIN ( SELECT raw_dea.tvcmid,
        raw_dea.state,
        max(raw_dea.dea_number) AS dea_number
 FROM mdm.raw_dea
 WHERE (raw_dea.file_id = ( SELECT max(raw_dea.file_id) AS max
 FROM mdm.raw_dea))
 GROUP BY raw_dea.tvcmid,
          raw_dea.state) rdea ON (((addr.state = rdea.state) AND (addr.tvcmid = rdea.tvcmid))))
 GROUP BY concat('A'::varchar(1), (addr.tvcmid)::varchar),
          addr.tvcmid,
          'Business'::varchar(8),
          coalesce(addr.address_line_1, ''::varchar),
          coalesce(addr.address_line_2, ''::varchar),
          ''::varchar,
          coalesce(addr.city, ''::varchar),
          coalesce(addr.state, ''::varchar),
          coalesce(addr.zip5_postal_code, ''::varchar),
          coalesce(addr.zip4_postal_extension_code, ''::varchar),
          'US'::varchar(2),
          'Y'::varchar(1),
          coalesce(deaaddr.dea_number, coalesce(rdea.dea_number, ''::varchar)),
          coalesce(((deaaddr.dea_expiration_date)::date)::varchar(10), ''::varchar);

CREATE  VIEW outbound.zzz_brandedims_medicaidplangroups AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        coalesce(a.veeva_account_id, rx.ims_id) AS HCP_ID,
        rx.payer_plan_number AS PLAN_CODE,
        rx.plan_name AS PLAN_NAME,
        rx.model AS MODEL,
        rx.payer_name AS PLAN_GROUP,
        rx.basket_name AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM (((( SELECT rx.ims_id,
        rx.payer_plan_number,
        rx.plan_name,
        rx.model,
        rx.payer_name,
        rx.basket_name,
        rx.basket_id,
        rx.basket_type,
        rx.rollup_month,
        rx.trx_count,
        rx.tvcmid,
        rx.payment_method,
        rx.rollup_week
 FROM (datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency))))
 WHERE (((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) OR (rx.payer_plan_number = ANY (ARRAY['7001720001'::varchar(10), '0013670087'::varchar(10)]))) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name,
          rx.basket_id,
          rx.basket_type,
          rx.rollup_month,
          rx.trx_count,
          rx.tvcmid,
          rx.payment_method,
          rx.rollup_week) rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE (((b.basket_id)::varchar = ANY (ARRAY['85'::varchar(10), '84'::varchar(10), '86'::varchar(10), '63'::varchar(10), '405'::varchar(10), '87'::varchar(10), '89'::varchar(10), '88'::varchar(10), '580'::varchar(10), '581'::varchar(10), '582'::varchar(10), '583'::varchar(10), '584'::varchar(10), '585'::varchar(10), '5346'::varchar(10), '5347'::varchar(10), '5348'::varchar(10), '589'::varchar(10), '590'::varchar(10), '5394'::varchar(10), '5395'::varchar(10), '5396'::varchar(10), '586'::varchar(10), '587'::varchar(10), '103'::varchar(10)])) AND ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) OR (rx.payer_plan_number = ANY (ARRAY['7001720001'::varchar(10), '0013670087'::varchar(10)]))) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          a.veeva_account_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name;

CREATE  VIEW outbound.zzz_brandedims_mop AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(a.veeva_account_id, rx.ims_id) END AS HCP_ID,
        rx.payment_method AS PAYMENT_METHOD,
        rx.basket_name AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM ((((datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE (((b.basket_id)::varchar = ANY (ARRAY['85'::varchar(10), '84'::varchar(10), '86'::varchar(10), '63'::varchar(10), '405'::varchar(10), '87'::varchar(10), '89'::varchar(10), '88'::varchar(10), '580'::varchar(10), '581'::varchar(10), '582'::varchar(10), '583'::varchar(10), '584'::varchar(10), '585'::varchar(10), '5346'::varchar(10), '5347'::varchar(10), '5348'::varchar(10), '589'::varchar(10), '590'::varchar(10), '5394'::varchar(10), '5395'::varchar(10), '5396'::varchar(10), '586'::varchar(10), '587'::varchar(10), '103'::varchar(10)])) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END,
          CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(a.veeva_account_id, rx.ims_id) END,
          rx.payment_method,
          rx.basket_name;

CREATE  VIEW outbound.zzz_asi_rems_extract AS
 SELECT r.ACCOUNT_ID,
        r.ENROLLMENT_ID,
        r.NPI,
        r.DEA_NUM,
        r.PROGRAM_ID,
        r.REMS_PROGRAM,
        r.ENROLLMENT_STATUS,
        r.CURRENT_ENROLLMENT_STEP,
        r.EFFECTIVE_DATE,
        r.EXPIRATION_DATE
 FROM ( SELECT coalesce(cm_vvid.id_num, cm_imsid.id_num) AS ACCOUNT_ID,
        r.enrollment_id AS ENROLLMENT_ID,
        r.npi AS NPI,
        r.dea_num AS DEA_NUM,
        r.program_id AS PROGRAM_ID,
        "substring"(r.program_name, 1, 4) AS REMS_PROGRAM,
        r.status AS ENROLLMENT_STATUS,
        r.in_progress_step AS CURRENT_ENROLLMENT_STEP,
        r.effective_date AS EFFECTIVE_DATE,
        r.expiration_date AS EXPIRATION_DATE
 FROM ((datamart.rems_prescriber r LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        max(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'VEEVA_ID'::varchar(8))
 GROUP BY tvcmid_xref.tvcmid) cm_vvid ON ((r.prescriber_tvcmid = cm_vvid.tvcmid))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        max(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'IMS_ID'::varchar(6))
 GROUP BY tvcmid_xref.tvcmid) cm_imsid ON ((r.prescriber_tvcmid = cm_imsid.tvcmid)))) r
 WHERE (r.ACCOUNT_ID IS NOT NULL);

CREATE  VIEW outbound.zzz_zs_agile_mkt_fentora_obq_demo AS
SELECT pcd.tvcmid, pcd.ims_id, pcd.veeva_account_id, pcd.first_name, pcd.middle_name, pcd.last_name, pcd.degree, ((pcd.ptr_address_1 || pcd.ptr_address_2) || pcd.ptr_address_3) AS address, pcd.ptr_city, pcd.ptr_state, pcd.ptr_zip, pcd.specialty AS prim_specialty, s.fentora_report_group, rxd.decile_trx_count_6_mo AS fentora_decile, CASE WHEN (cp.ims_id IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS target_flag FROM ((((datamart.prescriber_combined_demographics pcd LEFT JOIN reference.specialty_xref s ON ((pcd.specialty = s.specialty_code))) LEFT JOIN datamart.rx_deciles rxd ON (((pcd.ims_id = rxd.ims_id) AND (rxd.decile_name = 'AMRIX'::varchar(5))))) JOIN (SELECT prescriber_rx.ims_id FROM datamart.prescriber_rx WHERE (prescriber_rx.basket_id = 40)) rx ON ((rx.ims_id = pcd.ims_id))) LEFT JOIN datamart.call_plan cp ON (((pcd.ims_id = cp.ims_id) AND (pcd.sales_force_id = cp.sales_force_id) AND (cp.basket_id = 40)))) WHERE ((pcd.sales_force_id = 'TP'::varchar(2)) AND (pcd.last_name <> 'NATIONAL ASSIGNMENT'::varchar(19)) AND (pcd.first_name IS NOT NULL)) GROUP BY pcd.tvcmid, pcd.ims_id, pcd.veeva_account_id, pcd.first_name, pcd.middle_name, pcd.last_name, pcd.degree, ((pcd.ptr_address_1 || pcd.ptr_address_2) || pcd.ptr_address_3), pcd.ptr_city, pcd.ptr_state, pcd.ptr_zip, pcd.specialty, s.fentora_report_group, rxd.decile_trx_count_6_mo, CASE WHEN (cp.ims_id IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END;

CREATE  VIEW outbound.zzz_zs_agile_mkt_fentora_obq_rems_enrollment AS
 SELECT NULL AS CEPH_ID,
        rp.program_id AS PROGRAM_ID,
        rp.program_name AS PROGRAM_NAME,
        rp.channel AS CHANNEL,
        rp.enrollment_id AS ENROLLMENT_ID,
        rp.first_name AS FIRST_NAME,
        rp.middle_name AS MIDDLE_NAME,
        rp.last_name AS LAST_NAME,
        irp.credential AS CREDENTIAL,
        NULL AS SPECIALTY,
        rp.site_name AS SITE_NAME,
        rp.address_line_1 AS ADDRESS1,
        rp.address_line_2 AS ADDRESS2,
        rp.city AS CITY,
        rp.state AS STATE,
        rp.zip AS ZIP,
        rp.status AS STATUS,
        rp.in_progress_step AS IN_PROGRESS_STEP,
        rp.phone AS PHONE,
        rp.effective_date AS EFFECTIVE_DATE,
        rp.expiration_date AS EXPIRATION_DATE,
        rp.npi AS NPI,
        rp.dea_num AS DEA_NUM,
        rp.obsolescence_date AS OBSOLESCENCE_DATE,
        NULL AS OBSOLESCENCE_REASON,
        (statement_timestamp())::timestamp AS LAST_BUILD_DATE,
        rp.ppaf_count AS PPAF_COUNT,
        NULL AS HAD_ENROLLED_IN_FENTORA_REMS,
        NULL AS CM_ID,
        cm_ims.id_num AS IMS_ID,
        cm_vv.id_num AS VEEVA_ACCOUNT_ID
 FROM (((datamart.rems_prescriber rp JOIN integration.rems_prescriber irp ON (((rp.file_id = irp.file_id) AND (rp.record_id = irp.record_id)))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'IMS_ID'::varchar(6))
 GROUP BY tvcmid_xref.tvcmid) cm_ims ON ((rp.prescriber_tvcmid = cm_ims.tvcmid))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'VEEVA_ID'::varchar(8))
 GROUP BY tvcmid_xref.tvcmid) cm_vv ON ((rp.prescriber_tvcmid = cm_vv.tvcmid)));

CREATE  VIEW outbound.zzz_asi_rx_by_market_hd_parallel AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM ((datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other)))) JOIN outbound.month_rollup_and_bucket iwb ON ((rx.rollup_month = iwb.month_ending)))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '046'::varchar(3)) AND (rx.ims_report_number_cnt = '8'::varchar(1)) AND (rx.report_frequency = 'MONTH'::varchar(5)) AND (((rx.basket_id = ANY (ARRAY[5264, 5266, 5216, 5265])) AND (rx.indication = 'HD'::varchar(2))) OR (rx.basket_id <> ALL (ARRAY[5264, 5266, 5216, 5265]))))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.i_sfa_decile AS
 SELECT rx_deciles.ims_id,
        'CNS'::varchar(3) AS category,
        CASE WHEN (rx_deciles.decile_name = 'MS MARKET'::varchar(9)) THEN 'MS'::varchar(2) WHEN (rx_deciles.decile_name = 'MODAFINIL'::varchar(9)) THEN 'WAKE'::varchar(4) ELSE NULL END AS decile_name,
        rx_deciles.decile_trx_count_6_mo AS trx_cnt_01_06,
        rx_deciles.decile_trx_count_12_mo AS trx_cnt_01_12,
        rx_deciles.tvcmid
 FROM datamart.rx_deciles
 WHERE (((rx_deciles.decile_name = 'MS MARKET'::varchar(9)) OR (rx_deciles.decile_name = 'MODAFINIL'::varchar(9))) AND (rx_deciles.ims_id IN ( SELECT sfa_demographics.ims_id
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) AND (sfa_demographics.ims_id IS NOT NULL)))));

CREATE  VIEW outbound.zzz_rx_amrix AS
 SELECT rx.ims_id,
        rx.payment_method AS mop,
        b.teva_product_code AS product_code,
        b.name AS product_name,
        rx.rollup_month AS month_ending,
        sum(rx.nrx_quantity) AS nrx_qty,
        sum(rx.trx_quantity) AS trx_qty,
        sum(rx.unnormalized_nrx_count) AS nrx_cnt,
        sum(rx.unnormalized_trx_count) AS trx_cnt
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT basket.basket_id,
        basket.name,
        basket.description,
        basket.teva_product_code,
        basket.basket_type
 FROM product.basket
 WHERE (basket.basket_id = ANY (ARRAY[40, 147, 173, 197, 198, 199, 216, 217, 235]))) b ON ((rx.basket_id = b.basket_id))) JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.ims_report_number_qty,
        ims_report_cnt_qty_mapping.report_frequency,
        ims_report_cnt_qty_mapping.active_flag,
        ims_report_cnt_qty_mapping.indication_flag
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) m ON (((rx.ims_client_number = m.ims_client_number) AND (rx.ims_report_number_cnt <=> m.ims_report_number_cnt) AND (rx.ims_report_number_qty <=> m.ims_report_number_qty))))
 WHERE ((rx.rollup_month >= last_day(add_months((statement_timestamp())::timestamp, (-25)))) AND (rx.rollup_month <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (length(rx.ims_id) = 7))
 GROUP BY rx.ims_id,
          rx.payment_method,
          b.teva_product_code,
          b.name,
          rx.rollup_month;

CREATE  VIEW outbound.zzz_details_amrix AS
 SELECT c.tvcmid,
        c.ims_id,
        c.veeva_account_id,
        initcap(d.last_name) AS last_name,
        initcap(d.first_name) AS first_name,
        initcap(d.middle_name) AS middle_name,
        d.credentials,
        d.zip,
        c.rep_id,
        c.territory_number AS territory_num,
        c.call_date,
        'AMRIX'::varchar(5) AS product,
        cd.detail_position
 FROM (((( SELECT sfa_call_detail.sales_force_id,
        sfa_call_detail.call_id,
        sfa_call_detail.product,
        sfa_call_detail.basket_id,
        sfa_call_detail.basket_name,
        sfa_call_detail.detail_position,
        sfa_call_detail.indication
 FROM datamart.sfa_call_detail
 WHERE ((sfa_call_detail.sales_force_id = ANY (ARRAY['TP'::varchar(2), 'TC'::varchar(2)])) AND (sfa_call_detail.product = 'AMRIX'::varchar(5)))) cd JOIN ( SELECT sfa_call.sales_force_id,
        sfa_call.call_id,
        sfa_call.veeva_account_id,
        sfa_call.ims_id,
        sfa_call.ims_outlet_id,
        sfa_call.customer_type,
        sfa_call.first_name,
        sfa_call.last_name,
        sfa_call.call_type,
        sfa_call.legacy_call_type,
        sfa_call.ceph_id,
        sfa_call.dea_num,
        sfa_call.rep_id,
        sfa_call.rep_first_name,
        sfa_call.rep_last_name,
        sfa_call.territory_number,
        sfa_call.zip_on_call,
        sfa_call.call_date,
        sfa_call.submit_date,
        sfa_call.attendees,
        sfa_call.attendee_type,
        sfa_call.area_number,
        sfa_call.region_number,
        sfa_call.tvcmid,
        sfa_call.call_recordtype,
        sfa_call.call_duration,
        sfa_call.call_datetime,
        sfa_call.call_timezone
 FROM datamart.sfa_call
 WHERE ((sfa_call.call_date >= last_day(add_months((statement_timestamp())::timestamp, (-25)))) AND (sfa_call.call_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))))) c ON ((cd.call_id = c.call_id))) JOIN ( SELECT sfa_demographics.veeva_account_id,
        sfa_demographics.sales_force_id,
        sfa_demographics.customer_type,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.ims_outlet_code,
        sfa_demographics.territory_number,
        sfa_demographics.territory_type,
        sfa_demographics.territory_status,
        sfa_demographics.last_name,
        sfa_demographics.first_name,
        sfa_demographics.middle_name,
        sfa_demographics.suffix_name,
        sfa_demographics.credentials,
        sfa_demographics.organization_name,
        sfa_demographics.veeva_address_id,
        sfa_demographics.address_line1,
        sfa_demographics.address_line2,
        sfa_demographics.address_line3,
        sfa_demographics.city,
        sfa_demographics.state,
        sfa_demographics.zip,
        sfa_demographics.address_status,
        sfa_demographics.phone,
        sfa_demographics.phone_ext,
        sfa_demographics.fax,
        sfa_demographics.mobile,
        sfa_demographics.email,
        sfa_demographics.prim_specialty,
        sfa_demographics.specialty_code,
        sfa_demographics.sfa_create_date,
        sfa_demographics.demo_rank,
        sfa_demographics.last_call_date,
        sfa_demographics.calls_last_90_days,
        sfa_demographics.zip_valid_for_territory_num,
        sfa_demographics.bp_code,
        sfa_demographics.sfa_align_date,
        sfa_demographics.account_demo_id,
        sfa_demographics.pdrp_flag,
        sfa_demographics.designation,
        sfa_demographics.business_type,
        sfa_demographics.area_number,
        sfa_demographics.region_number,
        sfa_demographics.tvcmid
 FROM datamart.sfa_demographics) d ON ((c.veeva_account_id = d.veeva_account_id))) JOIN ( SELECT current_alignment.zip_code,
        current_alignment.city,
        current_alignment.state_code,
        current_alignment.territory_number,
        current_alignment.territory_name,
        current_alignment.area_number,
        current_alignment.area_name,
        current_alignment.region_number,
        current_alignment.region_name,
        current_alignment.sales_force_id,
        current_alignment.organization_code,
        current_alignment.inactive_flag,
        current_alignment.comments,
        current_alignment.mirror_flag,
        current_alignment.mirror_territory_number,
        current_alignment.file_id,
        current_alignment.record_id
 FROM datamart.current_alignment) al ON ((d.zip = al.zip_code)))
 GROUP BY c.tvcmid,
          c.ims_id,
          c.veeva_account_id,
          initcap(d.last_name),
          initcap(d.first_name),
          initcap(d.middle_name),
          d.credentials,
          d.zip,
          c.rep_id,
          c.territory_number,
          c.call_date,
          'AMRIX'::varchar(5),
          cd.detail_position;

CREATE  VIEW outbound.zzz_demo_amrix AS
SELECT d.tvcmid AS TVCMID, d.ims_id AS IMS_ID, d.veeva_account_id AS VEEVA_ACCOUNT_ID, d.first_name AS FIRST_NAME, d.middle_name AS MID_NAME, d.last_name AS LAST_NAME, d.degree AS DEGREE, ((((d.ptr_address_1 || ' '::varchar(1)) || d.ptr_address_2) || ' '::varchar(1)) || d.ptr_address_3) AS ADDRESS, d.ptr_city AS CITY, d.ptr_state AS STATE, d.ptr_zip AS ZIP, d.specialty AS PRIM_SPECIALTY, s1.nuvigil_report_group AS amrix_report_group, dec1.decile_trx_count_6_mo AS amrix_decile, dec2.decile_trx_count_6_mo AS bsmr_decile, dec3.decile_trx_count_6_mo AS total_muscal_relaxant_decile, NULL AS bsmr_less_soma_zanaflex_decile, dec4.decile_trx_count_6_mo AS Cyclobenzaprine_HCL_decile, s1.amrix_target_flag AS TARGET_FLAG FROM ((((((datamart.prescriber_combined_demographics d LEFT JOIN reference.specialty_xref s1 ON ((s1.specialty_code = d.specialty))) LEFT JOIN datamart.rx_deciles dec1 ON (((dec1.ims_id = d.ims_id) AND (upper(dec1.decile_name) = 'AMRIX'::varchar(5))))) LEFT JOIN datamart.rx_deciles dec2 ON (((dec2.ims_id = d.ims_id) AND (upper(dec2.decile_name) = 'BRANDED MUSCLE RELAXANTS'::varchar(24))))) LEFT JOIN datamart.rx_deciles dec3 ON (((dec3.ims_id = d.ims_id) AND (upper(dec3.decile_name) = 'TOTAL MUSCLE RELAXANTS'::varchar(22))))) LEFT JOIN datamart.rx_deciles dec4 ON (((dec4.ims_id = d.ims_id) AND (upper(dec4.decile_name) = 'CYCLOBENZAPRINE HCL'::varchar(19))))) JOIN (SELECT prescriber_rx.ims_id FROM datamart.prescriber_rx prescriber_rx WHERE ((prescriber_rx.basket_id = 176) AND (prescriber_rx.rollup_month >= add_months(prescriber_rx.data_date, (-24))) AND (prescriber_rx.rollup_month <= add_months(prescriber_rx.data_date, (-1))) AND (upper(prescriber_rx.basket_type) = 'PRODUCT'::varchar(7)) AND (prescriber_rx.report_frequency = 'MONTH'::varchar(5))) GROUP BY prescriber_rx.ims_id UNION SELECT sfa_demographics.ims_id FROM datamart.sfa_demographics WHERE (sfa_demographics.sales_force_id = 'TP'::varchar(2)) GROUP BY sfa_demographics.ims_id) rx ON ((d.ims_id = rx.ims_id))) WHERE ((d.sales_force_id = 'TP'::varchar(2)) AND (d.last_name <> 'NATIONAL ASSIGNMENT'::varchar(19)) AND (d.first_name IS NOT NULL)) GROUP BY d.tvcmid, d.ims_id, d.veeva_account_id, d.first_name, d.middle_name, d.last_name, d.degree, ((((d.ptr_address_1 || ' '::varchar(1)) || d.ptr_address_2) || ' '::varchar(1)) || d.ptr_address_3), d.ptr_city, d.ptr_state, d.ptr_zip, d.specialty, s1.nuvigil_report_group, dec1.decile_trx_count_6_mo, dec2.decile_trx_count_6_mo, dec3.decile_trx_count_6_mo, dec4.decile_trx_count_6_mo, s1.amrix_target_flag;

CREATE  VIEW outbound.zzz_copay_redemption_amrix AS
 SELECT cd.physician_tvcmid AS TVCMID,
        cd.physician_ims_id AS IMS_ID,
        cd.physician_veeva_id AS VEEVA_ACCOUNT_ID,
        p.program_number AS ASI_PROGRAM_NUM,
        p.program_description AS PROGRAM_DESC,
        cd.copay_card_number AS COPAY_CARD_NUM,
        coalesce(cd.physician_zip, cd.pharmacy_zip) AS ZIP_CODE,
        to_char(cd.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        cd.basket_name AS BRAND_NAME,
        replace(cd.basket_name, 'AMRIX'::varchar(5), ''::varchar) AS DRUG_DESC,
        cd.quantity AS QTY
 FROM (datamart.copay cd LEFT  JOIN reference.copay_voucher_program p ON (((cd.program_number = p.program_number) AND (cd.redemption_type = p.redemption_type))))
 WHERE ((cd.basket_name ~~ '%AMRIX%'::varchar(7)) AND (cd.fill_date >= last_day((add_months((statement_timestamp())::timestamp, (-25)) + 1))) AND (cd.fill_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (cd.report_frequency = 'WEEK'::varchar(4)) AND (cd.redemption_type = 'COPAY'::varchar(5)))
 GROUP BY cd.physician_tvcmid,
          cd.physician_ims_id,
          cd.physician_veeva_id,
          p.program_number,
          p.program_description,
          cd.copay_card_number,
          coalesce(cd.physician_zip, cd.pharmacy_zip),
          to_char(cd.fill_date, 'YYYY-MM-DD'::varchar(10)),
          cd.basket_name,
          replace(cd.basket_name, 'AMRIX'::varchar(5), ''::varchar),
          cd.quantity;

CREATE  VIEW outbound.zs_calls_by_specialty AS
SELECT 'TEVA'::varchar(4) AS company, x.specialty_code, d.prim_specialty, sum(c.calls) AS calls_6mth FROM (((SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE (sfa_demographics.ims_id IS NOT NULL) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.veeva_account_id, c.territory_number AS territory_num, sum(1) AS calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01))) GROUP BY c.veeva_account_id, c.territory_number) c ON (((d.VEEVA_ACCOUNT_ID = c.veeva_account_id) AND (d.territory_num = c.territory_num)))) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) GROUP BY d.prim_specialty, x.specialty_code ORDER BY x.specialty_code;

CREATE  VIEW outbound.zs_calls_by_sales_force AS
 SELECT 'TEVA'::varchar(4) AS company,
        to_char(month_lookup.m01, 'yyyymm'::varchar(6)) AS month_ending,
        c.sales_force_id,
        CASE c.sales_force_id WHEN NULLSEQUAL 'TP'::varchar(2) THEN 'Psychiatry'::varchar(10) WHEN NULLSEQUAL 'TN'::varchar(2) THEN 'Neuroscience'::varchar(12) WHEN NULLSEQUAL 'TO'::varchar(2) THEN 'Oncology'::varchar(8) WHEN NULLSEQUAL 'TR'::varchar(2) THEN 'Respiratory'::varchar(11) WHEN NULLSEQUAL 'TS'::varchar(2) THEN 'Severe Asthma'::varchar(13) ELSE NULL END AS sales_team,
        count(DISTINCT c.territory_num) AS num_terrs,
        count(DISTINCT c.rep_id) AS num_reps,
        sum(c.p1_calls_mth1) AS p1_calls_mth1,
        sum(c.p2_calls_mth1) AS p2_calls_mth1,
        sum(c.p3_calls_mth1) AS p3_calls_mth1,
        sum(c.p4_calls_mth1) AS p4_calls_mth1,
        sum(c.p1_calls_mth2) AS p1_calls_mth2,
        sum(c.p2_calls_mth2) AS p2_calls_mth2,
        sum(c.p3_calls_mth2) AS p3_calls_mth2,
        sum(c.p4_calls_mth2) AS p4_calls_mth2,
        sum(c.p1_calls_mth3) AS p1_calls_mth3,
        sum(c.p2_calls_mth3) AS p2_calls_mth3,
        sum(c.p3_calls_mth3) AS p3_calls_mth3,
        sum(c.p4_calls_mth3) AS p4_calls_mth3,
        sum(c.p1_calls_mth4) AS p1_calls_mth4,
        sum(c.p2_calls_mth4) AS p2_calls_mth4,
        sum(c.p3_calls_mth4) AS p3_calls_mth4,
        sum(c.p4_calls_mth4) AS p4_calls_mth4,
        sum(c.p1_calls_mth5) AS p1_calls_mth5,
        sum(c.p2_calls_mth5) AS p2_calls_mth5,
        sum(c.p3_calls_mth5) AS p3_calls_mth5,
        sum(c.p4_calls_mth5) AS p4_calls_mth5,
        sum(c.p1_calls_mth6) AS p1_calls_mth6,
        sum(c.p2_calls_mth6) AS p2_calls_mth6,
        sum(c.p3_calls_mth6) AS p3_calls_mth6,
        sum(c.p4_calls_mth6) AS p4_calls_mth6
 FROM ( SELECT c.sales_force_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.sales_force_id,
        c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        d.product,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.sales_force_id,
          c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          d.product,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.sales_force_id,
          c.territory_num,
          c.rep_id) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) month_lookup
 WHERE (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)]))
 GROUP BY c.sales_force_id,
          to_char(month_lookup.m01, 'yyyymm'::varchar(6));

CREATE  VIEW outbound.zs_calls_by_product AS
 SELECT 'TEVA'::varchar(4) AS company,
        to_char(month_lookup.m01, 'yyyymm'::varchar(6)) AS month_ending,
        c.product,
        sum(c.p1_calls_mth1) AS p1_calls_mth1,
        sum(c.p2_calls_mth1) AS p2_calls_mth1,
        sum(c.p3_calls_mth1) AS p3_calls_mth1,
        sum(c.p4_calls_mth1) AS p4_calls_mth1,
        sum(c.p1_calls_mth2) AS p1_calls_mth2,
        sum(c.p2_calls_mth2) AS p2_calls_mth2,
        sum(c.p3_calls_mth2) AS p3_calls_mth2,
        sum(c.p4_calls_mth2) AS p4_calls_mth2,
        sum(c.p1_calls_mth3) AS p1_calls_mth3,
        sum(c.p2_calls_mth3) AS p2_calls_mth3,
        sum(c.p3_calls_mth3) AS p3_calls_mth3,
        sum(c.p4_calls_mth3) AS p4_calls_mth3,
        sum(c.p1_calls_mth4) AS p1_calls_mth4,
        sum(c.p2_calls_mth4) AS p2_calls_mth4,
        sum(c.p3_calls_mth4) AS p3_calls_mth4,
        sum(c.p4_calls_mth4) AS p4_calls_mth4,
        sum(c.p1_calls_mth5) AS p1_calls_mth5,
        sum(c.p2_calls_mth5) AS p2_calls_mth5,
        sum(c.p3_calls_mth5) AS p3_calls_mth5,
        sum(c.p4_calls_mth5) AS p4_calls_mth5,
        sum(c.p1_calls_mth6) AS p1_calls_mth6,
        sum(c.p2_calls_mth6) AS p2_calls_mth6,
        sum(c.p3_calls_mth6) AS p3_calls_mth6,
        sum(c.p4_calls_mth6) AS p4_calls_mth6
 FROM ( SELECT c.product,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        d.product,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          d.product,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.product) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) month_lookup
 GROUP BY to_char(month_lookup.m01, 'yyyymm'::varchar(6)),
          c.product;

CREATE  VIEW outbound.zs_call_plan_semester_ts_qvar AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TS'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TS'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'QVAR'::varchar(4)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'QVAR'::varchar(4)) AND (cp.sales_force_id = 'TS'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TS'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TS'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'QVAR'::varchar(4)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'QVAR'::varchar(4)) AND (cp.sales_force_id = 'TS'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_ts_airduo AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TS'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TS'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AIRDUO'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AIRDUO'::varchar(6)) AND (cp.sales_force_id = 'TS'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TS'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TS'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AIRDUO'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AIRDUO'::varchar(6)) AND (cp.sales_force_id = 'TS'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_tr_qvar AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TR'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'QVAR'::varchar(4)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'QVAR'::varchar(4)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TR'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'QVAR'::varchar(4)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'QVAR'::varchar(4)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_tr_qnasl AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TR'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'QNASL'::varchar(5)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'QNASL'::varchar(5)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TR'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'QNASL'::varchar(5)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'QNASL'::varchar(5)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_ts_proair AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TR'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'PROAIR'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'PROAIR'::varchar(6)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TR'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'PROAIR'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'PROAIR'::varchar(6)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_tr_airduo AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TR'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AIRDUO'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AIRDUO'::varchar(6)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TR'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AIRDUO'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AIRDUO'::varchar(6)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_tp_amrix AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TP'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TP'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AMRIX'::varchar(5)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AMRIX'::varchar(5)) AND (cp.sales_force_id = 'TP'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TP'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TP'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AMRIX'::varchar(5)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AMRIX'::varchar(5)) AND (cp.sales_force_id = 'TP'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_tn_copaxone AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TN'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TN'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'COPAXONE'::varchar(8)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'COPAXONE'::varchar(8)) AND (cp.sales_force_id = 'TN'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TN'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TN'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'COPAXONE'::varchar(8)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'COPAXONE'::varchar(8)) AND (cp.sales_force_id = 'TN'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_tn_austedo AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TN'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TN'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AUSTEDO'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AUSTEDO'::varchar(7)) AND (cp.sales_force_id = 'TN'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TN'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TN'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AUSTEDO'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AUSTEDO'::varchar(7)) AND (cp.sales_force_id = 'TN'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zzz_zs_calls_oncology_trinsenox AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TO'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, d.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6
 FROM ((( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'TRISENOX'::varchar(8)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((d.VEEVA_ACCOUNT_ID = c.veeva_account_id) AND (d.territory_num = c.territory_num))));

CREATE  VIEW outbound.zzz_create_copay_voucher_redemption AS
 SELECT coalesce(c.physician_veeva_id, c.physician_ims_id) AS VEEVA_ACCOUNT_ID,
        c.physician_ims_id AS IMS_ID,
        c.redemption_type AS REDEMPTION_TYPE,
        to_char(c.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        to_char(c.date_written, 'YYYY-MM-DD'::varchar(10)) AS HCP_DATE_WRITTEN,
        CASE mod(c.days_supply, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.days_supply)::varchar ELSE rtrim((c.days_supply)::varchar, '0'::varchar(1)) END AS DAYS_SUPPLY,
        c.ndc_code AS NDC_CODE,
        c.basket_name AS BRAND_NAME,
        CASE mod(c.quantity, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.quantity)::int)::varchar ELSE rtrim((c.quantity)::varchar, '0'::varchar(1)) END AS QTY,
        CASE mod(c.refills, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.refills)::varchar ELSE rtrim((c.refills)::varchar, '0'::varchar(1)) END AS REFILLS,
        c.program_number AS PROGRAM_NUM,
        c.copay_card_number AS COPAY_VOUCHER_NUM,
        c.pharmacy_chain_number AS PHARMACY_CHAIN_NUM,
        c.pharmacy_chain AS PHARMACY_CHAIN,
        c.pharmacy_name AS PHARMACY_NAME,
        c.pharmacy_address AS PHARMACY_ADDRESS,
        c.pharmacy_address2 AS PHARMACY_ADDRESS2,
        c.pharmacy_city AS PHARMACY_CITY,
        c.pharmacy_state AS PHARMACY_STATE,
        c.pharmacy_zip AS PHARMACY_ZIP,
        CASE mod(c.pharmacy_npi_num, 1::float) WHEN NULLSEQUAL 0::float THEN c.pharmacy_npi_num ELSE rtrim(c.pharmacy_npi_num, '0'::varchar(1)) END AS PHARMACY_NPI_NUM,
        NULL AS CEPH_ID,
        NULL AS ME_NUM,
        c.principle_physician_dea AS PRINCIPLE_PHYS_DEA_NUM,
        CASE mod(c.physician_npi, 1::float) WHEN NULLSEQUAL 0::float THEN c.physician_npi ELSE rtrim(c.physician_npi, '0'::varchar(1)) END AS PRINCIPLE_PHYS_NPI_NUM,
        c.physician_name AS PHYSICIAN_NAME,
        c.physician_address1 AS PHYSICIAN_ADDRESS1,
        c.physician_address2 AS PHYSICIAN_ADDRESS2,
        c.physician_city AS PHYSICIAN_CITY,
        c.physician_state AS PHYSICIAN_STATE,
        c.physician_zip AS PHYSICIAN_ZIP,
        CASE mod(c.rebate_amount, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.rebate_amount)::int)::varchar ELSE rtrim((c.rebate_amount)::varchar, '0'::varchar(1)) END AS REBATE_AMOUNT,
        CASE mod(c.member_cash_expense, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.member_cash_expense)::int)::varchar ELSE rtrim((c.member_cash_expense)::varchar, '0'::varchar(1)) END AS MEMBER_CASH_EXPENSE,
        CASE mod(c.submitted_cost, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.submitted_cost)::int)::varchar ELSE rtrim((c.submitted_cost)::varchar, '0'::varchar(1)) END AS SUBMITTED_COST,
        CASE mod(c.pharmacy_fee, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.pharmacy_fee)::int)::varchar ELSE rtrim((c.pharmacy_fee)::varchar, '0'::varchar(1)) END AS PHARMACY_FEE,
        CASE mod(c.total_amount_due, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.total_amount_due)::int)::varchar ELSE rtrim((c.total_amount_due)::varchar, '0'::varchar(1)) END AS TOTAL_AMOUNT_DUE,
        CASE mod(c.calc_awp, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.calc_awp)::int)::varchar ELSE rtrim((c.calc_awp)::varchar, '0'::varchar(1)) END AS CALC_AWP,
        c.occ_payment_type AS OCC_PAYMENT_TYPE,
        CASE mod(c.new_refill, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.new_refill)::varchar ELSE rtrim((c.new_refill)::varchar, '0'::varchar(1)) END AS NEW_REFILL,
        NULL AS ADMIN_HCP_NAME,
        NULL AS ADMIN_HCP_NPI,
        NULL AS ADMIN_HCP_ADDRESS,
        NULL AS ADMIN_HCP_ADDRESS_2,
        NULL AS ADMIN_HCP_CITY,
        NULL AS ADMIN_HCP_STATE,
        NULL AS ADMIN_HCP_ZIP,
        NULL AS SOC_NAME,
        NULL AS SOC_ID,
        NULL AS SOC_NPI,
        NULL AS SOC_ADDRESS,
        NULL AS SOC_CITY,
        NULL AS SOC_STATE,
        NULL AS SOC_ZIP,
        NULL AS SOC_PHONE,
        NULL AS SOC_FAX,
        NULL AS PAYER_NAME,
        NULL AS CLAIM_TYPE,
        NULL AS CPT_CODE,
        c.other_coverage_code AS COVERAGE_CODE
 FROM datamart.copay c
 WHERE ((c.basket_name = ANY (ARRAY['PROAIR RESPICLICK'::varchar(17), 'QNASL'::varchar(5), 'QNASL CHILDREN'::varchar(14), 'ZECUITY'::varchar(7), 'AMRIX'::varchar(5), 'ADIPEX-P'::varchar(8), 'ADIPEX'::varchar(6), 'TEV-TROPIN'::varchar(10), 'AZILECT'::varchar(7), 'QUARTETTE'::varchar(9), 'CINQAIR'::varchar(7)])) AND (c.report_frequency = 'WEEK'::varchar(4)) AND (c.fill_date < trunc((statement_timestamp())::timestamp, 'DD'::varchar(2))) AND ((c.date_written < trunc((statement_timestamp())::timestamp, 'DD'::varchar(2))) OR (c.date_written IS NULL)) AND (months_between(trunc((statement_timestamp())::timestamp, 'MON'::varchar(3)), c.fill_date) <= 24::float)) UNION  SELECT coalesce(c.physician_veeva_id, c.physician_ims_id) AS VEEVA_ACCOUNT_ID,
        c.physician_ims_id AS IMS_ID,
        c.redemption_type AS REDEMPTION_TYPE,
        to_char(c.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        to_char(c.date_written, 'YYYY-MM-DD'::varchar(10)) AS HCP_DATE_WRITTEN,
        CASE mod(c.days_supply, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.days_supply)::varchar ELSE rtrim((c.days_supply)::varchar, '0'::varchar(1)) END AS DAYS_SUPPLY,
        c.ndc_code AS NDC_CODE,
        CASE WHEN (b.name = 'BDP NASAL MARKET TOTAL'::varchar(22)) THEN 'QNASL'::varchar(5) ELSE b.name END AS BRAND_NAME,
        CASE mod(c.quantity, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.quantity)::int)::varchar ELSE rtrim((c.quantity)::varchar, '0'::varchar(1)) END AS QTY,
        CASE mod(c.refills, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.refills)::varchar ELSE rtrim((c.refills)::varchar, '0'::varchar(1)) END AS REFILLS,
        c.program_number AS PROGRAM_NUM,
        c.copay_card_number AS COPAY_VOUCHER_NUM,
        c.pharmacy_chain_number AS PHARMACY_CHAIN_NUM,
        c.pharmacy_chain AS PHARMACY_CHAIN,
        c.pharmacy_name AS PHARMACY_NAME,
        c.pharmacy_address AS PHARMACY_ADDRESS,
        c.pharmacy_address2 AS PHARMACY_ADDRESS2,
        c.pharmacy_city AS PHARMACY_CITY,
        c.pharmacy_state AS PHARMACY_STATE,
        c.pharmacy_zip AS PHARMACY_ZIP,
        CASE mod(c.pharmacy_npi_num, 1::float) WHEN NULLSEQUAL 0::float THEN c.pharmacy_npi_num ELSE rtrim(c.pharmacy_npi_num, '0'::varchar(1)) END AS PHARMACY_NPI_NUM,
        NULL AS CEPH_ID,
        NULL AS ME_NUM,
        c.principle_physician_dea AS PRINCIPLE_PHYS_DEA_NUM,
        CASE mod(c.physician_npi, 1::float) WHEN NULLSEQUAL 0::float THEN c.physician_npi ELSE rtrim(c.physician_npi, '0'::varchar(1)) END AS PRINCIPLE_PHYS_NPI_NUM,
        c.physician_name AS PHYSICIAN_NAME,
        c.physician_address1 AS PHYSICIAN_ADDRESS1,
        c.physician_address2 AS PHYSICIAN_ADDRESS2,
        c.physician_city AS PHYSICIAN_CITY,
        c.physician_state AS PHYSICIAN_STATE,
        c.physician_zip AS PHYSICIAN_ZIP,
        CASE mod(c.rebate_amount, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.rebate_amount)::int)::varchar ELSE rtrim((c.rebate_amount)::varchar, '0'::varchar(1)) END AS REBATE_AMOUNT,
        CASE mod(c.member_cash_expense, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.member_cash_expense)::int)::varchar ELSE rtrim((c.member_cash_expense)::varchar, '0'::varchar(1)) END AS MEMBER_CASH_EXPENSE,
        CASE mod(c.submitted_cost, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.submitted_cost)::int)::varchar ELSE rtrim((c.submitted_cost)::varchar, '0'::varchar(1)) END AS SUBMITTED_COST,
        CASE mod(c.pharmacy_fee, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.pharmacy_fee)::int)::varchar ELSE rtrim((c.pharmacy_fee)::varchar, '0'::varchar(1)) END AS PHARMACY_FEE,
        CASE mod(c.total_amount_due, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.total_amount_due)::int)::varchar ELSE rtrim((c.total_amount_due)::varchar, '0'::varchar(1)) END AS TOTAL_AMOUNT_DUE,
        CASE mod(c.calc_awp, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.calc_awp)::int)::varchar ELSE rtrim((c.calc_awp)::varchar, '0'::varchar(1)) END AS CALC_AWP,
        c.occ_payment_type AS OCC_PAYMENT_TYPE,
        CASE mod(c.new_refill, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.new_refill)::varchar ELSE rtrim((c.new_refill)::varchar, '0'::varchar(1)) END AS NEW_REFILL,
        NULL AS ADMIN_HCP_NAME,
        NULL AS ADMIN_HCP_NPI,
        NULL AS ADMIN_HCP_ADDRESS,
        NULL AS ADMIN_HCP_ADDRESS_2,
        NULL AS ADMIN_HCP_CITY,
        NULL AS ADMIN_HCP_STATE,
        NULL AS ADMIN_HCP_ZIP,
        NULL AS SOC_NAME,
        NULL AS SOC_ID,
        NULL AS SOC_NPI,
        NULL AS SOC_ADDRESS,
        NULL AS SOC_CITY,
        NULL AS SOC_STATE,
        NULL AS SOC_ZIP,
        NULL AS SOC_PHONE,
        NULL AS SOC_FAX,
        NULL AS PAYER_NAME,
        NULL AS CLAIM_TYPE,
        NULL AS CPT_CODE,
        c.other_coverage_code
 FROM ((datamart.copay c LEFT  JOIN product.basket_item bi ON ((c.basket_id = bi.entity_id))) LEFT  JOIN product.basket b ON ((bi.basket_id = b.basket_id)))
 WHERE ((b.name = ANY (ARRAY['PROAIR RESPICLICK'::varchar(22), 'QNASL'::varchar(22), 'QNASL CHILDREN'::varchar(22), 'ZECUITY'::varchar(22), 'AMRIX'::varchar(22), 'ADIPEX-P'::varchar(22), 'TEV-TROPIN'::varchar(22), 'AZILECT'::varchar(22), 'QUARTETTE'::varchar(22), 'ADIPEX'::varchar(22), 'BDP NASAL MARKET TOTAL'::varchar(22), 'CINQAIR'::varchar(22), 'CINQAIR'::varchar(22)])) AND (c.report_frequency = 'WEEK'::varchar(4)) AND (c.fill_date < trunc((statement_timestamp())::timestamp, 'DD'::varchar(2))) AND ((c.date_written < trunc((statement_timestamp())::timestamp, 'DD'::varchar(2))) OR (c.date_written IS NULL)) AND (months_between(trunc((statement_timestamp())::timestamp, 'MON'::varchar(3)), c.fill_date) <= 24::float));

CREATE  VIEW outbound.zzz_samples_amrix AS
 SELECT dm.sales_force_id,
        dm.ptr_territory_num AS territory_num,
        dm.tvcmid,
        coalesce(sh.ims_id, xref.id_num) AS ims_id,
        sh.veeva_id,
        sh.ship_date,
        sh.teva_product_code AS product_code,
        sh.basket_name AS product,
        sh.ship_qty
 FROM ((( SELECT a.ims_id,
        a.veeva_id,
        a.ship_date,
        a.ship_qty,
        b.teva_product_code,
        b.name AS basket_name
 FROM (datamart.sample_shipment a JOIN product.basket b ON ((a.basket_id = b.basket_id)))
 WHERE ((b.teva_product_code ~~ 'A00%'::varchar(4)) AND (a.ship_date >= last_day(add_months((statement_timestamp())::timestamp, (-25)))) AND (a.ship_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))))) sh LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        tvcmid_xref.id_num,
        tvcmid_xref.id_type,
        tvcmid_xref.state,
        tvcmid_xref.file_id,
        tvcmid_xref.record_id
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'IMS_ID'::varchar(6))) xref ON ((sh.ims_id = xref.id_num))) LEFT  JOIN ( SELECT prescriber_combined_demographics.sales_force_id,
        prescriber_combined_demographics.ptr_territory_num,
        prescriber_combined_demographics.veeva_account_id,
        prescriber_combined_demographics.tvcmid
 FROM datamart.prescriber_combined_demographics
 WHERE ((prescriber_combined_demographics.sales_force_id = ANY (ARRAY['TP'::varchar(2), 'TC'::varchar(2)])) AND (prescriber_combined_demographics.veeva_account_id IS NOT NULL))) dm ON ((sh.veeva_id = dm.veeva_account_id)));

CREATE  VIEW outbound.zzz_access_monitor_calls_by_specialty_oncology AS
SELECT 'TEVA'::varchar(4) AS company, x.specialty_code, d.prim_specialty, count(DISTINCT c.tvcmid) AS number_of_physicians_6mth FROM (((SELECT sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE (sfa_demographics.ims_id IS NOT NULL) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.tvcmid FROM datamart.sfa_call c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01))) GROUP BY c.tvcmid) c ON ((d.tvcmid = c.tvcmid))) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) GROUP BY d.prim_specialty, x.specialty_code ORDER BY x.specialty_code;

CREATE  VIEW outbound.tn_physician_univ AS
 SELECT x.npi,
        x.dea_num,
        x.last_name,
        x.first_name,
        x.middle_name,
        x.address,
        x.city,
        x.state,
        x.zip
 FROM ( SELECT dc.npi,
        dc.dea_num,
        upper(dc.last_name) AS last_name,
        upper(dc.first_name) AS first_name,
        upper(dc.middle_name) AS middle_name,
        btrim(upper(((((coalesce(dc.ptr_address_1, ''::varchar) || ' '::varchar(1)) || coalesce(dc.ptr_address_2, ''::varchar)) || ' '::varchar(1)) || coalesce(dc.ptr_address_3, ''::varchar)))) AS address,
        upper(dc.ptr_city) AS city,
        dc.ptr_state AS state,
        dc.ptr_zip AS zip,
        row_number() OVER (PARTITION BY dc.sales_force_id, dc.npi ORDER BY dc.ptr_territory_num) AS rnk
 FROM datamart.prescriber_combined_demographics dc
 WHERE ((dc.ims_id IS NOT NULL) AND (dc.npi IS NOT NULL) AND (dc.sales_force_id = 'TN'::varchar(2)))) x
 WHERE (x.rnk = 1);

CREATE  VIEW outbound.zzz_rxnormalizationcontrol AS
 SELECT m.ims_client_number AS ClientNo,
        m.ims_report_number_cnt AS RxReportNo,
        sp_cnt.source_product_code AS ProductGroupNo,
        m.ims_report_number_qty AS CorrespondingUnitsReportNo,
        sp_cnt.source_product_name AS ProductGroupName,
        CASE WHEN (nf.divisor = (nf.divisor)::int) THEN ((nf.divisor)::int)::varchar ELSE rtrim((nf.divisor)::varchar, '0'::varchar(1)) END AS Divisor,
        CASE WHEN (nf.multiplier = (nf.multiplier)::int) THEN ((nf.multiplier)::int)::varchar ELSE rtrim((nf.multiplier)::varchar, '0'::varchar(1)) END AS Multiplier
 FROM ((product.normalization_factor nf JOIN product.source_product sp_cnt ON ((nf.entity_id = sp_cnt.entity_id))) JOIN reference.ims_report_cnt_qty_mapping m ON (((sp_cnt.source_client_num = m.ims_client_number) AND (sp_cnt.source_report_num = m.ims_report_number_cnt))))
 WHERE ((nf.source_id = 1) AND (m.report_frequency = 'SPLITWEEK'::varchar(9)) AND (m.ims_report_number_qty IS NOT NULL) AND (m.sent_from_iqvia_to_asi_flag = 'Y'::char(1)))
 ORDER BY m.ims_client_number,
          m.ims_report_number_cnt,
          sp_cnt.source_product_code;

CREATE  VIEW outbound.zzz_asi_rx_by_market_bdpnasal AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '16'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.mdm_hco AS
 SELECT NULL AS dsp_id,
        NULL AS dsp_hce_id,
        NULL AS dba_name,
        NULL AS business_name,
        NULL AS care_of_location,
        NULL AS sub_type,
        NULL AS owner_status,
        NULL AS profit_status,
        NULL AS cmi,
        NULL AS no_of_providers,
        NULL AS ttl_license_beds,
        NULL AS ttl_census_beds,
        NULL AS ttl_staffed_beds,
        NULL AS teaching_hosp,
        NULL AS commhosp,
        NULL AS formulary,
        NULL AS electronic_medical_record,
        NULL AS eprescribe,
        NULL AS payperform,
        NULL AS genfirst,
        NULL AS srep_access,
        NULL AS mpn,
        NULL AS mpn_order,
        NULL AS status_indicator,
        NULL AS deactivation_reason
 FROM v_catalog.dual
 LIMIT 0;

CREATE  VIEW outbound.mdm_relationship AS
 SELECT NULL AS dsp_id,
        NULL AS parent_dsp_id,
        NULL AS parent_dsp_hce_id,
        NULL AS child_dsp_id,
        NULL AS child_dsp_hce_id,
        NULL AS hierarchy_code,
        NULL AS relationship_type_code,
        NULL AS relationship_status_code,
        NULL::date AS relationship_effective_date,
        NULL::date AS relationship_end_date
 FROM v_catalog.dual
 LIMIT 0;

CREATE  VIEW outbound.mdm_alternate_name AS
 SELECT NULL AS dsp_id,
        NULL AS dsp_hce_id,
        NULL AS name_type,
        NULL AS name_value
 FROM v_catalog.dual
 LIMIT 0;

CREATE  VIEW outbound.mdm_specialty AS
 SELECT NULL AS dsp_id,
        NULL AS dsp_hce_id,
        NULL AS specialty_code,
        NULL AS specialty_rank_number,
        NULL AS specialty_status
 FROM v_catalog.dual
 LIMIT 0;

CREATE  VIEW outbound.mdm_alternate_identifier AS
 SELECT 'OPTMRX'::varchar(6) AS dsp_id,
        substr(replace((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100) AS dsp_hce_id,
        'NPI'::varchar(3) AS alternate_id_type,
        specialty_pharmacy_shipment.source_customer_id AS alternate_id_value,
        NULL AS state,
        NULL AS identifier_category,
        NULL AS status,
        NULL AS source_deactivation_reason_code
 FROM datamart.specialty_pharmacy_shipment
 WHERE ((specialty_pharmacy_shipment.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (specialty_pharmacy_shipment.customer_type = 'HCP'::varchar(3)))
 GROUP BY 'OPTMRX'::varchar(6),
          substr(replace((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100),
          'NPI'::varchar(3),
          specialty_pharmacy_shipment.source_customer_id,
          NULL UNION  SELECT A.dsp_id,
        substr(A.dsp_hce_id, 1, 100) AS dsp_hce_id,
        A.alternate_id_type,
        A.alternate_id_value,
        A.state,
        A.identifier_category,
        A.status,
        A.source_deactivation_reason_code
 FROM ( SELECT 'PT'::varchar(2) AS dsp_id,
        replace(((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name), ' '::varchar(1), ''::varchar) AS dsp_hce_id,
        'NPI'::varchar(3) AS alternate_id_type,
        prime_rx.prescriber_npi AS alternate_id_value,
        NULL AS state,
        NULL AS identifier_category,
        NULL AS status,
        NULL AS source_deactivation_reason_code
 FROM cleansed.prime_rx
 WHERE (prime_rx.prescriber_npi IS NOT NULL)
 GROUP BY 'PT'::varchar(2),
          replace(((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name), ' '::varchar(1), ''::varchar),
          'NPI'::varchar(3),
          prime_rx.prescriber_npi,
          NULL) A
 ORDER BY 1,
          2,
          3;

CREATE  VIEW outbound.mdm_address AS
 SELECT 'OPTMRX'::varchar(6) AS dsp_id,
        substr(replace((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100) AS dsp_hce_id,
        upper(substr(replace((((((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_address_line_1, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_city, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_state, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_zip, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100)) AS dsp_addr_id,
        NULL AS address_type,
        specialty_pharmacy_shipment.ship_to_address_line_1 AS address_line_1,
        specialty_pharmacy_shipment.ship_to_address_line_2 AS address_line_2,
        specialty_pharmacy_shipment.ship_to_city AS city,
        specialty_pharmacy_shipment.ship_to_state AS state,
        'USA'::varchar(3) AS country_code,
        specialty_pharmacy_shipment.ship_to_zip AS postal_code,
        NULL AS postal_extension_code,
        NULL AS address_status,
        NULL::date AS address_effective_date,
        NULL AS single_address_indicator
 FROM datamart.specialty_pharmacy_shipment
 WHERE ((specialty_pharmacy_shipment.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (specialty_pharmacy_shipment.customer_type = 'HCP'::varchar(3)))
 GROUP BY 'OPTMRX'::varchar(6),
          substr(replace((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100),
          upper(substr(replace((((((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_address_line_1, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_city, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_state, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_zip, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100)),
          NULL,
          specialty_pharmacy_shipment.ship_to_address_line_1,
          specialty_pharmacy_shipment.ship_to_address_line_2,
          specialty_pharmacy_shipment.ship_to_city,
          specialty_pharmacy_shipment.ship_to_state,
          'USA'::varchar(3),
          specialty_pharmacy_shipment.ship_to_zip,
          NULL::date UNION  SELECT A.dsp_id,
        substr(A.dsp_hce_id, 1, 100) AS dsp_hce_id,
        substr(A.dsp_addr_id, 1, 100) AS dsp_addr_id,
        A.address_type,
        A.address_line_1,
        A.address_line_2,
        A.city,
        A.state,
        A.country_code,
        A.postal_code,
        A.postal_extension_code,
        A.address_status,
        A.address_effective_date,
        A.single_address_indicator
 FROM ( SELECT 'PT'::varchar(2) AS dsp_id,
        replace(((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name), ' '::varchar(1), ''::varchar) AS dsp_hce_id,
        replace((((((((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name) || coalesce(prime_rx.md_addr1, ''::varchar)) || coalesce(prime_rx.md_addr2, ''::varchar)) || coalesce(prime_rx.md_city, ''::varchar)) || coalesce(prime_rx.md_state, ''::varchar)) || coalesce(prime_rx.md_zip, ''::varchar)), ' '::varchar(1), ''::varchar) AS dsp_addr_id,
        NULL AS address_type,
        prime_rx.md_addr1 AS address_line_1,
        prime_rx.md_addr2 AS address_line_2,
        prime_rx.md_city AS city,
        prime_rx.md_state AS state,
        'USA'::varchar(3) AS country_code,
        prime_rx.md_zip AS postal_code,
        NULL AS postal_extension_code,
        NULL AS address_status,
        NULL::date AS address_effective_date,
        NULL AS single_address_indicator
 FROM cleansed.prime_rx
 GROUP BY 'PT'::varchar(2),
          replace(((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name), ' '::varchar(1), ''::varchar),
          replace((((((((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name) || coalesce(prime_rx.md_addr1, ''::varchar)) || coalesce(prime_rx.md_addr2, ''::varchar)) || coalesce(prime_rx.md_city, ''::varchar)) || coalesce(prime_rx.md_state, ''::varchar)) || coalesce(prime_rx.md_zip, ''::varchar)), ' '::varchar(1), ''::varchar),
          NULL,
          prime_rx.md_addr1,
          prime_rx.md_addr2,
          prime_rx.md_city,
          prime_rx.md_state,
          'USA'::varchar(3),
          prime_rx.md_zip,
          NULL::date) A
 ORDER BY 1,
          2,
          3;

CREATE  VIEW outbound.sharepoint_roster_tn_tp AS
 SELECT sr.title,
        sr.territory
 FROM ( SELECT lower(r.username) AS title,
        r.territory_number AS territory
 FROM datamart.roster r
 WHERE ((r.username IS NOT NULL) AND (r.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)]))) UNION  SELECT lower(r.username) AS title,
        (r.employee_id || '_'::varchar(1)) AS territory
 FROM datamart.roster r
 WHERE ((r.username IS NOT NULL) AND (r.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])))) sr
 GROUP BY sr.title,
          sr.territory
 ORDER BY sr.title;

CREATE  VIEW outbound.zs_ajovy_activity_call_detail AS
 SELECT c.sales_force_id,
        c.call_id,
        c.veeva_account_id,
        c.ims_id,
        c.customer_type,
        c.call_type,
        c.rep_id,
        c.territory_number,
        c.zip_on_call,
        c.call_date,
        c.submit_date,
        c.attendees,
        c.attendee_type,
        c.tvcmid,
        cd.product,
        cd.basket_id,
        cd.basket_name,
        cd.detail_position
 FROM (datamart.sfa_call c JOIN datamart.sfa_call_detail cd ON ((c.call_id = cd.call_id)))
 WHERE (cd.basket_name ~~ 'AJOVY%'::varchar(6))
 ORDER BY c.call_date;

CREATE  VIEW outbound.zs_xpd_demographics AS
SELECT xpd_demographics.ims_client_number, xpd_demographics.ims_report_number, xpd_demographics.ims_id, xpd_demographics.tvcmid, xpd_demographics.last_name, xpd_demographics.first_name, xpd_demographics.middle_name, xpd_demographics.address_1, xpd_demographics.address_2, xpd_demographics.city, xpd_demographics.state, xpd_demographics.zip, xpd_demographics.specialty, xpd_demographics.specialty_description, xpd_demographics.trx_decile_retail, xpd_demographics.nrx_decile_retail, xpd_demographics.nbrx_decile_retail, xpd_demographics.trx_decile_mail, xpd_demographics.nrx_decile_mail, xpd_demographics.nbrx_decile_mail, xpd_demographics.market_prescriber_reliability_retail, xpd_demographics.market_prescriber_reliability_mail FROM datamart.xpd_demographics;

CREATE  VIEW outbound.zs_xpd_core_metrics AS
SELECT xpd_core_metrics.ims_client_number, xpd_core_metrics.ims_report_number, xpd_core_metrics.channel_indicator, xpd_core_metrics.ims_id, xpd_core_metrics.tvcmid, xpd_core_metrics.specialty, xpd_core_metrics.ims_product_group, xpd_core_metrics.basket_id, xpd_core_metrics.basket_name, xpd_core_metrics.rollup_month, xpd_core_metrics.xpo_nrx, xpd_core_metrics.xpo_trx, xpd_core_metrics.unknown_nrx, xpd_core_metrics.unknown_trx, xpd_core_metrics.new_therapy_starts, xpd_core_metrics.continued_new, xpd_core_metrics.switch_to, xpd_core_metrics.add_on, xpd_core_metrics.restart_same_new, xpd_core_metrics.restart_different, xpd_core_metrics.continued_refill, xpd_core_metrics.restart_same_refill, xpd_core_metrics.switch_from, xpd_core_metrics.restart_different_from, xpd_core_metrics.add_to, xpd_core_metrics.market_new_to_brand_rx, xpd_core_metrics.dynamic_capture_rx FROM datamart.xpd_core_metrics;

CREATE  VIEW outbound.vendormate_roster AS
 SELECT roster.sales_force_id,
        roster.employee_id,
        roster.username,
        roster.territory_number,
        roster.territory_name,
        roster.first_name,
        roster.middle_name,
        roster.last_name,
        roster.hr_status,
        roster.email,
        roster.business_address_line1,
        roster.business_address_line2,
        roster.business_address_line3,
        roster.business_city,
        roster.business_state,
        roster.business_zip,
        roster.shipping_address_line1,
        roster.shipping_address_line2,
        roster.shipping_address_line3,
        roster.shipping_city,
        roster.shipping_state,
        roster.shipping_zip,
        roster.mobile_phone,
        roster.business_phone,
        roster.home_phone,
        roster.voice_mail_extension,
        roster.hire_date,
        roster.birth_month_day
 FROM datamart.roster
 WHERE ((roster.sales_force_id = ANY (ARRAY['MA'::varchar(2), 'TE'::varchar(2), 'TM'::varchar(2), 'TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)])) AND (roster.last_name <> 'Vacant'::varchar(6)))
 ORDER BY roster.sales_force_id,
          roster.hire_date DESC;

CREATE  VIEW outbound.valuecentricrxdataextract AS
 SELECT '4416451422'::varchar(10) AS CUSTOMERID,
        a.basket_name AS BRAND_NAME,
        CASE WHEN (a.basket_name = 'COPAXONE 20MG'::varchar(13)) THEN '68546031730'::varchar(11) WHEN (a.basket_name = 'COPAXONE 40MG'::varchar(13)) THEN '68546032512'::varchar(11) WHEN (a.basket_name = 'PROAIR HFA'::varchar(10)) THEN '59310057920'::varchar(11) WHEN (a.basket_name = 'PROAIR HFA COUNTER'::varchar(18)) THEN '59310057922'::varchar(11) WHEN (a.basket_name = 'PROAIR RESPICLICK'::varchar(17)) THEN '59310058020'::varchar(11) WHEN (a.basket_name = 'QNASL 40'::varchar(8)) THEN '59310020606'::varchar(11) WHEN (a.basket_name = 'QNASL 80'::varchar(8)) THEN '59310021012'::varchar(11) WHEN (a.basket_name = 'QVAR 40MCG'::varchar(10)) THEN '59310020212'::varchar(11) WHEN (a.basket_name = 'QVAR 80MCG'::varchar(10)) THEN '59310020412'::varchar(11) ELSE NULL END AS NDCUPC,
        a.ptr_zip AS ZIP,
        to_char(a.rollup_month, 'MM/DD/YYYY'::varchar(10)) AS PERIOD_END_DATE,
        sum(a.trx_count) AS TRX_CNT,
        sum(a.trx_quantity) AS TRX_QTY
 FROM ( SELECT rx.ims_id,
        rx.rollup_month,
        rx.basket_name,
        rx.trx_count,
        rx.trx_quantity,
        pcd.ptr_zip
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT prescriber_combined_demographics.ims_id,
        min(prescriber_combined_demographics.ptr_zip) AS ptr_zip
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TN'::varchar(2))
 GROUP BY prescriber_combined_demographics.ims_id) pcd ON ((pcd.ims_id = rx.ims_id))) JOIN outbound.month_rollup_and_bucket mth ON ((rx.rollup_month = mth.month_ending)))
 WHERE ((rx.sales_category = '01'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)) AND (rx.basket_type = 'product'::varchar(7)) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 12) AND (rx.basket_name = ANY (ARRAY['COPAXONE 20MG'::varchar(13), 'COPAXONE 40MG'::varchar(13)]))) UNION ALL  SELECT rx.ims_id,
        rx.rollup_month,
        rx.basket_name,
        rx.trx_count,
        0 AS trx_quantity,
        pcd.ptr_zip
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT prescriber_combined_demographics.ims_id,
        min(prescriber_combined_demographics.ptr_zip) AS ptr_zip
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TR'::varchar(2))
 GROUP BY prescriber_combined_demographics.ims_id) pcd ON ((pcd.ims_id = rx.ims_id))) JOIN outbound.month_rollup_and_bucket mth ON ((rx.rollup_month = mth.month_ending)))
 WHERE ((rx.sales_category = '01'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)) AND (rx.basket_type = 'product'::varchar(7)) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 12) AND (rx.basket_name = ANY (ARRAY['PROAIR HFA'::varchar(18), 'PROAIR HFA COUNTER'::varchar(18), 'PROAIR RESPICLICK'::varchar(18), 'QNASL 40'::varchar(18), 'QNASL 80'::varchar(18), 'QVAR 40MCG'::varchar(18), 'QVAR 80MCG'::varchar(18)])))) a
 GROUP BY a.basket_name,
          a.ptr_zip,
          a.rollup_month
 ORDER BY a.basket_name,
          a.ptr_zip,
          a.rollup_month;

CREATE  VIEW outbound.bullseye_prescriber_rx AS
 SELECT rx.tvcmid,
        rx.ims_id,
        CASE WHEN (rx.basket_name ~~ 'ARMONAIR RESPICLICK%'::varchar(20)) THEN 'ARMONAIR RESPICLICK'::varchar(19) WHEN (rx.basket_name ~~ 'ASMANEX%'::varchar(8)) THEN 'ASMANEX'::varchar(7) WHEN (rx.basket_name ~~ 'FLOVENT DISK%'::varchar(13)) THEN 'FLOVENT DISK'::varchar(12) WHEN (rx.basket_name ~~ 'FLOVENT MDI%'::varchar(12)) THEN 'FLOVENT MDI'::varchar(11) ELSE rx.basket_name END AS product,
        rx.rollup_month AS month_ending,
        rx.payment_method,
        sum(rx.nrx_count) AS nrx_cnt,
        sum(rx.trx_count) AS trx_cnt
 FROM datamart.prescriber_rx rx
 WHERE ((rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (rx.report_frequency = 'MONTH'::varchar(5)) AND (rx.ims_id >= '0000002'::varchar(7)) AND (rx.ims_id <= '8999999'::varchar(7)) AND ((rx.basket_name = rx.market_name) OR (rx.rollup_flag IS NULL)) AND (rx.rollup_month = rx.data_date))
 GROUP BY rx.tvcmid,
          rx.ims_id,
          CASE WHEN (rx.basket_name ~~ 'ARMONAIR RESPICLICK%'::varchar(20)) THEN 'ARMONAIR RESPICLICK'::varchar(19) WHEN (rx.basket_name ~~ 'ASMANEX%'::varchar(8)) THEN 'ASMANEX'::varchar(7) WHEN (rx.basket_name ~~ 'FLOVENT DISK%'::varchar(13)) THEN 'FLOVENT DISK'::varchar(12) WHEN (rx.basket_name ~~ 'FLOVENT MDI%'::varchar(12)) THEN 'FLOVENT MDI'::varchar(11) ELSE rx.basket_name END,
          rx.rollup_month,
          rx.payment_method
 ORDER BY rx.tvcmid,
          rx.ims_id,
          CASE WHEN (rx.basket_name ~~ 'ARMONAIR RESPICLICK%'::varchar(20)) THEN 'ARMONAIR RESPICLICK'::varchar(19) WHEN (rx.basket_name ~~ 'ASMANEX%'::varchar(8)) THEN 'ASMANEX'::varchar(7) WHEN (rx.basket_name ~~ 'FLOVENT DISK%'::varchar(13)) THEN 'FLOVENT DISK'::varchar(12) WHEN (rx.basket_name ~~ 'FLOVENT MDI%'::varchar(12)) THEN 'FLOVENT MDI'::varchar(11) ELSE rx.basket_name END,
          rx.rollup_month,
          rx.payment_method;

CREATE  VIEW outbound.zs_austedo_activity_sample_shipment AS
 SELECT sample_shipment.veeva_id,
        sample_shipment.tvcmid,
        sample_shipment.ims_id,
        sample_shipment.first_name,
        sample_shipment.middle_name,
        sample_shipment.last_name,
        sample_shipment.designation,
        sample_shipment.state_license_number,
        sample_shipment.address_line_1,
        sample_shipment.address_line_2,
        sample_shipment.address_line_3,
        sample_shipment.city,
        sample_shipment.state,
        sample_shipment.zip,
        sample_shipment.dea_license_number,
        sample_shipment.order_id,
        sample_shipment.ndc,
        sample_shipment.basket_id,
        sample_shipment.basket_name,
        sample_shipment.order_job_code,
        sample_shipment.order_job_description,
        sample_shipment.ship_qty,
        sample_shipment.ship_date
 FROM datamart.sample_shipment
 WHERE ((sample_shipment.basket_name ~~ 'AUSTEDO%'::varchar(8)) AND (sample_shipment.ship_date >= '2018-01-01'::date) AND (sample_shipment.ship_date < trunc(now(), 'MONTH'::varchar(5))))
 ORDER BY sample_shipment.ship_date;

CREATE  VIEW outbound.zs_austedo_activity_ahm_participant AS
 SELECT p.sourcesystemid,
        p.batchid,
        p.batchdate,
        p.transactionstatuscode,
        p.interactionid,
        p.interactioncode,
        p.participantid,
        (p.clientcustomerid)::!int AS clientcustomerid,
        p.participanttype,
        p.firstname,
        p.middlename,
        p.lastname,
        p.suffix,
        p.professionaldesignation,
        p.primaryspecialty,
        p.organizationname,
        p.npinumber,
        p.addressid,
        p.clientaddressid,
        p.addressline1,
        p.addressline2,
        p.addressline3,
        p.addresscity,
        p.addressstateprovince,
        p.addresspostalcode,
        p.addresspostalcodeextension,
        p.addresscountry,
        p.region,
        p.primarystatelicensestate,
        p.primarystatelicensenumber,
        p.attended,
        p.mealconsumed,
        p.contractid,
        p.clientcontractid,
        p.contractname,
        p.contractcategory,
        p.contractsubcategory,
        p.contractclassification,
        p.contracttier,
        p.contracteffectivedate,
        p.contractexpirationdate,
        p.contracttotalvalue
 FROM (datamart.ahm_interactions i JOIN datamart.ahm_participant p ON ((i.interactionid = p.interactionid)))
 WHERE ((i.interactionstartdate >= '2018-01-01'::date) AND (('AUSTEDO'::varchar(7) = i.product1name) OR ('AUSTEDO'::varchar(7) = i.product2name) OR ('AUSTEDO'::varchar(7) = i.product3name)) AND ((p.clientcustomerid)::!int IS NOT NULL));

CREATE  VIEW outbound.zs_austedo_activity_ahm_interactions AS
 SELECT i.sourcesystemid,
        i.batchid,
        i.batchdate,
        i.transactionstatuscode,
        i.interactionid,
        i.interactioncode,
        i.interactionname,
        i.interactioncategory,
        i.interactiontype,
        i.locationtype,
        i.interactionstatus,
        i.interactionstartdate,
        i.interactionenddate,
        i.interactionstarttime,
        i.interactionendtime,
        i.interactiontimezone,
        i.interactionstartdatetime,
        i.interactionenddatetime,
        i.requestingregion,
        i.parentinteractionid,
        i.parentinteractioncode,
        i.employeeid,
        i.clientemployeeid,
        i.employeefirstname,
        i.employeelastname,
        i.employeeorganizationunitid,
        i.employeeorganizationunitcode,
        i.employeeorganizationunitname,
        i.venueid,
        i.clientvenueid,
        i.venuename,
        i.venueaddressline1,
        i.venueaddressline2,
        i.venueaddressline3,
        i.venuecity,
        i.venuestateprovince,
        i.venuepostalcode,
        i.venuecountry,
        i.venueregion,
        i.totalestimatedparticipantcount,
        i.financialcloseddate,
        i.product1name,
        i.product1id,
        i.product1clientid,
        i.topic1name,
        i.topic1id,
        i.topic1clientid,
        i.product2name,
        i.product2id,
        i.product2clientid,
        i.topic2name,
        i.topic2id,
        i.topic2clientid,
        i.product3name,
        i.product3id,
        i.product3clientid,
        i.topic3name,
        i.topic3id,
        i.topic3clientid,
        i.product4name,
        i.product4id,
        i.product4clientid,
        i.topic4name,
        i.topic4id,
        i.topic4clientid,
        i.product5name,
        i.product5id,
        i.product5clientid,
        i.topic5name,
        i.topic5id,
        i.topic5clientid
 FROM datamart.ahm_interactions i
 WHERE ((i.interactionstartdate >= '2018-01-01'::date) AND (('AUSTEDO'::varchar(7) = i.product1name) OR ('AUSTEDO'::varchar(7) = i.product2name) OR ('AUSTEDO'::varchar(7) = i.product3name)));

CREATE  VIEW outbound.zs_austedo_activity_copay AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.nabp,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.occ_payment_type,
        copay.auth_refills,
        copay.claim_type,
        copay.administration_flag,
        copay.payer_name,
        copay.trans_type,
        copay.previous_payer_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.source_name
 FROM datamart.copay
 WHERE ((copay.basket_name ~~ 'AUSTEDO%'::varchar(8)) AND (copay.fill_date >= '2018-01-01'::date) AND (copay.fill_date < trunc(now(), 'MONTH'::varchar(5))))
 ORDER BY copay.fill_date;

CREATE  VIEW outbound.millennium_roster AS
 SELECT r1.territory_number AS TERRITORY_NUM,
        r1.last_name AS LAST_NAME,
        r1.first_name AS FIRST_NAME,
        r1.shipping_address_line1 AS SHIP_ADDRESS_LINE1,
        r1.shipping_address_line2 AS SHIP_ADDRESS_LINE2,
        r1.shipping_city AS SHIP_CITY,
        r1.shipping_state AS SHIP_STATE,
        r1.shipping_zip AS SHIP_ZIP,
        coalesce(r1.business_phone, r1.mobile_phone, r1.home_phone) AS PHONE,
        r1.email AS EMAIL,
        CASE WHEN (r1.rep_type = 'REP'::varchar(3)) THEN r2.parent_territory_number WHEN (r1.rep_type = 'MGR'::varchar(3)) THEN r1.parent_territory_number WHEN (r1.rep_type = 'DIR'::varchar(3)) THEN r1.territory_number ELSE NULL END AS DISTRICT,
        CASE WHEN (r1.rep_type = 'REP'::varchar(3)) THEN r1.parent_territory_number WHEN (r1.rep_type = 'MGR'::varchar(3)) THEN r1.territory_number ELSE NULL END AS REGION
 FROM (datamart.roster r1 JOIN datamart.roster r2 ON ((r1.parent_territory_number = r2.territory_number)))
 WHERE ((r1.sales_force_id = ANY (ARRAY['TO'::varchar(2), 'TP'::varchar(2), 'TN'::varchar(2)])) AND (r1.last_name <> 'Vacant'::varchar(6)) AND (r1.rep_type = ANY (ARRAY['REP'::varchar(3), 'MGR'::varchar(3), 'DIR'::varchar(3)])))
 ORDER BY r1.last_name;

CREATE  VIEW outbound.activity_line_item_centris_speaker_event AS
 SELECT concat(((concat((e.interactionname || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)) || ea.attended), (e.interactionstartdate)::varchar) AS activity,
        to_char(e.interactionstartdate, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat((((e.interactionname || ':'::varchar(1)) || coalesce(e.topic1name, ''::varchar)) || ','::varchar(1)), (e.interactionstartdate)::varchar) AS trackback_id,
        NULL AS previous_line_item,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN cmid.id_num ELSE (b.basket_id)::varchar END AS level_master_id,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN 'Speaker'::varchar(7) ELSE 'Topics'::varchar(6) END AS type,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN 'Speaker'::varchar(7) ELSE 'Topics'::varchar(6) END AS native_type,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN ea.participant_name ELSE e.topic1name END AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((( SELECT dm.feed_id,
        dm.feed_version,
        ints.interactioncode,
        ints.interactionname,
        ints.interactionstartdate,
        ints.product1id,
        ints.product1name,
        ints.topic1name,
        max(ints.file_id) AS file_id
 FROM (datamart.ahm_interactions ints JOIN metadata.data_file_metadata dm ON ((dm.file_id = ints.file_id)))
 WHERE (ints.interactionstartdate >= add_months((now())::date, (-6)))
 GROUP BY dm.feed_id,
          dm.feed_version,
          ints.interactioncode,
          ints.interactionname,
          ints.interactionstartdate,
          ints.product1id,
          ints.product1name,
          ints.topic1name) e LEFT  JOIN ( SELECT ahm_participant.sourcesystemid,
        ahm_participant.interactioncode,
        ahm_participant.attended,
        ahm_participant.clientcustomerid,
        ahm_participant.participanttype,
        ((ahm_participant.firstname || ' '::varchar(1)) || ahm_participant.lastname) AS participant_name,
        ahm_participant.file_id
 FROM datamart.ahm_participant
 GROUP BY ahm_participant.sourcesystemid,
          ahm_participant.interactioncode,
          ahm_participant.attended,
          ahm_participant.clientcustomerid,
          ahm_participant.participanttype,
          ((ahm_participant.firstname || ' '::varchar(1)) || ahm_participant.lastname),
          ahm_participant.file_id) ea ON ((ea.interactioncode = e.interactioncode))) JOIN datamart.tvcmid_xref cmid ON (((ea.clientcustomerid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6)) AND (regexp_count(ea.clientcustomerid, '^[0-9.-]+$'::varchar(10), 1, ''::varchar) = 1)))) LEFT  JOIN product.source_product sp ON (((upper(e.product1id) = upper(sp.source_product_code)) AND (e.feed_id = sp.feed_id) AND (e.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE (ea.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_PARTICIPANT'::varchar(19)))), 0)) EXCEPT  SELECT concat(((concat((e.interactionname || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)) || ea.attended), (e.interactionstartdate)::varchar) AS activity,
        to_char(e.interactionstartdate, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat((((e.interactionname || ':'::varchar(1)) || coalesce(e.topic1name, ''::varchar)) || ','::varchar(1)), (e.interactionstartdate)::varchar) AS trackback_id,
        NULL AS previous_line_item,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN cmid.id_num ELSE (b.basket_id)::varchar END AS level_master_id,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN 'Speaker'::varchar(7) ELSE 'Topics'::varchar(6) END AS type,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN 'Speaker'::varchar(7) ELSE 'Topics'::varchar(6) END AS native_type,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN ea.participant_name ELSE e.topic1name END AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((( SELECT dm.feed_id,
        dm.feed_version,
        ints.interactioncode,
        ints.interactionname,
        ints.interactionstartdate,
        ints.product1id,
        ints.product1name,
        ints.topic1name,
        max(ints.file_id) AS file_id
 FROM (datamart.ahm_interactions ints JOIN metadata.data_file_metadata dm ON ((dm.file_id = ints.file_id)))
 WHERE (ints.interactionstartdate >= add_months((now())::date, (-6)))
 GROUP BY dm.feed_id,
          dm.feed_version,
          ints.interactioncode,
          ints.interactionname,
          ints.interactionstartdate,
          ints.product1id,
          ints.product1name,
          ints.topic1name) e LEFT  JOIN ( SELECT ahm_participant.sourcesystemid,
        ahm_participant.interactioncode,
        ahm_participant.attended,
        ahm_participant.clientcustomerid,
        ahm_participant.participanttype,
        ((ahm_participant.firstname || ' '::varchar(1)) || ahm_participant.lastname) AS participant_name,
        ahm_participant.file_id
 FROM datamart.ahm_participant
 GROUP BY ahm_participant.sourcesystemid,
          ahm_participant.interactioncode,
          ahm_participant.attended,
          ahm_participant.clientcustomerid,
          ahm_participant.participanttype,
          ((ahm_participant.firstname || ' '::varchar(1)) || ahm_participant.lastname),
          ahm_participant.file_id) ea ON ((ea.interactioncode = e.interactioncode))) JOIN datamart.tvcmid_xref cmid ON (((ea.clientcustomerid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6)) AND (regexp_count(ea.clientcustomerid, '^[0-9.-]+$'::varchar(10), 1, ''::varchar) = 1)))) LEFT  JOIN product.source_product sp ON (((upper(e.product1id) = upper(sp.source_product_code)) AND (e.feed_id = sp.feed_id) AND (e.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE (ea.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_PARTICIPANT'::varchar(19)))), 0));

CREATE  VIEW outbound.zs_xpd_core_metrics_antimigraine_monthly AS
 SELECT xpd_core_metrics_antimigraine.ims_client_number,
        xpd_core_metrics_antimigraine.ims_report_number,
        xpd_core_metrics_antimigraine.channel_indicator,
        xpd_core_metrics_antimigraine.ims_id,
        xpd_core_metrics_antimigraine.tvcmid,
        xpd_core_metrics_antimigraine.specialty,
        xpd_core_metrics_antimigraine.ims_product_group,
        xpd_core_metrics_antimigraine.basket_id,
        xpd_core_metrics_antimigraine.basket_name,
        xpd_core_metrics_antimigraine.rollup_period,
        xpd_core_metrics_antimigraine.xpo_nrx,
        xpd_core_metrics_antimigraine.xpo_trx,
        xpd_core_metrics_antimigraine.unknown_nrx,
        xpd_core_metrics_antimigraine.unknown_trx,
        xpd_core_metrics_antimigraine.new_therapy_starts,
        xpd_core_metrics_antimigraine.continued_new,
        xpd_core_metrics_antimigraine.switch_to,
        xpd_core_metrics_antimigraine.add_on,
        xpd_core_metrics_antimigraine.restart_same_new,
        xpd_core_metrics_antimigraine.restart_different,
        xpd_core_metrics_antimigraine.continued_refill,
        xpd_core_metrics_antimigraine.restart_same_refill,
        xpd_core_metrics_antimigraine.switch_from,
        xpd_core_metrics_antimigraine.restart_different_from,
        xpd_core_metrics_antimigraine.add_to,
        xpd_core_metrics_antimigraine.market_new_to_brand_rx,
        xpd_core_metrics_antimigraine.dynamic_capture_rx,
        xpd_core_metrics_antimigraine.report_frequency
 FROM datamart.xpd_core_metrics_antimigraine
 WHERE (xpd_core_metrics_antimigraine.report_frequency = 'MONTH'::varchar(5));

CREATE  VIEW outbound.zs_qvar_week52_rx AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.rollup_week,
        prescriber_rx.sales_category,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        sum(prescriber_rx.nrx_count) AS nrx_count,
        sum(prescriber_rx.trx_count) AS trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (prescriber_rx.cnt_file_id = ANY (ARRAY[152703, 152704, 152705])))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.rollup_week,
          prescriber_rx.sales_category,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method;

CREATE  VIEW outbound.zs_to_ims_zip_xref AS
 SELECT CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END AS ims_id,
        prescriber_combined_demographics.ptr_zip AS zip
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TO'::varchar(2))
 GROUP BY CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END,
          prescriber_combined_demographics.ptr_zip
 ORDER BY CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END,
          prescriber_combined_demographics.ptr_zip;

CREATE  VIEW outbound.zs_to_zip_terr_xref AS
 SELECT aa.territory_number AS territory,
        aa.zip_code AS zip
 FROM datamart.alternate_alignments aa
 WHERE ((aa.sales_force_id = 'TO'::varchar(2)) AND (aa.file_id IN ( SELECT max(daa.file_id) AS max
 FROM datamart.alternate_alignments daa
 WHERE (daa.sales_force_id = 'TO'::varchar(2)))))
 ORDER BY aa.territory_number,
          aa.zip_code;

CREATE  VIEW outbound.iqvia_antimigraine_acute_weekly AS
 SELECT prescriber_rx.tvcmid,
        prescriber_rx.ims_id,
        product_basket.parent_basket_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.report_frequency,
        prescriber_rx.ims_product_group,
        prescriber_rx.date,
        prescriber_rx.sales_category,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payer_name,
        prescriber_rx.plan_name,
        prescriber_rx.pbm_name,
        prescriber_rx.model,
        prescriber_rx.payment_method,
        prescriber_rx.ims_specialty,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.ims_report_number_cnt,
        prescriber_rx.cnt_file_id,
        prescriber_rx.cnt_record_id,
        prescriber_rx.ims_report_number_qty,
        prescriber_rx.qty_file_id,
        prescriber_rx.qty_record_id,
        prescriber_rx.rollup_flag,
        prescriber_rx.indication,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.data_date
 FROM (datamart.product_basket product_basket JOIN datamart.prescriber_rx prescriber_rx ON ((product_basket.child_basket_name = prescriber_rx.basket_name)))
 WHERE ((product_basket.parent_basket_name = 'ANTI-CGRP'::varchar(9)) AND (prescriber_rx.basket_type = 'product'::varchar(7)) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.qty_file_id IN ( SELECT max(prescriber_rx.qty_file_id) AS max
 FROM datamart.prescriber_rx
 WHERE (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))) AND (prescriber_rx.cnt_file_id IN ( SELECT max(prescriber_rx.cnt_file_id) AS max
 FROM datamart.prescriber_rx
 WHERE (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))))
 GROUP BY prescriber_rx.tvcmid,
          prescriber_rx.ims_id,
          product_basket.parent_basket_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.report_frequency,
          prescriber_rx.ims_product_group,
          prescriber_rx.date,
          prescriber_rx.sales_category,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payer_name,
          prescriber_rx.plan_name,
          prescriber_rx.pbm_name,
          prescriber_rx.model,
          prescriber_rx.payment_method,
          prescriber_rx.ims_specialty,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.ims_report_number_cnt,
          prescriber_rx.cnt_file_id,
          prescriber_rx.cnt_record_id,
          prescriber_rx.ims_report_number_qty,
          prescriber_rx.qty_file_id,
          prescriber_rx.qty_record_id,
          prescriber_rx.rollup_flag,
          prescriber_rx.indication,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.data_date;

CREATE  VIEW outbound.CobbsCreek_austedo_copay_Weekly AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.pharmacy_chain_number,
        copay.nabp,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.create_date,
        copay.occ_payment_type,
        copay.counted_copay,
        copay.auth_refills,
        copay.admin_hcp_npi,
        copay.admin_hcp_name,
        copay.admin_hcp_address,
        copay.admin_hcp_address2,
        copay.admin_hcp_city,
        copay.admin_hcp_state,
        copay.admin_hcp_zip,
        copay.claim_type,
        copay.administration_flag,
        copay.soc_name,
        copay.soc_phone,
        copay.soc_fax,
        copay.soc_address,
        copay.soc_city,
        copay.soc_state,
        copay.soc_zip,
        copay.soc_id,
        copay.soc_npi,
        copay.payer_name,
        copay.cpt_code,
        copay.trans_type,
        copay.previous_payer_id,
        copay.member_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.report_frequency,
        copay.source_name,
        copay.patient_type,
        copay.primary_bin,
        copay.primary_bin_description,
        copay.reject_code
 FROM datamart.copay copay
 WHERE (copay.basket_name ~~ 'AUSTEDO%'::varchar(8))
 GROUP BY copay.redemption_type,
          copay.physician_tvcmid,
          copay.pharmacy_tvcmid,
          copay.basket_id,
          copay.basket_name,
          copay.asi_txn_id,
          copay.orig_asi_txn_id,
          copay.rx_num,
          copay.fill_date,
          copay.date_written,
          copay.days_supply,
          copay.ndc_code,
          copay.daw,
          copay.new_refill,
          copay.quantity,
          copay.refills,
          copay.other_coverage_code,
          copay.program_number,
          copay.copay_card_number,
          copay.sex,
          copay.age_at_redemption,
          copay.pharmacy_process_date,
          copay.pharmacy_chain_number,
          copay.nabp,
          copay.pharmacy_chain,
          copay.pharmacy_name,
          copay.pharmacy_address,
          copay.pharmacy_address2,
          copay.pharmacy_city,
          copay.pharmacy_state,
          copay.pharmacy_zip,
          copay.pharmacy_phone,
          copay.pharmacy_npi_num,
          copay.principle_physician_dea,
          copay.physician_npi,
          copay.physician_ims_id,
          copay.physician_veeva_id,
          copay.physician_name,
          copay.physician_address1,
          copay.physician_address2,
          copay.physician_city,
          copay.physician_state,
          copay.physician_zip,
          copay.rebate_amount,
          copay.member_cash_expense,
          copay.submitted_cost,
          copay.pharmacy_fee,
          copay.total_amount_due,
          copay.calc_awp,
          copay.create_date,
          copay.occ_payment_type,
          copay.counted_copay,
          copay.auth_refills,
          copay.admin_hcp_npi,
          copay.admin_hcp_name,
          copay.admin_hcp_address,
          copay.admin_hcp_address2,
          copay.admin_hcp_city,
          copay.admin_hcp_state,
          copay.admin_hcp_zip,
          copay.claim_type,
          copay.administration_flag,
          copay.soc_name,
          copay.soc_phone,
          copay.soc_fax,
          copay.soc_address,
          copay.soc_city,
          copay.soc_state,
          copay.soc_zip,
          copay.soc_id,
          copay.soc_npi,
          copay.payer_name,
          copay.cpt_code,
          copay.trans_type,
          copay.previous_payer_id,
          copay.member_id,
          copay.benefit_amount,
          copay.patient_expense,
          copay.submission_method,
          copay.report_frequency,
          copay.source_name,
          copay.patient_type,
          copay.primary_bin,
          copay.primary_bin_description,
          copay.reject_code
 ORDER BY copay.physician_tvcmid;

CREATE  VIEW outbound.CobbsCreek_Austedo_cmop_rx_monthly AS
 SELECT cmop_rx.data_month,
        cmop_rx.comp_month,
        cmop_rx.pharmacy,
        cmop_rx.visn,
        cmop_rx.station_number,
        cmop_rx.station,
        cmop_rx.va_product,
        cmop_rx.basket_id,
        cmop_rx.basket_name,
        cmop_rx.cmop_rxs_raw,
        cmop_rx.cmop_rxs_normalized,
        cmop_rx.total_quantity,
        cmop_rx.cmop_quantity,
        cmop_rx.rxs_30_days,
        cmop_rx.zip,
        cmop_rx.id,
        cmop_rx.file_id,
        cmop_rx.record_id,
        cmop_rx.rollup_flag,
        cmop_rx.basket_type,
        cmop_rx.total_rxs_normalized,
        product_basket.child_basket_name AS MOVEMENT_DISORDER_PRODUCTS
 FROM (datamart.cmop_rx cmop_rx JOIN datamart.product_basket product_basket ON ((cmop_rx.basket_name = product_basket.child_basket_name)))
 WHERE ((product_basket.child_basket_type = 'product'::varchar(7)) AND (product_basket.parent_basket_name = 'MOVEMENT DISORDER MARKET'::varchar(24)))
 GROUP BY cmop_rx.data_month,
          cmop_rx.comp_month,
          cmop_rx.pharmacy,
          cmop_rx.visn,
          cmop_rx.station_number,
          cmop_rx.station,
          cmop_rx.va_product,
          cmop_rx.basket_id,
          cmop_rx.basket_name,
          cmop_rx.cmop_rxs_raw,
          cmop_rx.cmop_rxs_normalized,
          cmop_rx.total_quantity,
          cmop_rx.cmop_quantity,
          cmop_rx.rxs_30_days,
          cmop_rx.zip,
          cmop_rx.id,
          cmop_rx.file_id,
          cmop_rx.record_id,
          cmop_rx.rollup_flag,
          cmop_rx.basket_type,
          cmop_rx.total_rxs_normalized,
          product_basket.child_basket_name;

CREATE  VIEW outbound.zs_saba_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.rollup_month,
        prescriber_rx.sales_category,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payer_name,
        prescriber_rx.plan_name,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.model,
        prescriber_rx.payment_method,
        sum(prescriber_rx.nrx_count) AS nrx_count,
        sum(prescriber_rx.trx_count) AS trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = 'SABA MARKET TOTAL'::varchar(17)) AND (prescriber_rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.rollup_month,
          prescriber_rx.sales_category,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payer_name,
          prescriber_rx.plan_name,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.model,
          prescriber_rx.payment_method;

CREATE  VIEW outbound.zs_ics_laba_market_monthly AS
 SELECT rx.ims_id,
        rx.tvcmid,
        rx.market_name,
        rx.basket_name,
        rx.basket_type,
        rx.rollup_month,
        rx.sales_category,
        rx.payer_plan_number,
        rx.payer_name,
        rx.plan_name,
        rx.pbm_name,
        rx.pbm_parent_name,
        rx.model,
        rx.payment_method,
        sum(rx.nrx_count) AS Sum_nrx_count,
        sum(rx.trx_count) AS Sum_trx_count
 FROM (datamart.prescriber_rx rx JOIN reference.ics_laba_saba ils ON ((rx.basket_name = ils.basket_name)))
 WHERE ((rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.ims_id,
          rx.tvcmid,
          rx.market_name,
          rx.basket_name,
          rx.basket_type,
          rx.rollup_month,
          rx.sales_category,
          rx.payer_plan_number,
          rx.payer_name,
          rx.plan_name,
          rx.pbm_name,
          rx.pbm_parent_name,
          rx.model,
          rx.payment_method;

CREATE  VIEW outbound.zs_onc_ic_data_monthly AS
 SELECT oas.tvcmid,
        CASE WHEN (oas.outlet_zip IS NULL) THEN hd.zip ELSE oas.outlet_zip END AS zip,
        oas.rollup_month,
        CASE WHEN (oas.basket_id = 539) THEN 'BENDEKA'::varchar(7) WHEN (oas.basket_id = ANY (ARRAY[381, 382, 515, 513, 134, 135, 516, 514, 9882, 9884])) THEN 'GRANIX'::varchar(6) WHEN (oas.basket_id = ANY (ARRAY[74, 73])) THEN 'TREANDA'::varchar(7) WHEN (oas.basket_id = ANY (ARRAY[10695, 10696])) THEN 'TRUXIMA'::varchar(7) ELSE 'brand ??'::varchar(8) END AS Brand,
        oas.basket_id,
        oas.basket_name,
        oas.reported_trx_strength_units
 FROM ((datamart.oncology_adjusted_sales oas LEFT  JOIN datamart.customer_hco_demographics hd ON ((hd.tvcmid = oas.tvcmid))) LEFT  JOIN datamart.dddmd_demographics ddemo ON ((ddemo.tvcmid = hd.tvcmid)))
 WHERE ((oas.report_frequency = 'MONTH'::varchar(5)) AND (oas.basket_id = ANY (ARRAY[539, 381, 382, 515, 513, 134, 135, 516, 514, 9882, 9884, 74, 73, 10695, 10696])) AND (oas.rollup_month >= trunc((now() + '-13'::interval month), 'month'::varchar(5))) AND (ddemo.subcategory_code <> 'A5'::varchar(2)))
 GROUP BY oas.tvcmid,
          CASE WHEN (oas.outlet_zip IS NULL) THEN hd.zip ELSE oas.outlet_zip END,
          oas.rollup_month,
          CASE WHEN (oas.basket_id = 539) THEN 'BENDEKA'::varchar(7) WHEN (oas.basket_id = ANY (ARRAY[381, 382, 515, 513, 134, 135, 516, 514, 9882, 9884])) THEN 'GRANIX'::varchar(6) WHEN (oas.basket_id = ANY (ARRAY[74, 73])) THEN 'TREANDA'::varchar(7) WHEN (oas.basket_id = ANY (ARRAY[10695, 10696])) THEN 'TRUXIMA'::varchar(7) ELSE 'brand ??'::varchar(8) END,
          oas.basket_id,
          oas.basket_name,
          oas.reported_trx_strength_units
 ORDER BY oas.rollup_month DESC;

CREATE  VIEW outbound.zs_digihaler_activity_call_detail AS
 SELECT c.sales_force_id,
        c.call_id,
        c.veeva_account_id,
        c.ims_id,
        c.customer_type,
        c.call_type,
        c.rep_id,
        c.territory_number,
        c.zip_on_call,
        c.call_date,
        c.submit_date,
        c.attendees,
        c.attendee_type,
        c.tvcmid,
        cd.product,
        cd.basket_id,
        cd.basket_name,
        cd.detail_position,
        c.call_recordtype,
        c.how_executed
 FROM (datamart.sfa_call c JOIN datamart.sfa_call_detail cd ON ((c.call_id = cd.call_id)))
 WHERE ((cd.basket_name ~~* '%DIGIHALER%'::varchar(11)) AND (c.call_date >= '2020-01-01'::date))
 GROUP BY c.sales_force_id,
          c.call_id,
          c.veeva_account_id,
          c.ims_id,
          c.customer_type,
          c.call_type,
          c.rep_id,
          c.territory_number,
          c.zip_on_call,
          c.call_date,
          c.submit_date,
          c.attendees,
          c.attendee_type,
          c.tvcmid,
          cd.product,
          cd.basket_id,
          cd.basket_name,
          cd.detail_position,
          c.call_recordtype,
          c.how_executed
 ORDER BY c.call_date;

CREATE  VIEW outbound.CobbsCreek_austedo_optum_rx_monthly AS
 SELECT specialty_pharmacy_shipment.specialty_pharmacy_data_source,
        specialty_pharmacy_shipment.ims_id,
        specialty_pharmacy_shipment.tw_ship_to_address_id,
        specialty_pharmacy_shipment.tw_bill_to_address_id,
        specialty_pharmacy_shipment.source_customer_id,
        specialty_pharmacy_shipment.customer_name,
        specialty_pharmacy_shipment.physician_first_name,
        specialty_pharmacy_shipment.physician_last_name,
        specialty_pharmacy_shipment.ship_to_address_line_1,
        specialty_pharmacy_shipment.ship_to_address_line_2,
        specialty_pharmacy_shipment.ship_to_city,
        specialty_pharmacy_shipment.ship_to_state,
        specialty_pharmacy_shipment.ship_to_zip,
        specialty_pharmacy_shipment.source_transaction_id,
        specialty_pharmacy_shipment.invoice_date,
        specialty_pharmacy_shipment.ship_date,
        specialty_pharmacy_shipment.source_product_code,
        specialty_pharmacy_shipment.basket_id,
        specialty_pharmacy_shipment.quantity,
        specialty_pharmacy_shipment.invoice_unit_price,
        specialty_pharmacy_shipment.invoice_amount,
        specialty_pharmacy_shipment.invoice_discount,
        specialty_pharmacy_shipment.order_type,
        specialty_pharmacy_shipment.customer_type,
        specialty_pharmacy_shipment.source_parent_customer_id,
        specialty_pharmacy_shipment.parent_customer_name,
        specialty_pharmacy_shipment.lob_code_desc,
        specialty_pharmacy_shipment.order_type_desc,
        specialty_pharmacy_shipment.price_matrix_def,
        specialty_pharmacy_shipment.whse_code,
        specialty_pharmacy_shipment.order_no,
        specialty_pharmacy_shipment.package_size,
        specialty_pharmacy_shipment.tvcmid,
        specialty_pharmacy_shipment.trx_cnt,
        specialty_pharmacy_shipment.net_sales_amt,
        specialty_pharmacy_shipment.adj_invoice_unit_price,
        specialty_pharmacy_shipment.adj_invoice_amount,
        specialty_pharmacy_shipment.net_cost,
        specialty_pharmacy_shipment.payer_flag,
        specialty_pharmacy_shipment.optum_briova_flag AS birova_flag,
        specialty_pharmacy_shipment.physician_middle_name,
        specialty_pharmacy_shipment.rollup_flag,
        specialty_pharmacy_shipment.basket_type,
        specialty_pharmacy_shipment.unnormalized_trx_count,
        specialty_pharmacy_shipment.file_id,
        specialty_pharmacy_shipment.basket_name,
        product_basket.parent_basket_name,
        product_basket.child_basket_name
 FROM (datamart.specialty_pharmacy_shipment specialty_pharmacy_shipment JOIN datamart.product_basket product_basket ON ((specialty_pharmacy_shipment.basket_name = product_basket.child_basket_name)))
 WHERE ((specialty_pharmacy_shipment.ship_date >= '2018-02-01'::date) AND (specialty_pharmacy_shipment.basket_type = 'product'::varchar(7)) AND (product_basket.parent_basket_name = 'MOVEMENT DISORDER MARKET'::varchar(24)))
 GROUP BY specialty_pharmacy_shipment.specialty_pharmacy_data_source,
          specialty_pharmacy_shipment.ims_id,
          specialty_pharmacy_shipment.tw_ship_to_address_id,
          specialty_pharmacy_shipment.tw_bill_to_address_id,
          specialty_pharmacy_shipment.source_customer_id,
          specialty_pharmacy_shipment.customer_name,
          specialty_pharmacy_shipment.physician_first_name,
          specialty_pharmacy_shipment.physician_last_name,
          specialty_pharmacy_shipment.ship_to_address_line_1,
          specialty_pharmacy_shipment.ship_to_address_line_2,
          specialty_pharmacy_shipment.ship_to_city,
          specialty_pharmacy_shipment.ship_to_state,
          specialty_pharmacy_shipment.ship_to_zip,
          specialty_pharmacy_shipment.source_transaction_id,
          specialty_pharmacy_shipment.invoice_date,
          specialty_pharmacy_shipment.ship_date,
          specialty_pharmacy_shipment.source_product_code,
          specialty_pharmacy_shipment.basket_id,
          specialty_pharmacy_shipment.quantity,
          specialty_pharmacy_shipment.invoice_unit_price,
          specialty_pharmacy_shipment.invoice_amount,
          specialty_pharmacy_shipment.invoice_discount,
          specialty_pharmacy_shipment.order_type,
          specialty_pharmacy_shipment.customer_type,
          specialty_pharmacy_shipment.source_parent_customer_id,
          specialty_pharmacy_shipment.parent_customer_name,
          specialty_pharmacy_shipment.lob_code_desc,
          specialty_pharmacy_shipment.order_type_desc,
          specialty_pharmacy_shipment.price_matrix_def,
          specialty_pharmacy_shipment.whse_code,
          specialty_pharmacy_shipment.order_no,
          specialty_pharmacy_shipment.package_size,
          specialty_pharmacy_shipment.tvcmid,
          specialty_pharmacy_shipment.trx_cnt,
          specialty_pharmacy_shipment.net_sales_amt,
          specialty_pharmacy_shipment.adj_invoice_unit_price,
          specialty_pharmacy_shipment.adj_invoice_amount,
          specialty_pharmacy_shipment.net_cost,
          specialty_pharmacy_shipment.payer_flag,
          specialty_pharmacy_shipment.optum_briova_flag,
          specialty_pharmacy_shipment.physician_middle_name,
          specialty_pharmacy_shipment.rollup_flag,
          specialty_pharmacy_shipment.basket_type,
          specialty_pharmacy_shipment.unnormalized_trx_count,
          specialty_pharmacy_shipment.file_id,
          specialty_pharmacy_shipment.basket_name,
          product_basket.parent_basket_name,
          product_basket.child_basket_name;

CREATE  VIEW outbound.zs_xpo_xpopt_AM_prodbrandmrkt_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.rollup_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (prescriber_rx.market_name = 'ANTI-MIGRAINE MARKET'::varchar(20)) AND (prescriber_rx.basket_type = ANY (ARRAY['brand'::varchar(7), 'market'::varchar(7), 'product'::varchar(7)])));

CREATE  VIEW outbound.zs_xpo_xpopt_AM_submrkt_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.rollup_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (prescriber_rx.market_name = 'ANTI-MIGRAINE MARKET'::varchar(20)) AND (prescriber_rx.basket_type = 'submarket'::varchar(9)));

CREATE  VIEW outbound.zs_sample_shipment AS
 SELECT ss.veeva_id,
        ss.tvcmid,
        ss.ims_id,
        ss.first_name,
        ss.middle_name,
        ss.last_name,
        ss.designation,
        ss.state_license_number,
        ss.address_line_1,
        ss.address_line_2,
        ss.address_line_3,
        ss.city,
        ss.state,
        ss.zip,
        ss.dea_license_number,
        ss.order_id,
        ss.ndc,
        ss.basket_id,
        ss.basket_name,
        ss.order_job_code,
        ss.order_job_description,
        ss.ship_qty,
        ss.ship_date,
        ss.repid,
        ss.territory,
        ss.signature_type,
        ss.attendeename
 FROM datamart.sample_shipment ss
 WHERE ((ss.basket_name !~~* '%QNASL%'::varchar(7)) AND (ss.ship_date >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))))
 GROUP BY ss.veeva_id,
          ss.tvcmid,
          ss.ims_id,
          ss.first_name,
          ss.middle_name,
          ss.last_name,
          ss.designation,
          ss.state_license_number,
          ss.address_line_1,
          ss.address_line_2,
          ss.address_line_3,
          ss.city,
          ss.state,
          ss.zip,
          ss.dea_license_number,
          ss.order_id,
          ss.ndc,
          ss.basket_id,
          ss.basket_name,
          ss.order_job_code,
          ss.order_job_description,
          ss.ship_qty,
          ss.ship_date,
          ss.repid,
          ss.territory,
          ss.signature_type,
          ss.attendeename;

CREATE  VIEW outbound.zs_ddd_weekly AS
 SELECT ddd.outlet_code,
        ddd.outlet_name,
        ddd.outlet_zip,
        ddd.report_frequency,
        ddd.basket_id,
        ddd.basket_name,
        ddd.data_date,
        ddd.date,
        ddd.rollup_week,
        ddd.rollup_month,
        ddd.comp_month,
        ddd.quantity,
        ddd.market_name,
        ddd.outlet_tvcmid,
        ddd.sales_force_id,
        ddd.category_code,
        ddd.rollup_flag,
        ddd.basket_type,
        ddd.rollup_445_month,
        ddd.dollars,
        ddd.COUNT AS count,
        ddd.subcategory_code
 FROM datamart.ddd
 WHERE (ddd.rollup_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5)))
 GROUP BY ddd.outlet_code,
          ddd.outlet_name,
          ddd.outlet_zip,
          ddd.report_frequency,
          ddd.basket_id,
          ddd.basket_name,
          ddd.data_date,
          ddd.date,
          ddd.rollup_week,
          ddd.rollup_month,
          ddd.comp_month,
          ddd.quantity,
          ddd.market_name,
          ddd.outlet_tvcmid,
          ddd.sales_force_id,
          ddd.category_code,
          ddd.rollup_flag,
          ddd.basket_type,
          ddd.rollup_445_month,
          ddd.dollars,
          ddd.COUNT,
          ddd.subcategory_code;

CREATE  VIEW outbound.ajovy_fia_monthly AS
 SELECT fia.basket_id,
        fia.basket_name,
        fia.claim_id,
        fia.patient_id,
        fia.sequence_number,
        fia.product_id,
        fia.fill_date,
        fia.claim_type,
        fia.reject_code,
        fia.days_supply,
        fia.quantity,
        fia.refill_code,
        fia.payer_plan_id,
        fia.opc_ask,
        fia.sec_payer_plan_id,
        fia.buy_down,
        fia.opc_paid,
        fia.prescriber_id,
        fia.sob,
        fia.sub_product_id,
        fia.sub_opc,
        fia.initial_claim_id,
        fia.prev_product_id,
        fia.daw_code,
        fia.wrt_date,
        fia.claim_status,
        fia.copay_card_flg,
        fia.zip_code,
        fia.ecoup_flag,
        fia.ecoup_offset_amt,
        fia.standard_copay,
        fia.standard_copay_yn,
        fia.market_id,
        fia.flexible_fld_1_char,
        fia.flexible_fld_2_char,
        fia.flexible_fld_3_char,
        fia.flexible_fld_4_char,
        fia.file_id,
        fia.record_id,
        fia.cbsa_code,
        fia.cbsa_description,
        fia.state_code,
        fia.payer_name,
        fia.plan_name,
        fia.pbm_name,
        fia.pbm_id,
        fia.method_of_payment,
        fia.model_type,
        fia.product_group,
        fia.product_group_id,
        fia.product_name,
        fia.generic_name,
        fia.brand_generic_flag,
        fia.product_form,
        fia.product_strength,
        fia.package_size,
        fia.manufacturer,
        fia.cmf10,
        fia.usc_code,
        fia.fia_market_desc,
        fia.reject_reason,
        fia.reject_group,
        fia.mpd_year,
        fia.mpd_eligibility_class,
        fia.deductible_start_date,
        fia.copay_start_date,
        fia.gap_start_date,
        fia.catastrophic_start_date,
        fia.mpd_panel_patient,
        fia.PROVIDER_TYPE,
        fia.IQVIA_RXER_ID,
        fia.PRIMARY_SPECIALTY_CODE,
        fia.PRIMARY_SPECIALTY_DESC,
        fia.FIRST_NAME,
        fia.LAST_NAME,
        fia.ORG_NM,
        fia.ADDRESS,
        fia.CITY,
        fia.PVR_ZIP_CODE,
        fia.PVR_STATE_CODE,
        fia.PHONE_NUMBER
 FROM datamart.fia fia
 WHERE ((fia.fill_date >= '2020-01-01'::date) AND (fia.basket_id IN ( SELECT source_product.entity_id
 FROM product.source_product
 WHERE (source_product.source_file_code = 'LK715'::varchar(5)))))
 GROUP BY fia.basket_id,
          fia.basket_name,
          fia.claim_id,
          fia.patient_id,
          fia.sequence_number,
          fia.product_id,
          fia.fill_date,
          fia.claim_type,
          fia.reject_code,
          fia.days_supply,
          fia.quantity,
          fia.refill_code,
          fia.payer_plan_id,
          fia.opc_ask,
          fia.sec_payer_plan_id,
          fia.buy_down,
          fia.opc_paid,
          fia.prescriber_id,
          fia.sob,
          fia.sub_product_id,
          fia.sub_opc,
          fia.initial_claim_id,
          fia.prev_product_id,
          fia.daw_code,
          fia.wrt_date,
          fia.claim_status,
          fia.copay_card_flg,
          fia.zip_code,
          fia.ecoup_flag,
          fia.ecoup_offset_amt,
          fia.standard_copay,
          fia.standard_copay_yn,
          fia.market_id,
          fia.flexible_fld_1_char,
          fia.flexible_fld_2_char,
          fia.flexible_fld_3_char,
          fia.flexible_fld_4_char,
          fia.file_id,
          fia.record_id,
          fia.cbsa_code,
          fia.cbsa_description,
          fia.state_code,
          fia.payer_name,
          fia.plan_name,
          fia.pbm_name,
          fia.pbm_id,
          fia.method_of_payment,
          fia.model_type,
          fia.product_group,
          fia.product_group_id,
          fia.product_name,
          fia.generic_name,
          fia.brand_generic_flag,
          fia.product_form,
          fia.product_strength,
          fia.package_size,
          fia.manufacturer,
          fia.cmf10,
          fia.usc_code,
          fia.fia_market_desc,
          fia.reject_reason,
          fia.reject_group,
          fia.mpd_year,
          fia.mpd_eligibility_class,
          fia.deductible_start_date,
          fia.copay_start_date,
          fia.gap_start_date,
          fia.catastrophic_start_date,
          fia.mpd_panel_patient,
          fia.PROVIDER_TYPE,
          fia.IQVIA_RXER_ID,
          fia.PRIMARY_SPECIALTY_CODE,
          fia.PRIMARY_SPECIALTY_DESC,
          fia.FIRST_NAME,
          fia.LAST_NAME,
          fia.ORG_NM,
          fia.ADDRESS,
          fia.CITY,
          fia.PVR_ZIP_CODE,
          fia.PVR_STATE_CODE,
          fia.PHONE_NUMBER;

CREATE  VIEW outbound.blink_call_key_messages AS
 SELECT call_key_messages.veeva_account_id,
        call_key_messages.tvcmid,
        call_key_messages.call_id,
        call_key_messages.call_record_type,
        call_key_messages.product,
        call_key_messages.key_message,
        call_key_messages.call_date,
        call_key_messages.duration,
        call_key_messages.display_order,
        call_key_messages.call_status,
        call_key_messages.territory,
        call_key_messages.call_type,
        call_key_messages.hcp_name
 FROM reporting.call_key_messages
 WHERE ((call_key_messages.product = ANY (ARRAY['Blink Health – AJOVY'::varchar(24), 'Blink Health – AUSTEDO'::varchar(24)])) AND (call_key_messages.call_date >= '2021-02-01'::date));

CREATE  VIEW outbound.cei_roster AS
 SELECT rep.employee_id AS UniqueIdentifier,
        mgr.employee_id AS ParentUniqueEmployeeId,
        ((mgr.first_name || ' '::varchar(1)) || mgr.last_name) AS ReportsToName,
        rep.team AS EmployeeOrganization,
        rep.last_name AS LastName,
        rep.first_name AS FirstName,
        rep.middle_name AS MiddleName,
        rep.suffix AS Generation,
        rep.preferred_name AS PreferredName,
        rep.hire_date AS HireDate,
        rep.address_line1 AS Address1,
        rep.address_line2 AS Address2,
        rep.address_line3 AS Address3,
        rep.city AS City,
        rep.state AS StateProvince,
        rep.zip AS ZipPostalCode,
        rep.home_phone AS HomePhone,
        rep.mobile_phone AS CellPhoneHome,
        rep.business_phone AS Workphone,
        rep.email AS EmailWork,
        coalesce(rep.hr_status, 'Active'::varchar(6)) AS Status,
        rep.territory_number AS TerrID,
        rep.territory_name AS TerrName,
        '1900-01-01 00:00:00'::varchar(19) AS TermDate
 FROM (datamart.roster rep LEFT  JOIN datamart.roster mgr ON ((rep.supervisor_global_employee_id = mgr.global_employee_id)))
 WHERE ((rep.employee_id IS NOT NULL) AND (rep.sales_force_id = ANY (ARRAY['TM'::varchar(2), 'MA'::varchar(2), 'TE'::varchar(2), 'TS'::varchar(2), 'TR'::varchar(2), 'TO'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) AND (rep.fleet_eligible = 'Y'::varchar(1)));

CREATE  VIEW outbound.zs_wholesaler_sales_867_monthly AS
 SELECT wholesaler_sales_867.basket_id,
        wholesaler_sales_867.basket_name,
        wholesaler_sales_867.ndc,
        wholesaler_sales_867.product_description,
        wholesaler_sales_867.product_name,
        wholesaler_sales_867.trading_partner_name,
        wholesaler_sales_867.trading_partner_dea,
        wholesaler_sales_867.trading_partner_hin,
        wholesaler_sales_867.trading_partner_location_type,
        wholesaler_sales_867.trading_partner_dc_dea,
        wholesaler_sales_867.trading_partner_dc_hin,
        wholesaler_sales_867.trading_partner_dc_name,
        wholesaler_sales_867.trading_partner_dc_address,
        wholesaler_sales_867.trading_partner_dc_address_2,
        wholesaler_sales_867.trading_partner_dc_city,
        wholesaler_sales_867.trading_partner_dc_state,
        wholesaler_sales_867.trading_partner_dc_zip,
        wholesaler_sales_867.class_of_trade,
        wholesaler_sales_867.outlet_location_name,
        wholesaler_sales_867.outlet_dea,
        wholesaler_sales_867.outlet_hin,
        wholesaler_sales_867.outlet_340b,
        wholesaler_sales_867.outlet_ncpdp,
        wholesaler_sales_867.outlet_npi,
        wholesaler_sales_867.outlet_location_address,
        wholesaler_sales_867.outlet_location_address_2,
        wholesaler_sales_867.outlet_location_city,
        wholesaler_sales_867.outlet_location_state,
        wholesaler_sales_867.outlet_location_zip,
        wholesaler_sales_867.reporting_date,
        wholesaler_sales_867.rollup_reporting_month,
        wholesaler_sales_867.rollup_reporting_quarter,
        wholesaler_sales_867.contract_number,
        wholesaler_sales_867.contract_description,
        wholesaler_sales_867.invoice_number,
        wholesaler_sales_867.invoice_date,
        wholesaler_sales_867.invoice_line_id,
        wholesaler_sales_867.quanitity_stock_sales_ss,
        wholesaler_sales_867.ds_sales_ds,
        wholesaler_sales_867.summary_sales_su,
        wholesaler_sales_867.dock_to_dock_bq,
        wholesaler_sales_867.interbranch_ib,
        wholesaler_sales_867.return_to_useable_ru,
        wholesaler_sales_867.return_to_vendor_rv,
        wholesaler_sales_867.transfer_to_disposal_td,
        wholesaler_sales_867.adjusted_price,
        wholesaler_sales_867.gross_amount,
        wholesaler_sales_867.trx_count_normalized
 FROM datamart.wholesaler_sales_867
 WHERE (wholesaler_sales_867.reporting_date >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5)))
 GROUP BY wholesaler_sales_867.basket_id,
          wholesaler_sales_867.basket_name,
          wholesaler_sales_867.ndc,
          wholesaler_sales_867.product_description,
          wholesaler_sales_867.product_name,
          wholesaler_sales_867.trading_partner_name,
          wholesaler_sales_867.trading_partner_dea,
          wholesaler_sales_867.trading_partner_hin,
          wholesaler_sales_867.trading_partner_location_type,
          wholesaler_sales_867.trading_partner_dc_dea,
          wholesaler_sales_867.trading_partner_dc_hin,
          wholesaler_sales_867.trading_partner_dc_name,
          wholesaler_sales_867.trading_partner_dc_address,
          wholesaler_sales_867.trading_partner_dc_address_2,
          wholesaler_sales_867.trading_partner_dc_city,
          wholesaler_sales_867.trading_partner_dc_state,
          wholesaler_sales_867.trading_partner_dc_zip,
          wholesaler_sales_867.class_of_trade,
          wholesaler_sales_867.outlet_location_name,
          wholesaler_sales_867.outlet_dea,
          wholesaler_sales_867.outlet_hin,
          wholesaler_sales_867.outlet_340b,
          wholesaler_sales_867.outlet_ncpdp,
          wholesaler_sales_867.outlet_npi,
          wholesaler_sales_867.outlet_location_address,
          wholesaler_sales_867.outlet_location_address_2,
          wholesaler_sales_867.outlet_location_city,
          wholesaler_sales_867.outlet_location_state,
          wholesaler_sales_867.outlet_location_zip,
          wholesaler_sales_867.reporting_date,
          wholesaler_sales_867.rollup_reporting_month,
          wholesaler_sales_867.rollup_reporting_quarter,
          wholesaler_sales_867.contract_number,
          wholesaler_sales_867.contract_description,
          wholesaler_sales_867.invoice_number,
          wholesaler_sales_867.invoice_date,
          wholesaler_sales_867.invoice_line_id,
          wholesaler_sales_867.quanitity_stock_sales_ss,
          wholesaler_sales_867.ds_sales_ds,
          wholesaler_sales_867.summary_sales_su,
          wholesaler_sales_867.dock_to_dock_bq,
          wholesaler_sales_867.interbranch_ib,
          wholesaler_sales_867.return_to_useable_ru,
          wholesaler_sales_867.return_to_vendor_rv,
          wholesaler_sales_867.transfer_to_disposal_td,
          wholesaler_sales_867.adjusted_price,
          wholesaler_sales_867.gross_amount,
          wholesaler_sales_867.trx_count_normalized;

CREATE  VIEW outbound.ajovy_fia_adhoc_qtrly AS
 SELECT fia.basket_id,
        fia.basket_name,
        fia.claim_id,
        fia.patient_id,
        fia.sequence_number,
        fia.product_id,
        fia.fill_date,
        fia.claim_type,
        fia.reject_code,
        fia.days_supply,
        fia.quantity,
        fia.refill_code,
        fia.payer_plan_id,
        fia.opc_ask,
        fia.sec_payer_plan_id,
        fia.buy_down,
        fia.opc_paid,
        fia.prescriber_id,
        fia.sob,
        fia.sub_product_id,
        fia.sub_opc,
        fia.initial_claim_id,
        fia.prev_product_id,
        fia.daw_code,
        fia.wrt_date,
        fia.claim_status,
        fia.copay_card_flg,
        fia.zip_code,
        fia.ecoup_flag,
        fia.ecoup_offset_amt,
        fia.standard_copay,
        fia.standard_copay_yn,
        fia.market_id,
        fia.flexible_fld_1_char,
        fia.flexible_fld_2_char,
        fia.flexible_fld_3_char,
        fia.flexible_fld_4_char,
        fia.file_id,
        fia.record_id,
        fia.cbsa_code,
        fia.cbsa_description,
        fia.state_code,
        fia.payer_name,
        fia.plan_name,
        fia.pbm_name,
        fia.pbm_id,
        fia.method_of_payment,
        fia.model_type,
        fia.product_group,
        fia.product_group_id,
        fia.product_name,
        fia.generic_name,
        fia.brand_generic_flag,
        fia.product_form,
        fia.product_strength,
        fia.package_size,
        fia.manufacturer,
        fia.cmf10,
        fia.usc_code,
        fia.fia_market_desc,
        fia.reject_reason,
        fia.reject_group,
        fia.mpd_year,
        fia.mpd_eligibility_class,
        fia.deductible_start_date,
        fia.copay_start_date,
        fia.gap_start_date,
        fia.catastrophic_start_date,
        fia.mpd_panel_patient,
        fia.PROVIDER_TYPE,
        fia.IQVIA_RXER_ID,
        fia.PRIMARY_SPECIALTY_CODE,
        fia.PRIMARY_SPECIALTY_DESC,
        fia.FIRST_NAME,
        fia.LAST_NAME,
        fia.ORG_NM,
        fia.ADDRESS,
        fia.CITY,
        fia.PVR_ZIP_CODE,
        fia.PVR_STATE_CODE,
        fia.PHONE_NUMBER
 FROM datamart.fia_adhoc fia
 WHERE ((fia.fill_date >= '2020-01-01'::date) AND (fia.basket_id IN ( SELECT source_product.entity_id
 FROM product.source_product
 WHERE (source_product.source_file_code = 'A67.F12176'::varchar(10)))))
 GROUP BY fia.basket_id,
          fia.basket_name,
          fia.claim_id,
          fia.patient_id,
          fia.sequence_number,
          fia.product_id,
          fia.fill_date,
          fia.claim_type,
          fia.reject_code,
          fia.days_supply,
          fia.quantity,
          fia.refill_code,
          fia.payer_plan_id,
          fia.opc_ask,
          fia.sec_payer_plan_id,
          fia.buy_down,
          fia.opc_paid,
          fia.prescriber_id,
          fia.sob,
          fia.sub_product_id,
          fia.sub_opc,
          fia.initial_claim_id,
          fia.prev_product_id,
          fia.daw_code,
          fia.wrt_date,
          fia.claim_status,
          fia.copay_card_flg,
          fia.zip_code,
          fia.ecoup_flag,
          fia.ecoup_offset_amt,
          fia.standard_copay,
          fia.standard_copay_yn,
          fia.market_id,
          fia.flexible_fld_1_char,
          fia.flexible_fld_2_char,
          fia.flexible_fld_3_char,
          fia.flexible_fld_4_char,
          fia.file_id,
          fia.record_id,
          fia.cbsa_code,
          fia.cbsa_description,
          fia.state_code,
          fia.payer_name,
          fia.plan_name,
          fia.pbm_name,
          fia.pbm_id,
          fia.method_of_payment,
          fia.model_type,
          fia.product_group,
          fia.product_group_id,
          fia.product_name,
          fia.generic_name,
          fia.brand_generic_flag,
          fia.product_form,
          fia.product_strength,
          fia.package_size,
          fia.manufacturer,
          fia.cmf10,
          fia.usc_code,
          fia.fia_market_desc,
          fia.reject_reason,
          fia.reject_group,
          fia.mpd_year,
          fia.mpd_eligibility_class,
          fia.deductible_start_date,
          fia.copay_start_date,
          fia.gap_start_date,
          fia.catastrophic_start_date,
          fia.mpd_panel_patient,
          fia.PROVIDER_TYPE,
          fia.IQVIA_RXER_ID,
          fia.PRIMARY_SPECIALTY_CODE,
          fia.PRIMARY_SPECIALTY_DESC,
          fia.FIRST_NAME,
          fia.LAST_NAME,
          fia.ORG_NM,
          fia.ADDRESS,
          fia.CITY,
          fia.PVR_ZIP_CODE,
          fia.PVR_STATE_CODE,
          fia.PHONE_NUMBER;

CREATE  VIEW outbound.zs_call_plan AS
 SELECT cp.sales_force_id,
        cp.period,
        cp.veeva_account_id,
        cp.ims_id,
        cp.tvcmid,
        cp.first_name,
        cp.last_name,
        cp.specialty,
        cp.area_number,
        cp.region_number,
        cp.territory_number,
        cp.basket_id,
        cp.basket_name,
        cp.p1,
        cp.p2,
        cp.p3
 FROM (datamart.call_plan cp JOIN reference.call_plan_active_dates dt ON (((dt.period = cp.period) AND (dt.sales_force_id = cp.sales_force_id) AND ((statement_timestamp())::timestamp >= dt.start_date) AND ((statement_timestamp())::timestamp <= dt.end_date) AND (dt.include_in_alternates = 'Y'::varchar(1)))))
 GROUP BY cp.sales_force_id,
          cp.period,
          cp.veeva_account_id,
          cp.ims_id,
          cp.tvcmid,
          cp.first_name,
          cp.last_name,
          cp.specialty,
          cp.area_number,
          cp.region_number,
          cp.territory_number,
          cp.basket_id,
          cp.basket_name,
          cp.p1,
          cp.p2,
          cp.p3;

CREATE  VIEW outbound.Syneos_call_acitivty AS
 SELECT sc.sales_force_id,
        sc.veeva_account_id,
        sc.call_id,
        scd.basket_name,
        scd.detail_position,
        sc.tvcmid,
        sc.ims_id,
        sc.ims_outlet_id,
        sc.customer_type,
        sc.first_name,
        sc.last_name,
        sc.call_type,
        sc.rep_first_name,
        sc.rep_last_name,
        sc.territory_number,
        sc.zip_on_call,
        sc.call_date,
        sc.submit_date,
        sc.attendees,
        sc.attendee_type,
        sc.area_number,
        sc.region_number,
        sc.call_recordtype,
        sc.call_duration,
        sc.call_datetime,
        sc.how_executed
 FROM datamart.sfa_call_detail scd, datamart.sfa_call sc
 WHERE ((scd.call_id = sc.call_id) AND (scd.sales_force_id = sc.sales_force_id) AND (scd.basket_name = ANY (ARRAY['CINQAIR'::varchar(18), 'PROAIR DIGIHALER'::varchar(18), 'AIRDUO DIGIHALER'::varchar(18), 'ARMONAIR DIGIHALER'::varchar(18)])) AND (sc.territory_number IN ( SELECT roster.territory_number
 FROM datamart.roster
 WHERE (((roster.employee_id ~~* '%CWKU%'::varchar(6)) OR (roster.employee_id = ANY (ARRAY['A061823'::varchar(7), 'A805771'::varchar(7)])) OR (roster.employee_id = ANY (ARRAY['061823'::varchar(6), '805771'::varchar(6)]))) AND (roster.sales_force_id = 'TR'::varchar(2))))) AND (sc.call_date > '2019-12-31'::date))
 GROUP BY sc.sales_force_id,
          sc.veeva_account_id,
          sc.call_id,
          scd.basket_name,
          scd.detail_position,
          sc.tvcmid,
          sc.ims_id,
          sc.ims_outlet_id,
          sc.customer_type,
          sc.first_name,
          sc.last_name,
          sc.call_type,
          sc.rep_first_name,
          sc.rep_last_name,
          sc.territory_number,
          sc.zip_on_call,
          sc.call_date,
          sc.submit_date,
          sc.attendees,
          sc.attendee_type,
          sc.area_number,
          sc.region_number,
          sc.call_recordtype,
          sc.call_duration,
          sc.call_datetime,
          sc.how_executed;

CREATE  VIEW outbound.Syneos_Digihaler_rx AS
 SELECT demo.sales_force_id,
        ca.territory_number,
        rx.ims_id,
        rx.tvcmid,
        rx.data_date,
        rx.date,
        rx.basket_name,
        rx.prescriber_first_name,
        rx.prescriber_last_name,
        demo.ptr_address_1,
        demo.ptr_address_2,
        demo.ptr_city,
        demo.ptr_state,
        demo.ptr_zip,
        rx.nrx_count,
        rx.trx_count,
        rx.nrx_quantity,
        rx.trx_quantity,
        rx.ims_specialty
 FROM datamart.prescriber_rx rx, datamart.prescriber_combined_demo_frozen demo, datamart.current_alignment ca
 WHERE ((demo.ptr_zip = ca.zip_code) AND (rx.ims_id = demo.ims_id) AND (demo.sales_force_id = ca.sales_force_id) AND (ca.territory_number IN ( SELECT roster.territory_number
 FROM datamart.roster
 WHERE (((roster.employee_id ~~* '%CWKU%'::varchar(6)) OR (roster.employee_id = ANY (ARRAY['A061823'::varchar(7), 'A805771'::varchar(7)])) OR (roster.employee_id = ANY (ARRAY['061823'::varchar(6), '805771'::varchar(6)]))) AND (roster.sales_force_id = 'TR'::varchar(2))))) AND (rx.basket_name ~~* '%digihaler%'::varchar(11)) AND (rx.rollup_month > '2019-12-31'::date))
 GROUP BY demo.sales_force_id,
          ca.territory_number,
          rx.ims_id,
          rx.tvcmid,
          rx.data_date,
          rx.date,
          rx.basket_name,
          rx.prescriber_first_name,
          rx.prescriber_last_name,
          demo.ptr_address_1,
          demo.ptr_address_2,
          demo.ptr_city,
          demo.ptr_state,
          demo.ptr_zip,
          rx.nrx_count,
          rx.trx_count,
          rx.nrx_quantity,
          rx.trx_quantity,
          rx.ims_specialty;

CREATE  VIEW outbound.Syneos_Cinqair_dddmd AS
 SELECT ca.sales_force_id,
        ca.territory_number,
        dddmd.onc_account_demo_id,
        dddmd.outlet_name,
        demo.outlet_address,
        demo.outlet_city,
        demo.outlet_state,
        demo.outlet_zip,
        dddmd.outlet_code,
        dddmd.tvcmid,
        dddmd.subcategory_code,
        dddmd.basket_name,
        dddmd.data_date,
        dddmd.date,
        dddmd.rollup_month,
        dddmd.quantity,
        dddmd.dollars
 FROM datamart.ddd_md dddmd, datamart.dddmd_demographics demo, datamart.alternate_alignments ca
 WHERE ((demo.outlet_zip = ca.zip_code) AND (dddmd.outlet_code = demo.outlet_code) AND (ca.territory_number IN ( SELECT roster.territory_number
 FROM datamart.roster
 WHERE (((roster.employee_id ~~* '%CWKU%'::varchar(6)) OR (roster.employee_id = ANY (ARRAY['A061823'::varchar(7), 'A805771'::varchar(7)])) OR (roster.employee_id = ANY (ARRAY['061823'::varchar(6), '805771'::varchar(6)]))) AND (roster.sales_force_id = 'TR'::varchar(2))))) AND (dddmd.basket_name ~~* '%CINQ%'::varchar(6)) AND (dddmd.rollup_month > '2019-12-31'::date))
 GROUP BY ca.sales_force_id,
          ca.territory_number,
          dddmd.onc_account_demo_id,
          dddmd.outlet_name,
          demo.outlet_address,
          demo.outlet_city,
          demo.outlet_state,
          demo.outlet_zip,
          dddmd.outlet_code,
          dddmd.tvcmid,
          dddmd.subcategory_code,
          dddmd.basket_name,
          dddmd.data_date,
          dddmd.date,
          dddmd.rollup_month,
          dddmd.quantity,
          dddmd.dollars;

CREATE  VIEW outbound.Syneos_digihaler_targets AS
 SELECT pcd.ims_id,
        fl.tvcmid,
        NULL AS basket_id,
        NULL AS basket_name,
        fl.territory_number,
        fl.sales_force_id,
        fl.flag_type,
        fl.flag_value,
        fl.flag_effective_start_date,
        fl.flag_effective_end_date,
        pcd.veeva_account_id,
        pcd.specialty
 FROM (datamart.customer_level_flags fl LEFT  JOIN datamart.prescriber_combined_demographics pcd ON ((fl.tvcmid = pcd.tvcmid)))
 WHERE ((fl.territory_number IN ( SELECT roster.territory_number
 FROM datamart.roster
 WHERE (((roster.employee_id ~~* '%CWKU%'::varchar(6)) OR (roster.employee_id = ANY (ARRAY['A061823'::varchar(7), 'A805771'::varchar(7)])) OR (roster.employee_id = ANY (ARRAY['061823'::varchar(6), '805771'::varchar(6)]))) AND (roster.sales_force_id = 'TR'::varchar(2))))) AND (fl.basket_name ~~* '%DIGIHALER'::varchar(10)) AND ((statement_timestamp())::timestamp >= fl.flag_effective_start_date) AND ((statement_timestamp())::timestamp <= fl.flag_effective_end_date))
 GROUP BY pcd.ims_id,
          fl.tvcmid,
          NULL,
          fl.territory_number,
          fl.sales_force_id,
          fl.flag_type,
          fl.flag_value,
          fl.flag_effective_start_date,
          fl.flag_effective_end_date,
          pcd.veeva_account_id,
          pcd.specialty
 ORDER BY fl.territory_number,
          pcd.ims_id;

CREATE  VIEW outbound.mcm_qvar_copay AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.pharmacy_chain_number,
        copay.nabp,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.create_date,
        copay.occ_payment_type,
        copay.counted_copay,
        copay.auth_refills,
        copay.admin_hcp_npi,
        copay.admin_hcp_name,
        copay.admin_hcp_address,
        copay.admin_hcp_address2,
        copay.admin_hcp_city,
        copay.admin_hcp_state,
        copay.admin_hcp_zip,
        copay.claim_type,
        copay.administration_flag,
        copay.soc_name,
        copay.soc_phone,
        copay.soc_fax,
        copay.soc_address,
        copay.soc_city,
        copay.soc_state,
        copay.soc_zip,
        copay.soc_id,
        copay.soc_npi,
        copay.payer_name,
        copay.cpt_code,
        copay.trans_type,
        copay.previous_payer_id,
        copay.member_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.report_frequency,
        copay.source_name,
        copay.file_id,
        copay.record_id,
        copay.patient_type,
        copay.primary_bin,
        copay.primary_bin_description,
        copay.reject_code
 FROM datamart.copay
 WHERE (copay.basket_name ~~* '%QVAR%'::varchar(6))
 ORDER BY copay.fill_date;

CREATE  VIEW outbound.newman_roster AS
 SELECT rep.territory_number AS Territory,
        rep.last_name AS LastName,
        rep.first_name AS FirstName,
        substr(rep.middle_name, 1, 1) AS "Middle Initial",
        rep.suffix AS Suffix,
        rep.employee_id AS "Teva ID",
        rep.email AS Email,
        rep.business_address_line1 AS "Business Address1",
        rep.business_address_line2 AS "Business Address2",
        rep.shipping_address_line3 AS "Business Address3",
        rep.business_city AS "Business City",
        rep.business_state AS "Business State",
        rep.business_zip AS "Business Zip",
        rep.shipping_address_line1 AS "Shipping Address1",
        rep.shipping_address_line2 AS "Shipping Address2",
        rep.shipping_address_line3 AS "Shipping Address3",
        rep.shipping_city AS "Shipping City",
        rep.shipping_state AS "Shipping State",
        rep.shipping_zip AS "Shipping Zip",
        rep.mobile_phone AS "Cell Phone",
        rep.business_phone AS "Business Phone",
        rep.sales_force_id AS Company,
        CASE WHEN (upper(rep.reg_contract) = 'EX'::varchar(2)) THEN 'Contractor'::varchar(10) ELSE 'Associate'::varchar(9) END AS "Profile Type",
        coalesce(rep.username, 'zzzzz'::varchar(5)) AS "Newman User Name"
 FROM datamart.roster rep
 WHERE ((rep.employee_id IS NOT NULL) AND (rep.sales_force_id = ANY (ARRAY['MA'::varchar(2), 'TE'::varchar(2), 'TM'::varchar(2), 'TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'TH'::varchar(2)])) AND (rep.assignment_type <> 'Secondary'::varchar(9)));

CREATE  VIEW outbound.zzz_asi_rx_by_market_smr AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM (datamart.prescriber_rx rx LEFT  JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '435'::varchar(3)) AND (rx.ims_report_number_cnt = '68'::varchar(2)) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.v_ob_ahm_customer_individual_duplicate_Check AS
 SELECT cm.tvcmid AS CustomerId,
        coalesce(cm.first_name, ''::varchar) AS FirstName,
        coalesce(cm.last_name, ''::varchar) AS LastName,
        coalesce(cm.middle_name, ''::varchar) AS MiddleName,
        ''::varchar AS Salutation,
        coalesce(cm.suffix, ''::varchar) AS PersonalSuffix,
        cm.sub_type_name AS CustomerType,
        CASE WHEN (cm.teva_specialty_code = 'NRP'::varchar(3)) THEN 'NP'::varchar(2) ELSE d.profession_code_shortname END AS ProfessionalDesignation,
        coalesce(cm.teva_specialty_code, ''::varchar) AS PrimarySpecialtyCode,
        ''::varchar AS SecondarySpecialtyCode,
        ''::varchar AS GovernmentEmployeeIndicator,
        ''::varchar AS TaxId,
        ''::varchar AS TaxIdType,
        ''::varchar AS BusinessEmail,
        ''::varchar AS BusinessPhone,
        ''::varchar AS BusinessFax,
        ''::varchar AS MobilePhone,
        ''::varchar AS HomePhone,
        'US'::varchar(2) AS RegionId,
        CASE WHEN (cm.healthcare_professional_status_code = 'A'::varchar(1)) THEN 'Active'::varchar(6) WHEN (cm.healthcare_professional_status_code <> 'A'::varchar(1)) THEN 'Inactive'::varchar(8) ELSE ''::varchar END AS Status
 FROM ((mdm.hcp cm LEFT  JOIN mdm.professional prof ON (((cm.tvcmid = prof.tvcmid) AND (prof.profession_rank = 1::float)))) JOIN reference.Designations d ON ((d.profession_code = prof.profession_code)))
 WHERE ((cm.tvcmid IS NOT NULL) AND (cm.tvcmid = ANY (ARRAY[102904, 1244562, 1377015, 1582445, 1609131, 1925288, 2020622, 3243439, 5010145, 5120229, 5122932])))
 GROUP BY cm.tvcmid,
          coalesce(cm.first_name, ''::varchar),
          coalesce(cm.last_name, ''::varchar),
          coalesce(cm.middle_name, ''::varchar),
          ''::varchar,
          coalesce(cm.suffix, ''::varchar),
          cm.sub_type_name,
          CASE WHEN (cm.teva_specialty_code = 'NRP'::varchar(3)) THEN 'NP'::varchar(2) ELSE d.profession_code_shortname END,
          coalesce(cm.teva_specialty_code, ''::varchar),
          'US'::varchar(2),
          CASE WHEN (cm.healthcare_professional_status_code = 'A'::varchar(1)) THEN 'Active'::varchar(6) WHEN (cm.healthcare_professional_status_code <> 'A'::varchar(1)) THEN 'Inactive'::varchar(8) ELSE ''::varchar END;

CREATE  VIEW outbound.DDDMD_WEEKLY_DOLLARS AS
 SELECT EXT_TR_DDDMD_WEEKLY_DOLLARS_src.client_num,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.report_num,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.ims_outlet_code,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.subcategory_code,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.alt_seq_num,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.filler01,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.category_code,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.ims_product_code,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.data_date,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk01,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk02,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk03,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk04,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk05,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk06,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk07,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk08,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk09,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk10,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk11,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk12,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk13,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk14,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk15,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk16,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk17,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk18,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk19,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk20,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk21,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk22,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk23,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk24,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk25,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk26,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk27,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk28,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk29,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk30,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk31,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk32,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk33,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk34,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk35,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk36,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk37,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk38,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk39,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk40,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk41,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk42,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk43,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk44,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk45,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk46,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk47,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk48,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk49,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk50,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk51,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk52,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk53,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk54,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk55,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk56,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk57,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk58,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk59,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk60,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk61,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk62,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk63,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk64,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk65,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk66,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk67,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk68,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk69,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk70,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk71,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk72,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk73,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk74,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk75,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk76,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk77,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk78,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk79,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk80,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk81,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk82,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk83,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk84,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk85,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk86,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk87,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk88,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk89,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk90,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk91,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk92,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk93,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk94,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk95,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk96,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk97,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk98,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk99,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk100,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk101,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk102,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk103,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk104,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk105,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk106,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.outlet_name,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.outlet_address,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.outlet_city,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.outlet_state,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.outlet_zip
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_DOLLARS_src
 WHERE (EXT_TR_DDDMD_WEEKLY_DOLLARS_src.batch_id IN ( SELECT max(EXT_TR_DDDMD_WEEKLY_DOLLARS_src.batch_id) AS max
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_DOLLARS_src));

CREATE  VIEW outbound.DDDMD_WEEKLY_DEMO_DOL AS
 SELECT EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.client_num,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.report_num,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.ims_outlet_code,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.ims_facility_number,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.ims_prescriber_number,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.outlet_name,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.outlet_address,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.outlet_city,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.outlet_state,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.outlet_zip,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_name,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_address1,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_address2,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_address3,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_address4,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_city,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_state,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_zip
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src
 WHERE (EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.batch_id IN ( SELECT max(EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.batch_id) AS max
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src));

CREATE  VIEW outbound.zzz_kc_cns_deciles AS
 SELECT d.ims_id AS hcp_id,
        d.decile_name,
        d.decile_trx_count_6_mo AS decile_value
 FROM datamart.rx_deciles d
 WHERE ((d.decile_name = ANY (ARRAY['FENTORA'::varchar(8), 'ACTIQ'::varchar(8), 'NUVIGIL'::varchar(8), 'AMRIX'::varchar(8), 'AZILECT'::varchar(8), 'COPAXONE'::varchar(8)])) AND (EXISTS ( SELECT 1
 FROM datamart.prescriber_combined_demographics pd
 WHERE (pd.ims_id = d.ims_id))))
 GROUP BY d.ims_id,
          d.decile_name,
          d.decile_trx_count_6_mo UNION ALL  SELECT d.ims_id AS hcp_id,
        d.decile_name,
        d.decile_trx_count_6_mo AS decile_value
 FROM datamart.rx_deciles d
 WHERE (d.decile_name = ANY (ARRAY['TIRF TOTAL'::varchar(22), 'COMBO SAO TOTAL'::varchar(22), 'TOTAL OPIOID MARKET'::varchar(22), 'LAO TOTAL'::varchar(22), 'PURE SAO TOTAL'::varchar(22), 'BRANDED SLEEP/SEDATIVE'::varchar(22), 'TOTAL MUSCLE RELAXANTS'::varchar(22)]))
 GROUP BY d.ims_id,
          d.decile_name,
          d.decile_trx_count_6_mo;

CREATE  VIEW outbound.zzz_zs_agile_mkt_fentora_obq_copay_redemption AS
 SELECT c.physician_tvcmid AS TVCMID,
        cm_ims.id_num AS IMS_ID,
        cm_vv.id_num AS VEEVA_ACCOUNT_ID,
        c.program_number AS ASI_PROGRAM_NUM,
        cvp.program_description AS PROGRAM_DESC,
        c.copay_card_number AS COPAY_CARD_NUM,
        c.physician_zip AS ZIP_CODE,
        to_char(c.fill_date, 'MM/DD/YYYY'::varchar(10)) AS FILL_DATE,
        brand.brand_name AS BRAND_NAME,
        c.basket_name AS DRUG_DESC,
        c.quantity AS QTY
 FROM ((((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.redemption_type = cvp.redemption_type) AND (c.program_number = cvp.program_number)))) JOIN ( SELECT bp.basket_id AS prod_basket_id,
        bb.basket_id AS brand_basket_id,
        bb.name AS brand_name
 FROM ((product.basket bp JOIN product.basket_item bi ON (((bp.basket_id = bi.entity_id) AND (bp.basket_type = 'product'::varchar(7))))) JOIN product.basket bb ON (((bb.basket_id = bi.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.prod_basket_id))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'IMS_ID'::varchar(6))
 GROUP BY tvcmid_xref.tvcmid) cm_ims ON ((c.physician_tvcmid = cm_ims.tvcmid))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'VEEVA_ID'::varchar(8))
 GROUP BY tvcmid_xref.tvcmid) cm_vv ON ((c.physician_tvcmid = cm_vv.tvcmid)))
 WHERE ((c.basket_name ~~ '%FENTORA%'::varchar(9)) AND (c.redemption_type = 'COPAY'::varchar(5)) AND (c.report_frequency = 'MONTH'::varchar(5)) AND (c.physician_tvcmid IS NOT NULL) AND (c.fill_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (c.fill_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))));

CREATE  VIEW outbound.zzz_zs_agile_mkt_fentora_obq_voucher_redemption AS
 SELECT c.physician_tvcmid AS TVCMID,
        cm_ims.id_num AS IMS_ID,
        cm_vv.id_num AS VEEVA_ACCOUNT_ID,
        c.program_number AS ASI_PROGRAM_NUM,
        cvp.program_description AS PROGRAM_DESC,
        c.copay_card_number AS VOUCHER_NUM,
        c.physician_zip AS ZIP_CODE,
        to_char(c.fill_date, 'MM/DD/YYYY'::varchar(10)) AS FILL_DATE,
        brand.brand_name AS BRAND_NAME,
        c.basket_name AS DRUG_DESC,
        c.quantity AS QTY
 FROM ((((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.redemption_type = cvp.redemption_type) AND (c.program_number = cvp.program_number)))) JOIN ( SELECT bp.basket_id AS prod_basket_id,
        bb.basket_id AS brand_basket_id,
        bb.name AS brand_name
 FROM ((product.basket bp JOIN product.basket_item bi ON (((bp.basket_id = bi.entity_id) AND (bp.basket_type = 'product'::varchar(7))))) JOIN product.basket bb ON (((bb.basket_id = bi.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.prod_basket_id))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'IMS_ID'::varchar(6))
 GROUP BY tvcmid_xref.tvcmid) cm_ims ON ((c.physician_tvcmid = cm_ims.tvcmid))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'VEEVA_ID'::varchar(8))
 GROUP BY tvcmid_xref.tvcmid) cm_vv ON ((c.physician_tvcmid = cm_vv.tvcmid)))
 WHERE ((c.basket_name ~~ '%FENTORA%'::varchar(9)) AND (c.redemption_type = 'VOUCHER'::varchar(7)) AND (c.report_frequency = 'MONTH'::varchar(5)) AND (c.physician_tvcmid IS NOT NULL) AND (c.fill_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (c.fill_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))));

CREATE  VIEW outbound.zzz_v_cmop_rx AS
 SELECT cr.station_number AS STATION_NUMBER,
        cr.va_product AS VA_PRODUCT,
        0 AS PRODUCT_ID,
        CASE WHEN ((b.teva_product_code IS NULL) AND (cr.va_product ~~ 'LEVONORGESTREL%'::varchar(15))) THEN 'TW0900'::varchar(6) WHEN ((b.teva_product_code IS NULL) AND (cr.va_product ~~ 'MOMETASONE FUROATE%'::varchar(19))) THEN 'TR0900'::varchar(6) WHEN ((b.teva_product_code IS NULL) AND (cr.va_product ~~ 'ESTROGENS,CONJUGATED%'::varchar(21))) THEN 'TW0900'::varchar(6) WHEN ((b.teva_product_code IS NULL) AND (cr.va_product ~~ 'BECLOMETHASONE DIPROPIONATE%'::varchar(28))) THEN 'TR0900'::varchar(6) WHEN ((b.teva_product_code IS NULL) AND (cr.va_product ~~ 'INTERFERON BETA%'::varchar(16))) THEN '600230'::varchar(6) ELSE b.teva_product_code END AS PRODUCT_CODE,
        (add_months(cr.data_month, (-1)) + 1) AS MONTH,
        cr.total_rxs_normalized AS TRX_CNT,
        cr.cmop_rxs_normalized AS CMOP_CNT,
        cr.total_quantity AS TRX_QTY,
        cr.cmop_quantity AS CMOP_QTY,
        ((cr.rxs_30_days)::int)::varchar AS CNT_30_DAY_RX,
        cr.id AS ID
 FROM ((datamart.cmop_rx cr JOIN ( SELECT a.month_ending,
        a.month_bucket
 FROM ( SELECT last_day(cmop_rx.data_month) AS month_ending,
        rank() OVER (ORDER BY last_day(cmop_rx.data_month) DESC) AS month_bucket
 FROM datamart.cmop_rx
 GROUP BY last_day(cmop_rx.data_month)) a
 WHERE ((a.month_bucket >= 1) AND (a.month_bucket <= 24))) mth ON ((last_day(cr.data_month) = mth.month_ending))) LEFT  JOIN product.basket b ON ((cr.basket_id = b.basket_id)))
 WHERE (cr.va_product IS NOT NULL);

CREATE  VIEW outbound.zzz_asi_market_access_w AS
SELECT A.zip, A.state, A.payer_plan_num, A.report_num, A.ims_product_group_num, A.data_month, A.nrx_001, A.nrx_002, A.nrx_003, A.nrx_004, A.nrx_005, A.nrx_006, A.nrx_007, A.nrx_008, A.nrx_009, A.nrx_010, A.nrx_011, A.nrx_012, A.nrx_013, A.nrx_014, A.nrx_015, A.nrx_016, A.nrx_017, A.nrx_018, A.nrx_019, A.nrx_020, A.nrx_021, A.nrx_022, A.nrx_023, A.nrx_024, A.trx_001, A.trx_002, A.trx_003, A.trx_004, A.trx_005, A.trx_006, A.trx_007, A.trx_008, A.trx_009, A.trx_010, A.trx_011, A.trx_012, A.trx_013, A.trx_014, A.trx_015, A.trx_016, A.trx_017, A.trx_018, A.trx_019, A.trx_020, A.trx_021, A.trx_022, A.trx_023, A.trx_024 FROM ((SELECT coalesce(d.zip, o.zip, pcd.ptr_zip) AS zip, coalesce(d.state, o.state, pcd.ptr_state, mpzd.state) AS state, rx.payer_plan_number AS payer_plan_num, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END AS report_num, rx.ims_product_group AS ims_product_group_num, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) AS data_month, sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (((((datamart.prescriber_rx rx JOIN outbound.month_rollup_and_bucket iwb ON ((rx.rollup_month = iwb.month_ending))) LEFT JOIN (SELECT market_presc_zip_divisor.ims_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.state FROM outbound.market_presc_zip_divisor GROUP BY market_presc_zip_divisor.ims_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.state) mpzd ON (((rx.ims_id = mpzd.ims_id) AND (rx.ims_client_number = mpzd.ims_client_number) AND (rx.ims_report_number_cnt = mpzd.ims_report_number)))) LEFT JOIN (SELECT hcp_demo.tvcmid, hcp_demo.state_code AS state, hcp_demo.zip FROM datamart.customer_hcp_demographics hcp_demo WHERE (hcp_demo.file_id = (SELECT max(customer_hcp_demographics.file_id) AS MAX FROM datamart.customer_hcp_demographics))) d ON ((rx.tvcmid = d.tvcmid))) LEFT JOIN (SELECT hco_demo.tvcmid, hco_demo.state_code AS state, hco_demo.zip FROM datamart.customer_hco_demographics hco_demo WHERE (hco_demo.file_id = (SELECT max(customer_hco_demographics.file_id) AS MAX FROM datamart.customer_hco_demographics))) o ON ((rx.tvcmid = o.tvcmid))) LEFT JOIN (SELECT rnk.ims_id, rnk.ptr_state, rnk.ptr_zip FROM (SELECT DISTINCT prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source) AS rnk FROM datamart.prescriber_combined_demographics ORDER BY prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source)) rnk WHERE (rnk.rnk = 1)) pcd ON ((pcd.ims_id = rx.ims_id))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_report_number_cnt = ANY (ARRAY['1'::varchar(1), '2'::varchar(1), '3'::varchar(1), '4'::varchar(1), '5'::varchar(1), '6'::varchar(1), '68'::varchar(2)])) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9))) GROUP BY coalesce(d.zip, o.zip, pcd.ptr_zip), coalesce(d.state, o.state, pcd.ptr_state, mpzd.state), rx.payer_plan_number, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END, rx.ims_product_group, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) UNION ALL SELECT CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END AS ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END AS payer_plan_num, '55'::varchar(2) AS report_num, pg.ims_product_group AS ims_product_group_num, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x) AS data_month, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((datamart.specialty_pharmacy_shipment sp JOIN (SELECT month_rollup_and_bucket.month_ending, month_rollup_and_bucket.month_bucket FROM outbound.month_rollup_and_bucket) mth ON ((last_day(sp.ship_date) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source) pg ON (((pg.basket_id = sp.basket_id) AND (pg.data_source = sp.specialty_pharmacy_data_source)))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['Prime Therapeutics'::varchar(18), 'Prime Therapeutics'::varchar(18)])) AND (sp.ims_id IS NOT NULL)) GROUP BY CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END, pg.ims_product_group, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x)) UNION ALL SELECT CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END AS ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END AS payer_plan_num, '55'::varchar(2) AS report_num, pg.ims_product_group AS ims_product_group_num, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x) AS data_month, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((datamart.specialty_pharmacy_shipment sp JOIN (SELECT month_rollup_and_bucket.month_ending, month_rollup_and_bucket.month_bucket FROM outbound.month_rollup_and_bucket) mth ON ((add_months(last_day(sp.ship_date), 1) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source) pg ON (((pg.basket_id = sp.basket_id) AND (pg.data_source = sp.specialty_pharmacy_data_source)))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['OptumRx'::varchar(7), 'OptumRx'::varchar(7)])) AND (sp.ims_id IS NOT NULL)) GROUP BY CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END, pg.ims_product_group, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x)) A;

CREATE  VIEW outbound.zzz_asi_rx_by_market_ms AS
(SELECT rx.market_name, rx.ims_client_number AS ims_client_num, rx.ims_report_number_cnt AS ims_report_num, rx.ims_zip_other AS zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id, rx.ims_specialty AS specialty, rx.payer_plan_number AS plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.ims_rx_type AS rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num, NULL AS filler_01, axd.ims_me_num AS me_num, rx.prescriber_last_name AS last_name, rx.prescriber_first_name AS first_name, axd.ims_middle_name AS middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address, axd.ims_city AS city, axd.ims_state AS state, axd.ims_zip AS zip, replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data, rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other)))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '2'::varchar(1)) AND (rx.report_frequency = 'MONTH'::varchar(5))) GROUP BY rx.market_name, rx.ims_client_number, rx.ims_report_number_cnt, rx.ims_zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END, rx.ims_specialty, axd.ims_me_num, rx.payer_plan_number, btrim(to_char(rx.sales_category, '00'::varchar(2))), rx.ims_rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))), rx.prescriber_last_name, rx.prescriber_first_name, axd.ims_middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar), axd.ims_city, axd.ims_state, axd.ims_zip, replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar), rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) UNION ALL SELECT pg.market_name, '632'::varchar(3) AS ims_client_num, '2'::varchar(2) AS ims_report_num, rx.ims_zip AS zip_other, sp.ims_id, rx.ims_specialty AS specialty, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END AS plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pg.ims_product_group AS ims_product_group_num, NULL AS filler_01, rx.ims_me_num AS me_num, rx.ims_last_name AS last_name, rx.ims_first_name AS first_name, rx.ims_middle_name AS middle_name, rx.ims_address AS address, rx.ims_city AS city, rx.ims_state AS state_code, rx.ims_zip AS zip, NULL AS supplemental_data, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3 MAIL ORDER DATA UNSPEC'::varchar(25) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3 TYSABRI MAIL ORDER DATA UNSPEC'::varchar(33) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME MAIL ORDER DATA UNSPEC'::varchar(28) ELSE NULL END AS plan_name, to_char(mth2.data_date, 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((((datamart.specialty_pharmacy_shipment sp JOIN outbound.month_rollup_and_bucket mth ON ((last_day(sp.comp_month) = mth.month_ending))) JOIN (SELECT max(month_rollup_and_bucket.month_ending) AS data_date FROM outbound.month_rollup_and_bucket) mth2 ON (true)) JOIN reference.asi_outbound_ims_product_group_mapping pg ON (((sp.specialty_pharmacy_data_source = pg.data_source) AND (sp.basket_id = pg.basket_id) AND (pg.market_name = 'MS MARKET'::varchar(9))))) LEFT JOIN (SELECT a.ims_last_name, a.ims_first_name, a.ims_middle_name, a.ims_address, a.ims_city, a.ims_state, a.ims_zip, a.ims_client_number, a.ims_me_num, a.ims_id, a.ims_specialty, a.rnk FROM (SELECT axd.ims_last_name, axd.ims_first_name, axd.ims_middle_name, axd.ims_address, axd.ims_city, axd.ims_state, axd.ims_zip, axd.ims_client_number, axd.ims_me_num, axd.ims_id, axd.ims_specialty, row_number() OVER (PARTITION BY axd.ims_id ORDER BY axd.ims_specialty) AS rnk FROM outbound.asi_xponent_demographics axd) a WHERE (a.rnk = 1)) rx ON (((rx.ims_id = sp.ims_id) AND (rx.ims_client_number = '632'::varchar(3))))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['Prime Therapeutics'::varchar(18), 'OptumRx'::varchar(7)])) AND (sp.ims_id IS NOT NULL)) GROUP BY pg.market_name, sp.ims_id, rx.ims_specialty, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END, pg.ims_product_group, rx.ims_me_num, rx.ims_last_name, rx.ims_first_name, rx.ims_middle_name, rx.ims_address, rx.ims_city, rx.ims_state, rx.ims_zip, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3 MAIL ORDER DATA UNSPEC'::varchar(25) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3 TYSABRI MAIL ORDER DATA UNSPEC'::varchar(33) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME MAIL ORDER DATA UNSPEC'::varchar(28) ELSE NULL END, to_char(mth2.data_date, 'MMDDYY'::varchar(6))) UNION ALL SELECT pg.market_name, '632'::varchar(3) AS ims_client_num, '2'::varchar(2) AS ims_report_num, cm.zip AS zip_other, NULL AS ims_id, '01N'::varchar(3) AS specialty, 'CMOP000000'::varchar(10) AS payer_plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pg.ims_product_group AS ims_product_group_num, NULL AS filler_01, '0'::varchar(1) AS me_num, 'NATIONAL ASSIGNMENT'::varchar(19) AS last_name, NULL AS first_name, NULL AS middle_name, NULL AS address, NULL AS city, NULL AS state, '00001'::varchar(5) AS zip, NULL AS supplemental_data, 'VA DATA UNSPEC'::varchar(14) AS plan_name, to_char(mth2.data_date, 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_024 FROM (((datamart.cmop_rx cm JOIN outbound.month_rollup_and_bucket mth ON ((last_day(cm.comp_month) = mth.month_ending))) JOIN (SELECT max(month_rollup_and_bucket.month_ending) AS data_date FROM outbound.month_rollup_and_bucket) mth2 ON (true)) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group FROM reference.asi_outbound_ims_product_group_mapping WHERE ((asi_outbound_ims_product_group_mapping.data_source = 'CMOP'::varchar(4)) AND (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9))) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group) pg ON ((pg.basket_id = cm.basket_id))) WHERE ((mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (cm.total_rxs_normalized <> 0::numeric(18,0))) GROUP BY pg.market_name, cm.zip, pg.ims_product_group, to_char(mth2.data_date, 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.pdrp AS
 SELECT d.ims_id AS IMS_ID,
        coalesce(d.dea_num, dea.id_num) AS DEA_NUM,
        d.last_name AS LAST_NAME,
        d.first_name AS FIRST_NAME,
        d.middle_name AS MID_NAME,
        ((((d.ptr_address_1 || ' '::varchar(1)) || d.ptr_address_2) || ' '::varchar(1)) || d.ptr_address_3) AS ADDRESS,
        d.ptr_city AS CITY,
        d.ptr_state AS STATE,
        d.ptr_zip AS ZIP,
        d.npi AS NPI
 FROM ((datamart.prescriber_combined_demographics d JOIN ( SELECT a.tvcmid,
        a.flag_type,
        a.flag_value
 FROM ( SELECT customer_level_flags.tvcmid,
        customer_level_flags.flag_type,
        customer_level_flags.flag_value,
        customer_level_flags.flag_effective_start_date,
        row_number() OVER (PARTITION BY customer_level_flags.tvcmid ORDER BY customer_level_flags.flag_effective_start_date DESC NULLS LAST, customer_level_flags.flag_value DESC) AS rnk
 FROM datamart.customer_level_flags
 WHERE (customer_level_flags.flag_type = 'PDRP'::varchar(4))) a
 WHERE (a.rnk = 1)) clf ON (((d.tvcmid = clf.tvcmid) AND (clf.flag_type = 'PDRP'::varchar(4)) AND (clf.flag_value = 'Y'::varchar(1))))) LEFT  JOIN ( SELECT b.tvcmid,
        b.id_num,
        b.state
 FROM ( SELECT tvcmid_xref.tvcmid,
        tvcmid_xref.id_num,
        tvcmid_xref.id_type,
        tvcmid_xref.state,
        row_number() OVER (PARTITION BY tvcmid_xref.tvcmid, tvcmid_xref.state ORDER BY tvcmid_xref.id_num) AS rnk
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'DEA_NUM'::varchar(7))) b
 WHERE (b.rnk = 1)) dea ON (((d.tvcmid = dea.tvcmid) AND (d.ptr_state = dea.state))))
 GROUP BY d.ims_id,
          coalesce(d.dea_num, dea.id_num),
          d.last_name,
          d.first_name,
          d.middle_name,
          ((((d.ptr_address_1 || ' '::varchar(1)) || d.ptr_address_2) || ' '::varchar(1)) || d.ptr_address_3),
          d.ptr_city,
          d.ptr_state,
          d.ptr_zip,
          d.npi;

CREATE  VIEW outbound.zzz_asi_patient_month AS
 SELECT pmc.tvcmid,
        pmc.ims_id,
        pmc.npi,
        coalesce(vvid.veeva_account_id, pmc.ims_id) AS veeva_account_id,
        pmc.ims_surrogate_patient_id,
        pmc.basket_name AS product_name,
        pmc.indication,
        pmc.dispense_type,
        to_char(pmc.rollup_shipment_month, 'YYYYMMDD'::varchar(8)) AS rollup_shipment_month,
        (pmc.patient_months)::numeric(32,3) AS patient_months
 FROM ((datamart.patient_months_count pmc LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS veeva_account_id
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'VEEVA_ID'::varchar(8))
 GROUP BY tvcmid_xref.tvcmid) vvid ON ((pmc.tvcmid = vvid.tvcmid))) JOIN ( SELECT to_char(ims_week_buckets.month_ending, 'YYYYMMDD'::varchar(8)) AS full_month
 FROM integration.ims_week_buckets
 WHERE (ims_week_buckets.full_month = 'Y'::varchar(1))
 GROUP BY to_char(ims_week_buckets.month_ending, 'YYYYMMDD'::varchar(8))) fm ON ((to_char(pmc.rollup_shipment_month, 'YYYYMMDD'::varchar(8)) = fm.full_month)))
 WHERE (pmc.approved_indication = 'Y'::varchar(1))
 ORDER BY pmc.tvcmid,
          pmc.ims_surrogate_patient_id;

CREATE  VIEW outbound.zzz_generic_roster AS
 SELECT rep.employee_id AS TevaID,
        rep.territory_number AS Terr_id,
        rep.territory_name AS TerritoryName,
        rep.sales_force_id AS SalesForceID,
        rep.first_name AS FirstName,
        rep.middle_name AS MiddleName,
        rep.preferred_name AS PreferredName,
        rep.last_name AS LastName,
        replace(((((rep.first_name || ' '::varchar(1)) || coalesce(rep.middle_name, ''::varchar)) || ' '::varchar(1)) || rep.last_name), '  '::varchar(2), ' '::varchar(1)) AS FullName,
        rep.title AS Title,
        rep.hr_status AS RepStatus,
        CASE WHEN (upper(rep.reg_contract) = 'EX'::varchar(2)) THEN 'Contract'::varchar(8) ELSE rep.rep_type END AS RepType,
        ''::varchar AS Contractor,
        rep.email AS Email,
        mgr.employee_id AS ManagerID,
        mgr.first_name AS ManagerFirstName,
        coalesce(mgr.middle_name, ''::varchar) AS ManagerMiddleName,
        mgr.last_name AS ManagerLastName,
        replace(((((mgr.first_name || ' '::varchar(1)) || coalesce(mgr.middle_name, ''::varchar)) || ' '::varchar(1)) || mgr.last_name), '  '::varchar(2), ' '::varchar(1)) AS ManagerFullName,
        rep.business_address_line1 AS BusinessAddress1,
        rep.business_address_line2 AS BusinessAddress2,
        ''::varchar AS BusinessAddress3,
        rep.business_city AS BusinessAddressCity,
        rep.business_state AS BusinessAddressState,
        rep.business_zip AS BusinessZip,
        rep.business_country AS BusinessAddressCtry,
        'Active'::varchar(6) AS BusinessAddressStatus,
        rep.shipping_address_line1 AS ShippingAddress1,
        rep.shipping_address_line2 AS ShippingAddress2,
        ''::varchar AS ShippingAddress3,
        rep.shipping_city AS ShippingAddressCity,
        rep.shipping_state AS ShippingAddressState,
        rep.shipping_zip AS ShippingZip,
        rep.shipping_country AS ShippingAddressCtry,
        'Active'::varchar(6) AS ShippingAddressStatus,
        rep.samplestorage_address_line1 AS SampleStorageAddress1,
        rep.samplestorage_address_line2 AS SampleStorageAddress2,
        rep.samplestorage_address_line3 AS SampleStorageAddress3,
        rep.samplestorage_city AS SampleStorageAddressCity,
        rep.samplestorage_state AS SampleStorageAddressState,
        rep.samplestorage_zip AS SampleStorageAddressZip,
        rep.samplestorage_country AS SampleStorageAddressCtry,
        'Active'::varchar(6) AS SampleStorageAddressStatus,
        rep.business_phone AS BusinessPhone,
        rep.mobile_phone AS MobilePhone,
        rep.home_phone AS HomePhone,
        rep.hire_date AS HireDate,
        rep.username AS LoginID,
        'Primary'::varchar(7) AS TerritoryAssignment,
        substr(('0'::varchar(1) || rep.birth_month_day), ((length(('0'::varchar(1) || rep.birth_month_day)) - 4) + 1), 4) AS BirthMonthDay
 FROM (datamart.roster rep LEFT  JOIN datamart.roster mgr ON ((mgr.employee_id = rep.mngr_employee_id)))
 WHERE ((rep.employee_id IS NOT NULL) AND (rep.hr_status = 'Active'::varchar(6)) AND (rep.territory_number IS NOT NULL) AND (rep.sales_force_id <> ALL (ARRAY['TWH'::varchar(3), 'TX'::varchar(2)])) AND (rep.calculated_rep_type <> 'CONTRACT'::varchar(8)))
 GROUP BY rep.employee_id,
          rep.territory_number,
          rep.territory_name,
          rep.sales_force_id,
          rep.first_name,
          rep.middle_name,
          rep.preferred_name,
          rep.last_name,
          replace(((((rep.first_name || ' '::varchar(1)) || coalesce(rep.middle_name, ''::varchar)) || ' '::varchar(1)) || rep.last_name), '  '::varchar(2), ' '::varchar(1)),
          rep.title,
          rep.hr_status,
          CASE WHEN (upper(rep.reg_contract) = 'EX'::varchar(2)) THEN 'Contract'::varchar(8) ELSE rep.rep_type END,
          ''::varchar,
          rep.email,
          mgr.employee_id,
          mgr.first_name,
          coalesce(mgr.middle_name, ''::varchar),
          mgr.last_name,
          replace(((((mgr.first_name || ' '::varchar(1)) || coalesce(mgr.middle_name, ''::varchar)) || ' '::varchar(1)) || mgr.last_name), '  '::varchar(2), ' '::varchar(1)),
          rep.business_address_line1,
          rep.business_address_line2,
          rep.business_city,
          rep.business_state,
          rep.business_zip,
          rep.business_country,
          'Active'::varchar(6),
          rep.shipping_address_line1,
          rep.shipping_address_line2,
          rep.shipping_city,
          rep.shipping_state,
          rep.shipping_zip,
          rep.shipping_country,
          rep.samplestorage_address_line1,
          rep.samplestorage_address_line2,
          rep.samplestorage_address_line3,
          rep.samplestorage_city,
          rep.samplestorage_state,
          rep.samplestorage_zip,
          rep.samplestorage_country,
          rep.business_phone,
          rep.mobile_phone,
          rep.home_phone,
          rep.hire_date,
          rep.username,
          'Primary'::varchar(7),
          substr(('0'::varchar(1) || rep.birth_month_day), ((length(('0'::varchar(1) || rep.birth_month_day)) - 4) + 1), 4);

CREATE  VIEW outbound.zzz_asi_rx_by_market_onc AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        coalesce(rx.payer_plan_number, 'NOPLANCODE'::varchar(10)) AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_001,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_002,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_003,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_004,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_005,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_006,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_007,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_008,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_009,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_010,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_011,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_012,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_013,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_014,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_015,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_016,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_017,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_018,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_019,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_020,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_021,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_022,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_023,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_024,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_001,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_002,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_003,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_004,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_005,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_006,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_007,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_008,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_009,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_010,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_011,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_012,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_013,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_014,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_015,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_016,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_017,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_018,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_019,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_020,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_021,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_022,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_023,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_024
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON ((rx.rollup_month = mth.month_ending))) JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number <=> axd.ims_client_number) AND (rx.ims_report_number_cnt <=> axd.ims_report_number) AND (rx.ims_id <=> axd.ims_id) AND (rx.ims_product_group <=> axd.ims_product_group) AND (rx.ims_specialty <=> axd.ims_specialty) AND (rx.ims_zip_other <=> axd.ims_zip_other))))
 WHERE ((rx.rollup_flag IS NULL) AND (rx.ims_client_number = '994'::varchar(3)) AND (rx.ims_report_number_cnt = '18'::varchar(2)) AND (rx.ims_report_number_qty = '17'::varchar(2)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.zs_access_monitor_control_file_oncology AS
 SELECT 'TEVA'::varchar(4) AS company,
        c.sales_force_id,
        c.sales_force_id AS sales_team,
        count(DISTINCT c.rep_id) AS num_reps,
        count(DISTINCT c.territory_num) AS num_terrs,
        sum(c.p1_calls_mth1) AS p1_calls_mth1,
        sum(c.p1_calls_mth2) AS p1_calls_mth2,
        sum(c.p1_calls_mth3) AS p1_calls_mth3,
        sum(c.p1_calls_mth4) AS p1_calls_mth4,
        sum(c.p1_calls_mth5) AS p1_calls_mth5,
        sum(c.p1_calls_mth6) AS p1_calls_mth6,
        sum(cp.plan_calls) AS total_planned_calls,
        count(c.tvcmid) AS total_records
 FROM ((( SELECT c.sales_force_id,
        c.territory_num,
        c.rep_id,
        c.tvcmid,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6
 FROM ( SELECT c.sales_force_id,
        c.tvcmid,
        c.territory_number AS territory_num,
        c.rep_id,
        d.product,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(1) AS pri_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1))
 GROUP BY c.sales_force_id,
          c.tvcmid,
          c.territory_number,
          c.rep_id,
          d.product,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.sales_force_id,
          c.territory_num,
          c.rep_id,
          c.tvcmid) c JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT cp.tvcmid,
        sum(cp.p1) AS plan_calls
 FROM datamart.call_plan cp
 WHERE (cp.sales_force_id = 'TO'::varchar(2))
 GROUP BY cp.tvcmid) cp ON ((c.tvcmid = cp.tvcmid)))
 WHERE (c.sales_force_id = 'TO'::varchar(2))
 GROUP BY c.sales_force_id;

CREATE  VIEW outbound.zs_access_monitor_control_file_cns AS
 SELECT 'TEVA'::varchar(4) AS company,
        d.sales_force_id,
        d.sales_force_id AS sales_team,
        count(DISTINCT d.rep_id) AS num_reps,
        count(DISTINCT d.territory_number) AS num_terrs,
        sum(d.p1_calls_mth1) AS p1_calls_mth1,
        sum(d.p1_calls_mth2) AS p1_calls_mth2,
        sum(d.p1_calls_mth3) AS p1_calls_mth3,
        sum(d.p1_calls_mth4) AS p1_calls_mth4,
        sum(d.p1_calls_mth5) AS p1_calls_mth5,
        sum(d.p1_calls_mth6) AS p1_calls_mth6,
        sum(d.plan_calls) AS total_planned_calls,
        count(d.tvcmid) AS total_records
 FROM ( SELECT calls_by_detail.sales_force_id,
        calls_by_detail.territory_number,
        calls_by_detail.rep_id,
        calls_by_detail.tvcmid,
        calls_by_detail.p1_calls_mth1,
        calls_by_detail.p1_calls_mth2,
        calls_by_detail.p1_calls_mth3,
        calls_by_detail.p1_calls_mth4,
        calls_by_detail.p1_calls_mth5,
        calls_by_detail.p1_calls_mth6,
        0 AS plan_calls
 FROM ( SELECT c.sales_force_id,
        c.territory_number,
        c.rep_id,
        c.tvcmid,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6
 FROM ( SELECT c.sales_force_id,
        c.tvcmid,
        c.territory_number,
        c.rep_id,
        d.product,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(1) AS pri_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1))
 GROUP BY c.sales_force_id,
          c.tvcmid,
          c.territory_number,
          c.rep_id,
          d.product,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.sales_force_id,
          c.territory_number,
          c.rep_id,
          c.tvcmid) calls_by_detail UNION  SELECT cp.sales_force_id,
        NULL AS territory_number,
        NULL AS rep_id,
        0 AS tvcmid,
        0 AS p1_calls_mth1,
        0 AS p1_calls_mth2,
        0 AS p1_calls_mth3,
        0 AS p1_calls_mth4,
        0 AS p1_calls_mth5,
        0 AS p1_calls_mth6,
        cp.plan_calls
 FROM ( SELECT cp.sales_force_id,
        sum(cp.p1) AS plan_calls
 FROM datamart.call_plan cp
 WHERE (cp.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)]))
 GROUP BY cp.sales_force_id) cp) d
 GROUP BY d.sales_force_id;

CREATE  VIEW outbound.zs_access_monitor_control_file_respiratory AS
 SELECT 'TEVA'::varchar(4) AS company,
        d.sales_force_id,
        d.sales_force_id AS sales_team,
        count(DISTINCT d.rep_id) AS num_reps,
        count(DISTINCT d.territory_number) AS num_terrs,
        sum(d.p1_calls_mth1) AS p1_calls_mth1,
        sum(d.p1_calls_mth2) AS p1_calls_mth2,
        sum(d.p1_calls_mth3) AS p1_calls_mth3,
        sum(d.p1_calls_mth4) AS p1_calls_mth4,
        sum(d.p1_calls_mth5) AS p1_calls_mth5,
        sum(d.p1_calls_mth6) AS p1_calls_mth6,
        sum(d.plan_calls) AS total_planned_calls,
        count(d.tvcmid) AS total_records
 FROM ( SELECT calls_by_detail.sales_force_id,
        calls_by_detail.territory_number,
        calls_by_detail.rep_id,
        calls_by_detail.tvcmid,
        calls_by_detail.p1_calls_mth1,
        calls_by_detail.p1_calls_mth2,
        calls_by_detail.p1_calls_mth3,
        calls_by_detail.p1_calls_mth4,
        calls_by_detail.p1_calls_mth5,
        calls_by_detail.p1_calls_mth6,
        0 AS plan_calls
 FROM ( SELECT c.sales_force_id,
        c.territory_number,
        c.rep_id,
        c.tvcmid,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6
 FROM ( SELECT c.sales_force_id,
        c.tvcmid,
        c.territory_number,
        c.rep_id,
        d.product,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(1) AS pri_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1))
 GROUP BY c.sales_force_id,
          c.tvcmid,
          c.territory_number,
          c.rep_id,
          d.product,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.sales_force_id,
          c.territory_number,
          c.rep_id,
          c.tvcmid) calls_by_detail UNION  SELECT cp.sales_force_id,
        NULL AS territory_number,
        NULL AS rep_id,
        0 AS tvcmid,
        0 AS p1_calls_mth1,
        0 AS p1_calls_mth2,
        0 AS p1_calls_mth3,
        0 AS p1_calls_mth4,
        0 AS p1_calls_mth5,
        0 AS p1_calls_mth6,
        cp.plan_calls
 FROM ( SELECT cp.sales_force_id,
        sum(cp.p1) AS plan_calls
 FROM datamart.call_plan cp
 WHERE (cp.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)]))
 GROUP BY cp.sales_force_id) cp) d
 GROUP BY d.sales_force_id;

CREATE  VIEW outbound.zs_access_monitor_calls_by_specialty_cns AS
SELECT 'TEVA'::varchar(4) AS company, x.specialty_code, d.prim_specialty, count(DISTINCT c.tvcmid) AS number_of_physicians_6mth FROM (((SELECT sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE (sfa_demographics.ims_id IS NOT NULL) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.tvcmid FROM datamart.sfa_call c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01))) GROUP BY c.tvcmid) c ON ((d.tvcmid = c.tvcmid))) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) GROUP BY d.prim_specialty, x.specialty_code ORDER BY x.specialty_code;

CREATE  VIEW outbound.zs_access_monitor_detailed_data_cns AS
SELECT 'TEVA'::varchar(4) AS company, c.sales_force_id, c.territory_num, NULL AS me_number, d.npi, d.VEEVA_ACCOUNT_ID AS veeva_account_id, c.tvcmid, d.ims_id, to_char(c.call_date, 'mm/dd/yyyy'::varchar(10)) AS call_date, c.basket_id AS product_id, c.product AS product_name, c.detail_position AS "position", d.ZIP AS physician_zip, x.specialty_code FROM ((((SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE ((sfa_demographics.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) AND (sfa_demographics.ims_id IS NOT NULL)) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.sales_force_id, c.tvcmid, c.territory_number AS territory_num, c.rep_id, d.basket_id, d.product, c.call_date, d.detail_position FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.sales_force_id, c.tvcmid, c.territory_number, c.rep_id, d.basket_id, d.product, c.call_date, d.detail_position) c ON (((d.tvcmid = c.tvcmid) AND (d.territory_num = c.territory_num)))) JOIN (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m ON (true)) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) WHERE (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) GROUP BY 'TEVA'::varchar(4), c.sales_force_id, c.territory_num, NULL, d.npi, d.VEEVA_ACCOUNT_ID, c.tvcmid, d.ims_id, to_char(c.call_date, 'mm/dd/yyyy'::varchar(10)), c.basket_id, c.product, c.detail_position, d.ZIP, x.specialty_code;

CREATE  VIEW outbound.zs_access_monitor_detailed_data_oncology AS
SELECT 'TEVA'::varchar(4) AS company, c.sales_force_id, c.territory_num, NULL AS me_number, d.npi, d.VEEVA_ACCOUNT_ID AS veeva_account_id, c.tvcmid, d.ims_id, to_char(c.call_date, 'mm/dd/yyyy'::varchar(10)) AS call_date, c.basket_id AS product_id, c.product AS product_name, c.detail_position AS "position", d.ZIP AS physician_zip, x.specialty_code FROM ((((SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL)) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.sales_force_id, c.tvcmid, c.territory_number AS territory_num, c.rep_id, d.basket_id, d.product, c.call_date, d.detail_position FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.sales_force_id, c.tvcmid, c.territory_number, c.rep_id, d.basket_id, d.product, c.call_date, d.detail_position) c ON (((d.tvcmid = c.tvcmid) AND (d.territory_num = c.territory_num)))) JOIN (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m ON (true)) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) WHERE (c.sales_force_id = 'TO'::varchar(2)) GROUP BY 'TEVA'::varchar(4), c.sales_force_id, c.territory_num, NULL, d.npi, d.VEEVA_ACCOUNT_ID, c.tvcmid, d.ims_id, to_char(c.call_date, 'mm/dd/yyyy'::varchar(10)), c.basket_id, c.product, c.detail_position, d.ZIP, x.specialty_code;

CREATE  VIEW outbound.zs_access_monitor_detailed_data_respiratory AS
SELECT 'TEVA'::varchar(4) AS company, c.sales_force_id, c.territory_num, NULL AS me_number, d.npi, d.VEEVA_ACCOUNT_ID AS veeva_account_id, c.tvcmid, d.ims_id, to_char(c.call_date, 'mm/dd/yyyy'::varchar(10)) AS call_date, c.basket_id AS product_id, c.product AS product_name, c.detail_position AS "position", d.ZIP AS physician_zip, x.specialty_code FROM ((((SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE ((sfa_demographics.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (sfa_demographics.ims_id IS NOT NULL)) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.sales_force_id, c.tvcmid, c.veeva_account_id, c.territory_number AS territory_num, c.rep_id, d.basket_id, d.product, c.call_date, d.detail_position FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.sales_force_id, c.tvcmid, c.veeva_account_id, c.territory_number, c.rep_id, d.basket_id, d.product, c.call_date, d.detail_position) c ON (((d.tvcmid = c.tvcmid) AND (d.territory_num = c.territory_num)))) JOIN (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m ON (true)) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) WHERE (c.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) GROUP BY 'TEVA'::varchar(4), c.sales_force_id, c.territory_num, NULL, d.npi, d.VEEVA_ACCOUNT_ID, c.tvcmid, d.ims_id, to_char(c.call_date, 'mm/dd/yyyy'::varchar(10)), c.basket_id, c.product, c.detail_position, d.ZIP, x.specialty_code;

CREATE  VIEW outbound.tp_physician_univ AS
 SELECT x.npi,
        x.dea_num,
        x.last_name,
        x.first_name,
        x.middle_name,
        x.address,
        x.city,
        x.state,
        x.zip
 FROM ( SELECT dc.npi,
        dc.dea_num,
        upper(dc.last_name) AS last_name,
        upper(dc.first_name) AS first_name,
        upper(dc.middle_name) AS middle_name,
        btrim(upper(((((coalesce(dc.ptr_address_1, ''::varchar) || ' '::varchar(1)) || coalesce(dc.ptr_address_2, ''::varchar)) || ' '::varchar(1)) || coalesce(dc.ptr_address_3, ''::varchar)))) AS address,
        upper(dc.ptr_city) AS city,
        dc.ptr_state AS state,
        dc.ptr_zip AS zip,
        row_number() OVER (PARTITION BY dc.sales_force_id, dc.npi ORDER BY dc.ptr_territory_num) AS rnk
 FROM datamart.prescriber_combined_demographics dc
 WHERE ((dc.ims_id IS NOT NULL) AND (dc.npi IS NOT NULL) AND (dc.sales_force_id = 'TP'::varchar(2)))) x
 WHERE (x.rnk = 1);

CREATE  VIEW outbound.zzz_asi_market_access_m AS
(SELECT coalesce(d.zip, o.zip, pcd.ptr_zip) AS zip, coalesce(d.state, o.state, pcd.ptr_state) AS state, rx.payer_plan_number AS payer_plan_num, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END AS report_num, rx.ims_product_group AS ims_product_group_num, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) AS data_month, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (((datamart.prescriber_rx rx LEFT JOIN (SELECT hcp_demo.tvcmid, hcp_demo.state_code AS state, hcp_demo.zip FROM datamart.customer_hcp_demographics hcp_demo) d ON ((rx.tvcmid = d.tvcmid))) LEFT JOIN (SELECT hco_demo.tvcmid, hco_demo.state_code AS state, hco_demo.zip FROM datamart.customer_hco_demographics hco_demo) o ON ((rx.tvcmid = o.tvcmid))) LEFT JOIN (SELECT rnk.ims_id, rnk.ptr_state, rnk.ptr_zip FROM (SELECT DISTINCT prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source) AS rnk FROM datamart.prescriber_combined_demographics ORDER BY prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source)) rnk WHERE (rnk.rnk = 1)) pcd ON ((pcd.ims_id = rx.ims_id))) WHERE ((rx.ims_report_number_cnt = ANY (ARRAY['2'::varchar(1), '6'::varchar(1), '14'::varchar(2), '16'::varchar(2), '81'::varchar(2)])) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'MONTH'::varchar(5))) GROUP BY coalesce(d.zip, o.zip, pcd.ptr_zip), coalesce(d.state, o.state, pcd.ptr_state), rx.payer_plan_number, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END, rx.ims_product_group, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) UNION ALL SELECT sp.ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END AS payer_plan_num, '55'::varchar(2) AS report_num, pg.ims_product_group AS ims_product_group_num, (SELECT to_char(month_rollup_and_bucket.month_ending, 'MM/YYYY'::varchar(7)) AS to_char FROM outbound.month_rollup_and_bucket WHERE (month_rollup_and_bucket.month_bucket = 1)) AS data_month, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((datamart.specialty_pharmacy_shipment sp JOIN outbound.month_rollup_and_bucket mth ON ((last_day(sp.comp_month) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source) pg ON (((pg.basket_id = sp.basket_id) AND (pg.data_source = sp.specialty_pharmacy_data_source)))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['Prime Therapeutics'::varchar(18), 'Prime T'::varchar(7)])) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (sp.ims_id IS NOT NULL)) GROUP BY sp.ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END, pg.ims_product_group, (SELECT to_char(month_rollup_and_bucket.month_ending, 'MM/YYYY'::varchar(7)) AS to_char FROM outbound.month_rollup_and_bucket WHERE (month_rollup_and_bucket.month_bucket = 1))) UNION ALL SELECT sp.ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END AS payer_plan_num, '55'::varchar(2) AS report_num, pg.ims_product_group AS ims_product_group_num, (SELECT to_char(month_rollup_and_bucket.month_ending, 'MM/YYYY'::varchar(7)) AS to_char FROM outbound.month_rollup_and_bucket WHERE (month_rollup_and_bucket.month_bucket = 1)) AS data_month, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((datamart.specialty_pharmacy_shipment sp JOIN outbound.month_rollup_and_bucket mth ON ((last_day(sp.ship_date) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source) pg ON (((pg.basket_id = sp.basket_id) AND (pg.data_source = sp.specialty_pharmacy_data_source)))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['OptumRx'::varchar(7), 'OptumRx'::varchar(7)])) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (sp.ims_id IS NOT NULL)) GROUP BY sp.ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END, pg.ims_product_group, (SELECT to_char(month_rollup_and_bucket.month_ending, 'MM/YYYY'::varchar(7)) AS to_char FROM outbound.month_rollup_and_bucket WHERE (month_rollup_and_bucket.month_bucket = 1));

CREATE  VIEW outbound.zzz_create_copay_voucher_program AS
 SELECT copay_voucher_program.redemption_type AS REDEMPTION_TYPE,
        copay_voucher_program.program_number AS ASI_PROGRAM_NUM,
        copay_voucher_program.program_description AS PROGRAM_DESC,
        NULL AS SALES_FORCE_ID,
        NULL AS PROGRAM_TYPE,
        NULL AS PRODUCT_NAME,
        NULL AS PROGRAM_START_DATE,
        NULL AS PROGRAM_END_DATE,
        NULL AS NUMBER_OF_TABLETS
 FROM reference.copay_voucher_program;

CREATE  VIEW outbound.i_bag_territory_product AS
( SELECT i_bag_territory_product_terr.territory_number,
        i_bag_territory_product_terr.bag_name,
        i_bag_territory_product_terr."position",
        i_bag_territory_product_terr.basket_name
 FROM ( SELECT bt.territory_number,
        b.bag_name,
        bp."position",
        bp.basket_name
 FROM ((reference.bag b JOIN reference.bag_territory bt ON ((b.bag_id = bt.bag_id))) JOIN reference.bag_product bp ON ((b.bag_id = bp.bag_id)))
 WHERE (((statement_timestamp())::timestamp >= b.first_valid_date) AND ((statement_timestamp())::timestamp <= b.last_valid_date) AND ((statement_timestamp())::timestamp >= bt.detail_first_valid_date) AND ((statement_timestamp())::timestamp <= bt.detail_last_valid_date))) i_bag_territory_product_terr UNION  SELECT i_bag_territory_product_mgr.territory_number,
        i_bag_territory_product_mgr.bag_name,
        i_bag_territory_product_mgr."position",
        i_bag_territory_product_mgr.basket_name
 FROM ( SELECT m.territory_number,
        (m.sales_force_id || 'MGR'::varchar(3)) AS bag_name,
        row_number() OVER (PARTITION BY m.territory_number ORDER BY p.basket_name) AS "position",
        p.basket_name
 FROM (( SELECT substr(i_bag_territory_product_terr.territory_number, 1, 2) AS sales_force_id,
        i_bag_territory_product_terr.basket_name
 FROM ( SELECT bt.territory_number,
        b.bag_name,
        bp."position",
        bp.basket_name
 FROM ((reference.bag b JOIN reference.bag_territory bt ON ((b.bag_id = bt.bag_id))) JOIN reference.bag_product bp ON ((b.bag_id = bp.bag_id)))
 WHERE (((statement_timestamp())::timestamp >= b.first_valid_date) AND ((statement_timestamp())::timestamp <= b.last_valid_date) AND ((statement_timestamp())::timestamp >= bt.detail_first_valid_date) AND ((statement_timestamp())::timestamp <= bt.detail_last_valid_date))) i_bag_territory_product_terr
 GROUP BY substr(i_bag_territory_product_terr.territory_number, 1, 2),
          i_bag_territory_product_terr.basket_name) p JOIN ( SELECT substr(i_bag_territory_product_terr.territory_number, 1, 2) AS sales_force_id,
        (substr(i_bag_territory_product_terr.territory_number, 1, 6) || '00'::varchar(2)) AS territory_number
 FROM ( SELECT bt.territory_number,
        b.bag_name,
        bp."position",
        bp.basket_name
 FROM ((reference.bag b JOIN reference.bag_territory bt ON ((b.bag_id = bt.bag_id))) JOIN reference.bag_product bp ON ((b.bag_id = bp.bag_id)))
 WHERE (((statement_timestamp())::timestamp >= b.first_valid_date) AND ((statement_timestamp())::timestamp <= b.last_valid_date) AND ((statement_timestamp())::timestamp >= bt.detail_first_valid_date) AND ((statement_timestamp())::timestamp <= bt.detail_last_valid_date))) i_bag_territory_product_terr
 GROUP BY substr(i_bag_territory_product_terr.territory_number, 1, 2),
          (substr(i_bag_territory_product_terr.territory_number, 1, 6) || '00'::varchar(2))) m ON ((p.sales_force_id = m.sales_force_id)))) i_bag_territory_product_mgr) UNION  SELECT terrs.territory_number,
        NULL AS bag_name,
        (90 + row_number() OVER (PARTITION BY terrs.territory_number ORDER BY sfpm.PRODUCT_NAME)) AS "position",
        sfpm.PRODUCT_NAME AS product_name
 FROM (reference.sales_force_product_metrics sfpm JOIN ( SELECT i_bag_territory_product_terr.territory_number
 FROM ( SELECT bt.territory_number,
        b.bag_name,
        bp."position",
        bp.basket_name
 FROM ((reference.bag b JOIN reference.bag_territory bt ON ((b.bag_id = bt.bag_id))) JOIN reference.bag_product bp ON ((b.bag_id = bp.bag_id)))
 WHERE (((statement_timestamp())::timestamp >= b.first_valid_date) AND ((statement_timestamp())::timestamp <= b.last_valid_date) AND ((statement_timestamp())::timestamp >= bt.detail_first_valid_date) AND ((statement_timestamp())::timestamp <= bt.detail_last_valid_date))) i_bag_territory_product_terr UNION  SELECT i_bag_territory_product_mgr.territory_number
 FROM ( SELECT m.territory_number,
        (m.sales_force_id || 'MGR'::varchar(3)) AS bag_name,
        row_number() OVER (PARTITION BY m.territory_number ORDER BY p.basket_name) AS "position",
        p.basket_name
 FROM (( SELECT substr(i_bag_territory_product_terr.territory_number, 1, 2) AS sales_force_id,
        i_bag_territory_product_terr.basket_name
 FROM ( SELECT bt.territory_number,
        b.bag_name,
        bp."position",
        bp.basket_name
 FROM ((reference.bag b JOIN reference.bag_territory bt ON ((b.bag_id = bt.bag_id))) JOIN reference.bag_product bp ON ((b.bag_id = bp.bag_id)))
 WHERE (((statement_timestamp())::timestamp >= b.first_valid_date) AND ((statement_timestamp())::timestamp <= b.last_valid_date) AND ((statement_timestamp())::timestamp >= bt.detail_first_valid_date) AND ((statement_timestamp())::timestamp <= bt.detail_last_valid_date))) i_bag_territory_product_terr
 GROUP BY substr(i_bag_territory_product_terr.territory_number, 1, 2),
          i_bag_territory_product_terr.basket_name) p JOIN ( SELECT substr(i_bag_territory_product_terr.territory_number, 1, 2) AS sales_force_id,
        (substr(i_bag_territory_product_terr.territory_number, 1, 6) || '00'::varchar(2)) AS territory_number
 FROM ( SELECT bt.territory_number,
        b.bag_name,
        bp."position",
        bp.basket_name
 FROM ((reference.bag b JOIN reference.bag_territory bt ON ((b.bag_id = bt.bag_id))) JOIN reference.bag_product bp ON ((b.bag_id = bp.bag_id)))
 WHERE (((statement_timestamp())::timestamp >= b.first_valid_date) AND ((statement_timestamp())::timestamp <= b.last_valid_date) AND ((statement_timestamp())::timestamp >= bt.detail_first_valid_date) AND ((statement_timestamp())::timestamp <= bt.detail_last_valid_date))) i_bag_territory_product_terr
 GROUP BY substr(i_bag_territory_product_terr.territory_number, 1, 2),
          (substr(i_bag_territory_product_terr.territory_number, 1, 6) || '00'::varchar(2))) m ON ((p.sales_force_id = m.sales_force_id)))) i_bag_territory_product_mgr) terrs ON ((terrs.territory_number ~~ (sfpm.SALES_FORCE_ID || '%'::varchar(1)))));

CREATE  VIEW outbound.mdm_hcp AS
 SELECT 'OPTMRX'::varchar(6) AS dsp_id,
        substr(replace((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100) AS dsp_hce_id,
        specialty_pharmacy_shipment.physician_first_name AS first_name,
        specialty_pharmacy_shipment.physician_middle_name AS middle_name,
        specialty_pharmacy_shipment.physician_last_name AS last_name,
        NULL AS prefix,
        NULL AS suffix,
        '1'::varchar(50) AS sub_type,
        NULL AS status_code,
        NULL::date AS year_of_birth,
        NULL::date AS year_of_death,
        NULL AS gender_code,
        NULL AS teva_specialty_code
 FROM datamart.specialty_pharmacy_shipment
 WHERE ((specialty_pharmacy_shipment.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (specialty_pharmacy_shipment.customer_type = 'HCP'::varchar(3)))
 GROUP BY 'OPTMRX'::varchar(6),
          substr(replace((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100),
          specialty_pharmacy_shipment.physician_first_name,
          specialty_pharmacy_shipment.physician_middle_name,
          specialty_pharmacy_shipment.physician_last_name,
          NULL,
          '1'::varchar(50),
          NULL::date UNION  SELECT a.dsp_id,
        substr(a.dsp_hce_id, 1, 100) AS dsp_hce_id,
        a.first_name,
        a.middle_name,
        a.last_name,
        a.prefix,
        a.suffix,
        a.sub_type,
        a.status_code,
        a.year_of_birth,
        a.year_of_death,
        a.gender_code,
        a.teva_specialty_code
 FROM ( SELECT 'PT'::varchar(2) AS dsp_id,
        replace(((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name), ' '::varchar(1), ''::varchar) AS dsp_hce_id,
        prime_rx.md_first_name AS first_name,
        NULL AS middle_name,
        prime_rx.md_last_name AS last_name,
        NULL AS prefix,
        NULL AS suffix,
        '1'::varchar(50) AS sub_type,
        NULL AS status_code,
        NULL::date AS year_of_birth,
        NULL::date AS year_of_death,
        NULL AS gender_code,
        NULL AS teva_specialty_code
 FROM cleansed.prime_rx
 GROUP BY 'PT'::varchar(2),
          replace(((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name), ' '::varchar(1), ''::varchar),
          prime_rx.md_first_name,
          NULL,
          prime_rx.md_last_name,
          '1'::varchar(50),
          NULL::date) a
 ORDER BY 1,
          2,
          3;

CREATE  VIEW outbound.sharepoint_roster_to AS
 SELECT sr.title,
        sr.territory
 FROM ( SELECT lower(r.username) AS title,
        r.territory_number AS territory
 FROM datamart.roster r
 WHERE ((r.username IS NOT NULL) AND (r.sales_force_id = 'TO'::varchar(2))) UNION  SELECT lower(r.username) AS title,
        (r.employee_id || '_'::varchar(1)) AS territory
 FROM datamart.roster r
 WHERE ((r.username IS NOT NULL) AND (r.sales_force_id = 'TO'::varchar(2)))) sr
 GROUP BY sr.title,
          sr.territory
 ORDER BY sr.title;

CREATE  VIEW outbound.zs_antimigraine_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.rollup_month,
        prescriber_rx.sales_category,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payer_name,
        prescriber_rx.plan_name,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.model,
        prescriber_rx.payment_method
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = 'ANTI-MIGRAINE MARKET'::varchar(20)) AND ((prescriber_rx.basket_name ~~ 'AIMOVIG%'::varchar(8)) OR (prescriber_rx.basket_name ~~ 'EMGALITY%'::varchar(9)) OR (prescriber_rx.basket_name ~~ 'AJOVY%'::varchar(6))) AND (prescriber_rx.rollup_flag IS NULL))
 ORDER BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.rollup_month,
          prescriber_rx.sales_category,
          prescriber_rx.payer_plan_number;

CREATE  VIEW outbound.zs_ajovy_activity_sample_request AS
 SELECT sfa_sample.sample_id,
        sfa_sample.call_id,
        sfa_sample.veeva_account_id,
        sfa_sample.ims_id,
        sfa_sample.call_date,
        sfa_sample.sales_force_id,
        sfa_sample.territory_number,
        sfa_sample.call_type,
        sfa_sample.attendee_type,
        sfa_sample.customer_type,
        sfa_sample.sample_type,
        sfa_sample.product_name,
        sfa_sample.sample_name,
        sfa_sample.sample_ndc,
        sfa_sample.basket_id,
        sfa_sample.basket_name,
        sfa_sample.qty,
        sfa_sample.zip_on_call,
        sfa_sample.employee_number,
        sfa_sample.tvcmid
 FROM datamart.sfa_sample
 WHERE ((sfa_sample.basket_name ~~ 'AJOVY%'::varchar(6)) AND (sfa_sample.sample_type = 'REQUEST'::varchar(7)))
 ORDER BY sfa_sample.call_date;

CREATE  VIEW outbound.connectiverx_ajovy_demographics AS
 SELECT a.sales_force_id,
        a.ptr_territory_num AS terr,
        b.reg,
        b.area,
        a.ims_id,
        a.npi,
        a.first_name,
        a.last_name,
        a.ptr_city,
        a.ptr_state,
        a.ptr_zip,
        a.specialty
 FROM datamart.prescriber_combined_demographics a, ( SELECT a.geography_number AS terr,
        b.geography_number AS reg,
        c.geography_number AS area
 FROM datamart.sales_geography a, datamart.sales_geography b, datamart.sales_geography c
 WHERE ((a.parent_geography_number = b.geography_number) AND (b.parent_geography_number = c.geography_number) AND (a.geography_type = 'Territory'::varchar(9)) AND (b.geography_type = 'Region'::varchar(6)) AND (c.geography_type = 'Area'::varchar(4)) AND (a.sales_force_id = ANY (ARRAY['TR'::varchar(2), 'TN'::varchar(2), 'TE'::varchar(2)])))
 GROUP BY a.geography_number,
          b.geography_number,
          c.geography_number) b
 WHERE ((a.ptr_territory_num = b.terr) AND (a.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TR'::varchar(2), 'TE'::varchar(2)])))
 GROUP BY a.sales_force_id,
          a.ptr_territory_num,
          b.reg,
          b.area,
          a.ims_id,
          a.npi,
          a.first_name,
          a.last_name,
          a.ptr_city,
          a.ptr_state,
          a.ptr_zip,
          a.specialty
 ORDER BY a.sales_force_id,
          a.ims_id;

CREATE  VIEW outbound.aptus_hcp_ajovy AS
 SELECT p.territory_number,
        p.tvcmid,
        d.last_name,
        d.first_name,
        d.credentials AS professional_designation,
        CASE WHEN (d.address_line1 ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || d.address_line1) || '"'::varchar(1)) ELSE d.address_line1 END AS address_line1,
        CASE WHEN (d.address_line2 ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || d.address_line2) || '"'::varchar(1)) ELSE d.address_line2 END AS address_line2,
        CASE WHEN (d.city ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || d.city) || '"'::varchar(1)) ELSE d.city END AS city,
        d.state,
        d.zip
 FROM (datamart.sfa_promotional_items p JOIN datamart.sfa_demographics d ON (((p.veeva_account_id = d.veeva_account_id) AND (p.territory_number = d.territory_number))))
 WHERE ((p.item_name ~~ 'FRE-40475%'::varchar(10)) AND (p.tvcmid IS NOT NULL))
 GROUP BY p.territory_number,
          p.tvcmid,
          d.last_name,
          d.first_name,
          d.credentials,
          CASE WHEN (d.address_line1 ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || d.address_line1) || '"'::varchar(1)) ELSE d.address_line1 END,
          CASE WHEN (d.address_line2 ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || d.address_line2) || '"'::varchar(1)) ELSE d.address_line2 END,
          CASE WHEN (d.city ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || d.city) || '"'::varchar(1)) ELSE d.city END,
          d.state,
          d.zip
 ORDER BY d.last_name,
          d.first_name;

CREATE  VIEW outbound.mcm_hcp_segmentation AS
 SELECT y.federation_id,
        y.tvcmid,
        y.veeva_account_id,
        y.npi,
        y.ims_id,
        y.me_number,
        y.first_name,
        y.last_name,
        y.middle_name,
        y.personal_suffix,
        y.medical_suffix,
        y.address_line_1,
        y.address_line_2,
        y.city,
        y.state,
        y.zip_code,
        y.state_license_state,
        y.state_license_number,
        y.state_license_expiration_date,
        y.sample_eligibility_code,
        y.primary_specialty_code,
        y.primary_specialty_description,
        y.primary_specialty_group_code,
        y.np_pa_flag,
        y.created_date
 FROM ( SELECT rank() OVER (PARTITION BY x.tvcmid ORDER BY x.veeva_account_id DESC, x.me_number DESC, x.state_license_number DESC, x.npi DESC) AS rank,
        x.federation_id,
        x.tvcmid,
        x.veeva_account_id,
        x.npi,
        x.ims_id,
        x.me_number,
        x.first_name,
        x.last_name,
        x.middle_name,
        x.personal_suffix,
        x.medical_suffix,
        x.address_line_1,
        x.address_line_2,
        x.city,
        x.state,
        x.zip_code,
        x.zip_code_extension,
        x.state_license_state,
        x.state_license_number,
        x.state_license_expiration_date,
        x.sample_eligibility_code,
        x.primary_specialty_code,
        x.primary_specialty_description,
        x.primary_specialty_group_code,
        x.primary_specialty_group_description,
        x.np_pa_flag,
        x.created_date
 FROM ( SELECT cmid.id_num AS federation_id,
        pcd.tvcmid,
        pcd.veeva_account_id,
        CASE WHEN (chd.tvcmid IS NULL) THEN pcd.npi ELSE chd.npi END AS npi,
        CASE WHEN (chd.tvcmid IS NULL) THEN pcd.ims_id ELSE chd.ims_id END AS ims_id,
        hcos.me AS me_number,
        CASE WHEN (chd.tvcmid IS NULL) THEN pcd.first_name ELSE chd.first_name END AS first_name,
        CASE WHEN (chd.tvcmid IS NULL) THEN pcd.last_name ELSE chd.last_name END AS last_name,
        CASE WHEN (chd.tvcmid IS NULL) THEN pcd.middle_name ELSE chd.middle_name END AS middle_name,
        chd.personal_suffix,
        chd.medical_suffix,
        chd.address_line1 AS address_line_1,
        chd.address_line2 AS address_line_2,
        chd.city,
        chd.state_code AS state,
        chd.zip AS zip_code,
        NULL AS zip_code_extension,
        se.sln_state AS state_license_state,
        se.sln AS state_license_number,
        se.sln_expiration_date AS state_license_expiration_date,
        se.teva_sample_eligibility_flag AS sample_eligibility_code,
        chd.primary_specialty AS primary_specialty_code,
        spec.Specialty_Description AS primary_specialty_description,
        NULL AS primary_specialty_group_code,
        NULL AS primary_specialty_group_description,
        chd.np_pa_flag,
        (now())::date AS created_date
 FROM (((((datamart.prescriber_combined_demographics pcd LEFT  JOIN datamart.customer_hcp_demographics chd ON ((pcd.tvcmid = chd.tvcmid))) JOIN datamart.tvcmid_xref cmid ON (((pcd.tvcmid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN hcos.ims_hcos_professional hcos ON ((hcos.ims_id = pcd.ims_id))) LEFT  JOIN mdm.sample_eligibility se ON (((se.tvcmid = pcd.tvcmid) AND (upper(se.sln_state) = upper(chd.state_code))))) LEFT  JOIN reference.specialties spec ON ((spec.Specialty_Code = chd.primary_specialty)))
 GROUP BY cmid.id_num,
          pcd.tvcmid,
          pcd.veeva_account_id,
          CASE WHEN (chd.tvcmid IS NULL) THEN pcd.npi ELSE chd.npi END,
          CASE WHEN (chd.tvcmid IS NULL) THEN pcd.ims_id ELSE chd.ims_id END,
          hcos.me,
          CASE WHEN (chd.tvcmid IS NULL) THEN pcd.first_name ELSE chd.first_name END,
          CASE WHEN (chd.tvcmid IS NULL) THEN pcd.last_name ELSE chd.last_name END,
          CASE WHEN (chd.tvcmid IS NULL) THEN pcd.middle_name ELSE chd.middle_name END,
          chd.personal_suffix,
          chd.medical_suffix,
          chd.address_line1,
          chd.address_line2,
          chd.city,
          chd.state_code,
          chd.zip,
          NULL,
          se.sln_state,
          se.sln,
          se.sln_expiration_date,
          se.teva_sample_eligibility_flag,
          chd.primary_specialty,
          spec.Specialty_Description,
          chd.np_pa_flag,
          (now())::date) x) y
 WHERE (y.rank = 1);

CREATE  VIEW outbound.ics_mop AS
 SELECT rx_vertical.ims_id,
        rx_vertical.hcp_id,
        rx_vertical.plan_code,
        rx_vertical.plan_name,
        rx_vertical.payment_method,
        rx_vertical.basket_name,
        sum(CASE WHEN (rx_vertical.month_bucket = 24) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth24,
        sum(CASE WHEN (rx_vertical.month_bucket = 23) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth23,
        sum(CASE WHEN (rx_vertical.month_bucket = 22) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth22,
        sum(CASE WHEN (rx_vertical.month_bucket = 21) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth21,
        sum(CASE WHEN (rx_vertical.month_bucket = 20) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth20,
        sum(CASE WHEN (rx_vertical.month_bucket = 19) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth19,
        sum(CASE WHEN (rx_vertical.month_bucket = 18) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth18,
        sum(CASE WHEN (rx_vertical.month_bucket = 17) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth17,
        sum(CASE WHEN (rx_vertical.month_bucket = 16) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth16,
        sum(CASE WHEN (rx_vertical.month_bucket = 15) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth15,
        sum(CASE WHEN (rx_vertical.month_bucket = 14) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth14,
        sum(CASE WHEN (rx_vertical.month_bucket = 13) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth13,
        sum(CASE WHEN (rx_vertical.month_bucket = 12) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth12,
        sum(CASE WHEN (rx_vertical.month_bucket = 11) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth11,
        sum(CASE WHEN (rx_vertical.month_bucket = 10) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth10,
        sum(CASE WHEN (rx_vertical.month_bucket = 9) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth9,
        sum(CASE WHEN (rx_vertical.month_bucket = 8) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth8,
        sum(CASE WHEN (rx_vertical.month_bucket = 7) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth7,
        sum(CASE WHEN (rx_vertical.month_bucket = 6) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth6,
        sum(CASE WHEN (rx_vertical.month_bucket = 5) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth5,
        sum(CASE WHEN (rx_vertical.month_bucket = 4) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth4,
        sum(CASE WHEN (rx_vertical.month_bucket = 3) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth3,
        sum(CASE WHEN (rx_vertical.month_bucket = 2) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth2,
        sum(CASE WHEN (rx_vertical.month_bucket = 1) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth1
 FROM ( SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(xref.veeva_account_id, rx.ims_id) END AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.payment_method,
        rx.basket_name,
        w.month_bucket,
        rx.trx_count
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT row_number() OVER (ORDER BY z.rollup_month DESC) AS month_bucket,
        z.rollup_month
 FROM ( SELECT prescriber_rx.rollup_month
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (prescriber_rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY prescriber_rx.rollup_month) z) w ON ((rx.rollup_month = w.rollup_month))) LEFT  JOIN ( SELECT a.tvcmid,
        a.veeva_account_id
 FROM ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.id_num) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE (xref.id_type = 'VEEVA_ID'::varchar(8))) a
 WHERE (a.rnk = 1)) xref ON ((xref.tvcmid = rx.tvcmid)))
 WHERE ((rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'MONTH'::varchar(5)) AND (w.month_bucket >= 1) AND (w.month_bucket <= 24))) rx_vertical
 GROUP BY rx_vertical.ims_id,
          rx_vertical.hcp_id,
          rx_vertical.plan_code,
          rx_vertical.plan_name,
          rx_vertical.payment_method,
          rx_vertical.basket_name;

CREATE  VIEW outbound.fingertip_monthly_plantrak_rx AS
 SELECT substr(rx.payer_plan_number, ((length(rx.payer_plan_number) - 4) + 1), 4) AS plan_id,
        rx.plan_name,
        substr(rx.payer_plan_number, 1, 6) AS payer_id,
        rx.payer_name,
        rx.market_name,
        rx.basket_name,
        d.ptr_zip,
        to_char(rx.rollup_month, 'YYYY-MM-DD'::varchar(10)) AS rollup_month,
        round(sum((rx.trx_count / d.divisor)), 3) AS trx,
        round(sum((rx.nrx_count / d.divisor)), 3) AS nrx
 FROM (((( SELECT a.market_name,
        a.report_frequency,
        a.data_date
 FROM ( SELECT market_frequency.market_name,
        market_frequency.report_frequency,
        market_frequency.data_date,
        row_number() OVER (PARTITION BY market_frequency.market_name ORDER BY market_frequency.report_frequency DESC) AS rnk
 FROM ( SELECT prescriber_rx.market_name,
        prescriber_rx.report_frequency,
        prescriber_rx.data_date
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.payer_plan_number IS NOT NULL) AND (prescriber_rx.rollup_flag IS NULL) AND (((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.data_date >= (trunc((statement_timestamp())::timestamp, 'MON'::varchar(3)) + '-3'::interval month))) OR ((prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.data_date >= (trunc((statement_timestamp())::timestamp, 'MON'::varchar(3)) + '-1'::interval month)))))
 GROUP BY prescriber_rx.market_name,
          prescriber_rx.report_frequency,
          prescriber_rx.data_date) market_frequency) a
 WHERE (a.rnk = 1)) mte JOIN datamart.prescriber_rx rx ON (((mte.market_name = rx.market_name) AND (mte.report_frequency = rx.report_frequency) AND (mte.data_date = rx.data_date)))) JOIN ( SELECT a.ims_id,
        a.ptr_zip,
        count(*) OVER (PARTITION BY a.ims_id) AS divisor
 FROM ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.ptr_zip
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)]))
 GROUP BY prescriber_combined_demographics.ims_id,
          prescriber_combined_demographics.ptr_zip) a) d ON ((rx.ims_id = d.ims_id))) CROSS  JOIN ( SELECT (trunc(max(markets_to_extract.data_date), 'MON'::varchar(3)) + '-23'::interval month) AS start_month,
        max(markets_to_extract.data_date) AS end_month
 FROM ( SELECT a.market_name,
        a.report_frequency,
        a.data_date
 FROM ( SELECT market_frequency.market_name,
        market_frequency.report_frequency,
        market_frequency.data_date,
        row_number() OVER (PARTITION BY market_frequency.market_name ORDER BY market_frequency.report_frequency DESC) AS rnk
 FROM ( SELECT prescriber_rx.market_name,
        prescriber_rx.report_frequency,
        prescriber_rx.data_date
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.payer_plan_number IS NOT NULL) AND (prescriber_rx.rollup_flag IS NULL) AND (((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.data_date >= (trunc((statement_timestamp())::timestamp, 'MON'::varchar(3)) + '-3'::interval month))) OR ((prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.data_date >= (trunc((statement_timestamp())::timestamp, 'MON'::varchar(3)) + '-1'::interval month)))))
 GROUP BY prescriber_rx.market_name,
          prescriber_rx.report_frequency,
          prescriber_rx.data_date) market_frequency) a
 WHERE (a.rnk = 1)) markets_to_extract
 WHERE (markets_to_extract.report_frequency = 'MONTH'::varchar(5))) dr)
 WHERE ((rx.rollup_flag IS NULL) AND (rx.rollup_month >= dr.start_month) AND (rx.rollup_month <= dr.end_month))
 GROUP BY substr(rx.payer_plan_number, ((length(rx.payer_plan_number) - 4) + 1), 4),
          rx.plan_name,
          substr(rx.payer_plan_number, 1, 6),
          rx.payer_name,
          rx.market_name,
          rx.basket_name,
          d.ptr_zip,
          to_char(rx.rollup_month, 'YYYY-MM-DD'::varchar(10));

CREATE  VIEW outbound.stride_segmentation AS
 SELECT hcp.ims_id,
        hcp.npi,
        hcp.tvcmid,
        hcp.first_name,
        hcp.middle_name,
        hcp.last_name,
        hcp.primary_specialty,
        'specialty_grp_AJOVY'::varchar(19) AS specialty_group_ajovy,
        hcp.address_line1,
        hcp.address_line2,
        hcp.city,
        hcp.state_code,
        hcp.zip,
        flags.ajovy_tier,
        CASE WHEN (callplan.tvcmid IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END AS target,
        calls.ltdcalls AS ajovy_details_ltd,
        dec.trx_ACGRP_dec,
        dec.trx_AIMOVIG_dec,
        dec.trx_AJOVY_dec,
        dec.trx_EMGALITY_dec,
        flags.ha_specialist_flag,
        flags.exclude_flag
 FROM ((((datamart.customer_hcp_demographics hcp LEFT  JOIN ( SELECT call_plan.tvcmid
 FROM datamart.call_plan
 WHERE (call_plan.basket_name = 'AJOVY'::varchar(5))
 GROUP BY call_plan.tvcmid) callplan ON ((hcp.tvcmid = callplan.tvcmid))) LEFT  JOIN ( SELECT sfa.tvcmid,
        count(*) AS ltdcalls
 FROM (datamart.sfa_call sfa LEFT  JOIN datamart.sfa_call_detail sfadetail ON (((sfa.call_id = sfadetail.call_id) AND (sfadetail.basket_name = 'AJOVY'::varchar(5)))))
 GROUP BY sfa.tvcmid) calls ON ((hcp.tvcmid = calls.tvcmid))) LEFT  JOIN ( SELECT rx_deciles.tvcmid,
        max(CASE WHEN (rx_deciles.basket_name = 'ANTI-CGRP'::varchar(9)) THEN rx_deciles.trx_count_12_mo ELSE NULL::float END) AS trx_ACGRP_dec,
        max(CASE WHEN (rx_deciles.basket_name = 'AIMOVIG'::varchar(7)) THEN rx_deciles.trx_count_12_mo ELSE NULL::float END) AS trx_AIMOVIG_dec,
        max(CASE WHEN (rx_deciles.basket_name = 'AJOVY'::varchar(5)) THEN rx_deciles.trx_count_12_mo ELSE NULL::float END) AS trx_AJOVY_dec,
        max(CASE WHEN (rx_deciles.basket_name = 'EMGALITY'::varchar(8)) THEN rx_deciles.trx_count_12_mo ELSE NULL::float END) AS trx_EMGALITY_dec
 FROM datamart.rx_deciles
 GROUP BY rx_deciles.tvcmid
 ORDER BY rx_deciles.tvcmid) dec ON ((hcp.tvcmid = dec.tvcmid))) LEFT  JOIN ( SELECT customer_level_flags.tvcmid,
        max(CASE WHEN (customer_level_flags.flag_type = 'MIGRAINE_TIER'::varchar(13)) THEN customer_level_flags.flag_value ELSE NULL END) AS ajovy_tier,
        max(CASE WHEN (customer_level_flags.flag_type = 'HEADACHE_SPECIALIST'::varchar(19)) THEN customer_level_flags.flag_value ELSE NULL END) AS ha_specialist_flag,
        max(CASE WHEN (customer_level_flags.flag_type = 'AMADNC'::varchar(6)) THEN customer_level_flags.flag_value ELSE NULL END) AS exclude_flag
 FROM datamart.customer_level_flags
 WHERE (customer_level_flags.flag_type = ANY (ARRAY['MIGRAINE_TIER'::varchar(19), 'HEADACHE_SPECIALIST'::varchar(19), 'AMADNC'::varchar(19)]))
 GROUP BY customer_level_flags.tvcmid
 ORDER BY customer_level_flags.tvcmid) flags ON ((hcp.tvcmid = flags.tvcmid)));

CREATE  VIEW outbound.mcm_ajovy_copay AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.pharmacy_chain_number,
        copay.nabp,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.create_date,
        copay.occ_payment_type,
        copay.counted_copay,
        copay.auth_refills,
        copay.admin_hcp_npi,
        copay.admin_hcp_name,
        copay.admin_hcp_address,
        copay.admin_hcp_address2,
        copay.admin_hcp_city,
        copay.admin_hcp_state,
        copay.admin_hcp_zip,
        copay.claim_type,
        copay.administration_flag,
        copay.soc_name,
        copay.soc_phone,
        copay.soc_fax,
        copay.soc_address,
        copay.soc_city,
        copay.soc_state,
        copay.soc_zip,
        copay.soc_id,
        copay.soc_npi,
        copay.payer_name,
        copay.cpt_code,
        copay.trans_type,
        copay.previous_payer_id,
        copay.member_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.report_frequency,
        copay.source_name,
        copay.file_id,
        copay.record_id,
        copay.patient_type,
        copay.primary_bin,
        copay.primary_bin_description,
        copay.reject_code
 FROM datamart.copay
 WHERE (copay.basket_name ~~ 'AJOVY%'::varchar(6))
 ORDER BY copay.fill_date;

CREATE  VIEW outbound.zs_xpd_demographics_antimigraine_monthly AS
 SELECT xpd_demographics_antimigraine.ims_client_number,
        xpd_demographics_antimigraine.ims_report_number,
        xpd_demographics_antimigraine.ims_id,
        xpd_demographics_antimigraine.tvcmid,
        xpd_demographics_antimigraine.last_name,
        xpd_demographics_antimigraine.first_name,
        xpd_demographics_antimigraine.middle_name,
        xpd_demographics_antimigraine.address_1,
        xpd_demographics_antimigraine.address_2,
        xpd_demographics_antimigraine.city,
        xpd_demographics_antimigraine.state,
        xpd_demographics_antimigraine.zip,
        xpd_demographics_antimigraine.specialty,
        xpd_demographics_antimigraine.specialty_description,
        xpd_demographics_antimigraine.trx_decile_retail,
        xpd_demographics_antimigraine.nrx_decile_retail,
        xpd_demographics_antimigraine.nbrx_decile_retail,
        xpd_demographics_antimigraine.trx_decile_mail,
        xpd_demographics_antimigraine.nrx_decile_mail,
        xpd_demographics_antimigraine.nbrx_decile_mail,
        xpd_demographics_antimigraine.market_prescriber_reliability_retail,
        xpd_demographics_antimigraine.market_prescriber_reliability_mail,
        xpd_demographics_antimigraine.report_frequency
 FROM datamart.xpd_demographics_antimigraine
 WHERE (xpd_demographics_antimigraine.report_frequency = 'MONTH'::varchar(5));

CREATE  VIEW outbound.zs_cgrp_accute_preventive_monthly AS
 SELECT rx.ims_id,
        'ACGRP_ACUTE_PREVENTIVE_ZS'::varchar(25) AS sub_market,
        rx.payer_plan_number,
        rx.plan_name,
        rx.payer_name,
        rx.pbm_name,
        sum(rx.trx_count) AS Sum_trx_cnt,
        sum(rx.nrx_count) AS Sum_nrx_cnt,
        sum(rx.trx_quantity) AS Sum_trx_qty,
        sum(rx.nrx_quantity) AS Sum_nrx_qty,
        rx.rollup_month
 FROM datamart.prescriber_rx rx, product.basket b, product.basket_item bi, outbound.month_rollup_and_bucket mth
 WHERE ((rx.report_frequency = 'MONTH'::varchar(5)) AND (rx.rollup_month = mth.month_ending) AND (mth.month_bucket <= 12) AND (bi.basket_id = ( SELECT basket.basket_id
 FROM product.basket
 WHERE ((basket.name = 'ACGRP_ACUTE_PREVENTIVE_ZS'::varchar(25)) AND (basket.basket_type = 'submarket'::varchar(9))))) AND (b.basket_id = bi.entity_id) AND (rx.basket_id = bi.entity_id))
 GROUP BY rx.report_frequency,
          rx.pbm_name,
          rx.payer_name,
          rx.plan_name,
          rx.payer_plan_number,
          rx.ims_id,
          rx.data_date,
          rx.rollup_month
 ORDER BY rx.ims_id,
          rx.rollup_month;

CREATE  VIEW outbound.zs_acutemigraine_managed_care AS
 SELECT a.ims_id,
        a.payer_plan_number,
        a.payment_method,
        a.pbm_name,
        a.payer_name,
        a.plan_name,
        b.product_group,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), 0)) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx1,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-1))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx2,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-2))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx3,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-3))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx4,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-4))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx5,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-5))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx6,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-6))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx7,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-7))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx8,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-8))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx9,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-9))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx10,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-10))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx11,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-11))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx12
 FROM datamart.prescriber_rx a, reference.acute_market_definition b
 WHERE ((a.basket_id = b.bfs_id) AND (a.report_frequency = 'MONTH'::varchar(5)) AND (a.rollup_month >= add_months(last_day(a.data_date), (-11))) AND (a.rollup_month <= add_months(last_day(a.data_date), 0)) AND (a.basket_type = 'product'::varchar(7)))
 GROUP BY a.ims_id,
          a.payer_plan_number,
          a.payment_method,
          a.pbm_name,
          a.payer_name,
          a.plan_name,
          b.product_group
 ORDER BY a.ims_id,
          a.payer_plan_number,
          a.payment_method,
          a.pbm_name,
          a.payer_name,
          a.plan_name,
          b.product_group;

CREATE  VIEW outbound.CobbsCreek_austedo_xpo_rx_pt_monthly AS
 SELECT customer_hcp_demographics.ims_id AS demo_ims_id,
        prescriber_rx.ims_id AS rx_ims_id,
        prescriber_rx.payer_plan_number,
        prescriber_rx.ims_client_number,
        prescriber_rx.report_frequency,
        prescriber_rx.ims_product_group,
        prescriber_rx.basket_id,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.sales_category,
        prescriber_rx.tvcmid AS rx_tvmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count,
        prescriber_rx.payer_name,
        prescriber_rx.plan_name,
        prescriber_rx.pbm_name,
        prescriber_rx.model,
        prescriber_rx.payment_method,
        prescriber_rx.ims_specialty,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.ims_report_number_cnt,
        prescriber_rx.cnt_file_id,
        prescriber_rx.cnt_record_id,
        prescriber_rx.ims_report_number_qty,
        prescriber_rx.qty_file_id,
        prescriber_rx.qty_record_id,
        prescriber_rx.rollup_flag,
        prescriber_rx.indication,
        prescriber_rx.pbm_parent_name,
        customer_hcp_demographics.tvcmid AS demo_tvcmid,
        customer_hcp_demographics.npi,
        customer_hcp_demographics.last_name,
        customer_hcp_demographics.first_name,
        customer_hcp_demographics.middle_name,
        customer_hcp_demographics.personal_suffix,
        customer_hcp_demographics.medical_suffix,
        customer_hcp_demographics.primary_specialty,
        customer_hcp_demographics.secondary_specialty,
        customer_hcp_demographics.address_line1,
        customer_hcp_demographics.address_line2,
        customer_hcp_demographics.city,
        customer_hcp_demographics.state_code,
        customer_hcp_demographics.zip,
        customer_hcp_demographics.business_phone,
        customer_hcp_demographics.business_email,
        customer_hcp_demographics.hce_status_desc,
        customer_hcp_demographics.np_pa_flag,
        customer_hcp_demographics.address_id,
        customer_hcp_demographics.address_latitude,
        customer_hcp_demographics.address_longitude,
        customer_hcp_demographics.file_id,
        customer_hcp_demographics.record_id
 FROM (datamart.customer_hcp_demographics customer_hcp_demographics RIGHT  JOIN datamart.prescriber_rx prescriber_rx ON ((customer_hcp_demographics.ims_id = prescriber_rx.ims_id)))
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = 'MOVEMENT DISORDER MARKET'::varchar(24)) AND (prescriber_rx.basket_type = 'product'::varchar(7)))
 GROUP BY customer_hcp_demographics.ims_id,
          prescriber_rx.ims_id,
          prescriber_rx.payer_plan_number,
          prescriber_rx.ims_client_number,
          prescriber_rx.report_frequency,
          prescriber_rx.ims_product_group,
          prescriber_rx.basket_id,
          prescriber_rx.data_date,
          prescriber_rx.date,
          prescriber_rx.sales_category,
          prescriber_rx.tvcmid,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count,
          prescriber_rx.payer_name,
          prescriber_rx.plan_name,
          prescriber_rx.pbm_name,
          prescriber_rx.model,
          prescriber_rx.payment_method,
          prescriber_rx.ims_specialty,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.ims_report_number_cnt,
          prescriber_rx.cnt_file_id,
          prescriber_rx.cnt_record_id,
          prescriber_rx.ims_report_number_qty,
          prescriber_rx.qty_file_id,
          prescriber_rx.qty_record_id,
          prescriber_rx.rollup_flag,
          prescriber_rx.indication,
          prescriber_rx.pbm_parent_name,
          customer_hcp_demographics.tvcmid,
          customer_hcp_demographics.npi,
          customer_hcp_demographics.last_name,
          customer_hcp_demographics.first_name,
          customer_hcp_demographics.middle_name,
          customer_hcp_demographics.personal_suffix,
          customer_hcp_demographics.medical_suffix,
          customer_hcp_demographics.primary_specialty,
          customer_hcp_demographics.secondary_specialty,
          customer_hcp_demographics.address_line1,
          customer_hcp_demographics.address_line2,
          customer_hcp_demographics.city,
          customer_hcp_demographics.state_code,
          customer_hcp_demographics.zip,
          customer_hcp_demographics.business_phone,
          customer_hcp_demographics.business_email,
          customer_hcp_demographics.hce_status_desc,
          customer_hcp_demographics.np_pa_flag,
          customer_hcp_demographics.address_id,
          customer_hcp_demographics.address_latitude,
          customer_hcp_demographics.address_longitude,
          customer_hcp_demographics.file_id,
          customer_hcp_demographics.record_id
 ORDER BY customer_hcp_demographics.ims_id;

CREATE  VIEW outbound.CobbsCreek_Austedo_867_Monthly AS
 SELECT wholesaler_sales_867.basket_id,
        wholesaler_sales_867.basket_name,
        wholesaler_sales_867.ndc,
        wholesaler_sales_867.product_description,
        wholesaler_sales_867.product_name,
        wholesaler_sales_867.trading_partner_name,
        wholesaler_sales_867.trading_partner_dea,
        wholesaler_sales_867.trading_partner_hin,
        wholesaler_sales_867.trading_partner_location_type,
        wholesaler_sales_867.trading_partner_dc_dea,
        wholesaler_sales_867.trading_partner_dc_hin,
        wholesaler_sales_867.trading_partner_dc_name,
        wholesaler_sales_867.trading_partner_dc_address,
        wholesaler_sales_867.trading_partner_dc_address_2,
        wholesaler_sales_867.trading_partner_dc_city,
        wholesaler_sales_867.trading_partner_dc_state,
        wholesaler_sales_867.trading_partner_dc_zip,
        wholesaler_sales_867.class_of_trade,
        wholesaler_sales_867.outlet_location_name,
        wholesaler_sales_867.outlet_dea,
        wholesaler_sales_867.outlet_hin,
        wholesaler_sales_867.outlet_340b,
        wholesaler_sales_867.outlet_ncpdp,
        wholesaler_sales_867.outlet_npi,
        wholesaler_sales_867.outlet_location_address,
        wholesaler_sales_867.outlet_location_address_2,
        wholesaler_sales_867.outlet_location_city,
        wholesaler_sales_867.outlet_location_state,
        wholesaler_sales_867.outlet_location_zip,
        wholesaler_sales_867.reporting_date,
        wholesaler_sales_867.rollup_reporting_month,
        wholesaler_sales_867.rollup_reporting_quarter,
        wholesaler_sales_867.contract_number,
        wholesaler_sales_867.contract_description,
        wholesaler_sales_867.invoice_number,
        wholesaler_sales_867.invoice_date,
        wholesaler_sales_867.invoice_line_id,
        wholesaler_sales_867.quanitity_stock_sales_ss,
        wholesaler_sales_867.ds_sales_ds,
        wholesaler_sales_867.summary_sales_su,
        wholesaler_sales_867.dock_to_dock_bq,
        wholesaler_sales_867.interbranch_ib,
        wholesaler_sales_867.return_to_useable_ru,
        wholesaler_sales_867.return_to_vendor_rv,
        wholesaler_sales_867.transfer_to_disposal_td,
        wholesaler_sales_867.adjusted_price,
        wholesaler_sales_867.gross_amount,
        wholesaler_sales_867.trx_count_normalized,
        wholesaler_sales_867.file_id
 FROM datamart.wholesaler_sales_867 wholesaler_sales_867
 WHERE ((wholesaler_sales_867.basket_name ~~ 'AUSTEDO%'::varchar(8)) AND (wholesaler_sales_867.reporting_date >= trunc((now() + '-24'::interval month), 'month'::varchar(5))))
 GROUP BY wholesaler_sales_867.basket_id,
          wholesaler_sales_867.basket_name,
          wholesaler_sales_867.ndc,
          wholesaler_sales_867.product_description,
          wholesaler_sales_867.product_name,
          wholesaler_sales_867.trading_partner_name,
          wholesaler_sales_867.trading_partner_dea,
          wholesaler_sales_867.trading_partner_hin,
          wholesaler_sales_867.trading_partner_location_type,
          wholesaler_sales_867.trading_partner_dc_dea,
          wholesaler_sales_867.trading_partner_dc_hin,
          wholesaler_sales_867.trading_partner_dc_name,
          wholesaler_sales_867.trading_partner_dc_address,
          wholesaler_sales_867.trading_partner_dc_address_2,
          wholesaler_sales_867.trading_partner_dc_city,
          wholesaler_sales_867.trading_partner_dc_state,
          wholesaler_sales_867.trading_partner_dc_zip,
          wholesaler_sales_867.class_of_trade,
          wholesaler_sales_867.outlet_location_name,
          wholesaler_sales_867.outlet_dea,
          wholesaler_sales_867.outlet_hin,
          wholesaler_sales_867.outlet_340b,
          wholesaler_sales_867.outlet_ncpdp,
          wholesaler_sales_867.outlet_npi,
          wholesaler_sales_867.outlet_location_address,
          wholesaler_sales_867.outlet_location_address_2,
          wholesaler_sales_867.outlet_location_city,
          wholesaler_sales_867.outlet_location_state,
          wholesaler_sales_867.outlet_location_zip,
          wholesaler_sales_867.reporting_date,
          wholesaler_sales_867.rollup_reporting_month,
          wholesaler_sales_867.rollup_reporting_quarter,
          wholesaler_sales_867.contract_number,
          wholesaler_sales_867.contract_description,
          wholesaler_sales_867.invoice_number,
          wholesaler_sales_867.invoice_date,
          wholesaler_sales_867.invoice_line_id,
          wholesaler_sales_867.quanitity_stock_sales_ss,
          wholesaler_sales_867.ds_sales_ds,
          wholesaler_sales_867.summary_sales_su,
          wholesaler_sales_867.dock_to_dock_bq,
          wholesaler_sales_867.interbranch_ib,
          wholesaler_sales_867.return_to_useable_ru,
          wholesaler_sales_867.return_to_vendor_rv,
          wholesaler_sales_867.transfer_to_disposal_td,
          wholesaler_sales_867.adjusted_price,
          wholesaler_sales_867.gross_amount,
          wholesaler_sales_867.trx_count_normalized,
          wholesaler_sales_867.file_id
 ORDER BY wholesaler_sales_867.outlet_npi;

CREATE  VIEW outbound.zs_laba_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.rollup_month,
        prescriber_rx.sales_category,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payer_name,
        prescriber_rx.plan_name,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.model,
        prescriber_rx.payment_method,
        sum(prescriber_rx.nrx_count) AS nrx_count,
        sum(prescriber_rx.trx_count) AS trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = 'LABA MARKET TOTAL'::varchar(17)) AND (prescriber_rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.rollup_month,
          prescriber_rx.sales_category,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payer_name,
          prescriber_rx.plan_name,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.model,
          prescriber_rx.payment_method;

CREATE  VIEW outbound.zs_ts_ims_zip_xref AS
 SELECT CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END AS ims_id,
        prescriber_combined_demographics.ptr_zip AS zip
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))
 GROUP BY CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END,
          prescriber_combined_demographics.ptr_zip
 ORDER BY CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END,
          prescriber_combined_demographics.ptr_zip;

CREATE  VIEW outbound.zs_xpo_xpopt_AM_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.rollup_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (prescriber_rx.market_name = 'ANTI-MIGRAINE MARKET'::varchar(20)))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.sales_category,
          prescriber_rx.market_name,
          prescriber_rx.basket_id,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.model,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.indication,
          prescriber_rx.data_date,
          prescriber_rx.date,
          prescriber_rx.rollup_flag,
          prescriber_rx.rollup_week,
          prescriber_rx.rollup_month,
          prescriber_rx.report_frequency,
          prescriber_rx.plan_name,
          prescriber_rx.payer_name,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count;

CREATE  VIEW outbound.archer_dnc AS
 SELECT clf.tvcmid,
        atd.ims_id,
        atd.npi,
        CASE WHEN (clf.flag_type = ANY (ARRAY['DNC'::varchar(6), 'AMADNC'::varchar(6)])) THEN 'Do Not Call'::varchar(11) WHEN (clf.flag_type = ANY (ARRAY['OIG'::varchar(6), 'FDA'::varchar(6), 'DEA'::varchar(6), 'PERPRM'::varchar(6)])) THEN 'Do Not Promote'::varchar(14) ELSE clf.flag_type END AS flag_type,
        clf.flag_value,
        clf.flag_effective_start_date,
        clf.flag_effective_end_date
 FROM datamart.customer_level_flags clf, sandbox.archer_target_data atd
 WHERE ((clf.tvcmid = atd.tvcmid) AND (clf.flag_type = ANY (ARRAY['DNC'::varchar(6), 'AMADNC'::varchar(6), 'OIG'::varchar(6), 'FDA'::varchar(6), 'DEA'::varchar(6), 'PERPRM'::varchar(6)])) AND ((statement_timestamp())::timestamp >= clf.flag_effective_start_date) AND ((statement_timestamp())::timestamp <= clf.flag_effective_end_date))
 GROUP BY clf.tvcmid,
          atd.ims_id,
          atd.npi,
          CASE WHEN (clf.flag_type = ANY (ARRAY['DNC'::varchar(6), 'AMADNC'::varchar(6)])) THEN 'Do Not Call'::varchar(11) WHEN (clf.flag_type = ANY (ARRAY['OIG'::varchar(6), 'FDA'::varchar(6), 'DEA'::varchar(6), 'PERPRM'::varchar(6)])) THEN 'Do Not Promote'::varchar(14) ELSE clf.flag_type END,
          clf.flag_value,
          clf.flag_effective_start_date,
          clf.flag_effective_end_date;

CREATE  VIEW outbound.v_ob_ahm_employee AS
 SELECT Employee.employee_id AS EmployeeId,
        coalesce(Employee.username, ''::varchar) AS Username,
        coalesce(upper(Employee.username), ''::varchar) AS FederationId,
        CASE WHEN (Employee.rep_type = 'REP'::varchar(3)) THEN 'TEVA Pharma Rep'::varchar(15) ELSE 'TEVA Pharma Manager'::varchar(19) END AS SFDCUserProfile,
        coalesce(Manager.employee_id, ''::varchar) AS ManagerEmployeeId,
        coalesce(Employee.first_name, ''::varchar) AS FirstName,
        coalesce(Employee.last_name, ''::varchar) AS LastName,
        coalesce(Employee.middle_name, ''::varchar) AS MiddleName,
        ''::varchar AS Nickname,
        ''::varchar AS GenderCode,
        'Sales Specialist'::varchar(16) AS EmployeeRole,
        coalesce(Employee.shipping_address_line1, Employee.address_line1) AS ShippingAddressLine1,
        coalesce(Employee.shipping_address_line2, Employee.address_line2) AS ShippingAddressLine2,
        ''::varchar AS ShippingAddressLine3,
        coalesce(Employee.shipping_city, Employee.city) AS ShippingCity,
        ''::varchar AS ShippingNeighborhood,
        coalesce(Employee.shipping_state, Employee.state) AS ShippingStateProvince,
        coalesce(Employee.shipping_zip, Employee.zip) AS ShippingPostalCode,
        ''::varchar AS ShippingPostalCodeExtension,
        'US'::varchar(2) AS ShippingCountryCode,
        coalesce(Employee.address_line1, ''::varchar) AS HomeAddressLine1,
        coalesce(Employee.address_line2, ''::varchar) AS HomeAddressLine2,
        ''::varchar AS HomeAddressLine3,
        coalesce(Employee.city, ''::varchar) AS HomeCity,
        ''::varchar AS HomeNeighborhood,
        coalesce(Employee.state, ''::varchar) AS HomeStateProvince,
        coalesce(Employee.zip, ''::varchar) AS HomePostalCode,
        ''::varchar AS HomePostalCodeExtension,
        'US'::varchar(2) AS HomeCountryCode,
        coalesce(Employee.business_address_line1, ''::varchar) AS WorkAddressLine1,
        coalesce(Employee.business_address_line2, ''::varchar) AS WorkAddressLine2,
        ''::varchar AS WorkAddressLine3,
        coalesce(Employee.business_city, ''::varchar) AS WorkCity,
        ''::varchar AS WorkNeighborhood,
        coalesce(Employee.business_state, ''::varchar) AS WorkStateProvince,
        coalesce(Employee.business_zip, ''::varchar) AS WorkPostalCode,
        ''::varchar AS WorkPostalCodeExtension,
        'US'::varchar(2) AS WorkCountryCode,
        coalesce(Employee.mobile_phone, ''::varchar) AS WorkPhone,
        ''::varchar AS WorkPhoneExtension,
        coalesce(Employee.email, ''::varchar) AS EmailAddress,
        coalesce(Employee.fax, ''::varchar) AS Fax,
        'US'::varchar(2) AS RegionId,
        coalesce((Employee.hire_date)::varchar(10), ''::varchar) AS HireDate,
        ''::varchar AS TerminationDate,
        'Active'::varchar(6) AS Status
 FROM (datamart.roster Employee LEFT  JOIN datamart.roster Manager ON ((Employee.parent_territory_number = Manager.territory_number)))
 WHERE ((Employee.employee_id IS NOT NULL) AND (Employee.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2)])));

CREATE  VIEW outbound.anda_ajovyTRx_monthly AS
 SELECT r.ims_id AS IMS_ID,
        r.tvcmid,
        r.prescriber_first_name,
        r.prescriber_last_name,
        r.rollup_month,
        sum(CASE WHEN (r.basket_name ~~* '%AJOVY%'::varchar(7)) THEN r.trx_count ELSE 0::numeric(18,0) END) AS Sum_AJOVY_TRx,
        sum(CASE WHEN (r.basket_name ~~* '%AIMOVIG%'::varchar(9)) THEN r.trx_count ELSE 0::numeric(18,0) END) AS Sum_AIMOVIG_TRx,
        sum(CASE WHEN (r.basket_name ~~* '%EMGALITY%'::varchar(10)) THEN r.trx_count ELSE 0::numeric(18,0) END) AS Sum_EMGALITY_TRx,
        sum(r.trx_count) AS Sum_ANTICGRP_TRx
 FROM ((datamart.prescriber_rx r JOIN ( SELECT prescriber_rx.rollup_month AS month_end
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.market_name ~~* '%ANTI-MIGRAINE MARKET%'::varchar(22)) AND (prescriber_rx.rollup_flag IS NULL) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.rollup_month <= last_day((trunc((now())::timestamp, 'DD'::varchar(2)) + '-1'::interval month))))
 GROUP BY prescriber_rx.rollup_month
 ORDER BY prescriber_rx.rollup_month DESC
 LIMIT 12) m ON ((r.rollup_month = m.month_end))) JOIN ( SELECT b.basket_id,
        b.name
 FROM ((product.basket m JOIN product.basket_item mi ON ((mi.basket_id = m.basket_id))) JOIN product.basket b ON ((b.basket_id = mi.entity_id)))
 WHERE ((m.basket_type = 'submarket'::varchar(9)) AND (m.name = 'ANTI-CGRP'::varchar(9)))) a ON ((r.basket_id = a.basket_id)))
 WHERE ((r.market_name ~~* '%ANTI-MIGRAINE MARKET%'::varchar(22)) AND (r.rollup_flag IS NULL) AND (r.report_frequency = 'SPLITWEEK'::varchar(9)) AND (r.ims_id <= '9499999'::varchar(7)))
 GROUP BY r.ims_id,
          r.tvcmid,
          r.prescriber_first_name,
          r.prescriber_last_name,
          r.rollup_month
 ORDER BY r.ims_id,
          r.rollup_month;

CREATE  VIEW outbound.anda_austedoTRx_monthly AS
 SELECT r.ims_id AS IMS_ID,
        r.tvcmid,
        r.prescriber_first_name,
        r.prescriber_last_name,
        r.rollup_month,
        sum(r.trx_count) AS AUSTEDO_TRx
 FROM (datamart.prescriber_rx r JOIN ( SELECT prescriber_rx.rollup_month AS month_end
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.basket_name ~~* '%AUSTEDO%'::varchar(9)) AND (prescriber_rx.rollup_flag IS NULL) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.rollup_month <= last_day((trunc((now())::timestamp, 'DD'::varchar(2)) + '-1'::interval month))))
 GROUP BY prescriber_rx.rollup_month
 ORDER BY prescriber_rx.rollup_month DESC
 LIMIT 12) m ON ((r.rollup_month = m.month_end)))
 WHERE ((r.basket_name ~~* '%AUSTEDO%'::varchar(9)) AND (r.rollup_flag IS NULL) AND (r.report_frequency = 'SPLITWEEK'::varchar(9)) AND (r.ims_id <= '9499999'::varchar(7)))
 GROUP BY r.ims_id,
          r.tvcmid,
          r.prescriber_first_name,
          r.prescriber_last_name,
          r.rollup_month
 ORDER BY r.ims_id,
          r.rollup_month;

CREATE  VIEW outbound.zs_xpd_addon_details_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.channel_indicator,
        rx.ims_id,
        rx.tvcmid,
        pcd.specialty,
        xref.specialty_group,
        rx.addon_from_product_group_num,
        rx.addon_from_basket_id,
        rx.addon_from_basket_name,
        rx.addon_to_product_group_num,
        rx.addon_to_basket_id,
        rx.addon_to_basket_name,
        rx.rollup_period,
        rx.addon_rx,
        rx.report_frequency
 FROM ((datamart.xpd_add_on_details rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.channel_indicator,
          rx.ims_id,
          rx.tvcmid,
          pcd.specialty,
          xref.specialty_group,
          rx.addon_from_product_group_num,
          rx.addon_from_basket_id,
          rx.addon_from_basket_name,
          rx.addon_to_product_group_num,
          rx.addon_to_basket_id,
          rx.addon_to_basket_name,
          rx.rollup_period,
          rx.addon_rx,
          rx.report_frequency;

CREATE  VIEW outbound.zs_revo_engage_call_activity AS
 SELECT engage_call_activity.call_id,
        engage_call_activity.engage_meeting_id,
        engage_call_activity.sales_force_id,
        engage_call_activity.territory_number,
        engage_call_activity.tvcmid,
        engage_call_activity.call_record_type,
        engage_call_activity.call_type,
        engage_call_activity.customer_type,
        engage_call_activity.how_executed,
        engage_call_activity.rep_first_name,
        engage_call_activity.rep_last_name,
        engage_call_activity.hcp_first_name,
        engage_call_activity.hcp_last_name,
        engage_call_activity.hco_name,
        engage_call_activity.call_date,
        engage_call_activity.address,
        engage_call_activity.first_product_detailed,
        engage_call_activity.second_product_detailed,
        engage_call_activity.third_product_detailed,
        engage_call_activity.meeting_scheduled_date,
        engage_call_activity.latest_meeting_start_date,
        engage_call_activity.meeting_duration,
        engage_call_activity.non_host_attendees,
        engage_call_activity.avg_attendee_duration,
        engage_call_activity.hcp_invites,
        engage_call_activity.teva_engage_meeting_status,
        engage_call_activity.attendance_report_process_status_vod__c,
        engage_call_activity.meeting_outcome_status_vod__c
 FROM reporting.engage_call_activity
 WHERE ((engage_call_activity.first_product_detailed <> ALL (ARRAY['Blink Health – AJOVY'::varchar(24), 'Blink Health – AUSTEDO'::varchar(24), 'Unassociated'::varchar(24)])) AND (engage_call_activity.second_product_detailed <> ALL (ARRAY['Blink Health – AJOVY'::varchar(24), 'Blink Health – AUSTEDO'::varchar(24), 'Unassociated'::varchar(24)])) AND (engage_call_activity.third_product_detailed <> ALL (ARRAY['Blink Health – AJOVY'::varchar(24), 'Blink Health – AUSTEDO'::varchar(24), 'Unassociated'::varchar(24)])) AND (engage_call_activity.call_date >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))));

CREATE  VIEW outbound.zs_revo_approved_email AS
 SELECT approved_email.veeva_sent_email_id,
        approved_email.sent_email_id,
        approved_email.product,
        approved_email.date_sent,
        approved_email.status,
        approved_email.failure_message,
        approved_email.veeva_account_id,
        approved_email.tvcmid,
        approved_email.veeva_call_id,
        approved_email.call_id,
        approved_email.sender_email,
        approved_email.territory,
        approved_email.recipient_email,
        approved_email.click_count,
        approved_email.open_count,
        approved_email.last_open_date,
        approved_email.valid_consent,
        approved_email.delivered,
        approved_email.opened,
        approved_email.dropped,
        approved_email.clicked,
        approved_email.downloaded,
        approved_email.viewed,
        approved_email.template_id,
        approved_email.template_name,
        approved_email.event_msg_vod__c,
        approved_email.click_url_vod__c,
        approved_email.subject
 FROM reporting.approved_email
 WHERE ((upper(approved_email.template_name) !~~ upper('%Blink%'::varchar(7))) AND (approved_email.date_sent >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))));

CREATE  VIEW outbound.speakers_weekly AS
 SELECT ap.sourcesystemid,
        ap.batchdate,
        ap.transactionstatuscode,
        ap.interactioncode,
        ap.clientcustomerid,
        ap.participanttype,
        ap.firstname,
        ap.middlename,
        ap.lastname,
        ap.suffix,
        ap.professionaldesignation,
        ap.primaryspecialty,
        ap.organizationname,
        ap.clientaddressid,
        ap.addressline1,
        ap.addressline2,
        ap.addressline3,
        ap.addresscity,
        ap.addressstateprovince,
        ap.addresspostalcode,
        ap.addresspostalcodeextension,
        ap.addresscountry,
        ap.region,
        ap.primarystatelicensestate,
        ap.primarystatelicensenumber,
        ap.attended,
        ap.mealconsumed,
        ap.contractid,
        ap.clientcontractid,
        ap.contractname,
        ap.contractcategory,
        ap.contractsubcategory,
        ap.contractclassification,
        ap.contracttier,
        ap.contracteffectivedate,
        ap.contractexpirationdate,
        ai.interactionname,
        ai.interactioncategory,
        ai.interactiontype,
        ai.locationtype,
        ai.interactionstatus,
        ai.interactionstartdate,
        ai.interactionenddate,
        ai.interactionstartdatetime,
        ai.interactionenddatetime,
        ai.requestingregion,
        ai.parentinteractioncode,
        ai.clientemployeeid,
        ai.employeefirstname,
        ai.employeelastname,
        ai.employeeorganizationunitcode,
        ai.employeeorganizationunitname,
        ai.venuename,
        ai.venueaddressline1,
        ai.venueaddressline2,
        ai.venueaddressline3,
        ai.venuecity,
        ai.venuestateprovince,
        ai.venuepostalcode,
        ai.venuecountry,
        ai.venueregion,
        ai.totalestimatedparticipantcount,
        ai.financialcloseddate,
        ai.product1name,
        ai.topic1name,
        ai.product2name,
        ai.topic2name,
        ai.product3name,
        ai.topic3name,
        ai.product4name,
        ai.topic4name,
        ai.product5name,
        ai.topic5name
 FROM (datamart.ahm_participant ap JOIN datamart.ahm_interactions ai ON (((ap.interactionid = ai.interactionid) AND (ai.batchdate = ap.batchdate) AND ((ai.product1name = ANY (ARRAY['AUSTEDO'::varchar(19), 'AJOVY'::varchar(19), 'Digihaler Portfolio'::varchar(19)])) OR (ai.product2name = ANY (ARRAY['AUSTEDO'::varchar(19), 'AJOVY'::varchar(19), 'Digihaler Portfolio'::varchar(19)])) OR (ai.product3name = ANY (ARRAY['AUSTEDO'::varchar(19), 'AJOVY'::varchar(19), 'Digihaler Portfolio'::varchar(19)])) OR (ai.product4name = ANY (ARRAY['AUSTEDO'::varchar(19), 'AJOVY'::varchar(19), 'Digihaler Portfolio'::varchar(19)])) OR (ai.product5name = ANY (ARRAY['AUSTEDO'::varchar(19), 'AJOVY'::varchar(19), 'Digihaler Portfolio'::varchar(19)]))) AND (ai.interactionstartdate >= trunc((now() + '-24'::interval month), 'month'::varchar(5))))))
 GROUP BY ap.sourcesystemid,
          ap.batchdate,
          ap.transactionstatuscode,
          ap.interactioncode,
          ap.clientcustomerid,
          ap.participanttype,
          ap.firstname,
          ap.middlename,
          ap.lastname,
          ap.suffix,
          ap.professionaldesignation,
          ap.primaryspecialty,
          ap.organizationname,
          ap.clientaddressid,
          ap.addressline1,
          ap.addressline2,
          ap.addressline3,
          ap.addresscity,
          ap.addressstateprovince,
          ap.addresspostalcode,
          ap.addresspostalcodeextension,
          ap.addresscountry,
          ap.region,
          ap.primarystatelicensestate,
          ap.primarystatelicensenumber,
          ap.attended,
          ap.mealconsumed,
          ap.contractid,
          ap.clientcontractid,
          ap.contractname,
          ap.contractcategory,
          ap.contractsubcategory,
          ap.contractclassification,
          ap.contracttier,
          ap.contracteffectivedate,
          ap.contractexpirationdate,
          ai.interactionname,
          ai.interactioncategory,
          ai.interactiontype,
          ai.locationtype,
          ai.interactionstatus,
          ai.interactionstartdate,
          ai.interactionenddate,
          ai.interactionstartdatetime,
          ai.interactionenddatetime,
          ai.requestingregion,
          ai.parentinteractioncode,
          ai.clientemployeeid,
          ai.employeefirstname,
          ai.employeelastname,
          ai.employeeorganizationunitcode,
          ai.employeeorganizationunitname,
          ai.venuename,
          ai.venueaddressline1,
          ai.venueaddressline2,
          ai.venueaddressline3,
          ai.venuecity,
          ai.venuestateprovince,
          ai.venuepostalcode,
          ai.venuecountry,
          ai.venueregion,
          ai.totalestimatedparticipantcount,
          ai.financialcloseddate,
          ai.product1name,
          ai.topic1name,
          ai.product2name,
          ai.topic2name,
          ai.product3name,
          ai.topic3name,
          ai.product4name,
          ai.topic4name,
          ai.product5name,
          ai.topic5name;

CREATE  VIEW outbound.mcm_digihaler_copay AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.pharmacy_chain_number,
        copay.nabp,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.create_date,
        copay.occ_payment_type,
        copay.counted_copay,
        copay.auth_refills,
        copay.admin_hcp_npi,
        copay.admin_hcp_name,
        copay.admin_hcp_address,
        copay.admin_hcp_address2,
        copay.admin_hcp_city,
        copay.admin_hcp_state,
        copay.admin_hcp_zip,
        copay.claim_type,
        copay.administration_flag,
        copay.soc_name,
        copay.soc_phone,
        copay.soc_fax,
        copay.soc_address,
        copay.soc_city,
        copay.soc_state,
        copay.soc_zip,
        copay.soc_id,
        copay.soc_npi,
        copay.payer_name,
        copay.cpt_code,
        copay.trans_type,
        copay.previous_payer_id,
        copay.member_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.report_frequency,
        copay.source_name,
        copay.file_id,
        copay.record_id,
        copay.patient_type,
        copay.primary_bin,
        copay.primary_bin_description,
        copay.reject_code
 FROM datamart.copay
 WHERE (copay.basket_name ~~ '%DIGIHALER%'::varchar(11))
 ORDER BY copay.fill_date;

CREATE  VIEW outbound.v_ob_ahm_orgstructure AS
 SELECT R.territory_number AS OrganizationUnitId,
        coalesce(R.territory_name, ''::varchar) AS OrganizationUnitName,
        'ORGU'::varchar(4) AS OrganizationUnitType,
        CASE WHEN (G.geography_type = 'Territory'::varchar(9)) THEN 'TERR'::varchar(4) WHEN (G.geography_type = 'Region'::varchar(6)) THEN 'DIST'::varchar(4) WHEN (G.geography_type = 'Area'::varchar(4)) THEN 'REG'::varchar(3) ELSE NULL END AS OrganizationUnitSubType,
        CASE WHEN (G.geography_type = 'Area'::varchar(4)) THEN CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END ELSE coalesce(G.parent_geography_number, ''::varchar) END AS ParentOrganizationUnitId,
        'US'::varchar(2) AS RegionId,
        'TEVA'::varchar(4) AS CompanyId,
        B.ref_code AS BusinessUnitId,
        CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END AS OrganizationId,
        ''::varchar AS TeamId,
        '2017-01-01'::varchar(10) AS EffectiveDate,
        '2040-12-31'::varchar(10) AS EndDate,
        'ACTIVE'::varchar(6) AS Status
 FROM datamart.roster R, datamart.sales_geography G, reference.salesforce_reference B, reference.salesforce_reference P
 WHERE ((R.territory_number = G.geography_number) AND (R.sales_force_id = B.sales_force_id) AND (B.ref_type = 'Bus_Unit'::varchar(8)) AND (R.sales_force_id = P.sales_force_id) AND (P.ref_type = 'Org_ID'::varchar(6)) AND (R.territory_number IS NOT NULL) AND (R.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)])) AND ((R.territory_number !~~ '%ZZZZ99'::varchar(7)) OR (R.territory_number <> ALL (ARRAY['TRZZZZ99'::varchar(8), 'TOSCGZ02'::varchar(8), 'TOSCGZ03'::varchar(8), 'TOSCGZ04'::varchar(8), 'TEZZZZZZ'::varchar(8)]))) AND (G.geography_type <> 'National'::varchar(8)))
 GROUP BY R.territory_number,
          coalesce(R.territory_name, ''::varchar),
          'ORGU'::varchar(4),
          CASE WHEN (G.geography_type = 'Territory'::varchar(9)) THEN 'TERR'::varchar(4) WHEN (G.geography_type = 'Region'::varchar(6)) THEN 'DIST'::varchar(4) WHEN (G.geography_type = 'Area'::varchar(4)) THEN 'REG'::varchar(3) ELSE NULL END,
          CASE WHEN (G.geography_type = 'Area'::varchar(4)) THEN CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END ELSE coalesce(G.parent_geography_number, ''::varchar) END,
          'US'::varchar(2),
          'TEVA'::varchar(4),
          B.ref_code,
          CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END,
          ''::varchar,
          '2017-01-01'::varchar(10),
          '2040-12-31'::varchar(10),
          'ACTIVE'::varchar(6) UNION  SELECT R.territory_number AS OrganizationUnitId,
        coalesce(R.territory_name, ''::varchar) AS OrganizationUnitName,
        'ORGU'::varchar(4) AS OrganizationUnitType,
        'REG'::varchar(3) AS OrganizationUnitSubType,
        CASE WHEN (G.geography_type = 'Area'::varchar(4)) THEN CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END ELSE coalesce(G.parent_geography_number, ''::varchar) END AS ParentOrganizationUnitId,
        'US'::varchar(2) AS RegionId,
        'TEVA'::varchar(4) AS CompanyId,
        B.ref_code AS BusinessUnitId,
        CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END AS OrganizationId,
        ''::varchar AS TeamId,
        '2017-01-01'::varchar(10) AS EffectiveDate,
        '2040-12-31'::varchar(10) AS EndDate,
        'ACTIVE'::varchar(6) AS Status
 FROM datamart.roster R, datamart.sales_geography G, reference.salesforce_reference B, reference.salesforce_reference P
 WHERE ((R.territory_number = G.geography_number) AND (R.sales_force_id = B.sales_force_id) AND (B.ref_type = 'Bus_Unit'::varchar(8)) AND (R.sales_force_id = P.sales_force_id) AND (P.ref_type = 'Org_ID'::varchar(6)) AND (R.territory_number IS NOT NULL) AND (R.territory_number = 'TRZZZZ00'::varchar(8)))
 GROUP BY R.territory_number,
          coalesce(R.territory_name, ''::varchar),
          'ORGU'::varchar(4),
          'REG'::varchar(3),
          CASE WHEN (G.geography_type = 'Area'::varchar(4)) THEN CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END ELSE coalesce(G.parent_geography_number, ''::varchar) END,
          'US'::varchar(2),
          'TEVA'::varchar(4),
          B.ref_code,
          CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END,
          ''::varchar,
          '2017-01-01'::varchar(10),
          '2040-12-31'::varchar(10),
          'ACTIVE'::varchar(6);

CREATE  VIEW outbound.zzz_gcsf_dmd AS
 SELECT DISTINCT coalesce(ca.territory_number, 'TOHZHZ99'::varchar(8)) AS TERRITORY_NUM,
        dm.ims_outlet_code AS IMS_OUTLET_CODE,
        dm.subcategory_code AS SUBCATEGORY_CODE,
        cat.category_code AS CATEGORY_CODE,
        dm.ims_product_code AS IMS_PRODUCT_CODE,
        ba.teva_product_code AS PRODUCT_CODE,
        to_char(dm.data_date, 'YYYYMM'::varchar(6)) AS MTH_YYYYMM,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), 0)) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH01,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-1))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH02,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-2))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH03,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-3))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH04,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-4))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH05,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-5))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH06,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-6))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH07,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-7))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH08,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-8))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH09,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-9))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH010,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-10))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH011,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-11))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH012,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-12))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH013,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-13))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH014,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-14))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH015,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-15))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH016,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-16))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH017,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-17))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH018,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-18))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH019,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-19))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH020,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-20))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH021,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-21))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH022,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-22))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH023,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-23))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH024,
        dm.outlet_name AS OUTLET_NAME,
        iom.address AS OUTLET_ADDRESS,
        iom.city AS OUTLET_CITY,
        iom.state AS OUTLET_STATE,
        iom.zip AS OUTLET_ZIP
 FROM (((((((((integration.ddd_md dm JOIN ( SELECT max(ddd.file_id) AS file_id,
        df.feed_id
 FROM (integration.ddd_md ddd JOIN metadata.data_file_metadata df ON ((ddd.file_id = df.file_id)))
 WHERE (df.feed_id = 318)
 GROUP BY df.feed_id) dollar_files ON ((dm.file_id = dollar_files.file_id))) JOIN metadata.data_file_metadata md ON ((dm.file_id = md.file_id))) LEFT  JOIN product.source_product sp ON (((sp.source_product_code = dm.ims_product_code) AND (sp.source_client_num = dm.client_number) AND (sp.source_report_num = dm.report_number) AND (sp.feed_id = md.feed_id) AND (sp.feed_version = md.feed_version)))) JOIN ( SELECT bi.entity_id AS eid,
        b.name AS product_name,
        c.name AS brand_name
 FROM product.basket_item bi, product.basket b, product.basket c
 WHERE ((bi.entity_id = b.basket_id) AND (bi.basket_id = c.basket_id) AND (c.basket_type = 'brand'::varchar(5)) AND (c.name = ANY (ARRAY['NEUPOGEN'::varchar(8), 'GRANIX'::varchar(6), 'LEUKINE'::varchar(7)])))) y ON ((sp.entity_id = y.eid))) LEFT  JOIN reference.ddd_subcategory sub ON ((dm.subcategory_code = sub.subcategory_code))) LEFT  JOIN reference.ddd_category cat ON ((sub.category_code = cat.category_code))) LEFT  JOIN product.basket ba ON ((sp.entity_id = ba.basket_id))) LEFT  JOIN datamart.ims_outlet_master iom ON ((dm.ims_outlet_code = iom.outlet_number))) LEFT  JOIN ( SELECT current_alignment.zip_code,
        current_alignment.city,
        current_alignment.state_code,
        current_alignment.territory_number,
        current_alignment.territory_name,
        current_alignment.area_number,
        current_alignment.area_name,
        current_alignment.region_number,
        current_alignment.region_name,
        current_alignment.sales_force_id,
        current_alignment.organization_code,
        current_alignment.inactive_flag,
        current_alignment.comments,
        current_alignment.mirror_flag,
        current_alignment.mirror_territory_number,
        current_alignment.file_id,
        current_alignment.record_id
 FROM datamart.current_alignment
 WHERE ((current_alignment.sales_force_id = 'TO'::varchar(2)) AND (current_alignment.mirror_flag = 'N'::varchar(1)))) ca ON ((dm.outlet_zip = ca.zip_code)))
 GROUP BY ca.territory_number,
          dm.ims_outlet_code,
          dm.subcategory_code,
          cat.category_code,
          dm.ims_product_code,
          ba.teva_product_code,
          to_char(dm.data_date, 'YYYYMM'::varchar(6)),
          dm.outlet_name,
          iom.address,
          iom.city,
          iom.state,
          iom.zip,
          dm.alt_seq_number
 ORDER BY coalesce(ca.territory_number, 'TOHZHZ99'::varchar(8)),
          dm.ims_outlet_code,
          dm.subcategory_code,
          cat.category_code,
          dm.ims_product_code,
          ba.teva_product_code,
          to_char(dm.data_date, 'YYYYMM'::varchar(6)),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), 0)) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-1))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-2))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-3))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-4))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-5))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-6))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-7))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-8))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-9))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-10))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-11))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-12))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-13))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-14))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-15))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-16))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-17))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-18))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-19))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-20))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-21))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-22))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-23))) THEN dm.dollars ELSE NULL::float END),
          dm.outlet_name,
          iom.address,
          iom.city,
          iom.state,
          iom.zip;

CREATE  VIEW outbound.zzz_REMS_EXTRACT AS
 SELECT coalesce(veeva.id_num, ims.id_num) AS ACCOUNT_ID,
        ca.territory_number,
        R.site_name AS account_name,
        R.address_line_1 AS address1,
        R.address_line_2 AS address2,
        NULL AS address3,
        R.city,
        R.state,
        R.zip,
        'Y'::varchar(1) AS primary_address,
        R.phone AS phone_number,
        fact.ims_org_id AS EXTERNAL_ID,
        'HOSPITAL'::varchar(8) AS CUSTOMER_TYPE,
        NULL AS BPNUMBER,
        NULL AS SUBTYPE,
        NULL AS CM_ID
 FROM ((((datamart.rems_prescriber R LEFT  JOIN ( SELECT current_alignment.zip_code,
        current_alignment.city,
        current_alignment.state_code,
        current_alignment.territory_number,
        current_alignment.territory_name,
        current_alignment.area_number,
        current_alignment.area_name,
        current_alignment.region_number,
        current_alignment.region_name,
        current_alignment.sales_force_id,
        current_alignment.organization_code,
        current_alignment.inactive_flag,
        current_alignment.comments,
        current_alignment.mirror_flag,
        current_alignment.mirror_territory_number,
        current_alignment.file_id,
        current_alignment.record_id
 FROM datamart.current_alignment) ca ON ((R.zip = ca.zip_code))) LEFT  JOIN hcos.ims_hcos_identifier_fact fact ON (((fact.identifier_id = 15::numeric(18,0)) AND (fact.identifier = R.npi)))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        max(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'VEEVA_ID'::varchar(8))
 GROUP BY tvcmid_xref.tvcmid) veeva ON ((R.prescriber_tvcmid = veeva.tvcmid))) LEFT  JOIN ( SELECT ims.tvcmid,
        max(ims.id_num) AS id_num
 FROM datamart.tvcmid_xref ims
 WHERE (ims.id_type = 'IMS_ID'::varchar(6))
 GROUP BY ims.tvcmid) ims ON ((R.prescriber_tvcmid = ims.tvcmid)));

CREATE  VIEW outbound.DDDMD_WEEKLY_UNITS AS
 SELECT EXT_TR_DDDMD_WEEKLY_UNITS_src.client_num,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.report_num,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.ims_outlet_code,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.subcategory_code,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.alt_seq_num,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.filler01,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.category_code,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.ims_product_code,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.data_date,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk01,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk02,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk03,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk04,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk05,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk06,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk07,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk08,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk09,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk10,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk11,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk12,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk13,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk14,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk15,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk16,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk17,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk18,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk19,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk20,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk21,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk22,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk23,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk24,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk25,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk26,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk27,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk28,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk29,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk30,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk31,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk32,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk33,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk34,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk35,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk36,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk37,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk38,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk39,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk40,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk41,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk42,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk43,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk44,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk45,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk46,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk47,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk48,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk49,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk50,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk51,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk52,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk53,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk54,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk55,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk56,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk57,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk58,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk59,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk60,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk61,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk62,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk63,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk64,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk65,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk66,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk67,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk68,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk69,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk70,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk71,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk72,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk73,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk74,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk75,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk76,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk77,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk78,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk79,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk80,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk81,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk82,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk83,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk84,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk85,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk86,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk87,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk88,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk89,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk90,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk91,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk92,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk93,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk94,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk95,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk96,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk97,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk98,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk99,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk100,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk101,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk102,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk103,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk104,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk105,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk106,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.outlet_name,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.outlet_address,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.outlet_city,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.outlet_state,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.outlet_zip
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_UNITS_src
 WHERE (EXT_TR_DDDMD_WEEKLY_UNITS_src.batch_id IN ( SELECT max(EXT_TR_DDDMD_WEEKLY_UNITS_src.batch_id) AS max
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_UNITS_src));

CREATE  VIEW outbound.DDDMD_WEEKLY_DEMO_UNITS AS
 SELECT EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.client_num,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.report_num,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.ims_outlet_code,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.ims_facility_number,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.ims_prescriber_number,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.outlet_name,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.outlet_address,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.outlet_city,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.outlet_state,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.outlet_zip,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_name,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_address1,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_address2,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_address3,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_address4,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_city,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_state,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_zip
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src
 WHERE (EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.batch_id IN ( SELECT max(EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.batch_id) AS max
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src));

CREATE  VIEW outbound.zzz_create_paragard_specialty_rx AS
SELECT sh.source_customer_id AS "BP #", NULL AS "Ortho E", sh.customer_name AS "BP Name", coalesce(sh.ship_to_address_line_2, sh.ship_to_address_line_1) AS "Ship-to Street", sh.ship_to_city AS "Ship-to City", sh.ship_to_state AS "Ship-to State", sh.ship_to_zip AS "Ship-to ZipCd", NULL AS "Ship-to Ctry", NULL AS "Ship-to Phone", NULL AS "Ship-to Fax", NULL AS "Ship-to Email", ad.address AS "Bill-to Street", ad.city AS "Bill-to City", ad.state AS "Bill-to State", ad.zip_code AS "Bill-to ZipCd", NULL AS "Bill-to Ctry", NULL AS "Bill-to Phone", NULL AS "Bill-to Fax", NULL AS "Bill-to Email", CASE mod(sh.customer_type, 1::float) WHEN NULLSEQUAL 0::float THEN sh.customer_type ELSE rtrim(sh.customer_type, '0'::varchar(1)) END AS "Class of Trade", CASE mod(sh.order_no, 1::float) WHEN NULLSEQUAL 0::float THEN (((sh.order_no)::numeric)::int)::varchar ELSE rtrim(sh.order_no, '0'::varchar(1)) END AS "Invoice #", CASE mod(sh.net_cost, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.net_cost)::int)::varchar ELSE rtrim((sh.net_cost)::varchar, '0'::varchar(1)) END AS "Del Amt", to_char(sh.invoice_date, 'YYYY-MM-DD'::varchar(10)) AS "Inv Date", CASE mod(sh.quantity, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.quantity)::int)::varchar ELSE rtrim((sh.quantity)::varchar, '0'::varchar(1)) END AS "24237", NULL AS "24238", NULL AS "24800", NULL AS "33223", CASE mod(sh.package_size, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (sh.package_size)::varchar ELSE rtrim((sh.package_size)::varchar, '0'::varchar(1)) END AS Packs, NULL AS UnitPrice, NULL AS Territory, NULL AS "Order Type Cd", NULL AS "Order Type Desc", NULL AS LOBCdDesc, NULL AS PriceMatrixDef, ('A'::varchar(1) || btrim(to_char(sh.source_parent_customer_id, '000000000'::varchar(9)))) AS ParentBPCd, NULL AS ParentBPCdDesc, NULL AS GrandParentBPCdDesc, NULL AS "PO#", NULL AS "UPS#", CASE mod(sh.order_no, 1::float) WHEN NULLSEQUAL 0::float THEN (((sh.order_no)::numeric)::int)::varchar ELSE rtrim(sh.order_no, '0'::varchar(1)) END AS OrdNbr, NULL AS OrdLnNbr, NULL AS DiscAmt, NULL AS WhseCd, 'ANDA'::varchar(4) AS Data_Source, '51285020401'::varchar(11) AS NDC11_CODE FROM ((datamart.specialty_pharmacy_shipment sh LEFT JOIN (SELECT tw_address.address_id, tw_address.address, tw_address.city, tw_address.state, tw_address.zip_code FROM datamart.tw_address) ad ON ((sh.tw_bill_to_address_id = ad.address_id))) JOIN product.basket b ON ((b.basket_id = sh.basket_id))) WHERE ((b.name = 'PARAGARD'::varchar(8)) AND (b.basket_type = 'product'::varchar(7)) AND (sh.specialty_pharmacy_data_source = 'Anda'::varchar(4))) GROUP BY sh.source_customer_id, NULL, sh.customer_name, coalesce(sh.ship_to_address_line_2, sh.ship_to_address_line_1), sh.ship_to_city, sh.ship_to_state, sh.ship_to_zip, ad.address, ad.city, ad.state, ad.zip_code, CASE mod(sh.customer_type, 1::float) WHEN NULLSEQUAL 0::float THEN sh.customer_type ELSE rtrim(sh.customer_type, '0'::varchar(1)) END, CASE mod(sh.order_no, 1::float) WHEN NULLSEQUAL 0::float THEN (((sh.order_no)::numeric)::int)::varchar ELSE rtrim(sh.order_no, '0'::varchar(1)) END, CASE mod(sh.net_cost, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.net_cost)::int)::varchar ELSE rtrim((sh.net_cost)::varchar, '0'::varchar(1)) END, to_char(sh.invoice_date, 'YYYY-MM-DD'::varchar(10)), CASE mod(sh.quantity, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.quantity)::int)::varchar ELSE rtrim((sh.quantity)::varchar, '0'::varchar(1)) END, CASE mod(sh.package_size, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (sh.package_size)::varchar ELSE rtrim((sh.package_size)::varchar, '0'::varchar(1)) END, ('A'::varchar(1) || btrim(to_char(sh.source_parent_customer_id, '000000000'::varchar(9))));

CREATE  VIEW outbound.axiom_patient_transaction AS
 SELECT specialty_pharmacy_patient_txn.patient_yob,
        specialty_pharmacy_patient_txn.patient_gender,
        specialty_pharmacy_patient_txn.ims_surrogate_patient_id,
        specialty_pharmacy_patient_txn.product_ndc,
        specialty_pharmacy_patient_txn.product_name,
        specialty_pharmacy_patient_txn.product_strength,
        specialty_pharmacy_patient_txn.unit_of_measure,
        specialty_pharmacy_patient_txn.extended_wac_price,
        specialty_pharmacy_patient_txn.transaction_id,
        specialty_pharmacy_patient_txn.patient_status_date,
        specialty_pharmacy_patient_txn.patient_status_,
        specialty_pharmacy_patient_txn.patient_sub_status,
        specialty_pharmacy_patient_txn.specialty_pharmacy_patient_or_case_id,
        specialty_pharmacy_patient_txn.primary_icd_9,
        specialty_pharmacy_patient_txn.primary_icd_10,
        specialty_pharmacy_patient_txn.script_receipt_date,
        specialty_pharmacy_patient_txn.primary_appeal_status,
        specialty_pharmacy_patient_txn.primary_copay_type,
        specialty_pharmacy_patient_txn.primary_deductible,
        specialty_pharmacy_patient_txn.primary_pa_required,
        specialty_pharmacy_patient_txn.primary_copay_amount,
        specialty_pharmacy_patient_txn.primary_payer_name,
        specialty_pharmacy_patient_txn.primary_plan_name,
        specialty_pharmacy_patient_txn.primary_payer_type,
        specialty_pharmacy_patient_txn.primary_plan_type,
        specialty_pharmacy_patient_txn.primary_payer_reject_reason_code,
        specialty_pharmacy_patient_txn.primary_reimbursement_status,
        specialty_pharmacy_patient_txn.primary_reimbursement_status_date,
        specialty_pharmacy_patient_txn.primary_step_therapy_required,
        specialty_pharmacy_patient_txn.secondary_copay_type,
        specialty_pharmacy_patient_txn.secondary_deductible,
        specialty_pharmacy_patient_txn.secondary_pa_required,
        specialty_pharmacy_patient_txn.secondary_copay_amount,
        specialty_pharmacy_patient_txn.secondary_payer_name,
        specialty_pharmacy_patient_txn.secondary_plan_name,
        specialty_pharmacy_patient_txn.secondary_payer_type,
        specialty_pharmacy_patient_txn.secondary_plan_type,
        specialty_pharmacy_patient_txn.secondary_payer_reject_reason_code,
        specialty_pharmacy_patient_txn.secondary_step_therapy_required,
        specialty_pharmacy_patient_txn.ncpdp_number,
        specialty_pharmacy_patient_txn.pharmacy_name,
        specialty_pharmacy_patient_txn.pharmacy_zip,
        specialty_pharmacy_patient_txn.prescribing_physician_first_name,
        specialty_pharmacy_patient_txn.prescribing_physician_last_name,
        specialty_pharmacy_patient_txn.prescribing_physician_middle_initial,
        specialty_pharmacy_patient_txn.prescribing_physician_dea_number,
        specialty_pharmacy_patient_txn.prescribing_physician_me_number,
        specialty_pharmacy_patient_txn.prescribing_physician_npi_number,
        specialty_pharmacy_patient_txn.prescribing_physician_address_1,
        specialty_pharmacy_patient_txn.prescribing_physician_address_2,
        specialty_pharmacy_patient_txn.prescribing_physician_city,
        specialty_pharmacy_patient_txn.prescribing_physician_state,
        specialty_pharmacy_patient_txn.prescribing_physician_zip,
        specialty_pharmacy_patient_txn.number_of_fills_prescribed,
        specialty_pharmacy_patient_txn.number_of_refills_remaining,
        specialty_pharmacy_patient_txn.fill_type,
        specialty_pharmacy_patient_txn.rx_date,
        specialty_pharmacy_patient_txn.rx_number,
        specialty_pharmacy_patient_txn.carrier,
        specialty_pharmacy_patient_txn.date_of_drug_receipt,
        specialty_pharmacy_patient_txn.initial_ship_date,
        specialty_pharmacy_patient_txn.quantity_shipped,
        specialty_pharmacy_patient_txn.out_of_pocket_cost,
        specialty_pharmacy_patient_txn.shipment_date,
        specialty_pharmacy_patient_txn.product_lot_number,
        specialty_pharmacy_patient_txn.program_dispense_type,
        specialty_pharmacy_patient_txn.days_supply_dispensed,
        specialty_pharmacy_patient_txn.primary_payer_pa_outcome,
        specialty_pharmacy_patient_txn.secondary_payer_pa_outcome,
        specialty_pharmacy_patient_txn.rx_communication_method,
        specialty_pharmacy_patient_txn.tertiary_icd_10,
        specialty_pharmacy_patient_txn.ims_file_id,
        specialty_pharmacy_patient_txn.ims_transaction_id,
        specialty_pharmacy_patient_txn.ims_cycle_date,
        specialty_pharmacy_patient_txn.ims_supplier_id,
        specialty_pharmacy_patient_txn.ims_supplier_name,
        specialty_pharmacy_patient_txn.ims_transaction_type_code,
        specialty_pharmacy_patient_txn.ims_duplicate_transaction,
        specialty_pharmacy_patient_txn.ims_prescriber_id,
        specialty_pharmacy_patient_txn.ims_phys_first_name,
        specialty_pharmacy_patient_txn.ims_phys_last_name,
        specialty_pharmacy_patient_txn.ims_phys_address,
        specialty_pharmacy_patient_txn.ims_phys_city,
        specialty_pharmacy_patient_txn.ims_phys_state,
        specialty_pharmacy_patient_txn.ims_phys_zip,
        specialty_pharmacy_patient_txn.ims_phys_specialty,
        specialty_pharmacy_patient_txn.ims_product_id,
        specialty_pharmacy_patient_txn.ims_product_description,
        specialty_pharmacy_patient_txn.ims_outlet_id,
        specialty_pharmacy_patient_txn.ims_outlet_name,
        specialty_pharmacy_patient_txn.ims_outlet_address,
        specialty_pharmacy_patient_txn.ims_outlet_city,
        specialty_pharmacy_patient_txn.ims_outlet_state,
        specialty_pharmacy_patient_txn.ims_outlet_zip,
        specialty_pharmacy_patient_txn.ims_outlet_subcategory,
        specialty_pharmacy_patient_txn.ims_plan_id,
        specialty_pharmacy_patient_txn.ims_plan_name,
        specialty_pharmacy_patient_txn.ims_plan_model,
        specialty_pharmacy_patient_txn.primary_icd10_grouping,
        specialty_pharmacy_patient_txn.primary_icd10_grouping_reason_code,
        specialty_pharmacy_patient_txn.secondary_icd10_grouping,
        specialty_pharmacy_patient_txn.secondary_icd10_grouping_reason_code,
        specialty_pharmacy_patient_txn.ims_ndc_flag,
        specialty_pharmacy_patient_txn.ims_dispensed_date_flag,
        specialty_pharmacy_patient_txn.ims_dispensed_quantity_flag,
        specialty_pharmacy_patient_txn.ims_cost_flag,
        specialty_pharmacy_patient_txn.ims_overall_flag,
        specialty_pharmacy_patient_txn.patient_months,
        specialty_pharmacy_patient_txn.approved_indication,
        specialty_pharmacy_patient_txn.tvcmid,
        specialty_pharmacy_patient_txn.basket_id
 FROM datamart.specialty_pharmacy_patient_txn;

CREATE  VIEW outbound.tc_physician_univ AS
 SELECT dc.npi AS NPI,
        dc.dea_num AS DEA_NUM,
        upper(dc.last_name) AS LAST_NAME,
        upper(dc.first_name) AS FIRST_NAME,
        upper(dc.middle_name) AS MIDDLE_NAME,
        upper(((((dc.ptr_address_1 || ' '::varchar(1)) || dc.ptr_address_2) || ' '::varchar(1)) || dc.ptr_address_3)) AS ADDRESS,
        upper(dc.ptr_city) AS CITY,
        dc.ptr_state AS PTR_STATE,
        dc.ptr_zip AS PTR_ZIP
 FROM ( SELECT prescriber_combined_demographics.sales_force_id,
        prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.veeva_account_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.first_name,
        prescriber_combined_demographics.middle_name,
        prescriber_combined_demographics.last_name,
        prescriber_combined_demographics.ptr_veeva_address_id,
        prescriber_combined_demographics.ptr_address_1,
        prescriber_combined_demographics.ptr_city,
        prescriber_combined_demographics.ptr_state,
        prescriber_combined_demographics.ptr_zip,
        prescriber_combined_demographics.ptr_phone,
        prescriber_combined_demographics.ptr_territory_num,
        prescriber_combined_demographics.ptr_territory_type,
        prescriber_combined_demographics.ptr_address_source,
        prescriber_combined_demographics.ptr_mailable,
        prescriber_combined_demographics.dea_num,
        prescriber_combined_demographics.pdrp_flag,
        prescriber_combined_demographics.pdrp_date,
        prescriber_combined_demographics.np_pa_flag,
        prescriber_combined_demographics.no_spend,
        prescriber_combined_demographics.ama_no_contact_flag,
        prescriber_combined_demographics.email,
        prescriber_combined_demographics.degree,
        prescriber_combined_demographics.npi,
        prescriber_combined_demographics.tvcmid,
        prescriber_combined_demographics.ptr_address_2,
        prescriber_combined_demographics.ptr_address_3,
        row_number() OVER (PARTITION BY prescriber_combined_demographics.sales_force_id, prescriber_combined_demographics.npi ORDER BY prescriber_combined_demographics.ptr_territory_num) AS rnk
 FROM datamart.prescriber_combined_demographics) dc
 WHERE (((dc.ims_id IS NOT NULL) OR (dc.dea_num IS NOT NULL)) AND (dc.sales_force_id = 'TC'::varchar(2)) AND (dc.rnk = 1));

CREATE  VIEW outbound.zzz_cmop_station AS
 SELECT cmop_rx.visn AS VISN,
        cmop_rx.station_number AS STATION_NUMBER,
        cmop_rx.station AS STATION,
        NULL AS STATION_TYPE,
        NULL AS ADDRESS,
        NULL AS CITY,
        NULL AS STATE,
        cmop_rx.zip AS ZIP,
        NULL AS CMOP,
        NULL AS CMOP_DATE,
        to_char(max(cmop_rx.data_month), 'YYYY-MM-DD'::varchar(10)) AS CREATE_DATE,
        to_char((statement_timestamp())::date, 'YYYY-MM-DD'::varchar(10)) AS LAST_UPD_DATE,
        NULL AS STANDARD_ZIP
 FROM (datamart.cmop_rx JOIN ( SELECT cmop_rx.station_number,
        max(cmop_rx.data_month) AS maxmth
 FROM datamart.cmop_rx
 GROUP BY cmop_rx.station_number) ms ON (((ms.maxmth = cmop_rx.data_month) AND (ms.station_number = cmop_rx.station_number))))
 GROUP BY cmop_rx.visn,
          cmop_rx.station_number,
          cmop_rx.station,
          NULL,
          upper(cmop_rx.pharmacy),
          to_char((statement_timestamp())::date, 'YYYY-MM-DD'::varchar(10)),
          cmop_rx.zip;

CREATE  VIEW outbound.hcos_affiliation_type AS
 SELECT EXT_HCOS_AFFILIATION_TYPE_src.AFFIL_TYPE_ID,
        EXT_HCOS_AFFILIATION_TYPE_src.AFFIL_TYPE_CODE,
        EXT_HCOS_AFFILIATION_TYPE_src.AFFIL_TYPE_DESC,
        EXT_HCOS_AFFILIATION_TYPE_src.AFFIL_GROUP_CODE,
        EXT_HCOS_AFFILIATION_TYPE_src.AFFIL_GROUP_DESC
 FROM teva_ingestion.EXT_HCOS_AFFILIATION_TYPE_src
 WHERE (EXT_HCOS_AFFILIATION_TYPE_src.batch_id IN ( SELECT max(EXT_HCOS_AFFILIATION_TYPE_src.batch_id) AS max
 FROM teva_ingestion.EXT_HCOS_AFFILIATION_TYPE_src));

CREATE  VIEW outbound.zzz_hcos_business AS
 SELECT EXT_HCOS_BUSINESS_src.IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.BUSINESS_NAME,
        EXT_HCOS_BUSINESS_src.DBA_NAME,
        EXT_HCOS_BUSINESS_src.CARE_OF_LOCATION,
        EXT_HCOS_BUSINESS_src.ADDRESS_ID,
        EXT_HCOS_BUSINESS_src.STF_ID,
        EXT_HCOS_BUSINESS_src.PHYSICAL_ADDR_1,
        EXT_HCOS_BUSINESS_src.PHYSICAL_ADDR_2,
        EXT_HCOS_BUSINESS_src.PHYSICAL_CITY,
        EXT_HCOS_BUSINESS_src.PHYSICAL_STATE,
        EXT_HCOS_BUSINESS_src.PHYSICAL_ZIP,
        EXT_HCOS_BUSINESS_src.POSTAL_ADDR_1,
        EXT_HCOS_BUSINESS_src.POSTAL_ADDR_2,
        EXT_HCOS_BUSINESS_src.POSTAL_CITY,
        EXT_HCOS_BUSINESS_src.POSTAL_STATE,
        EXT_HCOS_BUSINESS_src.POSTAL_ZIP,
        EXT_HCOS_BUSINESS_src.PHONE,
        EXT_HCOS_BUSINESS_src.FAX,
        EXT_HCOS_BUSINESS_src.WEBSITE,
        EXT_HCOS_BUSINESS_src.LATITUDE,
        EXT_HCOS_BUSINESS_src.LONGITUDE,
        EXT_HCOS_BUSINESS_src.OWNER_STATUS,
        EXT_HCOS_BUSINESS_src.PROFIT_STATUS,
        EXT_HCOS_BUSINESS_src.CMI,
        EXT_HCOS_BUSINESS_src.PRIMARY_COT_ID,
        EXT_HCOS_BUSINESS_src.COT_CLASSIFICATION_ID,
        EXT_HCOS_BUSINESS_src.COT_CLASSIFICATION,
        EXT_HCOS_BUSINESS_src.COT_FACILITY_TYPE_ID,
        EXT_HCOS_BUSINESS_src.COT_FACILITY_TYPE,
        EXT_HCOS_BUSINESS_src.COT_SPECIALTY_ID,
        EXT_HCOS_BUSINESS_src.COT_SPECIALTY,
        EXT_HCOS_BUSINESS_src.RECORD_TYPE,
        EXT_HCOS_BUSINESS_src.BED_CLUSTER_ID,
        EXT_HCOS_BUSINESS_src.TTL_LICENSE_BEDS,
        EXT_HCOS_BUSINESS_src.TTL_CENSUS_BEDS,
        EXT_HCOS_BUSINESS_src.TTL_STAFFED_BEDS,
        EXT_HCOS_BUSINESS_src.TEACHING_HOSP,
        EXT_HCOS_BUSINESS_src.COMMHOSP,
        EXT_HCOS_BUSINESS_src.ALL_DDD,
        EXT_HCOS_BUSINESS_src.ALL_NPI,
        EXT_HCOS_BUSINESS_src.HIN,
        EXT_HCOS_BUSINESS_src.DEA,
        EXT_HCOS_BUSINESS_src.MPN,
        EXT_HCOS_BUSINESS_src.MPN_ORDER,
        EXT_HCOS_BUSINESS_src.MSA,
        EXT_HCOS_BUSINESS_src.FIPS_STATE,
        EXT_HCOS_BUSINESS_src.FIPS_COUNTY,
        EXT_HCOS_BUSINESS_src.NUM_OF_PROVIDERS,
        EXT_HCOS_BUSINESS_src.CORP_PARENT_IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.CORP_PARENT_NAME,
        EXT_HCOS_BUSINESS_src.OWNER_SUB_IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.OWNER_SUB_NAME,
        EXT_HCOS_BUSINESS_src.GPO_PHARMA_IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.GPO_PHARMA_NAME,
        EXT_HCOS_BUSINESS_src.GPO_MEDSURG_IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.GPO_MEDSURG_NAME,
        EXT_HCOS_BUSINESS_src.PHARMA_PROV_IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.PHARMA_PROV_NAME,
        EXT_HCOS_BUSINESS_src.FORMULARY,
        EXT_HCOS_BUSINESS_src.ELECTRONIC_MED_REC,
        EXT_HCOS_BUSINESS_src.EPRESCRIBE,
        EXT_HCOS_BUSINESS_src.PAYPERFORM,
        EXT_HCOS_BUSINESS_src.GENFIRST,
        EXT_HCOS_BUSINESS_src.SREP_ACCESS,
        EXT_HCOS_BUSINESS_src.DEACTIVATION_REASON,
        EXT_HCOS_BUSINESS_src.REFERBACK_IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.STATUS_INDICATOR
 FROM teva_ingestion.EXT_HCOS_BUSINESS_src
 WHERE (EXT_HCOS_BUSINESS_src.batch_id IN ( SELECT max(EXT_HCOS_BUSINESS_src.batch_id) AS max
 FROM teva_ingestion.EXT_HCOS_BUSINESS_src));

CREATE  VIEW outbound.zzz_hcos_identifier_fact AS
 SELECT EXT_HCOS_IDENTIFIER_FACT_src.IMS_ORG_ID,
        EXT_HCOS_IDENTIFIER_FACT_src.HCE_ID_PRFSNL,
        EXT_HCOS_IDENTIFIER_FACT_src.PROFESSIONAL_ID,
        EXT_HCOS_IDENTIFIER_FACT_src.IDENTIFIER_ID,
        EXT_HCOS_IDENTIFIER_FACT_src.IDENTIFIER,
        EXT_HCOS_IDENTIFIER_FACT_src.IDENTIFIER_ORDER,
        EXT_HCOS_IDENTIFIER_FACT_src.IDENTIFIER_CATEGORY,
        EXT_HCOS_IDENTIFIER_FACT_src.IDENTIFIER_STATE,
        EXT_HCOS_IDENTIFIER_FACT_src.SRC_STRT_DT,
        EXT_HCOS_IDENTIFIER_FACT_src.SRC_TRMTN_DT,
        EXT_HCOS_IDENTIFIER_FACT_src.SRC_TRMTN_CD
 FROM teva_ingestion.EXT_HCOS_IDENTIFIER_FACT_src
 WHERE (EXT_HCOS_IDENTIFIER_FACT_src.batch_id IN ( SELECT max(EXT_HCOS_IDENTIFIER_FACT_src.batch_id) AS max
 FROM teva_ingestion.EXT_HCOS_IDENTIFIER_FACT_src));

CREATE  VIEW outbound.zzz_hcos_professional AS
 SELECT EXT_HCOS_PROFESSIONAL_src.HCE_ID_PRFSNL,
        EXT_HCOS_PROFESSIONAL_src.PROFESSIONAL_ID,
        EXT_HCOS_PROFESSIONAL_src.FIRST_NAME,
        EXT_HCOS_PROFESSIONAL_src.MIDDLE_NAME,
        EXT_HCOS_PROFESSIONAL_src.LAST_NAME,
        EXT_HCOS_PROFESSIONAL_src.GEN_SUFFIX,
        EXT_HCOS_PROFESSIONAL_src.DESIGNATION,
        EXT_HCOS_PROFESSIONAL_src.GENDER,
        EXT_HCOS_PROFESSIONAL_src.ROLE,
        EXT_HCOS_PROFESSIONAL_src.PRIMARY_SPEC,
        EXT_HCOS_PROFESSIONAL_src.SECONDARY_SPEC,
        EXT_HCOS_PROFESSIONAL_src.TERTIARY_SPEC,
        EXT_HCOS_PROFESSIONAL_src.PRIMARY_PROF_CODE,
        EXT_HCOS_PROFESSIONAL_src.PRIMARY_PROF_DESC,
        EXT_HCOS_PROFESSIONAL_src.IMS_ID,
        EXT_HCOS_PROFESSIONAL_src.UPIN,
        EXT_HCOS_PROFESSIONAL_src.ME,
        EXT_HCOS_PROFESSIONAL_src.ALL_DEA,
        EXT_HCOS_PROFESSIONAL_src.NPI,
        EXT_HCOS_PROFESSIONAL_src.STATUS_DESC
 FROM teva_ingestion.EXT_HCOS_PROFESSIONAL_src
 WHERE (EXT_HCOS_PROFESSIONAL_src.batch_id IN ( SELECT max(EXT_HCOS_PROFESSIONAL_src.batch_id) AS max
 FROM teva_ingestion.EXT_HCOS_PROFESSIONAL_src));

CREATE  VIEW outbound.zzz_hcos_provider_affiliation_fact AS
 SELECT ext_hcos_provider_affiliation_fact_src.IMS_ORG_ID,
        ext_hcos_provider_affiliation_fact_src.HCE_ID_PRFSNL,
        ext_hcos_provider_affiliation_fact_src.PROFESSIONAL_ID,
        ext_hcos_provider_affiliation_fact_src.AFFIL_TYPE_ID,
        ext_hcos_provider_affiliation_fact_src.DEA,
        ext_hcos_provider_affiliation_fact_src.AFFIL_IND,
        ext_hcos_provider_affiliation_fact_src.AFFIL_RANK
 FROM teva_ingestion.ext_hcos_provider_affiliation_fact_src
 WHERE (ext_hcos_provider_affiliation_fact_src.batch_id IN ( SELECT max(ext_hcos_provider_affiliation_fact_src.batch_id) AS max
 FROM teva_ingestion.ext_hcos_provider_affiliation_fact_src));

CREATE  VIEW outbound.zzz_hcos_relationship_fact AS
 SELECT EXT_HCOS_RELATIONSHIP_FACT_src.IMS_ORG_ID_PARENT,
        EXT_HCOS_RELATIONSHIP_FACT_src.IMS_ORG_ID_CHILD,
        EXT_HCOS_RELATIONSHIP_FACT_src.REL_ID,
        EXT_HCOS_RELATIONSHIP_FACT_src.REL_ORDER
 FROM teva_ingestion.EXT_HCOS_RELATIONSHIP_FACT_src
 WHERE (EXT_HCOS_RELATIONSHIP_FACT_src.batch_id IN ( SELECT max(EXT_HCOS_RELATIONSHIP_FACT_src.batch_id) AS max
 FROM teva_ingestion.EXT_HCOS_RELATIONSHIP_FACT_src));

CREATE  VIEW outbound.zzz_hcos_relationship_type AS
 SELECT EXT_HCOS_RELATIONSHIP_TYPE_src.REL_ID,
        EXT_HCOS_RELATIONSHIP_TYPE_src.REL_CODE,
        EXT_HCOS_RELATIONSHIP_TYPE_src.REL_DESC,
        EXT_HCOS_RELATIONSHIP_TYPE_src.REL_GROUP_CODE,
        EXT_HCOS_RELATIONSHIP_TYPE_src.REL_GROUP_DESC,
        EXT_HCOS_RELATIONSHIP_TYPE_src.REL_CATEGORY_CODE,
        EXT_HCOS_RELATIONSHIP_TYPE_src.REL_CATEGORY_DESC
 FROM teva_ingestion.EXT_HCOS_RELATIONSHIP_TYPE_src
 WHERE (EXT_HCOS_RELATIONSHIP_TYPE_src.batch_id IN ( SELECT max(EXT_HCOS_RELATIONSHIP_TYPE_src.batch_id) AS max
 FROM teva_ingestion.EXT_HCOS_RELATIONSHIP_TYPE_src));

CREATE  VIEW outbound.zzz_hcos_ddd_xfer AS
 SELECT ext_hcos_ddd_xfer_src.IMS_ORG_ID,
        ext_hcos_ddd_xfer_src.HCE_ID_PRFSNL,
        ext_hcos_ddd_xfer_src.PROFESSIONAL_ID,
        ext_hcos_ddd_xfer_src.IDENTIFIER_ID,
        ext_hcos_ddd_xfer_src.IDENTIFIER,
        ext_hcos_ddd_xfer_src.IDENTIFIER_ORDER,
        ext_hcos_ddd_xfer_src.IDENTIFIER_CATEGORY,
        ext_hcos_ddd_xfer_src.IDENTIFIER_STATE,
        ext_hcos_ddd_xfer_src.SRC_STRT_DT,
        ext_hcos_ddd_xfer_src.SRC_TRMTN_DT,
        ext_hcos_ddd_xfer_src.SRC_TRMTN_CD
 FROM teva_ingestion.ext_hcos_ddd_xfer_src
 WHERE (ext_hcos_ddd_xfer_src.batch_id IN ( SELECT max(ext_hcos_ddd_xfer_src.batch_id) AS max
 FROM teva_ingestion.ext_hcos_ddd_xfer_src));

CREATE  VIEW outbound.zzz_zs_agile_mkt_fentora_obq_rx AS
 SELECT rx.ims_id AS IMS_ID,
        rx.payment_method AS MOP,
        b.teva_product_code AS PRODUCT_CODE,
        b.name AS PRODUCT_NAME,
        to_char(rx.rollup_month, 'YYYY-MM-DD'::varchar(10)) AS MONTH_ENDING,
        sum(rx.nrx_quantity) AS NRX_QTY,
        sum(rx.trx_quantity) AS TRX_QTY,
        sum(rx.nrx_count) AS NRX_CNT,
        sum(rx.trx_count) AS TRX_CNT
 FROM ((datamart.prescriber_rx rx JOIN reference.ims_report_cnt_qty_mapping m ON (((rx.ims_client_number = m.ims_client_number) AND (rx.ims_report_number_cnt <=> m.ims_report_number_cnt) AND (rx.ims_report_number_qty <=> m.ims_report_number_qty) AND (m.active_flag = 'Y'::char(1))))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((rx.basket_id = ANY (ARRAY[39, 38, 2, 72, 290, 575, 574])) AND (rx.rollup_month >= (last_day(add_months((statement_timestamp())::timestamp, (-26))) + 1)) AND (rx.rollup_month <= last_day(add_months((statement_timestamp())::timestamp, (-2)))) AND (length(rx.ims_id) = 7))
 GROUP BY rx.ims_id,
          rx.payment_method,
          b.teva_product_code,
          b.name,
          rx.rollup_month
 ORDER BY rx.rollup_month DESC;

CREATE  VIEW outbound.zs_calls_oncology_treanda AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TO'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, d.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6
 FROM ((( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'TREANDA'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((d.VEEVA_ACCOUNT_ID = c.veeva_account_id) AND (d.territory_num = c.territory_num))));

CREATE  VIEW outbound.zs_calls_oncology_synribo AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TO'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, d.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6
 FROM ((( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'SYNRIBO'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((d.VEEVA_ACCOUNT_ID = c.veeva_account_id) AND (d.territory_num = c.territory_num))));

CREATE  VIEW outbound.zs_calls_oncology_granix AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TO'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, d.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6
 FROM ((( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'GRANIX'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((d.VEEVA_ACCOUNT_ID = c.veeva_account_id) AND (d.territory_num = c.territory_num))));

CREATE  VIEW outbound.zs_calls_oncology_bendeka AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TO'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, d.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6
 FROM ((( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'BENDEKA'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((d.VEEVA_ACCOUNT_ID = c.veeva_account_id) AND (d.territory_num = c.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_ts_cinqair AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TS'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TS'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'CINQAIR'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'CINQAIR'::varchar(7)) AND (cp.sales_force_id = 'TS'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TS'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TS'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'CINQAIR'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'CINQAIR'::varchar(7)) AND (cp.sales_force_id = 'TS'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zzz_asi_rx_by_market_hd AS
SELECT rx.market_name, rx.ims_client_number AS ims_client_num, rx.ims_report_number_cnt AS ims_report_num, rx.ims_zip_other AS zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id, rx.ims_specialty AS specialty, rx.payer_plan_number AS plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.ims_rx_type AS rx_type, CASE WHEN (opn.basket_id IS NOT NULL) THEN opn.outbound_prod_name ELSE btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) END AS ims_product_group_num, NULL AS filler_01, axd.ims_me_num AS me_num, rx.prescriber_last_name AS last_name, rx.prescriber_first_name AS first_name, axd.ims_middle_name AS middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address, axd.ims_city AS city, axd.ims_state AS state, axd.ims_zip AS zip, coalesce(replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar), rx.indication) AS supplemental_data, rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, sum(CASE WHEN (mth.month_bucket = 1) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (((datamart.prescriber_rx rx JOIN (SELECT ims_week_buckets.month_ending, ims_week_buckets.month_bucket FROM integration.ims_week_buckets GROUP BY ims_week_buckets.month_ending, ims_week_buckets.month_bucket) mth ON ((rx.rollup_month = mth.month_ending))) JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number <=> axd.ims_client_number) AND (rx.ims_report_number_cnt <=> axd.ims_report_number) AND (rx.ims_id <=> axd.ims_id) AND (rx.ims_product_group <=> axd.ims_product_group) AND (rx.ims_specialty <=> axd.ims_specialty) AND (rx.ims_zip_other <=> axd.ims_zip_other)))) LEFT JOIN reference.outbound_product_name opn ON (((rx.basket_id = opn.basket_id) AND (opn.transform_name = 'ASI_IMS_OBM'::varchar(11))))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '8'::varchar(1))) GROUP BY rx.market_name, rx.ims_client_number, rx.ims_report_number_cnt, rx.ims_zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END, rx.ims_specialty, axd.ims_me_num, rx.payer_plan_number, btrim(to_char(rx.sales_category, '00'::varchar(2))), rx.ims_rx_type, CASE WHEN (opn.basket_id IS NOT NULL) THEN opn.outbound_prod_name ELSE btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) END, rx.prescriber_last_name, rx.prescriber_first_name, axd.ims_middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar), axd.ims_city, axd.ims_state, axd.ims_zip, coalesce(replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar), rx.indication), rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.knipper_merge AS
 SELECT merges.current_tvcmid AS TVCMIDWinner,
        merges.previous_tvcmid AS TVCMIDLoser,
        to_char((now())::date, 'MM/DD/YYYY'::varchar(10)) AS TVCMIDMergeEffectiveDate
 FROM mdm.merges
 WHERE (merges.file_id = ( SELECT max(merges.file_id) AS MAX
 FROM mdm.merges))
 GROUP BY merges.current_tvcmid,
          merges.previous_tvcmid,
          to_char((now())::date, 'MM/DD/YYYY'::varchar(10));

CREATE  VIEW outbound.knipper_supplemental AS
 SELECT a.tvcmid AS TVCMID,
        CASE WHEN (a.medical_suffix IS NULL) THEN ''::varchar ELSE a.medical_suffix END AS ProfDesig,
        a.first_name AS FName,
        a.last_name AS Lname,
        CASE WHEN (a.middle_name IS NULL) THEN ''::varchar ELSE a.middle_name END AS MI,
        CASE WHEN (a.personal_suffix IS NULL) THEN ''::varchar ELSE a.personal_suffix END AS Suffix,
        CASE WHEN (a.hce_status_desc IS NULL) THEN 'A'::varchar(1) WHEN (a.hce_status_desc = 'ACTIVE'::varchar(6)) THEN 'A'::varchar(1) WHEN (a.hce_status_desc = 'INACTIVE'::varchar(8)) THEN 'I'::varchar(1) ELSE 'D'::varchar(1) END AS Status,
        CASE WHEN (a.hce_status_desc = 'PRESUMED DEAD'::varchar(13)) THEN 'D'::varchar(1) WHEN (a.hce_status_desc = 'SEMI-RETIRED'::varchar(12)) THEN 'O'::varchar(1) WHEN (a.hce_status_desc = 'RETIRED'::varchar(7)) THEN 'R'::varchar(1) ELSE ''::varchar END AS DeleteReason,
        CASE WHEN ((a.hce_status_desc IS NULL) OR (a.hce_status_desc <> ALL (ARRAY['ACTIVE'::varchar(8), 'INACTIVE'::varchar(8)]))) THEN to_char(e.last_update_date, 'MM/DD/YYYY'::varchar(10)) ELSE ''::varchar END AS DeleteDate,
        CASE WHEN (a.primary_specialty IS NULL) THEN 'US'::varchar(2) ELSE a.primary_specialty END AS Specialty,
        CASE WHEN (a.address_line1 IS NULL) THEN ''::varchar ELSE a.address_line1 END AS Address1,
        CASE WHEN (a.address_line2 IS NULL) THEN ''::varchar ELSE a.address_line2 END AS Address2,
        ''::varchar AS Address3,
        CASE WHEN (a.city IS NULL) THEN ''::varchar ELSE a.city END AS City,
        CASE WHEN (a.state IS NULL) THEN ''::varchar ELSE a.state END AS State,
        CASE WHEN (a.zip IS NULL) THEN ''::varchar ELSE a.zip END AS Zip,
        CASE WHEN (b.sln IS NULL) THEN ''::varchar ELSE b.sln END AS SLN,
        CASE WHEN ((b.sln IS NULL) OR (b.sln = ''::varchar)) THEN ''::varchar ELSE CASE WHEN (b.sln_status_code = 'A'::varchar(1)) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END END AS SLNActiveFlag,
        CASE WHEN ((b.sln IS NULL) OR (b.sln = ''::varchar)) THEN ''::varchar ELSE to_char(b.sln_expiration_date, 'MM/DD/YYYY'::varchar(10)) END AS SLNExpirationDate,
        CASE WHEN (c.flag_value = 'Y'::varchar(1)) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS DNCWakeFlag,
        CASE WHEN (d.tvcmid IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS DNP
 FROM (((((( SELECT prescriber_rx.tvcmid
 FROM datamart.prescriber_rx
 GROUP BY prescriber_rx.tvcmid) exp JOIN ( SELECT hcp_demo.tvcmid,
        hcp_demo.ims_id,
        hcp_demo.npi,
        hcp_demo.last_name,
        hcp_demo.first_name,
        hcp_demo.middle_name,
        hcp_demo.personal_suffix,
        hcp_demo.medical_suffix,
        hcp_demo.primary_specialty,
        hcp_demo.address_line1,
        hcp_demo.address_line2,
        hcp_demo.city,
        hcp_demo.state_code AS state,
        hcp_demo.zip,
        hcp_demo.business_phone,
        hcp_demo.business_email,
        hcp_demo.hce_status_desc,
        hcp_demo.file_id,
        hcp_demo.record_id,
        hcp_demo.np_pa_flag
 FROM datamart.customer_hcp_demographics hcp_demo
 WHERE (hcp_demo.file_id = ( SELECT max(customer_hcp_demographics.file_id) AS MAX
 FROM datamart.customer_hcp_demographics))) a ON ((exp.tvcmid = a.tvcmid))) JOIN ( SELECT sample_eligibility.sln,
        sample_eligibility.sln_state,
        sample_eligibility.sln_expiration_date,
        sample_eligibility.sln_status_code,
        sample_eligibility.tvcmid
 FROM mdm.sample_eligibility
 WHERE (sample_eligibility.file_id = ( SELECT max(sample_eligibility.file_id) AS MAX
 FROM mdm.sample_eligibility))) b ON (((a.tvcmid = b.tvcmid) AND (a.state = b.sln_state)))) LEFT  JOIN ( SELECT ims_flag.tvcmid,
        ims_flag.flag_type,
        ims_flag.flag_value
 FROM mdm.ims_flag
 WHERE ((ims_flag.file_id = ( SELECT max(ims_flag.file_id) AS MAX
 FROM mdm.ims_flag)) AND (ims_flag.flag_type = 'AMADNC'::varchar(6)))) c ON ((a.tvcmid = c.tvcmid))) LEFT  JOIN datamart.do_not_promote d ON ((a.tvcmid = d.tvcmid))) LEFT  JOIN ( SELECT hcp.updated_date AS last_update_date,
        hcp.tvcmid
 FROM mdm.hcp
 WHERE (hcp.file_id = ( SELECT max(hcp.file_id) AS MAX
 FROM mdm.hcp))) e ON ((a.tvcmid = e.tvcmid)));

CREATE  VIEW outbound.zzz_asi_market_access_hd AS
SELECT coalesce(chd.zip, o.zip, pcd.ptr_zip) AS zip, coalesce(chd.state_code, o.state, pcd.ptr_state, csz.state) AS state, rx.payer_plan_number AS payer_plan_num, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END AS report_num, coalesce(CASE WHEN (rx.indication IS NOT NULL) THEN b.teva_product_code ELSE rx.ims_product_group END, rx.ims_product_group) AS ims_product_group_num, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) AS data_month, sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.nrx_count ELSE 0::float END) AS nrx_001, sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.nrx_count ELSE 0::float END) AS nrx_002, sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.nrx_count ELSE 0::float END) AS nrx_003, sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.nrx_count ELSE 0::float END) AS nrx_004, sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.nrx_count ELSE 0::float END) AS nrx_005, sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.nrx_count ELSE 0::float END) AS nrx_006, sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.nrx_count ELSE 0::float END) AS nrx_007, sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.nrx_count ELSE 0::float END) AS nrx_008, sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.nrx_count ELSE 0::float END) AS nrx_009, sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.nrx_count ELSE 0::float END) AS nrx_010, sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.nrx_count ELSE 0::float END) AS nrx_011, sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.nrx_count ELSE 0::float END) AS nrx_012, sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.nrx_count ELSE 0::float END) AS nrx_013, sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.nrx_count ELSE 0::float END) AS nrx_014, sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.nrx_count ELSE 0::float END) AS nrx_015, sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.nrx_count ELSE 0::float END) AS nrx_016, sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.nrx_count ELSE 0::float END) AS nrx_017, sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.nrx_count ELSE 0::float END) AS nrx_018, sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.nrx_count ELSE 0::float END) AS nrx_019, sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.nrx_count ELSE 0::float END) AS nrx_020, sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.nrx_count ELSE 0::float END) AS nrx_021, sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.nrx_count ELSE 0::float END) AS nrx_022, sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.nrx_count ELSE 0::float END) AS nrx_023, sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.nrx_count ELSE 0::float END) AS nrx_024, sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS trx_001, sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS trx_002, sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS trx_003, sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS trx_004, sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS trx_005, sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS trx_006, sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS trx_007, sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS trx_008, sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS trx_009, sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS trx_010, sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS trx_011, sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS trx_012, sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS trx_013, sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS trx_014, sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS trx_015, sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS trx_016, sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS trx_017, sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS trx_018, sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS trx_019, sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS trx_020, sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS trx_021, sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS trx_022, sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS trx_023, sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS trx_024 FROM (((((((datamart.prescriber_rx rx JOIN product.basket b ON ((rx.basket_id = b.basket_id))) JOIN (SELECT ims_week_buckets.month_bucket, ims_week_buckets.month_ending FROM integration.ims_week_buckets GROUP BY ims_week_buckets.month_bucket, ims_week_buckets.month_ending) iwb ON ((rx.rollup_month = iwb.month_ending))) LEFT JOIN reference.outbound_product_name opn ON (((rx.basket_id = opn.basket_id) AND (opn.transform_name = 'ASI_MKT_ACCESS_OBM'::varchar(18))))) LEFT JOIN datamart.customer_hcp_demographics chd ON ((rx.ims_id = chd.ims_id))) LEFT JOIN (SELECT hco_demo.tvcmid, hco_demo.state_code AS state, hco_demo.zip FROM datamart.customer_hco_demographics hco_demo) o ON ((rx.tvcmid = o.tvcmid))) LEFT JOIN (SELECT rnk.ims_id, rnk.ptr_state, rnk.ptr_zip FROM (SELECT DISTINCT prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source) AS rnk FROM datamart.prescriber_combined_demographics ORDER BY prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source)) rnk WHERE (rnk.rnk = 1)) pcd ON ((pcd.ims_id = rx.ims_id))) LEFT JOIN reference.city_state_zip csz ON ((coalesce(chd.zip, o.zip, pcd.ptr_zip) = csz.zip))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '8'::varchar(1))) GROUP BY coalesce(chd.zip, o.zip, pcd.ptr_zip), coalesce(chd.state_code, o.state, pcd.ptr_state, csz.state), rx.payer_plan_number, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END, coalesce(CASE WHEN (rx.indication IS NOT NULL) THEN b.teva_product_code ELSE rx.ims_product_group END, rx.ims_product_group), to_char(rx.data_date, 'MM/YYYY'::varchar(7));

CREATE  VIEW outbound.zzz_asi_market_access_hd_tot AS
SELECT asi_market_access_hd.report_num, asi_market_access_hd.ims_product_group_num AS product_num, asi_market_access_hd.data_month, sum(asi_market_access_hd.nrx_001) AS total_nrx_01, sum(asi_market_access_hd.nrx_002) AS total_nrx_02, sum(asi_market_access_hd.nrx_003) AS total_nrx_03, sum(asi_market_access_hd.nrx_004) AS total_nrx_04, sum(asi_market_access_hd.nrx_005) AS total_nrx_05, sum(asi_market_access_hd.nrx_006) AS total_nrx_06, sum(asi_market_access_hd.nrx_007) AS total_nrx_07, sum(asi_market_access_hd.nrx_008) AS total_nrx_08, sum(asi_market_access_hd.nrx_009) AS total_nrx_09, sum(asi_market_access_hd.nrx_010) AS total_nrx_10, sum(asi_market_access_hd.nrx_011) AS total_nrx_11, sum(asi_market_access_hd.nrx_012) AS total_nrx_12, sum(asi_market_access_hd.nrx_013) AS total_nrx_13, sum(asi_market_access_hd.nrx_014) AS total_nrx_14, sum(asi_market_access_hd.nrx_015) AS total_nrx_15, sum(asi_market_access_hd.nrx_016) AS total_nrx_16, sum(asi_market_access_hd.nrx_017) AS total_nrx_17, sum(asi_market_access_hd.nrx_018) AS total_nrx_18, sum(asi_market_access_hd.nrx_019) AS total_nrx_19, sum(asi_market_access_hd.nrx_020) AS total_nrx_20, sum(asi_market_access_hd.nrx_021) AS total_nrx_21, sum(asi_market_access_hd.nrx_022) AS total_nrx_22, sum(asi_market_access_hd.nrx_023) AS total_nrx_23, sum(asi_market_access_hd.nrx_024) AS total_nrx_24, sum(asi_market_access_hd.trx_001) AS total_trx_01, sum(asi_market_access_hd.trx_002) AS total_trx_02, sum(asi_market_access_hd.trx_003) AS total_trx_03, sum(asi_market_access_hd.trx_004) AS total_trx_04, sum(asi_market_access_hd.trx_005) AS total_trx_05, sum(asi_market_access_hd.trx_006) AS total_trx_06, sum(asi_market_access_hd.trx_007) AS total_trx_07, sum(asi_market_access_hd.trx_008) AS total_trx_08, sum(asi_market_access_hd.trx_009) AS total_trx_09, sum(asi_market_access_hd.trx_010) AS total_trx_10, sum(asi_market_access_hd.trx_011) AS total_trx_11, sum(asi_market_access_hd.trx_012) AS total_trx_12, sum(asi_market_access_hd.trx_013) AS total_trx_13, sum(asi_market_access_hd.trx_014) AS total_trx_14, sum(asi_market_access_hd.trx_015) AS total_trx_15, sum(asi_market_access_hd.trx_016) AS total_trx_16, sum(asi_market_access_hd.trx_017) AS total_trx_17, sum(asi_market_access_hd.trx_018) AS total_trx_18, sum(asi_market_access_hd.trx_019) AS total_trx_19, sum(asi_market_access_hd.trx_020) AS total_trx_20, sum(asi_market_access_hd.trx_021) AS total_trx_21, sum(asi_market_access_hd.trx_022) AS total_trx_22, sum(asi_market_access_hd.trx_023) AS total_trx_23, sum(asi_market_access_hd.trx_024) AS total_trx_24 FROM outbound.asi_market_access_hd GROUP BY asi_market_access_hd.report_num, asi_market_access_hd.ims_product_group_num, asi_market_access_hd.data_month;

CREATE  VIEW outbound.zzz_ddd_subcategory AS
 SELECT ddd_subcategory.subcategory_code AS SUBCATEGORY_CODE,
        ddd_subcategory.category_code AS CATEGORY_CODE,
        ddd_subcategory.cot_code AS COT_CODE,
        ddd_subcategory.mailorder_flag AS MAILORDER_FLAG,
        ddd_subcategory.nonretail_flag AS NONRETAIL_FLAG,
        ddd_subcategory.outlet_example AS OUTLET_EXAMPLE,
        ddd_subcategory.outlet_description AS OUTLET_DESC,
        ddd_subcategory.outlet_definition AS OUTLET_DEFN,
        ddd_subcategory.mdm_flag AS MDM_FLAG,
        ddd_subcategory.adm_flag AS ADM_FLAG,
        ddd_subcategory.onc_subcat_group AS ONC_SUBCAT_GROUP
 FROM reference.ddd_subcategory;

CREATE  VIEW outbound.activity_centris_speaker_event AS
 SELECT cmid.id_num AS federation_id,
        e.locationtype AS contact,
        'Centris'::varchar(7) AS source,
        to_char(e.interactionstartdate, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(((concat((e.interactionname || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)) || ea.attended), (e.interactionstartdate)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (b.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Speaker_Program'::varchar(15) AS type,
        'Speaker_Program'::varchar(15) AS native_type,
        ((concat((('Speaker Program-'::varchar(16) || e.product1name) || ','::varchar(1)), (e.totalestimatedparticipantcount)::varchar) || ' Attendees,'::varchar(11)) || CASE WHEN (ea.attended = 1::float) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((datamart.ahm_participant ea JOIN ( SELECT ints.file_id,
        dm.feed_version,
        dm.feed_id,
        ints.interactioncode,
        ints.interactionname,
        ints.interactionstartdate,
        ints.product1id,
        ints.product1name,
        ints.totalestimatedparticipantcount,
        ints.locationtype
 FROM (datamart.ahm_interactions ints JOIN metadata.data_file_metadata dm ON ((dm.file_id = ints.file_id)))
 WHERE (ints.interactionstartdate >= add_months((now())::date, (-6)))
 GROUP BY ints.file_id,
          dm.feed_version,
          dm.feed_id,
          ints.interactioncode,
          ints.interactionname,
          ints.interactionstartdate,
          ints.product1id,
          ints.product1name,
          ints.totalestimatedparticipantcount,
          ints.locationtype) e ON ((ea.interactioncode = e.interactioncode))) JOIN datamart.tvcmid_xref cmid ON (((ea.clientcustomerid = cmid.tvcmid) AND (regexp_count(ea.clientcustomerid, '^[0-9.-]+$'::varchar(10), 1, ''::varchar) = 1) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN product.source_product sp ON (((upper(e.product1id) = upper(sp.source_product_code)) AND (e.feed_id = sp.feed_id) AND (e.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE (ea.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_PARTICIPANT'::varchar(19)))), 0))
 GROUP BY cmid.id_num,
          e.locationtype,
          'Centris'::varchar(7),
          to_char(e.interactionstartdate, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)),
          concat(((concat((e.interactionname || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)) || ea.attended), (e.interactionstartdate)::varchar),
          NULL,
          (b.basket_id)::varchar(20),
          'HCP'::varchar(3),
          'Speaker_Program'::varchar(15),
          ((concat((('Speaker Program-'::varchar(16) || e.product1name) || ','::varchar(1)), (e.totalestimatedparticipantcount)::varchar) || ' Attendees,'::varchar(11)) || CASE WHEN (ea.attended = 1::float) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END),
          to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) EXCEPT  SELECT cmid.id_num AS federation_id,
        e.locationtype AS contact,
        'Centris'::varchar(7) AS source,
        to_char(e.interactionstartdate, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(((concat((e.interactionname || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)) || ea.attended), (e.interactionstartdate)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (b.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Speaker_Program'::varchar(15) AS type,
        'Speaker_Program'::varchar(15) AS native_type,
        ((concat((('Speaker Program-'::varchar(16) || e.product1name) || ','::varchar(1)), (e.totalestimatedparticipantcount)::varchar) || ' Attendees,'::varchar(11)) || CASE WHEN (ea.attended = 1::float) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((datamart.ahm_participant ea JOIN ( SELECT ints.file_id,
        dm.feed_version,
        dm.feed_id,
        ints.interactioncode,
        ints.interactionname,
        ints.interactionstartdate,
        ints.product1id,
        ints.product1name,
        ints.totalestimatedparticipantcount,
        ints.locationtype
 FROM (datamart.ahm_interactions ints JOIN metadata.data_file_metadata dm ON ((dm.file_id = ints.file_id)))
 WHERE (ints.interactionstartdate >= add_months((now())::date, (-6)))
 GROUP BY ints.file_id,
          dm.feed_version,
          dm.feed_id,
          ints.interactioncode,
          ints.interactionname,
          ints.interactionstartdate,
          ints.product1id,
          ints.product1name,
          ints.totalestimatedparticipantcount,
          ints.locationtype) e ON ((ea.interactioncode = e.interactioncode))) JOIN datamart.tvcmid_xref cmid ON (((ea.clientcustomerid = cmid.tvcmid) AND (regexp_count(ea.clientcustomerid, '^[0-9.-]+$'::varchar(10), 1, ''::varchar) = 1) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN product.source_product sp ON (((upper(e.product1id) = upper(sp.source_product_code)) AND (e.feed_id = sp.feed_id) AND (e.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE (ea.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_PARTICIPANT'::varchar(19)))), 0))
 GROUP BY cmid.id_num,
          e.locationtype,
          'Centris'::varchar(7),
          to_char(e.interactionstartdate, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)),
          concat(((concat((e.interactionname || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)) || ea.attended), (e.interactionstartdate)::varchar),
          NULL,
          (b.basket_id)::varchar(20),
          'HCP'::varchar(3),
          'Speaker_Program'::varchar(15),
          ((concat((('Speaker Program-'::varchar(16) || e.product1name) || ','::varchar(1)), (e.totalestimatedparticipantcount)::varchar) || ' Attendees,'::varchar(11)) || CASE WHEN (ea.attended = 1::float) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END),
          to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23));

CREATE  VIEW outbound.v_activity_line_item AS
( SELECT activity_line_item_speaker_event.activity,
        activity_line_item_speaker_event."datetime",
        activity_line_item_speaker_event.trackback_id,
        activity_line_item_speaker_event.previous_line_item,
        activity_line_item_speaker_event.level_master_id,
        activity_line_item_speaker_event.type,
        activity_line_item_speaker_event.native_type,
        activity_line_item_speaker_event.details,
        activity_line_item_speaker_event.created,
        activity_line_item_speaker_event.modified
 FROM outbound.activity_line_item_speaker_event UNION ALL  SELECT activity_line_item_non_npp_sample_orders.activity,
        activity_line_item_non_npp_sample_orders."datetime",
        activity_line_item_non_npp_sample_orders.trackback_id,
        activity_line_item_non_npp_sample_orders.previous_line_item,
        activity_line_item_non_npp_sample_orders.level_master_id,
        activity_line_item_non_npp_sample_orders.type,
        activity_line_item_non_npp_sample_orders.native_type,
        activity_line_item_non_npp_sample_orders.details,
        activity_line_item_non_npp_sample_orders.created,
        activity_line_item_non_npp_sample_orders.modified
 FROM outbound.activity_line_item_non_npp_sample_orders) UNION ALL  SELECT activity_line_item_centris_speaker_event.activity,
        activity_line_item_centris_speaker_event."datetime",
        activity_line_item_centris_speaker_event.trackback_id,
        activity_line_item_centris_speaker_event.previous_line_item,
        activity_line_item_centris_speaker_event.level_master_id,
        activity_line_item_centris_speaker_event.type,
        activity_line_item_centris_speaker_event.native_type,
        activity_line_item_centris_speaker_event.details,
        activity_line_item_centris_speaker_event.created,
        activity_line_item_centris_speaker_event.modified
 FROM outbound.activity_line_item_centris_speaker_event;

CREATE  VIEW outbound.zzz_alphascrip_roster AS
 SELECT rep.territory_number AS TerritoryID,
        rep.territory_name AS TerritoryName,
        CASE WHEN (rep.rep_type = 'REP'::varchar(3)) THEN 'Territory'::varchar(9) WHEN (rep.rep_type = 'MGR'::varchar(3)) THEN 'Region'::varchar(6) WHEN (rep.rep_type = 'DIR'::varchar(3)) THEN 'Area'::varchar(4) WHEN (rep.rep_type = 'VP'::varchar(2)) THEN 'National'::varchar(8) ELSE NULL END AS Territorytype,
        rep.last_name AS Territoryincumbentlastname,
        rep.first_name AS Territoryincumbentfirstname,
        rep.email AS Territoryincumbentbusinessemailaddress
 FROM datamart.roster rep
 WHERE ((rep.employee_id IS NOT NULL) AND (rep.hr_status = 'Active'::varchar(6)) AND (rep.sales_force_id = 'TP'::varchar(2)))
 GROUP BY rep.territory_number,
          rep.territory_name,
          CASE WHEN (rep.rep_type = 'REP'::varchar(3)) THEN 'Territory'::varchar(9) WHEN (rep.rep_type = 'MGR'::varchar(3)) THEN 'Region'::varchar(6) WHEN (rep.rep_type = 'DIR'::varchar(3)) THEN 'Area'::varchar(4) WHEN (rep.rep_type = 'VP'::varchar(2)) THEN 'National'::varchar(8) ELSE NULL END,
          rep.last_name,
          rep.first_name,
          rep.email;

CREATE  VIEW outbound.zzz_zs_access_monito_calls_by_specialty_respiratory AS
SELECT 'TEVA'::varchar(4) AS company, x.specialty_code, d.prim_specialty, count(DISTINCT c.tvcmid) AS number_of_physicians_6mth FROM (((SELECT sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE (sfa_demographics.ims_id IS NOT NULL) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.tvcmid FROM datamart.sfa_call c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01))) GROUP BY c.tvcmid) c ON ((d.tvcmid = c.tvcmid))) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) GROUP BY d.prim_specialty, x.specialty_code ORDER BY x.specialty_code;

CREATE  VIEW outbound.zs_access_monitor_call_data_cns AS
SELECT 'TEVA'::varchar(4) AS company, d.sales_force_id AS sales_force, coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM, NULL AS me_num, d.npi, d.VEEVA_ACCOUNT_ID AS veeva_account_id, d.tvcmid, d.ims_id, to_char(m.m01, 'yyyymm'::varchar(6)) AS month1, c.p1_calls_mth1, c.p1_calls_mth2, c.p1_calls_mth3, c.p1_calls_mth4, c.p1_calls_mth5, c.p1_calls_mth6, cp.plan_calls AS total_calls, to_char(m.m04, 'yyyymm'::varchar(6)) AS start_month, to_char(m.m01, 'yyyymm'::varchar(6)) AS end_month, '4'::varchar(1) AS duration, CASE WHEN (cp.tvcmid IS NULL) THEN '0'::varchar(1) ELSE '1'::varchar(1) END AS physician_value, d.ZIP AS physician_zip, x.specialty_code AS physician_specialty FROM ((((((SELECT calls.tvcmid, calls.territory_num FROM (SELECT c.tvcmid, c.territory_number AS territory_num, c.rep_id, trunc(c.call_date, 'MON'::varchar(3)) AS call_date, sum(1) AS pri_calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.tvcmid, c.territory_number, c.rep_id, trunc(c.call_date, 'MON'::varchar(3))) calls UNION SELECT call_plan.tvcmid, call_plan.territory_num FROM (SELECT cp.tvcmid, cp.territory_number AS territory_num, sum(cp.p1) AS plan_calls FROM datamart.call_plan cp WHERE (cp.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) GROUP BY cp.tvcmid, cp.territory_number) call_plan) u JOIN (SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.sales_force_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE ((sfa_demographics.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) AND (sfa_demographics.ims_id IS NOT NULL)) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.sales_force_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d ON (((u.tvcmid = d.tvcmid) AND (u.territory_num = d.territory_num)))) JOIN (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m ON (true)) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) LEFT JOIN (SELECT c.tvcmid, c.territory_num, c.rep_id, sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1, sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2, sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3, sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4, sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5, sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6 FROM (SELECT c.tvcmid, c.territory_number AS territory_num, c.rep_id, trunc(c.call_date, 'MON'::varchar(3)) AS call_date, sum(1) AS pri_calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.tvcmid, c.territory_number, c.rep_id, trunc(c.call_date, 'MON'::varchar(3))) c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m GROUP BY c.tvcmid, c.territory_num, c.rep_id) c ON (((u.tvcmid = c.tvcmid) AND (u.territory_num = c.territory_num)))) LEFT JOIN (SELECT cp.tvcmid, cp.territory_number AS territory_num, sum(cp.p1) AS plan_calls FROM datamart.call_plan cp WHERE (cp.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) GROUP BY cp.tvcmid, cp.territory_number) cp ON (((u.tvcmid = cp.tvcmid) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_access_monitor_call_data_oncology AS
SELECT 'TEVA'::varchar(4) AS company, 'TO'::varchar(2) AS sales_force, coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM, NULL AS me_num, d.npi, d.VEEVA_ACCOUNT_ID AS veeva_account_id, d.tvcmid, d.ims_id, to_char(m.m01, 'yyyymm'::varchar(6)) AS month1, c.p1_calls_mth1, c.p1_calls_mth2, c.p1_calls_mth3, c.p1_calls_mth4, c.p1_calls_mth5, c.p1_calls_mth6, NULL AS total_calls, NULL AS start_month, NULL AS end_month, '4'::varchar(1) AS duration, '1'::varchar(1) AS physician_value, d.ZIP AS physician_zip, x.specialty_code AS physician_specialty FROM ((((((SELECT calls.tvcmid, calls.territory_num FROM (SELECT c.tvcmid, c.territory_number AS territory_num, c.rep_id, trunc(c.call_date, 'MON'::varchar(3)) AS call_date, sum(1) AS pri_calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.tvcmid, c.territory_number, c.rep_id, trunc(c.call_date, 'MON'::varchar(3))) calls UNION SELECT call_plan.tvcmid, call_plan.territory_num FROM (SELECT cp.tvcmid, cp.territory_number AS territory_num, sum(cp.p1) AS plan_calls FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.period = zs.semester)))) WHERE (cp.sales_force_id = 'TO'::varchar(2)) GROUP BY cp.tvcmid, cp.territory_number) call_plan) u JOIN (SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL)) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d ON (((u.tvcmid = d.tvcmid) AND (u.territory_num = d.territory_num)))) JOIN (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m ON (true)) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) LEFT JOIN (SELECT c.tvcmid, c.territory_num, c.rep_id, sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1, sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2, sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3, sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4, sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5, sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6 FROM (SELECT c.tvcmid, c.territory_number AS territory_num, c.rep_id, trunc(c.call_date, 'MON'::varchar(3)) AS call_date, sum(1) AS pri_calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.tvcmid, c.territory_number, c.rep_id, trunc(c.call_date, 'MON'::varchar(3))) c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m GROUP BY c.tvcmid, c.territory_num, c.rep_id) c ON (((u.tvcmid = c.tvcmid) AND (u.territory_num = c.territory_num)))) LEFT JOIN (SELECT cp.tvcmid, cp.territory_number AS territory_num, sum(cp.p1) AS plan_calls FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.period = zs.semester)))) WHERE (cp.sales_force_id = 'TO'::varchar(2)) GROUP BY cp.tvcmid, cp.territory_number) cp ON (((u.tvcmid = cp.tvcmid) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_access_monitor_call_data_respiratory AS
SELECT 'TEVA'::varchar(4) AS company, d.sales_force_id AS sales_force, coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM, NULL AS me_num, d.npi, d.VEEVA_ACCOUNT_ID AS veeva_account_id, d.tvcmid, d.ims_id, to_char(m.m01, 'yyyymm'::varchar(6)) AS month1, c.p1_calls_mth1, c.p1_calls_mth2, c.p1_calls_mth3, c.p1_calls_mth4, c.p1_calls_mth5, c.p1_calls_mth6, cp.plan_calls AS total_calls, to_char(m.m04, 'yyyymm'::varchar(6)) AS start_month, to_char(m.m01, 'yyyymm'::varchar(6)) AS end_month, '4'::varchar(1) AS duration, CASE WHEN (cp.tvcmid IS NULL) THEN '0'::varchar(1) ELSE '1'::varchar(1) END AS physician_value, d.ZIP AS physician_zip, x.specialty_code AS physician_specialty FROM ((((((SELECT calls.tvcmid, calls.territory_num FROM (SELECT c.tvcmid, c.territory_number AS territory_num, c.rep_id, trunc(c.call_date, 'MON'::varchar(3)) AS call_date, sum(1) AS pri_calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.tvcmid, c.territory_number, c.rep_id, trunc(c.call_date, 'MON'::varchar(3))) calls UNION SELECT call_plan.tvcmid, call_plan.territory_num FROM (SELECT cp.tvcmid, cp.territory_number AS territory_num, sum(cp.p1) AS plan_calls FROM datamart.call_plan cp WHERE (cp.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) GROUP BY cp.tvcmid, cp.territory_number) call_plan) u JOIN (SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.sales_force_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE ((sfa_demographics.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (sfa_demographics.ims_id IS NOT NULL)) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.sales_force_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d ON (((u.tvcmid = d.tvcmid) AND (u.territory_num = d.territory_num)))) JOIN (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m ON (true)) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) LEFT JOIN (SELECT c.tvcmid, c.territory_num, c.rep_id, sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1, sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2, sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3, sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4, sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5, sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6 FROM (SELECT c.tvcmid, c.territory_number AS territory_num, c.rep_id, trunc(c.call_date, 'MON'::varchar(3)) AS call_date, sum(1) AS pri_calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.tvcmid, c.territory_number, c.rep_id, trunc(c.call_date, 'MON'::varchar(3))) c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m GROUP BY c.tvcmid, c.territory_num, c.rep_id) c ON (((u.tvcmid = c.tvcmid) AND (u.territory_num = c.territory_num)))) LEFT JOIN (SELECT cp.tvcmid, cp.territory_number AS territory_num, sum(cp.p1) AS plan_calls FROM datamart.call_plan cp WHERE (cp.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) GROUP BY cp.tvcmid, cp.territory_number) cp ON (((u.tvcmid = cp.tvcmid) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_access_monitor_calls_by_specialty_oncology AS
SELECT 'TEVA'::varchar(4) AS company, x.specialty_code, d.prim_specialty, count(DISTINCT c.tvcmid) AS number_of_physicians_6mth FROM (((SELECT sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE (sfa_demographics.ims_id IS NOT NULL) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.tvcmid FROM datamart.sfa_call c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01))) GROUP BY c.tvcmid) c ON ((d.tvcmid = c.tvcmid))) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) GROUP BY d.prim_specialty, x.specialty_code ORDER BY x.specialty_code;

CREATE  VIEW outbound.zs_access_monitor_calls_by_specialty_respiratory AS
SELECT 'TEVA'::varchar(4) AS company, x.specialty_code, d.prim_specialty, count(DISTINCT c.tvcmid) AS number_of_physicians_6mth FROM (((SELECT sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE (sfa_demographics.ims_id IS NOT NULL) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.tvcmid FROM datamart.sfa_call c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01))) GROUP BY c.tvcmid) c ON ((d.tvcmid = c.tvcmid))) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) GROUP BY d.prim_specialty, x.specialty_code ORDER BY x.specialty_code;

CREATE  VIEW outbound.activity_copay AS
 SELECT fed.id_num AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(c.fill_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        (((c.file_id)::varchar || '-'::varchar(1)) || (c.record_id)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (brand.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((((('Voucher/Coupon Redemption - '::varchar(28) || coalesce(b.name, ''::varchar)) || ','::varchar(1)) || coalesce(cvp.program_description, ''::varchar)) || ','::varchar(1)) || c.redemption_type) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.program_number = cvp.program_number) AND (c.redemption_type = cvp.redemption_type)))) JOIN datamart.tvcmid_xref fed ON (((c.physician_tvcmid = fed.tvcmid) AND (fed.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN product.basket b ON ((c.basket_id = b.basket_id))) LEFT  JOIN ( SELECT bb.basket_id,
        bb.name,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.prod_id)))
 WHERE ((c.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_ASI_COPAY_DETAIL_WKLY'::varchar(25)))), 0)) AND (c.fill_date >= add_months((now())::date, (-6)))) EXCEPT  SELECT fed.id_num AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(c.fill_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        (((c.file_id)::varchar || '-'::varchar(1)) || (c.record_id)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (brand.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((((('Voucher/Coupon Redemption - '::varchar(28) || coalesce(b.name, ''::varchar)) || ','::varchar(1)) || coalesce(cvp.program_description, ''::varchar)) || ','::varchar(1)) || c.redemption_type) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.program_number = cvp.program_number) AND (c.redemption_type = cvp.redemption_type)))) JOIN datamart.tvcmid_xref fed ON (((c.physician_tvcmid = fed.tvcmid) AND (fed.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN product.basket b ON ((c.basket_id = b.basket_id))) LEFT  JOIN ( SELECT bb.basket_id,
        bb.name,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.prod_id)))
 WHERE ((c.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_ASI_COPAY_DETAIL_WKLY'::varchar(25)))), 0)) AND (c.fill_date >= add_months((now())::date, (-6))));

CREATE  VIEW outbound.zzz_asi_rx_by_market_saba AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '14'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.zzz_bullseye_prescriber_demographics AS
 SELECT d.ims_id,
        d.tvcmid,
        d.npi,
        rxd.decile_name,
        rxd.decile_trx_count_6_mo,
        rxd.decile_trx_count_12_mo,
        d.last_name,
        d.first_name,
        d.degree AS medical_suffix,
        d.specialty AS primary_specialty,
        d.ptr_address_1 AS address_line1,
        d.ptr_address_2 AS address_line2,
        d.ptr_city AS city,
        d.ptr_state AS state,
        d.ptr_zip AS zip,
        d.np_pa_flag,
        sfa.last_call_date,
        d.pdrp_flag
 FROM ((datamart.prescriber_combined_demographics d JOIN datamart.rx_deciles rxd ON ((d.tvcmid = rxd.tvcmid))) LEFT  JOIN ( SELECT sfa_demographics.sales_force_id,
        sfa_demographics.tvcmid,
        max(sfa_demographics.last_call_date) AS last_call_date
 FROM datamart.sfa_demographics
 WHERE (sfa_demographics.tvcmid IS NOT NULL)
 GROUP BY sfa_demographics.sales_force_id,
          sfa_demographics.tvcmid) sfa ON (((d.tvcmid = sfa.tvcmid) AND (d.sales_force_id = sfa.sales_force_id))))
 WHERE ((d.sales_force_id = 'TR'::varchar(2)) AND (rxd.decile_name = 'ICS MARKET TOTAL'::varchar(16)));

CREATE  VIEW outbound.sharepoint_roster_tr_ts AS
 SELECT sr.title,
        sr.territory
 FROM ( SELECT lower(r.username) AS title,
        r.territory_number AS territory
 FROM datamart.roster r
 WHERE ((r.username IS NOT NULL) AND (r.sales_force_id = ANY (ARRAY['TR'::varchar(2), 'TS'::varchar(2)]))) UNION  SELECT lower(r.username) AS title,
        (r.employee_id || '_'::varchar(1)) AS territory
 FROM datamart.roster r
 WHERE ((r.username IS NOT NULL) AND (r.sales_force_id = ANY (ARRAY['TR'::varchar(2), 'TS'::varchar(2)])))) sr
 GROUP BY sr.title,
          sr.territory
 ORDER BY sr.title;

CREATE  VIEW outbound.mcm_customer_level_flags AS
 SELECT clf.tvcmid,
        ai.alternate_id_value AS federation_id,
        clf.basket_id,
        clf.basket_name,
        clf.territory_number,
        clf.sales_force_id,
        clf.flag_type,
        clf.flag_value,
        clf.flag_effective_start_date,
        clf.flag_effective_end_date
 FROM (datamart.customer_level_flags clf JOIN mdm.alternate_id ai ON ((clf.tvcmid = ai.tvcmid)))
 WHERE ((ai.status_name = 'ACTIVE'::varchar(6)) AND (ai.alternate_id_type = 'FED_ID'::varchar(6)));

CREATE  VIEW outbound.zs_ajovy_activity_sample_shipment AS
 SELECT sample_shipment.veeva_id,
        sample_shipment.tvcmid,
        sample_shipment.ims_id,
        sample_shipment.first_name,
        sample_shipment.middle_name,
        sample_shipment.last_name,
        sample_shipment.designation,
        sample_shipment.state_license_number,
        sample_shipment.address_line_1,
        sample_shipment.address_line_2,
        sample_shipment.address_line_3,
        sample_shipment.city,
        sample_shipment.state,
        sample_shipment.zip,
        sample_shipment.dea_license_number,
        sample_shipment.order_id,
        sample_shipment.ndc,
        sample_shipment.basket_id,
        sample_shipment.basket_name,
        sample_shipment.order_job_code,
        sample_shipment.order_job_description,
        sample_shipment.ship_qty,
        sample_shipment.ship_date
 FROM datamart.sample_shipment
 WHERE (sample_shipment.basket_name ~~ 'AJOVY%'::varchar(6))
 ORDER BY sample_shipment.ship_date;

CREATE  VIEW outbound.connectiverx_ajovy_zip_to_territory AS
 SELECT current_alignment.sales_force_id,
        current_alignment.zip_code,
        current_alignment.territory_number,
        current_alignment.territory_name,
        current_alignment.region_number,
        current_alignment.region_name AS area_number,
        current_alignment.area_name
 FROM datamart.current_alignment
 WHERE (current_alignment.sales_force_id = ANY (ARRAY['TE'::varchar(2), 'TN'::varchar(2), 'TR'::varchar(2)]))
 ORDER BY current_alignment.zip_code,
          current_alignment.territory_number;

CREATE  VIEW outbound.zs_xpd_switch_details AS
SELECT xpd_switch_details.ims_client_number, xpd_switch_details.ims_report_number, xpd_switch_details.channel_indicator, xpd_switch_details.ims_id, xpd_switch_details.tvcmid, xpd_switch_details.specialty, xpd_switch_details.switch_from_product_group_num, xpd_switch_details.switch_from_basket_id, xpd_switch_details.switch_from_basket_name, xpd_switch_details.switch_to_product_group_num, xpd_switch_details.switch_to_basket_id, xpd_switch_details.switch_to_basket_name, xpd_switch_details.rollup_month, xpd_switch_details.rx FROM datamart.xpd_switch_details;

CREATE  VIEW outbound.connectiverx_ajovy_pdrp AS
 SELECT f.tvcmid,
        nx.npi,
        ix.ims_id,
        f.flag_value AS pdrp_flag
 FROM ((datamart.customer_level_flags f LEFT  JOIN ( SELECT x.tvcmid,
        x.npi
 FROM ( SELECT tvcmid_xref.tvcmid,
        tvcmid_xref.id_num AS npi,
        row_number() OVER (PARTITION BY tvcmid_xref.tvcmid ORDER BY tvcmid_xref.id_num) AS rnk
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'NPI'::varchar(3))) x
 WHERE (x.rnk = 1)) nx ON ((nx.tvcmid = f.tvcmid))) LEFT  JOIN ( SELECT x.tvcmid,
        x.ims_id
 FROM ( SELECT tvcmid_xref.tvcmid,
        tvcmid_xref.id_num AS ims_id,
        row_number() OVER (PARTITION BY tvcmid_xref.tvcmid ORDER BY tvcmid_xref.id_num) AS rnk
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'IMS_ID'::varchar(6))) x
 WHERE (x.rnk = 1)) ix ON ((ix.tvcmid = f.tvcmid)))
 WHERE ((f.flag_type = 'PDRP'::varchar(4)) AND (f.flag_value = 'Y'::varchar(1)));

CREATE  VIEW outbound.mdm_communication AS
 SELECT NULL AS dsp_id,
        NULL AS dsp_hce_id,
        NULL AS dsp_addr_id,
        NULL AS communication_type,
        NULL AS communication_value,
        NULL AS communication_status,
        NULL AS communication_effective_date,
        NULL AS dsp_address_line_1,
        NULL AS dsp_address_line_2,
        NULL AS dsp_city,
        NULL AS dsp_state,
        NULL AS dsp_postal_code,
        NULL AS dsp_postal_extn_code,
        NULL AS dsp_country_code
 FROM v_catalog.dual
 LIMIT 0;

CREATE  VIEW outbound.wrb_roster AS
 SELECT r."Territory ID",
        r."First Name",
        r."Middle Name",
        r."Last Name",
        r.Title,
        r.Email,
        r."Office Phone",
        r."Superior's Territory ID",
        r."Brand Business Unit"
 FROM ( SELECT roster.territory_number AS "Territory ID",
        roster.first_name AS "First Name",
        roster.middle_name AS "Middle Name",
        roster.last_name AS "Last Name",
        roster.title AS Title,
        roster.email AS Email,
        roster.business_phone AS "Office Phone",
        roster.parent_territory_number AS "Superior's Territory ID",
        roster.sales_force_id AS "Brand Business Unit"
 FROM datamart.roster
 WHERE ((roster.last_name <> 'Vacant'::varchar(6)) AND (roster.sales_force_id = ANY (ARRAY['MA'::varchar(2), 'TE'::varchar(2), 'TX'::varchar(2), 'TZ'::varchar(2), 'TH'::varchar(2), 'TM'::varchar(2), 'TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)]))) UNION  SELECT axtria_territory_hierarchy.territory_number__c AS "Territory ID",
        'VACANT'::varchar(6) AS "First Name",
        ''::varchar AS "Middle Name",
        axtria_territory_hierarchy.territory_number__c AS "Last Name",
        CASE axtria_territory_hierarchy.territory_level__c WHEN 'REP'::varchar(3) THEN 'Sales Specialist'::varchar(16) WHEN 'MGR'::varchar(3) THEN 'Area Manager'::varchar(12) WHEN 'DIR'::varchar(3) THEN 'Regional Director'::varchar(17) ELSE axtria_territory_hierarchy.territory_level__c END AS Title,
        (axtria_territory_hierarchy.territory_number__c || '@tevapharm.com'::varchar(14)) AS Email,
        ''::varchar AS "Office Phone",
        axtria_territory_hierarchy.parent_territory_number__c AS "Superior's Territory ID",
        axtria_territory_hierarchy.business_unit_code__c AS "Brand Business Unit"
 FROM cleansed.axtria_territory_hierarchy
 WHERE (axtria_territory_hierarchy.territory_number__c IN ( SELECT roster.territory_number
 FROM datamart.roster
 WHERE ((roster.last_name = 'Vacant'::varchar(6)) AND (roster.sales_force_id = ANY (ARRAY['MA'::varchar(2), 'TE'::varchar(2), 'TX'::varchar(2), 'TZ'::varchar(2), 'TH'::varchar(2), 'TM'::varchar(2), 'TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)])))))) r
 ORDER BY r."Territory ID";

CREATE  VIEW outbound.fingertip_roster AS
 SELECT roster.email,
        roster.first_name,
        roster.last_name,
        NULL AS password,
        CASE WHEN (roster.rep_type = 'REP'::varchar(3)) THEN 'Sales Representative'::varchar(20) WHEN (roster.rep_type = 'AD'::varchar(2)) THEN 'Regional Sales Manager'::varchar(22) WHEN (roster.rep_type = 'RM'::varchar(2)) THEN 'Regional Sales Manager'::varchar(22) ELSE NULL END AS rep_desc,
        roster.rep_type,
        roster.territory_number
 FROM datamart.roster
 WHERE ((roster.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'TE'::varchar(2)])) AND (roster.last_name <> 'Vacant'::varchar(6)) AND (roster.rep_type IS NOT NULL));

CREATE  VIEW outbound.zs_austedo_activity_call_detail AS
 SELECT c.sales_force_id,
        c.call_id,
        c.veeva_account_id,
        c.ims_id,
        c.customer_type,
        c.call_type,
        c.rep_id,
        c.territory_number,
        c.zip_on_call,
        c.call_date,
        c.submit_date,
        c.attendees,
        c.attendee_type,
        c.tvcmid,
        cd.product,
        cd.basket_id,
        cd.basket_name,
        cd.detail_position
 FROM (datamart.sfa_call c JOIN datamart.sfa_call_detail cd ON ((c.call_id = cd.call_id)))
 WHERE ((cd.basket_name ~~ 'AUSTEDO%'::varchar(8)) AND (c.call_date >= '2018-01-01'::date) AND (c.call_date < trunc(now(), 'MONTH'::varchar(5))))
 ORDER BY c.call_date;

CREATE  VIEW outbound.zs_austedo_activity_sample_request AS
 SELECT sfa_sample.sample_id,
        sfa_sample.call_id,
        sfa_sample.veeva_account_id,
        sfa_sample.ims_id,
        sfa_sample.call_date,
        sfa_sample.sales_force_id,
        sfa_sample.territory_number,
        sfa_sample.call_type,
        sfa_sample.attendee_type,
        sfa_sample.customer_type,
        sfa_sample.sample_type,
        sfa_sample.product_name,
        sfa_sample.sample_name,
        sfa_sample.sample_ndc,
        sfa_sample.basket_id,
        sfa_sample.basket_name,
        sfa_sample.qty,
        sfa_sample.zip_on_call,
        sfa_sample.employee_number,
        sfa_sample.tvcmid
 FROM datamart.sfa_sample
 WHERE ((sfa_sample.basket_name ~~ 'AUSTEDO%'::varchar(8)) AND (sfa_sample.sample_type = 'REQUEST'::varchar(7)) AND (sfa_sample.call_date >= '2018-01-01'::date) AND (sfa_sample.call_date < trunc(now(), 'MONTH'::varchar(5))))
 ORDER BY sfa_sample.call_date;

CREATE  VIEW outbound.zs_ajovy_activity_copay AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.nabp,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.occ_payment_type,
        copay.auth_refills,
        copay.claim_type,
        copay.administration_flag,
        copay.payer_name,
        copay.trans_type,
        copay.previous_payer_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.source_name,
        copay.patient_type,
        copay.primary_bin,
        copay.primary_bin_description,
        copay.reject_code
 FROM datamart.copay
 WHERE (copay.basket_name ~~ 'AJOVY%'::varchar(6))
 ORDER BY copay.fill_date;

CREATE  VIEW outbound.zs_xpd_switch_details_antimigraine_monthly AS
 SELECT xpd_switch_details_antimigraine.ims_client_number,
        xpd_switch_details_antimigraine.ims_report_number,
        xpd_switch_details_antimigraine.channel_indicator,
        xpd_switch_details_antimigraine.ims_id,
        xpd_switch_details_antimigraine.tvcmid,
        xpd_switch_details_antimigraine.specialty,
        xpd_switch_details_antimigraine.switch_from_product_group_num,
        xpd_switch_details_antimigraine.switch_from_basket_id,
        xpd_switch_details_antimigraine.switch_from_basket_name,
        xpd_switch_details_antimigraine.switch_to_product_group_num,
        xpd_switch_details_antimigraine.switch_to_basket_id,
        xpd_switch_details_antimigraine.switch_to_basket_name,
        xpd_switch_details_antimigraine.rollup_period,
        xpd_switch_details_antimigraine.rx,
        xpd_switch_details_antimigraine.report_frequency
 FROM datamart.xpd_switch_details_antimigraine
 WHERE (xpd_switch_details_antimigraine.report_frequency = 'MONTH'::varchar(5));

CREATE  VIEW outbound.zs_xpd_switch_details_antimigraine_weekly AS
 SELECT xpd_switch_details_antimigraine.ims_client_number,
        xpd_switch_details_antimigraine.ims_report_number,
        xpd_switch_details_antimigraine.channel_indicator,
        xpd_switch_details_antimigraine.ims_id,
        xpd_switch_details_antimigraine.tvcmid,
        xpd_switch_details_antimigraine.specialty,
        xpd_switch_details_antimigraine.switch_from_product_group_num,
        xpd_switch_details_antimigraine.switch_from_basket_id,
        xpd_switch_details_antimigraine.switch_from_basket_name,
        xpd_switch_details_antimigraine.switch_to_product_group_num,
        xpd_switch_details_antimigraine.switch_to_basket_id,
        xpd_switch_details_antimigraine.switch_to_basket_name,
        xpd_switch_details_antimigraine.rollup_period,
        xpd_switch_details_antimigraine.rx,
        xpd_switch_details_antimigraine.report_frequency
 FROM datamart.xpd_switch_details_antimigraine
 WHERE (xpd_switch_details_antimigraine.report_frequency = 'WEEK'::varchar(4));

CREATE  VIEW outbound.zs_xpd_demographics_antimigraine_weekly AS
 SELECT xpd_demographics_antimigraine.ims_client_number,
        xpd_demographics_antimigraine.ims_report_number,
        xpd_demographics_antimigraine.ims_id,
        xpd_demographics_antimigraine.tvcmid,
        xpd_demographics_antimigraine.last_name,
        xpd_demographics_antimigraine.first_name,
        xpd_demographics_antimigraine.middle_name,
        xpd_demographics_antimigraine.address_1,
        xpd_demographics_antimigraine.address_2,
        xpd_demographics_antimigraine.city,
        xpd_demographics_antimigraine.state,
        xpd_demographics_antimigraine.zip,
        xpd_demographics_antimigraine.specialty,
        xpd_demographics_antimigraine.specialty_description,
        xpd_demographics_antimigraine.trx_decile_retail,
        xpd_demographics_antimigraine.nrx_decile_retail,
        xpd_demographics_antimigraine.nbrx_decile_retail,
        xpd_demographics_antimigraine.trx_decile_mail,
        xpd_demographics_antimigraine.nrx_decile_mail,
        xpd_demographics_antimigraine.nbrx_decile_mail,
        xpd_demographics_antimigraine.market_prescriber_reliability_retail,
        xpd_demographics_antimigraine.market_prescriber_reliability_mail,
        xpd_demographics_antimigraine.report_frequency
 FROM datamart.xpd_demographics_antimigraine
 WHERE (xpd_demographics_antimigraine.report_frequency = 'WEEK'::varchar(4));

CREATE  VIEW outbound.zs_xpd_core_metrics_antimigraine_weekly AS
 SELECT xpd_core_metrics_antimigraine.ims_client_number,
        xpd_core_metrics_antimigraine.ims_report_number,
        xpd_core_metrics_antimigraine.channel_indicator,
        xpd_core_metrics_antimigraine.ims_id,
        xpd_core_metrics_antimigraine.tvcmid,
        xpd_core_metrics_antimigraine.specialty,
        xpd_core_metrics_antimigraine.ims_product_group,
        xpd_core_metrics_antimigraine.basket_id,
        xpd_core_metrics_antimigraine.basket_name,
        xpd_core_metrics_antimigraine.rollup_period,
        xpd_core_metrics_antimigraine.xpo_nrx,
        xpd_core_metrics_antimigraine.xpo_trx,
        xpd_core_metrics_antimigraine.unknown_nrx,
        xpd_core_metrics_antimigraine.unknown_trx,
        xpd_core_metrics_antimigraine.new_therapy_starts,
        xpd_core_metrics_antimigraine.continued_new,
        xpd_core_metrics_antimigraine.switch_to,
        xpd_core_metrics_antimigraine.add_on,
        xpd_core_metrics_antimigraine.restart_same_new,
        xpd_core_metrics_antimigraine.restart_different,
        xpd_core_metrics_antimigraine.continued_refill,
        xpd_core_metrics_antimigraine.restart_same_refill,
        xpd_core_metrics_antimigraine.switch_from,
        xpd_core_metrics_antimigraine.restart_different_from,
        xpd_core_metrics_antimigraine.add_to,
        xpd_core_metrics_antimigraine.market_new_to_brand_rx,
        xpd_core_metrics_antimigraine.dynamic_capture_rx,
        xpd_core_metrics_antimigraine.report_frequency
 FROM datamart.xpd_core_metrics_antimigraine
 WHERE (xpd_core_metrics_antimigraine.report_frequency = 'WEEK'::varchar(4));

CREATE  VIEW outbound.ics_mop_yearly AS
 SELECT rx_vertical.ims_id,
        rx_vertical.hcp_id,
        rx_vertical.plan_code,
        rx_vertical.plan_name,
        rx_vertical.payment_method,
        rx_vertical.basket_name,
        sum(CASE WHEN (rx_vertical.month_bucket = 24) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth24,
        sum(CASE WHEN (rx_vertical.month_bucket = 23) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth23,
        sum(CASE WHEN (rx_vertical.month_bucket = 22) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth22,
        sum(CASE WHEN (rx_vertical.month_bucket = 21) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth21,
        sum(CASE WHEN (rx_vertical.month_bucket = 20) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth20,
        sum(CASE WHEN (rx_vertical.month_bucket = 19) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth19,
        sum(CASE WHEN (rx_vertical.month_bucket = 18) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth18,
        sum(CASE WHEN (rx_vertical.month_bucket = 17) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth17,
        sum(CASE WHEN (rx_vertical.month_bucket = 16) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth16,
        sum(CASE WHEN (rx_vertical.month_bucket = 15) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth15,
        sum(CASE WHEN (rx_vertical.month_bucket = 14) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth14,
        sum(CASE WHEN (rx_vertical.month_bucket = 13) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth13,
        sum(CASE WHEN (rx_vertical.month_bucket = 12) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth12,
        sum(CASE WHEN (rx_vertical.month_bucket = 11) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth11,
        sum(CASE WHEN (rx_vertical.month_bucket = 10) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth10,
        sum(CASE WHEN (rx_vertical.month_bucket = 9) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth9,
        sum(CASE WHEN (rx_vertical.month_bucket = 8) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth8,
        sum(CASE WHEN (rx_vertical.month_bucket = 7) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth7,
        sum(CASE WHEN (rx_vertical.month_bucket = 6) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth6,
        sum(CASE WHEN (rx_vertical.month_bucket = 5) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth5,
        sum(CASE WHEN (rx_vertical.month_bucket = 4) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth4,
        sum(CASE WHEN (rx_vertical.month_bucket = 3) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth3,
        sum(CASE WHEN (rx_vertical.month_bucket = 2) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth2,
        sum(CASE WHEN (rx_vertical.month_bucket = 1) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth1
 FROM ( SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(xref.veeva_account_id, rx.ims_id) END AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.payment_method,
        rx.basket_name,
        w.month_bucket,
        rx.trx_count
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT row_number() OVER (ORDER BY z.rollup_month DESC) AS month_bucket,
        z.rollup_month
 FROM ( SELECT prescriber_rx.rollup_month
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))
 GROUP BY prescriber_rx.rollup_month) z) w ON ((rx.rollup_month = w.rollup_month))) LEFT  JOIN ( SELECT a.tvcmid,
        a.veeva_account_id
 FROM ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.id_num) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE (xref.id_type = 'VEEVA_ID'::varchar(8))) a
 WHERE (a.rnk = 1)) xref ON ((xref.tvcmid = rx.tvcmid)))
 WHERE ((rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (w.month_bucket >= 1) AND (w.month_bucket <= 24))) rx_vertical
 GROUP BY rx_vertical.ims_id,
          rx_vertical.hcp_id,
          rx_vertical.plan_code,
          rx_vertical.plan_name,
          rx_vertical.payment_method,
          rx_vertical.basket_name;

CREATE  VIEW outbound.iqvia_zs_total_acute_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.rollup_month,
        prescriber_rx.sales_category,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        sum(prescriber_rx.nrx_count) AS nrx_count,
        sum(prescriber_rx.trx_count) AS trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = 'ANTI-MIGRAINE MARKET'::varchar(20)) AND (prescriber_rx.basket_name = 'TOTAL ACUTE MIGRAINE'::varchar(20)))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.rollup_month,
          prescriber_rx.sales_category,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method;

CREATE  VIEW outbound.CobbsCreek_austedo_xpo_rx_weekly AS
 SELECT DISTINCT prescriber_combined_demographics.tvcmid,
        prescriber_combined_demographics.npi,
        prescriber_combined_demographics.ims_id,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_id,
        prescriber_rx.rollup_week,
        prescriber_rx.date,
        sum(prescriber_rx.nrx_count) AS Sum_nrx_count,
        sum(prescriber_rx.trx_count) AS Sum_trx_count,
        sum(prescriber_rx.nrx_quantity) AS Sum_nrx_quantity,
        sum(prescriber_rx.trx_quantity) AS Sum_trx_quantity,
        sum(prescriber_rx.unnormalized_nrx_count) AS Sum_unnormalized_nrx_count,
        sum(prescriber_rx.unnormalized_trx_count) AS Sum_unnormalized_trx_count,
        prescriber_rx.indication,
        prescriber_rx.sales_category,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.rollup_flag,
        prescriber_combined_demographics.first_name,
        prescriber_combined_demographics.middle_name,
        prescriber_combined_demographics.last_name,
        prescriber_combined_demographics.ptr_address_1,
        prescriber_combined_demographics.ptr_address_2,
        prescriber_combined_demographics.ptr_city,
        prescriber_combined_demographics.ptr_state,
        prescriber_combined_demographics.ptr_zip,
        prescriber_combined_demographics.ptr_phone,
        prescriber_combined_demographics.email,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.secondary_specialty,
        prescriber_combined_demographics.pdrp_flag,
        prescriber_combined_demographics.pdrp_date,
        prescriber_combined_demographics.np_pa_flag,
        prescriber_combined_demographics.ama_no_contact_flag,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payer_name,
        prescriber_rx.plan_name,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.payment_method,
        prescriber_rx.data_date
 FROM (datamart.prescriber_rx prescriber_rx LEFT  JOIN datamart.prescriber_combined_demographics prescriber_combined_demographics ON ((prescriber_rx.ims_id = prescriber_combined_demographics.ims_id)))
 WHERE ((prescriber_rx.market_name = 'MOVEMENT DISORDER MARKET'::varchar(24)) AND (prescriber_rx.basket_type = 'product'::varchar(7)) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.market_name = 'MOVEMENT DISORDER MARKET'::varchar(24)) AND (prescriber_rx.basket_type = 'product'::varchar(7)) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))
 GROUP BY prescriber_combined_demographics.tvcmid,
          prescriber_combined_demographics.npi,
          prescriber_combined_demographics.ims_id,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_id,
          prescriber_rx.basket_type,
          prescriber_rx.report_frequency,
          prescriber_rx.rollup_week,
          prescriber_rx.date,
          prescriber_rx.sales_category,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.rollup_flag,
          prescriber_combined_demographics.first_name,
          prescriber_combined_demographics.middle_name,
          prescriber_combined_demographics.last_name,
          prescriber_combined_demographics.ptr_address_1,
          prescriber_combined_demographics.ptr_address_2,
          prescriber_combined_demographics.ptr_city,
          prescriber_combined_demographics.ptr_state,
          prescriber_combined_demographics.ptr_zip,
          prescriber_combined_demographics.ptr_phone,
          prescriber_combined_demographics.email,
          prescriber_combined_demographics.specialty,
          prescriber_combined_demographics.secondary_specialty,
          prescriber_combined_demographics.pdrp_flag,
          prescriber_combined_demographics.pdrp_date,
          prescriber_combined_demographics.np_pa_flag,
          prescriber_combined_demographics.ama_no_contact_flag,
          prescriber_rx.data_date,
          prescriber_rx.indication,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payer_name,
          prescriber_rx.plan_name,
          prescriber_rx.pbm_name,
          prescriber_rx.payment_method,
          prescriber_rx.pbm_parent_name
 ORDER BY prescriber_combined_demographics.ims_id,
          prescriber_combined_demographics.tvcmid,
          prescriber_combined_demographics.npi,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_id,
          prescriber_rx.rollup_week,
          prescriber_rx.date,
          sum(prescriber_rx.nrx_count),
          sum(prescriber_rx.trx_count),
          sum(prescriber_rx.nrx_quantity),
          sum(prescriber_rx.trx_quantity),
          sum(prescriber_rx.unnormalized_nrx_count),
          sum(prescriber_rx.unnormalized_trx_count),
          prescriber_rx.indication,
          prescriber_rx.sales_category,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.rollup_flag,
          prescriber_combined_demographics.first_name,
          prescriber_combined_demographics.middle_name,
          prescriber_combined_demographics.last_name,
          prescriber_combined_demographics.ptr_address_1,
          prescriber_combined_demographics.ptr_address_2,
          prescriber_combined_demographics.ptr_city,
          prescriber_combined_demographics.ptr_state,
          prescriber_combined_demographics.ptr_zip,
          prescriber_combined_demographics.ptr_phone,
          prescriber_combined_demographics.email,
          prescriber_combined_demographics.specialty,
          prescriber_combined_demographics.secondary_specialty,
          prescriber_combined_demographics.pdrp_flag,
          prescriber_combined_demographics.pdrp_date,
          prescriber_combined_demographics.np_pa_flag,
          prescriber_combined_demographics.ama_no_contact_flag,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payer_name,
          prescriber_rx.plan_name,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.payment_method,
          prescriber_rx.data_date;

CREATE  VIEW outbound.zs_austedo_activity_call_detail_weekly AS
 SELECT c.sales_force_id,
        c.call_id,
        c.veeva_account_id,
        c.ims_id,
        c.customer_type,
        c.call_type,
        c.rep_id,
        c.territory_number,
        c.zip_on_call,
        c.call_date,
        c.submit_date,
        c.attendees,
        c.attendee_type,
        c.tvcmid,
        cd.product,
        cd.basket_id,
        cd.basket_name,
        cd.detail_position
 FROM (datamart.sfa_call c JOIN datamart.sfa_call_detail cd ON ((c.call_id = cd.call_id)))
 WHERE ((cd.basket_name ~~ 'AUSTEDO%'::varchar(8)) AND (c.call_date >= trunc((now() + '-15'::interval day), 'day'::varchar(3))))
 ORDER BY c.call_date;

CREATE  VIEW outbound.zs_laba_weekly AS
 SELECT rx.ims_id,
        rx.tvcmid,
        rx.market_name,
        rx.basket_id,
        rx.basket_name,
        rx.basket_type,
        rx.rollup_week,
        rx.rollup_month,
        rx.sales_category,
        rx.payer_plan_number,
        rx.payer_name,
        rx.plan_name,
        rx.pbm_name,
        rx.pbm_parent_name,
        rx.model,
        rx.payment_method,
        rx.report_frequency,
        rx.rollup_flag,
        pcd.specialty,
        xref.specialty_group,
        sum(rx.nrx_count) AS nrx_count,
        sum(rx.trx_count) AS trx_count
 FROM ((datamart.prescriber_rx rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE ((rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (rx.market_name = 'LABA MARKET TOTAL'::varchar(17)) AND (rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))))
 GROUP BY rx.ims_id,
          rx.tvcmid,
          rx.market_name,
          rx.basket_id,
          rx.basket_name,
          rx.basket_type,
          rx.rollup_week,
          rx.rollup_month,
          rx.sales_category,
          rx.payer_plan_number,
          rx.payer_name,
          rx.plan_name,
          rx.pbm_name,
          rx.pbm_parent_name,
          rx.model,
          rx.payment_method,
          rx.report_frequency,
          rx.rollup_flag,
          pcd.specialty,
          xref.specialty_group;

CREATE  VIEW outbound.zs_saba_weekly AS
 SELECT rx.ims_id,
        rx.tvcmid,
        rx.market_name,
        rx.basket_id,
        rx.basket_name,
        rx.basket_type,
        rx.rollup_week,
        rx.rollup_month,
        rx.sales_category,
        rx.payer_plan_number,
        rx.payer_name,
        rx.plan_name,
        rx.pbm_name,
        rx.pbm_parent_name,
        rx.model,
        rx.payment_method,
        rx.report_frequency,
        rx.rollup_flag,
        pcd.specialty,
        xref.specialty_group,
        sum(rx.nrx_count) AS nrx_count,
        sum(rx.trx_count) AS trx_count
 FROM ((datamart.prescriber_rx rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE ((rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (rx.market_name = 'SABA MARKET TOTAL'::varchar(17)) AND (rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))))
 GROUP BY rx.ims_id,
          rx.tvcmid,
          rx.market_name,
          rx.basket_id,
          rx.basket_name,
          rx.basket_type,
          rx.rollup_week,
          rx.rollup_month,
          rx.sales_category,
          rx.payer_plan_number,
          rx.payer_name,
          rx.plan_name,
          rx.pbm_name,
          rx.pbm_parent_name,
          rx.model,
          rx.payment_method,
          rx.report_frequency,
          rx.rollup_flag,
          pcd.specialty,
          xref.specialty_group;

CREATE  VIEW outbound.zs_ics_market_monthly AS
 SELECT rx.ims_id,
        rx.tvcmid,
        rx.market_name,
        rx.basket_id,
        rx.basket_name,
        rx.basket_type,
        rx.rollup_week,
        rx.rollup_month,
        rx.sales_category,
        rx.nrx_count,
        rx.trx_count,
        rx.payer_plan_number,
        rx.payer_name,
        rx.plan_name,
        rx.pbm_name,
        rx.pbm_parent_name,
        rx.model,
        rx.payment_method,
        rx.report_frequency,
        rx.rollup_flag,
        pcd.specialty,
        xref.specialty_group
 FROM ((datamart.prescriber_rx rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE ((rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.ims_id,
          rx.tvcmid,
          rx.market_name,
          rx.basket_id,
          rx.basket_name,
          rx.basket_type,
          rx.rollup_week,
          rx.rollup_month,
          rx.sales_category,
          rx.nrx_count,
          rx.trx_count,
          rx.payer_plan_number,
          rx.payer_name,
          rx.plan_name,
          rx.pbm_name,
          rx.pbm_parent_name,
          rx.model,
          rx.payment_method,
          rx.report_frequency,
          rx.rollup_flag,
          pcd.specialty,
          xref.specialty_group UNION  SELECT rx.ims_id,
        rx.tvcmid,
        rx.market_name,
        rx.basket_id,
        rx.basket_name,
        rx.basket_type,
        rx.rollup_week,
        rx.rollup_month,
        rx.sales_category,
        rx.nrx_count,
        rx.trx_count,
        rx.payer_plan_number,
        rx.payer_name,
        rx.plan_name,
        rx.pbm_name,
        rx.pbm_parent_name,
        rx.model,
        rx.payment_method,
        rx.report_frequency,
        rx.rollup_flag,
        pcd.specialty,
        xref.specialty_group
 FROM ((datamart.prescriber_rx rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE ((rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (rx.data_date >= '2020-01-30'::date) AND (rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (rx.basket_name ~~* 'ARMO%%'::varchar(6)))
 GROUP BY rx.ims_id,
          rx.tvcmid,
          rx.market_name,
          rx.basket_id,
          rx.basket_name,
          rx.basket_type,
          rx.rollup_week,
          rx.rollup_month,
          rx.sales_category,
          rx.nrx_count,
          rx.trx_count,
          rx.payer_plan_number,
          rx.payer_name,
          rx.plan_name,
          rx.pbm_name,
          rx.pbm_parent_name,
          rx.model,
          rx.payment_method,
          rx.report_frequency,
          rx.rollup_flag,
          pcd.specialty,
          xref.specialty_group;

CREATE  VIEW outbound.zs_addon_details_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.channel_indicator,
        rx.ims_id,
        rx.tvcmid,
        pcd.specialty,
        xref.specialty_group,
        rx.addon_from_product_group_num,
        rx.addon_from_basket_id,
        rx.addon_from_basket_name,
        rx.addon_to_product_group_num,
        rx.addon_to_basket_id,
        rx.addon_to_basket_name,
        rx.rollup_period AS addon_rx,
        rx.report_frequency
 FROM ((datamart.xpd_add_on_details rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.channel_indicator,
          rx.ims_id,
          rx.tvcmid,
          pcd.specialty,
          xref.specialty_group,
          rx.addon_from_product_group_num,
          rx.addon_from_basket_id,
          rx.addon_from_basket_name,
          rx.addon_to_product_group_num,
          rx.addon_to_basket_id,
          rx.addon_to_basket_name,
          rx.rollup_period,
          rx.report_frequency;

CREATE  VIEW outbound.zs_restart_diff_details_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.channel_indicator,
        rx.ims_id,
        rx.tvcmid,
        pcd.specialty,
        xref.specialty_group,
        rx.restart_from_product_group_num,
        rx.restart_from_basket_id,
        rx.restart_from_basket_name,
        rx.restart_to_product_group_num,
        rx.restart_to_basket_id,
        rx.restart_to_basket_name,
        rx.rollup_period,
        rx.restart_diff_rx,
        rx.report_frequency
 FROM ((datamart.xpd_restart_diff_details rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.channel_indicator,
          rx.ims_id,
          rx.tvcmid,
          pcd.specialty,
          xref.specialty_group,
          rx.restart_from_product_group_num,
          rx.restart_from_basket_id,
          rx.restart_from_basket_name,
          rx.restart_to_product_group_num,
          rx.restart_to_basket_id,
          rx.restart_to_basket_name,
          rx.rollup_period,
          rx.restart_diff_rx,
          rx.report_frequency;

CREATE  VIEW outbound.zs_digihaler_activity_sample_shipment AS
 SELECT sample_shipment.veeva_id,
        sample_shipment.tvcmid,
        sample_shipment.ims_id,
        sample_shipment.first_name,
        sample_shipment.middle_name,
        sample_shipment.last_name,
        sample_shipment.designation,
        sample_shipment.state_license_number,
        sample_shipment.address_line_1,
        sample_shipment.address_line_2,
        sample_shipment.address_line_3,
        sample_shipment.city,
        sample_shipment.state,
        sample_shipment.zip,
        sample_shipment.dea_license_number,
        sample_shipment.order_id,
        sample_shipment.ndc,
        sample_shipment.basket_id,
        sample_shipment.basket_name,
        sample_shipment.order_job_code,
        sample_shipment.order_job_description,
        sample_shipment.ship_qty,
        sample_shipment.ship_date
 FROM datamart.sample_shipment
 WHERE ((sample_shipment.basket_name ~~* '%DIGIHALER%'::varchar(11)) AND (sample_shipment.ship_date >= '2020-01-01'::date))
 ORDER BY sample_shipment.ship_date;

CREATE  VIEW outbound.respiratory_fia_monthly AS
 SELECT fia.basket_id,
        fia.basket_name,
        fia.claim_id,
        fia.patient_id,
        fia.sequence_number,
        fia.product_id,
        fia.fill_date,
        fia.claim_type,
        fia.reject_code,
        fia.days_supply,
        fia.quantity,
        fia.refill_code,
        fia.payer_plan_id,
        fia.opc_ask,
        fia.sec_payer_plan_id,
        fia.buy_down,
        fia.opc_paid,
        fia.prescriber_id,
        fia.sob,
        fia.sub_product_id,
        fia.sub_opc,
        fia.initial_claim_id,
        fia.prev_product_id,
        fia.daw_code,
        fia.wrt_date,
        fia.claim_status,
        fia.copay_card_flg,
        fia.zip_code,
        fia.ecoup_flag,
        fia.ecoup_offset_amt,
        fia.standard_copay,
        fia.standard_copay_yn,
        fia.market_id,
        fia.flexible_fld_1_char,
        fia.flexible_fld_2_char,
        fia.flexible_fld_3_char,
        fia.flexible_fld_4_char,
        fia.file_id,
        fia.record_id,
        fia.cbsa_code,
        fia.cbsa_description,
        fia.state_code,
        fia.payer_name,
        fia.plan_name,
        fia.pbm_name,
        fia.pbm_id,
        fia.method_of_payment,
        fia.model_type,
        fia.product_group,
        fia.product_group_id,
        fia.product_name,
        fia.generic_name,
        fia.brand_generic_flag,
        fia.product_form,
        fia.product_strength,
        fia.package_size,
        fia.manufacturer,
        fia.cmf10,
        fia.usc_code,
        fia.fia_market_desc,
        fia.reject_reason,
        fia.reject_group,
        fia.mpd_year,
        fia.mpd_eligibility_class,
        fia.deductible_start_date,
        fia.copay_start_date,
        fia.gap_start_date,
        fia.catastrophic_start_date,
        fia.mpd_panel_patient,
        fia.PROVIDER_TYPE,
        fia.IQVIA_RXER_ID,
        fia.PRIMARY_SPECIALTY_CODE,
        fia.PRIMARY_SPECIALTY_DESC,
        fia.FIRST_NAME,
        fia.LAST_NAME,
        fia.ORG_NM,
        fia.ADDRESS,
        fia.CITY,
        fia.PVR_ZIP_CODE,
        fia.PVR_STATE_CODE,
        fia.PHONE_NUMBER
 FROM datamart.fia fia
 WHERE ((fia.fill_date >= '2020-01-01'::date) AND (fia.basket_id IN ( SELECT source_product.entity_id
 FROM product.source_product
 WHERE (source_product.source_file_code = 'A67.F12158'::varchar(10)))));

CREATE  VIEW outbound.zs_copay_weekly AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.nabp,
        copay.pharmacy_chain_number,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.occ_payment_type,
        copay.auth_refills,
        copay.claim_type,
        copay.administration_flag,
        copay.payer_name,
        copay.trans_type,
        copay.previous_payer_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.source_name,
        copay.patient_type,
        copay.primary_bin,
        copay.primary_bin_description,
        copay.reject_code
 FROM datamart.copay
 WHERE ((copay.basket_name ~~* '%AJOVY%'::varchar(7)) OR (copay.basket_name ~~* '%AUSTEDO%'::varchar(9)) OR (copay.basket_name ~~* '%DIGIHALER%'::varchar(11)))
 GROUP BY copay.redemption_type,
          copay.physician_tvcmid,
          copay.pharmacy_tvcmid,
          copay.basket_id,
          copay.basket_name,
          copay.asi_txn_id,
          copay.orig_asi_txn_id,
          copay.rx_num,
          copay.fill_date,
          copay.date_written,
          copay.days_supply,
          copay.ndc_code,
          copay.daw,
          copay.new_refill,
          copay.quantity,
          copay.refills,
          copay.other_coverage_code,
          copay.program_number,
          copay.copay_card_number,
          copay.sex,
          copay.age_at_redemption,
          copay.pharmacy_process_date,
          copay.nabp,
          copay.pharmacy_chain_number,
          copay.pharmacy_chain,
          copay.pharmacy_name,
          copay.pharmacy_address,
          copay.pharmacy_address2,
          copay.pharmacy_city,
          copay.pharmacy_state,
          copay.pharmacy_zip,
          copay.pharmacy_phone,
          copay.pharmacy_npi_num,
          copay.principle_physician_dea,
          copay.physician_npi,
          copay.physician_ims_id,
          copay.physician_veeva_id,
          copay.physician_name,
          copay.physician_address1,
          copay.physician_address2,
          copay.physician_city,
          copay.physician_state,
          copay.physician_zip,
          copay.rebate_amount,
          copay.member_cash_expense,
          copay.submitted_cost,
          copay.pharmacy_fee,
          copay.total_amount_due,
          copay.calc_awp,
          copay.occ_payment_type,
          copay.auth_refills,
          copay.claim_type,
          copay.administration_flag,
          copay.payer_name,
          copay.trans_type,
          copay.previous_payer_id,
          copay.benefit_amount,
          copay.patient_expense,
          copay.submission_method,
          copay.source_name,
          copay.patient_type,
          copay.primary_bin,
          copay.primary_bin_description,
          copay.reject_code;

CREATE  VIEW outbound.zs_specialty_group_adhoc AS
( SELECT CASE WHEN (msf.sales_force_id = 'SA'::varchar(2)) THEN 'TS'::varchar(2) WHEN (msf.sales_force_id = 'NS'::varchar(2)) THEN 'TN'::varchar(2) WHEN (msf.sales_force_id = 'SP'::varchar(2)) THEN 'TR'::varchar(2) WHEN (msf.sales_force_id = 'MA'::varchar(2)) THEN 'MA'::varchar(2) WHEN (msf.sales_force_id = 'ON'::varchar(2)) THEN 'TO'::varchar(2) WHEN (msf.sales_force_id = 'NP'::varchar(2)) THEN 'TP'::varchar(2) ELSE msf.sales_force_id END AS sales_force_id,
        msf.market_basket_id,
        msf.market_name,
        sgx.specialty_code,
        sgx.specialty_group,
        msf.specialty_group_name
 FROM reference.reporting_market_sales_force msf, reference.specialty_group_xref sgx
 WHERE (sgx.category_name = msf.specialty_group_name)
 GROUP BY CASE WHEN (msf.sales_force_id = 'SA'::varchar(2)) THEN 'TS'::varchar(2) WHEN (msf.sales_force_id = 'NS'::varchar(2)) THEN 'TN'::varchar(2) WHEN (msf.sales_force_id = 'SP'::varchar(2)) THEN 'TR'::varchar(2) WHEN (msf.sales_force_id = 'MA'::varchar(2)) THEN 'MA'::varchar(2) WHEN (msf.sales_force_id = 'ON'::varchar(2)) THEN 'TO'::varchar(2) WHEN (msf.sales_force_id = 'NP'::varchar(2)) THEN 'TP'::varchar(2) ELSE msf.sales_force_id END,
          msf.market_basket_id,
          msf.market_name,
          sgx.specialty_code,
          sgx.specialty_group,
          msf.specialty_group_name UNION  SELECT CASE WHEN (msf.sales_force_id = 'SA'::varchar(2)) THEN 'TS'::varchar(2) WHEN (msf.sales_force_id = 'NS'::varchar(2)) THEN 'TN'::varchar(2) WHEN (msf.sales_force_id = 'SP'::varchar(2)) THEN 'TR'::varchar(2) WHEN (msf.sales_force_id = 'MA'::varchar(2)) THEN 'MA'::varchar(2) WHEN (msf.sales_force_id = 'ON'::varchar(2)) THEN 'TO'::varchar(2) WHEN (msf.sales_force_id = 'NP'::varchar(2)) THEN 'TP'::varchar(2) ELSE msf.sales_force_id END AS sales_force_id,
        msf.market_basket_id,
        msf.market_name,
        sgx.specialty_code,
        sgx.specialty_group,
        msf.specialty_group_name
 FROM reference.ref_rptng_mrkt_sales_force_05132020 msf, reference.specialty_group_xref sgx
 WHERE ((sgx.category_name = msf.specialty_group_name) AND (sgx.category_name = ANY (ARRAY['QVAR'::varchar(7), 'CINQAIR'::varchar(7)])))
 GROUP BY CASE WHEN (msf.sales_force_id = 'SA'::varchar(2)) THEN 'TS'::varchar(2) WHEN (msf.sales_force_id = 'NS'::varchar(2)) THEN 'TN'::varchar(2) WHEN (msf.sales_force_id = 'SP'::varchar(2)) THEN 'TR'::varchar(2) WHEN (msf.sales_force_id = 'MA'::varchar(2)) THEN 'MA'::varchar(2) WHEN (msf.sales_force_id = 'ON'::varchar(2)) THEN 'TO'::varchar(2) WHEN (msf.sales_force_id = 'NP'::varchar(2)) THEN 'TP'::varchar(2) ELSE msf.sales_force_id END,
          msf.market_basket_id,
          msf.market_name,
          sgx.specialty_code,
          sgx.specialty_group,
          msf.specialty_group_name) UNION  SELECT CASE WHEN (msf.sales_force_id = 'SA'::varchar(2)) THEN 'TS'::varchar(2) WHEN (msf.sales_force_id = 'NS'::varchar(2)) THEN 'TN'::varchar(2) WHEN (msf.sales_force_id = 'SP'::varchar(2)) THEN 'TR'::varchar(2) WHEN (msf.sales_force_id = 'MA'::varchar(2)) THEN 'MA'::varchar(2) WHEN (msf.sales_force_id = 'ON'::varchar(2)) THEN 'TO'::varchar(2) WHEN (msf.sales_force_id = 'NP'::varchar(2)) THEN 'TP'::varchar(2) ELSE msf.sales_force_id END AS sales_force_id,
        msf.market_basket_id,
        msf.market_name,
        sgx.specialty_code,
        CASE WHEN (sgx.specialty_code = ANY (ARRAY['MFM'::varchar(3), 'WMN'::varchar(3), 'GYN'::varchar(3), 'OBG'::varchar(3), 'REN'::varchar(3), 'OBS'::varchar(3), 'WH'::varchar(2)])) THEN 'OBG'::varchar(3) ELSE sgx.specialty_group END AS specialty_group,
        'AJOVY WITH OBG'::varchar(14) AS specialty_group_name
 FROM reference.reporting_market_sales_force msf, reference.specialty_group_xref sgx
 WHERE ((sgx.category_name = msf.specialty_group_name) AND (sgx.category_name = 'AJOVY'::varchar(5)))
 GROUP BY CASE WHEN (msf.sales_force_id = 'SA'::varchar(2)) THEN 'TS'::varchar(2) WHEN (msf.sales_force_id = 'NS'::varchar(2)) THEN 'TN'::varchar(2) WHEN (msf.sales_force_id = 'SP'::varchar(2)) THEN 'TR'::varchar(2) WHEN (msf.sales_force_id = 'MA'::varchar(2)) THEN 'MA'::varchar(2) WHEN (msf.sales_force_id = 'ON'::varchar(2)) THEN 'TO'::varchar(2) WHEN (msf.sales_force_id = 'NP'::varchar(2)) THEN 'TP'::varchar(2) ELSE msf.sales_force_id END,
          msf.market_basket_id,
          msf.market_name,
          sgx.specialty_code,
          CASE WHEN (sgx.specialty_code = ANY (ARRAY['MFM'::varchar(3), 'WMN'::varchar(3), 'GYN'::varchar(3), 'OBG'::varchar(3), 'REN'::varchar(3), 'OBS'::varchar(3), 'WH'::varchar(2)])) THEN 'OBG'::varchar(3) ELSE sgx.specialty_group END,
          'AJOVY WITH OBG'::varchar(14);

CREATE  VIEW outbound.zs_zip_terr AS
 SELECT current_alignment.sales_force_id,
        current_alignment.zip_code,
        current_alignment.city,
        current_alignment.state_code,
        current_alignment.territory_number,
        current_alignment.territory_name,
        current_alignment.area_number,
        current_alignment.area_name,
        current_alignment.region_number,
        current_alignment.region_name,
        current_alignment.mirror_flag,
        CASE WHEN (current_alignment.mirror_territory_number = 'NULL'::varchar(4)) THEN NULL ELSE current_alignment.mirror_territory_number END AS mirror_territory_number
 FROM datamart.current_alignment
 WHERE (current_alignment.sales_force_id = ANY (ARRAY['MA'::varchar(2), 'TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)]));

CREATE  VIEW outbound.saba_laba_mop_digihaler_temp AS
 SELECT rx_vertical.ims_id,
        rx_vertical.hcp_id,
        rx_vertical.plan_code,
        rx_vertical.plan_name,
        rx_vertical.payment_method,
        rx_vertical.basket_name,
        sum(CASE WHEN (rx_vertical.month_bucket = 24) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth24,
        sum(CASE WHEN (rx_vertical.month_bucket = 23) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth23,
        sum(CASE WHEN (rx_vertical.month_bucket = 22) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth22,
        sum(CASE WHEN (rx_vertical.month_bucket = 21) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth21,
        sum(CASE WHEN (rx_vertical.month_bucket = 20) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth20,
        sum(CASE WHEN (rx_vertical.month_bucket = 19) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth19,
        sum(CASE WHEN (rx_vertical.month_bucket = 18) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth18,
        sum(CASE WHEN (rx_vertical.month_bucket = 17) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth17,
        sum(CASE WHEN (rx_vertical.month_bucket = 16) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth16,
        sum(CASE WHEN (rx_vertical.month_bucket = 15) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth15,
        sum(CASE WHEN (rx_vertical.month_bucket = 14) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth14,
        sum(CASE WHEN (rx_vertical.month_bucket = 13) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth13,
        sum(CASE WHEN (rx_vertical.month_bucket = 12) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth12,
        sum(CASE WHEN (rx_vertical.month_bucket = 11) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth11,
        sum(CASE WHEN (rx_vertical.month_bucket = 10) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth10,
        sum(CASE WHEN (rx_vertical.month_bucket = 9) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth9,
        sum(CASE WHEN (rx_vertical.month_bucket = 8) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth8,
        sum(CASE WHEN (rx_vertical.month_bucket = 7) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth7,
        sum(CASE WHEN (rx_vertical.month_bucket = 6) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth6,
        sum(CASE WHEN (rx_vertical.month_bucket = 5) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth5,
        sum(CASE WHEN (rx_vertical.month_bucket = 4) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth4,
        sum(CASE WHEN (rx_vertical.month_bucket = 3) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth3,
        sum(CASE WHEN (rx_vertical.month_bucket = 2) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth2,
        sum(CASE WHEN (rx_vertical.month_bucket = 1) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth1
 FROM ( SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(xref.veeva_account_id, rx.ims_id) END AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.payment_method,
        rx.basket_name,
        w.month_bucket,
        rx.trx_count
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT row_number() OVER (ORDER BY z.rollup_month DESC) AS month_bucket,
        z.rollup_month
 FROM ( SELECT prescriber_rx.rollup_month
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.market_name = 'SABA MARKET TOTAL'::varchar(17)) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.rollup_week >= prescriber_rx.rollup_month))
 GROUP BY prescriber_rx.rollup_month) z) w ON ((rx.rollup_month = w.rollup_month))) LEFT  JOIN ( SELECT a.tvcmid,
        a.veeva_account_id
 FROM ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.id_num) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE (xref.id_type = 'VEEVA_ID'::varchar(8))) a
 WHERE (a.rnk = 1)) xref ON ((xref.tvcmid = rx.tvcmid)))
 WHERE ((rx.market_name = 'SABA MARKET TOTAL'::varchar(17)) AND (rx.basket_name ~~* '%PRO%DIGIHA%'::varchar(12)) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (w.month_bucket >= 1) AND (w.month_bucket <= 24))) rx_vertical
 GROUP BY rx_vertical.ims_id,
          rx_vertical.hcp_id,
          rx_vertical.plan_code,
          rx_vertical.plan_name,
          rx_vertical.payment_method,
          rx_vertical.basket_name;

CREATE  VIEW outbound.zs_normalization_factor AS
 SELECT b.basket_id,
        b.name AS basket_name,
        b.basket_type,
        nf.divisor,
        nf.multiplier,
        nf.start_date,
        nf.end_date
 FROM product.normalization_factor nf, product.basket b
 WHERE ((nf.entity_id = b.basket_id) AND (nf.end_date > ((statement_timestamp())::timestamp + (-1)::float)));

CREATE  VIEW outbound.saba_laba_mop_digihaler AS
 SELECT rx_vertical.ims_id,
        rx_vertical.hcp_id,
        rx_vertical.plan_code,
        rx_vertical.plan_name,
        rx_vertical.payment_method,
        rx_vertical.basket_name,
        sum(CASE WHEN (rx_vertical.month_bucket = 24) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth24,
        sum(CASE WHEN (rx_vertical.month_bucket = 23) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth23,
        sum(CASE WHEN (rx_vertical.month_bucket = 22) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth22,
        sum(CASE WHEN (rx_vertical.month_bucket = 21) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth21,
        sum(CASE WHEN (rx_vertical.month_bucket = 20) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth20,
        sum(CASE WHEN (rx_vertical.month_bucket = 19) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth19,
        sum(CASE WHEN (rx_vertical.month_bucket = 18) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth18,
        sum(CASE WHEN (rx_vertical.month_bucket = 17) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth17,
        sum(CASE WHEN (rx_vertical.month_bucket = 16) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth16,
        sum(CASE WHEN (rx_vertical.month_bucket = 15) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth15,
        sum(CASE WHEN (rx_vertical.month_bucket = 14) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth14,
        sum(CASE WHEN (rx_vertical.month_bucket = 13) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth13,
        sum(CASE WHEN (rx_vertical.month_bucket = 12) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth12,
        sum(CASE WHEN (rx_vertical.month_bucket = 11) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth11,
        sum(CASE WHEN (rx_vertical.month_bucket = 10) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth10,
        sum(CASE WHEN (rx_vertical.month_bucket = 9) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth9,
        sum(CASE WHEN (rx_vertical.month_bucket = 8) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth8,
        sum(CASE WHEN (rx_vertical.month_bucket = 7) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth7,
        sum(CASE WHEN (rx_vertical.month_bucket = 6) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth6,
        sum(CASE WHEN (rx_vertical.month_bucket = 5) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth5,
        sum(CASE WHEN (rx_vertical.month_bucket = 4) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth4,
        sum(CASE WHEN (rx_vertical.month_bucket = 3) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth3,
        sum(CASE WHEN (rx_vertical.month_bucket = 2) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth2,
        sum(CASE WHEN (rx_vertical.month_bucket = 1) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth1,
        sum(CASE WHEN (rx_vertical.month_bucket = 24) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth24,
        sum(CASE WHEN (rx_vertical.month_bucket = 23) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth23,
        sum(CASE WHEN (rx_vertical.month_bucket = 22) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth22,
        sum(CASE WHEN (rx_vertical.month_bucket = 21) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth21,
        sum(CASE WHEN (rx_vertical.month_bucket = 20) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth20,
        sum(CASE WHEN (rx_vertical.month_bucket = 19) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth19,
        sum(CASE WHEN (rx_vertical.month_bucket = 18) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth18,
        sum(CASE WHEN (rx_vertical.month_bucket = 17) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth17,
        sum(CASE WHEN (rx_vertical.month_bucket = 16) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth16,
        sum(CASE WHEN (rx_vertical.month_bucket = 15) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth15,
        sum(CASE WHEN (rx_vertical.month_bucket = 14) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth14,
        sum(CASE WHEN (rx_vertical.month_bucket = 13) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth13,
        sum(CASE WHEN (rx_vertical.month_bucket = 12) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth12,
        sum(CASE WHEN (rx_vertical.month_bucket = 11) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth11,
        sum(CASE WHEN (rx_vertical.month_bucket = 10) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth10,
        sum(CASE WHEN (rx_vertical.month_bucket = 9) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth9,
        sum(CASE WHEN (rx_vertical.month_bucket = 8) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth8,
        sum(CASE WHEN (rx_vertical.month_bucket = 7) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth7,
        sum(CASE WHEN (rx_vertical.month_bucket = 6) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth6,
        sum(CASE WHEN (rx_vertical.month_bucket = 5) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth5,
        sum(CASE WHEN (rx_vertical.month_bucket = 4) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth4,
        sum(CASE WHEN (rx_vertical.month_bucket = 3) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth3,
        sum(CASE WHEN (rx_vertical.month_bucket = 2) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth2,
        sum(CASE WHEN (rx_vertical.month_bucket = 1) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth1
 FROM ( SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(xref.veeva_account_id, rx.ims_id) END AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.payment_method,
        rx.basket_name,
        w.month_bucket,
        rx.trx_count,
        rx.trx_quantity AS trx_qty
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT row_number() OVER (ORDER BY z.rollup_month DESC) AS month_bucket,
        z.rollup_month
 FROM ( SELECT prescriber_rx.rollup_month
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.market_name = ANY (ARRAY['SABA MARKET TOTAL'::varchar(17), 'LABA MARKET TOTAL'::varchar(17), 'ICS MARKET TOTAL'::varchar(16)])) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))
 GROUP BY prescriber_rx.rollup_month) z) w ON ((rx.rollup_month = w.rollup_month))) LEFT  JOIN ( SELECT a.tvcmid,
        a.veeva_account_id
 FROM ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.id_num) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE (xref.id_type = 'VEEVA_ID'::varchar(8))) a
 WHERE (a.rnk = 1)) xref ON ((xref.tvcmid = rx.tvcmid)))
 WHERE ((rx.market_name = ANY (ARRAY['SABA MARKET TOTAL'::varchar(17), 'LABA MARKET TOTAL'::varchar(17), 'ICS MARKET TOTAL'::varchar(16)])) AND (rx.basket_name ~~* '%%DIGIHA%'::varchar(9)) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (w.month_bucket >= 1) AND (w.month_bucket <= 24))) rx_vertical
 GROUP BY rx_vertical.ims_id,
          rx_vertical.hcp_id,
          rx_vertical.plan_code,
          rx_vertical.plan_name,
          rx_vertical.payment_method,
          rx_vertical.basket_name;

CREATE  VIEW outbound.austedo_fia_monthly AS
 SELECT fia.basket_id,
        fia.basket_name,
        fia.claim_id,
        fia.patient_id,
        fia.sequence_number,
        fia.product_id,
        fia.fill_date,
        fia.claim_type,
        fia.reject_code,
        fia.days_supply,
        fia.quantity,
        fia.refill_code,
        fia.payer_plan_id,
        fia.opc_ask,
        fia.sec_payer_plan_id,
        fia.buy_down,
        fia.opc_paid,
        fia.prescriber_id,
        fia.sob,
        fia.sub_product_id,
        fia.sub_opc,
        fia.initial_claim_id,
        fia.prev_product_id,
        fia.daw_code,
        fia.wrt_date,
        fia.claim_status,
        fia.copay_card_flg,
        fia.zip_code,
        fia.ecoup_flag,
        fia.ecoup_offset_amt,
        fia.standard_copay,
        fia.standard_copay_yn,
        fia.market_id,
        fia.flexible_fld_1_char,
        fia.flexible_fld_2_char,
        fia.flexible_fld_3_char,
        fia.flexible_fld_4_char,
        fia.file_id,
        fia.record_id,
        fia.cbsa_code,
        fia.cbsa_description,
        fia.state_code,
        fia.payer_name,
        fia.plan_name,
        fia.pbm_name,
        fia.pbm_id,
        fia.method_of_payment,
        fia.model_type,
        fia.product_group,
        fia.product_group_id,
        fia.product_name,
        fia.generic_name,
        fia.brand_generic_flag,
        fia.product_form,
        fia.product_strength,
        fia.package_size,
        fia.manufacturer,
        fia.cmf10,
        fia.usc_code,
        fia.fia_market_desc,
        fia.reject_reason,
        fia.reject_group,
        fia.mpd_year,
        fia.mpd_eligibility_class,
        fia.deductible_start_date,
        fia.copay_start_date,
        fia.gap_start_date,
        fia.catastrophic_start_date,
        fia.mpd_panel_patient,
        fia.PROVIDER_TYPE,
        fia.IQVIA_RXER_ID,
        fia.PRIMARY_SPECIALTY_CODE,
        fia.PRIMARY_SPECIALTY_DESC,
        fia.FIRST_NAME,
        fia.LAST_NAME,
        fia.ORG_NM,
        fia.ADDRESS,
        fia.CITY,
        fia.PVR_ZIP_CODE,
        fia.PVR_STATE_CODE,
        fia.PHONE_NUMBER
 FROM datamart.fia fia
 WHERE ((fia.fill_date >= '2020-01-01'::date) AND (fia.basket_id IN ( SELECT source_product.entity_id
 FROM product.source_product
 WHERE (source_product.source_file_code = 'A67.F12045'::varchar(10)))));

CREATE  VIEW outbound.zs_spec_pharm_shipment_monthly AS
 SELECT specialty_pharmacy_shipment.specialty_pharmacy_data_source,
        specialty_pharmacy_shipment.ims_id,
        specialty_pharmacy_shipment.tw_ship_to_address_id,
        specialty_pharmacy_shipment.tw_bill_to_address_id,
        specialty_pharmacy_shipment.source_customer_id,
        specialty_pharmacy_shipment.customer_name,
        specialty_pharmacy_shipment.physician_first_name,
        specialty_pharmacy_shipment.physician_last_name,
        specialty_pharmacy_shipment.ship_to_address_line_1,
        specialty_pharmacy_shipment.ship_to_address_line_2,
        specialty_pharmacy_shipment.ship_to_city,
        specialty_pharmacy_shipment.ship_to_state,
        specialty_pharmacy_shipment.ship_to_zip,
        specialty_pharmacy_shipment.source_transaction_id,
        specialty_pharmacy_shipment.invoice_date,
        specialty_pharmacy_shipment.ship_date,
        specialty_pharmacy_shipment.source_product_code,
        specialty_pharmacy_shipment.basket_id,
        specialty_pharmacy_shipment.quantity,
        specialty_pharmacy_shipment.invoice_unit_price,
        specialty_pharmacy_shipment.invoice_amount,
        specialty_pharmacy_shipment.invoice_discount,
        specialty_pharmacy_shipment.order_type,
        specialty_pharmacy_shipment.customer_type,
        specialty_pharmacy_shipment.source_parent_customer_id,
        specialty_pharmacy_shipment.parent_customer_name,
        specialty_pharmacy_shipment.lob_code_desc,
        specialty_pharmacy_shipment.order_type_desc,
        specialty_pharmacy_shipment.price_matrix_def,
        specialty_pharmacy_shipment.whse_code,
        specialty_pharmacy_shipment.order_no,
        specialty_pharmacy_shipment.package_size,
        specialty_pharmacy_shipment.tvcmid,
        specialty_pharmacy_shipment.trx_cnt,
        specialty_pharmacy_shipment.net_sales_amt,
        specialty_pharmacy_shipment.adj_invoice_unit_price,
        specialty_pharmacy_shipment.adj_invoice_amount,
        specialty_pharmacy_shipment.net_cost,
        specialty_pharmacy_shipment.payer_flag,
        specialty_pharmacy_shipment.optum_briova_flag AS briova_flag,
        specialty_pharmacy_shipment.physician_middle_name,
        specialty_pharmacy_shipment.rollup_flag,
        specialty_pharmacy_shipment.basket_type,
        specialty_pharmacy_shipment.unnormalized_trx_count,
        specialty_pharmacy_shipment.basket_name,
        specialty_pharmacy_shipment.comp_month,
        specialty_pharmacy_shipment.days_supplied,
        specialty_pharmacy_shipment.SPP_Physician_ID,
        specialty_pharmacy_shipment.Primary_Payer_BIN,
        specialty_pharmacy_shipment.Primary_Payer_PCN,
        specialty_pharmacy_shipment.Primary_Group_Num,
        specialty_pharmacy_shipment.Primary_Payer_Name,
        specialty_pharmacy_shipment.Primary_Payer_Type,
        specialty_pharmacy_shipment.Primary_Copay_Amount,
        specialty_pharmacy_shipment.NPI,
        specialty_pharmacy_shipment.state_license_number
 FROM datamart.specialty_pharmacy_shipment
 WHERE ((specialty_pharmacy_shipment.ship_date >= '2018-02-01'::date) AND (specialty_pharmacy_shipment.basket_type = 'product'::varchar(7)) AND (specialty_pharmacy_shipment.specialty_pharmacy_data_source = ANY (ARRAY['OptumRx'::varchar(10), 'RelianceRx'::varchar(10)])))
 GROUP BY specialty_pharmacy_shipment.specialty_pharmacy_data_source,
          specialty_pharmacy_shipment.ims_id,
          specialty_pharmacy_shipment.tw_ship_to_address_id,
          specialty_pharmacy_shipment.tw_bill_to_address_id,
          specialty_pharmacy_shipment.source_customer_id,
          specialty_pharmacy_shipment.customer_name,
          specialty_pharmacy_shipment.physician_first_name,
          specialty_pharmacy_shipment.physician_last_name,
          specialty_pharmacy_shipment.ship_to_address_line_1,
          specialty_pharmacy_shipment.ship_to_address_line_2,
          specialty_pharmacy_shipment.ship_to_city,
          specialty_pharmacy_shipment.ship_to_state,
          specialty_pharmacy_shipment.ship_to_zip,
          specialty_pharmacy_shipment.source_transaction_id,
          specialty_pharmacy_shipment.invoice_date,
          specialty_pharmacy_shipment.ship_date,
          specialty_pharmacy_shipment.source_product_code,
          specialty_pharmacy_shipment.basket_id,
          specialty_pharmacy_shipment.quantity,
          specialty_pharmacy_shipment.invoice_unit_price,
          specialty_pharmacy_shipment.invoice_amount,
          specialty_pharmacy_shipment.invoice_discount,
          specialty_pharmacy_shipment.order_type,
          specialty_pharmacy_shipment.customer_type,
          specialty_pharmacy_shipment.source_parent_customer_id,
          specialty_pharmacy_shipment.parent_customer_name,
          specialty_pharmacy_shipment.lob_code_desc,
          specialty_pharmacy_shipment.order_type_desc,
          specialty_pharmacy_shipment.price_matrix_def,
          specialty_pharmacy_shipment.whse_code,
          specialty_pharmacy_shipment.order_no,
          specialty_pharmacy_shipment.package_size,
          specialty_pharmacy_shipment.tvcmid,
          specialty_pharmacy_shipment.trx_cnt,
          specialty_pharmacy_shipment.net_sales_amt,
          specialty_pharmacy_shipment.adj_invoice_unit_price,
          specialty_pharmacy_shipment.adj_invoice_amount,
          specialty_pharmacy_shipment.net_cost,
          specialty_pharmacy_shipment.payer_flag,
          specialty_pharmacy_shipment.optum_briova_flag,
          specialty_pharmacy_shipment.physician_middle_name,
          specialty_pharmacy_shipment.rollup_flag,
          specialty_pharmacy_shipment.basket_type,
          specialty_pharmacy_shipment.unnormalized_trx_count,
          specialty_pharmacy_shipment.basket_name,
          specialty_pharmacy_shipment.comp_month,
          specialty_pharmacy_shipment.days_supplied,
          specialty_pharmacy_shipment.SPP_Physician_ID,
          specialty_pharmacy_shipment.Primary_Payer_BIN,
          specialty_pharmacy_shipment.Primary_Payer_PCN,
          specialty_pharmacy_shipment.Primary_Group_Num,
          specialty_pharmacy_shipment.Primary_Payer_Name,
          specialty_pharmacy_shipment.Primary_Payer_Type,
          specialty_pharmacy_shipment.Primary_Copay_Amount,
          specialty_pharmacy_shipment.NPI,
          specialty_pharmacy_shipment.state_license_number;

CREATE  VIEW outbound.zs_tr_ims_zip_xref AS
 SELECT CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END AS ims_id,
        prescriber_combined_demographics.ptr_zip AS zip
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TR'::varchar(2))
 GROUP BY CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END,
          prescriber_combined_demographics.ptr_zip
 ORDER BY CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END,
          prescriber_combined_demographics.ptr_zip;

CREATE  VIEW outbound.zs_xpo_xpopt_AM_MD_ICS_LABA_weekly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.rollup_week >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (prescriber_rx.market_name <> ALL (ARRAY['ALLERGY MARKET TOTAL'::varchar(20), 'SABA MARKET TOTAL'::varchar(17)])))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.sales_category,
          prescriber_rx.market_name,
          prescriber_rx.basket_id,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.model,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.indication,
          prescriber_rx.data_date,
          prescriber_rx.date,
          prescriber_rx.rollup_flag,
          prescriber_rx.rollup_week,
          prescriber_rx.rollup_month,
          prescriber_rx.report_frequency,
          prescriber_rx.plan_name,
          prescriber_rx.payer_name,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count;

CREATE  VIEW outbound.zs_xpo_xpopt_SABA_weekly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.rollup_week >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (prescriber_rx.market_name = 'SABA MARKET TOTAL'::varchar(17)))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.sales_category,
          prescriber_rx.market_name,
          prescriber_rx.basket_id,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.model,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.indication,
          prescriber_rx.data_date,
          prescriber_rx.date,
          prescriber_rx.rollup_flag,
          prescriber_rx.rollup_week,
          prescriber_rx.rollup_month,
          prescriber_rx.report_frequency,
          prescriber_rx.plan_name,
          prescriber_rx.payer_name,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count;

CREATE  VIEW outbound.zs_revo_demographics_monthly AS
 SELECT d.sales_force_id,
        d.ims_id,
        d.npi,
        d.tvcmid,
        d.veeva_account_id,
        d.specialty,
        d.secondary_specialty,
        d.first_name,
        d.middle_name,
        d.last_name,
        d.ptr_address_1,
        d.ptr_address_2,
        d.ptr_address_3,
        d.ptr_city,
        d.ptr_state,
        d.ptr_zip,
        d.ptr_phone,
        d.ptr_territory_num,
        d.dea_num,
        d.pdrp_flag,
        d.pdrp_date,
        d.np_pa_flag,
        d.no_spend,
        d.ama_no_contact_flag,
        d.email,
        d.degree,
        CASE WHEN (dnp.tvcmid IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS dnp_flag,
        x.hce_status_desc AS cm_status_flag,
        xref.id_num AS ME_Num
 FROM (((datamart.prescriber_combined_demographics d LEFT  JOIN ( SELECT customer_level_flags.tvcmid
 FROM datamart.customer_level_flags
 WHERE ((customer_level_flags.flag_type = ANY (ARRAY['OIG'::varchar(6), 'FDA'::varchar(6), 'DEA'::varchar(6), 'PERPRM'::varchar(6)])) AND (customer_level_flags.flag_value = 'Y'::varchar(1)))
 GROUP BY customer_level_flags.tvcmid) dnp ON ((d.tvcmid = dnp.tvcmid))) LEFT  JOIN ( SELECT customer_hcp_demographics.tvcmid,
        customer_hcp_demographics.hce_status_desc
 FROM datamart.customer_hcp_demographics) x ON ((d.tvcmid = x.tvcmid))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        tvcmid_xref.id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'AMA'::varchar(3))
 GROUP BY tvcmid_xref.tvcmid,
          tvcmid_xref.id_num) xref ON ((d.tvcmid = xref.tvcmid)))
 WHERE (d.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'TO'::varchar(2), 'MA'::varchar(2)]))
 GROUP BY d.sales_force_id,
          d.ims_id,
          d.npi,
          d.tvcmid,
          d.veeva_account_id,
          d.specialty,
          d.secondary_specialty,
          d.first_name,
          d.middle_name,
          d.last_name,
          d.ptr_address_1,
          d.ptr_address_2,
          d.ptr_address_3,
          d.ptr_city,
          d.ptr_state,
          d.ptr_zip,
          d.ptr_phone,
          d.ptr_territory_num,
          d.dea_num,
          d.pdrp_flag,
          d.pdrp_date,
          d.np_pa_flag,
          d.no_spend,
          d.ama_no_contact_flag,
          d.email,
          d.degree,
          CASE WHEN (dnp.tvcmid IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END,
          x.hce_status_desc,
          xref.id_num;

CREATE  VIEW outbound.zs_revo_call_key_messages AS
 SELECT call_key_messages.veeva_account_id,
        call_key_messages.tvcmid,
        call_key_messages.call_id,
        call_key_messages.call_record_type,
        call_key_messages.product,
        call_key_messages.key_message,
        call_key_messages.call_date,
        call_key_messages.duration,
        call_key_messages.display_order,
        call_key_messages.call_status,
        call_key_messages.territory,
        call_key_messages.call_type,
        call_key_messages.hcp_name
 FROM reporting.call_key_messages
 WHERE ((call_key_messages.product <> ALL (ARRAY['Blink Health – AJOVY'::varchar(24), 'Blink Health – AUSTEDO'::varchar(24), 'Unassociated'::varchar(24)])) AND (call_key_messages.call_date >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))));

CREATE  VIEW outbound.zs_call_details AS
 SELECT c.sales_force_id,
        c.call_id,
        c.veeva_account_id,
        c.ims_id,
        c.customer_type,
        c.call_type,
        c.rep_id,
        c.territory_number,
        c.zip_on_call,
        c.call_date,
        c.submit_date,
        c.attendees,
        c.attendee_type,
        c.tvcmid,
        cd.product,
        cd.basket_id,
        cd.basket_name,
        cd.detail_position,
        c.call_recordtype,
        c.how_executed,
        c.ims_outlet_id,
        c.first_name,
        c.last_name,
        c.rep_first_name,
        c.rep_last_name,
        c.area_number,
        c.region_number,
        c.call_duration,
        c.call_timezone,
        c.remote_meeting_id,
        c.call_datetime,
        cd.indication
 FROM ((datamart.sfa_call c JOIN datamart.sfa_call_detail cd ON ((c.call_id = cd.call_id))) JOIN reference.zs_revo_products zrp ON (((cd.basket_id = zrp.basket_id) AND (zrp.entity = 'call activity'::varchar(13)))))
 WHERE ((c.call_date >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'TO'::varchar(2), 'MA'::varchar(2)])));

CREATE  VIEW outbound.blink_call_details AS
 SELECT c.sales_force_id,
        c.call_id,
        c.veeva_account_id,
        c.ims_id,
        d.npi,
        c.customer_type,
        c.call_type,
        c.rep_id,
        c.territory_number,
        c.zip_on_call,
        c.call_date,
        c.submit_date,
        c.attendees,
        c.attendee_type,
        c.tvcmid,
        cd.product,
        cd.basket_id,
        cd.basket_name,
        cd.detail_position,
        c.call_recordtype,
        c.how_executed,
        c.ims_outlet_id,
        c.first_name,
        c.last_name,
        c.rep_first_name,
        c.rep_last_name,
        c.area_number,
        c.region_number,
        c.call_duration,
        c.call_timezone,
        c.remote_meeting_id
 FROM ((datamart.sfa_call c JOIN datamart.sfa_call_detail cd ON ((c.call_id = cd.call_id))) LEFT  JOIN datamart.customer_hcp_demographics d ON ((d.tvcmid = c.tvcmid)))
 WHERE ((c.call_date >= '2021-02-01'::date) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'TO'::varchar(2), 'MA'::varchar(2)])) AND (cd.product ~~* 'Blink%'::varchar(6)));

CREATE  VIEW outbound.zs_xpo_xpopt_MD_ICS_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = ANY (ARRAY['ICS MARKET TOTAL'::varchar(24), 'MOVEMENT DISORDER MARKET'::varchar(24)])))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.sales_category,
          prescriber_rx.market_name,
          prescriber_rx.basket_id,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.model,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.indication,
          prescriber_rx.data_date,
          prescriber_rx.date,
          prescriber_rx.rollup_flag,
          prescriber_rx.rollup_week,
          prescriber_rx.rollup_month,
          prescriber_rx.report_frequency,
          prescriber_rx.plan_name,
          prescriber_rx.payer_name,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count;

CREATE  VIEW outbound.zs_sample_request AS
 SELECT sfa_sample.sample_id,
        sfa_sample.call_id,
        sfa_sample.veeva_account_id,
        sfa_sample.ims_id,
        sfa_sample.call_date,
        sfa_sample.sales_force_id,
        sfa_sample.territory_number,
        sfa_sample.call_type,
        sfa_sample.attendee_type,
        sfa_sample.customer_type,
        sfa_sample.sample_type,
        sfa_sample.product_name,
        sfa_sample.sample_name,
        sfa_sample.sample_ndc,
        sfa_sample.basket_id,
        sfa_sample.basket_name,
        sfa_sample.qty,
        sfa_sample.zip_on_call,
        sfa_sample.employee_number,
        sfa_sample.tvcmid,
        sfa_sample.how_executed
 FROM datamart.sfa_sample
 WHERE ((sfa_sample.sample_type = 'REQUEST'::varchar(7)) AND (sfa_sample.basket_name <> 'QNASL'::varchar(5)) AND (sfa_sample.call_date >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))));

CREATE  VIEW outbound.zs_dddmd_demographics_weekly AS
 SELECT dddmd_demographics.account_demo_id,
        dddmd_demographics.outlet_code,
        dddmd_demographics.ims_facility_number,
        dddmd_demographics.ims_prescriber_number,
        dddmd_demographics.category_code,
        dddmd_demographics.subcategory_code,
        dddmd_demographics.alignment_zip,
        dddmd_demographics.outlet_name,
        dddmd_demographics.outlet_address,
        dddmd_demographics.outlet_city,
        dddmd_demographics.outlet_state,
        dddmd_demographics.outlet_zip,
        dddmd_demographics.facility_name,
        dddmd_demographics.facility_address1,
        dddmd_demographics.facility_address2,
        dddmd_demographics.facility_address3,
        dddmd_demographics.facility_address4,
        dddmd_demographics.facility_city,
        dddmd_demographics.facility_state,
        dddmd_demographics.facility_zip,
        dddmd_demographics.prescriber_name,
        dddmd_demographics.prescriber_address1,
        dddmd_demographics.prescriber_address2,
        dddmd_demographics.prescriber_address3,
        dddmd_demographics.prescriber_address4,
        dddmd_demographics.prescriber_city,
        dddmd_demographics.prescriber_state,
        dddmd_demographics.prescriber_zip,
        dddmd_demographics.account_status,
        dddmd_demographics.tvcmid,
        dddmd_demographics.sales_force_id,
        dddmd_demographics.outlet_tvcmid,
        dddmd_demographics.facility_tvcmid,
        dddmd_demographics.prescriber_tvcmid,
        dddmd_demographics.tvcmid_assignment_rule
 FROM datamart.dddmd_demographics
 GROUP BY dddmd_demographics.account_demo_id,
          dddmd_demographics.outlet_code,
          dddmd_demographics.ims_facility_number,
          dddmd_demographics.ims_prescriber_number,
          dddmd_demographics.category_code,
          dddmd_demographics.subcategory_code,
          dddmd_demographics.alignment_zip,
          dddmd_demographics.outlet_name,
          dddmd_demographics.outlet_address,
          dddmd_demographics.outlet_city,
          dddmd_demographics.outlet_state,
          dddmd_demographics.outlet_zip,
          dddmd_demographics.facility_name,
          dddmd_demographics.facility_address1,
          dddmd_demographics.facility_address2,
          dddmd_demographics.facility_address3,
          dddmd_demographics.facility_address4,
          dddmd_demographics.facility_city,
          dddmd_demographics.facility_state,
          dddmd_demographics.facility_zip,
          dddmd_demographics.prescriber_name,
          dddmd_demographics.prescriber_address1,
          dddmd_demographics.prescriber_address2,
          dddmd_demographics.prescriber_address3,
          dddmd_demographics.prescriber_address4,
          dddmd_demographics.prescriber_city,
          dddmd_demographics.prescriber_state,
          dddmd_demographics.prescriber_zip,
          dddmd_demographics.account_status,
          dddmd_demographics.tvcmid,
          dddmd_demographics.sales_force_id,
          dddmd_demographics.outlet_tvcmid,
          dddmd_demographics.facility_tvcmid,
          dddmd_demographics.prescriber_tvcmid,
          dddmd_demographics.tvcmid_assignment_rule;

CREATE  VIEW outbound.zs_dddmd_demographics_detail_weekly AS
 SELECT dddmd_demographics_detail.account_demo_id,
        dddmd_demographics_detail.outlet_code,
        dddmd_demographics_detail.ims_facility_number,
        dddmd_demographics_detail.ims_prescriber_number,
        dddmd_demographics_detail.category_code,
        dddmd_demographics_detail.subcategory_code,
        dddmd_demographics_detail.alignment_zip,
        dddmd_demographics_detail.outlet_name,
        dddmd_demographics_detail.outlet_address,
        dddmd_demographics_detail.outlet_city,
        dddmd_demographics_detail.outlet_state,
        dddmd_demographics_detail.outlet_zip,
        dddmd_demographics_detail.facility_name,
        dddmd_demographics_detail.facility_address1,
        dddmd_demographics_detail.facility_address2,
        dddmd_demographics_detail.facility_address3,
        dddmd_demographics_detail.facility_address4,
        dddmd_demographics_detail.facility_city,
        dddmd_demographics_detail.facility_state,
        dddmd_demographics_detail.facility_zip,
        dddmd_demographics_detail.prescriber_name,
        dddmd_demographics_detail.prescriber_address1,
        dddmd_demographics_detail.prescriber_address2,
        dddmd_demographics_detail.prescriber_address3,
        dddmd_demographics_detail.prescriber_address4,
        dddmd_demographics_detail.prescriber_city,
        dddmd_demographics_detail.prescriber_state,
        dddmd_demographics_detail.prescriber_zip,
        dddmd_demographics_detail.account_status,
        dddmd_demographics_detail.tvcmid,
        dddmd_demographics_detail.sales_force_id,
        dddmd_demographics_detail.outlet_tvcmid,
        dddmd_demographics_detail.facility_tvcmid,
        dddmd_demographics_detail.prescriber_tvcmid,
        dddmd_demographics_detail.tvcmid_assignment_rule
 FROM datamart.dddmd_demographics_detail
 GROUP BY dddmd_demographics_detail.account_demo_id,
          dddmd_demographics_detail.outlet_code,
          dddmd_demographics_detail.ims_facility_number,
          dddmd_demographics_detail.ims_prescriber_number,
          dddmd_demographics_detail.category_code,
          dddmd_demographics_detail.subcategory_code,
          dddmd_demographics_detail.alignment_zip,
          dddmd_demographics_detail.outlet_name,
          dddmd_demographics_detail.outlet_address,
          dddmd_demographics_detail.outlet_city,
          dddmd_demographics_detail.outlet_state,
          dddmd_demographics_detail.outlet_zip,
          dddmd_demographics_detail.facility_name,
          dddmd_demographics_detail.facility_address1,
          dddmd_demographics_detail.facility_address2,
          dddmd_demographics_detail.facility_address3,
          dddmd_demographics_detail.facility_address4,
          dddmd_demographics_detail.facility_city,
          dddmd_demographics_detail.facility_state,
          dddmd_demographics_detail.facility_zip,
          dddmd_demographics_detail.prescriber_name,
          dddmd_demographics_detail.prescriber_address1,
          dddmd_demographics_detail.prescriber_address2,
          dddmd_demographics_detail.prescriber_address3,
          dddmd_demographics_detail.prescriber_address4,
          dddmd_demographics_detail.prescriber_city,
          dddmd_demographics_detail.prescriber_state,
          dddmd_demographics_detail.prescriber_zip,
          dddmd_demographics_detail.account_status,
          dddmd_demographics_detail.tvcmid,
          dddmd_demographics_detail.sales_force_id,
          dddmd_demographics_detail.outlet_tvcmid,
          dddmd_demographics_detail.facility_tvcmid,
          dddmd_demographics_detail.prescriber_tvcmid,
          dddmd_demographics_detail.tvcmid_assignment_rule;

CREATE  VIEW outbound.zs_dddmd_weekly AS
 SELECT ddd_md.onc_account_demo_id,
        ddd_md.alt_seq_num,
        ddd_md.outlet_name,
        ddd_md.outlet_code,
        ddd_md.subcategory_code,
        ddd_md.outlet_zip,
        ddd_md.report_frequency,
        ddd_md.basket_id,
        ddd_md.basket_name,
        ddd_md.data_date,
        ddd_md.date,
        ddd_md.rollup_week,
        ddd_md.rollup_month,
        ddd_md.comp_month,
        ddd_md.quantity,
        ddd_md.dollars,
        ddd_md.sales_force_id,
        ddd_md.rollup_445_month,
        ddd_md.tvcmid,
        ddd_md.ims_facility_number,
        ddd_md.ims_prescriber_number,
        ddd_md.facility_tvcmid,
        ddd_md.prescriber_tvcmid,
        ddd_md.outlet_tvcmid
 FROM datamart.ddd_md
 WHERE (ddd_md.rollup_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5)))
 GROUP BY ddd_md.onc_account_demo_id,
          ddd_md.alt_seq_num,
          ddd_md.outlet_name,
          ddd_md.outlet_code,
          ddd_md.subcategory_code,
          ddd_md.outlet_zip,
          ddd_md.report_frequency,
          ddd_md.basket_id,
          ddd_md.basket_name,
          ddd_md.data_date,
          ddd_md.date,
          ddd_md.rollup_week,
          ddd_md.rollup_month,
          ddd_md.comp_month,
          ddd_md.quantity,
          ddd_md.dollars,
          ddd_md.sales_force_id,
          ddd_md.rollup_445_month,
          ddd_md.tvcmid,
          ddd_md.ims_facility_number,
          ddd_md.ims_prescriber_number,
          ddd_md.facility_tvcmid,
          ddd_md.prescriber_tvcmid,
          ddd_md.outlet_tvcmid;

CREATE  VIEW outbound.wheels_roster AS
 SELECT replace(rep.employee_id, 'A'::varchar(1), ''::varchar) AS UniqueIdentifier,
        mgr.full_name AS ReportsToName,
        mgr.email AS ReportsToEmailAddress,
        rep.team AS EmployeeOrganization,
        rep.last_name AS LastName,
        rep.first_name AS FirstName,
        rep.middle_name AS MiddleName,
        rep.suffix AS Generation,
        rep.preferred_name AS PreferredName,
        rep.hire_date AS HireDate,
        rep.address_line1 AS Address1,
        rep.address_line2 AS Address2,
        rep.address_line3 AS Address3,
        rep.city AS City,
        rep.state AS StateProvince,
        rep.zip AS ZipPostalCode,
        rep.home_phone AS HomePhone,
        rep.business_phone AS WorkPhone,
        rep.email AS EmailWork,
        coalesce(rep.hr_status, 'Active'::varchar(6)) AS Status,
        rep.territory_number AS TerrID,
        rep.territory_name AS TerrName,
        ''::varchar AS TermDate,
        CASE WHEN (rep.sales_force_id ~~ 'CA%'::varchar(3)) THEN (rep.oracle_string || '.6040008'::varchar(8)) ELSE (rep.oracle_string || '.7040006'::varchar(8)) END AS ADPJobCode,
        rep.title AS PositionName
 FROM (datamart.roster rep LEFT  JOIN datamart.roster mgr ON ((rep.supervisor_global_employee_id = mgr.global_employee_id)))
 WHERE ((rep.employee_id IS NOT NULL) AND (rep.sales_force_id = ANY (ARRAY['TM'::varchar(2), 'MA'::varchar(2), 'TE'::varchar(2), 'TS'::varchar(2), 'TR'::varchar(2), 'TO'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2), 'CG'::varchar(2), 'CA'::varchar(2), 'CM'::varchar(2), 'CS'::varchar(2)])) AND (rep.fleet_eligible = 'Y'::varchar(1)))
 ORDER BY substr(rep.territory_number, 1, 2),
          rep.last_name,
          rep.first_name;

CREATE  VIEW outbound.zs_xpd_demographics_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.ims_id,
        rx.tvcmid,
        rx.last_name,
        rx.first_name,
        rx.middle_name,
        rx.address_1,
        rx.address_2,
        rx.city,
        rx.state,
        rx.zip,
        pcd.specialty,
        xref.specialty_group,
        rx.trx_decile_retail,
        rx.nrx_decile_retail,
        rx.nbrx_decile_retail,
        rx.trx_decile_mail,
        rx.nrx_decile_mail,
        rx.nbrx_decile_mail,
        rx.market_prescriber_reliability_retail,
        rx.market_prescriber_reliability_mail,
        rx.report_frequency
 FROM ((datamart.xpd_demographics_respiratory rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TR'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.ims_id,
          rx.tvcmid,
          rx.last_name,
          rx.first_name,
          rx.middle_name,
          rx.address_1,
          rx.address_2,
          rx.city,
          rx.state,
          rx.zip,
          pcd.specialty,
          xref.specialty_group,
          rx.trx_decile_retail,
          rx.nrx_decile_retail,
          rx.nbrx_decile_retail,
          rx.trx_decile_mail,
          rx.nrx_decile_mail,
          rx.nbrx_decile_mail,
          rx.market_prescriber_reliability_retail,
          rx.market_prescriber_reliability_mail,
          rx.report_frequency;

CREATE  VIEW outbound.zs_xpd_core_metrics_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.channel_indicator,
        rx.ims_id,
        rx.tvcmid,
        pcd.specialty,
        xref.specialty_group,
        rx.ims_product_group,
        rx.basket_id,
        rx.basket_name,
        rx.rollup_period,
        rx.xpo_nrx,
        rx.xpo_trx,
        rx.unknown_nrx,
        rx.unknown_trx,
        rx.new_therapy_starts,
        rx.continued_new,
        rx.switch_to,
        rx.add_on,
        rx.restart_same_new,
        rx.restart_different,
        rx.continued_refill,
        rx.restart_same_refill,
        rx.switch_from,
        rx.restart_different_from,
        rx.add_to,
        rx.market_new_to_brand_rx,
        rx.dynamic_capture_rx,
        rx.report_frequency
 FROM ((datamart.xpd_core_metrics_respiratory rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TR'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.channel_indicator,
          rx.ims_id,
          rx.tvcmid,
          pcd.specialty,
          xref.specialty_group,
          rx.ims_product_group,
          rx.basket_id,
          rx.basket_name,
          rx.rollup_period,
          rx.xpo_nrx,
          rx.xpo_trx,
          rx.unknown_nrx,
          rx.unknown_trx,
          rx.new_therapy_starts,
          rx.continued_new,
          rx.switch_to,
          rx.add_on,
          rx.restart_same_new,
          rx.restart_different,
          rx.continued_refill,
          rx.restart_same_refill,
          rx.switch_from,
          rx.restart_different_from,
          rx.add_to,
          rx.market_new_to_brand_rx,
          rx.dynamic_capture_rx,
          rx.report_frequency;

CREATE  VIEW outbound.zs_xpd_switch_details_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.channel_indicator,
        rx.ims_id,
        rx.tvcmid,
        pcd.specialty,
        xref.specialty_group,
        rx.switch_from_product_group_num,
        rx.switch_from_basket_id,
        rx.switch_from_basket_name,
        rx.switch_to_product_group_num,
        rx.switch_to_basket_id,
        rx.switch_to_basket_name,
        rx.rollup_period,
        rx.rx,
        rx.report_frequency
 FROM ((datamart.xpd_switch_details_respiratory rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TR'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.channel_indicator,
          rx.ims_id,
          rx.tvcmid,
          pcd.specialty,
          xref.specialty_group,
          rx.switch_from_product_group_num,
          rx.switch_from_basket_id,
          rx.switch_from_basket_name,
          rx.switch_to_product_group_num,
          rx.switch_to_basket_id,
          rx.switch_to_basket_name,
          rx.rollup_period,
          rx.rx,
          rx.report_frequency;

CREATE  VIEW outbound.zs_xpd_restart_diff_details_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.channel_indicator,
        rx.ims_id,
        rx.tvcmid,
        pcd.specialty,
        xref.specialty_group,
        rx.restart_from_product_group_num,
        rx.restart_from_basket_id,
        rx.restart_from_basket_name,
        rx.restart_to_product_group_num,
        rx.restart_to_basket_id,
        rx.restart_to_basket_name,
        rx.rollup_period,
        rx.restart_diff_rx,
        rx.report_frequency
 FROM ((datamart.xpd_restart_diff_details rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TR'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.channel_indicator,
          rx.ims_id,
          rx.tvcmid,
          pcd.specialty,
          xref.specialty_group,
          rx.restart_from_product_group_num,
          rx.restart_from_basket_id,
          rx.restart_from_basket_name,
          rx.restart_to_product_group_num,
          rx.restart_to_basket_id,
          rx.restart_to_basket_name,
          rx.rollup_period,
          rx.restart_diff_rx,
          rx.report_frequency;

CREATE  VIEW outbound.zs_cmop_monthly AS
 SELECT cmop_rx.data_month,
        cmop_rx.comp_month,
        cmop_rx.pharmacy,
        cmop_rx.visn,
        cmop_rx.station_number,
        cmop_rx.station,
        cmop_rx.va_product,
        cmop_rx.basket_id,
        cmop_rx.basket_name,
        cmop_rx.cmop_rxs_raw,
        cmop_rx.cmop_rxs_normalized,
        cmop_rx.total_quantity,
        cmop_rx.cmop_quantity,
        cmop_rx.rxs_30_days,
        cmop_rx.zip,
        cmop_rx.id,
        cmop_rx.rollup_flag,
        cmop_rx.basket_type,
        cmop_rx.total_rxs_normalized
 FROM datamart.cmop_rx
 WHERE (cmop_rx.comp_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5)))
 GROUP BY cmop_rx.data_month,
          cmop_rx.comp_month,
          cmop_rx.pharmacy,
          cmop_rx.visn,
          cmop_rx.station_number,
          cmop_rx.station,
          cmop_rx.va_product,
          cmop_rx.basket_id,
          cmop_rx.basket_name,
          cmop_rx.cmop_rxs_raw,
          cmop_rx.cmop_rxs_normalized,
          cmop_rx.total_quantity,
          cmop_rx.cmop_quantity,
          cmop_rx.rxs_30_days,
          cmop_rx.zip,
          cmop_rx.id,
          cmop_rx.rollup_flag,
          cmop_rx.basket_type,
          cmop_rx.total_rxs_normalized;

CREATE  VIEW outbound.knipper_roster AS
 SELECT roster.rep_type AS Title,
        roster.territory_number AS "Territory ID",
        roster.first_name AS "First Name",
        roster.last_name AS "Last Name",
        NULL AS "Cell Number",
        NULL AS "Home Number",
        NULL AS "Home Address",
        NULL AS "Home Address 2",
        NULL AS "Home City",
        NULL AS "Home State",
        NULL AS "Home Zip",
        roster.business_address_line1 AS "Mailing Address",
        roster.business_address_line2 AS "Mailing Address 2",
        roster.business_city AS "Mailing City",
        roster.business_state AS "Mailing State",
        roster.business_zip AS "Mailing Zip",
        roster.email AS Email,
        roster.employee_id AS "Employee#",
        roster.hire_date AS "Start Date",
        NULL AS "Personal Email",
        CASE WHEN (roster.hr_status = 'LOA'::varchar(3)) THEN 'Y'::varchar(1) WHEN (roster.hr_status = 'Active'::varchar(6)) THEN 'N'::varchar(1) ELSE roster.hr_status END AS "On LOA"
 FROM datamart.roster
 WHERE ((roster.hr_status IS NOT NULL) AND (roster.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2)])));

CREATE  VIEW outbound.knipper_zip_terr AS
 SELECT current_alignment.zip_code AS Zip,
        current_alignment.city AS City,
        current_alignment.state_code AS State,
        current_alignment.territory_number AS "Territory ID",
        current_alignment.territory_name AS "Territory Name",
        current_alignment.region_number AS "Regional ID",
        current_alignment.region_name AS "Region Name",
        current_alignment.area_number AS "Area ID",
        current_alignment.area_name AS "Area Name"
 FROM datamart.current_alignment
 WHERE (current_alignment.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2)]))
 GROUP BY current_alignment.zip_code,
          current_alignment.city,
          current_alignment.state_code,
          current_alignment.territory_number,
          current_alignment.territory_name,
          current_alignment.region_number,
          current_alignment.region_name,
          current_alignment.area_number,
          current_alignment.area_name;

CREATE  VIEW outbound.zs_tvcmid_xref_monthly AS
 SELECT xref.tvcmid,
        xref.id_num,
        xref.id_type,
        xref.state,
        xref.file_id,
        xref.record_id,
        xref.status
 FROM (datamart.tvcmid_xref xref JOIN datamart.customer_hco_demographics hco ON ((hco.tvcmid = xref.tvcmid)))
 WHERE (xref.file_id IN ( SELECT data_file_metadata.file_id
 FROM metadata.data_file_metadata
 WHERE (data_file_metadata.raw_table ~~* '%mdm_alternate_id%'::varchar(18))))
 GROUP BY xref.tvcmid,
          xref.id_num,
          xref.id_type,
          xref.state,
          xref.file_id,
          xref.record_id,
          xref.status;

CREATE  VIEW outbound.zs_revo_hco_demographics_monthly AS
 SELECT hco.tvcmid,
        hco.ims_org_id,
        hco.npi,
        hco.hin,
        hco.outlet_code,
        hco.business_name,
        hco.address_line1,
        hco.address_line2,
        hco.city,
        hco.state_code,
        hco.zip,
        hco.cot_classification,
        hco.cot_facility_type,
        hco.cot_specialty,
        mc.communication_value AS phone,
        xref.id_num AS dea,
        mdm.status_indicator_name AS hco_status,
        mdm.updated_date
 FROM (((datamart.customer_hco_demographics hco LEFT  JOIN mdm.communication mc ON (((hco.tvcmid = mc.tvcmid) AND (hco.address_id = mc.address_id) AND (mc.communication_type_name = 'PHONE'::varchar(5))))) LEFT  JOIN datamart.tvcmid_xref xref ON (((hco.tvcmid = xref.tvcmid) AND (xref.id_type = 'DEA_NUM'::varchar(7)) AND (xref.status <> 'I'::varchar(1))))) LEFT  JOIN mdm.hco mdm ON ((hco.tvcmid = mdm.tvcmid)))
 GROUP BY hco.tvcmid,
          hco.ims_org_id,
          hco.npi,
          hco.hin,
          hco.outlet_code,
          hco.business_name,
          hco.address_line1,
          hco.address_line2,
          hco.city,
          hco.state_code,
          hco.zip,
          hco.cot_classification,
          hco.cot_facility_type,
          hco.cot_specialty,
          mc.communication_value,
          xref.id_num,
          mdm.status_indicator_name,
          mdm.updated_date;

CREATE  VIEW outbound.zs_xpo_xpopt_AM_product_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.rollup_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (prescriber_rx.market_name = 'ANTI-MIGRAINE MARKET'::varchar(20)) AND (prescriber_rx.basket_type = 'product'::varchar(7)));

CREATE  VIEW outbound.zs_xpo_xpopt_SABA_LABA_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = ANY (ARRAY['SABA MARKET TOTAL'::varchar(17), 'LABA MARKET TOTAL'::varchar(17)])))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.sales_category,
          prescriber_rx.market_name,
          prescriber_rx.basket_id,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.model,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.indication,
          prescriber_rx.data_date,
          prescriber_rx.date,
          prescriber_rx.rollup_flag,
          prescriber_rx.rollup_week,
          prescriber_rx.rollup_month,
          prescriber_rx.report_frequency,
          prescriber_rx.plan_name,
          prescriber_rx.payer_name,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count;

CREATE  VIEW outbound.v_ob_ahm_employee_assignments AS
 SELECT r.employee_id AS EmployeeId,
        r.territory_number AS OrganizationUnitId,
        'Primary'::varchar(7) AS AssignmentPosition,
        CASE WHEN (r.sales_force_id = 'TE'::varchar(2)) THEN 'TPS'::varchar(3) ELSE r.sales_force_id END AS ProductCatalogId,
        coalesce(th.start_date, NULL::date) AS EffectiveDate,
        CASE WHEN (th.end_date = '2099-12-31'::date) THEN '2040-12-31'::date ELSE coalesce(th.end_date, NULL::date) END AS EndDate,
        CASE WHEN (th.end_date = '2099-12-31'::date) THEN 'Active'::varchar(6) ELSE 'Inactive'::varchar(8) END AS Status
 FROM (datamart.roster r LEFT  JOIN datamart.territory_history th ON (((r.employee_id = th.employee_id) AND (th.source_id IS NOT NULL))))
 WHERE ((r.employee_id IS NOT NULL) AND (r.rep_type <> 'VP'::varchar(2)) AND (r.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)])) AND ((th.end_date = '2099-12-31'::date) OR (th.end_date IS NULL)))
 GROUP BY r.employee_id,
          r.territory_number,
          'Primary'::varchar(7),
          CASE WHEN (r.sales_force_id = 'TE'::varchar(2)) THEN 'TPS'::varchar(3) ELSE r.sales_force_id END,
          coalesce(th.start_date, NULL::date),
          CASE WHEN (th.end_date = '2099-12-31'::date) THEN '2040-12-31'::date ELSE coalesce(th.end_date, NULL::date) END,
          CASE WHEN (th.end_date = '2099-12-31'::date) THEN 'Active'::varchar(6) ELSE 'Inactive'::varchar(8) END UNION  SELECT r.employee_id AS EmployeeId,
        r.territory_number AS OrganizationUnitId,
        'Primary'::varchar(7) AS AssignmentPosition,
        CASE WHEN (r.sales_force_id = 'TE'::varchar(2)) THEN 'TPS'::varchar(3) ELSE r.sales_force_id END AS ProductCatalogId,
        coalesce(th.start_date, NULL::date) AS EffectiveDate,
        CASE WHEN (th.end_date = '2099-12-31'::date) THEN '2040-12-31'::date ELSE coalesce(th.end_date, NULL::date) END AS EndDate,
        CASE WHEN (th.end_date = '2099-12-31'::date) THEN 'Active'::varchar(6) ELSE 'Inactive'::varchar(8) END AS Status
 FROM (datamart.roster r LEFT  JOIN datamart.territory_history th ON (((r.employee_id = th.employee_id) AND (th.source_id IS NOT NULL))))
 WHERE ((r.territory_number = 'TRZZZZ00'::varchar(8)) AND ((th.end_date = '2099-12-31'::date) OR (th.end_date IS NULL)))
 GROUP BY r.employee_id,
          r.territory_number,
          'Primary'::varchar(7),
          CASE WHEN (r.sales_force_id = 'TE'::varchar(2)) THEN 'TPS'::varchar(3) ELSE r.sales_force_id END,
          coalesce(th.start_date, NULL::date),
          CASE WHEN (th.end_date = '2099-12-31'::date) THEN '2040-12-31'::date ELSE coalesce(th.end_date, NULL::date) END,
          CASE WHEN (th.end_date = '2099-12-31'::date) THEN 'Active'::varchar(6) ELSE 'Inactive'::varchar(8) END;

CREATE  VIEW outbound.vacant_terr_targets AS
 SELECT d.first_name,
        d.middle_name,
        d.last_name,
        d.tvcmid,
        d.npi,
        x.fed_id,
        d.ptr_territory_num AS territory_number,
        d.sales_force_id
 FROM (((datamart.prescriber_combined_demographics d LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        max(tvcmid_xref.id_num) AS fed_id
 FROM datamart.tvcmid_xref
 WHERE ((tvcmid_xref.id_type = 'FED_ID'::varchar(6)) AND (tvcmid_xref.status = 'A'::varchar(1)))
 GROUP BY tvcmid_xref.tvcmid) x ON ((d.tvcmid = x.tvcmid))) JOIN datamart.call_plan cp ON (((d.tvcmid = cp.tvcmid) AND (d.ptr_territory_num = cp.territory_number) AND (cp.basket_name = ANY (ARRAY['AJOVY'::varchar(7), 'AUSTEDO'::varchar(7)]))))) JOIN ( SELECT r.territory_number,
        coalesce("datediff"('day'::varchar(3), c.last_call_date, (now())::date), 999) AS days_since_last_call
 FROM (datamart.roster r LEFT  JOIN ( SELECT sfa_call.territory_number,
        max(sfa_call.call_date) AS last_call_date
 FROM datamart.sfa_call
 WHERE (sfa_call.sales_force_id = ANY (ARRAY['TP'::varchar(2), 'TN'::varchar(2)]))
 GROUP BY sfa_call.territory_number) c ON ((r.territory_number = c.territory_number)))
 WHERE ((r.sales_force_id = ANY (ARRAY['TP'::varchar(2), 'TN'::varchar(2)])) AND (r.full_name = 'Vacant'::varchar(6)) AND (r.rep_type = 'REP'::varchar(3)))) v ON (((d.ptr_territory_num = v.territory_number) AND (v.days_since_last_call >= 30))));

CREATE  VIEW outbound.territory_bag_product AS
 SELECT i_bag_territory_product.territory_number AS territory_num,
        i_bag_territory_product.bag_name,
        i_bag_territory_product."position",
        i_bag_territory_product.basket_name AS product_name
 FROM outbound.i_bag_territory_product
 WHERE (i_bag_territory_product.bag_name !~~ '%MGR'::varchar(4))
 ORDER BY i_bag_territory_product.territory_number,
          i_bag_territory_product."position";

CREATE  VIEW outbound.fourth_down_roster AS
 SELECT CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN ('VACANT'::varchar(6) || t.geography_number) ELSE rep.employee_id END AS TevaID,
        coalesce(t.geography_number, rep.territory_number) AS Terr_id,
        coalesce(t.geography_name, rep.territory_name) AS TerritoryName,
        CASE WHEN (rep.rep_type = 'REP'::varchar(3)) THEN 'Territory'::varchar(9) WHEN (rep.rep_type = 'MSL'::varchar(3)) THEN 'Territory'::varchar(9) WHEN (rep.rep_type = 'CNE'::varchar(3)) THEN 'Territory'::varchar(9) WHEN (rep.rep_type = 'MGR'::varchar(3)) THEN 'Region'::varchar(6) WHEN (rep.rep_type = 'DIR'::varchar(3)) THEN 'Area'::varchar(4) WHEN (rep.rep_type = 'VP'::varchar(2)) THEN 'National'::varchar(8) ELSE NULL END AS TerritoryType,
        coalesce(t.sales_force_id, rep.sales_force_id) AS SalesForceID,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN 'VACANT'::varchar(6) ELSE rep.first_name END AS FirstName,
        rep.middle_name AS MiddleName,
        rep.preferred_name AS PreferredName,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN t.geography_number ELSE rep.last_name END AS LastName,
        ''::varchar AS Title,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN 'OPEN'::varchar(4) ELSE rep.hr_status END AS RepStatus,
        CASE WHEN (upper(rep.reg_contract) = 'EX'::varchar(2)) THEN 'Contract'::varchar(8) ELSE upper(coalesce(rep.rep_type, t.employee_type)) END AS RepType,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN ('VACANT'::varchar(6) || t.geography_number) ELSE rep.username END AS LogonID,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN (t.geography_number || '@tevapharm.com'::varchar(14)) ELSE rep.email END AS Email,
        mgr.employee_id AS ManagerID,
        coalesce(CASE WHEN (rep.sample_eligibility_flag = ''::varchar) THEN NULL ELSE rep.sample_eligibility_flag END, 'N'::varchar(1)) AS SampleAuthorization,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN 'OPEN TERR'::varchar(9) ELSE rep.team END AS CompanyName,
        rep.sales_force_id AS CompanyAbbr,
        ''::varchar AS CompanyID,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN 'OPEN TERR'::varchar(9) ELSE rep.business_unit_name END AS Department,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN 'OPEN TERR'::varchar(9) ELSE rep.business_unit_name END AS Division,
        rep.business_address_line1 AS BusinessAddress1,
        rep.business_address_line2 AS BusinessAddress2,
        ''::varchar AS BusinessAddress3,
        rep.business_city AS BusinessAddressCity,
        rep.business_state AS BusinessAddressState,
        rep.business_zip AS BusinessZip,
        rep.business_country AS BusinessAddressCtry,
        'Active'::varchar(6) AS BusinessAddressStatus,
        rep.shipping_address_line1 AS ShippingAddress1,
        rep.shipping_address_line2 AS ShippingAddress2,
        ''::varchar AS ShippingAddress3,
        rep.shipping_city AS ShippingAddressCity,
        rep.shipping_state AS ShippingAddressState,
        rep.shipping_zip AS ShippingZip,
        rep.shipping_country AS "  ShippingAddressCtry",
        'Active'::varchar(6) AS ShippingAddressStatus,
        rep.samplestorage_address_line1 AS SampleStorageAddress1,
        rep.samplestorage_address_line2 AS SampleStorageAddress2,
        rep.samplestorage_address_line3 AS SampleStorageAddress3,
        rep.samplestorage_city AS SampleStorageAddressCity,
        rep.samplestorage_state AS SampleStorageAddressState,
        rep.samplestorage_zip AS SampleStorageAddressZip,
        rep.samplestorage_country AS SampleStorageAddressCtry,
        'Active'::varchar(6) AS SampleStorageAddressStatus,
        rep.samplestorage_address_line1 AS SampleShippingAddress1,
        rep.samplestorage_address_line2 AS SampleShippingAddress2,
        rep.samplestorage_address_line3 AS SampleShippingAddress3,
        rep.samplestorage_city AS SampleShippingAddressCity,
        rep.samplestorage_state AS SampleShippingAddressState,
        rep.samplestorage_zip AS SampleShippingAddressZip,
        rep.samplestorage_country AS SampleShippingAddressCtry,
        'Active'::varchar(6) AS SampleShippingAddressStatus,
        rep.business_phone AS BusinessPhone,
        rep.fax AS FaxPhone,
        rep.mobile_phone AS VoiceMailPhone,
        rep.voice_mail_extension AS VoiceMailExt,
        rep.hire_date AS HireDate,
        ''::varchar AS BirthDate,
        ''::varchar AS TerminationDate,
        coalesce(P1.basket_name, ''::varchar) AS Prod1,
        coalesce(P2.basket_name, ''::varchar) AS Prod2,
        coalesce(P3.basket_name, ''::varchar) AS Prod3,
        coalesce(P4.basket_name, ''::varchar) AS Prod4,
        coalesce(P5.basket_name, ''::varchar) AS Prod5,
        coalesce(P6.basket_name, ''::varchar) AS Prod6,
        ''::varchar AS Prod7,
        ''::varchar AS Prod8,
        ''::varchar AS Prod9,
        ''::varchar AS Prod10,
        ''::varchar AS Prod11,
        ''::varchar AS Prod12,
        ''::varchar AS Prod13,
        ''::varchar AS Prod14,
        ''::varchar AS Prod15,
        ''::varchar AS Prod16,
        ''::varchar AS Prod17,
        ''::varchar AS Prod18,
        ''::varchar AS Prod19,
        ''::varchar AS Prod20,
        ''::varchar AS Prod21,
        ''::varchar AS Prod22,
        ''::varchar AS Prod23,
        ''::varchar AS Prod24,
        ''::varchar AS Prod25,
        ''::varchar AS Prod26,
        ''::varchar AS Prod27,
        ''::varchar AS Prod28,
        ''::varchar AS Prod29,
        ''::varchar AS Prod30,
        CASE WHEN (CFT.Teva_ID IS NOT NULL) THEN 'CFT'::varchar(3) ELSE ''::varchar END AS Role1,
        CASE WHEN (CFT.Teva_ID IS NOT NULL) THEN '2'::varchar(1) ELSE ''::varchar END AS Role2,
        ''::varchar AS Role3,
        ''::varchar AS Role4,
        ''::varchar AS Role5,
        ''::varchar AS Role6,
        ''::varchar AS Role7,
        ''::varchar AS Role8,
        ''::varchar AS Role9,
        ''::varchar AS Role10,
        ''::varchar AS Role11,
        ''::varchar AS Role12,
        ''::varchar AS Role13,
        ''::varchar AS Role14,
        ''::varchar AS Role15,
        ''::varchar AS Role16,
        ''::varchar AS Role17,
        ''::varchar AS Role18,
        ''::varchar AS Role19,
        ''::varchar AS Role20,
        ''::varchar AS Attrib1,
        ''::varchar AS Attrib2,
        ''::varchar AS Attrib3,
        ''::varchar AS Attrib4,
        ''::varchar AS Attrib5,
        ''::varchar AS Attrib6,
        ''::varchar AS Attrib7,
        ''::varchar AS Attrib8,
        ''::varchar AS Attrib9,
        ''::varchar AS Attrib10
 FROM (((((((((datamart.sales_geography t FULL  JOIN datamart.roster rep ON ((t.geography_number = rep.territory_number))) LEFT  JOIN datamart.roster mgr ON ((mgr.global_employee_id = rep.supervisor_global_employee_id))) LEFT  JOIN outbound.i_bag_territory_product P1 ON (((coalesce(t.geography_number, rep.territory_number) = P1.territory_number) AND (P1.bag_name IS NOT NULL) AND (P1."position" = 1::float)))) LEFT  JOIN outbound.i_bag_territory_product P2 ON (((coalesce(t.geography_number, rep.territory_number) = P2.territory_number) AND (P2.bag_name IS NOT NULL) AND (P2."position" = 2::float)))) LEFT  JOIN outbound.i_bag_territory_product P3 ON (((coalesce(t.geography_number, rep.territory_number) = P3.territory_number) AND (P3.bag_name IS NOT NULL) AND (P3."position" = 2::float)))) LEFT  JOIN outbound.i_bag_territory_product P4 ON (((coalesce(t.geography_number, rep.territory_number) = P4.territory_number) AND (P4.bag_name IS NOT NULL) AND (P4."position" = 4::float)))) LEFT  JOIN outbound.i_bag_territory_product P5 ON (((coalesce(t.geography_number, rep.territory_number) = P5.territory_number) AND (P4.bag_name IS NOT NULL) AND (P4."position" = 5::float)))) LEFT  JOIN outbound.i_bag_territory_product P6 ON (((coalesce(t.geography_number, rep.territory_number) = P6.territory_number) AND (P6.bag_name IS NOT NULL) AND (P6."position" = 6::float)))) LEFT  JOIN reference.CERTIFIED_FIELD_TRAINER_XREF CFT ON ((rep.employee_id = CFT.Teva_ID)))
 WHERE (rep.sales_force_id = ANY (ARRAY['MA'::varchar(2), 'TE'::varchar(2), 'TM'::varchar(2), 'TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'CG'::varchar(2), 'CM'::varchar(2), 'CS'::varchar(2), 'TX'::varchar(2), 'TZ'::varchar(2)]));

CREATE  VIEW outbound.Syneos_copay AS
 SELECT demo.ptr_territory_num,
        cw.redemption_type,
        cw.physician_tvcmid,
        cw.pharmacy_tvcmid,
        cw.basket_id,
        cw.basket_name,
        cw.asi_txn_id,
        cw.orig_asi_txn_id,
        cw.rx_num,
        cw.fill_date,
        cw.date_written,
        cw.days_supply,
        cw.ndc_code,
        cw.daw,
        cw.new_refill,
        cw.quantity,
        cw.refills,
        cw.other_coverage_code,
        cw.program_number,
        cw.copay_card_number,
        cw.sex,
        cw.age_at_redemption,
        cw.pharmacy_process_date,
        cw.nabp,
        cw.pharmacy_chain_number,
        cw.pharmacy_chain,
        cw.pharmacy_name,
        cw.pharmacy_address,
        cw.pharmacy_address2,
        cw.pharmacy_city,
        cw.pharmacy_state,
        cw.pharmacy_zip,
        cw.pharmacy_phone,
        cw.pharmacy_npi_num,
        cw.principle_physician_dea,
        cw.physician_npi,
        cw.physician_ims_id,
        cw.physician_veeva_id,
        cw.physician_name,
        cw.physician_address1,
        cw.physician_address2,
        cw.physician_city,
        cw.physician_state,
        cw.physician_zip,
        cw.rebate_amount,
        cw.member_cash_expense,
        cw.submitted_cost,
        cw.pharmacy_fee,
        cw.total_amount_due,
        cw.calc_awp,
        cw.occ_payment_type,
        cw.auth_refills,
        cw.claim_type,
        cw.administration_flag,
        cw.payer_name,
        cw.trans_type,
        cw.previous_payer_id,
        cw.benefit_amount,
        cw.patient_expense,
        cw.submission_method,
        cw.source_name,
        cw.patient_type,
        cw.primary_bin,
        cw.primary_bin_description,
        cw.reject_code
 FROM outbound.zs_copay_weekly cw, datamart.prescriber_combined_demo_frozen demo, datamart.current_alignment ca
 WHERE ((ca.zip_code = coalesce(cw.physician_zip, cw.pharmacy_zip)) AND (demo.ptr_zip = ca.zip_code) AND (demo.sales_force_id = ca.sales_force_id) AND (demo.ptr_territory_num IN ( SELECT roster.territory_number
 FROM datamart.roster
 WHERE (((roster.employee_id ~~* '%CWKU%'::varchar(6)) OR (roster.employee_id = ANY (ARRAY['A061823'::varchar(7), 'A805771'::varchar(7)])) OR (roster.employee_id = ANY (ARRAY['061823'::varchar(6), '805771'::varchar(6)]))) AND (roster.sales_force_id = 'TR'::varchar(2))))) AND (cw.basket_name ~~* '%digihaler%'::varchar(11)) AND (cw.fill_date > '2019-12-31'::date))
 GROUP BY demo.ptr_territory_num,
          cw.redemption_type,
          cw.physician_tvcmid,
          cw.pharmacy_tvcmid,
          cw.basket_id,
          cw.basket_name,
          cw.asi_txn_id,
          cw.orig_asi_txn_id,
          cw.rx_num,
          cw.fill_date,
          cw.date_written,
          cw.days_supply,
          cw.ndc_code,
          cw.daw,
          cw.new_refill,
          cw.quantity,
          cw.refills,
          cw.other_coverage_code,
          cw.program_number,
          cw.copay_card_number,
          cw.sex,
          cw.age_at_redemption,
          cw.pharmacy_process_date,
          cw.nabp,
          cw.pharmacy_chain_number,
          cw.pharmacy_chain,
          cw.pharmacy_name,
          cw.pharmacy_address,
          cw.pharmacy_address2,
          cw.pharmacy_city,
          cw.pharmacy_state,
          cw.pharmacy_zip,
          cw.pharmacy_phone,
          cw.pharmacy_npi_num,
          cw.principle_physician_dea,
          cw.physician_npi,
          cw.physician_ims_id,
          cw.physician_veeva_id,
          cw.physician_name,
          cw.physician_address1,
          cw.physician_address2,
          cw.physician_city,
          cw.physician_state,
          cw.physician_zip,
          cw.rebate_amount,
          cw.member_cash_expense,
          cw.submitted_cost,
          cw.pharmacy_fee,
          cw.total_amount_due,
          cw.calc_awp,
          cw.occ_payment_type,
          cw.auth_refills,
          cw.claim_type,
          cw.administration_flag,
          cw.payer_name,
          cw.trans_type,
          cw.previous_payer_id,
          cw.benefit_amount,
          cw.patient_expense,
          cw.submission_method,
          cw.source_name,
          cw.patient_type,
          cw.primary_bin,
          cw.primary_bin_description,
          cw.reject_code;

CREATE  VIEW outbound.i_bag_product_metrics AS
 SELECT i_bag_territory_product.territory_number,
        i_bag_territory_product.bag_name,
        i_bag_territory_product."position",
        i_bag_territory_product.basket_name,
        'Y'::varchar(1) AS detailable
 FROM outbound.i_bag_territory_product
 WHERE (i_bag_territory_product.bag_name IS NOT NULL) UNION ALL  SELECT terrs.territory_number,
        NULL AS bag_name,
        (90 + row_number() OVER (PARTITION BY terrs.territory_number ORDER BY sfpm.PRODUCT_NAME)) AS "position",
        sfpm.PRODUCT_NAME AS product_name,
        'N'::varchar(1) AS detailable
 FROM (reference.sales_force_product_metrics sfpm JOIN ( SELECT i_bag_territory_product.territory_number
 FROM outbound.i_bag_territory_product
 GROUP BY i_bag_territory_product.territory_number) terrs ON ((terrs.territory_number ~~ (sfpm.SALES_FORCE_ID || '%'::varchar(1)))));

CREATE  VIEW outbound.zs_austedo_activity_demographics AS
 SELECT d.sales_force_id,
        d.ptr_territory_num AS territory_number,
        d.tvcmid,
        d.ims_id,
        d.specialty,
        d.last_name,
        d.first_name,
        d.middle_name,
        d.ptr_address_1 AS address_1,
        d.ptr_address_2 AS address_2,
        d.ptr_address_3 AS address_3,
        d.ptr_city AS city,
        d.ptr_state AS state,
        d.ptr_zip AS zip,
        d.pdrp_flag,
        d.ptr_address_source AS address_source,
        CASE WHEN (dnp.tvcmid IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS dnp_flag,
        x.hce_status_desc AS cm_status_flag
 FROM ((((((( SELECT zs_austedo_activity_call_detail.tvcmid
 FROM outbound.zs_austedo_activity_call_detail UNION  SELECT zs_austedo_activity_copay.physician_tvcmid
 FROM outbound.zs_austedo_activity_copay) UNION  SELECT zs_austedo_activity_sample_request.tvcmid
 FROM outbound.zs_austedo_activity_sample_request) UNION  SELECT zs_austedo_activity_sample_shipment.tvcmid
 FROM outbound.zs_austedo_activity_sample_shipment) UNION  SELECT zs_austedo_activity_ahm_participant.clientcustomerid
 FROM outbound.zs_austedo_activity_ahm_participant) ids JOIN datamart.prescriber_combined_demographics d ON ((d.tvcmid = ids.tvcmid))) LEFT  JOIN ( SELECT customer_level_flags.tvcmid
 FROM datamart.customer_level_flags
 WHERE ((customer_level_flags.flag_type = ANY (ARRAY['OIG'::varchar(6), 'FDA'::varchar(6), 'DEA'::varchar(6), 'PERPRM'::varchar(6)])) AND (customer_level_flags.flag_value = 'Y'::varchar(1)))
 GROUP BY customer_level_flags.tvcmid) dnp ON ((d.tvcmid = dnp.tvcmid))) LEFT  JOIN ( SELECT customer_hcp_demographics.tvcmid,
        customer_hcp_demographics.hce_status_desc
 FROM datamart.customer_hcp_demographics) x ON ((d.tvcmid = x.tvcmid)))
 WHERE (d.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)]))
 ORDER BY d.tvcmid,
          d.ptr_territory_num;

CREATE  VIEW outbound.v_activity AS
(( SELECT activity_speaker_event.federation_id,
        activity_speaker_event.contact,
        activity_speaker_event.source,
        activity_speaker_event."datetime",
        activity_speaker_event.trackback_id,
        activity_speaker_event.previous_activity,
        activity_speaker_event.level_master_id,
        activity_speaker_event.activity_role,
        activity_speaker_event.type,
        activity_speaker_event.native_type,
        activity_speaker_event.details,
        activity_speaker_event.created,
        activity_speaker_event.modified
 FROM outbound.activity_speaker_event UNION ALL  SELECT activity_copay.federation_id,
        activity_copay.contact,
        activity_copay.source,
        activity_copay."datetime",
        activity_copay.trackback_id,
        activity_copay.previous_activity,
        activity_copay.level_master_id,
        activity_copay.activity_role,
        activity_copay.type,
        activity_copay.native_type,
        activity_copay.details,
        activity_copay.created,
        activity_copay.modified
 FROM outbound.activity_copay) UNION ALL  SELECT activity_npp_sample_orders.federation_id,
        activity_npp_sample_orders.contact,
        activity_npp_sample_orders.source,
        activity_npp_sample_orders."datetime",
        activity_npp_sample_orders.trackback_id,
        activity_npp_sample_orders.previous_activity,
        activity_npp_sample_orders.level_master_id,
        activity_npp_sample_orders.activity_role,
        activity_npp_sample_orders.type,
        activity_npp_sample_orders.native_type,
        activity_npp_sample_orders.details,
        activity_npp_sample_orders.created,
        activity_npp_sample_orders.modified
 FROM outbound.activity_npp_sample_orders) UNION ALL  SELECT activity_centris_speaker_event.federation_id,
        activity_centris_speaker_event.contact,
        activity_centris_speaker_event.source,
        activity_centris_speaker_event."datetime",
        activity_centris_speaker_event.trackback_id,
        activity_centris_speaker_event.previous_activity,
        activity_centris_speaker_event.level_master_id,
        activity_centris_speaker_event.activity_role,
        activity_centris_speaker_event.type,
        activity_centris_speaker_event.native_type,
        activity_centris_speaker_event.details,
        activity_centris_speaker_event.created,
        activity_centris_speaker_event.modified
 FROM outbound.activity_centris_speaker_event;

CREATE  VIEW outbound.aptus_roster_ajovy AS
 SELECT r.territory_number AS unique_individual_id,
        NULL AS name_prefix,
        r.first_name,
        r.middle_name,
        r.last_name,
        NULL AS name_suffix,
        NULL AS address_line1,
        NULL AS address_line2,
        NULL AS city,
        NULL AS state,
        NULL AS zip,
        NULL AS country,
        NULL AS phone_number,
        NULL AS phone_extension,
        NULL AS fax_number,
        NULL AS voice_mail_number,
        r.email,
        r.territory_number,
        CASE WHEN (h.territory_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || h.territory_name) || '"'::varchar(1)) ELSE h.territory_name END AS territory_name,
        h.region_number,
        CASE WHEN (h.region_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || h.region_name) || '"'::varchar(1)) ELSE h.region_name END AS region_name,
        h.area_number,
        CASE WHEN (h.area_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || h.area_name) || '"'::varchar(1)) ELSE h.area_name END AS area_name,
        CASE WHEN (r.rep_type = 'RM'::varchar(2)) THEN 1 ELSE 0 END AS dm_flag,
        CASE WHEN (r.rep_type = 'AD'::varchar(2)) THEN 1 ELSE 0 END AS rm_flag,
        r.rep_type
 FROM (datamart.roster r LEFT  JOIN datamart.territory_region_area_hierarchy h ON ((r.territory_number = h.territory_number)))
 WHERE ((r.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TR'::varchar(2)])) AND (r.rep_type = 'REP'::varchar(3)))
 ORDER BY r.territory_number;

CREATE  VIEW outbound.asrs_count AS
 SELECT event.event_count,
        fact.fact_count,
        attendee.attendee_count,
        product.product_count,
        amount.total_expense_amount,
        total_attendee_count.total_attendee_count
 FROM ( SELECT count(*) AS event_count
 FROM outbound.asrs_event) event, ( SELECT count(*) AS fact_count
 FROM outbound.asrs_fact) fact, ( SELECT count(*) AS attendee_count
 FROM outbound.asrs_attendee) attendee, ( SELECT count(*) AS product_count
 FROM outbound.asrs_product) product, ( SELECT sum(asrs_fact.total_expense_amount) AS total_expense_amount
 FROM outbound.asrs_fact) amount, ( SELECT sum(asrs_event.attendee_count) AS total_attendee_count
 FROM outbound.asrs_event) total_attendee_count;

CREATE  VIEW outbound.connectiverx_ajovy_roster AS
 SELECT r.rep_type,
        r.sales_force_id,
        r.territory_number,
        r.territory_name,
        h.region_number,
        h.region_name,
        h.area_number,
        h.area_name,
        r.employee_id,
        r.full_name AS rep_name,
        r.email AS rep_email,
        r2.full_name AS mgr_name,
        r2.email AS mgr_email,
        r3.full_name AS ad_name,
        r3.email AS ad_email
 FROM (((datamart.roster r LEFT  JOIN datamart.territory_region_area_hierarchy h ON ((r.territory_number = h.territory_number))) LEFT  JOIN datamart.roster r2 ON ((r2.territory_number = h.region_number))) LEFT  JOIN datamart.roster r3 ON ((r3.territory_number = h.area_number)))
 WHERE ((r.rep_type = ANY (ARRAY['REP'::varchar(3), 'CNE'::varchar(3)])) AND (r.sales_force_id = ANY (ARRAY['TE'::varchar(2), 'TN'::varchar(2), 'TR'::varchar(2)])))
 ORDER BY r.territory_number;

CREATE  VIEW outbound.concur_hcp_delta AS
 SELECT (trunc(hcp.tvcmid))::int AS cust_id,
        NULL AS organization_name,
        'HCP'::varchar(3) AS contact_type,
        initcap(hcp.first_name) AS first_name,
        initcap(hcp.middle_name) AS middle_name,
        initcap(hcp.last_name) AS last_name,
        hcp.suffix,
        npi.npi,
        addr.address_line_1,
        addr.address_line_2,
        addr.city,
        addr.state,
        addr.zipcode,
        sln.license_number AS sln,
        sln.state AS sln_state,
        dea.dea_number AS dea,
        NULL AS affiliation,
        CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END AS credential,
        hcp.healthcare_professional_status_code,
        date((statement_timestamp())::timestamp) AS create_date
 FROM (((((( SELECT hcp.TVCMID AS tvcmid,
        hcp.FIRST_NAME AS first_name,
        hcp.MIDDLE_NAME AS middle_name,
        hcp.LAST_NAME AS last_name,
        hcp.SUFFIX AS suffix,
        hcp.HEALTHCARE_PROFESSIONAL_STATUS_CODE AS healthcare_professional_status_code,
        hcp.TEVA_SPECIALTY_CODE AS teva_specialty_code
 FROM (raw.mdm_hcp hcp JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_hcp.file_id
 FROM raw.mdm_hcp
 GROUP BY mdm_hcp.file_id) a) hcp_file ON (((hcp.file_id = hcp_file.file_id) AND (hcp_file.file_rank = 1))))) hcp JOIN ( SELECT ad.TVCMID AS tvcmid,
        ad.ADDRESS_ID AS address_id,
        ad.ADDRESS_STATUS AS address_status,
        ad.ADDRESS_TYPE AS address_type,
        initcap(ad.ADDRESS_LINE_1) AS address_line_1,
        initcap(ad.ADDRESS_LINE_2) AS address_line_2,
        initcap(ad.CITY) AS city,
        ad.STATE AS state,
        ad.ZIP5_POSTAL_CODE AS zipcode,
        rank() OVER (PARTITION BY ad.TVCMID ORDER BY ad.PRACTICE_LOCATION_RANK DESC, ad.record_id) AS addr_rank
 FROM (raw.mdm_address ad JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_address.file_id
 FROM raw.mdm_address
 GROUP BY mdm_address.file_id) a) addr_file ON (((ad.file_id = addr_file.file_id) AND (ad.ADDRESS_STATUS = 'A'::varchar(1)) AND (ad.ADDRESS_TYPE = 2::float) AND (ad.SINGLE_ADDRESS_INDICATOR = 'Y'::varchar(1)) AND (addr_file.file_rank = 1))))) addr ON (((hcp.tvcmid = addr.tvcmid) AND (addr.addr_rank = 1)))) JOIN ( SELECT p.TVCMID AS tvcmid,
        d.profession_code_shortname,
        rank() OVER (PARTITION BY p.TVCMID ORDER BY p.CREATED_DATE DESC) AS rnk
 FROM (raw.mdm_professional p JOIN reference.Designations d ON (((p.PROFESSION_CODE = d.profession_code) AND (p.PROFESSION_RANK = 1::float) AND (p.STATUS = 'A'::varchar(1)))))) prof ON (((hcp.tvcmid = prof.tvcmid) AND (prof.rnk = 1)))) LEFT  JOIN ( SELECT mdm_dea_address.TVCMID AS tvcmid,
        mdm_dea_address.DEA_NUMBER AS dea_number,
        mdm_dea_address.ADDRESS_ID AS address_id,
        rank() OVER (PARTITION BY mdm_dea_address.TVCMID, mdm_dea_address.ADDRESS_ID ORDER BY mdm_dea_address.DEA_EXPIRATION_DATE DESC, mdm_dea_address.UPDATED_DATE DESC, mdm_dea_address.record_id) AS rnk
 FROM raw.mdm_dea_address
 WHERE (mdm_dea_address.DEA_STATUS_CODE = 'A'::varchar(1))) dea ON (((addr.address_id = dea.address_id) AND (addr.tvcmid = dea.tvcmid) AND (dea.rnk = 1)))) LEFT  JOIN ( SELECT npi.tvcmid,
        npi.npi
 FROM (( SELECT mdm_alternate_id.file_id,
        mdm_alternate_id.TVCMID AS tvcmid,
        max(mdm_alternate_id.ALTERNATE_ID_VALUE) AS npi
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id,
          mdm_alternate_id.TVCMID) npi JOIN ( SELECT b.file_id,
        rank() OVER (ORDER BY b.file_id DESC) AS file_rank
 FROM ( SELECT mdm_alternate_id.file_id
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id) b) npi2 ON (((npi.file_id = npi2.file_id) AND (npi2.file_rank = 1))))) npi ON ((hcp.tvcmid = npi.tvcmid))) LEFT  JOIN ( SELECT sln.TVCMID AS tvcmid,
        sln.AUTHORIZATION_NUMBER AS license_number,
        sln.STATE AS state,
        rank() OVER (PARTITION BY sln.TVCMID, sln.STATE ORDER BY sln.LICENSE_TYPE_PRIVILEGE_RANK, sln.LICENSE_EXPIRATION_DATE DESC, sln.LICENSE_EFFECTIVE_DATE DESC, sln.UPDATED_DATE DESC, sln.record_id) AS rnk
 FROM raw.mdm_license sln
 WHERE (sln.LICENSE_STATUS_CODE = 'A'::varchar(1))) sln ON (((hcp.tvcmid = sln.tvcmid) AND (addr.state = sln.state) AND (sln.rnk = 1))))
 GROUP BY (trunc(hcp.tvcmid))::int,
          NULL,
          'HCP'::varchar(3),
          initcap(hcp.first_name),
          initcap(hcp.middle_name),
          initcap(hcp.last_name),
          hcp.suffix,
          npi.npi,
          addr.address_line_1,
          addr.address_line_2,
          addr.city,
          addr.state,
          addr.zipcode,
          sln.license_number,
          sln.state,
          dea.dea_number,
          CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END,
          hcp.healthcare_professional_status_code,
          date((statement_timestamp())::timestamp) EXCEPT  SELECT (trunc(hcp.tvcmid))::int AS cust_id,
        NULL AS organization_name,
        'HCP'::varchar(3) AS contact_type,
        initcap(hcp.first_name) AS first_name,
        initcap(hcp.middle_name) AS middle_name,
        initcap(hcp.last_name) AS last_name,
        hcp.suffix,
        npi.npi,
        addr.address_line_1,
        addr.address_line_2,
        addr.city,
        addr.state,
        addr.zipcode,
        sln.license_number AS sln,
        sln.state AS sln_state,
        dea.dea_number AS dea,
        NULL AS affiliation,
        CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END AS credential,
        hcp.healthcare_professional_status_code,
        date((statement_timestamp())::timestamp) AS create_date
 FROM (((((( SELECT hcp.TVCMID AS tvcmid,
        hcp.FIRST_NAME AS first_name,
        hcp.MIDDLE_NAME AS middle_name,
        hcp.LAST_NAME AS last_name,
        hcp.SUFFIX AS suffix,
        hcp.HEALTHCARE_PROFESSIONAL_STATUS_CODE AS healthcare_professional_status_code,
        hcp.TEVA_SPECIALTY_CODE AS teva_specialty_code
 FROM (raw.mdm_hcp hcp JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_hcp.file_id
 FROM raw.mdm_hcp
 GROUP BY mdm_hcp.file_id) a) hcp_file ON (((hcp.file_id = hcp_file.file_id) AND (hcp_file.file_rank = 2))))) hcp JOIN ( SELECT ad.TVCMID AS tvcmid,
        ad.ADDRESS_ID AS address_id,
        ad.ADDRESS_STATUS AS address_status,
        ad.ADDRESS_TYPE AS address_type,
        initcap(ad.ADDRESS_LINE_1) AS address_line_1,
        initcap(ad.ADDRESS_LINE_2) AS address_line_2,
        initcap(ad.CITY) AS city,
        ad.STATE AS state,
        ad.ZIP5_POSTAL_CODE AS zipcode,
        rank() OVER (PARTITION BY ad.TVCMID ORDER BY ad.PRACTICE_LOCATION_RANK DESC, ad.record_id) AS addr_rank
 FROM (raw.mdm_address ad JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_address.file_id
 FROM raw.mdm_address
 GROUP BY mdm_address.file_id) a) addr_file ON (((ad.file_id = addr_file.file_id) AND (ad.ADDRESS_STATUS = 'A'::varchar(1)) AND (ad.ADDRESS_TYPE = 2::float) AND (ad.SINGLE_ADDRESS_INDICATOR = 'Y'::varchar(1)) AND (addr_file.file_rank = 2))))) addr ON (((hcp.tvcmid = addr.tvcmid) AND (addr.addr_rank = 1)))) JOIN ( SELECT p.TVCMID AS tvcmid,
        d.profession_code_shortname,
        rank() OVER (PARTITION BY p.TVCMID ORDER BY p.CREATED_DATE DESC) AS rnk
 FROM (raw.mdm_professional p JOIN reference.Designations d ON (((p.PROFESSION_CODE = d.profession_code) AND (p.PROFESSION_RANK = 1::float) AND (p.STATUS = 'A'::varchar(1)))))) prof ON (((hcp.tvcmid = prof.tvcmid) AND (prof.rnk = 1)))) LEFT  JOIN ( SELECT mdm_dea_address.TVCMID AS tvcmid,
        mdm_dea_address.DEA_NUMBER AS dea_number,
        mdm_dea_address.ADDRESS_ID AS address_id,
        rank() OVER (PARTITION BY mdm_dea_address.TVCMID, mdm_dea_address.ADDRESS_ID ORDER BY mdm_dea_address.DEA_EXPIRATION_DATE DESC, mdm_dea_address.UPDATED_DATE DESC, mdm_dea_address.record_id) AS rnk
 FROM raw.mdm_dea_address
 WHERE (mdm_dea_address.DEA_STATUS_CODE = 'A'::varchar(1))) dea ON (((addr.address_id = dea.address_id) AND (addr.tvcmid = dea.tvcmid) AND (dea.rnk = 1)))) LEFT  JOIN ( SELECT npi.tvcmid,
        npi.npi
 FROM (( SELECT mdm_alternate_id.file_id,
        mdm_alternate_id.TVCMID AS tvcmid,
        max(mdm_alternate_id.ALTERNATE_ID_VALUE) AS npi
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id,
          mdm_alternate_id.TVCMID) npi JOIN ( SELECT b.file_id,
        rank() OVER (ORDER BY b.file_id DESC) AS file_rank
 FROM ( SELECT mdm_alternate_id.file_id
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id) b) npi2 ON (((npi.file_id = npi2.file_id) AND (npi2.file_rank = 2))))) npi ON ((hcp.tvcmid = npi.tvcmid))) LEFT  JOIN ( SELECT sln.TVCMID AS tvcmid,
        sln.AUTHORIZATION_NUMBER AS license_number,
        sln.STATE AS state,
        rank() OVER (PARTITION BY sln.TVCMID, sln.STATE ORDER BY sln.LICENSE_TYPE_PRIVILEGE_RANK, sln.LICENSE_EXPIRATION_DATE DESC, sln.LICENSE_EFFECTIVE_DATE DESC, sln.UPDATED_DATE DESC, sln.record_id) AS rnk
 FROM raw.mdm_license sln
 WHERE (sln.LICENSE_STATUS_CODE = 'A'::varchar(1))) sln ON (((hcp.tvcmid = sln.tvcmid) AND (addr.state = sln.state) AND (sln.rnk = 1))))
 GROUP BY (trunc(hcp.tvcmid))::int,
          NULL,
          'HCP'::varchar(3),
          initcap(hcp.first_name),
          initcap(hcp.middle_name),
          initcap(hcp.last_name),
          hcp.suffix,
          npi.npi,
          addr.address_line_1,
          addr.address_line_2,
          addr.city,
          addr.state,
          addr.zipcode,
          sln.license_number,
          sln.state,
          dea.dea_number,
          CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END,
          hcp.healthcare_professional_status_code,
          date((statement_timestamp())::timestamp);
==> failed_tevaQA12G_payerspine_csv_export.sql <==

==> failed_tevaQA12G_payerspine_ddl_export.sql <==



CREATE  VIEW payerspine.vw_final_extract_key_controlling_account_product_coverage_category_allpaytypes AS
 SELECT vw_curr_key_controlling_account_product_cov_category_paytype_cdw_v1.key_controlling_account AS "Key Controlling Account",
        vw_curr_key_controlling_account_product_cov_category_paytype_cdw_v1.paytype AS "Payment Type",
        vw_curr_key_controlling_account_product_cov_category_paytype_cdw_v1.product AS Product,
        vw_curr_key_controlling_account_product_cov_category_paytype_cdw_v1.metric AS Metric,
        vw_curr_key_controlling_account_product_cov_category_paytype_cdw_v1.lives AS Lives
 FROM sandbox.vw_curr_key_controlling_account_product_cov_category_paytype_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_key_controlling_account_product_coverage_category_commercial AS
 SELECT vw_curr_key_controlling_account_product_cov_category_paytype_cdw_v1.key_controlling_account AS "Key Controlling Account",
        vw_curr_key_controlling_account_product_cov_category_paytype_cdw_v1.product AS Product,
        vw_curr_key_controlling_account_product_cov_category_paytype_cdw_v1.metric AS Metric,
        vw_curr_key_controlling_account_product_cov_category_paytype_cdw_v1.lives AS Lives
 FROM sandbox.vw_curr_key_controlling_account_product_cov_category_paytype_cdw_v1
 WHERE (upper(vw_curr_key_controlling_account_product_cov_category_paytype_cdw_v1.paytype) = 'COMMERCIAL'::varchar(10));

CREATE  VIEW payerspine.vw_final_extract_key_pbm_product_coverage_category_allpaytypes AS
 SELECT vw_curr_key_pbm_product_cov_category_paytype_cdw_v1.key_pbm AS "Key PBM",
        vw_curr_key_pbm_product_cov_category_paytype_cdw_v1.paytype AS "Payment Type",
        vw_curr_key_pbm_product_cov_category_paytype_cdw_v1.product AS Product,
        vw_curr_key_pbm_product_cov_category_paytype_cdw_v1.metric AS Metric,
        vw_curr_key_pbm_product_cov_category_paytype_cdw_v1.lives AS Lives
 FROM sandbox.vw_curr_key_pbm_product_cov_category_paytype_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_key_pbm_product_coverage_category_commercial AS
 SELECT vw_curr_key_pbm_product_cov_category_paytype_cdw_v1.key_pbm AS "Key PBM",
        vw_curr_key_pbm_product_cov_category_paytype_cdw_v1.product AS Product,
        vw_curr_key_pbm_product_cov_category_paytype_cdw_v1.metric AS Metric,
        vw_curr_key_pbm_product_cov_category_paytype_cdw_v1.lives AS Lives
 FROM sandbox.vw_curr_key_pbm_product_cov_category_paytype_cdw_v1
 WHERE (upper(vw_curr_key_pbm_product_cov_category_paytype_cdw_v1.paytype) = 'COMMERCIAL'::varchar(10));

CREATE  VIEW payerspine.vw_final_extract_pay_type_product_copay_tier AS
 SELECT vw_curr_paytype_product_copay_tier_cdw_v1.paytype AS "Payment Type",
        vw_curr_paytype_product_copay_tier_cdw_v1.product AS Product,
        vw_curr_paytype_product_copay_tier_cdw_v1.metric AS Metric,
        vw_curr_paytype_product_copay_tier_cdw_v1.lives AS Lives
 FROM sandbox.vw_curr_paytype_product_copay_tier_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_pay_type_product_coverage_category AS
 SELECT vw_curr_paytype_product_coverage_category_cdw_v1.paytype AS "Payment Type",
        vw_curr_paytype_product_coverage_category_cdw_v1.product AS Product,
        vw_curr_paytype_product_coverage_category_cdw_v1.metric AS Metric,
        vw_curr_paytype_product_coverage_category_cdw_v1.lives AS Lives
 FROM sandbox.vw_curr_paytype_product_coverage_category_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_pay_type_product_patient_pa AS
 SELECT vw_curr_paytype_product_patient_pa_cdw_v1.paytype AS "Payment Type",
        vw_curr_paytype_product_patient_pa_cdw_v1.product AS Product,
        vw_curr_paytype_product_patient_pa_cdw_v1.metric AS Metric,
        vw_curr_paytype_product_patient_pa_cdw_v1.lives AS Lives
 FROM sandbox.vw_curr_paytype_product_patient_pa_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_pay_type_product_step_edit_type AS
 SELECT vw_curr_paytype_product_step_category_cdw_v1.paytype AS "Payment Type",
        vw_curr_paytype_product_step_category_cdw_v1.product AS Product,
        vw_curr_paytype_product_step_category_cdw_v1.metric AS Metric,
        vw_curr_paytype_product_step_category_cdw_v1.lives AS Lives
 FROM sandbox.vw_curr_paytype_product_step_category_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_ftf_hp_id_key_controlling_plan_account AS
 SELECT lpad((vw_curr_ftf_hp_id_key_controlling_account_cdw_v1.ftf_health_plan_fid)::varchar, 6, '0'::varchar(1)) AS "FTF Health Plan FID",
        vw_curr_ftf_hp_id_key_controlling_account_cdw_v1.ftf_health_plan_name AS "FTF Health Plan Name",
        vw_curr_ftf_hp_id_key_controlling_account_cdw_v1.ftf_provider_name AS "FTF Provider Name",
        vw_curr_ftf_hp_id_key_controlling_account_cdw_v1.payment_type AS "Payment Type",
        vw_curr_ftf_hp_id_key_controlling_account_cdw_v1.key_controlling_plan_formulary AS "Key Controlling Plan Formulary",
        vw_curr_ftf_hp_id_key_controlling_account_cdw_v1.key_controlling_account AS "Key Controlling Account",
        vw_curr_ftf_hp_id_key_controlling_account_cdw_v1.key_controlling_parent AS "Key Controlling Parent",
        vw_curr_ftf_hp_id_key_controlling_account_cdw_v1.payer_pbm AS "Payer/PBM"
 FROM sandbox.vw_curr_ftf_hp_id_key_controlling_account_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_ftf_hp_id_key_pbm AS
 SELECT lpad((vw_curr_ftf_hp_id_key_pbm_cdw_v1.ftf_health_plan_fid)::varchar, 6, '0'::varchar(1)) AS "FTF Health Plan FID",
        vw_curr_ftf_hp_id_key_pbm_cdw_v1.ftf_health_plan_name AS "FTF Health Plan Name",
        vw_curr_ftf_hp_id_key_pbm_cdw_v1.ftf_provider_name AS "FTF Provider Name",
        vw_curr_ftf_hp_id_key_pbm_cdw_v1.payment_type AS "Payment Type",
        vw_curr_ftf_hp_id_key_pbm_cdw_v1.key_pbm AS "Key PBM",
        vw_curr_ftf_hp_id_key_pbm_cdw_v1.assigned_iqvia_pbm AS "Assigned IQVIA PBM"
 FROM sandbox.vw_curr_ftf_hp_id_key_pbm_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_iqvia_plan_code_ftf_hp_id AS
 SELECT lpad((vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.iqvia_plan_code)::varchar, 10, '0'::varchar(1)) AS "IQVIA Plan Code",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.iqvia_plan_name AS "IQVIA Plan Name",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.iqvia_payer_name AS "IQVIA Payer Name",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.iqvia_pbm AS "IQVIA PBM",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.payment_type AS "Payment Type",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.iqvia_model AS "IQVIA Model",
        lpad((vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.ftf_health_plan_fid)::varchar, 6, '0'::varchar(1)) AS "FTF Health Plan FID",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.ftf_health_plan_name AS "FTF Health Plan Name",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.ftf_health_plan_type AS "FTF Health Plan Type",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.key_controlling_plan_formulary AS "Key Controlling Plan Formulary",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.key_controlling_account AS "Key Controlling Account",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.key_controlling_parent AS "Key Controlling Parent",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.payer_pbm AS "Payer/PBM",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.ajovy_access_for_ftf_plan AS "Ajovy Access For FTF Plan",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.aimovig_access_for_ftf_plan AS "Aimovig Access For FTF Plan",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.emgality_access_for_ftf_plan AS "Emgality Access For FTF Plan",
        (vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.total_lives_for_ftf_plan)::varchar AS "Total Lives For FTF Plan",
        vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1.key_pbm AS "Key PBM"
 FROM sandbox.vw_curr_iqvia_plan_code_ftf_hp_id_cdw_v1 UNION  SELECT '0000010001'::varchar(10) AS "IQVIA Plan Code",
        'CASH'::varchar(4) AS "IQVIA Plan Name",
        'CASH'::varchar(4) AS "IQVIA Payer Name",
        ''::varchar AS "IQVIA PBM",
        'CASH'::varchar(4) AS "Payment Type",
        ''::varchar AS "IQVIA Model",
        ''::varchar AS "FTF Health Plan FID",
        ''::varchar AS "FTF Health Plan Name",
        ''::varchar AS "FTF Health Plan Type",
        ''::varchar AS "Key Controlling Plan Formulary",
        ''::varchar AS "Key Controlling Account",
        ''::varchar AS "Key Controlling Parent",
        ''::varchar AS "Payer/PBM",
        ''::varchar AS "Ajovy Access For FTF Plan",
        ''::varchar AS "Aimovig Access For FTF Plan",
        ''::varchar AS "Emgality Access For FTF Plan",
        ''::varchar AS "Total Lives For FTF Plan",
        ''::varchar AS "Key PBM"
 FROM v_catalog.dual;

CREATE  VIEW payerspine.vw_final_extract_ftf_plan_master_file AS
 SELECT lpad((vw_curr_ftf_plan_master_file_op_cdw_v1.ftf_health_plan_fid)::varchar, 6, '0'::varchar(1)) AS "FTF Health Plan FID",
        vw_curr_ftf_plan_master_file_op_cdw_v1.product AS Product,
        vw_curr_ftf_plan_master_file_op_cdw_v1.ftf_health_plan_name AS "FTF Health Plan Name",
        vw_curr_ftf_plan_master_file_op_cdw_v1.coverage_category AS "Coverage Category",
        vw_curr_ftf_plan_master_file_op_cdw_v1.ftf_provider_name AS "FTF Provider Name",
        vw_curr_ftf_plan_master_file_op_cdw_v1.paytype AS "Payment Type",
        vw_curr_ftf_plan_master_file_op_cdw_v1.ftf_health_plan_type AS "FTF Health Plan Type",
        vw_curr_ftf_plan_master_file_op_cdw_v1.plan_lives AS "Plan Lives",
        vw_curr_ftf_plan_master_file_op_cdw_v1.key_controlling_plan_formulary AS "Key Controlling Plan Formulary",
        vw_curr_ftf_plan_master_file_op_cdw_v1.key_controlling_account AS "Key Controlling Account",
        vw_curr_ftf_plan_master_file_op_cdw_v1.key_controlling_parent AS "Key Controlling Parent",
        vw_curr_ftf_plan_master_file_op_cdw_v1.payer_pbm AS "Payer/PBM",
        vw_curr_ftf_plan_master_file_op_cdw_v1.key_pbm AS "Key PBM",
        vw_curr_ftf_plan_master_file_op_cdw_v1.iqvia_payer_name AS "IQVIA Payer Name Best Matched to FTF Plan",
        vw_curr_ftf_plan_master_file_op_cdw_v1.iqvia_pbm AS "IQVIA PBM Best Matched to FTF Plan",
        vw_curr_ftf_plan_master_file_op_cdw_v1.ftf_formulary_management_pbm AS "FTF Formulary Management PBM",
        vw_curr_ftf_plan_master_file_op_cdw_v1.ftf_formulary_influencer_pbm AS "FTF Formulary Influencer PBM",
        vw_curr_ftf_plan_master_file_op_cdw_v1.ftf_claims_processing_pbm AS "FTF Claims Processing PBM",
        vw_curr_ftf_plan_master_file_op_cdw_v1.pref_brand_tier AS "Pref Band Tier",
        vw_curr_ftf_plan_master_file_op_cdw_v1.pharmacy_status AS "Pharmacy Status",
        vw_curr_ftf_plan_master_file_op_cdw_v1.ftf_tier AS "FTF Tier",
        vw_curr_ftf_plan_master_file_op_cdw_v1.restrictions AS Restrictions,
        vw_curr_ftf_plan_master_file_op_cdw_v1.copay_tier AS "Tier Cat",
        vw_curr_ftf_plan_master_file_op_cdw_v1.restriction_category AS "Restriction Category",
        vw_curr_ftf_plan_master_file_op_cdw_v1.step AS Step,
        vw_curr_ftf_plan_master_file_op_cdw_v1.botox AS Botox,
        vw_curr_ftf_plan_master_file_op_cdw_v1.prescriber_pa AS "Prescriber PA",
        vw_curr_ftf_plan_master_file_op_cdw_v1.patient_pa AS "Patient PA",
        vw_curr_ftf_plan_master_file_op_cdw_v1.medical_records AS "Medical Records",
        vw_curr_ftf_plan_master_file_op_cdw_v1.criteria_unspec AS "Criteria Unspec"
 FROM sandbox.vw_curr_ftf_plan_master_file_op_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_ajovy_migraine_market_key_controlling_account_summary AS
 SELECT vw_curr_key_ctl_account_summary_cdw_v1.paytype AS "Payment Type",
        vw_curr_key_ctl_account_summary_cdw_v1.ftf_health_plan_type AS "FTF Health Plan Type",
        vw_curr_key_ctl_account_summary_cdw_v1.key_controlling_account AS "Key Controlling Account",
        vw_curr_key_ctl_account_summary_cdw_v1.current_month_lives AS "Current Month Lives",
        vw_curr_key_ctl_account_summary_cdw_v1.previous_month_lives AS "Previous Month Lives",
        ''::varchar AS "Current VS Prior",
        ''::varchar AS "% Change"
 FROM sandbox.vw_curr_key_ctl_account_summary_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_ajovy_migraine_market_key_pbm_summary AS
 SELECT vw_curr_key_pbm_summary_cdw_v1.paytype AS "Payment Type",
        vw_curr_key_pbm_summary_cdw_v1.ftf_health_plan_type AS "FTF Health Plan Type",
        vw_curr_key_pbm_summary_cdw_v1.key_pbm AS "Key PBM",
        vw_curr_key_pbm_summary_cdw_v1.current_month_lives AS "Current Month Lives",
        vw_curr_key_pbm_summary_cdw_v1.previous_month_lives AS "Previous Month Lives",
        ''::varchar AS "Current VS Prior",
        ''::varchar AS "% Change"
 FROM sandbox.vw_curr_key_pbm_summary_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_ajovy_migraine_market_iqvia_player_summary AS
 SELECT vw_curr_iqvia_payer_name_summary_cdw_v1.paytype AS "Payment Type",
        vw_curr_iqvia_payer_name_summary_cdw_v1.iqvia_payer_name AS "IQVIA Payer Name Best Matched to FTF Plan",
        vw_curr_iqvia_payer_name_summary_cdw_v1.current_month_lives AS "Current Month Lives",
        vw_curr_iqvia_payer_name_summary_cdw_v1.previous_month_lives AS "Previous Month Lives",
        ''::varchar AS "Current VS Prior",
        ''::varchar AS "% Change"
 FROM sandbox.vw_curr_iqvia_payer_name_summary_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_ajovy_migraine_market_iqvia_pbm_summary AS
 SELECT vw_curr_iqvia_pbm_summary_cdw_v1.paytype AS "Payment Type",
        vw_curr_iqvia_pbm_summary_cdw_v1.iqvia_pbm AS "IQVIA PBM Best Matched to FTF Plan",
        vw_curr_iqvia_pbm_summary_cdw_v1.current_month_lives AS "Current Month Lives",
        vw_curr_iqvia_pbm_summary_cdw_v1.previous_month_lives AS "Previous Month Lives",
        ''::varchar AS "Current VS Prior",
        ''::varchar AS "% Change"
 FROM sandbox.vw_curr_iqvia_pbm_summary_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_ajovy_migraine_market_ftf_pbm_formulary_mgt_summary AS
 SELECT vw_curr_ftf_formulary_management_pbm_summary_cdw_v1.paytype AS "Payment Type",
        vw_curr_ftf_formulary_management_pbm_summary_cdw_v1.ftf_formulary_management_pbm AS "FTF Formulary Management PBM",
        vw_curr_ftf_formulary_management_pbm_summary_cdw_v1.current_month_lives AS "Current Month Lives",
        vw_curr_ftf_formulary_management_pbm_summary_cdw_v1.previous_month_lives AS "Previous Month Lives",
        ''::varchar AS "Current VS Prior",
        ''::varchar AS "% Change"
 FROM sandbox.vw_curr_ftf_formulary_management_pbm_summary_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_ajovy_migraine_market_ftf_pbm_formulary_infl_summary AS
 SELECT vw_curr_ftf_formulary_influencer_pbm_summary_cdw_v1.paytype AS "Payment Type",
        vw_curr_ftf_formulary_influencer_pbm_summary_cdw_v1.ftf_formulary_influencer_pbm AS "FTF Formulary Influencer PBM",
        vw_curr_ftf_formulary_influencer_pbm_summary_cdw_v1.current_month_lives AS "Current Month Lives",
        vw_curr_ftf_formulary_influencer_pbm_summary_cdw_v1.previous_month_lives AS "Previous Month Lives",
        ''::varchar AS "Current VS Prior",
        ''::varchar AS "% Change"
 FROM sandbox.vw_curr_ftf_formulary_influencer_pbm_summary_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_ajovy_migraine_market_ftf_pbm_claims_proc_summary AS
 SELECT vw_curr_ftf_claims_processing_pbm_summary_cdw_v1.paytype AS "Payment Type",
        vw_curr_ftf_claims_processing_pbm_summary_cdw_v1.ftf_claims_processing_pbm AS "FTF Claims Processing PBM",
        vw_curr_ftf_claims_processing_pbm_summary_cdw_v1.current_month_lives AS "Current Month Lives",
        vw_curr_ftf_claims_processing_pbm_summary_cdw_v1.previous_month_lives AS "Previous Month Lives",
        ''::varchar AS "Current VS Prior",
        ''::varchar AS "% Change"
 FROM sandbox.vw_curr_ftf_claims_processing_pbm_summary_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_ajovy_migraine_market_ftf_health_plan_detail AS
 SELECT lpad((vw_curr_access_master_bridge_cdw_v1.ftf_health_plan_fid)::varchar, 6, '0'::varchar(1)) AS "FTF Health Plan FID",
        vw_curr_access_master_bridge_cdw_v1.ftf_health_plan_name AS "FTF Health Plan Name",
        vw_curr_access_master_bridge_cdw_v1.coverage_category_ajovy AS "Coverage Category Ajovy",
        vw_curr_access_master_bridge_cdw_v1.coverage_category_aimovig AS "Coverage Category Aimovig",
        vw_curr_access_master_bridge_cdw_v1.coverage_category_emgality AS "Coverage Category Emgality",
        vw_curr_access_master_bridge_cdw_v1.ftf_provider_fid AS "FTF Provider FID",
        vw_curr_access_master_bridge_cdw_v1.ftf_provider_name AS "FTF Provider Name",
        vw_curr_access_master_bridge_cdw_v1.ftf_parent_name AS "FTF Parent Name",
        vw_curr_access_master_bridge_cdw_v1.paytype AS "Payment Type",
        vw_curr_access_master_bridge_cdw_v1.ftf_health_plan_type AS "FTF Health Plan Type",
        vw_curr_access_master_bridge_cdw_v1.key_controlling_plan_formulary AS "Key Controlling Plan Formulary",
        vw_curr_access_master_bridge_cdw_v1.key_controlling_account AS "Key Controlling Account",
        vw_curr_access_master_bridge_cdw_v1.key_controlling_parent AS "Key Controlling Parent",
        vw_curr_access_master_bridge_cdw_v1.payer_pbm AS "Payer/PBM",
        vw_curr_access_master_bridge_cdw_v1.key_pbm AS "Key PBM",
        vw_curr_access_master_bridge_cdw_v1.iqvia_payer_name AS "IQVIA Payer Name Best Matched to FTF Plan",
        vw_curr_access_master_bridge_cdw_v1.iqvia_pbm AS "IQVIA PBM Best Matched to FTF Plan",
        vw_curr_access_master_bridge_cdw_v1.ftf_formulary_management_pbm AS "FTF Formulary Management PBM",
        vw_curr_access_master_bridge_cdw_v1.ftf_formulary_influencer_pbm AS "FTF Formulary Influencer PBM",
        vw_curr_access_master_bridge_cdw_v1.ftf_claims_processing_pbm AS "FTF Claims Processing PBM",
        vw_curr_access_master_bridge_cdw_v1.ftf_match_iqvia AS "FTF Match IQVIA",
        vw_curr_access_master_bridge_cdw_v1.pref_brand_tier AS "Pref Band Tier",
        vw_curr_access_master_bridge_cdw_v1.previous_lives AS "Previous Month Lives",
        vw_curr_access_master_bridge_cdw_v1.current_lives AS "Current Month Lives",
        ''::varchar AS "Current VS Prior",
        ''::varchar AS "% Change"
 FROM sandbox.vw_curr_access_master_bridge_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_ajovy_migraine_market_cm_state_lives_formular_status AS
 SELECT lpad((vw_curr_st_lives_summary_cdw_v1.ftf_health_plan_fid)::varchar, 6, '0'::varchar(1)) AS "FTF Health Plan FID",
        vw_curr_st_lives_summary_cdw_v1.ftf_health_plan_name AS "FTF Health Plan Name",
        vw_curr_st_lives_summary_cdw_v1.ftf_provider_name AS "FTF Provider Name",
        vw_curr_st_lives_summary_cdw_v1.ftf_parent_name AS "FTF Parent Name",
        vw_curr_st_lives_summary_cdw_v1.paytype AS "Payment Type",
        vw_curr_st_lives_summary_cdw_v1.ftf_health_plan_type AS "FTF Health Plan Type",
        vw_curr_st_lives_summary_cdw_v1.key_controlling_plan_formulary AS "Key Controlling Plan Formulary",
        vw_curr_st_lives_summary_cdw_v1.key_controlling_account AS "Key Controlling Account",
        vw_curr_st_lives_summary_cdw_v1.key_controlling_parent AS "Key Controlling Parent",
        vw_curr_st_lives_summary_cdw_v1.payer_pbm AS "Payer/PBM",
        vw_curr_st_lives_summary_cdw_v1.key_pbm AS "Key PBM",
        vw_curr_st_lives_summary_cdw_v1.iqvia_payer_name AS "IQVIA Payer Name Best Matched to FTF Plan",
        vw_curr_st_lives_summary_cdw_v1.iqvia_pbm AS "IQVIA PBM Best Matched to FTF Plan",
        vw_curr_st_lives_summary_cdw_v1.state AS State,
        vw_curr_st_lives_summary_cdw_v1.ftf_state_hp_lives AS "FTF State HP Lives",
        vw_curr_st_lives_summary_cdw_v1.pref_brand_tier AS "Pref Band Tier",
        vw_curr_st_lives_summary_cdw_v1.ajovy_formulary AS "Ajovy Formulary",
        vw_curr_st_lives_summary_cdw_v1.aimovig_formulary AS "Aimovig Formulary",
        vw_curr_st_lives_summary_cdw_v1.emgality_formulary AS "Emgality Formulary"
 FROM sandbox.vw_curr_st_lives_summary_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_ajovy_migraine_market_all_changes AS
 SELECT lpad((vw_curr_comparison_ftf_health_plan_fid_cdw_v1.ftf_health_plan_fid)::varchar, 6, '0'::varchar(1)) AS "FTF Health Plan FID",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.ftf_health_plan_name AS "FTF Health Plan Name",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.Coverage_Category_Ajovy AS "Coverage Category Ajovy",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.Coverage_Category_Aimovig AS "Coverage Category Aimovig",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.Coverage_Category_Emgality AS "Coverage Category Emgality",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.ftf_provider_fid AS "FTF Provider FID",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.ftf_provider_name AS "FTF Provider Name",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.ftf_parent_name AS "FTF Parent Name",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.paytype AS "Payment Type",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.ftf_health_plan_type AS "FTF Health Plan Type",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.key_controlling_plan_formulary AS "Key Controlling Plan Formulary",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.key_controlling_account AS "Key Controlling Account",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.key_controlling_parent AS "Key Controlling Parent",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.payer_pbm AS "Payer/PBM",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.key_pbm AS "Key PBM",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.iqvia_payer_name AS "IQVIA Payer Name Best Matched to FTF Plan",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.iqvia_pbm AS "IQVIA PBM Best Matched to FTF Plan",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.ftf_formulary_management_pbm AS "FTF Formulary Management PBM",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.ftf_formulary_influencer_pbm AS "FTF Formulary Influencer PBM",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.ftf_claims_processing_pbm AS "FTF Claims Processing PBM",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.lives_mn AS Lives,
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.month_flag AS "Month Flag",
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.status AS Status,
        vw_curr_comparison_ftf_health_plan_fid_cdw_v1.change_in_lives AS "Change in Lives"
 FROM sandbox.vw_curr_comparison_ftf_health_plan_fid_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_payer_spine25_detailed_teva_brands AS
 SELECT lpad((vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.iqvia_plan_code)::varchar, 10, '0'::varchar(1)) AS "IQVIA Plan Code",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.iqvia_plan_name AS "IQVIA Plan Name",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.iqvia_payer_name AS "IQVIA Payer Name",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.iqvia_pbm AS "IQVIA PBM",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.key_controlling_plan_formulary AS "Key Controlling Plan Formulary",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.key_controlling_account AS "Key Controlling Account",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.key_controlling_parent AS "Key Controlling Parent",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.payer_pbm AS "Payer/PBM",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.payment_type AS "Payment Type",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.ajovy_access_for_ftf_plan AS "Coverage Category Ajovy",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.aimovig_access_for_ftf_plan AS "Coverage Category Aimovig",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.emgality_access_for_ftf_plan AS "Coverage Category Emgality",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.lives_plan_kcf_lvl AS "Lives KCF Level",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.lives_plan_lvl AS "Lives Plan Level",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.apportionment_factor AS "Apportionment Factor",
        vw_curr_payer_spine25_detailed_teva_brands_cdw_v1.saba_trx AS "SABA TRx"
 FROM sandbox.vw_curr_payer_spine25_detailed_teva_brands_cdw_v1;

CREATE  VIEW payerspine.vw_final_extract_payer_spine25_plan_teva_brands AS
 SELECT lpad((vw_curr_payer_spine25_plan_teva_brands_cdw_v1.iqvia_plan_code)::varchar, 10, '0'::varchar(1)) AS "IQVIA Plan Code",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.iqvia_plan_name AS "IQVIA Plan Name",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.iqvia_payer_name AS "IQVIA Payer Name",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.iqvia_pbm AS "IQVIA PBM",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.key_controlling_plan_formulary AS "Key Controlling Plan Formulary",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.key_controlling_account AS "Key Controlling Account",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.key_controlling_parent AS "Key Controlling Parent",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.payer_pbm AS "Payer/PBM",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.payment_type AS "Payment Type",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.ajovy_access_for_ftf_plan AS "Coverage Category Ajovy",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.aimovig_access_for_ftf_plan AS "Coverage Category Aimovig",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.emgality_access_for_ftf_plan AS "Coverage Category Emgality",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.lives_plan_kcf_lvl AS "Lives KCF Level",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.lives_plan_lvl AS "Lives Plan Level",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.apportionment_factor AS "Apportionment Factor",
        vw_curr_payer_spine25_plan_teva_brands_cdw_v1.saba_trx AS "SABA TRx"
 FROM sandbox.vw_curr_payer_spine25_plan_teva_brands_cdw_v1;
==> failed_tevaQA12G_product_csv_export.sql <==

==> failed_tevaQA12G_product_ddl_export.sql <==

==> failed_tevaQA12G_reference_csv_export.sql <==

==> failed_tevaQA12G_reference_ddl_export.sql <==

==> failed_tevaQA12G_reporting_csv_export.sql <==

==> failed_tevaQA12G_reporting_ddl_export.sql <==


CREATE  VIEW reporting.fcr_summary AS
 SELECT a.rsm_name,
        a.rsm_title,
        a.region_number,
        a.rsm_email,
        a.sales_rep_name,
        a.sales_rep_title,
        a.territory_number,
        a.sales_rep_email,
        a.fcr_date,
        a.report_status_vod__c
 FROM ( SELECT CASE WHEN (u.isactive = 'false'::varchar(5)) THEN (u.name || ' (inactive)'::varchar(11)) ELSE u.name END AS rsm_name,
        u.title AS rsm_title,
        t21.Name AS region_number,
        u.email AS rsm_email,
        CASE WHEN (a.isactive = 'false'::varchar(5)) THEN (a.name || ' (inactive)'::varchar(11)) ELSE a.name END AS sales_rep_name,
        a.title AS sales_rep_title,
        CASE WHEN (t22.Name IS NULL) THEN 'NA'::varchar(2) ELSE t22.Name END AS territory_number,
        a.email AS sales_rep_email,
        st.review_date_vod__c AS fcr_date,
        st.report_status_vod__c
 FROM (((((((veeva.v_survey s JOIN ( SELECT x.id,
        x.lastmodifieddate,
        x.survey_vod__c,
        x.employee_vod__c,
        x.coach_vod__c,
        x.review_date_vod__c,
        x.report_status_vod__c
 FROM ( SELECT v_survey_target.id,
        v_survey_target.lastmodifieddate,
        v_survey_target.survey_vod__c,
        v_survey_target.Employee_vod__c AS employee_vod__c,
        v_survey_target.coach_vod__c,
        v_survey_target.Review_date_vod__c AS review_date_vod__c,
        v_survey_target.report_status_vod__c,
        rank() OVER (PARTITION BY v_survey_target.Employee_vod__c, v_survey_target.Review_date_vod__c ORDER BY v_survey_target.lastmodifieddate DESC) AS ranker
 FROM veeva.v_survey_target) x
 WHERE (x.ranker = 1)) st ON ((s.id = st.survey_vod__c))) JOIN veeva.v_veeva_user a ON ((st.employee_vod__c = a.id))) JOIN veeva.v_veeva_user u ON ((st.coach_vod__c = u.id))) JOIN veeva.userterritory2association uta1 ON ((st.coach_vod__c = uta1.UserId))) JOIN veeva.territory2 t21 ON ((uta1.Territory2Id = t21.Id))) LEFT  JOIN veeva.userterritory2association uta2 ON (((st.employee_vod__c = uta2.UserId) AND (uta1.file_id = uta2.file_id)))) LEFT  JOIN veeva.territory2 t22 ON (((uta2.Territory2Id = t22.Id) AND (t21.file_id = t22.file_id))))
 WHERE ((s.name = 'Field Coaching Report'::varchar(21)) AND (uta1.file_id IN ( SELECT max(userterritory2association.file_id) AS max
 FROM veeva.userterritory2association)) AND (t21.file_id IN ( SELECT max(territory2.file_id) AS max
 FROM veeva.territory2)) AND (st.review_date_vod__c >= '2021-01-01'::date) AND (substr(t21.Name, 1, 2) = ANY (ARRAY['TR'::varchar(2), 'TP'::varchar(2), 'TN'::varchar(2)])))) a
 WHERE (substr(a.territory_number, 7, 2) <> '99'::varchar(2))
 GROUP BY a.rsm_name,
          a.rsm_title,
          a.region_number,
          a.rsm_email,
          a.sales_rep_name,
          a.sales_rep_title,
          a.territory_number,
          a.sales_rep_email,
          a.fcr_date,
          a.report_status_vod__c;
==> failed_tevaQA12G_sandbox_csv_export.sql <==

update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.IMS ID ISSUES_AJOVY10262020) where table_schema = 'sandbox' and table_name = 'IMS ID ISSUES_AJOVY10262020';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.KNIPPER QVARs IDs1033) where table_schema = 'sandbox' and table_name = 'KNIPPER QVARs IDs1033';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.Returns_IQVIA ) where table_schema = 'sandbox' and table_name = 'Returns_IQVIA ';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.MediCal HCPs) where table_schema = 'sandbox' and table_name = 'MediCal HCPs';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.QNASL_MRKT IMSID_ALL) where table_schema = 'sandbox' and table_name = 'QNASL_MRKT IMSID_ALL';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.SYNEOS TERRs MISSING IMS IDs) where table_schema = 'sandbox' and table_name = 'SYNEOS TERRs MISSING IMS IDs';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.SYNEOS MISSING IMSIDs) where table_schema = 'sandbox' and table_name = 'SYNEOS MISSING IMSIDs';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.digital-affinity) where table_schema = 'sandbox' and table_name = 'digital-affinity';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.IQVIA OPTUM OUTLETS11032020) where table_schema = 'sandbox' and table_name = 'IQVIA OPTUM OUTLETS11032020';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.TN Mising HCPS for TN IC) where table_schema = 'sandbox' and table_name = 'TN Mising HCPS for TN IC';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.IMS ID ISSUE_AUSTEDO_10262020) where table_schema = 'sandbox' and table_name = 'IMS ID ISSUE_AUSTEDO_10262020';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.MA Missing STATE) where table_schema = 'sandbox' and table_name = 'MA Missing STATE';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.SYNEOS TARGET FILE) where table_schema = 'sandbox' and table_name = 'SYNEOS TARGET FILE';
update migration.audit set export_ts = sysdate(), export_success = true, export_type = 'V2V', tgt_row_count = (select count(*) from sandbox.J_CHUNG_HCP DEA-2) where table_schema = 'sandbox' and table_name = 'J_CHUNG_HCP DEA-2';
==> failed_tevaQA12G_sandbox_ddl_export.sql <==


CREATE  VIEW sandbox.test_view AS
 SELECT ftf_restrictions.health_plan_id,
        ftf_restrictions.drug_id,
        ftf_restrictions.restriction_detail_id,
        ftf_restrictions.restriction_code,
        ftf_restrictions.formulary_entry_restriction_id,
        ftf_restrictions.restriction_detail_text,
        ftf_restrictions.restriction_addtnl_information_1,
        ftf_restrictions.restriction_addtnl_information_2,
        ftf_restrictions.record_id,
        ftf_restrictions.file_id
 FROM cleansed.ftf_restrictions
 WHERE (ftf_restrictions.file_id IN ( SELECT max(ftf_restrictions.file_id) AS max
 FROM cleansed.ftf_restrictions));

CREATE  VIEW sandbox.vw_ftf_formularies AS
 SELECT ftf_formularies.health_plan_id,
        ftf_formularies.drug_id,
        ftf_formularies.tier_code,
        ftf_formularies.restrictions,
        ftf_formularies.reason_code,
        ftf_formularies.reason_code_description,
        ftf_formularies.file_id,
        ftf_formularies.record_id
 FROM cleansed.ftf_formularies
 WHERE (ftf_formularies.file_id IN ( SELECT max(ftf_formularies.file_id) AS max
 FROM cleansed.ftf_formularies));

CREATE  VIEW sandbox.create_paragard_anda_sales AS
SELECT sh.source_customer_id AS "BP #", NULL AS "Ortho E", sh.customer_name AS "BP Name", coalesce(sh.ship_to_address_line_2, sh.ship_to_address_line_1) AS "Ship-to Street", sh.ship_to_city AS "Ship-to City", sh.ship_to_state AS "Ship-to State", sh.ship_to_zip AS "Ship-to ZipCd", NULL AS "Ship-to Ctry", NULL AS "Ship-to Phone", NULL AS "Ship-to Fax", NULL AS "Ship-to Email", ad.address AS "Bill-to Street", ad.city AS "Bill-to City", ad.state AS "Bill-to State", ad.zip_code AS "Bill-to ZipCd", NULL AS "Bill-to Ctry", NULL AS "Bill-to Phone", NULL AS "Bill-to Fax", NULL AS "Bill-to Email", CASE mod(sh.customer_type, 1::float) WHEN NULLSEQUAL 0::float THEN sh.customer_type ELSE rtrim(sh.customer_type, '0'::varchar(1)) END AS "Class of Trade", CASE mod(sh.order_no, 1::float) WHEN NULLSEQUAL 0::float THEN (((sh.order_no)::numeric)::int)::varchar ELSE rtrim(sh.order_no, '0'::varchar(1)) END AS "Invoice #", CASE mod(sh.invoice_amount, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.invoice_amount)::int)::varchar ELSE rtrim((sh.invoice_amount)::varchar, '0'::varchar(1)) END AS "Del Amt", to_char(sh.invoice_date, 'YYYY-MM-DD'::varchar(10)) AS "Inv Date", CASE mod(sh.quantity, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.quantity)::int)::varchar ELSE rtrim((sh.quantity)::varchar, '0'::varchar(1)) END AS "24237", NULL AS "24238", NULL AS "24800", NULL AS "33223", CASE mod(sh.package_size, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (sh.package_size)::varchar ELSE rtrim((sh.package_size)::varchar, '0'::varchar(1)) END AS Packs, NULL AS UnitPrice, NULL AS Territory, NULL AS "Order Type Cd", NULL AS "Order Type Desc", NULL AS LOBCdDesc, NULL AS PriceMatrixDef, ('A'::varchar(1) || btrim(to_char(sh.source_parent_customer_id, '000000000'::varchar(9)))) AS ParentBPCd, NULL AS ParentBPCdDesc, NULL AS GrandParentBPCdDesc, NULL AS "PO#", NULL AS "UPS#", CASE mod(sh.order_no, 1::float) WHEN NULLSEQUAL 0::float THEN (((sh.order_no)::numeric)::int)::varchar ELSE rtrim(sh.order_no, '0'::varchar(1)) END AS OrdNbr, NULL AS OrdLnNbr, NULL AS DiscAmt, NULL AS WhseCd, 'ANDA'::varchar(4) AS DATA_SOURCE, '51285020401'::varchar(11) AS NDC11_CODE FROM (datamart.specialty_pharmacy_shipment sh LEFT JOIN (SELECT tw_address.address_id, tw_address.address, tw_address.city, tw_address.state, tw_address.zip_code FROM datamart.tw_address) ad ON ((sh.tw_bill_to_address_id = ad.address_id))) WHERE ((sh.basket_name ~~ '%PARAGARD%'::varchar(10)) AND (sh.specialty_pharmacy_data_source = 'Anda'::varchar(4)) AND (sh.ship_date >= add_months(trunc(('now()'::varchar(5))::date, 'MM'::varchar(2)), (-1))) AND (sh.ship_date < trunc(('now()'::varchar(5))::date, 'MM'::varchar(2)))) GROUP BY sh.source_customer_id, NULL, sh.customer_name, coalesce(sh.ship_to_address_line_2, sh.ship_to_address_line_1), sh.ship_to_city, sh.ship_to_state, sh.ship_to_zip, ad.address, ad.city, ad.state, ad.zip_code, CASE mod(sh.customer_type, 1::float) WHEN NULLSEQUAL 0::float THEN sh.customer_type ELSE rtrim(sh.customer_type, '0'::varchar(1)) END, CASE mod(sh.order_no, 1::float) WHEN NULLSEQUAL 0::float THEN (((sh.order_no)::numeric)::int)::varchar ELSE rtrim(sh.order_no, '0'::varchar(1)) END, CASE mod(sh.invoice_amount, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.invoice_amount)::int)::varchar ELSE rtrim((sh.invoice_amount)::varchar, '0'::varchar(1)) END, to_char(sh.invoice_date, 'YYYY-MM-DD'::varchar(10)), CASE mod(sh.quantity, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.quantity)::int)::varchar ELSE rtrim((sh.quantity)::varchar, '0'::varchar(1)) END, CASE mod(sh.package_size, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (sh.package_size)::varchar ELSE rtrim((sh.package_size)::varchar, '0'::varchar(1)) END, ('A'::varchar(1) || btrim(to_char(sh.source_parent_customer_id, '000000000'::varchar(9)))), 'ANDA'::varchar(4), '51285020401'::varchar(11);

CREATE  VIEW sandbox.knipper_supplemental_test AS
 SELECT a.tvcmid AS TVCMID,
        CASE WHEN (a.medical_suffix IS NULL) THEN ''::varchar ELSE a.medical_suffix END AS ProfDesig,
        a.first_name AS FName,
        a.last_name AS Lname,
        CASE WHEN (a.middle_name IS NULL) THEN ''::varchar ELSE a.middle_name END AS MI,
        CASE WHEN (a.personal_suffix IS NULL) THEN ''::varchar ELSE a.personal_suffix END AS Suffix,
        CASE WHEN (a.hce_status_desc IS NULL) THEN 'A'::varchar(1) WHEN (a.hce_status_desc = 'ACTIVE'::varchar(6)) THEN 'A'::varchar(1) WHEN (a.hce_status_desc = 'INACTIVE'::varchar(8)) THEN 'I'::varchar(1) ELSE 'D'::varchar(1) END AS Status,
        CASE WHEN (a.hce_status_desc = 'PRESUMED DEAD'::varchar(13)) THEN 'D'::varchar(1) WHEN (a.hce_status_desc = 'SEMI-RETIRED'::varchar(12)) THEN 'O'::varchar(1) WHEN (a.hce_status_desc = 'RETIRED'::varchar(7)) THEN 'R'::varchar(1) ELSE ''::varchar END AS DeleteReason,
        CASE WHEN ((a.hce_status_desc IS NULL) OR (a.hce_status_desc <> ALL (ARRAY['ACTIVE'::varchar(8), 'INACTIVE'::varchar(8)]))) THEN to_char(e.last_update_date, 'MM/DD/YYYY'::varchar(10)) ELSE ''::varchar END AS DeleteDate,
        CASE WHEN (a.primary_specialty IS NULL) THEN 'US'::varchar(2) ELSE a.primary_specialty END AS Specialty,
        CASE WHEN (a.address_line1 IS NULL) THEN ''::varchar ELSE a.address_line1 END AS Address1,
        CASE WHEN (a.address_line2 IS NULL) THEN ''::varchar ELSE a.address_line2 END AS Address2,
        ''::varchar AS Address3,
        CASE WHEN (a.city IS NULL) THEN ''::varchar ELSE a.city END AS City,
        CASE WHEN (a.state IS NULL) THEN ''::varchar ELSE a.state END AS State,
        CASE WHEN (a.zip IS NULL) THEN ''::varchar ELSE a.zip END AS Zip,
        CASE WHEN (b.sln IS NULL) THEN ''::varchar ELSE b.sln END AS SLN,
        CASE WHEN ((b.sln IS NULL) OR (b.sln = ''::varchar)) THEN ''::varchar ELSE CASE WHEN (b.sln_status_code = 'A'::varchar(1)) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END END AS SLNActiveFlag,
        CASE WHEN ((b.sln IS NULL) OR (b.sln = ''::varchar)) THEN ''::varchar ELSE to_char(b.sln_expiration_date, 'MM/DD/YYYY'::varchar(10)) END AS SLNExpirationDate,
        CASE WHEN (c.flag_value = 'Y'::varchar(1)) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS DNCWakeFlag,
        CASE WHEN (d.tvcmid IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS DNP
 FROM (((((( SELECT prescriber_rx.tvcmid
 FROM datamart.prescriber_rx
 GROUP BY prescriber_rx.tvcmid) exp JOIN ( SELECT hcp_demo.tvcmid,
        hcp_demo.ims_id,
        hcp_demo.npi,
        hcp_demo.last_name,
        hcp_demo.first_name,
        hcp_demo.middle_name,
        hcp_demo.personal_suffix,
        hcp_demo.medical_suffix,
        hcp_demo.primary_specialty,
        hcp_demo.address_line1,
        hcp_demo.address_line2,
        hcp_demo.city,
        hcp_demo.state_code AS state,
        hcp_demo.zip,
        hcp_demo.business_phone,
        hcp_demo.business_email,
        hcp_demo.hce_status_desc,
        hcp_demo.file_id,
        hcp_demo.record_id,
        hcp_demo.np_pa_flag
 FROM datamart.customer_hcp_demographics hcp_demo
 WHERE (hcp_demo.file_id = ( SELECT max(customer_hcp_demographics.file_id) AS MAX
 FROM datamart.customer_hcp_demographics))) a ON ((exp.tvcmid = a.tvcmid))) JOIN ( SELECT sample_eligibility.sln,
        sample_eligibility.sln_state,
        sample_eligibility.sln_expiration_date,
        sample_eligibility.sln_status_code,
        sample_eligibility.tvcmid
 FROM mdm.sample_eligibility
 WHERE (sample_eligibility.file_id = ( SELECT max(sample_eligibility.file_id) AS MAX
 FROM mdm.sample_eligibility))) b ON (((a.tvcmid = b.tvcmid) AND (a.state = b.sln_state)))) LEFT  JOIN ( SELECT ims_flag.tvcmid,
        ims_flag.flag_type,
        ims_flag.flag_value
 FROM mdm.ims_flag
 WHERE ((ims_flag.file_id = ( SELECT max(ims_flag.file_id) AS MAX
 FROM mdm.ims_flag)) AND (ims_flag.flag_type = 'AMADNC'::varchar(6)))) c ON ((a.tvcmid = c.tvcmid))) LEFT  JOIN datamart.do_not_promote d ON ((a.tvcmid = d.tvcmid))) LEFT  JOIN ( SELECT hcp.updated_date AS last_update_date,
        hcp.tvcmid
 FROM mdm.hcp
 WHERE (hcp.file_id = ( SELECT max(hcp.file_id) AS MAX
 FROM mdm.hcp))) e ON ((a.tvcmid = e.tvcmid)));

CREATE  VIEW sandbox.ad_hoc_ad AS
 SELECT ('"'::varchar(1) || fed.id_num) AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(c.fill_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat((c.file_id)::varchar, (c.record_id)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (brand.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((((('Voucher/Coupon Redemption - '::varchar(28) || coalesce(b.name, ''::varchar)) || ','::varchar(1)) || coalesce(cvp.program_description, ''::varchar)) || ','::varchar(1)) || c.redemption_type) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        (to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) || '"'::varchar(1)) AS modified
 FROM ((((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.program_number = cvp.program_number) AND (c.redemption_type = cvp.redemption_type)))) JOIN datamart.tvcmid_xref fed ON (((c.physician_tvcmid = fed.tvcmid) AND (fed.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN product.basket b ON ((c.basket_id = b.basket_id))) LEFT  JOIN ( SELECT bb.basket_id,
        bb.name,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.prod_id)));

CREATE  VIEW sandbox.v_sent_email AS
 SELECT se.id,
        se.isdeleted,
        se.name,
        se.createddate,
        se.createdbyid,
        se.lastmodifieddate,
        se.lastmodifiedbyid,
        se.systemmodstamp,
        se.mayedit,
        se.islocked,
        se.is_parent_call_vod__c,
        se.call2_vod__c,
        se.product_vod__c,
        se.detail_priority_vod__c,
        se.mobile_id_vod__c,
        se.type_vod__c,
        se.file_id,
        se.record_id
 FROM (veeva.call_detail se JOIN ( SELECT call_detail.id,
        max(call_detail.file_id) AS file_id
 FROM veeva.call_detail
 WHERE (call_detail.createddate >= add_months((statement_timestamp())::timestamp, (-25)))
 GROUP BY call_detail.id) se2 ON (((se.id = se2.id) AND (se.file_id = se2.file_id))));

CREATE  VIEW sandbox.account AS
 SELECT x.id,
        x.isdeleted,
        x.masterrecordid,
        x.name,
        x.lastname,
        x.firstname,
        x.salutation,
        x.type,
        x.recordtypeid,
        x.phone,
        x.fax,
        x.website,
        x.numberofemployees,
        x.ownership,
        x.ownerid,
        x.createddate,
        x.createdbyid,
        x.lastmodifieddate,
        x.lastmodifiedbyid,
        x.systemmodstamp,
        x.lastactivitydate,
        x.mayedit,
        x.islocked,
        x.lastvieweddate,
        x.lastreferenceddate,
        x.isexcludedfromrealign,
        x.personcontactid,
        x.ispersonaccount,
        x.personmailingstreet,
        x.personmailingcity,
        x.personmailingstate,
        x.personmailingpostalcode,
        x.personmailingcountry,
        x.personmailinglatitude,
        x.personmailinglongitude,
        x.personotherstreet,
        x.personothercity,
        x.personotherstate,
        x.personotherpostalcode,
        x.personothercountry,
        x.personotherlatitude,
        x.personotherlongitude,
        x.personmobilephone,
        x.personhomephone,
        x.personotherphone,
        x.personassistantphone,
        x.personemail,
        x.persontitle,
        x.persondepartment,
        x.personassistantname,
        x.personbirthdate,
        x.personhasoptedoutofemail,
        x.personhasoptedoutoffax,
        x.persondonotcall,
        x.personlastcurequestdate,
        x.personlastcuupdatedate,
        x.personemailbouncedreason,
        x.personemailbounceddate,
        x.jigsaw,
        x.jigsawcompanyid,
        x.accountsource,
        x.sicdesc,
        x.external_id_vod__c,
        x.credentials_vod__c,
        x.exclude_from_zip_to_terr_proce,
        x.group_specialty_1_vod__c,
        x.group_specialty_2_vod__c,
        x.specialty_1_vod__c,
        x.specialty_2_vod__c,
        x.formatted_name_vod__c,
        x.territory_test_vod__c,
        x.mobile_id_vod__c,
        x.gender_vod__c,
        x.id_vod__c,
        x.do_not_sync_sales_data_vod__c,
        x.id2_vod__c,
        x.preferred_name_vod__c,
        x.sample_default_vod__c,
        x.segmentations_vod__c,
        x.restricted_products_vod__c,
        x.payer_id_vod__c,
        x.account_status_tva__c,
        x.do_not_call_vod__c,
        x.beds__c,
        x.spend_amount__c,
        x.pdrp_opt_out_vod__c,
        x.spend_status_value_vod__c,
        x.pdrp_opt_out_date_vod__c,
        x.spend_status_vod__c,
        x.enable_restricted_products,
        x.call_reminder_vod__c,
        x.account_group_vod__c,
        x.primary_parent_vod__c,
        x.color_vod__c,
        x.middle_vod__c,
        x.suffix_vod__c,
        x.account_location_tva__c,
        x.no_orders_vod__c,
        x.account_master_id_tva__c,
        x.account_email_tva__c,
        x.account_search_firstlast,
        x.account_search_lastfirst,
        x.person_preferred_name_tva__c,
        x.practice_at_hospital_vod__c,
        x.practice_near_hospital_vod__c,
        x.do_not_create_child_account,
        x.total_mds_dos__c,
        x.aha__c,
        x.order_type_vod__c,
        x.npi_vod__c,
        x.me__c,
        x.speaker__c,
        x.investigator_vod__c,
        x.default_order_type_vod__c,
        x.person_degree_tva__c,
        x.tax_status__c,
        x.model__c,
        x.offerings__c,
        x.departments__c,
        x.account_type__c,
        x.account_search_business_vod__c,
        x.business_professional_person,
        x.no_spend_tva__c,
        x.hospital_type_vod__c,
        x.account_class_vod__c,
        x.furigana_vod__c,
        x.tirf_rems_tva__c,
        x.fentora_app_tva__c,
        x.total_revenue_000__c,
        x.net_income_loss_000__c,
        x.pmpm_income_loss_000__c,
        x.commercial_premiums_pmpm__c,
        x.medical_loss_ratio__c,
        x.medical_expenses_pmpm__c,
        x.commercial_patient_days_1000,
        x.hmo_market_shr__c,
        x.hmo__c,
        x.hmo_pos__c,
        x.ppo__c,
        x.ppo_pos__c,
        x.medicare__c,
        x.medicaid__c,
        x.nuvigil_app_tva__c,
        x.mds_status_tva__c,
        x.lis_status_tva__c,
        x.dnc_pcs_tva__c,
        x.dnc_cns_tva__c,
        x.suffix_tva__c,
        x.tysabri_status_tva__c,
        x.business_description__c,
        x.regional_strategy__c,
        x.contracts_process__c,
        x.cml_profiled_tva__c,
        x.cell_phone_tva__c,
        x.no_contact_tva__c,
        x.outlet_id_tva__c,
        x.pmo_gpo_account_affiliations,
        x.territory_status_tva__c,
        x.zdea_number_tva__c,
        x.veeva_id_tva__c,
        x.treanda_lq_tgt_tva__c,
        x.tbo_filgrastim_target_tva__c,
        x.sln_rescrub_tva__c,
        x.account_identifier_vod__c,
        x.target__c,
        x.kol_vod__c,
        x.rems_expiration_date_teva__c,
        x.account_demo_id_tva__c,
        x.total_lives__c,
        x.total_physicians_enrolled__c,
        x.tirf_rems_eff_date_tva__c,
        x.business_associate_agreement,
        x.do_not_promote_tva__c,
        x.account_dea_tva__c,
        x.bp_number__c,
        x.paragard_segmentation_tva__c,
        x.telesales_activity_tva__c,
        x.designation_tva__c,
        x.total_pharmacists__c,
        x.comp_pricing_tva__c,
        x.formulary_tva__c,
        x.gln_tva__c,
        x.gpo_contracts_tva__c,
        x.hin_tva__c,
        x.max_id_tva__c,
        x.oncology_services_tva__c,
        x.pcp_program_tva__c,
        x.pharmacy_location_tva__c,
        x.primary_credential_tva__c,
        x.primary_wholesaler_tva__c,
        x.rep_credentialing_tva__c,
        x.secondary_credential_tva__c,
        x.sign_in_location_tva__c,
        x.special_tva__c,
        x.sub_type_id_tva__c,
        x.sub_type_tva__c,
        x.teva_contracts_tva__c,
        x.ims_org_id_tva__c,
        x.year_of_birth_tva__c,
        x.teaching_hospital_tva__c,
        x.account_archived_tva__c,
        x.mobile_id_vod__pc,
        x.file_id,
        x.record_id,
        x.cm_id_tva__c,
        x.staff_email,
        x.company_managed_email,
        x.alternate_email
 FROM (veeva.account x JOIN ( SELECT account.id,
        max(account.file_id) AS file_id
 FROM veeva.account
 GROUP BY account.id) x2 ON (((x.id = x2.id) AND (x.file_id = x2.file_id))));

CREATE  VIEW sandbox.v_account AS
 SELECT x.id,
        x.isdeleted,
        x.masterrecordid,
        x.name,
        x.lastname,
        x.firstname,
        x.salutation,
        x.type,
        x.recordtypeid,
        x.phone,
        x.fax,
        x.website,
        x.numberofemployees,
        x.ownership,
        x.ownerid,
        x.createddate,
        x.createdbyid,
        x.lastmodifieddate,
        x.lastmodifiedbyid,
        x.systemmodstamp,
        x.lastactivitydate,
        x.mayedit,
        x.islocked,
        x.lastvieweddate,
        x.lastreferenceddate,
        x.isexcludedfromrealign,
        x.personcontactid,
        x.ispersonaccount,
        x.personmailingstreet,
        x.personmailingcity,
        x.personmailingstate,
        x.personmailingpostalcode,
        x.personmailingcountry,
        x.personmailinglatitude,
        x.personmailinglongitude,
        x.personotherstreet,
        x.personothercity,
        x.personotherstate,
        x.personotherpostalcode,
        x.personothercountry,
        x.personotherlatitude,
        x.personotherlongitude,
        x.personmobilephone,
        x.personhomephone,
        x.personotherphone,
        x.personassistantphone,
        x.personemail,
        x.persontitle,
        x.persondepartment,
        x.personassistantname,
        x.personbirthdate,
        x.personhasoptedoutofemail,
        x.personhasoptedoutoffax,
        x.persondonotcall,
        x.personlastcurequestdate,
        x.personlastcuupdatedate,
        x.personemailbouncedreason,
        x.personemailbounceddate,
        x.jigsaw,
        x.jigsawcompanyid,
        x.accountsource,
        x.sicdesc,
        x.external_id_vod__c,
        x.credentials_vod__c,
        x.exclude_from_zip_to_terr_proce,
        x.group_specialty_1_vod__c,
        x.group_specialty_2_vod__c,
        x.specialty_1_vod__c,
        x.specialty_2_vod__c,
        x.formatted_name_vod__c,
        x.territory_test_vod__c,
        x.mobile_id_vod__c,
        x.gender_vod__c,
        x.id_vod__c,
        x.do_not_sync_sales_data_vod__c,
        x.id2_vod__c,
        x.preferred_name_vod__c,
        x.sample_default_vod__c,
        x.segmentations_vod__c,
        x.restricted_products_vod__c,
        x.payer_id_vod__c,
        x.account_status_tva__c,
        x.do_not_call_vod__c,
        x.beds__c,
        x.spend_amount__c,
        x.pdrp_opt_out_vod__c,
        x.spend_status_value_vod__c,
        x.pdrp_opt_out_date_vod__c,
        x.spend_status_vod__c,
        x.enable_restricted_products,
        x.call_reminder_vod__c,
        x.account_group_vod__c,
        x.primary_parent_vod__c,
        x.color_vod__c,
        x.middle_vod__c,
        x.suffix_vod__c,
        x.account_location_tva__c,
        x.no_orders_vod__c,
        x.account_master_id_tva__c,
        x.account_email_tva__c,
        x.account_search_firstlast,
        x.account_search_lastfirst,
        x.person_preferred_name_tva__c,
        x.practice_at_hospital_vod__c,
        x.practice_near_hospital_vod__c,
        x.do_not_create_child_account,
        x.total_mds_dos__c,
        x.aha__c,
        x.order_type_vod__c,
        x.npi_vod__c,
        x.me__c,
        x.speaker__c,
        x.investigator_vod__c,
        x.default_order_type_vod__c,
        x.person_degree_tva__c,
        x.tax_status__c,
        x.model__c,
        x.offerings__c,
        x.departments__c,
        x.account_type__c,
        x.account_search_business_vod__c,
        x.business_professional_person,
        x.no_spend_tva__c,
        x.hospital_type_vod__c,
        x.account_class_vod__c,
        x.furigana_vod__c,
        x.tirf_rems_tva__c,
        x.fentora_app_tva__c,
        x.total_revenue_000__c,
        x.net_income_loss_000__c,
        x.pmpm_income_loss_000__c,
        x.commercial_premiums_pmpm__c,
        x.medical_loss_ratio__c,
        x.medical_expenses_pmpm__c,
        x.commercial_patient_days_1000,
        x.hmo_market_shr__c,
        x.hmo__c,
        x.hmo_pos__c,
        x.ppo__c,
        x.ppo_pos__c,
        x.medicare__c,
        x.medicaid__c,
        x.nuvigil_app_tva__c,
        x.mds_status_tva__c,
        x.lis_status_tva__c,
        x.dnc_pcs_tva__c,
        x.dnc_cns_tva__c,
        x.suffix_tva__c,
        x.tysabri_status_tva__c,
        x.business_description__c,
        x.regional_strategy__c,
        x.contracts_process__c,
        x.cml_profiled_tva__c,
        x.cell_phone_tva__c,
        x.no_contact_tva__c,
        x.outlet_id_tva__c,
        x.pmo_gpo_account_affiliations,
        x.territory_status_tva__c,
        x.zdea_number_tva__c,
        x.veeva_id_tva__c,
        x.treanda_lq_tgt_tva__c,
        x.tbo_filgrastim_target_tva__c,
        x.sln_rescrub_tva__c,
        x.account_identifier_vod__c,
        x.target__c,
        x.kol_vod__c,
        x.rems_expiration_date_teva__c,
        x.account_demo_id_tva__c,
        x.total_lives__c,
        x.total_physicians_enrolled__c,
        x.tirf_rems_eff_date_tva__c,
        x.business_associate_agreement,
        x.do_not_promote_tva__c,
        x.account_dea_tva__c,
        x.bp_number__c,
        x.paragard_segmentation_tva__c,
        x.telesales_activity_tva__c,
        x.designation_tva__c,
        x.total_pharmacists__c,
        x.comp_pricing_tva__c,
        x.formulary_tva__c,
        x.gln_tva__c,
        x.gpo_contracts_tva__c,
        x.hin_tva__c,
        x.max_id_tva__c,
        x.oncology_services_tva__c,
        x.pcp_program_tva__c,
        x.pharmacy_location_tva__c,
        x.primary_credential_tva__c,
        x.primary_wholesaler_tva__c,
        x.rep_credentialing_tva__c,
        x.secondary_credential_tva__c,
        x.sign_in_location_tva__c,
        x.special_tva__c,
        x.sub_type_id_tva__c,
        x.sub_type_tva__c,
        x.teva_contracts_tva__c,
        x.ims_org_id_tva__c,
        x.year_of_birth_tva__c,
        x.teaching_hospital_tva__c,
        x.account_archived_tva__c,
        x.mobile_id_vod__pc,
        x.file_id,
        x.record_id,
        x.cm_id_tva__c,
        x.staff_email,
        x.company_managed_email,
        x.alternate_email
 FROM (veeva.account x JOIN ( SELECT account.id,
        max(account.file_id) AS file_id
 FROM veeva.account
 GROUP BY account.id) x2 ON (((x.id = x2.id) AND (x.file_id = x2.file_id))));

CREATE  VIEW sandbox.v_call AS
 SELECT x.id,
        x.ownerid,
        x.isdeleted,
        x.name,
        x.recordtypeid,
        x.createddate,
        x.createdbyid,
        x.lastmodifieddate,
        x.lastmodifiedbyid,
        x.systemmodstamp,
        x.lastactivitydate,
        x.mayedit,
        x.islocked,
        x.lastvieweddate,
        x.lastreferenceddate,
        x.sample_card_vod__c,
        x.add_detail_vod__c,
        x.property_vod__c,
        x.account_vod__c,
        x.zvod_product_discussion_vod__c,
        x.status_vod__c,
        x.parent_address_vod__c,
        x.account_plan_vod__c,
        x.zvod_savenew_vod__c,
        x.next_call_notes_vod__c,
        x.mobile_id_vod__c,
        x.zvod_account_credentials_vod_c,
        x.zvod_account_preferred_name_vo,
        x.zvod_account_sample_status_vod,
        x.zvod_attendees_vod__c,
        x.zvod_key_messages_vod__c,
        x.zvod_detailing_vod__c,
        x.zvod_expenses_vod__c,
        x.zvod_followup_vod__c,
        x.zvod_samples_vod__c,
        x.zvod_save_vod__c,
        x.zvod_submit_vod__c,
        x.zvod_delete_vod__c,
        x.activity_type__c,
        x.significant_event__c,
        x.location_vod__c,
        x.subject_vod__c,
        x.call_datetime_vod__c,
        x.disbursed_to_vod__c,
        x.request_receipt_vod__c,
        x.signature_date_vod__c,
        x.territory_vod__c,
        x.submitted_by_mobile_vod__c,
        x.call_type_vod__c,
        x.add_key_message_vod__c,
        x.address_vod__c,
        x.attendees_vod__c,
        x.attendee_type_vod__c,
        x.call_date_vod__c,
        x.detailed_products_vod__c,
        x.no_disbursement_vod__c,
        x.parent_call_vod__c,
        x.user_vod__c,
        x.contact_vod__c,
        x.zvod_entity_vod__c,
        x.medical_event_vod__c,
        x.mobile_created_datetime_vod__c,
        x.mobile_last_modified_datetime,
        x.license_vod__c,
        x.is_parent_call_vod__c,
        x.entity_display_name_vod__c,
        x.last_device_vod__c,
        x.ship_address_line_1_vod__c,
        x.ship_address_line_2_vod__c,
        x.ship_city_vod__c,
        x.ship_country_vod__c,
        x.ship_license_expiration_date,
        x.ship_license_status_vod__c,
        x.ship_license_vod__c,
        x.ship_state_vod__c,
        x.ship_to_address_vod__c,
        x.ship_zip_vod__c,
        x.ship_to_address_text_vod__c,
        x.clm_vod__c,
        x.zvod_clmdetails_vod__c,
        x.is_sampled_call_vod__c,
        x.zvod_surveys_vod__c,
        x.presentations_vod__c,
        x.entity_reference_id_vod__c,
        x.error_reference_call_vod__c,
        x.duration_vod__c,
        x.color_vod__c,
        x.allowed_products_vod__c,
        x.zvod_attachments_vod__c,
        x.sample_card_reason_vod__c,
        x.assmca_vod__c,
        x.address_line_1_vod__c,
        x.address_line_2_vod__c,
        x.city_vod__c,
        x.dea_address_line_1_vod__c,
        x.dea_address_line_2_vod__c,
        x.dea_address_vod__c,
        x.dea_city_vod__c,
        x.dea_expiration_date_vod__c,
        x.dea_state_vod__c,
        x.dea_zip_4_vod__c,
        x.dea_zip_vod__c,
        x.dea_vod__c,
        x.ship_zip_4_vod__c,
        x.state_vod__c,
        x.zip_4_vod__c,
        x.zip_vod__c,
        x.sample_send_card_vod__c,
        x.zvod_address_vod_c_dea_status_,
        x.signature_page_image_vod__c,
        x.credentials_vod__c,
        x.salutation_vod__c,
        x.zvod_account_call_reminder_vod,
        x.sales_org_tva__c,
        x.zvod_business_account_vod__c,
        x.product_priority_1_vod__c,
        x.product_priority_2_vod__c,
        x.product_priority_3_vod__c,
        x.product_priority_4_vod__c,
        x.product_priority_5_vod__c,
        x.zvod_more_actions_vod__c,
        x.zvod_call_conflict_status,
        x.signature_timestamp_vod__c,
        x.expense_amount_vod__c,
        x.total_expense_attendees_count,
        x.attendee_list_vod__c,
        x.expense_post_status_vod__c,
        x.attendee_post_status_vod__c,
        x.expense_system_external_id,
        x.incurred_expense_vod__c,
        x.assigner_vod__c,
        x.assignment_datetime_vod__c,
        x.zvod_call_objective_vod__c,
        x.signature_location_longitude,
        x.signature_location_latitude,
        x.location_services_status,
        x.created_by_timezone_tva__c,
        x.license_expiration_date_vod__c,
        x.license_status_vod__c,
        x.ship_assmca_vod__c,
        x.ship_dea_expiration_date,
        x.ship_dea_vod__c,
        x.call_method_tva__c,
        x.bendeka_indication_tva__c,
        x.file_id,
        x.record_id,
        x.austedo_indication_tva__c,
        x.call_duration_tva__c,
        x.how_executed_tva__c,
        x.Remote_Meeting_vod__c,
        x.Veeva_Remote_Meeting_Id_vod__c,
        x.Cobrowse_URL_Participant_vod__c,
        x.Signature_Captured_Remotely_vod__c,
        x.Remote_Signature_Attendee_Name_vod__c
 FROM (veeva.call x JOIN ( SELECT call.id,
        max(call.file_id) AS file_id
 FROM veeva.call
 WHERE (call.createddate >= add_months((statement_timestamp())::timestamp, (-25)))
 GROUP BY call.id) x2 ON (((x.id = x2.id) AND (x.file_id = x2.file_id))));

CREATE  VIEW sandbox.v_call_detail AS
 SELECT x.id,
        x.isdeleted,
        x.name,
        x.createddate,
        x.createdbyid,
        x.lastmodifieddate,
        x.lastmodifiedbyid,
        x.systemmodstamp,
        x.mayedit,
        x.islocked,
        x.is_parent_call_vod__c,
        x.call2_vod__c,
        x.product_vod__c,
        x.detail_priority_vod__c,
        x.mobile_id_vod__c,
        x.type_vod__c,
        x.file_id,
        x.record_id
 FROM (veeva.call_detail x JOIN ( SELECT call_detail.id,
        max(call_detail.file_id) AS file_id
 FROM veeva.call_detail
 WHERE (call_detail.createddate >= add_months((statement_timestamp())::timestamp, (-25)))
 GROUP BY call_detail.id) x2 ON (((x.id = x2.id) AND (x.file_id = x2.file_id))));

CREATE  VIEW sandbox.ics_mop AS
 SELECT rx_vertical.ims_id,
        rx_vertical.hcp_id,
        rx_vertical.plan_code,
        rx_vertical.plan_name,
        rx_vertical.model,
        rx_vertical.basket_name,
        sum(CASE WHEN (rx_vertical.month_bucket = 24) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth24,
        sum(CASE WHEN (rx_vertical.month_bucket = 23) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth23,
        sum(CASE WHEN (rx_vertical.month_bucket = 22) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth22,
        sum(CASE WHEN (rx_vertical.month_bucket = 21) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth21,
        sum(CASE WHEN (rx_vertical.month_bucket = 20) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth20,
        sum(CASE WHEN (rx_vertical.month_bucket = 19) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth19,
        sum(CASE WHEN (rx_vertical.month_bucket = 18) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth18,
        sum(CASE WHEN (rx_vertical.month_bucket = 17) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth17,
        sum(CASE WHEN (rx_vertical.month_bucket = 16) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth16,
        sum(CASE WHEN (rx_vertical.month_bucket = 15) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth15,
        sum(CASE WHEN (rx_vertical.month_bucket = 14) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth14,
        sum(CASE WHEN (rx_vertical.month_bucket = 13) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth13,
        sum(CASE WHEN (rx_vertical.month_bucket = 12) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth12,
        sum(CASE WHEN (rx_vertical.month_bucket = 11) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth11,
        sum(CASE WHEN (rx_vertical.month_bucket = 10) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth10,
        sum(CASE WHEN (rx_vertical.month_bucket = 9) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth9,
        sum(CASE WHEN (rx_vertical.month_bucket = 8) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth8,
        sum(CASE WHEN (rx_vertical.month_bucket = 7) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth7,
        sum(CASE WHEN (rx_vertical.month_bucket = 6) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth6,
        sum(CASE WHEN (rx_vertical.month_bucket = 5) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth5,
        sum(CASE WHEN (rx_vertical.month_bucket = 4) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth4,
        sum(CASE WHEN (rx_vertical.month_bucket = 3) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth3,
        sum(CASE WHEN (rx_vertical.month_bucket = 2) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth2,
        sum(CASE WHEN (rx_vertical.month_bucket = 1) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth1
 FROM ( SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(xref.veeva_account_id, rx.ims_id) END AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.model,
        rx.basket_name,
        w.month_bucket,
        rx.trx_count
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) w ON ((rx.rollup_month = w.month_ending))) LEFT  JOIN ( SELECT a.tvcmid,
        a.veeva_account_id
 FROM ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.id_num) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE (xref.id_type = 'VEEVA_ID'::varchar(8))) a
 WHERE (a.rnk = 1)) xref ON ((xref.tvcmid = rx.tvcmid)))
 WHERE ((rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (w.month_bucket >= 1) AND (w.month_bucket <= 24))) rx_vertical
 GROUP BY rx_vertical.ims_id,
          rx_vertical.hcp_id,
          rx_vertical.plan_code,
          rx_vertical.plan_name,
          rx_vertical.model,
          rx_vertical.basket_name;

CREATE  VIEW sandbox.call AS
 SELECT a.id,
        a.ownerid,
        a.isdeleted,
        a.name,
        a.recordtypeid,
        a.createddate,
        a.createdbyid,
        a.lastmodifieddate,
        a.lastmodifiedbyid,
        a.systemmodstamp,
        a.lastactivitydate,
        a.mayedit,
        a.islocked,
        a.lastvieweddate,
        a.lastreferenceddate,
        a.sample_card_vod__c,
        a.add_detail_vod__c,
        a.property_vod__c,
        a.account_vod__c,
        a.zvod_product_discussion_vod__c,
        a.status_vod__c,
        a.parent_address_vod__c,
        a.account_plan_vod__c,
        a.zvod_savenew_vod__c,
        a.next_call_notes_vod__c,
        a.mobile_id_vod__c,
        a.zvod_account_credentials_vod_c,
        a.zvod_account_preferred_name_vo,
        a.zvod_account_sample_status_vod,
        a.zvod_attendees_vod__c,
        a.zvod_key_messages_vod__c,
        a.zvod_detailing_vod__c,
        a.zvod_expenses_vod__c,
        a.zvod_followup_vod__c,
        a.zvod_samples_vod__c,
        a.zvod_save_vod__c,
        a.zvod_submit_vod__c,
        a.zvod_delete_vod__c,
        a.activity_type__c,
        a.significant_event__c,
        a.location_vod__c,
        a.subject_vod__c,
        a.call_datetime_vod__c,
        a.disbursed_to_vod__c,
        a.request_receipt_vod__c,
        a.signature_date_vod__c,
        a.territory_vod__c,
        a.submitted_by_mobile_vod__c,
        a.call_type_vod__c,
        a.add_key_message_vod__c,
        a.address_vod__c,
        a.attendees_vod__c,
        a.attendee_type_vod__c,
        a.call_date_vod__c,
        a.detailed_products_vod__c,
        a.no_disbursement_vod__c,
        a.parent_call_vod__c,
        a.user_vod__c,
        a.contact_vod__c,
        a.zvod_entity_vod__c,
        a.medical_event_vod__c,
        a.mobile_created_datetime_vod__c,
        a.mobile_last_modified_datetime,
        a.license_vod__c,
        a.is_parent_call_vod__c,
        a.entity_display_name_vod__c,
        a.last_device_vod__c,
        a.ship_address_line_1_vod__c,
        a.ship_address_line_2_vod__c,
        a.ship_city_vod__c,
        a.ship_country_vod__c,
        a.ship_license_expiration_date,
        a.ship_license_status_vod__c,
        a.ship_license_vod__c,
        a.ship_state_vod__c,
        a.ship_to_address_vod__c,
        a.ship_zip_vod__c,
        a.ship_to_address_text_vod__c,
        a.clm_vod__c,
        a.zvod_clmdetails_vod__c,
        a.is_sampled_call_vod__c,
        a.zvod_surveys_vod__c,
        a.presentations_vod__c,
        a.entity_reference_id_vod__c,
        a.error_reference_call_vod__c,
        a.duration_vod__c,
        a.color_vod__c,
        a.allowed_products_vod__c,
        a.zvod_attachments_vod__c,
        a.sample_card_reason_vod__c,
        a.assmca_vod__c,
        a.address_line_1_vod__c,
        a.address_line_2_vod__c,
        a.city_vod__c,
        a.dea_address_line_1_vod__c,
        a.dea_address_line_2_vod__c,
        a.dea_address_vod__c,
        a.dea_city_vod__c,
        a.dea_expiration_date_vod__c,
        a.dea_state_vod__c,
        a.dea_zip_4_vod__c,
        a.dea_zip_vod__c,
        a.dea_vod__c,
        a.ship_zip_4_vod__c,
        a.state_vod__c,
        a.zip_4_vod__c,
        a.zip_vod__c,
        a.sample_send_card_vod__c,
        a.zvod_address_vod_c_dea_status_,
        a.signature_page_image_vod__c,
        a.credentials_vod__c,
        a.salutation_vod__c,
        a.zvod_account_call_reminder_vod,
        a.sales_org_tva__c,
        a.zvod_business_account_vod__c,
        a.product_priority_1_vod__c,
        a.product_priority_2_vod__c,
        a.product_priority_3_vod__c,
        a.product_priority_4_vod__c,
        a.product_priority_5_vod__c,
        a.zvod_more_actions_vod__c,
        a.zvod_call_conflict_status,
        a.signature_timestamp_vod__c,
        a.expense_amount_vod__c,
        a.total_expense_attendees_count,
        a.attendee_list_vod__c,
        a.expense_post_status_vod__c,
        a.attendee_post_status_vod__c,
        a.expense_system_external_id,
        a.incurred_expense_vod__c,
        a.assigner_vod__c,
        a.assignment_datetime_vod__c,
        a.zvod_call_objective_vod__c,
        a.signature_location_longitude,
        a.signature_location_latitude,
        a.location_services_status,
        a.created_by_timezone_tva__c,
        a.license_expiration_date_vod__c,
        a.license_status_vod__c,
        a.ship_assmca_vod__c,
        a.ship_dea_expiration_date,
        a.ship_dea_vod__c,
        a.call_method_tva__c,
        a.bendeka_indication_tva__c,
        a.file_id,
        a.record_id,
        a.austedo_indication_tva__c,
        a.call_duration_tva__c,
        a.how_executed_tva__c,
        a.Remote_Meeting_vod__c,
        a.Veeva_Remote_Meeting_Id_vod__c,
        a.Cobrowse_URL_Participant_vod__c,
        a.Signature_Captured_Remotely_vod__c,
        a.Remote_Signature_Attendee_Name_vod__c,
        a.rowrank
 FROM ( SELECT c.id,
        c.ownerid,
        c.isdeleted,
        c.name,
        c.recordtypeid,
        c.createddate,
        c.createdbyid,
        c.lastmodifieddate,
        c.lastmodifiedbyid,
        c.systemmodstamp,
        c.lastactivitydate,
        c.mayedit,
        c.islocked,
        c.lastvieweddate,
        c.lastreferenceddate,
        c.sample_card_vod__c,
        c.add_detail_vod__c,
        c.property_vod__c,
        c.account_vod__c,
        c.zvod_product_discussion_vod__c,
        c.status_vod__c,
        c.parent_address_vod__c,
        c.account_plan_vod__c,
        c.zvod_savenew_vod__c,
        c.next_call_notes_vod__c,
        c.mobile_id_vod__c,
        c.zvod_account_credentials_vod_c,
        c.zvod_account_preferred_name_vo,
        c.zvod_account_sample_status_vod,
        c.zvod_attendees_vod__c,
        c.zvod_key_messages_vod__c,
        c.zvod_detailing_vod__c,
        c.zvod_expenses_vod__c,
        c.zvod_followup_vod__c,
        c.zvod_samples_vod__c,
        c.zvod_save_vod__c,
        c.zvod_submit_vod__c,
        c.zvod_delete_vod__c,
        c.activity_type__c,
        c.significant_event__c,
        c.location_vod__c,
        c.subject_vod__c,
        c.call_datetime_vod__c,
        c.disbursed_to_vod__c,
        c.request_receipt_vod__c,
        c.signature_date_vod__c,
        c.territory_vod__c,
        c.submitted_by_mobile_vod__c,
        c.call_type_vod__c,
        c.add_key_message_vod__c,
        c.address_vod__c,
        c.attendees_vod__c,
        c.attendee_type_vod__c,
        c.call_date_vod__c,
        c.detailed_products_vod__c,
        c.no_disbursement_vod__c,
        c.parent_call_vod__c,
        c.user_vod__c,
        c.contact_vod__c,
        c.zvod_entity_vod__c,
        c.medical_event_vod__c,
        c.mobile_created_datetime_vod__c,
        c.mobile_last_modified_datetime,
        c.license_vod__c,
        c.is_parent_call_vod__c,
        c.entity_display_name_vod__c,
        c.last_device_vod__c,
        c.ship_address_line_1_vod__c,
        c.ship_address_line_2_vod__c,
        c.ship_city_vod__c,
        c.ship_country_vod__c,
        c.ship_license_expiration_date,
        c.ship_license_status_vod__c,
        c.ship_license_vod__c,
        c.ship_state_vod__c,
        c.ship_to_address_vod__c,
        c.ship_zip_vod__c,
        c.ship_to_address_text_vod__c,
        c.clm_vod__c,
        c.zvod_clmdetails_vod__c,
        c.is_sampled_call_vod__c,
        c.zvod_surveys_vod__c,
        c.presentations_vod__c,
        c.entity_reference_id_vod__c,
        c.error_reference_call_vod__c,
        c.duration_vod__c,
        c.color_vod__c,
        c.allowed_products_vod__c,
        c.zvod_attachments_vod__c,
        c.sample_card_reason_vod__c,
        c.assmca_vod__c,
        c.address_line_1_vod__c,
        c.address_line_2_vod__c,
        c.city_vod__c,
        c.dea_address_line_1_vod__c,
        c.dea_address_line_2_vod__c,
        c.dea_address_vod__c,
        c.dea_city_vod__c,
        c.dea_expiration_date_vod__c,
        c.dea_state_vod__c,
        c.dea_zip_4_vod__c,
        c.dea_zip_vod__c,
        c.dea_vod__c,
        c.ship_zip_4_vod__c,
        c.state_vod__c,
        c.zip_4_vod__c,
        c.zip_vod__c,
        c.sample_send_card_vod__c,
        c.zvod_address_vod_c_dea_status_,
        c.signature_page_image_vod__c,
        c.credentials_vod__c,
        c.salutation_vod__c,
        c.zvod_account_call_reminder_vod,
        c.sales_org_tva__c,
        c.zvod_business_account_vod__c,
        c.product_priority_1_vod__c,
        c.product_priority_2_vod__c,
        c.product_priority_3_vod__c,
        c.product_priority_4_vod__c,
        c.product_priority_5_vod__c,
        c.zvod_more_actions_vod__c,
        c.zvod_call_conflict_status,
        c.signature_timestamp_vod__c,
        c.expense_amount_vod__c,
        c.total_expense_attendees_count,
        c.attendee_list_vod__c,
        c.expense_post_status_vod__c,
        c.attendee_post_status_vod__c,
        c.expense_system_external_id,
        c.incurred_expense_vod__c,
        c.assigner_vod__c,
        c.assignment_datetime_vod__c,
        c.zvod_call_objective_vod__c,
        c.signature_location_longitude,
        c.signature_location_latitude,
        c.location_services_status,
        c.created_by_timezone_tva__c,
        c.license_expiration_date_vod__c,
        c.license_status_vod__c,
        c.ship_assmca_vod__c,
        c.ship_dea_expiration_date,
        c.ship_dea_vod__c,
        c.call_method_tva__c,
        c.bendeka_indication_tva__c,
        c.file_id,
        c.record_id,
        c.austedo_indication_tva__c,
        c.call_duration_tva__c,
        c.how_executed_tva__c,
        c.Remote_Meeting_vod__c,
        c.Veeva_Remote_Meeting_Id_vod__c,
        c.Cobrowse_URL_Participant_vod__c,
        c.Signature_Captured_Remotely_vod__c,
        c.Remote_Signature_Attendee_Name_vod__c,
        rank() OVER (PARTITION BY c.id ORDER BY c.file_id DESC) AS rowrank
 FROM veeva.call c
 WHERE (c.call_date_vod__c >= add_months((statement_timestamp())::timestamp, (-24)))) a
 WHERE (a.rowrank = 1);

CREATE  VIEW sandbox.vw_curr_month_ftf_formularies AS
 SELECT btrim(ftf_formularies.health_plan_id) AS health_plan_id,
        btrim(ftf_formularies.drug_id) AS drug_id,
        btrim(ftf_formularies.tier_code) AS tier_code,
        btrim(ftf_formularies.restrictions) AS restrictions,
        btrim(ftf_formularies.reason_code) AS reason_code,
        btrim(ftf_formularies.reason_code_description) AS btrim,
        ftf_formularies.file_id,
        ftf_formularies.record_id
 FROM cleansed.ftf_formularies
 WHERE (ftf_formularies.file_id IN ( SELECT max(ftf_formularies.file_id) AS max
 FROM cleansed.ftf_formularies));

CREATE  VIEW sandbox.vw_curr_month_ftf_health_plans AS
 SELECT btrim(ftf_health_plans.formularyf_id) AS formularyf_id,
        btrim(ftf_health_plans.provider_id) AS provider_id,
        btrim(ftf_health_plans.provider) AS provider,
        btrim(ftf_health_plans.health_plan_id) AS health_plan_id,
        btrim(ftf_health_plans.health_plan) AS health_plan,
        btrim(ftf_health_plans.parent_id) AS parent_id,
        btrim(ftf_health_plans.parent) AS parent,
        ftf_health_plans.national_lives_count,
        btrim(ftf_health_plans.plan_type_name) AS plan_type_name,
        ftf_health_plans.preferred_brand_tier,
        ftf_health_plans.file_id,
        ftf_health_plans.record_id
 FROM cleansed.ftf_health_plans
 WHERE (ftf_health_plans.file_id IN ( SELECT max(ftf_health_plans.file_id) AS max
 FROM cleansed.ftf_health_plans));

CREATE  VIEW sandbox.vw_curr_month_ftf_health_plan_geography AS
 SELECT btrim(ftf_health_plan_geography.health_plan_id) AS health_plan_id,
        btrim(ftf_health_plan_geography.operating_state) AS operating_state,
        ftf_health_plan_geography.lives_coverage,
        ftf_health_plan_geography.file_id,
        ftf_health_plan_geography.record_id
 FROM cleansed.ftf_health_plan_geography
 WHERE (ftf_health_plan_geography.file_id IN ( SELECT max(ftf_health_plan_geography.file_id) AS max
 FROM cleansed.ftf_health_plan_geography));

CREATE  VIEW sandbox.vw_curr_month_ftf_pbms AS
 SELECT btrim(ftf_pbms.health_plan_id) AS health_plan_id,
        btrim(ftf_pbms.pbm_id) AS pbm_id,
        btrim(ftf_pbms.pbm) AS pbm,
        btrim(ftf_pbms.pbm_function_id) AS pbm_function_id,
        btrim(ftf_pbms.pbm_function) AS pbm_function,
        ftf_pbms.file_id,
        ftf_pbms.record_id
 FROM cleansed.ftf_pbms
 WHERE (ftf_pbms.file_id IN ( SELECT max(ftf_pbms.file_id) AS max
 FROM cleansed.ftf_pbms));

CREATE  VIEW sandbox.vw_curr_month_ftf_restrictions AS
 SELECT btrim(ftf_restrictions_v2.health_plan_id) AS health_plan_id,
        btrim(ftf_restrictions_v2.drug_id) AS drug_id,
        btrim(ftf_restrictions_v2.restriction_code) AS restriction_code,
        ftf_restrictions_v2.restriction_detail_id,
        btrim(ftf_restrictions_v2.restriction_detail_text) AS restriction_detail_text,
        btrim(ftf_restrictions_v2.restriction_addtnl_information_1) AS restriction_addtnl_information_1,
        btrim(ftf_restrictions_v2.restriction_addtnl_information_2) AS restriction_addtnl_information_2,
        btrim(ftf_restrictions_v2.step_count) AS step_count,
        btrim(ftf_restrictions_v2.pa_form) AS pa_form,
        btrim(ftf_restrictions_v2.indication) AS indication,
        btrim(ftf_restrictions_v2.grouped_restriction_level) AS grouped_restriction_level,
        ftf_restrictions_v2.record_id,
        ftf_restrictions_v2.file_id
 FROM cleansed.ftf_restrictions_v2
 WHERE (ftf_restrictions_v2.file_id IN ( SELECT max(ftf_restrictions_v2.file_id) AS max
 FROM cleansed.ftf_restrictions_v2));

CREATE  VIEW sandbox.vw_curr_month_ims_plan_xref AS
 SELECT btrim(ims_plan_xref.payer_num) AS payer_num,
        btrim(ims_plan_xref.payer_name) AS payer_name,
        btrim(ims_plan_xref.plan_num) AS plan_num,
        btrim(ims_plan_xref.payer_plan_num) AS payer_plan_num,
        btrim(ims_plan_xref.plan_name) AS plan_name,
        btrim(ims_plan_xref.model) AS model,
        btrim(ims_plan_xref.city) AS city,
        btrim(ims_plan_xref.hq_state) AS hq_state,
        btrim(ims_plan_xref.operating_state) AS operating_state,
        ims_plan_xref.months_with_data,
        ims_plan_xref.file_id,
        ims_plan_xref.record_id
 FROM cleansed.ims_plan_xref
 WHERE (ims_plan_xref.file_id IN ( SELECT max(ims_plan_xref.file_id) AS max
 FROM cleansed.ims_plan_xref));

CREATE  VIEW sandbox.vw_curr_month_ims_pbm_xref AS
 SELECT btrim(ims_pbm_xref.pbm_name) AS pbm_name,
        btrim(ims_pbm_xref.payer_plan_num) AS payer_plan_num,
        btrim(ims_pbm_xref.xref_to_payer_plan_num) AS xref_to_payer_plan_num,
        btrim(ims_pbm_xref.ipd_id) AS ipd_id,
        btrim(ims_pbm_xref.ipd_type) AS ipd_type,
        btrim(ims_pbm_xref.plan_name) AS plan_name,
        ims_pbm_xref.pbm_num,
        ims_pbm_xref.ims_processor_num,
        ims_pbm_xref.file_id,
        ims_pbm_xref.record_id
 FROM cleansed.ims_pbm_xref
 WHERE (ims_pbm_xref.file_id IN ( SELECT max(ims_pbm_xref.file_id) AS max
 FROM cleansed.ims_pbm_xref));

CREATE  VIEW sandbox.vw_curr_month_ftf_ims_bridge AS
 SELECT btrim(ftf_ims_bridge.payer_name) AS payer_name,
        btrim(ftf_ims_bridge.code) AS code,
        btrim(ftf_ims_bridge.name) AS name,
        btrim(ftf_ims_bridge.state) AS state,
        btrim(ftf_ims_bridge.comments) AS comments,
        ftf_ims_bridge.plan_id,
        btrim(ftf_ims_bridge.plan_name) AS plan_name,
        btrim(ftf_ims_bridge.provider_name) AS provider_name,
        btrim(ftf_ims_bridge.plan_type_name) AS plan_type_name,
        ftf_ims_bridge.file_id,
        ftf_ims_bridge.record_id
 FROM cleansed.ftf_ims_bridge
 WHERE (ftf_ims_bridge.file_id IN ( SELECT max(ftf_ims_bridge.file_id) AS max
 FROM cleansed.ftf_ims_bridge));

CREATE  VIEW sandbox.vw_prev_month_ftf_formularies AS
 SELECT btrim(ftf_formularies.health_plan_id) AS health_plan_id,
        btrim(ftf_formularies.drug_id) AS drug_id,
        btrim(ftf_formularies.tier_code) AS tier_code,
        btrim(ftf_formularies.restrictions) AS restrictions,
        btrim(ftf_formularies.reason_code) AS reason_code,
        btrim(ftf_formularies.reason_code_description) AS btrim,
        ftf_formularies.file_id,
        ftf_formularies.record_id
 FROM cleansed.ftf_formularies
 WHERE (ftf_formularies.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ftf_formularies.file_id
 FROM cleansed.ftf_formularies
 GROUP BY ftf_formularies.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ftf_health_plans AS
 SELECT btrim(ftf_health_plans.formularyf_id) AS formularyf_id,
        btrim(ftf_health_plans.provider_id) AS provider_id,
        btrim(ftf_health_plans.provider) AS provider,
        btrim(ftf_health_plans.health_plan_id) AS health_plan_id,
        btrim(ftf_health_plans.health_plan) AS health_plan,
        btrim(ftf_health_plans.parent_id) AS parent_id,
        btrim(ftf_health_plans.parent) AS parent,
        ftf_health_plans.national_lives_count,
        btrim(ftf_health_plans.plan_type_name) AS plan_type_name,
        ftf_health_plans.preferred_brand_tier,
        ftf_health_plans.file_id,
        ftf_health_plans.record_id
 FROM cleansed.ftf_health_plans
 WHERE (ftf_health_plans.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ftf_health_plans.file_id
 FROM cleansed.ftf_health_plans
 GROUP BY ftf_health_plans.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ftf_health_plan_geography AS
 SELECT btrim(ftf_health_plan_geography.health_plan_id) AS health_plan_id,
        btrim(ftf_health_plan_geography.operating_state) AS operating_state,
        ftf_health_plan_geography.lives_coverage,
        ftf_health_plan_geography.file_id,
        ftf_health_plan_geography.record_id
 FROM cleansed.ftf_health_plan_geography
 WHERE (ftf_health_plan_geography.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ftf_health_plan_geography.file_id
 FROM cleansed.ftf_health_plan_geography
 GROUP BY ftf_health_plan_geography.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ftf_pbms AS
 SELECT btrim(ftf_pbms.health_plan_id) AS health_plan_id,
        btrim(ftf_pbms.pbm_id) AS pbm_id,
        btrim(ftf_pbms.pbm) AS pbm,
        btrim(ftf_pbms.pbm_function_id) AS pbm_function_id,
        btrim(ftf_pbms.pbm_function) AS pbm_function,
        ftf_pbms.file_id,
        ftf_pbms.record_id
 FROM cleansed.ftf_pbms
 WHERE (ftf_pbms.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ftf_pbms.file_id
 FROM cleansed.ftf_pbms
 GROUP BY ftf_pbms.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ftf_restrictions AS
 SELECT btrim(ftf_restrictions_v2.health_plan_id) AS health_plan_id,
        btrim(ftf_restrictions_v2.drug_id) AS drug_id,
        btrim(ftf_restrictions_v2.restriction_code) AS restriction_code,
        ftf_restrictions_v2.restriction_detail_id,
        btrim(ftf_restrictions_v2.restriction_detail_text) AS restriction_detail_text,
        btrim(ftf_restrictions_v2.restriction_addtnl_information_1) AS restriction_addtnl_information_1,
        btrim(ftf_restrictions_v2.restriction_addtnl_information_2) AS restriction_addtnl_information_2,
        btrim(ftf_restrictions_v2.step_count) AS step_count,
        btrim(ftf_restrictions_v2.pa_form) AS pa_form,
        btrim(ftf_restrictions_v2.indication) AS indication,
        btrim(ftf_restrictions_v2.grouped_restriction_level) AS grouped_restriction_level,
        ftf_restrictions_v2.record_id,
        ftf_restrictions_v2.file_id
 FROM cleansed.ftf_restrictions_v2
 WHERE (ftf_restrictions_v2.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ftf_restrictions_v2.file_id
 FROM cleansed.ftf_restrictions_v2
 GROUP BY ftf_restrictions_v2.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ims_plan_xref AS
 SELECT btrim(ims_plan_xref.payer_num) AS payer_num,
        btrim(ims_plan_xref.payer_name) AS payer_name,
        btrim(ims_plan_xref.plan_num) AS plan_num,
        btrim(ims_plan_xref.payer_plan_num) AS payer_plan_num,
        btrim(ims_plan_xref.plan_name) AS plan_name,
        btrim(ims_plan_xref.model) AS model,
        btrim(ims_plan_xref.city) AS city,
        btrim(ims_plan_xref.hq_state) AS hq_state,
        btrim(ims_plan_xref.operating_state) AS operating_state,
        ims_plan_xref.months_with_data,
        ims_plan_xref.file_id,
        ims_plan_xref.record_id
 FROM cleansed.ims_plan_xref
 WHERE (ims_plan_xref.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ims_plan_xref.file_id
 FROM cleansed.ims_plan_xref
 GROUP BY ims_plan_xref.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ims_pbm_xref AS
 SELECT btrim(ims_pbm_xref.pbm_name) AS pbm_name,
        btrim(ims_pbm_xref.payer_plan_num) AS payer_plan_num,
        btrim(ims_pbm_xref.xref_to_payer_plan_num) AS xref_to_payer_plan_num,
        btrim(ims_pbm_xref.ipd_id) AS ipd_id,
        btrim(ims_pbm_xref.ipd_type) AS ipd_type,
        btrim(ims_pbm_xref.plan_name) AS plan_name,
        ims_pbm_xref.pbm_num,
        ims_pbm_xref.ims_processor_num,
        ims_pbm_xref.file_id,
        ims_pbm_xref.record_id
 FROM cleansed.ims_pbm_xref
 WHERE (ims_pbm_xref.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ims_pbm_xref.file_id
 FROM cleansed.ims_pbm_xref
 GROUP BY ims_pbm_xref.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ftf_ims_bridge AS
 SELECT btrim(ftf_ims_bridge.payer_name) AS payer_name,
        btrim(ftf_ims_bridge.code) AS code,
        btrim(ftf_ims_bridge.name) AS name,
        btrim(ftf_ims_bridge.state) AS state,
        btrim(ftf_ims_bridge.comments) AS comments,
        ftf_ims_bridge.plan_id,
        btrim(ftf_ims_bridge.plan_name) AS plan_name,
        btrim(ftf_ims_bridge.provider_name) AS provider_name,
        btrim(ftf_ims_bridge.plan_type_name) AS plan_type_name,
        ftf_ims_bridge.file_id,
        ftf_ims_bridge.record_id
 FROM cleansed.ftf_ims_bridge
 WHERE (ftf_ims_bridge.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ftf_ims_bridge.file_id
 FROM cleansed.ftf_ims_bridge
 GROUP BY ftf_ims_bridge.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_curr_month_ftf_formularies_cdw_v2 AS
 SELECT (replace(replace(btrim(ftf_formularies.health_plan_id), ' '::varchar(1), ' '::varchar(1)), ' '::varchar(1), ' '::varchar(1)))::float AS health_plan_id,
        (replace(replace(btrim(ftf_formularies.drug_id), ' '::varchar(1), ' '::varchar(1)), ' '::varchar(1), ' '::varchar(1)))::float AS drug_id,
        replace(replace(btrim(ftf_formularies.tier_code), ' '::varchar(1), ' '::varchar(1)), ' '::varchar(1), ' '::varchar(1)) AS tier_code,
        replace(replace(btrim(ftf_formularies.restrictions), ' '::varchar(1), ' '::varchar(1)), ' '::varchar(1), ' '::varchar(1)) AS restrictions,
        replace(replace(btrim(ftf_formularies.reason_code), ' '::varchar(1), ' '::varchar(1)), ' '::varchar(1), ' '::varchar(1)) AS reason_code,
        replace(replace(btrim(ftf_formularies.reason_code_description), ' '::varchar(1), ' '::varchar(1)), ' '::varchar(1), ' '::varchar(1)) AS reason_code_description,
        replace(replace(btrim(ftf_formularies.pharmacy_status), ' '::varchar(1), ' '::varchar(1)), ' '::varchar(1), ' '::varchar(1)) AS pharmacy_status,
        ftf_formularies.Market_Access_Coverage
 FROM cleansed.ftf_formularies
 WHERE (ftf_formularies.file_id IN ( SELECT max(ftf_formularies.file_id) AS max
 FROM cleansed.ftf_formularies));

CREATE  VIEW sandbox.asi_market_access_w_test AS
SELECT A.zip, A.state, A.payer_plan_num, A.report_num, A.ims_product_group_num, A.data_month, A.nrx_001, A.nrx_002, A.nrx_003, A.nrx_004, A.nrx_005, A.nrx_006, A.nrx_007, A.nrx_008, A.nrx_009, A.nrx_010, A.nrx_011, A.nrx_012, A.nrx_013, A.nrx_014, A.nrx_015, A.nrx_016, A.nrx_017, A.nrx_018, A.nrx_019, A.nrx_020, A.nrx_021, A.nrx_022, A.nrx_023, A.nrx_024, A.trx_001, A.trx_002, A.trx_003, A.trx_004, A.trx_005, A.trx_006, A.trx_007, A.trx_008, A.trx_009, A.trx_010, A.trx_011, A.trx_012, A.trx_013, A.trx_014, A.trx_015, A.trx_016, A.trx_017, A.trx_018, A.trx_019, A.trx_020, A.trx_021, A.trx_022, A.trx_023, A.trx_024 FROM ((SELECT coalesce(d.zip, o.zip, pcd.ptr_zip) AS zip, coalesce(d.state, o.state, pcd.ptr_state, mpzd.state) AS state, rx.payer_plan_number AS payer_plan_num, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END AS report_num, rx.ims_product_group AS ims_product_group_num, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) AS data_month, sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (((((datamart.prescriber_rx rx JOIN outbound.month_rollup_and_bucket iwb ON ((rx.rollup_month = iwb.month_ending))) LEFT JOIN (SELECT market_presc_zip_divisor.ims_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.state FROM outbound.market_presc_zip_divisor GROUP BY market_presc_zip_divisor.ims_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.state) mpzd ON (((rx.ims_id = mpzd.ims_id) AND (rx.ims_client_number = mpzd.ims_client_number) AND (rx.ims_report_number_cnt = mpzd.ims_report_number)))) LEFT JOIN (SELECT hcp_demo.tvcmid, hcp_demo.state_code AS state, hcp_demo.zip FROM datamart.customer_hcp_demographics hcp_demo WHERE (hcp_demo.file_id = (SELECT max(customer_hcp_demographics.file_id) AS MAX FROM datamart.customer_hcp_demographics))) d ON ((rx.tvcmid = d.tvcmid))) LEFT JOIN (SELECT hco_demo.tvcmid, hco_demo.state_code AS state, hco_demo.zip FROM datamart.customer_hco_demographics hco_demo WHERE (hco_demo.file_id = (SELECT max(customer_hco_demographics.file_id) AS MAX FROM datamart.customer_hco_demographics))) o ON ((rx.tvcmid = o.tvcmid))) LEFT JOIN (SELECT rnk.ims_id, rnk.ptr_state, rnk.ptr_zip FROM (SELECT DISTINCT prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source) AS rnk FROM datamart.prescriber_combined_demographics ORDER BY prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source)) rnk WHERE (rnk.rnk = 1)) pcd ON ((pcd.ims_id = rx.ims_id))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_report_number_cnt = ANY (ARRAY['1'::varchar(1), '2'::varchar(1), '3'::varchar(1), '4'::varchar(1), '5'::varchar(1), '6'::varchar(1), '68'::varchar(2)])) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9))) GROUP BY coalesce(d.zip, o.zip, pcd.ptr_zip), coalesce(d.state, o.state, pcd.ptr_state, mpzd.state), rx.payer_plan_number, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END, rx.ims_product_group, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) UNION ALL SELECT CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END AS ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END AS payer_plan_num, '55'::varchar(2) AS report_num, pg.ims_product_group AS ims_product_group_num, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x) AS data_month, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((datamart.specialty_pharmacy_shipment sp JOIN (SELECT month_rollup_and_bucket.month_ending, month_rollup_and_bucket.month_bucket FROM outbound.month_rollup_and_bucket) mth ON ((last_day(sp.ship_date) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source) pg ON (((pg.basket_id = sp.basket_id) AND (pg.data_source = sp.specialty_pharmacy_data_source)))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['Prime Therapeutics'::varchar(18), 'Prime Therapeutics'::varchar(18)])) AND (sp.ims_id IS NOT NULL)) GROUP BY CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END, pg.ims_product_group, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x)) UNION ALL SELECT CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END AS ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END AS payer_plan_num, '55'::varchar(2) AS report_num, pg.ims_product_group AS ims_product_group_num, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x) AS data_month, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((datamart.specialty_pharmacy_shipment sp JOIN (SELECT month_rollup_and_bucket.month_ending, month_rollup_and_bucket.month_bucket FROM outbound.month_rollup_and_bucket) mth ON ((add_months(last_day(sp.ship_date), 1) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source) pg ON (((pg.basket_id = sp.basket_id) AND (pg.data_source = sp.specialty_pharmacy_data_source)))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['OptumRx'::varchar(7), 'OptumRx'::varchar(7)])) AND (sp.ims_id IS NOT NULL)) GROUP BY CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END, pg.ims_product_group, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x)) A;

CREATE  VIEW sandbox.vw_concur_hcp_delta_0928 AS
 SELECT concat('H'::varchar(1), (trunc(hcp.tvcmid))::varchar) AS cust_id,
        NULL AS organization_name,
        'HCP'::varchar(3) AS contact_type,
        initcap(hcp.first_name) AS first_name,
        initcap(hcp.middle_name) AS middle_name,
        initcap(hcp.last_name) AS last_name,
        hcp.suffix,
        npi.npi,
        addr.address_line_1,
        addr.address_line_2,
        addr.city,
        addr.state,
        addr.zipcode,
        sln.license_number AS sln,
        sln.state AS sln_state,
        dea.dea_number AS dea,
        NULL AS affiliation,
        CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END AS credential,
        hcp.healthcare_professional_status_code,
        date((statement_timestamp())::timestamp) AS create_date
 FROM (((((( SELECT hcp.TVCMID AS tvcmid,
        hcp.FIRST_NAME AS first_name,
        hcp.MIDDLE_NAME AS middle_name,
        hcp.LAST_NAME AS last_name,
        hcp.SUFFIX AS suffix,
        hcp.HEALTHCARE_PROFESSIONAL_STATUS_CODE AS healthcare_professional_status_code,
        hcp.TEVA_SPECIALTY_CODE AS teva_specialty_code
 FROM (raw.mdm_hcp hcp JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_hcp.file_id
 FROM raw.mdm_hcp
 GROUP BY mdm_hcp.file_id) a) hcp_file ON (((hcp.file_id = hcp_file.file_id) AND (hcp_file.file_rank = 1))))) hcp JOIN ( SELECT ad.TVCMID AS tvcmid,
        ad.ADDRESS_ID AS address_id,
        ad.ADDRESS_STATUS AS address_status,
        ad.ADDRESS_TYPE AS address_type,
        initcap(ad.ADDRESS_LINE_1) AS address_line_1,
        initcap(ad.ADDRESS_LINE_2) AS address_line_2,
        initcap(ad.CITY) AS city,
        ad.STATE AS state,
        ad.ZIP5_POSTAL_CODE AS zipcode,
        rank() OVER (PARTITION BY ad.TVCMID ORDER BY ad.PRACTICE_LOCATION_RANK DESC, ad.record_id) AS addr_rank
 FROM (raw.mdm_address ad JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_address.file_id
 FROM raw.mdm_address
 GROUP BY mdm_address.file_id) a) addr_file ON (((ad.file_id = addr_file.file_id) AND (ad.ADDRESS_STATUS = 'A'::varchar(1)) AND (ad.SINGLE_ADDRESS_INDICATOR = 'Y'::varchar(1)) AND (addr_file.file_rank = 1))))) addr ON (((hcp.tvcmid = addr.tvcmid) AND (addr.addr_rank = 1)))) JOIN ( SELECT p.TVCMID AS tvcmid,
        d.profession_code_shortname,
        rank() OVER (PARTITION BY p.TVCMID ORDER BY p.CREATED_DATE DESC) AS rnk
 FROM (raw.mdm_professional p JOIN reference.Designations d ON (((p.PROFESSION_CODE = d.profession_code) AND (p.PROFESSION_RANK = 1::float) AND (p.STATUS = 'A'::varchar(1)))))) prof ON (((hcp.tvcmid = prof.tvcmid) AND (prof.rnk = 1)))) LEFT  JOIN ( SELECT mdm_dea_address.TVCMID AS tvcmid,
        mdm_dea_address.DEA_NUMBER AS dea_number,
        mdm_dea_address.ADDRESS_ID AS address_id,
        rank() OVER (PARTITION BY mdm_dea_address.TVCMID, mdm_dea_address.ADDRESS_ID ORDER BY mdm_dea_address.DEA_EXPIRATION_DATE DESC, mdm_dea_address.UPDATED_DATE DESC, mdm_dea_address.record_id) AS rnk
 FROM raw.mdm_dea_address
 WHERE (mdm_dea_address.DEA_STATUS_CODE = 'A'::varchar(1))) dea ON (((addr.address_id = dea.address_id) AND (addr.tvcmid = dea.tvcmid) AND (dea.rnk = 1)))) LEFT  JOIN ( SELECT npi.tvcmid,
        npi.npi
 FROM (( SELECT mdm_alternate_id.file_id,
        mdm_alternate_id.TVCMID AS tvcmid,
        max(mdm_alternate_id.ALTERNATE_ID_VALUE) AS npi
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id,
          mdm_alternate_id.TVCMID) npi JOIN ( SELECT b.file_id,
        rank() OVER (ORDER BY b.file_id DESC) AS file_rank
 FROM ( SELECT mdm_alternate_id.file_id
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id) b) npi2 ON (((npi.file_id = npi2.file_id) AND (npi2.file_rank = 1))))) npi ON ((hcp.tvcmid = npi.tvcmid))) LEFT  JOIN ( SELECT sln.TVCMID AS tvcmid,
        sln.AUTHORIZATION_NUMBER AS license_number,
        sln.STATE AS state,
        rank() OVER (PARTITION BY sln.TVCMID, sln.STATE ORDER BY sln.LICENSE_TYPE_PRIVILEGE_RANK, sln.LICENSE_EXPIRATION_DATE DESC, sln.LICENSE_EFFECTIVE_DATE DESC, sln.UPDATED_DATE DESC, sln.record_id) AS rnk
 FROM raw.mdm_license sln
 WHERE (sln.LICENSE_STATUS_CODE = 'A'::varchar(1))) sln ON (((hcp.tvcmid = sln.tvcmid) AND (addr.state = sln.state) AND (sln.rnk = 1))))
 GROUP BY concat('H'::varchar(1), (trunc(hcp.tvcmid))::varchar),
          NULL,
          'HCP'::varchar(3),
          initcap(hcp.first_name),
          initcap(hcp.middle_name),
          initcap(hcp.last_name),
          hcp.suffix,
          npi.npi,
          addr.address_line_1,
          addr.address_line_2,
          addr.city,
          addr.state,
          addr.zipcode,
          sln.license_number,
          sln.state,
          dea.dea_number,
          CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END,
          hcp.healthcare_professional_status_code,
          date((statement_timestamp())::timestamp) EXCEPT  SELECT concat('H'::varchar(1), (trunc(hcp.tvcmid))::varchar) AS cust_id,
        NULL AS organization_name,
        'HCP'::varchar(3) AS contact_type,
        initcap(hcp.first_name) AS first_name,
        initcap(hcp.middle_name) AS middle_name,
        initcap(hcp.last_name) AS last_name,
        hcp.suffix,
        npi.npi,
        addr.address_line_1,
        addr.address_line_2,
        addr.city,
        addr.state,
        addr.zipcode,
        sln.license_number AS sln,
        sln.state AS sln_state,
        dea.dea_number AS dea,
        NULL AS affiliation,
        CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END AS credential,
        hcp.healthcare_professional_status_code,
        date((statement_timestamp())::timestamp) AS create_date
 FROM (((((( SELECT hcp.TVCMID AS tvcmid,
        hcp.FIRST_NAME AS first_name,
        hcp.MIDDLE_NAME AS middle_name,
        hcp.LAST_NAME AS last_name,
        hcp.SUFFIX AS suffix,
        hcp.HEALTHCARE_PROFESSIONAL_STATUS_CODE AS healthcare_professional_status_code,
        hcp.TEVA_SPECIALTY_CODE AS teva_specialty_code
 FROM (raw.mdm_hcp hcp JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_hcp.file_id
 FROM raw.mdm_hcp
 GROUP BY mdm_hcp.file_id) a) hcp_file ON (((hcp.file_id = hcp_file.file_id) AND (hcp_file.file_rank = 2))))) hcp JOIN ( SELECT ad.TVCMID AS tvcmid,
        ad.ADDRESS_ID AS address_id,
        ad.ADDRESS_STATUS AS address_status,
        ad.ADDRESS_TYPE AS address_type,
        initcap(ad.ADDRESS_LINE_1) AS address_line_1,
        initcap(ad.ADDRESS_LINE_2) AS address_line_2,
        initcap(ad.CITY) AS city,
        ad.STATE AS state,
        ad.ZIP5_POSTAL_CODE AS zipcode,
        rank() OVER (PARTITION BY ad.TVCMID ORDER BY ad.PRACTICE_LOCATION_RANK DESC, ad.record_id) AS addr_rank
 FROM (raw.mdm_address ad JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_address.file_id
 FROM raw.mdm_address
 GROUP BY mdm_address.file_id) a) addr_file ON (((ad.file_id = addr_file.file_id) AND (ad.ADDRESS_STATUS = 'A'::varchar(1)) AND (ad.SINGLE_ADDRESS_INDICATOR = 'Y'::varchar(1)) AND (addr_file.file_rank = 2))))) addr ON (((hcp.tvcmid = addr.tvcmid) AND (addr.addr_rank = 1)))) JOIN ( SELECT p.TVCMID AS tvcmid,
        d.profession_code_shortname,
        rank() OVER (PARTITION BY p.TVCMID ORDER BY p.CREATED_DATE DESC) AS rnk
 FROM (raw.mdm_professional p JOIN reference.Designations d ON (((p.PROFESSION_CODE = d.profession_code) AND (p.PROFESSION_RANK = 1::float) AND (p.STATUS = 'A'::varchar(1)))))) prof ON (((hcp.tvcmid = prof.tvcmid) AND (prof.rnk = 1)))) LEFT  JOIN ( SELECT mdm_dea_address.TVCMID AS tvcmid,
        mdm_dea_address.DEA_NUMBER AS dea_number,
        mdm_dea_address.ADDRESS_ID AS address_id,
        rank() OVER (PARTITION BY mdm_dea_address.TVCMID, mdm_dea_address.ADDRESS_ID ORDER BY mdm_dea_address.DEA_EXPIRATION_DATE DESC, mdm_dea_address.UPDATED_DATE DESC, mdm_dea_address.record_id) AS rnk
 FROM raw.mdm_dea_address
 WHERE (mdm_dea_address.DEA_STATUS_CODE = 'A'::varchar(1))) dea ON (((addr.address_id = dea.address_id) AND (addr.tvcmid = dea.tvcmid) AND (dea.rnk = 1)))) LEFT  JOIN ( SELECT npi.tvcmid,
        npi.npi
 FROM (( SELECT mdm_alternate_id.file_id,
        mdm_alternate_id.TVCMID AS tvcmid,
        max(mdm_alternate_id.ALTERNATE_ID_VALUE) AS npi
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id,
          mdm_alternate_id.TVCMID) npi JOIN ( SELECT b.file_id,
        rank() OVER (ORDER BY b.file_id DESC) AS file_rank
 FROM ( SELECT mdm_alternate_id.file_id
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id) b) npi2 ON (((npi.file_id = npi2.file_id) AND (npi2.file_rank = 2))))) npi ON ((hcp.tvcmid = npi.tvcmid))) LEFT  JOIN ( SELECT sln.TVCMID AS tvcmid,
        sln.AUTHORIZATION_NUMBER AS license_number,
        sln.STATE AS state,
        rank() OVER (PARTITION BY sln.TVCMID, sln.STATE ORDER BY sln.LICENSE_TYPE_PRIVILEGE_RANK, sln.LICENSE_EXPIRATION_DATE DESC, sln.LICENSE_EFFECTIVE_DATE DESC, sln.UPDATED_DATE DESC, sln.record_id) AS rnk
 FROM raw.mdm_license sln
 WHERE (sln.LICENSE_STATUS_CODE = 'A'::varchar(1))) sln ON (((hcp.tvcmid = sln.tvcmid) AND (addr.state = sln.state) AND (sln.rnk = 1))))
 GROUP BY concat('H'::varchar(1), (trunc(hcp.tvcmid))::varchar),
          NULL,
          'HCP'::varchar(3),
          initcap(hcp.first_name),
          initcap(hcp.middle_name),
          initcap(hcp.last_name),
          hcp.suffix,
          npi.npi,
          addr.address_line_1,
          addr.address_line_2,
          addr.city,
          addr.state,
          addr.zipcode,
          sln.license_number,
          sln.state,
          dea.dea_number,
          CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END,
          hcp.healthcare_professional_status_code,
          date((statement_timestamp())::timestamp);
==> failed_tevaQA12G_sfa_history_csv_export.sql <==

==> failed_tevaQA12G_sfa_history_ddl_export.sql <==


CREATE  VIEW sfa_history.v_siebel_samples_prof AS
SELECT ap.ROW_ID AS sample_id, ea.ROW_ID AS call_id, c.ROW_ID AS siebel_contact_row_id, CASE WHEN (length(c.INTEGRATION_ID) = 18) THEN c.INTEGRATION_ID ELSE NULL END AS veeva_account_id, trunc(ea.APPT_START_DT, 'DD'::varchar(2)) AS call_date, rep_p.X_SALES_FORCE AS sales_force_id, rep_p.NAME AS territory_num, ea.SUBTYPE_CD AS subtype_cd, ea.TODO_CD AS todo_cd, CASE WHEN (ap.RELATION_TYPE_CD = 'Direct Send'::varchar(11)) THEN 'REQUEST'::varchar(7) WHEN (ap.RELATION_TYPE_CD = 'Sample'::varchar(6)) THEN 'DROP'::varchar(4) ELSE 'UNKNOWN'::varchar(7) END AS sample_type, CASE WHEN (p.DESC_TEXT ~~ 'Adipex%'::varchar(7)) THEN 'ADIPEX-P'::varchar(8) WHEN (p.DESC_TEXT ~~ 'Amrix%'::varchar(6)) THEN 'AMRIX'::varchar(5) WHEN (p.DESC_TEXT ~~ 'Azilect%'::varchar(8)) THEN 'AZILECT'::varchar(7) WHEN (p.DESC_TEXT ~~ 'Budesonide%'::varchar(11)) THEN 'BUDESONIDE'::varchar(10) WHEN (p.DESC_TEXT ~~ 'COPAXONE%'::varchar(9)) THEN 'COPAXONE'::varchar(8) WHEN (p.DESC_TEXT ~~ 'ENJUVIA%'::varchar(8)) THEN 'ENJUVIA'::varchar(7) WHEN (p.DESC_TEXT ~~ 'LoSeasonique%'::varchar(13)) THEN 'LOSEASONIQUE'::varchar(12) WHEN (p.DESC_TEXT ~~ 'NIASPAN%'::varchar(8)) THEN 'NIASPAN'::varchar(7) WHEN (p.DESC_TEXT ~~ 'Nuvigil%'::varchar(8)) THEN 'NUVIGIL'::varchar(7) WHEN (p.DESC_TEXT ~~ 'ProAir%'::varchar(7)) THEN 'PROAIR'::varchar(6) WHEN (p.DESC_TEXT ~~ 'Qnasl%'::varchar(6)) THEN 'QNASL'::varchar(5) WHEN (p.DESC_TEXT ~~ 'QVAR%'::varchar(5)) THEN 'QVAR'::varchar(4) WHEN (p.DESC_TEXT ~~ 'Seasonique%'::varchar(11)) THEN 'SEASONIQUE'::varchar(10) WHEN (p.DESC_TEXT ~~ 'Tev-Tropin%'::varchar(11)) THEN 'TEV-TROPIN'::varchar(10) ELSE 'UNKNOWN'::varchar(7) END AS product_name, p.DESC_TEXT AS sample_name, p.PART_NUM AS sample_ndc, ap.QTY AS qty, ea.NAME AS name_on_call, ea.COMMENTS AS address_line_on_call, ea.ZIPCODE AS zip_on_call, d.ims_id, eax.ATTRIB_03 AS dea_num, ea.OWNER_PER_ID AS ownerid, emp.CSN AS employeenumber, ea.CREATED_BY AS created_by, ea.CREATED AS created_date FROM (((((((sfa_history.s_evt_act ea JOIN sfa_history.s_contact c ON ((ea.TARGET_PER_ID = c.ROW_ID))) JOIN sfa_history.s_postn rep_p ON ((ea.OWNER_POSTN_ID = rep_p.ROW_ID))) JOIN sfa_history.s_act_prdint ap ON ((ea.ROW_ID = ap.ACTIVITY_ID))) JOIN sfa_history.s_prod_int p ON ((ap.PRDINT_ID = p.ROW_ID))) LEFT JOIN sfa_history.s_evt_act_x eax ON ((ea.ROW_ID = eax.ROW_ID))) LEFT JOIN sfa_history.s_contact emp ON ((emp.ROW_ID = ea.CREATED_BY))) LEFT JOIN (SELECT iq.ims_id, iq.cm_id, iq.me_num, iq.siebel_contact_row_id, iq.rnk FROM (SELECT DIM_SFA_CSF_DEMO.IMS_ID AS ims_id, DIM_SFA_CSF_DEMO.CM_ID AS cm_id, DIM_SFA_CSF_DEMO.ME_NUM AS me_num, DIM_SFA_CSF_DEMO.SIEBEL_CONTACT_ROW_ID AS siebel_contact_row_id, row_number() OVER (PARTITION BY DIM_SFA_CSF_DEMO.SIEBEL_CONTACT_ROW_ID ORDER BY DIM_SFA_CSF_DEMO.VEEVA_ACCOUNT_ID, DIM_SFA_CSF_DEMO.SALES_FORCE_ID) AS rnk FROM WSMP_ADMIN.DIM_SFA_CSF_DEMO) iq WHERE (iq.rnk = 1)) d ON ((c.ROW_ID = d.siebel_contact_row_id))) WHERE ((rep_p.POSTN_TYPE_CD = ANY (ARRAY['Sales Representative'::varchar(20), 'TSP Test Position'::varchar(17)])) AND (ap.RELATION_TYPE_CD = ANY (ARRAY['Direct Send'::varchar(11), 'Sample'::varchar(6)])) AND (ea.OWNER_POSTN_ID <> '0-5220'::varchar(6)) AND (ea.APPT_START_DT >= '2012-01-01 00:00:00'::timestamp(0)) AND (ea.APPT_START_DT < (statement_timestamp())::timestamp));
==> failed_tevaQA12G_tableau_csv_export.sql <==

==> failed_tevaQA12G_tableau_ddl_export.sql <==

==> failed_tevaQA12G_teva_ingestion_csv_export.sql <==

==> failed_tevaQA12G_teva_ingestion_ddl_export.sql <==



CREATE  VIEW teva_ingestion.EXT_VV_CALL2_VOD__C_test AS
SELECT EXT_VV_CALL2_VOD__C_src.ID, EXT_VV_CALL2_VOD__C_src.OWNERID, EXT_VV_CALL2_VOD__C_src.ISDELETED, EXT_VV_CALL2_VOD__C_src.NAME, EXT_VV_CALL2_VOD__C_src.RECORDTYPEID, EXT_VV_CALL2_VOD__C_src.CREATEDDATE, EXT_VV_CALL2_VOD__C_src.CREATEDBYID, EXT_VV_CALL2_VOD__C_src.LASTMODIFIEDDATE, EXT_VV_CALL2_VOD__C_src.LASTMODIFIEDBYID, EXT_VV_CALL2_VOD__C_src.SYSTEMMODSTAMP, EXT_VV_CALL2_VOD__C_src.LASTACTIVITYDATE, EXT_VV_CALL2_VOD__C_src.MAYEDIT, EXT_VV_CALL2_VOD__C_src.ISLOCKED, EXT_VV_CALL2_VOD__C_src.LASTVIEWEDDATE, EXT_VV_CALL2_VOD__C_src.LASTREFERENCEDDATE, EXT_VV_CALL2_VOD__C_src.SAMPLE_CARD_VOD__C, EXT_VV_CALL2_VOD__C_src.ADD_DETAIL_VOD__C, (EXT_VV_CALL2_VOD__C_src.PROPERTY_VOD__C)::numeric(8,0) AS PROPERTY_VOD__C, EXT_VV_CALL2_VOD__C_src.ACCOUNT_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_PRODUCT_DISCUSSION_VOD__C, EXT_VV_CALL2_VOD__C_src.STATUS_VOD__C, EXT_VV_CALL2_VOD__C_src.PARENT_ADDRESS_VOD__C, EXT_VV_CALL2_VOD__C_src.ACCOUNT_PLAN_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_SAVENEW_VOD__C, EXT_VV_CALL2_VOD__C_src.NEXT_CALL_NOTES_VOD__C, EXT_VV_CALL2_VOD__C_src.MOBILE_ID_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_ACCOUNT_CREDENTIALS_VOD_C, EXT_VV_CALL2_VOD__C_src.ZVOD_ACCOUNT_PREFERRED_NAME_VO, EXT_VV_CALL2_VOD__C_src.ZVOD_ACCOUNT_SAMPLE_STATUS_VOD, EXT_VV_CALL2_VOD__C_src.ZVOD_ATTENDEES_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_KEY_MESSAGES_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_DETAILING_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_EXPENSES_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_FOLLOWUP_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_SAMPLES_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_SAVE_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_SUBMIT_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_DELETE_VOD__C, EXT_VV_CALL2_VOD__C_src.ACTIVITY_TYPE__C, EXT_VV_CALL2_VOD__C_src.SIGNIFICANT_EVENT__C, EXT_VV_CALL2_VOD__C_src.LOCATION_VOD__C, EXT_VV_CALL2_VOD__C_src.SUBJECT_VOD__C, EXT_VV_CALL2_VOD__C_src.UNLOCK_VOD__C, (EXT_VV_CALL2_VOD__C_src.CALL_DATETIME_VOD__C)::timestamptz AS CALL_DATETIME_VOD__C, EXT_VV_CALL2_VOD__C_src.DISBURSED_TO_VOD__C, EXT_VV_CALL2_VOD__C_src.REQUEST_RECEIPT_VOD__C, EXT_VV_CALL2_VOD__C_src.SIGNATURE_DATE_VOD__C, EXT_VV_CALL2_VOD__C_src.TERRITORY_VOD__C, EXT_VV_CALL2_VOD__C_src.SUBMITTED_BY_MOBILE_VOD__C, EXT_VV_CALL2_VOD__C_src.CALL_TYPE_VOD__C, EXT_VV_CALL2_VOD__C_src.ADD_KEY_MESSAGE_VOD__C, EXT_VV_CALL2_VOD__C_src.ADDRESS_VOD__C, (EXT_VV_CALL2_VOD__C_src.ATTENDEES_VOD__C)::numeric(3,0) AS ATTENDEES_VOD__C, EXT_VV_CALL2_VOD__C_src.ATTENDEE_TYPE_VOD__C, EXT_VV_CALL2_VOD__C_src.CALL_DATE_VOD__C, EXT_VV_CALL2_VOD__C_src.DETAILED_PRODUCTS_VOD__C, EXT_VV_CALL2_VOD__C_src.NO_DISBURSEMENT_VOD__C, EXT_VV_CALL2_VOD__C_src.PARENT_CALL_VOD__C, EXT_VV_CALL2_VOD__C_src.USER_VOD__C, EXT_VV_CALL2_VOD__C_src.CONTACT_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_ENTITY_VOD__C, EXT_VV_CALL2_VOD__C_src.MEDICAL_EVENT_VOD__C, EXT_VV_CALL2_VOD__C_src.MOBILE_CREATED_DATETIME_VOD__C, EXT_VV_CALL2_VOD__C_src.MOBILE_LAST_MODIFIED_DATETIME, EXT_VV_CALL2_VOD__C_src.LICENSE_VOD__C, (EXT_VV_CALL2_VOD__C_src.IS_PARENT_CALL_VOD__C)::numeric(18,0) AS IS_PARENT_CALL_VOD__C, EXT_VV_CALL2_VOD__C_src.ENTITY_DISPLAY_NAME_VOD__C, EXT_VV_CALL2_VOD__C_src.OVERRIDE_LOCK_VOD__C, EXT_VV_CALL2_VOD__C_src.LAST_DEVICE_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_ADDRESS_LINE_1_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_ADDRESS_LINE_2_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_CITY_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_COUNTRY_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_LICENSE_EXPIRATION_DATE, EXT_VV_CALL2_VOD__C_src.SHIP_LICENSE_STATUS_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_LICENSE_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_STATE_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_TO_ADDRESS_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_ZIP_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_TO_ADDRESS_TEXT_VOD__C, EXT_VV_CALL2_VOD__C_src.CLM_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_CLMDETAILS_VOD__C, EXT_VV_CALL2_VOD__C_src.IS_SAMPLED_CALL_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_SURVEYS_VOD__C, EXT_VV_CALL2_VOD__C_src.PRESENTATIONS_VOD__C, EXT_VV_CALL2_VOD__C_src.ENTITY_REFERENCE_ID_VOD__C, EXT_VV_CALL2_VOD__C_src.ERROR_REFERENCE_CALL_VOD__C, (EXT_VV_CALL2_VOD__C_src.DURATION_VOD__C)::numeric(18,0) AS DURATION_VOD__C, EXT_VV_CALL2_VOD__C_src.COLOR_VOD__C, EXT_VV_CALL2_VOD__C_src.ALLOWED_PRODUCTS_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_ATTACHMENTS_VOD__C, EXT_VV_CALL2_VOD__C_src.SAMPLE_CARD_REASON_VOD__C, EXT_VV_CALL2_VOD__C_src.ASSMCA_VOD__C, EXT_VV_CALL2_VOD__C_src.ADDRESS_LINE_1_VOD__C, EXT_VV_CALL2_VOD__C_src.ADDRESS_LINE_2_VOD__C, EXT_VV_CALL2_VOD__C_src.CITY_VOD__C, EXT_VV_CALL2_VOD__C_src.DEA_ADDRESS_LINE_1_VOD__C, EXT_VV_CALL2_VOD__C_src.DEA_ADDRESS_LINE_2_VOD__C, EXT_VV_CALL2_VOD__C_src.DEA_ADDRESS_VOD__C, EXT_VV_CALL2_VOD__C_src.DEA_CITY_VOD__C, EXT_VV_CALL2_VOD__C_src.DEA_EXPIRATION_DATE_VOD__C, EXT_VV_CALL2_VOD__C_src.DEA_STATE_VOD__C, EXT_VV_CALL2_VOD__C_src.DEA_ZIP_4_VOD__C, EXT_VV_CALL2_VOD__C_src.DEA_ZIP_VOD__C, EXT_VV_CALL2_VOD__C_src.DEA_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_ZIP_4_VOD__C, EXT_VV_CALL2_VOD__C_src.STATE_VOD__C, EXT_VV_CALL2_VOD__C_src.ZIP_4_VOD__C, EXT_VV_CALL2_VOD__C_src.ZIP_VOD__C, EXT_VV_CALL2_VOD__C_src.SAMPLE_SEND_CARD_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_ADDRESS_VOD_C_DEA_STATUS_, EXT_VV_CALL2_VOD__C_src.SIGNATURE_PAGE_IMAGE_VOD__C, EXT_VV_CALL2_VOD__C_src.CREDENTIALS_VOD__C, EXT_VV_CALL2_VOD__C_src.SALUTATION_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_ACCOUNT_CALL_REMINDER_VOD, EXT_VV_CALL2_VOD__C_src.SALES_ORG_TVA__C, EXT_VV_CALL2_VOD__C_src.ZVOD_BUSINESS_ACCOUNT_VOD__C, EXT_VV_CALL2_VOD__C_src.PRODUCT_PRIORITY_1_VOD__C, EXT_VV_CALL2_VOD__C_src.PRODUCT_PRIORITY_2_VOD__C, EXT_VV_CALL2_VOD__C_src.PRODUCT_PRIORITY_3_VOD__C, EXT_VV_CALL2_VOD__C_src.PRODUCT_PRIORITY_4_VOD__C, EXT_VV_CALL2_VOD__C_src.PRODUCT_PRIORITY_5_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_MORE_ACTIONS_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_CALL_CONFLICT_STATUS, (EXT_VV_CALL2_VOD__C_src.SIGNATURE_TIMESTAMP_VOD__C)::numeric(15,0) AS SIGNATURE_TIMESTAMP_VOD__C, (EXT_VV_CALL2_VOD__C_src.EXPENSE_AMOUNT_VOD__C)::numeric(18,0) AS EXPENSE_AMOUNT_VOD__C, (EXT_VV_CALL2_VOD__C_src.TOTAL_EXPENSE_ATTENDEES_COUNT)::numeric(5,0) AS TOTAL_EXPENSE_ATTENDEES_COUNT, EXT_VV_CALL2_VOD__C_src.ATTENDEE_LIST_VOD__C, EXT_VV_CALL2_VOD__C_src.EXPENSE_POST_STATUS_VOD__C, EXT_VV_CALL2_VOD__C_src.ATTENDEE_POST_STATUS_VOD__C, EXT_VV_CALL2_VOD__C_src.EXPENSE_SYSTEM_EXTERNAL_ID, EXT_VV_CALL2_VOD__C_src.INCURRED_EXPENSE_VOD__C, EXT_VV_CALL2_VOD__C_src.ASSIGNER_VOD__C, EXT_VV_CALL2_VOD__C_src.ASSIGNMENT_DATETIME_VOD__C, EXT_VV_CALL2_VOD__C_src.ZVOD_CALL_OBJECTIVE_VOD__C, (EXT_VV_CALL2_VOD__C_src.SIGNATURE_LOCATION_LONGITUDE)::numeric(15,6) AS SIGNATURE_LOCATION_LONGITUDE, (EXT_VV_CALL2_VOD__C_src.SIGNATURE_LOCATION_LATITUDE)::numeric(15,6) AS SIGNATURE_LOCATION_LATITUDE, EXT_VV_CALL2_VOD__C_src.LOCATION_SERVICES_STATUS, EXT_VV_CALL2_VOD__C_src.CREATED_BY_TIMEZONE_TVA__C, EXT_VV_CALL2_VOD__C_src.LICENSE_EXPIRATION_DATE_VOD__C, EXT_VV_CALL2_VOD__C_src.LICENSE_STATUS_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_ASSMCA_VOD__C, EXT_VV_CALL2_VOD__C_src.SHIP_DEA_EXPIRATION_DATE, EXT_VV_CALL2_VOD__C_src.SHIP_DEA_VOD__C, EXT_VV_CALL2_VOD__C_src.CALL_METHOD_TVA__C, EXT_VV_CALL2_VOD__C_src.batch_id, EXT_VV_CALL2_VOD__C_src.row_id, EXT_VV_CALL2_VOD__C_src.update_ts FROM teva_ingestion.EXT_VV_CALL2_VOD__C_src;

CREATE  VIEW teva_ingestion.MS_MTHLY_RX_QTY AS
SELECT CASE WHEN (MS_MTHLY_RX_QTY_src.ims_client_num = ''::varchar) THEN NULL::int ELSE (btrim(MS_MTHLY_RX_QTY_src.ims_client_num))::int END AS ims_client_num, CASE WHEN (MS_MTHLY_RX_QTY_src.ims_report_num = ''::varchar) THEN NULL::int ELSE (btrim(MS_MTHLY_RX_QTY_src.ims_report_num))::int END AS ims_report_num, btrim(MS_MTHLY_RX_QTY_src.zip_other) AS zip_other, btrim(MS_MTHLY_RX_QTY_src.ims_id) AS ims_id, btrim(MS_MTHLY_RX_QTY_src.ndc) AS ndc, btrim(MS_MTHLY_RX_QTY_src.plan_id) AS plan_id, CASE WHEN (MS_MTHLY_RX_QTY_src.sales_category = ''::varchar) THEN NULL::int ELSE (btrim(MS_MTHLY_RX_QTY_src.sales_category))::int END AS sales_category, btrim(MS_MTHLY_RX_QTY_src.rx_type) AS rx_type, CASE WHEN (MS_MTHLY_RX_QTY_src.ims_product_group_num = ''::varchar) THEN NULL::int ELSE (btrim(MS_MTHLY_RX_QTY_src.ims_product_group_num))::int END AS ims_product_group_num, btrim(MS_MTHLY_RX_QTY_src.filler_01) AS filler_01, btrim(MS_MTHLY_RX_QTY_src.me_num) AS me_num, btrim(MS_MTHLY_RX_QTY_src.last_name) AS last_name, btrim(MS_MTHLY_RX_QTY_src.first_name) AS first_name, btrim(MS_MTHLY_RX_QTY_src.middle_name) AS middle_name, btrim(MS_MTHLY_RX_QTY_src.address) AS address, btrim(MS_MTHLY_RX_QTY_src.city) AS city, btrim(MS_MTHLY_RX_QTY_src.state) AS state, btrim(MS_MTHLY_RX_QTY_src.zip) AS zip, btrim(MS_MTHLY_RX_QTY_src.specialty) AS specialty, btrim(MS_MTHLY_RX_QTY_src.plan_name) AS plan_name, btrim(MS_MTHLY_RX_QTY_src.ndc_description) AS ndc_description, btrim(MS_MTHLY_RX_QTY_src.data_date) AS data_date, CASE WHEN (MS_MTHLY_RX_QTY_src.bucket_count = ''::varchar) THEN NULL::int ELSE (btrim(MS_MTHLY_RX_QTY_src.bucket_count))::int END AS bucket_count, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_001))::numeric(9,3) END AS nrx_001, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_002))::numeric(9,3) END AS nrx_002, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_003))::numeric(9,3) END AS nrx_003, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_004))::numeric(9,3) END AS nrx_004, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_005))::numeric(9,3) END AS nrx_005, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_006))::numeric(9,3) END AS nrx_006, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_007))::numeric(9,3) END AS nrx_007, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_008))::numeric(9,3) END AS nrx_008, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_009))::numeric(9,3) END AS nrx_009, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_010))::numeric(9,3) END AS nrx_010, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_011))::numeric(9,3) END AS nrx_011, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_012))::numeric(9,3) END AS nrx_012, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_013))::numeric(9,3) END AS nrx_013, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_014))::numeric(9,3) END AS nrx_014, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_015))::numeric(9,3) END AS nrx_015, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_016))::numeric(9,3) END AS nrx_016, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_017))::numeric(9,3) END AS nrx_017, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_018))::numeric(9,3) END AS nrx_018, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_019))::numeric(9,3) END AS nrx_019, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_020))::numeric(9,3) END AS nrx_020, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_021))::numeric(9,3) END AS nrx_021, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_022))::numeric(9,3) END AS nrx_022, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_023))::numeric(9,3) END AS nrx_023, CASE WHEN (MS_MTHLY_RX_QTY_src.nrx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.nrx_024))::numeric(9,3) END AS nrx_024, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_001))::numeric(9,3) END AS trx_001, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_002))::numeric(9,3) END AS trx_002, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_003))::numeric(9,3) END AS trx_003, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_004))::numeric(9,3) END AS trx_004, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_005))::numeric(9,3) END AS trx_005, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_006))::numeric(9,3) END AS trx_006, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_007))::numeric(9,3) END AS trx_007, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_008))::numeric(9,3) END AS trx_008, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_009))::numeric(9,3) END AS trx_009, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_010))::numeric(9,3) END AS trx_010, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_011))::numeric(9,3) END AS trx_011, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_012))::numeric(9,3) END AS trx_012, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_013))::numeric(9,3) END AS trx_013, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_014))::numeric(9,3) END AS trx_014, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_015))::numeric(9,3) END AS trx_015, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_016))::numeric(9,3) END AS trx_016, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_017))::numeric(9,3) END AS trx_017, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_018))::numeric(9,3) END AS trx_018, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_019))::numeric(9,3) END AS trx_019, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_020))::numeric(9,3) END AS trx_020, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_021))::numeric(9,3) END AS trx_021, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_022))::numeric(9,3) END AS trx_022, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_023))::numeric(9,3) END AS trx_023, CASE WHEN (MS_MTHLY_RX_QTY_src.trx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_QTY_src.trx_024))::numeric(9,3) END AS trx_024, MS_MTHLY_RX_QTY_src.batch_id, MS_MTHLY_RX_QTY_src.row_id, MS_MTHLY_RX_QTY_src.update_ts FROM teva_ingestion.MS_MTHLY_RX_QTY_src;

CREATE  VIEW teva_ingestion.MS_WKLY_RX_QTY AS
SELECT CASE WHEN (MS_WKLY_RX_QTY_src.ims_client_num = ''::varchar) THEN NULL::int ELSE (btrim(MS_WKLY_RX_QTY_src.ims_client_num))::int END AS ims_client_num, CASE WHEN (MS_WKLY_RX_QTY_src.ims_report_num = ''::varchar) THEN NULL::int ELSE (btrim(MS_WKLY_RX_QTY_src.ims_report_num))::int END AS ims_report_num, btrim(MS_WKLY_RX_QTY_src.zip_other) AS zip_other, btrim(MS_WKLY_RX_QTY_src.ims_id) AS ims_id, btrim(MS_WKLY_RX_QTY_src.ndc) AS ndc, btrim(MS_WKLY_RX_QTY_src.plan_id) AS plan_id, CASE WHEN (MS_WKLY_RX_QTY_src.sales_category = ''::varchar) THEN NULL::int ELSE (btrim(MS_WKLY_RX_QTY_src.sales_category))::int END AS sales_category, btrim(MS_WKLY_RX_QTY_src.rx_type) AS rx_type, CASE WHEN (MS_WKLY_RX_QTY_src.ims_product_group_num = ''::varchar) THEN NULL::int ELSE (btrim(MS_WKLY_RX_QTY_src.ims_product_group_num))::int END AS ims_product_group_num, btrim(MS_WKLY_RX_QTY_src.filler_01) AS filler_01, btrim(MS_WKLY_RX_QTY_src.me_num) AS me_num, btrim(MS_WKLY_RX_QTY_src.last_name) AS last_name, btrim(MS_WKLY_RX_QTY_src.first_name) AS first_name, btrim(MS_WKLY_RX_QTY_src.middle_name) AS middle_name, btrim(MS_WKLY_RX_QTY_src.address) AS address, btrim(MS_WKLY_RX_QTY_src.city) AS city, btrim(MS_WKLY_RX_QTY_src.state) AS state, btrim(MS_WKLY_RX_QTY_src.zip) AS zip, btrim(MS_WKLY_RX_QTY_src.specialty) AS specialty, btrim(MS_WKLY_RX_QTY_src.plan_name) AS plan_name, btrim(MS_WKLY_RX_QTY_src.ndc_description) AS ndc_description, btrim(MS_WKLY_RX_QTY_src.data_date) AS data_date, CASE WHEN (MS_WKLY_RX_QTY_src.bucket_count = ''::varchar) THEN NULL::int ELSE (btrim(MS_WKLY_RX_QTY_src.bucket_count))::int END AS bucket_count, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_001))::numeric(9,3) END AS nrx_001, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_002))::numeric(9,3) END AS nrx_002, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_003))::numeric(9,3) END AS nrx_003, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_004))::numeric(9,3) END AS nrx_004, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_005))::numeric(9,3) END AS nrx_005, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_006))::numeric(9,3) END AS nrx_006, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_007))::numeric(9,3) END AS nrx_007, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_008))::numeric(9,3) END AS nrx_008, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_009))::numeric(9,3) END AS nrx_009, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_010))::numeric(9,3) END AS nrx_010, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_011))::numeric(9,3) END AS nrx_011, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_012))::numeric(9,3) END AS nrx_012, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_013))::numeric(9,3) END AS nrx_013, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_014))::numeric(9,3) END AS nrx_014, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_015))::numeric(9,3) END AS nrx_015, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_016))::numeric(9,3) END AS nrx_016, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_017))::numeric(9,3) END AS nrx_017, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_018))::numeric(9,3) END AS nrx_018, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_019))::numeric(9,3) END AS nrx_019, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_020))::numeric(9,3) END AS nrx_020, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_021))::numeric(9,3) END AS nrx_021, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_022))::numeric(9,3) END AS nrx_022, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_023))::numeric(9,3) END AS nrx_023, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_024))::numeric(9,3) END AS nrx_024, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_025 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_025))::numeric(9,3) END AS nrx_025, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_026 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_026))::numeric(9,3) END AS nrx_026, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_027 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_027))::numeric(9,3) END AS nrx_027, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_028 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_028))::numeric(9,3) END AS nrx_028, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_029 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_029))::numeric(9,3) END AS nrx_029, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_030 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_030))::numeric(9,3) END AS nrx_030, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_031 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_031))::numeric(9,3) END AS nrx_031, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_032 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_032))::numeric(9,3) END AS nrx_032, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_033 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_033))::numeric(9,3) END AS nrx_033, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_034 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_034))::numeric(9,3) END AS nrx_034, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_035 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_035))::numeric(9,3) END AS nrx_035, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_036 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_036))::numeric(9,3) END AS nrx_036, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_037 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_037))::numeric(9,3) END AS nrx_037, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_038 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_038))::numeric(9,3) END AS nrx_038, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_039 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_039))::numeric(9,3) END AS nrx_039, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_040 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_040))::numeric(9,3) END AS nrx_040, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_041 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_041))::numeric(9,3) END AS nrx_041, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_042 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_042))::numeric(9,3) END AS nrx_042, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_043 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_043))::numeric(9,3) END AS nrx_043, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_044 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_044))::numeric(9,3) END AS nrx_044, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_045 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_045))::numeric(9,3) END AS nrx_045, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_046 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_046))::numeric(9,3) END AS nrx_046, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_047 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_047))::numeric(9,3) END AS nrx_047, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_048 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_048))::numeric(9,3) END AS nrx_048, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_049 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_049))::numeric(9,3) END AS nrx_049, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_050 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_050))::numeric(9,3) END AS nrx_050, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_051 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_051))::numeric(9,3) END AS nrx_051, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_052 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_052))::numeric(9,3) END AS nrx_052, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_053 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_053))::numeric(9,3) END AS nrx_053, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_054 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_054))::numeric(9,3) END AS nrx_054, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_055 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_055))::numeric(9,3) END AS nrx_055, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_056 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_056))::numeric(9,3) END AS nrx_056, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_057 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_057))::numeric(9,3) END AS nrx_057, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_058 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_058))::numeric(9,3) END AS nrx_058, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_059 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_059))::numeric(9,3) END AS nrx_059, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_060 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_060))::numeric(9,3) END AS nrx_060, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_061 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_061))::numeric(9,3) END AS nrx_061, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_062 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_062))::numeric(9,3) END AS nrx_062, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_063 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_063))::numeric(9,3) END AS nrx_063, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_064 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_064))::numeric(9,3) END AS nrx_064, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_065 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_065))::numeric(9,3) END AS nrx_065, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_066 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_066))::numeric(9,3) END AS nrx_066, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_067 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_067))::numeric(9,3) END AS nrx_067, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_068 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_068))::numeric(9,3) END AS nrx_068, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_069 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_069))::numeric(9,3) END AS nrx_069, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_070 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_070))::numeric(9,3) END AS nrx_070, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_071 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_071))::numeric(9,3) END AS nrx_071, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_072 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_072))::numeric(9,3) END AS nrx_072, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_073 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_073))::numeric(9,3) END AS nrx_073, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_074 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_074))::numeric(9,3) END AS nrx_074, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_075 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_075))::numeric(9,3) END AS nrx_075, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_076 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_076))::numeric(9,3) END AS nrx_076, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_077 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_077))::numeric(9,3) END AS nrx_077, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_078 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_078))::numeric(9,3) END AS nrx_078, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_079 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_079))::numeric(9,3) END AS nrx_079, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_080 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_080))::numeric(9,3) END AS nrx_080, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_081 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_081))::numeric(9,3) END AS nrx_081, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_082 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_082))::numeric(9,3) END AS nrx_082, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_083 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_083))::numeric(9,3) END AS nrx_083, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_084 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_084))::numeric(9,3) END AS nrx_084, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_085 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_085))::numeric(9,3) END AS nrx_085, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_086 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_086))::numeric(9,3) END AS nrx_086, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_087 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_087))::numeric(9,3) END AS nrx_087, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_088 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_088))::numeric(9,3) END AS nrx_088, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_089 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_089))::numeric(9,3) END AS nrx_089, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_090 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_090))::numeric(9,3) END AS nrx_090, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_091 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_091))::numeric(9,3) END AS nrx_091, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_092 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_092))::numeric(9,3) END AS nrx_092, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_093 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_093))::numeric(9,3) END AS nrx_093, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_094 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_094))::numeric(9,3) END AS nrx_094, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_095 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_095))::numeric(9,3) END AS nrx_095, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_096 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_096))::numeric(9,3) END AS nrx_096, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_097 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_097))::numeric(9,3) END AS nrx_097, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_098 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_098))::numeric(9,3) END AS nrx_098, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_099 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_099))::numeric(9,3) END AS nrx_099, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_100 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_100))::numeric(9,3) END AS nrx_100, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_101 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_101))::numeric(9,3) END AS nrx_101, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_102 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_102))::numeric(9,3) END AS nrx_102, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_103 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_103))::numeric(9,3) END AS nrx_103, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_104 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_104))::numeric(9,3) END AS nrx_104, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_105 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_105))::numeric(9,3) END AS nrx_105, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_106 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_106))::numeric(9,3) END AS nrx_106, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_107 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_107))::numeric(9,3) END AS nrx_107, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_108 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_108))::numeric(9,3) END AS nrx_108, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_109 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_109))::numeric(9,3) END AS nrx_109, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_110 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_110))::numeric(9,3) END AS nrx_110, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_111 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_111))::numeric(9,3) END AS nrx_111, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_112 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_112))::numeric(9,3) END AS nrx_112, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_113 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_113))::numeric(9,3) END AS nrx_113, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_114 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_114))::numeric(9,3) END AS nrx_114, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_115 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_115))::numeric(9,3) END AS nrx_115, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_116 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_116))::numeric(9,3) END AS nrx_116, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_117 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_117))::numeric(9,3) END AS nrx_117, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_118 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_118))::numeric(9,3) END AS nrx_118, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_119 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_119))::numeric(9,3) END AS nrx_119, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_120 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_120))::numeric(9,3) END AS nrx_120, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_121 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_121))::numeric(9,3) END AS nrx_121, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_122 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_122))::numeric(9,3) END AS nrx_122, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_123 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_123))::numeric(9,3) END AS nrx_123, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_124 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_124))::numeric(9,3) END AS nrx_124, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_125 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_125))::numeric(9,3) END AS nrx_125, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_126 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_126))::numeric(9,3) END AS nrx_126, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_127 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_127))::numeric(9,3) END AS nrx_127, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_128 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_128))::numeric(9,3) END AS nrx_128, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_129 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_129))::numeric(9,3) END AS nrx_129, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_130 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_130))::numeric(9,3) END AS nrx_130, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_131 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_131))::numeric(9,3) END AS nrx_131, CASE WHEN (MS_WKLY_RX_QTY_src.nrx_132 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.nrx_132))::numeric(9,3) END AS nrx_132, CASE WHEN (MS_WKLY_RX_QTY_src.trx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_001))::numeric(9,3) END AS trx_001, CASE WHEN (MS_WKLY_RX_QTY_src.trx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_002))::numeric(9,3) END AS trx_002, CASE WHEN (MS_WKLY_RX_QTY_src.trx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_003))::numeric(9,3) END AS trx_003, CASE WHEN (MS_WKLY_RX_QTY_src.trx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_004))::numeric(9,3) END AS trx_004, CASE WHEN (MS_WKLY_RX_QTY_src.trx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_005))::numeric(9,3) END AS trx_005, CASE WHEN (MS_WKLY_RX_QTY_src.trx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_006))::numeric(9,3) END AS trx_006, CASE WHEN (MS_WKLY_RX_QTY_src.trx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_007))::numeric(9,3) END AS trx_007, CASE WHEN (MS_WKLY_RX_QTY_src.trx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_008))::numeric(9,3) END AS trx_008, CASE WHEN (MS_WKLY_RX_QTY_src.trx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_009))::numeric(9,3) END AS trx_009, CASE WHEN (MS_WKLY_RX_QTY_src.trx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_010))::numeric(9,3) END AS trx_010, CASE WHEN (MS_WKLY_RX_QTY_src.trx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_011))::numeric(9,3) END AS trx_011, CASE WHEN (MS_WKLY_RX_QTY_src.trx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_012))::numeric(9,3) END AS trx_012, CASE WHEN (MS_WKLY_RX_QTY_src.trx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_013))::numeric(9,3) END AS trx_013, CASE WHEN (MS_WKLY_RX_QTY_src.trx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_014))::numeric(9,3) END AS trx_014, CASE WHEN (MS_WKLY_RX_QTY_src.trx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_015))::numeric(9,3) END AS trx_015, CASE WHEN (MS_WKLY_RX_QTY_src.trx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_016))::numeric(9,3) END AS trx_016, CASE WHEN (MS_WKLY_RX_QTY_src.trx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_017))::numeric(9,3) END AS trx_017, CASE WHEN (MS_WKLY_RX_QTY_src.trx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_018))::numeric(9,3) END AS trx_018, CASE WHEN (MS_WKLY_RX_QTY_src.trx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_019))::numeric(9,3) END AS trx_019, CASE WHEN (MS_WKLY_RX_QTY_src.trx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_020))::numeric(9,3) END AS trx_020, CASE WHEN (MS_WKLY_RX_QTY_src.trx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_021))::numeric(9,3) END AS trx_021, CASE WHEN (MS_WKLY_RX_QTY_src.trx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_022))::numeric(9,3) END AS trx_022, CASE WHEN (MS_WKLY_RX_QTY_src.trx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_023))::numeric(9,3) END AS trx_023, CASE WHEN (MS_WKLY_RX_QTY_src.trx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_024))::numeric(9,3) END AS trx_024, CASE WHEN (MS_WKLY_RX_QTY_src.trx_025 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_025))::numeric(9,3) END AS trx_025, CASE WHEN (MS_WKLY_RX_QTY_src.trx_026 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_026))::numeric(9,3) END AS trx_026, CASE WHEN (MS_WKLY_RX_QTY_src.trx_027 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_027))::numeric(9,3) END AS trx_027, CASE WHEN (MS_WKLY_RX_QTY_src.trx_028 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_028))::numeric(9,3) END AS trx_028, CASE WHEN (MS_WKLY_RX_QTY_src.trx_029 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_029))::numeric(9,3) END AS trx_029, CASE WHEN (MS_WKLY_RX_QTY_src.trx_030 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_030))::numeric(9,3) END AS trx_030, CASE WHEN (MS_WKLY_RX_QTY_src.trx_031 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_031))::numeric(9,3) END AS trx_031, CASE WHEN (MS_WKLY_RX_QTY_src.trx_032 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_032))::numeric(9,3) END AS trx_032, CASE WHEN (MS_WKLY_RX_QTY_src.trx_033 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_033))::numeric(9,3) END AS trx_033, CASE WHEN (MS_WKLY_RX_QTY_src.trx_034 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_034))::numeric(9,3) END AS trx_034, CASE WHEN (MS_WKLY_RX_QTY_src.trx_035 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_035))::numeric(9,3) END AS trx_035, CASE WHEN (MS_WKLY_RX_QTY_src.trx_036 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_036))::numeric(9,3) END AS trx_036, CASE WHEN (MS_WKLY_RX_QTY_src.trx_037 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_037))::numeric(9,3) END AS trx_037, CASE WHEN (MS_WKLY_RX_QTY_src.trx_038 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_038))::numeric(9,3) END AS trx_038, CASE WHEN (MS_WKLY_RX_QTY_src.trx_039 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_039))::numeric(9,3) END AS trx_039, CASE WHEN (MS_WKLY_RX_QTY_src.trx_040 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_040))::numeric(9,3) END AS trx_040, CASE WHEN (MS_WKLY_RX_QTY_src.trx_041 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_041))::numeric(9,3) END AS trx_041, CASE WHEN (MS_WKLY_RX_QTY_src.trx_042 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_042))::numeric(9,3) END AS trx_042, CASE WHEN (MS_WKLY_RX_QTY_src.trx_043 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_043))::numeric(9,3) END AS trx_043, CASE WHEN (MS_WKLY_RX_QTY_src.trx_044 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_044))::numeric(9,3) END AS trx_044, CASE WHEN (MS_WKLY_RX_QTY_src.trx_045 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_045))::numeric(9,3) END AS trx_045, CASE WHEN (MS_WKLY_RX_QTY_src.trx_046 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_046))::numeric(9,3) END AS trx_046, CASE WHEN (MS_WKLY_RX_QTY_src.trx_047 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_047))::numeric(9,3) END AS trx_047, CASE WHEN (MS_WKLY_RX_QTY_src.trx_048 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_048))::numeric(9,3) END AS trx_048, CASE WHEN (MS_WKLY_RX_QTY_src.trx_049 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_049))::numeric(9,3) END AS trx_049, CASE WHEN (MS_WKLY_RX_QTY_src.trx_050 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_050))::numeric(9,3) END AS trx_050, CASE WHEN (MS_WKLY_RX_QTY_src.trx_051 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_051))::numeric(9,3) END AS trx_051, CASE WHEN (MS_WKLY_RX_QTY_src.trx_052 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_052))::numeric(9,3) END AS trx_052, CASE WHEN (MS_WKLY_RX_QTY_src.trx_053 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_053))::numeric(9,3) END AS trx_053, CASE WHEN (MS_WKLY_RX_QTY_src.trx_054 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_054))::numeric(9,3) END AS trx_054, CASE WHEN (MS_WKLY_RX_QTY_src.trx_055 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_055))::numeric(9,3) END AS trx_055, CASE WHEN (MS_WKLY_RX_QTY_src.trx_056 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_056))::numeric(9,3) END AS trx_056, CASE WHEN (MS_WKLY_RX_QTY_src.trx_057 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_057))::numeric(9,3) END AS trx_057, CASE WHEN (MS_WKLY_RX_QTY_src.trx_058 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_058))::numeric(9,3) END AS trx_058, CASE WHEN (MS_WKLY_RX_QTY_src.trx_059 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_059))::numeric(9,3) END AS trx_059, CASE WHEN (MS_WKLY_RX_QTY_src.trx_060 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_060))::numeric(9,3) END AS trx_060, CASE WHEN (MS_WKLY_RX_QTY_src.trx_061 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_061))::numeric(9,3) END AS trx_061, CASE WHEN (MS_WKLY_RX_QTY_src.trx_062 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_062))::numeric(9,3) END AS trx_062, CASE WHEN (MS_WKLY_RX_QTY_src.trx_063 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_063))::numeric(9,3) END AS trx_063, CASE WHEN (MS_WKLY_RX_QTY_src.trx_064 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_064))::numeric(9,3) END AS trx_064, CASE WHEN (MS_WKLY_RX_QTY_src.trx_065 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_065))::numeric(9,3) END AS trx_065, CASE WHEN (MS_WKLY_RX_QTY_src.trx_066 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_066))::numeric(9,3) END AS trx_066, CASE WHEN (MS_WKLY_RX_QTY_src.trx_067 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_067))::numeric(9,3) END AS trx_067, CASE WHEN (MS_WKLY_RX_QTY_src.trx_068 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_068))::numeric(9,3) END AS trx_068, CASE WHEN (MS_WKLY_RX_QTY_src.trx_069 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_069))::numeric(9,3) END AS trx_069, CASE WHEN (MS_WKLY_RX_QTY_src.trx_070 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_070))::numeric(9,3) END AS trx_070, CASE WHEN (MS_WKLY_RX_QTY_src.trx_071 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_071))::numeric(9,3) END AS trx_071, CASE WHEN (MS_WKLY_RX_QTY_src.trx_072 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_072))::numeric(9,3) END AS trx_072, CASE WHEN (MS_WKLY_RX_QTY_src.trx_073 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_073))::numeric(9,3) END AS trx_073, CASE WHEN (MS_WKLY_RX_QTY_src.trx_074 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_074))::numeric(9,3) END AS trx_074, CASE WHEN (MS_WKLY_RX_QTY_src.trx_075 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_075))::numeric(9,3) END AS trx_075, CASE WHEN (MS_WKLY_RX_QTY_src.trx_076 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_076))::numeric(9,3) END AS trx_076, CASE WHEN (MS_WKLY_RX_QTY_src.trx_077 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_077))::numeric(9,3) END AS trx_077, CASE WHEN (MS_WKLY_RX_QTY_src.trx_078 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_078))::numeric(9,3) END AS trx_078, CASE WHEN (MS_WKLY_RX_QTY_src.trx_079 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_079))::numeric(9,3) END AS trx_079, CASE WHEN (MS_WKLY_RX_QTY_src.trx_080 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_080))::numeric(9,3) END AS trx_080, CASE WHEN (MS_WKLY_RX_QTY_src.trx_081 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_081))::numeric(9,3) END AS trx_081, CASE WHEN (MS_WKLY_RX_QTY_src.trx_082 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_082))::numeric(9,3) END AS trx_082, CASE WHEN (MS_WKLY_RX_QTY_src.trx_083 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_083))::numeric(9,3) END AS trx_083, CASE WHEN (MS_WKLY_RX_QTY_src.trx_084 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_084))::numeric(9,3) END AS trx_084, CASE WHEN (MS_WKLY_RX_QTY_src.trx_085 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_085))::numeric(9,3) END AS trx_085, CASE WHEN (MS_WKLY_RX_QTY_src.trx_086 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_086))::numeric(9,3) END AS trx_086, CASE WHEN (MS_WKLY_RX_QTY_src.trx_087 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_087))::numeric(9,3) END AS trx_087, CASE WHEN (MS_WKLY_RX_QTY_src.trx_088 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_088))::numeric(9,3) END AS trx_088, CASE WHEN (MS_WKLY_RX_QTY_src.trx_089 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_089))::numeric(9,3) END AS trx_089, CASE WHEN (MS_WKLY_RX_QTY_src.trx_090 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_090))::numeric(9,3) END AS trx_090, CASE WHEN (MS_WKLY_RX_QTY_src.trx_091 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_091))::numeric(9,3) END AS trx_091, CASE WHEN (MS_WKLY_RX_QTY_src.trx_092 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_092))::numeric(9,3) END AS trx_092, CASE WHEN (MS_WKLY_RX_QTY_src.trx_093 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_093))::numeric(9,3) END AS trx_093, CASE WHEN (MS_WKLY_RX_QTY_src.trx_094 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_094))::numeric(9,3) END AS trx_094, CASE WHEN (MS_WKLY_RX_QTY_src.trx_095 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_095))::numeric(9,3) END AS trx_095, CASE WHEN (MS_WKLY_RX_QTY_src.trx_096 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_096))::numeric(9,3) END AS trx_096, CASE WHEN (MS_WKLY_RX_QTY_src.trx_097 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_097))::numeric(9,3) END AS trx_097, CASE WHEN (MS_WKLY_RX_QTY_src.trx_098 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_098))::numeric(9,3) END AS trx_098, CASE WHEN (MS_WKLY_RX_QTY_src.trx_099 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_099))::numeric(9,3) END AS trx_099, CASE WHEN (MS_WKLY_RX_QTY_src.trx_100 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_100))::numeric(9,3) END AS trx_100, CASE WHEN (MS_WKLY_RX_QTY_src.trx_101 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_101))::numeric(9,3) END AS trx_101, CASE WHEN (MS_WKLY_RX_QTY_src.trx_102 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_102))::numeric(9,3) END AS trx_102, CASE WHEN (MS_WKLY_RX_QTY_src.trx_103 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_103))::numeric(9,3) END AS trx_103, CASE WHEN (MS_WKLY_RX_QTY_src.trx_104 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_104))::numeric(9,3) END AS trx_104, CASE WHEN (MS_WKLY_RX_QTY_src.trx_105 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_105))::numeric(9,3) END AS trx_105, CASE WHEN (MS_WKLY_RX_QTY_src.trx_106 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_106))::numeric(9,3) END AS trx_106, CASE WHEN (MS_WKLY_RX_QTY_src.trx_107 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_107))::numeric(9,3) END AS trx_107, CASE WHEN (MS_WKLY_RX_QTY_src.trx_108 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_108))::numeric(9,3) END AS trx_108, CASE WHEN (MS_WKLY_RX_QTY_src.trx_109 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_109))::numeric(9,3) END AS trx_109, CASE WHEN (MS_WKLY_RX_QTY_src.trx_110 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_110))::numeric(9,3) END AS trx_110, CASE WHEN (MS_WKLY_RX_QTY_src.trx_111 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_111))::numeric(9,3) END AS trx_111, CASE WHEN (MS_WKLY_RX_QTY_src.trx_112 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_112))::numeric(9,3) END AS trx_112, CASE WHEN (MS_WKLY_RX_QTY_src.trx_113 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_113))::numeric(9,3) END AS trx_113, CASE WHEN (MS_WKLY_RX_QTY_src.trx_114 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_114))::numeric(9,3) END AS trx_114, CASE WHEN (MS_WKLY_RX_QTY_src.trx_115 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_115))::numeric(9,3) END AS trx_115, CASE WHEN (MS_WKLY_RX_QTY_src.trx_116 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_116))::numeric(9,3) END AS trx_116, CASE WHEN (MS_WKLY_RX_QTY_src.trx_117 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_117))::numeric(9,3) END AS trx_117, CASE WHEN (MS_WKLY_RX_QTY_src.trx_118 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_118))::numeric(9,3) END AS trx_118, CASE WHEN (MS_WKLY_RX_QTY_src.trx_119 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_119))::numeric(9,3) END AS trx_119, CASE WHEN (MS_WKLY_RX_QTY_src.trx_120 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_120))::numeric(9,3) END AS trx_120, CASE WHEN (MS_WKLY_RX_QTY_src.trx_121 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_121))::numeric(9,3) END AS trx_121, CASE WHEN (MS_WKLY_RX_QTY_src.trx_122 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_122))::numeric(9,3) END AS trx_122, CASE WHEN (MS_WKLY_RX_QTY_src.trx_123 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_123))::numeric(9,3) END AS trx_123, CASE WHEN (MS_WKLY_RX_QTY_src.trx_124 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_124))::numeric(9,3) END AS trx_124, CASE WHEN (MS_WKLY_RX_QTY_src.trx_125 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_125))::numeric(9,3) END AS trx_125, CASE WHEN (MS_WKLY_RX_QTY_src.trx_126 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_126))::numeric(9,3) END AS trx_126, CASE WHEN (MS_WKLY_RX_QTY_src.trx_127 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_127))::numeric(9,3) END AS trx_127, CASE WHEN (MS_WKLY_RX_QTY_src.trx_128 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_128))::numeric(9,3) END AS trx_128, CASE WHEN (MS_WKLY_RX_QTY_src.trx_129 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_129))::numeric(9,3) END AS trx_129, CASE WHEN (MS_WKLY_RX_QTY_src.trx_130 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_130))::numeric(9,3) END AS trx_130, CASE WHEN (MS_WKLY_RX_QTY_src.trx_131 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_131))::numeric(9,3) END AS trx_131, CASE WHEN (MS_WKLY_RX_QTY_src.trx_132 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_QTY_src.trx_132))::numeric(9,3) END AS trx_132, MS_WKLY_RX_QTY_src.batch_id, MS_WKLY_RX_QTY_src.row_id, MS_WKLY_RX_QTY_src.update_ts FROM teva_ingestion.MS_WKLY_RX_QTY_src;

CREATE  VIEW teva_ingestion.EXTERNAL_TABLE_CLEANUP AS
SELECT EXTERNAL_TABLE_CLEANUP_src.TABLE_NAME, EXTERNAL_TABLE_CLEANUP_src.ERROR_FLAG, CASE WHEN (EXTERNAL_TABLE_CLEANUP_src.NUM_ROWS = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXTERNAL_TABLE_CLEANUP_src.NUM_ROWS)::numeric(37,15) END AS NUM_ROWS, EXTERNAL_TABLE_CLEANUP_src.REMOVE, EXTERNAL_TABLE_CLEANUP_src.LOCATION, EXTERNAL_TABLE_CLEANUP_src.DIRECTORY_NAME, EXTERNAL_TABLE_CLEANUP_src.DIRECTORY_PATH, CASE WHEN (EXTERNAL_TABLE_CLEANUP_src.FILE_CREATE_DATE = ''::varchar) THEN NULL::timestamp ELSE (EXTERNAL_TABLE_CLEANUP_src.FILE_CREATE_DATE)::timestamp END AS FILE_CREATE_DATE, EXTERNAL_TABLE_CLEANUP_src.FILE_EXISTS, EXTERNAL_TABLE_CLEANUP_src.batch_id, EXTERNAL_TABLE_CLEANUP_src.row_id, EXTERNAL_TABLE_CLEANUP_src.update_ts FROM teva_ingestion.EXTERNAL_TABLE_CLEANUP_src WHERE (EXTERNAL_TABLE_CLEANUP_src.batch_id = (SELECT max(teva_ingestion_control.batch_id) AS max FROM teva_ingestion.teva_ingestion_control WHERE (teva_ingestion_control.file_class = 'EXTERNAL_TABLE_CLEANUP'::varchar(22))));

CREATE  VIEW teva_ingestion.EXT_CAREMARK_RX2 AS
SELECT EXT_CAREMARK_RX2_src.MD_ID, EXT_CAREMARK_RX2_src.MD_LAST_NAME, EXT_CAREMARK_RX2_src.MD_FIRST_NAME, EXT_CAREMARK_RX2_src.PRESCRIBER_NPI, EXT_CAREMARK_RX2_src.MD_ADDR1, EXT_CAREMARK_RX2_src.MD_ADDR2, EXT_CAREMARK_RX2_src.MD_CITY, EXT_CAREMARK_RX2_src.MD_STATE, EXT_CAREMARK_RX2_src.MD_ZIP, EXT_CAREMARK_RX2_src.NDC_NUMBER, EXT_CAREMARK_RX2_src.SHIP_DATE, CASE WHEN (EXT_CAREMARK_RX2_src.QTY = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CAREMARK_RX2_src.QTY)::numeric(37,15) END AS QTY, EXT_CAREMARK_RX2_src.batch_id, EXT_CAREMARK_RX2_src.row_id, EXT_CAREMARK_RX2_src.update_ts FROM teva_ingestion.EXT_CAREMARK_RX2_src WHERE (EXT_CAREMARK_RX2_src.batch_id = (SELECT max(teva_ingestion_control.batch_id) AS max FROM teva_ingestion.teva_ingestion_control WHERE (teva_ingestion_control.file_class = 'EXT_CAREMARK_RX2'::varchar(16))));

CREATE  VIEW teva_ingestion.EXT_CMOP_RX_DATA_TEVA_HIST AS
SELECT EXT_CMOP_RX_DATA_TEVA_HIST_src.CMOP, EXT_CMOP_RX_DATA_TEVA_HIST_src.VISN, EXT_CMOP_RX_DATA_TEVA_HIST_src.STATION_NUMBER, EXT_CMOP_RX_DATA_TEVA_HIST_src.STATION, EXT_CMOP_RX_DATA_TEVA_HIST_src.VA_PRODUCT, CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201012_TOTAL_RXS" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201012_TOTAL_RXS")::numeric(37,15) END AS "201012_TOTAL_RXS", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201012_TOTAL_QTY" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201012_TOTAL_QTY")::numeric(37,15) END AS "201012_TOTAL_QTY", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201012_30_DAY_RXS" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201012_30_DAY_RXS")::numeric(37,15) END AS "201012_30_DAY_RXS", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201101_TOTAL_RXS" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201101_TOTAL_RXS")::numeric(37,15) END AS "201101_TOTAL_RXS", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201101_TOTAL_QTY" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201101_TOTAL_QTY")::numeric(37,15) END AS "201101_TOTAL_QTY", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201101_30_DAY_RXS" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201101_30_DAY_RXS")::numeric(37,15) END AS "201101_30_DAY_RXS", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201102_TOTAL_RXS" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201102_TOTAL_RXS")::numeric(37,15) END AS "201102_TOTAL_RXS", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201102_TOTAL_QTY" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201102_TOTAL_QTY")::numeric(37,15) END AS "201102_TOTAL_QTY", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201102_30_DAY_RXS" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201102_30_DAY_RXS")::numeric(37,15) END AS "201102_30_DAY_RXS", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201103_TOTAL_RXS" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201103_TOTAL_RXS")::numeric(37,15) END AS "201103_TOTAL_RXS", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201103_TOTAL_QTY" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201103_TOTAL_QTY")::numeric(37,15) END AS "201103_TOTAL_QTY", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201103_30_DAY_RXS" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201103_30_DAY_RXS")::numeric(37,15) END AS "201103_30_DAY_RXS", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201104_TOTAL_RXS" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201104_TOTAL_RXS")::numeric(37,15) END AS "201104_TOTAL_RXS", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201104_TOTAL_QTY" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201104_TOTAL_QTY")::numeric(37,15) END AS "201104_TOTAL_QTY", CASE WHEN (EXT_CMOP_RX_DATA_TEVA_HIST_src."201104_30_DAY_RXS" = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_CMOP_RX_DATA_TEVA_HIST_src."201104_30_DAY_RXS")::numeric(37,15) END AS "201104_30_DAY_RXS", EXT_CMOP_RX_DATA_TEVA_HIST_src.ZIP, EXT_CMOP_RX_DATA_TEVA_HIST_src.batch_id, EXT_CMOP_RX_DATA_TEVA_HIST_src.row_id, EXT_CMOP_RX_DATA_TEVA_HIST_src.update_ts FROM teva_ingestion.EXT_CMOP_RX_DATA_TEVA_HIST_src WHERE (EXT_CMOP_RX_DATA_TEVA_HIST_src.batch_id = (SELECT max(teva_ingestion_control.batch_id) AS max FROM teva_ingestion.teva_ingestion_control WHERE (teva_ingestion_control.file_class = 'EXT_CMOP_RX_DATA_TEVA_HIST'::varchar(26))));

CREATE  VIEW teva_ingestion.EXT_IMS_DEA AS
SELECT EXT_IMS_DEA_src.IMS_ID, EXT_IMS_DEA_src.FIRST_NAME, EXT_IMS_DEA_src.LAST_NAME, EXT_IMS_DEA_src.DEA_NUM, EXT_IMS_DEA_src.DEA_EXPIR_DATE, EXT_IMS_DEA_src.DEA_STATUS, EXT_IMS_DEA_src.NPI, EXT_IMS_DEA_src.batch_id, EXT_IMS_DEA_src.row_id, EXT_IMS_DEA_src.update_ts FROM teva_ingestion.EXT_IMS_DEA_src WHERE (EXT_IMS_DEA_src.batch_id = (SELECT max(teva_ingestion_control.batch_id) AS max FROM teva_ingestion.teva_ingestion_control WHERE (teva_ingestion_control.file_class = 'EXT_IMS_DEA'::varchar(11))));

CREATE  VIEW teva_ingestion.EXT_NTIS AS
SELECT EXT_NTIS_src.DEA_NUM, EXT_NTIS_src.BUSINESS_ACTIVITY_CODE, EXT_NTIS_src.DRUG_SCHEDULES, EXT_NTIS_src.EXPIRATION_DATE, EXT_NTIS_src.COMPANY_NAME, EXT_NTIS_src.ADDRESS_LINE1, EXT_NTIS_src.ADDRESS_LINE2, EXT_NTIS_src.ADDRESS_LINE3, EXT_NTIS_src.CITY, EXT_NTIS_src.STATE, EXT_NTIS_src.ZIP_CODE, EXT_NTIS_src.BASC, EXT_NTIS_src.PAYMENT_INDICATOR, EXT_NTIS_src.CONTROLLED_SUBSTANCE_AUTH, EXT_NTIS_src.batch_id, EXT_NTIS_src.row_id, EXT_NTIS_src.update_ts FROM teva_ingestion.EXT_NTIS_src WHERE (EXT_NTIS_src.batch_id = (SELECT max(teva_ingestion_control.batch_id) AS max FROM teva_ingestion.teva_ingestion_control WHERE (teva_ingestion_control.file_class = 'EXT_NTIS'::varchar(8))));

CREATE  VIEW teva_ingestion.EXT_SIEBEL_BUS_ACCTS_TO_VEEVA AS
SELECT EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.SIEBELID, EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.VEEVA_ID, EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.EXTERNAL_ID_VOD__C, EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.NAME, EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.RECORDTYPEID, EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.TYPE, EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.ACCOUNT_STATUS_TVA__C, EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.ACCOUNT_LOCATION_TVA__C, EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.ACCOUNT_MASTER_ID_TVA__C, EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.ENDIT, EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.batch_id, EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.row_id, EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.update_ts FROM teva_ingestion.EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src WHERE (EXT_SIEBEL_BUS_ACCTS_TO_VEEVA_src.batch_id = (SELECT max(teva_ingestion_control.batch_id) AS max FROM teva_ingestion.teva_ingestion_control WHERE (teva_ingestion_control.file_class = 'EXT_SIEBEL_BUS_ACCTS_TO_VEEVA'::varchar(29))));

CREATE  VIEW teva_ingestion.EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA AS
SELECT EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA_src.SIEBELID, EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA_src.EXTERNAL_ID_VOD__C, EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA_src.VEEVA_ID, EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA_src.INVEEVAALREADY, EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA_src.RECORDTYPEID, EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA_src.FIRSTNAME, EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA_src.LASTNAME, EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA_src.batch_id, EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA_src.row_id, EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA_src.update_ts FROM teva_ingestion.EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA_src WHERE (EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA_src.batch_id = (SELECT max(teva_ingestion_control.batch_id) AS max FROM teva_ingestion.teva_ingestion_control WHERE (teva_ingestion_control.file_class = 'EXT_SIEBEL_PRSN_ACCTS_TO_VEEVA'::varchar(30))));

CREATE  VIEW teva_ingestion.EXT_TW_ICS_ASI AS
SELECT EXT_TW_ICS_ASI_src.BP_NUMBER, EXT_TW_ICS_ASI_src.HCP_ID, EXT_TW_ICS_ASI_src.TRANSACTION_DATE, EXT_TW_ICS_ASI_src.INVOICE_NUMBER, EXT_TW_ICS_ASI_src.ACCOUNT_TYPE, EXT_TW_ICS_ASI_src.CLASS_OF_TRADE, EXT_TW_ICS_ASI_src.TERRITORY_ID, EXT_TW_ICS_ASI_src.AREA_ID, EXT_TW_ICS_ASI_src.SHIP_TO_STREET, EXT_TW_ICS_ASI_src.SHIP_TO_CITY, EXT_TW_ICS_ASI_src.SHIP_TO_STATE, EXT_TW_ICS_ASI_src.SHIP_TO_ZIP, CASE WHEN (EXT_TW_ICS_ASI_src.DOLLARS_PARAGARD = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_TW_ICS_ASI_src.DOLLARS_PARAGARD)::numeric(37,15) END AS DOLLARS_PARAGARD, CASE WHEN (EXT_TW_ICS_ASI_src.UNITS_PARAGARD = ''::varchar) THEN NULL::numeric(37,15) ELSE (EXT_TW_ICS_ASI_src.UNITS_PARAGARD)::numeric(37,15) END AS UNITS_PARAGARD, EXT_TW_ICS_ASI_src.batch_id, EXT_TW_ICS_ASI_src.row_id, EXT_TW_ICS_ASI_src.update_ts FROM teva_ingestion.EXT_TW_ICS_ASI_src WHERE (EXT_TW_ICS_ASI_src.batch_id = (SELECT max(teva_ingestion_control.batch_id) AS max FROM teva_ingestion.teva_ingestion_control WHERE (teva_ingestion_control.file_class = 'EXT_TW_ICS_ASI'::varchar(14))));

CREATE  VIEW teva_ingestion.EXT_IMS_DDD_CHANGE_LOG AS
SELECT btrim(EXT_IMS_DDD_CHANGE_LOG_src.CONSTANT) AS CONSTANT, btrim(EXT_IMS_DDD_CHANGE_LOG_src.CLI_SFX) AS CLI_SFX, btrim(EXT_IMS_DDD_CHANGE_LOG_src.NOT_USED) AS NOT_USED, btrim(EXT_IMS_DDD_CHANGE_LOG_src."TERR#") AS "TERR#", btrim(EXT_IMS_DDD_CHANGE_LOG_src."OUTLET#") AS "OUTLET#", btrim(EXT_IMS_DDD_CHANGE_LOG_src.OUTLET_NAME) AS OUTLET_NAME, btrim(EXT_IMS_DDD_CHANGE_LOG_src.ADDRESS) AS ADDRESS, btrim(EXT_IMS_DDD_CHANGE_LOG_src.CITY) AS CITY, btrim(EXT_IMS_DDD_CHANGE_LOG_src.STATE) AS STATE, btrim(EXT_IMS_DDD_CHANGE_LOG_src.SUBCAT) AS SUBCAT, btrim(EXT_IMS_DDD_CHANGE_LOG_src.CODE) AS CODE, EXT_IMS_DDD_CHANGE_LOG_src.batch_id, EXT_IMS_DDD_CHANGE_LOG_src.row_id, EXT_IMS_DDD_CHANGE_LOG_src.update_ts FROM teva_ingestion.EXT_IMS_DDD_CHANGE_LOG_src WHERE (EXT_IMS_DDD_CHANGE_LOG_src.batch_id = (SELECT max(teva_ingestion_control.batch_id) AS max FROM teva_ingestion.teva_ingestion_control WHERE (teva_ingestion_control.file_class = 'EXT_IMS_DDD_CHANGE_LOG'::varchar(22))));

CREATE  VIEW teva_ingestion.EXT_IMS_PDRP AS
SELECT btrim(EXT_IMS_PDRP_src.IMS_ID) AS IMS_ID, btrim(EXT_IMS_PDRP_src.FILLER_01) AS FILLER_01, btrim(EXT_IMS_PDRP_src.FILLER_02) AS FILLER_02, btrim(EXT_IMS_PDRP_src.ME_NBR) AS ME_NBR, btrim(EXT_IMS_PDRP_src.LAST_NAME) AS LAST_NAME, btrim(EXT_IMS_PDRP_src.FIRST_NAME) AS FIRST_NAME, btrim(EXT_IMS_PDRP_src.MIDDLE) AS MIDDLE, btrim(EXT_IMS_PDRP_src.FILLER_03) AS FILLER_03, CASE WHEN (EXT_IMS_PDRP_src.PDRP_DATE = ''::varchar) THEN NULL::timestamp ELSE (btrim(EXT_IMS_PDRP_src.PDRP_DATE))::timestamp END AS PDRP_DATE, EXT_IMS_PDRP_src.batch_id, EXT_IMS_PDRP_src.row_id, EXT_IMS_PDRP_src.update_ts FROM teva_ingestion.EXT_IMS_PDRP_src WHERE (EXT_IMS_PDRP_src.batch_id = (SELECT max(teva_ingestion_control.batch_id) AS max FROM teva_ingestion.teva_ingestion_control WHERE (teva_ingestion_control.file_class = 'EXT_IMS_PDRP'::varchar(12))));

CREATE  VIEW teva_ingestion.EXT_IMS_MHK_CNT_M AS
SELECT CASE WHEN (EXT_IMS_MHK_CNT_M_src.ims_client_num = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_CNT_M_src.ims_client_num))::int END AS ims_client_num, CASE WHEN (EXT_IMS_MHK_CNT_M_src.ims_report_num = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_CNT_M_src.ims_report_num))::int END AS ims_report_num, btrim(EXT_IMS_MHK_CNT_M_src.zip_other) AS zip_other, btrim(EXT_IMS_MHK_CNT_M_src.ims_id) AS ims_id, btrim(EXT_IMS_MHK_CNT_M_src.ndc) AS ndc, btrim(EXT_IMS_MHK_CNT_M_src.plan_id) AS plan_id, CASE WHEN (EXT_IMS_MHK_CNT_M_src.sales_category = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_CNT_M_src.sales_category))::int END AS sales_category, btrim(EXT_IMS_MHK_CNT_M_src.rx_type) AS rx_type, CASE WHEN (EXT_IMS_MHK_CNT_M_src.ims_product_group_num = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_CNT_M_src.ims_product_group_num))::int END AS ims_product_group_num, btrim(EXT_IMS_MHK_CNT_M_src.filler_01) AS filler_01, btrim(EXT_IMS_MHK_CNT_M_src.me_num) AS me_num, btrim(EXT_IMS_MHK_CNT_M_src.last_name) AS last_name, btrim(EXT_IMS_MHK_CNT_M_src.first_name) AS first_name, btrim(EXT_IMS_MHK_CNT_M_src.middle_name) AS middle_name, btrim(EXT_IMS_MHK_CNT_M_src.address) AS address, btrim(EXT_IMS_MHK_CNT_M_src.city) AS city, btrim(EXT_IMS_MHK_CNT_M_src.state) AS state, btrim(EXT_IMS_MHK_CNT_M_src.zip) AS zip, btrim(EXT_IMS_MHK_CNT_M_src.specialty) AS specialty, btrim(EXT_IMS_MHK_CNT_M_src.plan_name) AS plan_name, btrim(EXT_IMS_MHK_CNT_M_src.ndc_description) AS ndc_description, btrim(EXT_IMS_MHK_CNT_M_src.data_date) AS data_date, CASE WHEN (EXT_IMS_MHK_CNT_M_src.bucket_count = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_CNT_M_src.bucket_count))::int END AS bucket_count, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_001))::numeric(9,3) END AS nrx_001, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_002))::numeric(9,3) END AS nrx_002, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_003))::numeric(9,3) END AS nrx_003, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_004))::numeric(9,3) END AS nrx_004, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_005))::numeric(9,3) END AS nrx_005, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_006))::numeric(9,3) END AS nrx_006, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_007))::numeric(9,3) END AS nrx_007, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_008))::numeric(9,3) END AS nrx_008, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_009))::numeric(9,3) END AS nrx_009, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_010))::numeric(9,3) END AS nrx_010, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_011))::numeric(9,3) END AS nrx_011, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_012))::numeric(9,3) END AS nrx_012, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_013))::numeric(9,3) END AS nrx_013, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_014))::numeric(9,3) END AS nrx_014, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_015))::numeric(9,3) END AS nrx_015, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_016))::numeric(9,3) END AS nrx_016, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_017))::numeric(9,3) END AS nrx_017, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_018))::numeric(9,3) END AS nrx_018, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_019))::numeric(9,3) END AS nrx_019, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_020))::numeric(9,3) END AS nrx_020, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_021))::numeric(9,3) END AS nrx_021, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_022))::numeric(9,3) END AS nrx_022, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_023))::numeric(9,3) END AS nrx_023, CASE WHEN (EXT_IMS_MHK_CNT_M_src.nrx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.nrx_024))::numeric(9,3) END AS nrx_024, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_001))::numeric(9,3) END AS trx_001, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_002))::numeric(9,3) END AS trx_002, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_003))::numeric(9,3) END AS trx_003, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_004))::numeric(9,3) END AS trx_004, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_005))::numeric(9,3) END AS trx_005, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_006))::numeric(9,3) END AS trx_006, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_007))::numeric(9,3) END AS trx_007, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_008))::numeric(9,3) END AS trx_008, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_009))::numeric(9,3) END AS trx_009, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_010))::numeric(9,3) END AS trx_010, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_011))::numeric(9,3) END AS trx_011, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_012))::numeric(9,3) END AS trx_012, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_013))::numeric(9,3) END AS trx_013, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_014))::numeric(9,3) END AS trx_014, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_015))::numeric(9,3) END AS trx_015, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_016))::numeric(9,3) END AS trx_016, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_017))::numeric(9,3) END AS trx_017, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_018))::numeric(9,3) END AS trx_018, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_019))::numeric(9,3) END AS trx_019, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_020))::numeric(9,3) END AS trx_020, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_021))::numeric(9,3) END AS trx_021, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_022))::numeric(9,3) END AS trx_022, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_023))::numeric(9,3) END AS trx_023, CASE WHEN (EXT_IMS_MHK_CNT_M_src.trx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_M_src.trx_024))::numeric(9,3) END AS trx_024, EXT_IMS_MHK_CNT_M_src.batch_id, EXT_IMS_MHK_CNT_M_src.row_id, EXT_IMS_MHK_CNT_M_src.update_ts FROM teva_ingestion.EXT_IMS_MHK_CNT_M_src;

CREATE  VIEW teva_ingestion.EXT_IMS_MHK_CNT_W AS
SELECT CASE WHEN (EXT_IMS_MHK_CNT_W_src.ims_client_num = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_CNT_W_src.ims_client_num))::int END AS ims_client_num, CASE WHEN (EXT_IMS_MHK_CNT_W_src.ims_report_num = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_CNT_W_src.ims_report_num))::int END AS ims_report_num, btrim(EXT_IMS_MHK_CNT_W_src.zip_other) AS zip_other, btrim(EXT_IMS_MHK_CNT_W_src.ims_id) AS ims_id, btrim(EXT_IMS_MHK_CNT_W_src.ndc) AS ndc, btrim(EXT_IMS_MHK_CNT_W_src.plan_id) AS plan_id, CASE WHEN (EXT_IMS_MHK_CNT_W_src.sales_category = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_CNT_W_src.sales_category))::int END AS sales_category, btrim(EXT_IMS_MHK_CNT_W_src.rx_type) AS rx_type, CASE WHEN (EXT_IMS_MHK_CNT_W_src.ims_product_group_num = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_CNT_W_src.ims_product_group_num))::int END AS ims_product_group_num, btrim(EXT_IMS_MHK_CNT_W_src.filler_01) AS filler_01, btrim(EXT_IMS_MHK_CNT_W_src.me_num) AS me_num, btrim(EXT_IMS_MHK_CNT_W_src.last_name) AS last_name, btrim(EXT_IMS_MHK_CNT_W_src.first_name) AS first_name, btrim(EXT_IMS_MHK_CNT_W_src.middle_name) AS middle_name, btrim(EXT_IMS_MHK_CNT_W_src.address) AS address, btrim(EXT_IMS_MHK_CNT_W_src.city) AS city, btrim(EXT_IMS_MHK_CNT_W_src.state) AS state, btrim(EXT_IMS_MHK_CNT_W_src.zip) AS zip, btrim(EXT_IMS_MHK_CNT_W_src.specialty) AS specialty, btrim(EXT_IMS_MHK_CNT_W_src.plan_name) AS plan_name, btrim(EXT_IMS_MHK_CNT_W_src.ndc_description) AS ndc_description, btrim(EXT_IMS_MHK_CNT_W_src.data_date) AS data_date, CASE WHEN (EXT_IMS_MHK_CNT_W_src.bucket_count = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_CNT_W_src.bucket_count))::int END AS bucket_count, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_001))::numeric(9,3) END AS nrx_001, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_002))::numeric(9,3) END AS nrx_002, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_003))::numeric(9,3) END AS nrx_003, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_004))::numeric(9,3) END AS nrx_004, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_005))::numeric(9,3) END AS nrx_005, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_006))::numeric(9,3) END AS nrx_006, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_007))::numeric(9,3) END AS nrx_007, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_008))::numeric(9,3) END AS nrx_008, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_009))::numeric(9,3) END AS nrx_009, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_010))::numeric(9,3) END AS nrx_010, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_011))::numeric(9,3) END AS nrx_011, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_012))::numeric(9,3) END AS nrx_012, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_013))::numeric(9,3) END AS nrx_013, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_014))::numeric(9,3) END AS nrx_014, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_015))::numeric(9,3) END AS nrx_015, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_016))::numeric(9,3) END AS nrx_016, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_017))::numeric(9,3) END AS nrx_017, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_018))::numeric(9,3) END AS nrx_018, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_019))::numeric(9,3) END AS nrx_019, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_020))::numeric(9,3) END AS nrx_020, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_021))::numeric(9,3) END AS nrx_021, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_022))::numeric(9,3) END AS nrx_022, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_023))::numeric(9,3) END AS nrx_023, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_024))::numeric(9,3) END AS nrx_024, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_025 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_025))::numeric(9,3) END AS nrx_025, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_026 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_026))::numeric(9,3) END AS nrx_026, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_027 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_027))::numeric(9,3) END AS nrx_027, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_028 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_028))::numeric(9,3) END AS nrx_028, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_029 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_029))::numeric(9,3) END AS nrx_029, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_030 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_030))::numeric(9,3) END AS nrx_030, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_031 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_031))::numeric(9,3) END AS nrx_031, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_032 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_032))::numeric(9,3) END AS nrx_032, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_033 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_033))::numeric(9,3) END AS nrx_033, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_034 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_034))::numeric(9,3) END AS nrx_034, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_035 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_035))::numeric(9,3) END AS nrx_035, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_036 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_036))::numeric(9,3) END AS nrx_036, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_037 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_037))::numeric(9,3) END AS nrx_037, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_038 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_038))::numeric(9,3) END AS nrx_038, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_039 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_039))::numeric(9,3) END AS nrx_039, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_040 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_040))::numeric(9,3) END AS nrx_040, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_041 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_041))::numeric(9,3) END AS nrx_041, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_042 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_042))::numeric(9,3) END AS nrx_042, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_043 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_043))::numeric(9,3) END AS nrx_043, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_044 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_044))::numeric(9,3) END AS nrx_044, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_045 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_045))::numeric(9,3) END AS nrx_045, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_046 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_046))::numeric(9,3) END AS nrx_046, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_047 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_047))::numeric(9,3) END AS nrx_047, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_048 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_048))::numeric(9,3) END AS nrx_048, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_049 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_049))::numeric(9,3) END AS nrx_049, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_050 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_050))::numeric(9,3) END AS nrx_050, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_051 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_051))::numeric(9,3) END AS nrx_051, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_052 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_052))::numeric(9,3) END AS nrx_052, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_053 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_053))::numeric(9,3) END AS nrx_053, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_054 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_054))::numeric(9,3) END AS nrx_054, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_055 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_055))::numeric(9,3) END AS nrx_055, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_056 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_056))::numeric(9,3) END AS nrx_056, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_057 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_057))::numeric(9,3) END AS nrx_057, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_058 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_058))::numeric(9,3) END AS nrx_058, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_059 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_059))::numeric(9,3) END AS nrx_059, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_060 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_060))::numeric(9,3) END AS nrx_060, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_061 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_061))::numeric(9,3) END AS nrx_061, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_062 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_062))::numeric(9,3) END AS nrx_062, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_063 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_063))::numeric(9,3) END AS nrx_063, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_064 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_064))::numeric(9,3) END AS nrx_064, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_065 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_065))::numeric(9,3) END AS nrx_065, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_066 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_066))::numeric(9,3) END AS nrx_066, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_067 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_067))::numeric(9,3) END AS nrx_067, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_068 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_068))::numeric(9,3) END AS nrx_068, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_069 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_069))::numeric(9,3) END AS nrx_069, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_070 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_070))::numeric(9,3) END AS nrx_070, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_071 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_071))::numeric(9,3) END AS nrx_071, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_072 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_072))::numeric(9,3) END AS nrx_072, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_073 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_073))::numeric(9,3) END AS nrx_073, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_074 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_074))::numeric(9,3) END AS nrx_074, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_075 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_075))::numeric(9,3) END AS nrx_075, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_076 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_076))::numeric(9,3) END AS nrx_076, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_077 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_077))::numeric(9,3) END AS nrx_077, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_078 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_078))::numeric(9,3) END AS nrx_078, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_079 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_079))::numeric(9,3) END AS nrx_079, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_080 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_080))::numeric(9,3) END AS nrx_080, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_081 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_081))::numeric(9,3) END AS nrx_081, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_082 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_082))::numeric(9,3) END AS nrx_082, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_083 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_083))::numeric(9,3) END AS nrx_083, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_084 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_084))::numeric(9,3) END AS nrx_084, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_085 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_085))::numeric(9,3) END AS nrx_085, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_086 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_086))::numeric(9,3) END AS nrx_086, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_087 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_087))::numeric(9,3) END AS nrx_087, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_088 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_088))::numeric(9,3) END AS nrx_088, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_089 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_089))::numeric(9,3) END AS nrx_089, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_090 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_090))::numeric(9,3) END AS nrx_090, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_091 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_091))::numeric(9,3) END AS nrx_091, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_092 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_092))::numeric(9,3) END AS nrx_092, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_093 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_093))::numeric(9,3) END AS nrx_093, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_094 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_094))::numeric(9,3) END AS nrx_094, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_095 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_095))::numeric(9,3) END AS nrx_095, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_096 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_096))::numeric(9,3) END AS nrx_096, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_097 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_097))::numeric(9,3) END AS nrx_097, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_098 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_098))::numeric(9,3) END AS nrx_098, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_099 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_099))::numeric(9,3) END AS nrx_099, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_100 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_100))::numeric(9,3) END AS nrx_100, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_101 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_101))::numeric(9,3) END AS nrx_101, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_102 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_102))::numeric(9,3) END AS nrx_102, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_103 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_103))::numeric(9,3) END AS nrx_103, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_104 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_104))::numeric(9,3) END AS nrx_104, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_105 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_105))::numeric(9,3) END AS nrx_105, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_106 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_106))::numeric(9,3) END AS nrx_106, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_107 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_107))::numeric(9,3) END AS nrx_107, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_108 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_108))::numeric(9,3) END AS nrx_108, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_109 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_109))::numeric(9,3) END AS nrx_109, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_110 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_110))::numeric(9,3) END AS nrx_110, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_111 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_111))::numeric(9,3) END AS nrx_111, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_112 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_112))::numeric(9,3) END AS nrx_112, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_113 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_113))::numeric(9,3) END AS nrx_113, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_114 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_114))::numeric(9,3) END AS nrx_114, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_115 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_115))::numeric(9,3) END AS nrx_115, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_116 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_116))::numeric(9,3) END AS nrx_116, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_117 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_117))::numeric(9,3) END AS nrx_117, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_118 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_118))::numeric(9,3) END AS nrx_118, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_119 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_119))::numeric(9,3) END AS nrx_119, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_120 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_120))::numeric(9,3) END AS nrx_120, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_121 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_121))::numeric(9,3) END AS nrx_121, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_122 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_122))::numeric(9,3) END AS nrx_122, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_123 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_123))::numeric(9,3) END AS nrx_123, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_124 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_124))::numeric(9,3) END AS nrx_124, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_125 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_125))::numeric(9,3) END AS nrx_125, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_126 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_126))::numeric(9,3) END AS nrx_126, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_127 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_127))::numeric(9,3) END AS nrx_127, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_128 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_128))::numeric(9,3) END AS nrx_128, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_129 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_129))::numeric(9,3) END AS nrx_129, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_130 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_130))::numeric(9,3) END AS nrx_130, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_131 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_131))::numeric(9,3) END AS nrx_131, CASE WHEN (EXT_IMS_MHK_CNT_W_src.nrx_132 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.nrx_132))::numeric(9,3) END AS nrx_132, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_001))::numeric(9,3) END AS trx_001, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_002))::numeric(9,3) END AS trx_002, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_003))::numeric(9,3) END AS trx_003, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_004))::numeric(9,3) END AS trx_004, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_005))::numeric(9,3) END AS trx_005, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_006))::numeric(9,3) END AS trx_006, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_007))::numeric(9,3) END AS trx_007, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_008))::numeric(9,3) END AS trx_008, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_009))::numeric(9,3) END AS trx_009, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_010))::numeric(9,3) END AS trx_010, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_011))::numeric(9,3) END AS trx_011, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_012))::numeric(9,3) END AS trx_012, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_013))::numeric(9,3) END AS trx_013, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_014))::numeric(9,3) END AS trx_014, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_015))::numeric(9,3) END AS trx_015, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_016))::numeric(9,3) END AS trx_016, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_017))::numeric(9,3) END AS trx_017, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_018))::numeric(9,3) END AS trx_018, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_019))::numeric(9,3) END AS trx_019, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_020))::numeric(9,3) END AS trx_020, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_021))::numeric(9,3) END AS trx_021, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_022))::numeric(9,3) END AS trx_022, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_023))::numeric(9,3) END AS trx_023, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_024))::numeric(9,3) END AS trx_024, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_025 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_025))::numeric(9,3) END AS trx_025, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_026 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_026))::numeric(9,3) END AS trx_026, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_027 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_027))::numeric(9,3) END AS trx_027, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_028 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_028))::numeric(9,3) END AS trx_028, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_029 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_029))::numeric(9,3) END AS trx_029, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_030 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_030))::numeric(9,3) END AS trx_030, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_031 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_031))::numeric(9,3) END AS trx_031, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_032 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_032))::numeric(9,3) END AS trx_032, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_033 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_033))::numeric(9,3) END AS trx_033, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_034 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_034))::numeric(9,3) END AS trx_034, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_035 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_035))::numeric(9,3) END AS trx_035, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_036 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_036))::numeric(9,3) END AS trx_036, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_037 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_037))::numeric(9,3) END AS trx_037, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_038 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_038))::numeric(9,3) END AS trx_038, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_039 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_039))::numeric(9,3) END AS trx_039, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_040 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_040))::numeric(9,3) END AS trx_040, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_041 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_041))::numeric(9,3) END AS trx_041, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_042 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_042))::numeric(9,3) END AS trx_042, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_043 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_043))::numeric(9,3) END AS trx_043, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_044 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_044))::numeric(9,3) END AS trx_044, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_045 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_045))::numeric(9,3) END AS trx_045, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_046 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_046))::numeric(9,3) END AS trx_046, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_047 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_047))::numeric(9,3) END AS trx_047, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_048 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_048))::numeric(9,3) END AS trx_048, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_049 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_049))::numeric(9,3) END AS trx_049, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_050 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_050))::numeric(9,3) END AS trx_050, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_051 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_051))::numeric(9,3) END AS trx_051, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_052 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_052))::numeric(9,3) END AS trx_052, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_053 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_053))::numeric(9,3) END AS trx_053, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_054 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_054))::numeric(9,3) END AS trx_054, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_055 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_055))::numeric(9,3) END AS trx_055, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_056 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_056))::numeric(9,3) END AS trx_056, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_057 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_057))::numeric(9,3) END AS trx_057, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_058 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_058))::numeric(9,3) END AS trx_058, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_059 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_059))::numeric(9,3) END AS trx_059, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_060 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_060))::numeric(9,3) END AS trx_060, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_061 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_061))::numeric(9,3) END AS trx_061, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_062 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_062))::numeric(9,3) END AS trx_062, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_063 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_063))::numeric(9,3) END AS trx_063, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_064 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_064))::numeric(9,3) END AS trx_064, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_065 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_065))::numeric(9,3) END AS trx_065, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_066 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_066))::numeric(9,3) END AS trx_066, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_067 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_067))::numeric(9,3) END AS trx_067, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_068 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_068))::numeric(9,3) END AS trx_068, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_069 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_069))::numeric(9,3) END AS trx_069, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_070 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_070))::numeric(9,3) END AS trx_070, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_071 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_071))::numeric(9,3) END AS trx_071, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_072 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_072))::numeric(9,3) END AS trx_072, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_073 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_073))::numeric(9,3) END AS trx_073, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_074 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_074))::numeric(9,3) END AS trx_074, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_075 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_075))::numeric(9,3) END AS trx_075, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_076 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_076))::numeric(9,3) END AS trx_076, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_077 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_077))::numeric(9,3) END AS trx_077, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_078 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_078))::numeric(9,3) END AS trx_078, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_079 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_079))::numeric(9,3) END AS trx_079, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_080 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_080))::numeric(9,3) END AS trx_080, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_081 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_081))::numeric(9,3) END AS trx_081, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_082 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_082))::numeric(9,3) END AS trx_082, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_083 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_083))::numeric(9,3) END AS trx_083, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_084 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_084))::numeric(9,3) END AS trx_084, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_085 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_085))::numeric(9,3) END AS trx_085, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_086 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_086))::numeric(9,3) END AS trx_086, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_087 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_087))::numeric(9,3) END AS trx_087, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_088 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_088))::numeric(9,3) END AS trx_088, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_089 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_089))::numeric(9,3) END AS trx_089, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_090 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_090))::numeric(9,3) END AS trx_090, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_091 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_091))::numeric(9,3) END AS trx_091, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_092 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_092))::numeric(9,3) END AS trx_092, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_093 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_093))::numeric(9,3) END AS trx_093, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_094 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_094))::numeric(9,3) END AS trx_094, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_095 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_095))::numeric(9,3) END AS trx_095, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_096 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_096))::numeric(9,3) END AS trx_096, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_097 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_097))::numeric(9,3) END AS trx_097, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_098 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_098))::numeric(9,3) END AS trx_098, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_099 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_099))::numeric(9,3) END AS trx_099, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_100 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_100))::numeric(9,3) END AS trx_100, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_101 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_101))::numeric(9,3) END AS trx_101, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_102 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_102))::numeric(9,3) END AS trx_102, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_103 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_103))::numeric(9,3) END AS trx_103, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_104 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_104))::numeric(9,3) END AS trx_104, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_105 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_105))::numeric(9,3) END AS trx_105, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_106 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_106))::numeric(9,3) END AS trx_106, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_107 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_107))::numeric(9,3) END AS trx_107, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_108 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_108))::numeric(9,3) END AS trx_108, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_109 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_109))::numeric(9,3) END AS trx_109, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_110 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_110))::numeric(9,3) END AS trx_110, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_111 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_111))::numeric(9,3) END AS trx_111, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_112 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_112))::numeric(9,3) END AS trx_112, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_113 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_113))::numeric(9,3) END AS trx_113, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_114 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_114))::numeric(9,3) END AS trx_114, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_115 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_115))::numeric(9,3) END AS trx_115, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_116 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_116))::numeric(9,3) END AS trx_116, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_117 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_117))::numeric(9,3) END AS trx_117, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_118 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_118))::numeric(9,3) END AS trx_118, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_119 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_119))::numeric(9,3) END AS trx_119, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_120 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_120))::numeric(9,3) END AS trx_120, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_121 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_121))::numeric(9,3) END AS trx_121, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_122 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_122))::numeric(9,3) END AS trx_122, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_123 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_123))::numeric(9,3) END AS trx_123, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_124 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_124))::numeric(9,3) END AS trx_124, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_125 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_125))::numeric(9,3) END AS trx_125, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_126 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_126))::numeric(9,3) END AS trx_126, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_127 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_127))::numeric(9,3) END AS trx_127, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_128 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_128))::numeric(9,3) END AS trx_128, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_129 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_129))::numeric(9,3) END AS trx_129, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_130 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_130))::numeric(9,3) END AS trx_130, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_131 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_131))::numeric(9,3) END AS trx_131, CASE WHEN (EXT_IMS_MHK_CNT_W_src.trx_132 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_CNT_W_src.trx_132))::numeric(9,3) END AS trx_132, EXT_IMS_MHK_CNT_W_src.batch_id, EXT_IMS_MHK_CNT_W_src.row_id, EXT_IMS_MHK_CNT_W_src.update_ts FROM teva_ingestion.EXT_IMS_MHK_CNT_W_src;

CREATE  VIEW teva_ingestion.EXT_IMS_MHK_QTY_M AS
SELECT CASE WHEN (EXT_IMS_MHK_QTY_M_src.ims_client_num = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_QTY_M_src.ims_client_num))::int END AS ims_client_num, CASE WHEN (EXT_IMS_MHK_QTY_M_src.ims_report_num = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_QTY_M_src.ims_report_num))::int END AS ims_report_num, btrim(EXT_IMS_MHK_QTY_M_src.zip_other) AS zip_other, btrim(EXT_IMS_MHK_QTY_M_src.ims_id) AS ims_id, btrim(EXT_IMS_MHK_QTY_M_src.ndc) AS ndc, btrim(EXT_IMS_MHK_QTY_M_src.plan_id) AS plan_id, CASE WHEN (EXT_IMS_MHK_QTY_M_src.sales_category = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_QTY_M_src.sales_category))::int END AS sales_category, btrim(EXT_IMS_MHK_QTY_M_src.rx_type) AS rx_type, CASE WHEN (EXT_IMS_MHK_QTY_M_src.ims_product_group_num = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_QTY_M_src.ims_product_group_num))::int END AS ims_product_group_num, btrim(EXT_IMS_MHK_QTY_M_src.filler_01) AS filler_01, btrim(EXT_IMS_MHK_QTY_M_src.me_num) AS me_num, btrim(EXT_IMS_MHK_QTY_M_src.last_name) AS last_name, btrim(EXT_IMS_MHK_QTY_M_src.first_name) AS first_name, btrim(EXT_IMS_MHK_QTY_M_src.middle_name) AS middle_name, btrim(EXT_IMS_MHK_QTY_M_src.address) AS address, btrim(EXT_IMS_MHK_QTY_M_src.city) AS city, btrim(EXT_IMS_MHK_QTY_M_src.state) AS state, btrim(EXT_IMS_MHK_QTY_M_src.zip) AS zip, btrim(EXT_IMS_MHK_QTY_M_src.specialty) AS specialty, btrim(EXT_IMS_MHK_QTY_M_src.plan_name) AS plan_name, btrim(EXT_IMS_MHK_QTY_M_src.ndc_description) AS ndc_description, btrim(EXT_IMS_MHK_QTY_M_src.data_date) AS data_date, CASE WHEN (EXT_IMS_MHK_QTY_M_src.bucket_count = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_QTY_M_src.bucket_count))::int END AS bucket_count, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_001))::numeric(9,3) END AS nrx_001, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_002))::numeric(9,3) END AS nrx_002, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_003))::numeric(9,3) END AS nrx_003, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_004))::numeric(9,3) END AS nrx_004, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_005))::numeric(9,3) END AS nrx_005, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_006))::numeric(9,3) END AS nrx_006, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_007))::numeric(9,3) END AS nrx_007, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_008))::numeric(9,3) END AS nrx_008, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_009))::numeric(9,3) END AS nrx_009, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_010))::numeric(9,3) END AS nrx_010, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_011))::numeric(9,3) END AS nrx_011, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_012))::numeric(9,3) END AS nrx_012, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_013))::numeric(9,3) END AS nrx_013, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_014))::numeric(9,3) END AS nrx_014, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_015))::numeric(9,3) END AS nrx_015, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_016))::numeric(9,3) END AS nrx_016, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_017))::numeric(9,3) END AS nrx_017, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_018))::numeric(9,3) END AS nrx_018, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_019))::numeric(9,3) END AS nrx_019, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_020))::numeric(9,3) END AS nrx_020, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_021))::numeric(9,3) END AS nrx_021, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_022))::numeric(9,3) END AS nrx_022, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_023))::numeric(9,3) END AS nrx_023, CASE WHEN (EXT_IMS_MHK_QTY_M_src.nrx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.nrx_024))::numeric(9,3) END AS nrx_024, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_001))::numeric(9,3) END AS trx_001, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_002))::numeric(9,3) END AS trx_002, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_003))::numeric(9,3) END AS trx_003, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_004))::numeric(9,3) END AS trx_004, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_005))::numeric(9,3) END AS trx_005, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_006))::numeric(9,3) END AS trx_006, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_007))::numeric(9,3) END AS trx_007, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_008))::numeric(9,3) END AS trx_008, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_009))::numeric(9,3) END AS trx_009, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_010))::numeric(9,3) END AS trx_010, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_011))::numeric(9,3) END AS trx_011, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_012))::numeric(9,3) END AS trx_012, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_013))::numeric(9,3) END AS trx_013, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_014))::numeric(9,3) END AS trx_014, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_015))::numeric(9,3) END AS trx_015, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_016))::numeric(9,3) END AS trx_016, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_017))::numeric(9,3) END AS trx_017, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_018))::numeric(9,3) END AS trx_018, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_019))::numeric(9,3) END AS trx_019, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_020))::numeric(9,3) END AS trx_020, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_021))::numeric(9,3) END AS trx_021, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_022))::numeric(9,3) END AS trx_022, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_023))::numeric(9,3) END AS trx_023, CASE WHEN (EXT_IMS_MHK_QTY_M_src.trx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_M_src.trx_024))::numeric(9,3) END AS trx_024, EXT_IMS_MHK_QTY_M_src.batch_id, EXT_IMS_MHK_QTY_M_src.row_id, EXT_IMS_MHK_QTY_M_src.update_ts FROM teva_ingestion.EXT_IMS_MHK_QTY_M_src;

CREATE  VIEW teva_ingestion.EXT_IMS_MHK_QTY_W AS
SELECT CASE WHEN (EXT_IMS_MHK_QTY_W_src.ims_client_num = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_QTY_W_src.ims_client_num))::int END AS ims_client_num, CASE WHEN (EXT_IMS_MHK_QTY_W_src.ims_report_num = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_QTY_W_src.ims_report_num))::int END AS ims_report_num, btrim(EXT_IMS_MHK_QTY_W_src.zip_other) AS zip_other, btrim(EXT_IMS_MHK_QTY_W_src.ims_id) AS ims_id, btrim(EXT_IMS_MHK_QTY_W_src.ndc) AS ndc, btrim(EXT_IMS_MHK_QTY_W_src.plan_id) AS plan_id, CASE WHEN (EXT_IMS_MHK_QTY_W_src.sales_category = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_QTY_W_src.sales_category))::int END AS sales_category, btrim(EXT_IMS_MHK_QTY_W_src.rx_type) AS rx_type, CASE WHEN (EXT_IMS_MHK_QTY_W_src.ims_product_group_num = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_QTY_W_src.ims_product_group_num))::int END AS ims_product_group_num, btrim(EXT_IMS_MHK_QTY_W_src.filler_01) AS filler_01, btrim(EXT_IMS_MHK_QTY_W_src.me_num) AS me_num, btrim(EXT_IMS_MHK_QTY_W_src.last_name) AS last_name, btrim(EXT_IMS_MHK_QTY_W_src.first_name) AS first_name, btrim(EXT_IMS_MHK_QTY_W_src.middle_name) AS middle_name, btrim(EXT_IMS_MHK_QTY_W_src.address) AS address, btrim(EXT_IMS_MHK_QTY_W_src.city) AS city, btrim(EXT_IMS_MHK_QTY_W_src.state) AS state, btrim(EXT_IMS_MHK_QTY_W_src.zip) AS zip, btrim(EXT_IMS_MHK_QTY_W_src.specialty) AS specialty, btrim(EXT_IMS_MHK_QTY_W_src.plan_name) AS plan_name, btrim(EXT_IMS_MHK_QTY_W_src.ndc_description) AS ndc_description, btrim(EXT_IMS_MHK_QTY_W_src.data_date) AS data_date, CASE WHEN (EXT_IMS_MHK_QTY_W_src.bucket_count = ''::varchar) THEN NULL::int ELSE (btrim(EXT_IMS_MHK_QTY_W_src.bucket_count))::int END AS bucket_count, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_001))::numeric(9,3) END AS nrx_001, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_002))::numeric(9,3) END AS nrx_002, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_003))::numeric(9,3) END AS nrx_003, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_004))::numeric(9,3) END AS nrx_004, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_005))::numeric(9,3) END AS nrx_005, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_006))::numeric(9,3) END AS nrx_006, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_007))::numeric(9,3) END AS nrx_007, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_008))::numeric(9,3) END AS nrx_008, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_009))::numeric(9,3) END AS nrx_009, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_010))::numeric(9,3) END AS nrx_010, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_011))::numeric(9,3) END AS nrx_011, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_012))::numeric(9,3) END AS nrx_012, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_013))::numeric(9,3) END AS nrx_013, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_014))::numeric(9,3) END AS nrx_014, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_015))::numeric(9,3) END AS nrx_015, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_016))::numeric(9,3) END AS nrx_016, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_017))::numeric(9,3) END AS nrx_017, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_018))::numeric(9,3) END AS nrx_018, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_019))::numeric(9,3) END AS nrx_019, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_020))::numeric(9,3) END AS nrx_020, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_021))::numeric(9,3) END AS nrx_021, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_022))::numeric(9,3) END AS nrx_022, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_023))::numeric(9,3) END AS nrx_023, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_024))::numeric(9,3) END AS nrx_024, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_025 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_025))::numeric(9,3) END AS nrx_025, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_026 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_026))::numeric(9,3) END AS nrx_026, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_027 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_027))::numeric(9,3) END AS nrx_027, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_028 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_028))::numeric(9,3) END AS nrx_028, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_029 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_029))::numeric(9,3) END AS nrx_029, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_030 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_030))::numeric(9,3) END AS nrx_030, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_031 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_031))::numeric(9,3) END AS nrx_031, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_032 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_032))::numeric(9,3) END AS nrx_032, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_033 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_033))::numeric(9,3) END AS nrx_033, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_034 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_034))::numeric(9,3) END AS nrx_034, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_035 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_035))::numeric(9,3) END AS nrx_035, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_036 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_036))::numeric(9,3) END AS nrx_036, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_037 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_037))::numeric(9,3) END AS nrx_037, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_038 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_038))::numeric(9,3) END AS nrx_038, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_039 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_039))::numeric(9,3) END AS nrx_039, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_040 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_040))::numeric(9,3) END AS nrx_040, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_041 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_041))::numeric(9,3) END AS nrx_041, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_042 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_042))::numeric(9,3) END AS nrx_042, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_043 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_043))::numeric(9,3) END AS nrx_043, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_044 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_044))::numeric(9,3) END AS nrx_044, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_045 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_045))::numeric(9,3) END AS nrx_045, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_046 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_046))::numeric(9,3) END AS nrx_046, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_047 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_047))::numeric(9,3) END AS nrx_047, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_048 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_048))::numeric(9,3) END AS nrx_048, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_049 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_049))::numeric(9,3) END AS nrx_049, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_050 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_050))::numeric(9,3) END AS nrx_050, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_051 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_051))::numeric(9,3) END AS nrx_051, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_052 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_052))::numeric(9,3) END AS nrx_052, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_053 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_053))::numeric(9,3) END AS nrx_053, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_054 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_054))::numeric(9,3) END AS nrx_054, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_055 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_055))::numeric(9,3) END AS nrx_055, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_056 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_056))::numeric(9,3) END AS nrx_056, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_057 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_057))::numeric(9,3) END AS nrx_057, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_058 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_058))::numeric(9,3) END AS nrx_058, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_059 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_059))::numeric(9,3) END AS nrx_059, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_060 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_060))::numeric(9,3) END AS nrx_060, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_061 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_061))::numeric(9,3) END AS nrx_061, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_062 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_062))::numeric(9,3) END AS nrx_062, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_063 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_063))::numeric(9,3) END AS nrx_063, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_064 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_064))::numeric(9,3) END AS nrx_064, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_065 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_065))::numeric(9,3) END AS nrx_065, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_066 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_066))::numeric(9,3) END AS nrx_066, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_067 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_067))::numeric(9,3) END AS nrx_067, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_068 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_068))::numeric(9,3) END AS nrx_068, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_069 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_069))::numeric(9,3) END AS nrx_069, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_070 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_070))::numeric(9,3) END AS nrx_070, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_071 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_071))::numeric(9,3) END AS nrx_071, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_072 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_072))::numeric(9,3) END AS nrx_072, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_073 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_073))::numeric(9,3) END AS nrx_073, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_074 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_074))::numeric(9,3) END AS nrx_074, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_075 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_075))::numeric(9,3) END AS nrx_075, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_076 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_076))::numeric(9,3) END AS nrx_076, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_077 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_077))::numeric(9,3) END AS nrx_077, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_078 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_078))::numeric(9,3) END AS nrx_078, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_079 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_079))::numeric(9,3) END AS nrx_079, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_080 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_080))::numeric(9,3) END AS nrx_080, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_081 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_081))::numeric(9,3) END AS nrx_081, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_082 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_082))::numeric(9,3) END AS nrx_082, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_083 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_083))::numeric(9,3) END AS nrx_083, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_084 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_084))::numeric(9,3) END AS nrx_084, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_085 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_085))::numeric(9,3) END AS nrx_085, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_086 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_086))::numeric(9,3) END AS nrx_086, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_087 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_087))::numeric(9,3) END AS nrx_087, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_088 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_088))::numeric(9,3) END AS nrx_088, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_089 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_089))::numeric(9,3) END AS nrx_089, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_090 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_090))::numeric(9,3) END AS nrx_090, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_091 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_091))::numeric(9,3) END AS nrx_091, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_092 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_092))::numeric(9,3) END AS nrx_092, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_093 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_093))::numeric(9,3) END AS nrx_093, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_094 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_094))::numeric(9,3) END AS nrx_094, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_095 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_095))::numeric(9,3) END AS nrx_095, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_096 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_096))::numeric(9,3) END AS nrx_096, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_097 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_097))::numeric(9,3) END AS nrx_097, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_098 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_098))::numeric(9,3) END AS nrx_098, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_099 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_099))::numeric(9,3) END AS nrx_099, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_100 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_100))::numeric(9,3) END AS nrx_100, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_101 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_101))::numeric(9,3) END AS nrx_101, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_102 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_102))::numeric(9,3) END AS nrx_102, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_103 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_103))::numeric(9,3) END AS nrx_103, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_104 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_104))::numeric(9,3) END AS nrx_104, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_105 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_105))::numeric(9,3) END AS nrx_105, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_106 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_106))::numeric(9,3) END AS nrx_106, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_107 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_107))::numeric(9,3) END AS nrx_107, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_108 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_108))::numeric(9,3) END AS nrx_108, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_109 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_109))::numeric(9,3) END AS nrx_109, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_110 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_110))::numeric(9,3) END AS nrx_110, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_111 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_111))::numeric(9,3) END AS nrx_111, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_112 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_112))::numeric(9,3) END AS nrx_112, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_113 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_113))::numeric(9,3) END AS nrx_113, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_114 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_114))::numeric(9,3) END AS nrx_114, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_115 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_115))::numeric(9,3) END AS nrx_115, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_116 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_116))::numeric(9,3) END AS nrx_116, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_117 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_117))::numeric(9,3) END AS nrx_117, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_118 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_118))::numeric(9,3) END AS nrx_118, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_119 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_119))::numeric(9,3) END AS nrx_119, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_120 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_120))::numeric(9,3) END AS nrx_120, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_121 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_121))::numeric(9,3) END AS nrx_121, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_122 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_122))::numeric(9,3) END AS nrx_122, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_123 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_123))::numeric(9,3) END AS nrx_123, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_124 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_124))::numeric(9,3) END AS nrx_124, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_125 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_125))::numeric(9,3) END AS nrx_125, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_126 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_126))::numeric(9,3) END AS nrx_126, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_127 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_127))::numeric(9,3) END AS nrx_127, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_128 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_128))::numeric(9,3) END AS nrx_128, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_129 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_129))::numeric(9,3) END AS nrx_129, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_130 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_130))::numeric(9,3) END AS nrx_130, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_131 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_131))::numeric(9,3) END AS nrx_131, CASE WHEN (EXT_IMS_MHK_QTY_W_src.nrx_132 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.nrx_132))::numeric(9,3) END AS nrx_132, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_001))::numeric(9,3) END AS trx_001, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_002))::numeric(9,3) END AS trx_002, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_003))::numeric(9,3) END AS trx_003, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_004))::numeric(9,3) END AS trx_004, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_005))::numeric(9,3) END AS trx_005, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_006))::numeric(9,3) END AS trx_006, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_007))::numeric(9,3) END AS trx_007, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_008))::numeric(9,3) END AS trx_008, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_009))::numeric(9,3) END AS trx_009, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_010))::numeric(9,3) END AS trx_010, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_011))::numeric(9,3) END AS trx_011, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_012))::numeric(9,3) END AS trx_012, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_013))::numeric(9,3) END AS trx_013, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_014))::numeric(9,3) END AS trx_014, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_015))::numeric(9,3) END AS trx_015, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_016))::numeric(9,3) END AS trx_016, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_017))::numeric(9,3) END AS trx_017, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_018))::numeric(9,3) END AS trx_018, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_019))::numeric(9,3) END AS trx_019, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_020))::numeric(9,3) END AS trx_020, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_021))::numeric(9,3) END AS trx_021, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_022))::numeric(9,3) END AS trx_022, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_023))::numeric(9,3) END AS trx_023, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_024))::numeric(9,3) END AS trx_024, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_025 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_025))::numeric(9,3) END AS trx_025, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_026 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_026))::numeric(9,3) END AS trx_026, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_027 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_027))::numeric(9,3) END AS trx_027, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_028 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_028))::numeric(9,3) END AS trx_028, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_029 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_029))::numeric(9,3) END AS trx_029, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_030 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_030))::numeric(9,3) END AS trx_030, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_031 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_031))::numeric(9,3) END AS trx_031, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_032 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_032))::numeric(9,3) END AS trx_032, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_033 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_033))::numeric(9,3) END AS trx_033, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_034 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_034))::numeric(9,3) END AS trx_034, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_035 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_035))::numeric(9,3) END AS trx_035, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_036 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_036))::numeric(9,3) END AS trx_036, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_037 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_037))::numeric(9,3) END AS trx_037, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_038 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_038))::numeric(9,3) END AS trx_038, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_039 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_039))::numeric(9,3) END AS trx_039, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_040 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_040))::numeric(9,3) END AS trx_040, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_041 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_041))::numeric(9,3) END AS trx_041, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_042 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_042))::numeric(9,3) END AS trx_042, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_043 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_043))::numeric(9,3) END AS trx_043, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_044 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_044))::numeric(9,3) END AS trx_044, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_045 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_045))::numeric(9,3) END AS trx_045, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_046 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_046))::numeric(9,3) END AS trx_046, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_047 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_047))::numeric(9,3) END AS trx_047, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_048 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_048))::numeric(9,3) END AS trx_048, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_049 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_049))::numeric(9,3) END AS trx_049, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_050 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_050))::numeric(9,3) END AS trx_050, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_051 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_051))::numeric(9,3) END AS trx_051, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_052 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_052))::numeric(9,3) END AS trx_052, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_053 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_053))::numeric(9,3) END AS trx_053, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_054 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_054))::numeric(9,3) END AS trx_054, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_055 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_055))::numeric(9,3) END AS trx_055, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_056 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_056))::numeric(9,3) END AS trx_056, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_057 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_057))::numeric(9,3) END AS trx_057, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_058 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_058))::numeric(9,3) END AS trx_058, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_059 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_059))::numeric(9,3) END AS trx_059, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_060 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_060))::numeric(9,3) END AS trx_060, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_061 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_061))::numeric(9,3) END AS trx_061, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_062 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_062))::numeric(9,3) END AS trx_062, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_063 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_063))::numeric(9,3) END AS trx_063, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_064 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_064))::numeric(9,3) END AS trx_064, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_065 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_065))::numeric(9,3) END AS trx_065, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_066 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_066))::numeric(9,3) END AS trx_066, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_067 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_067))::numeric(9,3) END AS trx_067, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_068 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_068))::numeric(9,3) END AS trx_068, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_069 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_069))::numeric(9,3) END AS trx_069, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_070 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_070))::numeric(9,3) END AS trx_070, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_071 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_071))::numeric(9,3) END AS trx_071, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_072 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_072))::numeric(9,3) END AS trx_072, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_073 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_073))::numeric(9,3) END AS trx_073, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_074 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_074))::numeric(9,3) END AS trx_074, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_075 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_075))::numeric(9,3) END AS trx_075, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_076 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_076))::numeric(9,3) END AS trx_076, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_077 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_077))::numeric(9,3) END AS trx_077, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_078 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_078))::numeric(9,3) END AS trx_078, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_079 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_079))::numeric(9,3) END AS trx_079, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_080 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_080))::numeric(9,3) END AS trx_080, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_081 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_081))::numeric(9,3) END AS trx_081, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_082 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_082))::numeric(9,3) END AS trx_082, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_083 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_083))::numeric(9,3) END AS trx_083, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_084 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_084))::numeric(9,3) END AS trx_084, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_085 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_085))::numeric(9,3) END AS trx_085, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_086 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_086))::numeric(9,3) END AS trx_086, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_087 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_087))::numeric(9,3) END AS trx_087, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_088 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_088))::numeric(9,3) END AS trx_088, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_089 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_089))::numeric(9,3) END AS trx_089, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_090 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_090))::numeric(9,3) END AS trx_090, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_091 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_091))::numeric(9,3) END AS trx_091, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_092 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_092))::numeric(9,3) END AS trx_092, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_093 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_093))::numeric(9,3) END AS trx_093, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_094 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_094))::numeric(9,3) END AS trx_094, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_095 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_095))::numeric(9,3) END AS trx_095, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_096 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_096))::numeric(9,3) END AS trx_096, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_097 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_097))::numeric(9,3) END AS trx_097, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_098 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_098))::numeric(9,3) END AS trx_098, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_099 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_099))::numeric(9,3) END AS trx_099, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_100 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_100))::numeric(9,3) END AS trx_100, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_101 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_101))::numeric(9,3) END AS trx_101, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_102 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_102))::numeric(9,3) END AS trx_102, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_103 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_103))::numeric(9,3) END AS trx_103, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_104 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_104))::numeric(9,3) END AS trx_104, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_105 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_105))::numeric(9,3) END AS trx_105, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_106 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_106))::numeric(9,3) END AS trx_106, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_107 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_107))::numeric(9,3) END AS trx_107, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_108 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_108))::numeric(9,3) END AS trx_108, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_109 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_109))::numeric(9,3) END AS trx_109, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_110 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_110))::numeric(9,3) END AS trx_110, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_111 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_111))::numeric(9,3) END AS trx_111, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_112 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_112))::numeric(9,3) END AS trx_112, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_113 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_113))::numeric(9,3) END AS trx_113, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_114 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_114))::numeric(9,3) END AS trx_114, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_115 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_115))::numeric(9,3) END AS trx_115, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_116 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_116))::numeric(9,3) END AS trx_116, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_117 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_117))::numeric(9,3) END AS trx_117, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_118 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_118))::numeric(9,3) END AS trx_118, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_119 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_119))::numeric(9,3) END AS trx_119, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_120 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_120))::numeric(9,3) END AS trx_120, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_121 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_121))::numeric(9,3) END AS trx_121, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_122 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_122))::numeric(9,3) END AS trx_122, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_123 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_123))::numeric(9,3) END AS trx_123, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_124 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_124))::numeric(9,3) END AS trx_124, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_125 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_125))::numeric(9,3) END AS trx_125, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_126 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_126))::numeric(9,3) END AS trx_126, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_127 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_127))::numeric(9,3) END AS trx_127, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_128 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_128))::numeric(9,3) END AS trx_128, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_129 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_129))::numeric(9,3) END AS trx_129, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_130 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_130))::numeric(9,3) END AS trx_130, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_131 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_131))::numeric(9,3) END AS trx_131, CASE WHEN (EXT_IMS_MHK_QTY_W_src.trx_132 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(EXT_IMS_MHK_QTY_W_src.trx_132))::numeric(9,3) END AS trx_132, EXT_IMS_MHK_QTY_W_src.batch_id, EXT_IMS_MHK_QTY_W_src.row_id, EXT_IMS_MHK_QTY_W_src.update_ts FROM teva_ingestion.EXT_IMS_MHK_QTY_W_src;

CREATE  VIEW teva_ingestion.MS_MTHLY_RX_CNT AS
SELECT CASE WHEN (MS_MTHLY_RX_CNT_src.ims_client_num = ''::varchar) THEN NULL::int ELSE (btrim(MS_MTHLY_RX_CNT_src.ims_client_num))::int END AS ims_client_num, CASE WHEN (MS_MTHLY_RX_CNT_src.ims_report_num = ''::varchar) THEN NULL::int ELSE (btrim(MS_MTHLY_RX_CNT_src.ims_report_num))::int END AS ims_report_num, btrim(MS_MTHLY_RX_CNT_src.zip_other) AS zip_other, btrim(MS_MTHLY_RX_CNT_src.ims_id) AS ims_id, btrim(MS_MTHLY_RX_CNT_src.ndc) AS ndc, btrim(MS_MTHLY_RX_CNT_src.plan_id) AS plan_id, CASE WHEN (MS_MTHLY_RX_CNT_src.sales_category = ''::varchar) THEN NULL::int ELSE (btrim(MS_MTHLY_RX_CNT_src.sales_category))::int END AS sales_category, btrim(MS_MTHLY_RX_CNT_src.rx_type) AS rx_type, CASE WHEN (MS_MTHLY_RX_CNT_src.ims_product_group_num = ''::varchar) THEN NULL::int ELSE (btrim(MS_MTHLY_RX_CNT_src.ims_product_group_num))::int END AS ims_product_group_num, btrim(MS_MTHLY_RX_CNT_src.filler_01) AS filler_01, btrim(MS_MTHLY_RX_CNT_src.me_num) AS me_num, btrim(MS_MTHLY_RX_CNT_src.last_name) AS last_name, btrim(MS_MTHLY_RX_CNT_src.first_name) AS first_name, btrim(MS_MTHLY_RX_CNT_src.middle_name) AS middle_name, btrim(MS_MTHLY_RX_CNT_src.address) AS address, btrim(MS_MTHLY_RX_CNT_src.city) AS city, btrim(MS_MTHLY_RX_CNT_src.state) AS state, btrim(MS_MTHLY_RX_CNT_src.zip) AS zip, btrim(MS_MTHLY_RX_CNT_src.specialty) AS specialty, btrim(MS_MTHLY_RX_CNT_src.plan_name) AS plan_name, btrim(MS_MTHLY_RX_CNT_src.ndc_description) AS ndc_description, btrim(MS_MTHLY_RX_CNT_src.data_date) AS data_date, CASE WHEN (MS_MTHLY_RX_CNT_src.bucket_count = ''::varchar) THEN NULL::int ELSE (btrim(MS_MTHLY_RX_CNT_src.bucket_count))::int END AS bucket_count, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_001))::numeric(9,3) END AS nrx_001, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_002))::numeric(9,3) END AS nrx_002, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_003))::numeric(9,3) END AS nrx_003, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_004))::numeric(9,3) END AS nrx_004, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_005))::numeric(9,3) END AS nrx_005, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_006))::numeric(9,3) END AS nrx_006, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_007))::numeric(9,3) END AS nrx_007, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_008))::numeric(9,3) END AS nrx_008, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_009))::numeric(9,3) END AS nrx_009, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_010))::numeric(9,3) END AS nrx_010, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_011))::numeric(9,3) END AS nrx_011, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_012))::numeric(9,3) END AS nrx_012, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_013))::numeric(9,3) END AS nrx_013, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_014))::numeric(9,3) END AS nrx_014, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_015))::numeric(9,3) END AS nrx_015, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_016))::numeric(9,3) END AS nrx_016, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_017))::numeric(9,3) END AS nrx_017, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_018))::numeric(9,3) END AS nrx_018, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_019))::numeric(9,3) END AS nrx_019, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_020))::numeric(9,3) END AS nrx_020, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_021))::numeric(9,3) END AS nrx_021, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_022))::numeric(9,3) END AS nrx_022, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_023))::numeric(9,3) END AS nrx_023, CASE WHEN (MS_MTHLY_RX_CNT_src.nrx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.nrx_024))::numeric(9,3) END AS nrx_024, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_001))::numeric(9,3) END AS trx_001, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_002))::numeric(9,3) END AS trx_002, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_003))::numeric(9,3) END AS trx_003, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_004))::numeric(9,3) END AS trx_004, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_005))::numeric(9,3) END AS trx_005, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_006))::numeric(9,3) END AS trx_006, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_007))::numeric(9,3) END AS trx_007, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_008))::numeric(9,3) END AS trx_008, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_009))::numeric(9,3) END AS trx_009, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_010))::numeric(9,3) END AS trx_010, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_011))::numeric(9,3) END AS trx_011, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_012))::numeric(9,3) END AS trx_012, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_013))::numeric(9,3) END AS trx_013, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_014))::numeric(9,3) END AS trx_014, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_015))::numeric(9,3) END AS trx_015, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_016))::numeric(9,3) END AS trx_016, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_017))::numeric(9,3) END AS trx_017, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_018))::numeric(9,3) END AS trx_018, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_019))::numeric(9,3) END AS trx_019, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_020))::numeric(9,3) END AS trx_020, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_021))::numeric(9,3) END AS trx_021, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_022))::numeric(9,3) END AS trx_022, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_023))::numeric(9,3) END AS trx_023, CASE WHEN (MS_MTHLY_RX_CNT_src.trx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_MTHLY_RX_CNT_src.trx_024))::numeric(9,3) END AS trx_024, MS_MTHLY_RX_CNT_src.batch_id, MS_MTHLY_RX_CNT_src.row_id, MS_MTHLY_RX_CNT_src.update_ts FROM teva_ingestion.MS_MTHLY_RX_CNT_src;

CREATE  VIEW teva_ingestion.MS_WKLY_RX_CNT AS
SELECT CASE WHEN (MS_WKLY_RX_CNT_src.ims_client_num = ''::varchar) THEN NULL::int ELSE (btrim(MS_WKLY_RX_CNT_src.ims_client_num))::int END AS ims_client_num, CASE WHEN (MS_WKLY_RX_CNT_src.ims_report_num = ''::varchar) THEN NULL::int ELSE (btrim(MS_WKLY_RX_CNT_src.ims_report_num))::int END AS ims_report_num, btrim(MS_WKLY_RX_CNT_src.zip_other) AS zip_other, btrim(MS_WKLY_RX_CNT_src.ims_id) AS ims_id, btrim(MS_WKLY_RX_CNT_src.ndc) AS ndc, btrim(MS_WKLY_RX_CNT_src.plan_id) AS plan_id, CASE WHEN (MS_WKLY_RX_CNT_src.sales_category = ''::varchar) THEN NULL::int ELSE (btrim(MS_WKLY_RX_CNT_src.sales_category))::int END AS sales_category, btrim(MS_WKLY_RX_CNT_src.rx_type) AS rx_type, CASE WHEN (MS_WKLY_RX_CNT_src.ims_product_group_num = ''::varchar) THEN NULL::int ELSE (btrim(MS_WKLY_RX_CNT_src.ims_product_group_num))::int END AS ims_product_group_num, btrim(MS_WKLY_RX_CNT_src.filler_01) AS filler_01, btrim(MS_WKLY_RX_CNT_src.me_num) AS me_num, btrim(MS_WKLY_RX_CNT_src.last_name) AS last_name, btrim(MS_WKLY_RX_CNT_src.first_name) AS first_name, btrim(MS_WKLY_RX_CNT_src.middle_name) AS middle_name, btrim(MS_WKLY_RX_CNT_src.address) AS address, btrim(MS_WKLY_RX_CNT_src.city) AS city, btrim(MS_WKLY_RX_CNT_src.state) AS state, btrim(MS_WKLY_RX_CNT_src.zip) AS zip, btrim(MS_WKLY_RX_CNT_src.specialty) AS specialty, btrim(MS_WKLY_RX_CNT_src.plan_name) AS plan_name, btrim(MS_WKLY_RX_CNT_src.ndc_description) AS ndc_description, btrim(MS_WKLY_RX_CNT_src.data_date) AS data_date, CASE WHEN (MS_WKLY_RX_CNT_src.bucket_count = ''::varchar) THEN NULL::int ELSE (btrim(MS_WKLY_RX_CNT_src.bucket_count))::int END AS bucket_count, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_001))::numeric(9,3) END AS nrx_001, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_002))::numeric(9,3) END AS nrx_002, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_003))::numeric(9,3) END AS nrx_003, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_004))::numeric(9,3) END AS nrx_004, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_005))::numeric(9,3) END AS nrx_005, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_006))::numeric(9,3) END AS nrx_006, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_007))::numeric(9,3) END AS nrx_007, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_008))::numeric(9,3) END AS nrx_008, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_009))::numeric(9,3) END AS nrx_009, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_010))::numeric(9,3) END AS nrx_010, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_011))::numeric(9,3) END AS nrx_011, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_012))::numeric(9,3) END AS nrx_012, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_013))::numeric(9,3) END AS nrx_013, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_014))::numeric(9,3) END AS nrx_014, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_015))::numeric(9,3) END AS nrx_015, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_016))::numeric(9,3) END AS nrx_016, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_017))::numeric(9,3) END AS nrx_017, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_018))::numeric(9,3) END AS nrx_018, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_019))::numeric(9,3) END AS nrx_019, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_020))::numeric(9,3) END AS nrx_020, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_021))::numeric(9,3) END AS nrx_021, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_022))::numeric(9,3) END AS nrx_022, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_023))::numeric(9,3) END AS nrx_023, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_024))::numeric(9,3) END AS nrx_024, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_025 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_025))::numeric(9,3) END AS nrx_025, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_026 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_026))::numeric(9,3) END AS nrx_026, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_027 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_027))::numeric(9,3) END AS nrx_027, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_028 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_028))::numeric(9,3) END AS nrx_028, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_029 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_029))::numeric(9,3) END AS nrx_029, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_030 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_030))::numeric(9,3) END AS nrx_030, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_031 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_031))::numeric(9,3) END AS nrx_031, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_032 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_032))::numeric(9,3) END AS nrx_032, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_033 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_033))::numeric(9,3) END AS nrx_033, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_034 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_034))::numeric(9,3) END AS nrx_034, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_035 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_035))::numeric(9,3) END AS nrx_035, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_036 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_036))::numeric(9,3) END AS nrx_036, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_037 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_037))::numeric(9,3) END AS nrx_037, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_038 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_038))::numeric(9,3) END AS nrx_038, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_039 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_039))::numeric(9,3) END AS nrx_039, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_040 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_040))::numeric(9,3) END AS nrx_040, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_041 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_041))::numeric(9,3) END AS nrx_041, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_042 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_042))::numeric(9,3) END AS nrx_042, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_043 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_043))::numeric(9,3) END AS nrx_043, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_044 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_044))::numeric(9,3) END AS nrx_044, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_045 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_045))::numeric(9,3) END AS nrx_045, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_046 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_046))::numeric(9,3) END AS nrx_046, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_047 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_047))::numeric(9,3) END AS nrx_047, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_048 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_048))::numeric(9,3) END AS nrx_048, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_049 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_049))::numeric(9,3) END AS nrx_049, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_050 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_050))::numeric(9,3) END AS nrx_050, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_051 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_051))::numeric(9,3) END AS nrx_051, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_052 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_052))::numeric(9,3) END AS nrx_052, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_053 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_053))::numeric(9,3) END AS nrx_053, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_054 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_054))::numeric(9,3) END AS nrx_054, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_055 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_055))::numeric(9,3) END AS nrx_055, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_056 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_056))::numeric(9,3) END AS nrx_056, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_057 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_057))::numeric(9,3) END AS nrx_057, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_058 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_058))::numeric(9,3) END AS nrx_058, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_059 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_059))::numeric(9,3) END AS nrx_059, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_060 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_060))::numeric(9,3) END AS nrx_060, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_061 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_061))::numeric(9,3) END AS nrx_061, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_062 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_062))::numeric(9,3) END AS nrx_062, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_063 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_063))::numeric(9,3) END AS nrx_063, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_064 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_064))::numeric(9,3) END AS nrx_064, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_065 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_065))::numeric(9,3) END AS nrx_065, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_066 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_066))::numeric(9,3) END AS nrx_066, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_067 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_067))::numeric(9,3) END AS nrx_067, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_068 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_068))::numeric(9,3) END AS nrx_068, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_069 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_069))::numeric(9,3) END AS nrx_069, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_070 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_070))::numeric(9,3) END AS nrx_070, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_071 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_071))::numeric(9,3) END AS nrx_071, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_072 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_072))::numeric(9,3) END AS nrx_072, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_073 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_073))::numeric(9,3) END AS nrx_073, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_074 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_074))::numeric(9,3) END AS nrx_074, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_075 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_075))::numeric(9,3) END AS nrx_075, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_076 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_076))::numeric(9,3) END AS nrx_076, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_077 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_077))::numeric(9,3) END AS nrx_077, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_078 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_078))::numeric(9,3) END AS nrx_078, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_079 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_079))::numeric(9,3) END AS nrx_079, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_080 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_080))::numeric(9,3) END AS nrx_080, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_081 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_081))::numeric(9,3) END AS nrx_081, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_082 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_082))::numeric(9,3) END AS nrx_082, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_083 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_083))::numeric(9,3) END AS nrx_083, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_084 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_084))::numeric(9,3) END AS nrx_084, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_085 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_085))::numeric(9,3) END AS nrx_085, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_086 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_086))::numeric(9,3) END AS nrx_086, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_087 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_087))::numeric(9,3) END AS nrx_087, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_088 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_088))::numeric(9,3) END AS nrx_088, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_089 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_089))::numeric(9,3) END AS nrx_089, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_090 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_090))::numeric(9,3) END AS nrx_090, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_091 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_091))::numeric(9,3) END AS nrx_091, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_092 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_092))::numeric(9,3) END AS nrx_092, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_093 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_093))::numeric(9,3) END AS nrx_093, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_094 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_094))::numeric(9,3) END AS nrx_094, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_095 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_095))::numeric(9,3) END AS nrx_095, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_096 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_096))::numeric(9,3) END AS nrx_096, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_097 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_097))::numeric(9,3) END AS nrx_097, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_098 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_098))::numeric(9,3) END AS nrx_098, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_099 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_099))::numeric(9,3) END AS nrx_099, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_100 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_100))::numeric(9,3) END AS nrx_100, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_101 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_101))::numeric(9,3) END AS nrx_101, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_102 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_102))::numeric(9,3) END AS nrx_102, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_103 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_103))::numeric(9,3) END AS nrx_103, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_104 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_104))::numeric(9,3) END AS nrx_104, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_105 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_105))::numeric(9,3) END AS nrx_105, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_106 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_106))::numeric(9,3) END AS nrx_106, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_107 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_107))::numeric(9,3) END AS nrx_107, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_108 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_108))::numeric(9,3) END AS nrx_108, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_109 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_109))::numeric(9,3) END AS nrx_109, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_110 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_110))::numeric(9,3) END AS nrx_110, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_111 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_111))::numeric(9,3) END AS nrx_111, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_112 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_112))::numeric(9,3) END AS nrx_112, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_113 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_113))::numeric(9,3) END AS nrx_113, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_114 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_114))::numeric(9,3) END AS nrx_114, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_115 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_115))::numeric(9,3) END AS nrx_115, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_116 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_116))::numeric(9,3) END AS nrx_116, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_117 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_117))::numeric(9,3) END AS nrx_117, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_118 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_118))::numeric(9,3) END AS nrx_118, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_119 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_119))::numeric(9,3) END AS nrx_119, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_120 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_120))::numeric(9,3) END AS nrx_120, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_121 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_121))::numeric(9,3) END AS nrx_121, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_122 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_122))::numeric(9,3) END AS nrx_122, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_123 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_123))::numeric(9,3) END AS nrx_123, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_124 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_124))::numeric(9,3) END AS nrx_124, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_125 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_125))::numeric(9,3) END AS nrx_125, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_126 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_126))::numeric(9,3) END AS nrx_126, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_127 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_127))::numeric(9,3) END AS nrx_127, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_128 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_128))::numeric(9,3) END AS nrx_128, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_129 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_129))::numeric(9,3) END AS nrx_129, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_130 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_130))::numeric(9,3) END AS nrx_130, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_131 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_131))::numeric(9,3) END AS nrx_131, CASE WHEN (MS_WKLY_RX_CNT_src.nrx_132 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.nrx_132))::numeric(9,3) END AS nrx_132, CASE WHEN (MS_WKLY_RX_CNT_src.trx_001 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_001))::numeric(9,3) END AS trx_001, CASE WHEN (MS_WKLY_RX_CNT_src.trx_002 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_002))::numeric(9,3) END AS trx_002, CASE WHEN (MS_WKLY_RX_CNT_src.trx_003 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_003))::numeric(9,3) END AS trx_003, CASE WHEN (MS_WKLY_RX_CNT_src.trx_004 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_004))::numeric(9,3) END AS trx_004, CASE WHEN (MS_WKLY_RX_CNT_src.trx_005 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_005))::numeric(9,3) END AS trx_005, CASE WHEN (MS_WKLY_RX_CNT_src.trx_006 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_006))::numeric(9,3) END AS trx_006, CASE WHEN (MS_WKLY_RX_CNT_src.trx_007 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_007))::numeric(9,3) END AS trx_007, CASE WHEN (MS_WKLY_RX_CNT_src.trx_008 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_008))::numeric(9,3) END AS trx_008, CASE WHEN (MS_WKLY_RX_CNT_src.trx_009 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_009))::numeric(9,3) END AS trx_009, CASE WHEN (MS_WKLY_RX_CNT_src.trx_010 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_010))::numeric(9,3) END AS trx_010, CASE WHEN (MS_WKLY_RX_CNT_src.trx_011 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_011))::numeric(9,3) END AS trx_011, CASE WHEN (MS_WKLY_RX_CNT_src.trx_012 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_012))::numeric(9,3) END AS trx_012, CASE WHEN (MS_WKLY_RX_CNT_src.trx_013 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_013))::numeric(9,3) END AS trx_013, CASE WHEN (MS_WKLY_RX_CNT_src.trx_014 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_014))::numeric(9,3) END AS trx_014, CASE WHEN (MS_WKLY_RX_CNT_src.trx_015 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_015))::numeric(9,3) END AS trx_015, CASE WHEN (MS_WKLY_RX_CNT_src.trx_016 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_016))::numeric(9,3) END AS trx_016, CASE WHEN (MS_WKLY_RX_CNT_src.trx_017 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_017))::numeric(9,3) END AS trx_017, CASE WHEN (MS_WKLY_RX_CNT_src.trx_018 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_018))::numeric(9,3) END AS trx_018, CASE WHEN (MS_WKLY_RX_CNT_src.trx_019 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_019))::numeric(9,3) END AS trx_019, CASE WHEN (MS_WKLY_RX_CNT_src.trx_020 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_020))::numeric(9,3) END AS trx_020, CASE WHEN (MS_WKLY_RX_CNT_src.trx_021 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_021))::numeric(9,3) END AS trx_021, CASE WHEN (MS_WKLY_RX_CNT_src.trx_022 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_022))::numeric(9,3) END AS trx_022, CASE WHEN (MS_WKLY_RX_CNT_src.trx_023 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_023))::numeric(9,3) END AS trx_023, CASE WHEN (MS_WKLY_RX_CNT_src.trx_024 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_024))::numeric(9,3) END AS trx_024, CASE WHEN (MS_WKLY_RX_CNT_src.trx_025 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_025))::numeric(9,3) END AS trx_025, CASE WHEN (MS_WKLY_RX_CNT_src.trx_026 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_026))::numeric(9,3) END AS trx_026, CASE WHEN (MS_WKLY_RX_CNT_src.trx_027 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_027))::numeric(9,3) END AS trx_027, CASE WHEN (MS_WKLY_RX_CNT_src.trx_028 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_028))::numeric(9,3) END AS trx_028, CASE WHEN (MS_WKLY_RX_CNT_src.trx_029 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_029))::numeric(9,3) END AS trx_029, CASE WHEN (MS_WKLY_RX_CNT_src.trx_030 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_030))::numeric(9,3) END AS trx_030, CASE WHEN (MS_WKLY_RX_CNT_src.trx_031 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_031))::numeric(9,3) END AS trx_031, CASE WHEN (MS_WKLY_RX_CNT_src.trx_032 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_032))::numeric(9,3) END AS trx_032, CASE WHEN (MS_WKLY_RX_CNT_src.trx_033 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_033))::numeric(9,3) END AS trx_033, CASE WHEN (MS_WKLY_RX_CNT_src.trx_034 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_034))::numeric(9,3) END AS trx_034, CASE WHEN (MS_WKLY_RX_CNT_src.trx_035 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_035))::numeric(9,3) END AS trx_035, CASE WHEN (MS_WKLY_RX_CNT_src.trx_036 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_036))::numeric(9,3) END AS trx_036, CASE WHEN (MS_WKLY_RX_CNT_src.trx_037 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_037))::numeric(9,3) END AS trx_037, CASE WHEN (MS_WKLY_RX_CNT_src.trx_038 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_038))::numeric(9,3) END AS trx_038, CASE WHEN (MS_WKLY_RX_CNT_src.trx_039 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_039))::numeric(9,3) END AS trx_039, CASE WHEN (MS_WKLY_RX_CNT_src.trx_040 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_040))::numeric(9,3) END AS trx_040, CASE WHEN (MS_WKLY_RX_CNT_src.trx_041 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_041))::numeric(9,3) END AS trx_041, CASE WHEN (MS_WKLY_RX_CNT_src.trx_042 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_042))::numeric(9,3) END AS trx_042, CASE WHEN (MS_WKLY_RX_CNT_src.trx_043 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_043))::numeric(9,3) END AS trx_043, CASE WHEN (MS_WKLY_RX_CNT_src.trx_044 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_044))::numeric(9,3) END AS trx_044, CASE WHEN (MS_WKLY_RX_CNT_src.trx_045 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_045))::numeric(9,3) END AS trx_045, CASE WHEN (MS_WKLY_RX_CNT_src.trx_046 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_046))::numeric(9,3) END AS trx_046, CASE WHEN (MS_WKLY_RX_CNT_src.trx_047 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_047))::numeric(9,3) END AS trx_047, CASE WHEN (MS_WKLY_RX_CNT_src.trx_048 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_048))::numeric(9,3) END AS trx_048, CASE WHEN (MS_WKLY_RX_CNT_src.trx_049 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_049))::numeric(9,3) END AS trx_049, CASE WHEN (MS_WKLY_RX_CNT_src.trx_050 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_050))::numeric(9,3) END AS trx_050, CASE WHEN (MS_WKLY_RX_CNT_src.trx_051 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_051))::numeric(9,3) END AS trx_051, CASE WHEN (MS_WKLY_RX_CNT_src.trx_052 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_052))::numeric(9,3) END AS trx_052, CASE WHEN (MS_WKLY_RX_CNT_src.trx_053 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_053))::numeric(9,3) END AS trx_053, CASE WHEN (MS_WKLY_RX_CNT_src.trx_054 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_054))::numeric(9,3) END AS trx_054, CASE WHEN (MS_WKLY_RX_CNT_src.trx_055 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_055))::numeric(9,3) END AS trx_055, CASE WHEN (MS_WKLY_RX_CNT_src.trx_056 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_056))::numeric(9,3) END AS trx_056, CASE WHEN (MS_WKLY_RX_CNT_src.trx_057 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_057))::numeric(9,3) END AS trx_057, CASE WHEN (MS_WKLY_RX_CNT_src.trx_058 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_058))::numeric(9,3) END AS trx_058, CASE WHEN (MS_WKLY_RX_CNT_src.trx_059 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_059))::numeric(9,3) END AS trx_059, CASE WHEN (MS_WKLY_RX_CNT_src.trx_060 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_060))::numeric(9,3) END AS trx_060, CASE WHEN (MS_WKLY_RX_CNT_src.trx_061 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_061))::numeric(9,3) END AS trx_061, CASE WHEN (MS_WKLY_RX_CNT_src.trx_062 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_062))::numeric(9,3) END AS trx_062, CASE WHEN (MS_WKLY_RX_CNT_src.trx_063 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_063))::numeric(9,3) END AS trx_063, CASE WHEN (MS_WKLY_RX_CNT_src.trx_064 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_064))::numeric(9,3) END AS trx_064, CASE WHEN (MS_WKLY_RX_CNT_src.trx_065 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_065))::numeric(9,3) END AS trx_065, CASE WHEN (MS_WKLY_RX_CNT_src.trx_066 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_066))::numeric(9,3) END AS trx_066, CASE WHEN (MS_WKLY_RX_CNT_src.trx_067 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_067))::numeric(9,3) END AS trx_067, CASE WHEN (MS_WKLY_RX_CNT_src.trx_068 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_068))::numeric(9,3) END AS trx_068, CASE WHEN (MS_WKLY_RX_CNT_src.trx_069 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_069))::numeric(9,3) END AS trx_069, CASE WHEN (MS_WKLY_RX_CNT_src.trx_070 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_070))::numeric(9,3) END AS trx_070, CASE WHEN (MS_WKLY_RX_CNT_src.trx_071 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_071))::numeric(9,3) END AS trx_071, CASE WHEN (MS_WKLY_RX_CNT_src.trx_072 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_072))::numeric(9,3) END AS trx_072, CASE WHEN (MS_WKLY_RX_CNT_src.trx_073 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_073))::numeric(9,3) END AS trx_073, CASE WHEN (MS_WKLY_RX_CNT_src.trx_074 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_074))::numeric(9,3) END AS trx_074, CASE WHEN (MS_WKLY_RX_CNT_src.trx_075 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_075))::numeric(9,3) END AS trx_075, CASE WHEN (MS_WKLY_RX_CNT_src.trx_076 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_076))::numeric(9,3) END AS trx_076, CASE WHEN (MS_WKLY_RX_CNT_src.trx_077 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_077))::numeric(9,3) END AS trx_077, CASE WHEN (MS_WKLY_RX_CNT_src.trx_078 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_078))::numeric(9,3) END AS trx_078, CASE WHEN (MS_WKLY_RX_CNT_src.trx_079 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_079))::numeric(9,3) END AS trx_079, CASE WHEN (MS_WKLY_RX_CNT_src.trx_080 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_080))::numeric(9,3) END AS trx_080, CASE WHEN (MS_WKLY_RX_CNT_src.trx_081 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_081))::numeric(9,3) END AS trx_081, CASE WHEN (MS_WKLY_RX_CNT_src.trx_082 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_082))::numeric(9,3) END AS trx_082, CASE WHEN (MS_WKLY_RX_CNT_src.trx_083 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_083))::numeric(9,3) END AS trx_083, CASE WHEN (MS_WKLY_RX_CNT_src.trx_084 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_084))::numeric(9,3) END AS trx_084, CASE WHEN (MS_WKLY_RX_CNT_src.trx_085 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_085))::numeric(9,3) END AS trx_085, CASE WHEN (MS_WKLY_RX_CNT_src.trx_086 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_086))::numeric(9,3) END AS trx_086, CASE WHEN (MS_WKLY_RX_CNT_src.trx_087 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_087))::numeric(9,3) END AS trx_087, CASE WHEN (MS_WKLY_RX_CNT_src.trx_088 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_088))::numeric(9,3) END AS trx_088, CASE WHEN (MS_WKLY_RX_CNT_src.trx_089 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_089))::numeric(9,3) END AS trx_089, CASE WHEN (MS_WKLY_RX_CNT_src.trx_090 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_090))::numeric(9,3) END AS trx_090, CASE WHEN (MS_WKLY_RX_CNT_src.trx_091 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_091))::numeric(9,3) END AS trx_091, CASE WHEN (MS_WKLY_RX_CNT_src.trx_092 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_092))::numeric(9,3) END AS trx_092, CASE WHEN (MS_WKLY_RX_CNT_src.trx_093 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_093))::numeric(9,3) END AS trx_093, CASE WHEN (MS_WKLY_RX_CNT_src.trx_094 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_094))::numeric(9,3) END AS trx_094, CASE WHEN (MS_WKLY_RX_CNT_src.trx_095 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_095))::numeric(9,3) END AS trx_095, CASE WHEN (MS_WKLY_RX_CNT_src.trx_096 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_096))::numeric(9,3) END AS trx_096, CASE WHEN (MS_WKLY_RX_CNT_src.trx_097 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_097))::numeric(9,3) END AS trx_097, CASE WHEN (MS_WKLY_RX_CNT_src.trx_098 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_098))::numeric(9,3) END AS trx_098, CASE WHEN (MS_WKLY_RX_CNT_src.trx_099 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_099))::numeric(9,3) END AS trx_099, CASE WHEN (MS_WKLY_RX_CNT_src.trx_100 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_100))::numeric(9,3) END AS trx_100, CASE WHEN (MS_WKLY_RX_CNT_src.trx_101 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_101))::numeric(9,3) END AS trx_101, CASE WHEN (MS_WKLY_RX_CNT_src.trx_102 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_102))::numeric(9,3) END AS trx_102, CASE WHEN (MS_WKLY_RX_CNT_src.trx_103 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_103))::numeric(9,3) END AS trx_103, CASE WHEN (MS_WKLY_RX_CNT_src.trx_104 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_104))::numeric(9,3) END AS trx_104, CASE WHEN (MS_WKLY_RX_CNT_src.trx_105 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_105))::numeric(9,3) END AS trx_105, CASE WHEN (MS_WKLY_RX_CNT_src.trx_106 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_106))::numeric(9,3) END AS trx_106, CASE WHEN (MS_WKLY_RX_CNT_src.trx_107 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_107))::numeric(9,3) END AS trx_107, CASE WHEN (MS_WKLY_RX_CNT_src.trx_108 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_108))::numeric(9,3) END AS trx_108, CASE WHEN (MS_WKLY_RX_CNT_src.trx_109 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_109))::numeric(9,3) END AS trx_109, CASE WHEN (MS_WKLY_RX_CNT_src.trx_110 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_110))::numeric(9,3) END AS trx_110, CASE WHEN (MS_WKLY_RX_CNT_src.trx_111 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_111))::numeric(9,3) END AS trx_111, CASE WHEN (MS_WKLY_RX_CNT_src.trx_112 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_112))::numeric(9,3) END AS trx_112, CASE WHEN (MS_WKLY_RX_CNT_src.trx_113 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_113))::numeric(9,3) END AS trx_113, CASE WHEN (MS_WKLY_RX_CNT_src.trx_114 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_114))::numeric(9,3) END AS trx_114, CASE WHEN (MS_WKLY_RX_CNT_src.trx_115 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_115))::numeric(9,3) END AS trx_115, CASE WHEN (MS_WKLY_RX_CNT_src.trx_116 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_116))::numeric(9,3) END AS trx_116, CASE WHEN (MS_WKLY_RX_CNT_src.trx_117 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_117))::numeric(9,3) END AS trx_117, CASE WHEN (MS_WKLY_RX_CNT_src.trx_118 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_118))::numeric(9,3) END AS trx_118, CASE WHEN (MS_WKLY_RX_CNT_src.trx_119 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_119))::numeric(9,3) END AS trx_119, CASE WHEN (MS_WKLY_RX_CNT_src.trx_120 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_120))::numeric(9,3) END AS trx_120, CASE WHEN (MS_WKLY_RX_CNT_src.trx_121 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_121))::numeric(9,3) END AS trx_121, CASE WHEN (MS_WKLY_RX_CNT_src.trx_122 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_122))::numeric(9,3) END AS trx_122, CASE WHEN (MS_WKLY_RX_CNT_src.trx_123 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_123))::numeric(9,3) END AS trx_123, CASE WHEN (MS_WKLY_RX_CNT_src.trx_124 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_124))::numeric(9,3) END AS trx_124, CASE WHEN (MS_WKLY_RX_CNT_src.trx_125 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_125))::numeric(9,3) END AS trx_125, CASE WHEN (MS_WKLY_RX_CNT_src.trx_126 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_126))::numeric(9,3) END AS trx_126, CASE WHEN (MS_WKLY_RX_CNT_src.trx_127 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_127))::numeric(9,3) END AS trx_127, CASE WHEN (MS_WKLY_RX_CNT_src.trx_128 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_128))::numeric(9,3) END AS trx_128, CASE WHEN (MS_WKLY_RX_CNT_src.trx_129 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_129))::numeric(9,3) END AS trx_129, CASE WHEN (MS_WKLY_RX_CNT_src.trx_130 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_130))::numeric(9,3) END AS trx_130, CASE WHEN (MS_WKLY_RX_CNT_src.trx_131 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_131))::numeric(9,3) END AS trx_131, CASE WHEN (MS_WKLY_RX_CNT_src.trx_132 = ''::varchar) THEN NULL::numeric(9,3) ELSE (btrim(MS_WKLY_RX_CNT_src.trx_132))::numeric(9,3) END AS trx_132, MS_WKLY_RX_CNT_src.batch_id, MS_WKLY_RX_CNT_src.row_id, MS_WKLY_RX_CNT_src.update_ts FROM teva_ingestion.MS_WKLY_RX_CNT_src;
==> failed_tevaQA12G_teva_staging_csv_export.sql <==

==> failed_tevaQA12G_teva_staging_ddl_export.sql <==

==> failed_tevaQA12G_teva_transform_csv_export.sql <==

==> failed_tevaQA12G_teva_transform_ddl_export.sql <==

==> failed_tevaQA12G_veeva_csv_export.sql <==

==> failed_tevaQA12G_veeva_ddl_export.sql <==
CREATE SCHEMA veeva;


CREATE TABLE veeva.dsa_slide
(
    id varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    createddate timestamptz,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    mayedit varchar(5),
    islocked varchar(5),
    clm_presentation_vod__c varchar(18),
    key_message_vod__c varchar(18),
    display_order_vod__c numeric(4,1),
    sub_presentation_vod__c varchar(18),
    mobile_id_vod__c varchar(100),
    external_id_vod__c varchar(100),
    file_id int,
    record_id int
);


CREATE TABLE veeva.dsa_presentation
(
    approved_vod__c varchar(5),
    copied_from_vod__c varchar(20),
    copy_date_vod__c timestamptz,
    createdbyid varchar(18),
    createddate varchar(24),
    default_presentation_vod__c varchar(5),
    group_to_share_to__c varchar(50),
    hidden_vod__c varchar(5),
    id varchar(18),
    isdeleted varchar(5),
    islocked varchar(5),
    lastmodifiedbyid varchar(18),
    lastmodifieddate timestamptz,
    mayedit varchar(5),
    mobile_id_vod__c varchar(100),
    name varchar(80),
    original_record_id_vod__c varchar(20),
    ownerid varchar(18),
    parentid_vod__c varchar(100),
    presentation_id_vod__c varchar(100),
    product_vod__c varchar(18),
    systemmodstamp timestamptz,
    training_vod__c varchar(100),
    type_vod__c varchar(100),
    file_id int,
    record_id int
);


CREATE TABLE veeva.ids_call_detail
(
    id varchar(18),
    file_id int,
    record_id int
);


CREATE TABLE veeva.ids_call
(
    id varchar(18),
    file_id int,
    record_id int
);


CREATE TABLE veeva.time_off_territory
(
    createdbyid varchar(18),
    createddate timestamp,
    date_vod__c timestamp,
    hours_off_vod__c int,
    hours_vod__c int,
    id varchar(18),
    isdeleted varchar(5),
    islocked varchar(5),
    lastactivitydate timestamp,
    lastmodifiedbyid varchar(18),
    lastmodifieddate timestamp,
    mayedit varchar(5),
    mobile_id_vod__c varchar(100),
    name varchar(80),
    ownerid varchar(18),
    reason_vod__c varchar(100),
    start_time_vod__c timestamp,
    status_vod__c varchar(20),
    systemmodstamp timestamp,
    territory_vod__c varchar(100),
    time_vod__c varchar(20),
    file_id int,
    record_id int
);


CREATE TABLE veeva.accountshare
(
    accountaccesslevel varchar(10),
    accountid varchar(18),
    caseaccesslevel varchar(10),
    contactaccesslevel varchar(10),
    id varchar(18),
    isdeleted varchar(5),
    lastmodifiedbyid varchar(18),
    lastmodifieddate timestamptz,
    opportunityaccesslevel varchar(10),
    rowcause varchar(15),
    userorgroupid varchar(18),
    file_id int,
    record_id int
);


CREATE TABLE veeva.account_merge_history
(
    id varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    createddate timestamptz,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    mayedit varchar(5),
    islocked varchar(5),
    account_vod__c varchar(18),
    personcontactid_vod__c varchar(20),
    account_personcontactid_vod__c varchar(20),
    file_id int,
    record_id int
);


CREATE TABLE veeva.address
(
    id varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    recordtypeid varchar(18),
    createddate timestamp,
    createdbyid varchar(18),
    lastmodifieddate timestamp,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamp,
    mayedit varchar(5),
    islocked varchar(5),
    account_vod__c varchar(18),
    address_line_2_vod__c varchar(100),
    city_vod__c varchar(40),
    external_id_vod__c varchar(120),
    dea_vod__c varchar(9),
    dea_expiration_date_vod__c timestamp,
    dea_license_address_vod__c varchar(1000),
    phone_vod__c varchar(40),
    fax_vod__c varchar(40),
    map_vod__c varchar(1300),
    shipping_vod__c varchar(5),
    primary_vod__c varchar(5),
    license_vod__c varchar(25),
    license_expiration_date_vod__c timestamp,
    staff_notes_vod__c varchar(4000),
    appt_required_vod__c varchar(5),
    office_notes_vod__c varchar(4000),
    license_status_vod__c varchar(255),
    zip_4_vod__c varchar(4),
    phone_2_vod__c varchar(40),
    fax_2_vod__c varchar(40),
    license_valid_to_sample_vod__c varchar(1300),
    sample_status_vod__c varchar(1300),
    include_territory_assignment varchar(5),
    mobile_id_vod__c varchar(100),
    inactive_vod__c varchar(5),
    lock_vod__c varchar(5),
    country_vod__c varchar(255),
    latitude_vod__c numeric(15,6),
    zip_vod__c varchar(20),
    best_times_vod__c varchar(400),
    source_vod__c varchar(255),
    brick_vod__c varchar(80),
    assmca_vod__c varchar(100),
    dea_address_vod__c varchar(5),
    dea_schedule_vod__c varchar(100),
    business_vod__c varchar(5),
    billing_vod__c varchar(5),
    home_vod__c varchar(5),
    mailing_vod__c varchar(5),
    state_vod__c varchar(255),
    longitude_vod__c numeric(15,6),
    dea_status_vod__c varchar(255),
    entity_reference_id_vod__c varchar(20),
    controlling_address_vod__c varchar(18),
    controlled_address_vod__c varchar(5),
    no_address_copy_vod__c varchar(5),
    address_line_3_tva__c varchar(100),
    county_tva__c varchar(50),
    external_sln_tva__c varchar(30),
    license_expiration_date_tva__c timestamp,
    rep_entered_sln_tva__c varchar(30),
    dea_contact_tva__c varchar(255),
    mark_for_deletion_tva__c varchar(5),
    license_valid_date_tva__c timestamp,
    license_valid_num_tva__c varchar(25),
    file_id int,
    record_id int,
    cm_id_tva__c int
);


CREATE TABLE veeva.affiliation
(
    child_affiliation_vod__c varchar(18),
    createdbyid varchar(18),
    createddate timestamptz,
    destroy_vod__c varchar(5),
    disable_trigger_vod__c varchar(5),
    external_id_vod__c varchar(255),
    from_account_vod__c varchar(18),
    from_contact_vod__c varchar(18),
    id varchar(18),
    influence_vod__c varchar(50),
    isdeleted varchar(5),
    islocked varchar(5),
    lastmodifiedbyid varchar(18),
    lastmodifieddate timestamptz,
    mayedit varchar(5),
    mobile_id_vod__c varchar(100),
    name varchar(100),
    ownerid varchar(18),
    parent_vod__c varchar(18),
    role_vod__c varchar(50),
    systemmodstamp timestamptz,
    to_account_vod__c varchar(18),
    to_contact_vod__c varchar(18),
    file_id int,
    record_id int
);


CREATE TABLE veeva.assessment
(
    account__c varchar(18),
    assessment_date_tva__c date,
    cc_patient_profiles__c varchar(255),
    cc_study_leverage__c varchar(255),
    cml_q1_tva__c varchar(150),
    cml_q2_tva__c varchar(150),
    cml_q3_tva__c varchar(150),
    cml_q4_tva__c varchar(150),
    cml_q5_1_tva__c varchar(150),
    cml_q5_tva__c varchar(150),
    cml_q6_tva__c varchar(150),
    cml_q7_1_tva__c varchar(150),
    cml_q7_tva__c varchar(150),
    community_activity__c varchar(255),
    createdbyid varchar(18),
    createddate timestamptz,
    historical_assessment_tva__c varchar(5),
    id varchar(18),
    isdeleted varchar(5),
    islocked varchar(5),
    lastmodifiedbyid varchar(18),
    lastmodifieddate timestamptz,
    ln_patient_profiles__c varchar(255),
    ln_study_leverage__c varchar(255),
    mayedit varchar(5),
    mobile_id_vod__c varchar(255),
    name varchar(11),
    oncology_board__c varchar(5),
    preferred_pathologist__c varchar(255),
    recordtypeid varchar(18),
    research_focus__c varchar(255),
    rl_patient_profiles__c varchar(255),
    rl_study_leverage__c varchar(255),
    systemmodstamp timestamptz,
    treatment_preferences__c varchar(255),
    treatment_volume__c varchar(255),
    tumor_types__c varchar(255),
    file_id int,
    record_id int
);


CREATE TABLE veeva.call_goal
(
    account_tva__c varchar(18),
    active_tva__c varchar(5),
    actual_remaining_tva__c varchar(50),
    actual_tva__c numeric(37,15),
    createdbyid varchar(18),
    createddate timestamptz,
    end_date_tva__c varchar(10),
    external_id_tva__c varchar(100),
    goal_tva__c numeric(37,15),
    id varchar(18),
    isdeleted varchar(5),
    islocked varchar(5),
    lastactivitydate timestamptz,
    lastmodifiedbyid varchar(18),
    lastmodifieddate timestamptz,
    mayedit varchar(5),
    name varchar(80),
    ownerid varchar(18),
    priority_tva__c numeric(37,15),
    product_catalog_tva__c varchar(18),
    remaining_tva__c numeric(37,15),
    sort_order_tva__c numeric(37,15),
    start_date_tva__c date,
    systemmodstamp timestamptz,
    territory_tva__c varchar(80),
    file_id int,
    record_id int
);


CREATE TABLE veeva.call_detail
(
    id varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    createddate timestamptz,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    mayedit varchar(5),
    islocked varchar(5),
    is_parent_call_vod__c varchar(64),
    call2_vod__c varchar(18),
    product_vod__c varchar(18),
    detail_priority_vod__c varchar(64),
    mobile_id_vod__c varchar(100),
    type_vod__c varchar(255),
    file_id int,
    record_id int
);


CREATE TABLE veeva.call_key_message
(
    id varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    createddate timestamptz,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    mayedit varchar(5),
    islocked varchar(5),
    account_vod__c varchar(18),
    call2_vod__c varchar(18),
    reaction_vod__c varchar(255),
    product_vod__c varchar(18),
    key_message_vod__c varchar(18),
    mobile_id_vod__c varchar(100),
    contact_vod__c varchar(18),
    call_date_vod__c date,
    user_vod__c varchar(18),
    category_vod__c varchar(255),
    vehicle_vod__c varchar(255),
    is_parent_call_vod__c varchar(64),
    clm_id_vod__c varchar(100),
    slide_version_vod__c varchar(100),
    duration_vod__c numeric(12,4),
    presentation_id_vod__c varchar(100),
    start_time_vod__c timestamptz,
    attendee_type_vod__c varchar(255),
    entity_reference_id_vod__c varchar(100),
    segment_vod__c varchar(80),
    display_order_vod__c varchar(64),
    file_id int,
    record_id int
);


CREATE TABLE veeva.call_history
(
    id varchar(18),
    isdeleted varchar(5),
    parentid varchar(18),
    createdbyid varchar(18),
    createddate timestamptz,
    field varchar(255),
    oldvalue varchar(255),
    newvalue varchar(255),
    file_id int,
    record_id int
);


CREATE TABLE veeva.deciles
(
    account_vod__c varchar(18),
    createdbyid varchar(18),
    createddate timestamptz,
    id varchar(18),
    isdeleted varchar(5),
    islocked varchar(5),
    lastactivitydate varchar(24),
    lastmodifiedbyid varchar(18),
    lastmodifieddate timestamptz,
    market_tva__c varchar(10),
    mayedit varchar(5),
    mobile_id_vod__c varchar(18),
    name varchar(80),
    systemmodstamp timestamptz,
    value_tva__c varchar(10),
    file_id int,
    record_id int
);


CREATE TABLE veeva."group"
(
    createdbyid varchar(18),
    createddate timestamptz,
    developername varchar(50),
    doesincludebosses varchar(5),
    doessendemailtomembers varchar(5),
    email varchar(11),
    id varchar(18),
    lastmodifiedbyid varchar(18),
    lastmodifieddate timestamptz,
    name varchar(29),
    ownerid varchar(18),
    relatedid varchar(18),
    systemmodstamp timestamptz,
    type varchar(24),
    file_id int,
    record_id int
);


CREATE TABLE veeva.key_message
(
    id varchar(18),
    ownerid varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    createddate timestamptz,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    mayedit varchar(5),
    islocked varchar(5),
    lastvieweddate timestamptz,
    lastreferenceddate timestamptz,
    description_vod__c varchar(255),
    product_vod__c varchar(18),
    product_strategy_vod__c varchar(18),
    display_order_vod__c varchar(64),
    active_vod__c varchar(5),
    category_vod__c varchar(255),
    vehicle_vod__c varchar(255),
    clm_id_vod__c varchar(100),
    custom_reaction_vod__c varchar(255),
    slide_version_vod__c varchar(100),
    language_vod__c varchar(255),
    media_file_crc_vod__c varchar(255),
    media_file_name_vod__c varchar(255),
    media_file_size_vod__c varchar(64),
    segment_vod__c varchar(80),
    group_to_share_to__c varchar(255),
    file_id int,
    record_id int
);


CREATE TABLE veeva.medical_inquiry
(
    account_vod__c varchar(255),
    address_line_1_vod__c varchar(255),
    address_line_2_vod__c varchar(255),
    call2_vod__c varchar(255),
    city_vod__c varchar(255),
    country_vod__c varchar(255),
    createdbyid varchar(255),
    createddate timestamptz,
    delivery_method_vod__c varchar(255),
    disclaimer_vod__c varchar(255),
    email_vod__c varchar(255),
    entity_reference_id_vod__c varchar(255),
    fax_number_vod__c varchar(255),
    id varchar(255),
    inquiry_text__c varchar(2000),
    isdeleted varchar(255),
    islocked varchar(255),
    lastmodifiedbyid varchar(255),
    lastmodifieddate timestamptz,
    lock_vod__c varchar(255),
    mayedit varchar(255),
    mobile_id_vod__c varchar(255),
    msl_consult__c varchar(255),
    name varchar(255),
    new_email_tva__c varchar(255),
    new_fax_tva__c varchar(255),
    phone_number_vod__c varchar(255),
    product__c varchar(255),
    recordtypeid varchar(255),
    rush_delivery__c varchar(255),
    signature_date_vod__c varchar(255),
    signature_vod__c varchar(255),
    source__c varchar(255),
    state_vod__c varchar(255),
    status_vod__c varchar(255),
    submitted_by_mobile_vod__c varchar(255),
    systemmodstamp timestamptz,
    zip_vod__c varchar(255),
    zvod_delivery_method_vod__c varchar(255),
    zvod_disclaimer_vod__c varchar(255),
    file_id int,
    record_id int
);


CREATE TABLE veeva.product_metrics
(
    id varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    createddate timestamptz,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    mayedit varchar(5),
    islocked varchar(5),
    account_vod__c varchar(18),
    awareness__c varchar(255),
    selling_stage__c varchar(255),
    formulary_status__c varchar(255),
    movement__c numeric(5,2),
    products_vod__c varchar(18),
    segment__c varchar(255),
    x12_mo_trx_chg__c numeric(5,2),
    speaker_skills__c varchar(255),
    investigator_readiness__c varchar(255),
    engagements__c numeric(4,0),
    mobile_id_vod__c varchar(100),
    external_id_vod__c varchar(255),
    decile_value_tva__c numeric(2,0),
    current_tva__c numeric(4,0),
    external_id_tva__c varchar(50),
    marketing_target_tva__c varchar(255),
    prior_tva__c numeric(4,0),
    rep_target_tva__c varchar(255),
    sbo_target_tva__c varchar(255),
    trx_3_month_tva__c numeric(4,0),
    trx_6_month_tva__c numeric(4,0),
    trx_ytd_tva__c numeric(4,0),
    cp_decile_tva__c numeric(2,0),
    business_segment_tva__c varchar(255),
    file_id int,
    record_id int
);


CREATE TABLE veeva.product
(
    id varchar(18),
    ownerid varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    createddate timestamptz,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    mayedit varchar(5),
    islocked varchar(5),
    lastvieweddate timestamptz,
    lastreferenceddate timestamptz,
    consumer_site__c varchar(255),
    product_info__c varchar(255),
    therapeutic_class_vod__c varchar(255),
    parent_product_vod__c varchar(18),
    therapeutic_area_vod__c varchar(255),
    product_type_vod__c varchar(255),
    require_key_message_vod__c varchar(5),
    cost_vod__c numeric(18,4),
    external_id_vod__c varchar(25),
    manufacturer_vod__c varchar(255),
    company_product_vod__c varchar(5),
    controlled_substance_vod__c varchar(5),
    description_vod__c varchar(255),
    sample_quantity_picklist_vod__ varchar(1000),
    display_order_vod__c numeric(5,0),
    no_metrics_vod__c varchar(5),
    distributor_vod__c varchar(255),
    sample_quantity_bound_vod__c varchar(5),
    sample_u_m_vod__c varchar(255),
    no_details_vod__c varchar(5),
    quantity_per_case_vod__c numeric(10,0),
    schedule_vod__c varchar(10),
    restricted_vod__c varchar(5),
    pricing_rule_quantity_bound_vo varchar(5),
    no_promo_items_vod__c varchar(1300),
    user_aligned_vod__c varchar(5),
    restricted_states_vod__c varchar(100),
    sort_code_vod__c varchar(20),
    no_cycle_plans_vod__c varchar(5),
    inventory_order_uom_vod__c varchar(255),
    inventory_quantity_per_case_vo numeric(10,0),
    sub_type__c varchar(255),
    organization__c varchar(255),
    product_id_teva__c varchar(200),
    product_line_tva__c varchar(4000),
    file_id int,
    record_id int,
    vexternal_id_vod__c varchar(120),
    product_value_vod__c varchar(64),
    encrypt_veeva_external_id_tva__c varchar(255),
    available_qty_tva__c varchar(64),
    expiration_date_tva__c varchar(10),
    t22s1_austedofrm__c varchar(5)
);


CREATE TABLE veeva.survey_question_response
(
    id varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    recordtypeid varchar(18),
    createddate timestamp,
    createdbyid varchar(18),
    lastmodifieddate timestamp,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamp,
    mayedit varchar(5),
    islocked varchar(5),
    survey_target_vod__c varchar(18),
    answer_choice_vod__c varchar(700),
    date_vod__c date,
    datetime_vod__c timestamp,
    external_id_vod__c varchar(120),
    mobile_id_vod__c varchar(100),
    number_vod__c numeric(7,0),
    order_vod__c numeric(2,0),
    question_text_vod__c varchar(1000),
    required_vod__c varchar(5),
    response_hash_vod__c varchar(255),
    response_vod__c varchar(550),
    score_vod__c numeric(11,0),
    survey_question_vod__c varchar(18),
    text_vod__c varchar(2500),
    type_vod__c varchar(18),
    file_id int,
    record_id int
);


CREATE TABLE veeva.recordtype
(
    businessprocessid varchar(18),
    createdbyid varchar(18),
    createddate timestamptz,
    description varchar(255),
    developername varchar(80),
    id varchar(18),
    isactive varchar(5),
    ispersontype varchar(5),
    lastmodifiedbyid varchar(18),
    lastmodifieddate timestamptz,
    name varchar(80),
    namespaceprefix varchar(15),
    sobjecttype varchar(40),
    systemmodstamp timestamptz,
    file_id int,
    record_id int
);


CREATE TABLE veeva.survey_question
(
    id varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    recordtypeid varchar(18),
    createddate timestamptz,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    mayedit varchar(5),
    islocked varchar(5),
    survey_vod__c varchar(18),
    answer_choice_vod__c varchar(700),
    external_id_vod__c varchar(120),
    max_score_vod__c numeric(11,0),
    min_score_vod__c numeric(11,0),
    order_vod__c numeric(2,0),
    question_vod__c varchar(18),
    required_vod__c varchar(5),
    text_vod__c varchar(1000),
    file_id int,
    record_id int
);


CREATE TABLE veeva.survey_target
(
    id varchar(18),
    ownerid varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    recordtypeid varchar(18),
    createddate timestamptz,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    mayedit varchar(5),
    islocked varchar(5),
    lastvieweddate timestamptz,
    lastreferenceddate timestamptz,
    account_display_name_vod__c varchar(100),
    account_vod__c varchar(18),
    channels_vod__c varchar(255),
    end_date_vod__c date,
    entity_reference_id_vod__c varchar(100),
    external_id_vod__c varchar(120),
    language_vod__c varchar(255),
    lock_vod__c varchar(5),
    mobile_id_vod__c varchar(100),
    no_autoassign_vod__c varchar(5),
    not_completed_vod__c varchar(1300),
    region_vod__c varchar(255),
    segment_vod__c varchar(255),
    start_date_vod__c date,
    status_vod__c varchar(255),
    survey_vod__c varchar(18),
    territory_vod__c varchar(255),
    zvod_address_vod__c varchar(5),
    zvod_specialty_vod__c varchar(5),
    score_vod__c numeric(11,0),
    file_id int,
    record_id int,
    coach_vod__c varchar(18),
    Employee_vod__c varchar(18),
    Review_date_vod__c date,
    report_status_vod__c varchar(50)
);


CREATE TABLE veeva.survey
(
    id varchar(18),
    ownerid varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    recordtypeid varchar(18),
    createddate timestamptz,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    mayedit varchar(5),
    islocked varchar(5),
    lastvieweddate timestamptz,
    lastreferenceddate timestamptz,
    assignment_type_vod__c varchar(255),
    channels_vod__c varchar(255),
    end_date_vod__c date,
    expired_vod__c varchar(1300),
    external_id_vod__c varchar(120),
    language_vod__c varchar(255),
    lock_vod__c varchar(5),
    open_vod__c varchar(5),
    product_vod__c varchar(18),
    region_vod__c varchar(255),
    segment_vod__c varchar(800),
    start_date_vod__c date,
    status_vod__c varchar(255),
    territory_vod__c varchar(255),
    zvod_questions_vod__c varchar(5),
    zvod_segments_vod__c varchar(5),
    zvod_targets_vod__c varchar(5),
    max_score_vod__c numeric(11,0),
    min_score_vod__c numeric(11,0),
    file_id int,
    record_id int
);


CREATE TABLE veeva.territory
(
    accountaccesslevel varchar(5),
    caseaccesslevel varchar(5),
    contactaccesslevel varchar(5),
    description varchar(50),
    developername varchar(50),
    forecastuserid varchar(255),
    id varchar(18),
    lastmodifiedbyid varchar(18),
    lastmodifieddate timestamptz,
    mayforecastmanagershare varchar(5),
    name varchar(50),
    opportunityaccesslevel varchar(5),
    parentterritoryid varchar(18),
    restrictopportunitytransfer varchar(5),
    systemmodstamp timestamptz,
    file_id int,
    record_id int
);


CREATE TABLE veeva.veeva_user
(
    id varchar(18),
    username varchar(80),
    lastname varchar(80),
    firstname varchar(40),
    name varchar(121),
    companyname varchar(80),
    division varchar(80),
    department varchar(80),
    title varchar(80),
    street varchar(255),
    city varchar(40),
    state varchar(80),
    postalcode varchar(20),
    country varchar(80),
    latitude varchar(64),
    longitude varchar(64),
    email varchar(128),
    emailpreferencesautobcc varchar(5),
    emailpreferencesautobccstayint varchar(5),
    emailpreferencesstayintouchrem varchar(5),
    senderemail varchar(80),
    sendername varchar(80),
    signature varchar(1333),
    stayintouchsubject varchar(80),
    stayintouchsignature varchar(512),
    stayintouchnote varchar(512),
    phone varchar(40),
    fax varchar(40),
    mobilephone varchar(40),
    alias varchar(8),
    communitynickname varchar(40),
    isactive varchar(5),
    timezonesidkey varchar(40),
    userroleid varchar(18),
    localesidkey varchar(40),
    receivesinfoemails varchar(5),
    receivesadmininfoemails varchar(5),
    emailencodingkey varchar(40),
    usertype varchar(40),
    languagelocalekey varchar(40),
    employeenumber varchar(20),
    delegatedapproverid varchar(18),
    managerid varchar(18),
    lastlogindate timestamptz,
    createddate timestamptz,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    offlinetrialexpirationdate timestamptz,
    offlinepdatrialexpirationdate timestamptz,
    userpermissionsmarketinguser varchar(5),
    userpermissionsofflineuser varchar(5),
    userpermissionswirelessuser varchar(5),
    userpermissionsavantgouser varchar(5),
    userpermscallcenterautologin varchar(5),
    userpermissionsmobileuser varchar(5),
    userpermissionssfcontentuser varchar(5),
    userpermissionsinteractionuser varchar(5),
    userpermschatteranswersuser varchar(5),
    forecastenabled varchar(5),
    userprefsactivityreminderspopu varchar(5),
    userprefseventreminderscheckbo varchar(5),
    userprefstaskreminderscheckbox varchar(5),
    userprefsremindersoundoff varchar(5),
    userprefshidecsngetchattermobi varchar(5),
    userprefshidecsndesktoptask varchar(5),
    userpreferencesoptoutoftouch varchar(5),
    userprefsshowtitletoexternalus varchar(5),
    userprefsshowmanagertoexternal varchar(5),
    userprefsshowemailtoexternalus varchar(5),
    userprefsshowworkphonetoextern varchar(5),
    userprefsshowmobilephonetoexte varchar(5),
    userprefsshowfaxtoexternaluser varchar(5),
    userprefsshowstreetaddresstoex varchar(5),
    userprefsshowcitytoexternaluse varchar(5),
    userprefsshowstatetoexternalus varchar(5),
    userprefsshowpostalcodetoexter varchar(5),
    userprefsshowcountrytoexternal varchar(5),
    userprefsshowprofilepictoguest varchar(5),
    userprefsshowtitletoguestusers varchar(5),
    userprefsshowcitytoguestusers varchar(5),
    userprefsshowstatetoguestusers varchar(5),
    userprefsshowpostalcodetoguest varchar(5),
    userprefsshowcountrytoguestuse varchar(5),
    contactid varchar(18),
    accountid varchar(18),
    callcenterid varchar(18),
    extension varchar(40),
    federationidentifier varchar(512),
    lastvieweddate timestamptz,
    lastreferenceddate timestamptz,
    last_mobile_connect_vod__c timestamptz,
    last_tablet_connect_vod__c timestamptz,
    last_mobile_connect_version varchar(50),
    last_tablet_connect_version varchar(50),
    last_mobile_sync_vod__c timestamptz,
    last_tablet_sync_vod__c timestamptz,
    raiselogginglevel_vod__c varchar(255),
    senddetailedlog_vod__c varchar(5),
    last_blackberry_connect_vod__c timestamptz,
    last_blackberry_connect_versio varchar(50),
    last_blackberry_sync_vod__c timestamptz,
    force_full_refresh_vod__c varchar(5),
    override_systemmodstamp_timest timestamptz,
    facetime_email_vod__c varchar(100),
    facetime_phone_vod__c varchar(40),
    product_expertise_vod__c varchar(4000),
    available_vod__c varchar(255),
    available_last_update_vod__c timestamptz,
    last_ipad_connect_version varchar(50),
    last_ipad_connect_vod__c timestamptz,
    last_ipad_sync_vod__c timestamptz,
    inventory_order_allocation_gro varchar(80),
    concur_user_id_vod__c varchar(255),
    external_id_tva__c varchar(30),
    last_ipad_ios_version_vod__c varchar(50),
    veeva_id__c varchar(1300),
    login_id_tva__c varchar(30),
    primary_territory_vod__c varchar(80),
    analytics_admin_vod__c varchar(5),
    content_admin_vod__c varchar(5),
    upload_vtrans_vod__c varchar(5),
    can_sample_tva__c varchar(5),
    do_not_modify_tva__c varchar(5),
    profile_name_vod__c varchar(1300),
    file_id int,
    record_id int,
    Remote_Meeting_Host_Id_vod__c varchar(100),
    Remote_Meeting_Host_Token_vod__c varchar(255),
    Remote_Meeting_Start_From_CRM_Online_vod__c varchar(5)
);


CREATE TABLE veeva.user_role
(
    caseaccessforaccountowner varchar(255),
    contactaccessforaccountowner varchar(255),
    developername varchar(255),
    forecastuserid varchar(255),
    id varchar(255),
    lastmodifiedbyid varchar(255),
    lastmodifieddate timestamptz,
    mayforecastmanagershare varchar(255),
    name varchar(255),
    opportunityaccessaccountowner varchar(255),
    parentroleid varchar(255),
    portalaccountid varchar(255),
    portalaccountownerid varchar(255),
    portaltype varchar(255),
    rollupdescription varchar(255),
    systemmodstamp timestamptz,
    file_id int,
    record_id int
);


CREATE TABLE veeva.user_territory
(
    id varchar(255),
    isactive varchar(255),
    lastmodifiedbyid varchar(255),
    lastmodifieddate timestamptz,
    systemmodstamp timestamptz,
    territoryid varchar(255),
    userid varchar(255),
    file_id int,
    record_id int
);


CREATE TABLE veeva.call_sample
(
    id varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    createddate date,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    lastactivitydate date,
    mayedit varchar(5),
    islocked varchar(5),
    lastvieweddate varchar(24),
    lastreferenceddate timestamptz,
    account_vod__c varchar(18),
    call_date_vod__c date,
    is_parent_call_vod__c varchar(64),
    quantity_vod__c varchar(64),
    lot_vod__c varchar(80),
    mobile_id_vod__c varchar(100),
    call2_vod__c varchar(18),
    product_vod__c varchar(18),
    distributor_vod__c varchar(255),
    attendee_type_vod__c varchar(255),
    entity_reference_id_vod__c varchar(100),
    delivery_status_vod__c varchar(255),
    apply_limit_vod__c varchar(5),
    limit_applied_vod__c varchar(5),
    manufacturer_vod__c varchar(255),
    file_id int,
    record_id int,
    product_value_vod__c varchar(64)
);


CREATE TABLE veeva.approved_document
(
    id varchar(18),
    ownerid varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    recordtypeid varchar(18),
    createddate timestamp,
    createdbyid varchar(18),
    lastmodifieddate timestamp,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamp,
    lastactivitydate timestamp,
    mayedit varchar(5),
    islocked varchar(5),
    lastvieweddate timestamp,
    lastreferenceddate timestamp,
    detail_group_vod__c varchar(18),
    document_description_vod__c varchar(255),
    document_host_url_vod__c varchar(255),
    document_id_vod__c varchar(100),
    document_last_mod_datetime_vod__c timestamp,
    email_allows_documents_vod__c varchar(5),
    email_domain_vod__c varchar(100),
    email_from_address_vod__c varchar(100),
    email_from_name_vod__c varchar(100),
    email_replyto_address_vod__c varchar(100),
    email_replyto_name_vod__c varchar(100),
    email_subject_vod__c varchar(255),
    email_template_fragment_document_id_vod__c varchar(100),
    isi_document_id_vod__c varchar(100),
    language_vod__c varchar(255),
    other_document_id_list_vod__c varchar(100),
    pi_document_id_vod__c varchar(100),
    piece_document_id_vod__c varchar(100),
    product_vod__c varchar(18),
    status_vod__c varchar(255),
    territory_vod__c varchar(100),
    vault_instance_id_vod__c varchar(100),
    expiration_date_tva__c timestamp,
    group_to_share_to__c varchar(255),
    training_org_tva__c varchar(5),
    unsub_svr_tva__c varchar(1300),
    file_id int,
    record_id int
);


CREATE TABLE veeva.remote_meeting
(
    id varchar(18),
    ownerid varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    recordtypeid varchar(18),
    createddate varchar(24),
    createdbyid varchar(18),
    lastmodifieddate varchar(24),
    lastmodifiedbyid varchar(18),
    systemmodstamp varchar(24),
    mayedit varchar(5),
    islocked varchar(5),
    meeting_id_vod__c varchar(20),
    meeting_name_vod__c varchar(300),
    mobile_id_vod__c varchar(100),
    scheduled_datetime_vod__c varchar(24),
    scheduled_vod__c varchar(5),
    attendance_report_process_status_vod__c varchar(255),
    latest_meeting_start_datetime_vod__c varchar(24),
    meeting_password_vod__c varchar(20),
    meeting_outcome_status_vod__c varchar(255),
    record_id int,
    file_id int
);


CREATE TABLE veeva.rep_roster
(
    Id varchar(36),
    CreatedDate timestamptz,
    CreatedById varchar(36),
    LastModifiedDate timestamptz,
    LastModifiedById varchar(36),
    OwnerId varchar(36),
    IsDeleted varchar(5),
    Name varchar(160),
    SystemModstamp timestamptz,
    MayEdit varchar(5),
    IsLocked varchar(5),
    Territory_vod__c varchar(50),
    Address_line_1_vod__c varchar(100),
    Address_line_2_vod__c varchar(100),
    Address_line_3_tva__c varchar(100),
    City_vod__c varchar(40),
    State_vod__c varchar(255),
    ZIP_vod__c varchar(20),
    Computer_Asset_Tag__c varchar(80),
    Fax_Number__c varchar(40),
    Home_Phone__c varchar(40),
    Mobile_Number__c varchar(40),
    Organization_Id__c varchar(80),
    Rep_Type_TVA__c varchar(255),
    SampleFlag_TVA__c varchar(5),
    Ship_Addr1_TVA__c varchar(100),
    Ship_Addr2_TVA__c varchar(100),
    Ship_Addr3_TVA__c varchar(100),
    Ship_City_TVA__c varchar(40),
    Ship_State_TVA__C varchar(255),
    Ship_Zip_TVA__c varchar(10),
    Store_Addr1_TVA__c varchar(100),
    Store_Addr2_TVA__c varchar(100),
    Store_Addr3_TVA__c varchar(100),
    Store_City_TVA__c varchar(40),
    Store_State_TVA__C varchar(255),
    Store_Zip_TVA__c varchar(10),
    Username_External_Id_vod__c varchar(80),
    VIN__c varchar(20),
    LastViewedDate timestamptz,
    lastReferencedDate timestamptz,
    record_id int,
    file_id int,
    useremail varchar(80),
    local_employee_id__c varchar(255)
);


CREATE TABLE veeva.userterritory2association
(
    Id varchar(18),
    UserId varchar(18),
    Territory2Id varchar(18),
    IsActive varchar(5),
    RoleInTerritory2 varchar(40),
    LastModifiedDate timestamptz,
    LastModifiedById varchar(18),
    SystemModstamp timestamptz,
    record_id int,
    file_id int
);


CREATE TABLE veeva.territory2type
(
    Id varchar(18),
    IsDeleted varchar(5),
    DeveloperName varchar(80),
    Language varchar(40),
    MasterLabel varchar(80),
    CreatedDate date,
    CreatedById varchar(18),
    LastModifiedDate date,
    LastModifiedById varchar(18),
    SystemModstamp date,
    Description varchar(255),
    Priority int,
    record_id int,
    file_id int
);


CREATE TABLE veeva.suggestion
(
    ID varchar(36),
    OWNERID varchar(36),
    ISDELETED varchar(5),
    NAME varchar(80),
    RECORDTYPEID varchar(36),
    CREATEDDATE timestamptz,
    CREATEDBYID varchar(18),
    LASTMODIFIEDDATE timestamptz,
    LASTMODIFIEDBYID varchar(18),
    SYSTEMMODSTAMP timestamptz,
    MAYEDIT varchar(5),
    ISLOCKED varchar(5),
    LASTVIEWEDDATE timestamptz,
    LASTREFERENCEDDATE timestamptz,
    ACCOUNT_PRIORITY_SCORE_VOD__C numeric(5,0),
    ACCOUNT_VOD__C varchar(36),
    ACTION_COUNT_VOD__C numeric(18,0),
    ACTIONED_VOD__C numeric(1,0),
    CALL_OBJECTIVE_CLM_ID_VOD__C varchar(255),
    CALL_OBJECTIVE_FROM_DATE_VOD__C timestamptz,
    CALL_OBJECTIVE_ON_BY_DEFAULT_VOD__C varchar(5),
    CALL_OBJECTIVE_RECORD_TYPE_VOD__C varchar(255),
    CALL_OBJECTIVE_TO_DATE_VOD__C timestamptz,
    DISMISS_COUNT_VOD__C numeric(18,0),
    DISMISSED_VOD__C numeric(1,0),
    DISPLAY_DISMISS_VOD__C varchar(5),
    DISPLAY_MARK_AS_COMPLETE_VOD__C varchar(5),
    DISPLAY_SCORE_VOD__C varchar(5),
    EMAIL_TEMPLATE_ID_VOD__C varchar(255),
    EMAIL_TEMPLATE_VAULT_ID_VOD__C varchar(255),
    EMAIL_TEMPLATE_VOD__C varchar(5),
    EXPIRATION_DATE_VOD__C timestamptz,
    MARK_COMPLETE_COUNT_VOD__C numeric(18,0),
    MARKED_AS_COMPLETE_VOD__C numeric(1,0),
    NO_HOMEPAGE_VOD__C varchar(5),
    PLANNED_CALL_DATE_VOD__C timestamptz,
    POSTED_DATE_VOD__C timestamptz,
    PRIORITY_VOD__C varchar(18),
    REASON_VOD__C varchar(2000),
    RECORD_TYPE_NAME_VOD__C varchar(100),
    SUGGESTION_EXTERNAL_ID_VOD__C varchar(255),
    SUPPRESS_REASON_VOD__C varchar(5),
    TITLE_VOD__C varchar(255),
    record_id int,
    file_id int
);


CREATE TABLE veeva.suggestion_tag
(
    ID varchar(36),
    ISDELETED varchar(36),
    NAME varchar(80),
    RECORDTYPEID varchar(36),
    CREATEDDATE timestamptz,
    CREATEDBYID varchar(18),
    LASTMODIFIEDDATE timestamptz,
    LASTMODIFIEDBYID varchar(18),
    SYSTEMMODSTAMP timestamptz,
    MAYEDIT varchar(5),
    ISLOCKED varchar(5),
    SUGGESTION_VOD__C varchar(36),
    DETAIL_GROUP_VOD__C varchar(36),
    DRIVER_VOD__C varchar(255),
    EMAIL_FRAGMENT_ORDER_VOD__C varchar(255),
    EMAIL_FRAGMENT_VOD__C varchar(36),
    EXTERNAL_ID_VOD__C varchar(255),
    PRODUCT_VOD__C varchar(36),
    RECORD_TYPE_NAME_VOD__C varchar(100),
    record_id int,
    file_id int
);


CREATE TABLE veeva.suggestion_feedback
(
    ID varchar(36),
    ISDELETED varchar(36),
    NAME varchar(80),
    RECORDTYPEID varchar(36),
    CREATEDDATE timestamptz,
    CREATEDBYID varchar(18),
    LASTMODIFIEDDATE timestamptz,
    LASTMODIFIEDBYID varchar(18),
    SYSTEMMODSTAMP timestamptz,
    MAYEDIT varchar(5),
    ISLOCKED varchar(5),
    SUGGESTION_VOD__C varchar(36),
    ACCOUNT_VOD__C varchar(36),
    ACTIVITY_EXECUTION_TYPE_VOD__C varchar(36),
    CALL2_VOD__C varchar(36),
    DISMISSFEEDBACK1_VOD__C varchar(18),
    DISMISSFEEDBACK2_VOD__C varchar(18),
    DISMISSFEEDBACK3_VOD__C varchar(18),
    DISMISSFEEDBACK4_VOD__C varchar(18),
    MOBILE_ID_VOD__C varchar(100),
    SENT_EMAIL_VOD__C varchar(36),
    record_id int,
    file_id int
);


CREATE TABLE veeva.tsf
(
    id varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    recordtypeid varchar(18),
    createddate date,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    mayedit varchar(5),
    islocked varchar(5),
    account_vod__c varchar(18),
    address_vod__c varchar(18),
    last_activity_date_vod__c varchar(10),
    my_target_vod__c varchar(5),
    route_vod__c varchar(255),
    mobile_id_vod__c varchar(100),
    external_id_vod__c varchar(255),
    territory_vod__c varchar(80),
    ytd_activity_vod__c varchar(64),
    preferred_account_vod__c varchar(18),
    allowed_products_vod__c varchar(255),
    territory_status_tva__c varchar(255),
    territory_specialty_tva__c varchar(255),
    treats_es_osa_tva__c varchar(5),
    osa_patients_tva__c varchar(64),
    account_status_tva__c varchar(255),
    dea_number_tva__c varchar(9),
    synribo_target_tva__c varchar(255),
    treanda_sbo_tva__c varchar(255),
    trisenox_sbo_tva__c varchar(255),
    appt_index_tva__c varchar(10),
    merged_mvn__c varchar(5),
    call_plan_designation_tva__c varchar(255),
    campaign_tva__c varchar(30),
    file_id int,
    record_id int,
    Detail_Priority__c varchar(255),
    CINQAIR_Call_Plan_Target__c varchar(5),
    Digihaler_Call_Plan_Target__c varchar(5)
);


CREATE TABLE veeva.account
(
    id varchar(18),
    isdeleted varchar(5),
    masterrecordid varchar(18),
    name varchar(255),
    lastname varchar(80),
    firstname varchar(40),
    salutation varchar(40),
    type varchar(40),
    recordtypeid varchar(18),
    phone varchar(40),
    fax varchar(40),
    website varchar(255),
    numberofemployees numeric(8,0),
    ownership varchar(40),
    ownerid varchar(18),
    createddate date,
    createdbyid varchar(18),
    lastmodifieddate timestamp,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamp,
    lastactivitydate timestamp,
    mayedit varchar(5),
    islocked varchar(5),
    lastvieweddate timestamp,
    lastreferenceddate timestamp,
    isexcludedfromrealign varchar(5),
    personcontactid varchar(18),
    ispersonaccount varchar(5),
    personmailingstreet varchar(255),
    personmailingcity varchar(40),
    personmailingstate varchar(80),
    personmailingpostalcode varchar(20),
    personmailingcountry varchar(80),
    personmailinglatitude numeric(18,15),
    personmailinglongitude numeric(18,15),
    personotherstreet varchar(255),
    personothercity varchar(40),
    personotherstate varchar(80),
    personotherpostalcode varchar(20),
    personothercountry varchar(80),
    personotherlatitude numeric(18,15),
    personotherlongitude numeric(18,15),
    personmobilephone varchar(40),
    personhomephone varchar(40),
    personotherphone varchar(40),
    personassistantphone varchar(40),
    personemail varchar(80),
    persontitle varchar(80),
    persondepartment varchar(80),
    personassistantname varchar(40),
    personbirthdate timestamp,
    personhasoptedoutofemail varchar(5),
    personhasoptedoutoffax varchar(5),
    persondonotcall varchar(5),
    personlastcurequestdate timestamp,
    personlastcuupdatedate timestamp,
    personemailbouncedreason varchar(255),
    personemailbounceddate timestamp,
    jigsaw varchar(20),
    jigsawcompanyid varchar(20),
    accountsource varchar(40),
    sicdesc varchar(80),
    external_id_vod__c varchar(120),
    credentials_vod__c varchar(255),
    exclude_from_zip_to_terr_proce varchar(5),
    group_specialty_1_vod__c varchar(255),
    group_specialty_2_vod__c varchar(255),
    specialty_1_vod__c varchar(255),
    specialty_2_vod__c varchar(255),
    formatted_name_vod__c varchar(1300),
    territory_test_vod__c varchar(255),
    mobile_id_vod__c varchar(100),
    gender_vod__c varchar(255),
    id_vod__c varchar(10),
    do_not_sync_sales_data_vod__c varchar(5),
    id2_vod__c varchar(10),
    preferred_name_vod__c varchar(12),
    sample_default_vod__c varchar(1000),
    segmentations_vod__c varchar(1000),
    restricted_products_vod__c varchar(1000),
    payer_id_vod__c varchar(100),
    account_status_tva__c varchar(255),
    do_not_call_vod__c varchar(255),
    beds__c numeric(4,0),
    spend_amount__c varchar(128),
    pdrp_opt_out_vod__c varchar(5),
    spend_status_value_vod__c varchar(1300),
    pdrp_opt_out_date_vod__c timestamp,
    spend_status_vod__c varchar(1300),
    enable_restricted_products varchar(5),
    call_reminder_vod__c varchar(255),
    account_group_vod__c varchar(80),
    primary_parent_vod__c varchar(18),
    color_vod__c varchar(1300),
    middle_vod__c varchar(40),
    suffix_vod__c varchar(10),
    account_location_tva__c varchar(50),
    no_orders_vod__c varchar(255),
    account_master_id_tva__c varchar(30),
    account_email_tva__c varchar(80),
    account_search_firstlast varchar(1300),
    account_search_lastfirst varchar(1300),
    person_preferred_name_tva__c varchar(50),
    practice_at_hospital_vod__c varchar(5),
    practice_near_hospital_vod__c varchar(5),
    do_not_create_child_account varchar(5),
    total_mds_dos__c numeric(18,0),
    aha__c varchar(20),
    order_type_vod__c varchar(4000),
    npi_vod__c varchar(10),
    me__c varchar(25),
    speaker__c varchar(5),
    investigator_vod__c varchar(5),
    default_order_type_vod__c varchar(255),
    person_degree_tva__c varchar(30),
    tax_status__c varchar(20),
    model__c varchar(20),
    offerings__c varchar(4000),
    departments__c numeric(18,0),
    account_type__c varchar(255),
    account_search_business_vod__c varchar(1300),
    business_professional_person varchar(18),
    no_spend_tva__c varchar(5),
    hospital_type_vod__c varchar(255),
    account_class_vod__c varchar(20),
    furigana_vod__c varchar(100),
    tirf_rems_tva__c varchar(50),
    fentora_app_tva__c varchar(5),
    total_revenue_000__c numeric(18,0),
    net_income_loss_000__c numeric(18,0),
    pmpm_income_loss_000__c numeric(12,2),
    commercial_premiums_pmpm__c numeric(18,0),
    medical_loss_ratio__c numeric(12,2),
    medical_expenses_pmpm__c numeric(18,0),
    commercial_patient_days_1000 numeric(18,0),
    hmo_market_shr__c numeric(6,1),
    hmo__c numeric(18,0),
    hmo_pos__c numeric(18,0),
    ppo__c numeric(18,0),
    ppo_pos__c numeric(18,0),
    medicare__c numeric(18,0),
    medicaid__c numeric(18,0),
    nuvigil_app_tva__c varchar(5),
    mds_status_tva__c varchar(5),
    lis_status_tva__c varchar(5),
    dnc_pcs_tva__c varchar(30),
    dnc_cns_tva__c varchar(30),
    suffix_tva__c varchar(255),
    tysabri_status_tva__c varchar(4000),
    business_description__c varchar(4000),
    regional_strategy__c varchar(4000),
    contracts_process__c varchar(4000),
    cml_profiled_tva__c varchar(5),
    cell_phone_tva__c varchar(40),
    no_contact_tva__c varchar(5),
    outlet_id_tva__c varchar(100),
    pmo_gpo_account_affiliations varchar(4000),
    territory_status_tva__c varchar(255),
    zdea_number_tva__c varchar(9),
    veeva_id_tva__c varchar(1300),
    treanda_lq_tgt_tva__c varchar(5),
    tbo_filgrastim_target_tva__c varchar(10),
    sln_rescrub_tva__c varchar(5),
    account_identifier_vod__c varchar(80),
    target__c varchar(5),
    kol_vod__c varchar(5),
    rems_expiration_date_teva__c timestamp,
    account_demo_id_tva__c varchar(30),
    total_lives__c numeric(18,0),
    total_physicians_enrolled__c numeric(18,0),
    tirf_rems_eff_date_tva__c timestamp,
    business_associate_agreement varchar(255),
    do_not_promote_tva__c varchar(5),
    account_dea_tva__c varchar(15),
    bp_number__c varchar(1300),
    paragard_segmentation_tva__c varchar(30),
    telesales_activity_tva__c varchar(50),
    designation_tva__c varchar(255),
    total_pharmacists__c numeric(3,0),
    comp_pricing_tva__c varchar(5),
    formulary_tva__c varchar(255),
    gln_tva__c varchar(15),
    gpo_contracts_tva__c varchar(4000),
    hin_tva__c varchar(9),
    max_id_tva__c varchar(15),
    oncology_services_tva__c varchar(5),
    pcp_program_tva__c varchar(5),
    pharmacy_location_tva__c varchar(100),
    primary_credential_tva__c varchar(255),
    primary_wholesaler_tva__c varchar(255),
    rep_credentialing_tva__c varchar(255),
    secondary_credential_tva__c varchar(255),
    sign_in_location_tva__c varchar(100),
    special_tva__c varchar(5),
    sub_type_id_tva__c varchar(30),
    sub_type_tva__c varchar(50),
    teva_contracts_tva__c varchar(4000),
    ims_org_id_tva__c varchar(15),
    year_of_birth_tva__c varchar(4),
    teaching_hospital_tva__c varchar(255),
    account_archived_tva__c varchar(5),
    mobile_id_vod__pc varchar(100),
    file_id int,
    record_id int,
    cm_id_tva__c int,
    staff_email varchar(80),
    company_managed_email varchar(80),
    alternate_email varchar(80),
    Accreditations_KAM__c varchar(5),
    Addl_Svcs_Patient_Svcs_Offering_KAM__c varchar(3),
    Addl_Services_Salesforce_KAM__c varchar(3),
    Aggregation_Group_KAM__c varchar(40),
    Alvimopan_ANDA_KAM__c varchar(3),
    Alvimopan_Brand_Usage_KAM__c varchar(3),
    Alvimopan_Converted_KAM__c varchar(3),
    Alvimopan_REMS_KAM__c varchar(3),
    Alvimopan_Usage_KAM__c varchar(5),
    ANDA_Account_KAM__c varchar(3),
    GPO_IDN__c varchar(10),
    GPO_OAKAM__c varchar(40),
    GPO_Affiliations_KAM__c varchar(7),
    Herzuma_Target_KAM__c varchar(3),
    IDN_KAM__c varchar(3),
    IDN_Specialty_Pharmacy__c varchar(3),
    KAM_Primary_Contact__c varchar(10),
    LOC_KAM__c varchar(7),
    PCP_KAM__c varchar(3),
    Pharmacy_Classification_KAM__c varchar(20),
    Pharmacy_Type_KAM__c varchar(11),
    Preferred_Wholesaler_KAM__c varchar(4),
    Purchasing_Herzuma_KAM__c varchar(3),
    Purchasing_Truxima_KAM__c varchar(3),
    RA_Target_KAM__c varchar(3),
    Romidepsin_Converted_KAM__c varchar(3),
    Romidepsin_Target_KAM__c varchar(3),
    RX_Networks_Sub_Group_KAM__c varchar(15),
    Secondary_Wholesaler_KAM__c varchar(4),
    Specialty_Pharmacy_Network_Affil_KAM__c varchar(8),
    States_in_Network_for_Medicaid_KAM__c varchar(2),
    States_Licensed_to_Dispense_KAM__c varchar(2),
    Therapeutic_Focus_Conditions_Served_KAM__c varchar(32),
    Truxima_Target_KAM__c varchar(3),
    Wholesaler_KAM__c varchar(4),
    buy_and_bill_tva__c varchar(255),
    free_trial_program_established_tva__c varchar(255),
    hcps_at_account_accept_samples_tva__c varchar(255),
    pt_committee_approval_tva__c varchar(255),
    type_of_account_tva__c varchar(255),
    t22S2_Rep_Email_PersonEmail_Status_TVA__c varchar(10),
    t22S2_Rep_Email_StaffEmail_Status_TVA__c varchar(10),
    t22S2_Rep_Email_Status2_TVA__c varchar(10),
    co_mgd_email_exp_TVA__c date
);


CREATE TABLE veeva.medical_event
(
    id varchar(18),
    active_vod__c varchar(5),
    address_tva__c varchar(40),
    city_tva__c varchar(40),
    createdbyid varchar(18),
    createddate varchar(24),
    demo_led_by_tva__c varchar(5000),
    description_vod__c varchar(32000),
    end_date_vod__c varchar(24),
    event_type__c varchar(255),
    isdeleted varchar(5),
    islocked varchar(5),
    lastactivitydate varchar(24),
    lastmodifiedbyid varchar(18),
    lastmodifieddate varchar(24),
    lastreferenceddate varchar(24),
    lastvieweddate varchar(24),
    location__c varchar(40),
    mayedit varchar(5),
    mobile_id_vod__c varchar(100),
    name varchar(80),
    number_of_attendees_tva__c numeric(18,0),
    ownerid varchar(18),
    primary_product__c varchar(255),
    recordtypeid varchar(18),
    secondary_product__c varchar(255),
    start_date_vod__c varchar(24),
    state_tva__c varchar(255),
    status_tva__c varchar(255),
    systemmodstamp varchar(24),
    website__c varchar(255),
    zip_tva__c varchar(10),
    file_id int,
    record_id int
);


CREATE TABLE veeva.email_activity
(
    Id varchar(36),
    CreatedDate date,
    CreatedById varchar(36),
    LastModifiedDate timestamptz,
    LastModifiedById varchar(36),
    RecordTypeId varchar(36),
    IsDeleted varchar(5),
    SystemModstamp timestamptz,
    Name varchar(160),
    Event_type_vod__c varchar(510),
    Activity_DateTime_vod__c timestamptz,
    Event_Msg_vod__c varchar(65000),
    Approved_Document_vod__c varchar(36),
    City_vod__c varchar(40),
    Click_URL_vod__c varchar(510),
    Client_Name_vod__c varchar(40),
    Client_OS_vod__c varchar(40),
    Client_Type_vod__c varchar(40),
    Country_vod__c varchar(40),
    Device_Type_vod__c varchar(40),
    Vault_Doc_ID_vod__c varchar(200),
    Vault_Doc_Name_vod__c varchar(200),
    Vault_Document_Number_vod__c varchar(200),
    Vault_Document_Title_vod__c varchar(510),
    IP_Address_vod__c varchar(64),
    Link_Name_vod__c varchar(510),
    Vault_Document_Major_Version_vod__c varchar(20),
    Vault_Document_Minor_Version_vod__c varchar(20),
    Preference_Modification_vod__c varchar(65000),
    Region_vod__c varchar(40),
    Sent_Email_vod__c varchar(36),
    User_Agent_vod__c varchar(510),
    Vault_Instance_ID_vod__c varchar(200),
    record_id int,
    file_id int
);


CREATE TABLE veeva.remote_meeting_attendee
(
    Id varchar(18),
    IsDeleted varchar(5),
    Name varchar(80),
    RecordTypeId varchar(18),
    CreatedDate timestamptz,
    CreatedById varchar(18),
    LastModifiedDate timestamptz,
    LastModifiedById varchar(18),
    SystemModstamp timestamptz,
    MayEdit varchar(5),
    IsLocked varchar(5),
    Remote_Meeting_vod__c varchar(18),
    Call_vod__c varchar(18),
    Join_Time_vod__c timestamptz,
    Leave_Time_vod__c timestamptz,
    Meeting_End_Time_vod__c timestamptz,
    Meeting_Start_Time_vod__c timestamptz,
    Name_vod__c varchar(150),
    Participant_Id_vod__c varchar(20),
    VExternal_Id_vod__c varchar(255),
    Veeva_Remote_Meeting_Id_vod__c varchar(20),
    Device_vod__c varchar(150),
    EM_Attendee_vod__c varchar(18),
    EM_Event_Speaker_vod__c varchar(18),
    Event_vod__c varchar(18),
    Network_Type_vod__c varchar(150),
    Meeting_Duration_vod__c float,
    record_id int,
    file_id int
);


CREATE TABLE veeva.call_clickstream
(
    Id varchar(36),
    IsDeleted varchar(5),
    Name varchar(80),
    CreatedDate timestamptz,
    CreatedById varchar(18),
    LastModifiedDate timestamptz,
    LastModifiedById varchar(18),
    SystemModstamp timestamptz,
    MayEdit varchar(5),
    IsLocked varchar(5),
    Answer_vod__c varchar(2000),
    Call_vod__c varchar(18),
    Key_Message_vod__c varchar(18),
    Mobile_ID_vod__c varchar(100),
    Popup_Opened_vod__c varchar(5),
    Possible_Answers_vod__c varchar(2000),
    Presentation_ID_vod__c varchar(100),
    Product_vod__c varchar(18),
    Range_Value_vod__c varchar(100),
    Rollover_Entered_vod__c varchar(5),
    Selected_Items_vod__c varchar(2000),
    CLM_ID_vod__c varchar(100),
    Question_vod__c varchar(2000),
    Survey_Type_vod__c varchar(255),
    Text_Entered_vod__c varchar(2000),
    Toggle_Button_On_vod__c varchar(5),
    Track_Element_Description_vod__c varchar(255),
    Track_Element_Id_vod__c varchar(100),
    Track_Element_Type_vod__c varchar(100),
    Usage_Duration_vod__c numeric(15,0),
    Usage_Start_Time_vod__c timestamptz,
    AuxillaryId_vod__c varchar(100),
    ParentId_vod__c varchar(100),
    Revision_vod__c numeric(10,0),
    record_id int,
    file_id int
);


CREATE TABLE veeva.territory2model
(
    Id varchar(18),
    IsDeleted varchar(5),
    Name varchar(80),
    CreatedDate date,
    CreatedById varchar(18),
    LastModifiedDate date,
    LastModifiedById varchar(18),
    SystemModstamp date,
    MayEdit varchar(5),
    IsLocked varchar(5),
    Description varchar(255),
    ActivatedDate date,
    DeactivatedDate date,
    State varchar(255),
    DeveloperName varchar(80),
    LastRunRulesEndDate date,
    IsCloneSource varchar(5),
    LastOppTerrAssignEndDate date,
    record_id int,
    file_id int
);


CREATE TABLE veeva.time_off_territory_kc
(
    id int,
    event_row_id varchar(18),
    rep_row_id varchar(18),
    territory_num varchar(8),
    time_off_date date,
    time_on_date date,
    description varchar(100),
    comments varchar(100),
    duration_in_minutes int,
    duration_in_hours int,
    duration_in_days numeric(37,15),
    company varchar(64),
    file_id int,
    record_id int
);


CREATE TABLE veeva.sync_tracking
(
    createdbyid varchar(18),
    createddate timestamptz,
    download_processed_vod__c varchar(5),
    id varchar(18),
    isdeleted varchar(5),
    islocked varchar(5),
    lastmodifiedbyid varchar(18),
    lastmodifieddate timestamptz,
    mayedit varchar(5),
    media_processed_vod__c varchar(5),
    mobile_id_vod__c varchar(100),
    name varchar(100),
    ownerid varchar(18),
    successful_sync_vod__c varchar(5),
    sync_completed_datetime_vod__c date,
    sync_duration_vod__c varchar(18),
    sync_start_datetime_vod__c timestamptz,
    sync_type_vod__c varchar(100),
    systemmodstamp timestamptz,
    upload_processed_vod__c varchar(5),
    version_vod__c varchar(100),
    vinsights_processed_vod__c varchar(5),
    file_id int,
    record_id int
);


CREATE TABLE veeva.ids_call_key_message
(
    id varchar(18),
    file_id int,
    record_id int
);


CREATE TABLE veeva.ids_call_sample
(
    id varchar(18),
    file_id int,
    record_id int
);


CREATE TABLE veeva.call
(
    id varchar(18),
    ownerid varchar(18),
    isdeleted varchar(5),
    name varchar(80),
    recordtypeid varchar(18),
    createddate timestamptz,
    createdbyid varchar(18),
    lastmodifieddate timestamptz,
    lastmodifiedbyid varchar(18),
    systemmodstamp timestamptz,
    lastactivitydate date,
    mayedit varchar(5),
    islocked varchar(5),
    lastvieweddate timestamptz,
    lastreferenceddate timestamptz,
    sample_card_vod__c varchar(15),
    add_detail_vod__c varchar(1000),
    property_vod__c varchar(64),
    account_vod__c varchar(18),
    zvod_product_discussion_vod__c varchar(5),
    status_vod__c varchar(255),
    parent_address_vod__c varchar(18),
    account_plan_vod__c varchar(18),
    zvod_savenew_vod__c varchar(5),
    next_call_notes_vod__c varchar(255),
    mobile_id_vod__c varchar(100),
    zvod_account_credentials_vod_c varchar(5),
    zvod_account_preferred_name_vo varchar(5),
    zvod_account_sample_status_vod varchar(5),
    zvod_attendees_vod__c varchar(5),
    zvod_key_messages_vod__c varchar(5),
    zvod_detailing_vod__c varchar(5),
    zvod_expenses_vod__c varchar(5),
    zvod_followup_vod__c varchar(5),
    zvod_samples_vod__c varchar(5),
    zvod_save_vod__c varchar(5),
    zvod_submit_vod__c varchar(5),
    zvod_delete_vod__c varchar(5),
    activity_type__c varchar(255),
    significant_event__c varchar(5),
    location_vod__c varchar(128),
    subject_vod__c varchar(128),
    call_datetime_vod__c timestamptz,
    disbursed_to_vod__c varchar(255),
    request_receipt_vod__c varchar(5),
    signature_date_vod__c timestamptz,
    territory_vod__c varchar(100),
    submitted_by_mobile_vod__c varchar(5),
    call_type_vod__c varchar(255),
    add_key_message_vod__c varchar(4000),
    address_vod__c varchar(500),
    attendees_vod__c varchar(64),
    attendee_type_vod__c varchar(255),
    call_date_vod__c date,
    detailed_products_vod__c varchar(255),
    no_disbursement_vod__c varchar(5),
    parent_call_vod__c varchar(18),
    user_vod__c varchar(18),
    contact_vod__c varchar(18),
    zvod_entity_vod__c varchar(5),
    medical_event_vod__c varchar(18),
    mobile_created_datetime_vod__c timestamptz,
    mobile_last_modified_datetime timestamptz,
    license_vod__c varchar(25),
    is_parent_call_vod__c varchar(64),
    entity_display_name_vod__c varchar(1300),
    last_device_vod__c varchar(255),
    ship_address_line_1_vod__c varchar(80),
    ship_address_line_2_vod__c varchar(100),
    ship_city_vod__c varchar(40),
    ship_country_vod__c varchar(20),
    ship_license_expiration_date date,
    ship_license_status_vod__c varchar(25),
    ship_license_vod__c varchar(25),
    ship_state_vod__c varchar(30),
    ship_to_address_vod__c varchar(18),
    ship_zip_vod__c varchar(20),
    ship_to_address_text_vod__c varchar(1300),
    clm_vod__c varchar(5),
    zvod_clmdetails_vod__c varchar(5),
    is_sampled_call_vod__c varchar(5),
    zvod_surveys_vod__c varchar(5),
    presentations_vod__c varchar(500),
    entity_reference_id_vod__c varchar(100),
    error_reference_call_vod__c varchar(18),
    duration_vod__c varchar(64),
    color_vod__c varchar(255),
    allowed_products_vod__c varchar(1000),
    zvod_attachments_vod__c varchar(5),
    sample_card_reason_vod__c varchar(255),
    assmca_vod__c varchar(100),
    address_line_1_vod__c varchar(80),
    address_line_2_vod__c varchar(100),
    city_vod__c varchar(40),
    dea_address_line_1_vod__c varchar(80),
    dea_address_line_2_vod__c varchar(100),
    dea_address_vod__c varchar(18),
    dea_city_vod__c varchar(40),
    dea_expiration_date_vod__c date,
    dea_state_vod__c varchar(10),
    dea_zip_4_vod__c varchar(4),
    dea_zip_vod__c varchar(20),
    dea_vod__c varchar(9),
    ship_zip_4_vod__c varchar(4),
    state_vod__c varchar(10),
    zip_4_vod__c varchar(4),
    zip_vod__c varchar(20),
    sample_send_card_vod__c varchar(15),
    zvod_address_vod_c_dea_status_ varchar(5),
    signature_page_image_vod__c varchar(255),
    credentials_vod__c varchar(255),
    salutation_vod__c varchar(255),
    zvod_account_call_reminder_vod varchar(5),
    sales_org_tva__c varchar(1300),
    zvod_business_account_vod__c varchar(5),
    product_priority_1_vod__c varchar(18),
    product_priority_2_vod__c varchar(18),
    product_priority_3_vod__c varchar(18),
    product_priority_4_vod__c varchar(18),
    product_priority_5_vod__c varchar(18),
    zvod_more_actions_vod__c varchar(5),
    zvod_call_conflict_status varchar(5),
    signature_timestamp_vod__c varchar(64),
    expense_amount_vod__c varchar(64),
    total_expense_attendees_count varchar(64),
    attendee_list_vod__c varchar(4000),
    expense_post_status_vod__c varchar(10),
    attendee_post_status_vod__c varchar(10),
    expense_system_external_id varchar(255),
    incurred_expense_vod__c varchar(5),
    assigner_vod__c varchar(18),
    assignment_datetime_vod__c timestamptz,
    zvod_call_objective_vod__c varchar(5),
    signature_location_longitude varchar(64),
    signature_location_latitude varchar(64),
    location_services_status varchar(255),
    created_by_timezone_tva__c varchar(120),
    license_expiration_date_vod__c date,
    license_status_vod__c varchar(255),
    ship_assmca_vod__c varchar(100),
    ship_dea_expiration_date date,
    ship_dea_vod__c varchar(9),
    call_method_tva__c varchar(255),
    bendeka_indication_tva__c varchar(5000),
    file_id int,
    record_id int,
    austedo_indication_tva__c varchar(5000),
    call_duration_tva__c numeric(3,0),
    how_executed_tva__c varchar(40),
    Remote_Meeting_vod__c varchar(100),
    Veeva_Remote_Meeting_Id_vod__c varchar(20),
    Cobrowse_URL_Participant_vod__c varchar(255),
    Signature_Captured_Remotely_vod__c varchar(150),
    Remote_Signature_Attendee_Name_vod__c varchar(5),
    t21s10_austedo_indication_tva__c varchar(255),
    t22S2_Outcomes_from_Visit__c varchar(50),
    t22S2_Visit_Trigger__c varchar(50),
    t22S2_Visit_Trigger_Date__c date
);


CREATE TABLE veeva.sent_email
(
    Id varchar(36),
    CreatedDate timestamptz,
    CreatedById varchar(36),
    LastModifiedDate timestamptz,
    LastModifiedById varchar(36),
    OwnerId varchar(36),
    RecordTypeId varchar(36),
    IsDeleted varchar(5),
    SystemModstamp timestamptz,
    Name varchar(160),
    Account_vod__c varchar(36),
    Activity_Tracking_Mode_vod__c varchar(510),
    EM_Attendee_vod__c varchar(36),
    Bcc_vod__c varchar(510),
    Call2_vod__c varchar(36),
    Capture_Datetime_vod__c timestamptz,
    Clicked_vod__c float,
    Content_Type_vod__c varchar(36),
    Detail_Group_vod__c varchar(36),
    Approved_Document_Views_vod__c float,
    Entity_Reference_Id_vod__c varchar(200),
    Event_vod__c varchar(36),
    Event_Attendee_vod__c varchar(36),
    Event_Attendee_Mobile_Id_vod__c varchar(200),
    Event_Mobile_Id_vod__c varchar(200),
    Events_Management_Subtype_vod__c varchar(2600),
    EM_Event_Speaker_vod__c varchar(36),
    EM_Event_Team_Member_vod__c varchar(36),
    Sender_Email_vod__c varchar(160),
    Key_Message_vod__c varchar(36),
    Last_Click_Date_vod__c timestamptz,
    Last_Device_vod__c varchar(510),
    Last_Activity_Date_vod__c timestamptz,
    Last_Open_Date_vod__c timestamptz,
    MC_Capture_Datetime_vod__c timestamptz,
    Medical_Event_vod__c varchar(36),
    Medical_Inquiry_vod__c varchar(36),
    Mobile_ID_vod__c varchar(200),
    Opened_vod__c float,
    Parent_Email_vod__c varchar(36),
    Product_vod__c varchar(36),
    Product_Display_vod__c varchar(2600),
    Receipt_Entity_Type_vod__c varchar(510),
    Receipt_Record_Id_vod__c varchar(200),
    Related_Transaction_ID_vod__c varchar(510),
    Scheduled_Send_Datetime_vod__c timestamptz,
    Email_Sent_Date_vod__c timestamptz,
    Status_vod__c varchar(510),
    Failure_Msg_vod__c varchar(510),
    Suggestion_vod__c varchar(36),
    Territory_vod__c varchar(200),
    Account_Email_vod__c varchar(160),
    Click_Count_vod__c float,
    Open_Count_vod__c float,
    User_vod__c varchar(36),
    Valid_Consent_Exists_vod__c varchar(5),
    VExternal_Id_vod__c varchar(100),
    record_id int,
    file_id int,
    Approved_Email_Template_vod__c varchar(36),
    subject varchar(255)
);


CREATE TABLE veeva.territory2
(
    Id varchar(18),
    Name varchar(80),
    Territory2TypeId varchar(18),
    Territory2ModelId varchar(18),
    ParentTerritory2Id varchar(18),
    Description varchar(1000),
    AccountAccessLevel varchar(40),
    OpportunityAccessLevel varchar(40),
    CaseAccessLevel varchar(40),
    ContactAccessLevel varchar(40),
    LastModifiedDate date,
    LastModifiedById varchar(18),
    SystemModstamp date,
    DeveloperName varchar(80),
    ParentTerritory1Id__c varchar(18),
    Territory1Id__c varchar(18),
    record_id int,
    file_id int
);


CREATE TABLE veeva.objectterritory2association
(
    Id varchar(18),
    ObjectId varchar(18),
    Territory2Id varchar(18),
    AssociationCause varchar(40),
    SobjectType varchar(40),
    IsDeleted varchar(5),
    LastModifiedDate date,
    LastModifiedById varchar(18),
    SystemModstamp date,
    record_id int,
    file_id int
);


CREATE  VIEW veeva.v_approved_document AS
 SELECT approved_document.id,
        approved_document.ownerid,
        approved_document.isdeleted,
        approved_document.name,
        approved_document.recordtypeid,
        approved_document.createddate,
        approved_document.createdbyid,
        approved_document.lastmodifieddate,
        approved_document.lastmodifiedbyid,
        approved_document.systemmodstamp,
        approved_document.lastactivitydate,
        approved_document.mayedit,
        approved_document.islocked,
        approved_document.lastvieweddate,
        approved_document.lastreferenceddate,
        approved_document.detail_group_vod__c,
        approved_document.document_description_vod__c,
        approved_document.document_host_url_vod__c,
        approved_document.document_id_vod__c,
        approved_document.document_last_mod_datetime_vod__c,
        approved_document.email_allows_documents_vod__c,
        approved_document.email_domain_vod__c,
        approved_document.email_from_address_vod__c,
        approved_document.email_from_name_vod__c,
        approved_document.email_replyto_address_vod__c,
        approved_document.email_replyto_name_vod__c,
        approved_document.email_subject_vod__c,
        approved_document.email_template_fragment_document_id_vod__c,
        approved_document.isi_document_id_vod__c,
        approved_document.language_vod__c,
        approved_document.other_document_id_list_vod__c,
        approved_document.pi_document_id_vod__c,
        approved_document.piece_document_id_vod__c,
        approved_document.product_vod__c,
        approved_document.status_vod__c,
        approved_document.territory_vod__c,
        approved_document.vault_instance_id_vod__c,
        approved_document.expiration_date_tva__c,
        approved_document.group_to_share_to__c,
        approved_document.training_org_tva__c,
        approved_document.unsub_svr_tva__c,
        approved_document.file_id,
        approved_document.record_id
 FROM veeva.approved_document
 WHERE (approved_document.file_id = ( SELECT max(approved_document.file_id) AS max
 FROM veeva.approved_document));

CREATE  VIEW veeva.v_account AS
 SELECT account.id,
        account.isdeleted,
        account.masterrecordid,
        account.name,
        account.lastname,
        account.firstname,
        account.salutation,
        account.type AS TYPE,
        account.recordtypeid,
        account.phone,
        account.fax,
        account.website,
        account.numberofemployees,
        account.ownership,
        account.ownerid,
        account.createddate,
        account.createdbyid,
        account.lastmodifieddate,
        account.lastmodifiedbyid,
        account.systemmodstamp,
        account.lastactivitydate,
        account.mayedit,
        account.islocked,
        account.lastvieweddate,
        account.lastreferenceddate,
        account.isexcludedfromrealign,
        account.personcontactid,
        account.ispersonaccount,
        account.personmailingstreet,
        account.personmailingcity,
        account.personmailingstate,
        account.personmailingpostalcode,
        account.personmailingcountry,
        account.personmailinglatitude,
        account.personmailinglongitude,
        account.personotherstreet,
        account.personothercity,
        account.personotherstate,
        account.personotherpostalcode,
        account.personothercountry,
        account.personotherlatitude,
        account.personotherlongitude,
        account.personmobilephone,
        account.personhomephone,
        account.personotherphone,
        account.personassistantphone,
        account.personemail,
        account.staff_email,
        account.company_managed_email,
        account.alternate_email,
        account.persontitle,
        account.persondepartment,
        account.personassistantname,
        account.personbirthdate,
        account.personhasoptedoutofemail,
        account.personhasoptedoutoffax,
        account.persondonotcall,
        account.personlastcurequestdate,
        account.personlastcuupdatedate,
        account.personemailbouncedreason,
        account.personemailbounceddate,
        account.jigsaw,
        account.jigsawcompanyid,
        account.accountsource,
        account.sicdesc,
        account.external_id_vod__c,
        account.credentials_vod__c,
        account.exclude_from_zip_to_terr_proce,
        account.group_specialty_1_vod__c,
        account.group_specialty_2_vod__c,
        account.specialty_1_vod__c,
        account.specialty_2_vod__c,
        account.formatted_name_vod__c,
        account.territory_test_vod__c,
        account.mobile_id_vod__c,
        account.gender_vod__c,
        account.id_vod__c,
        account.do_not_sync_sales_data_vod__c,
        account.id2_vod__c,
        account.preferred_name_vod__c,
        account.sample_default_vod__c,
        account.segmentations_vod__c,
        account.restricted_products_vod__c,
        account.payer_id_vod__c,
        account.account_status_tva__c,
        account.do_not_call_vod__c,
        account.beds__c,
        account.spend_amount__c,
        account.pdrp_opt_out_vod__c,
        account.spend_status_value_vod__c,
        account.pdrp_opt_out_date_vod__c,
        account.spend_status_vod__c,
        account.enable_restricted_products,
        account.call_reminder_vod__c,
        account.account_group_vod__c,
        account.primary_parent_vod__c,
        account.color_vod__c,
        account.middle_vod__c,
        account.suffix_vod__c,
        account.account_location_tva__c,
        account.no_orders_vod__c,
        account.account_master_id_tva__c,
        account.account_email_tva__c,
        account.account_search_firstlast,
        account.account_search_lastfirst,
        account.person_preferred_name_tva__c,
        account.practice_at_hospital_vod__c,
        account.practice_near_hospital_vod__c,
        account.do_not_create_child_account,
        account.total_mds_dos__c,
        account.aha__c,
        account.order_type_vod__c,
        account.npi_vod__c,
        account.me__c,
        account.speaker__c,
        account.investigator_vod__c,
        account.default_order_type_vod__c,
        account.person_degree_tva__c,
        account.tax_status__c,
        account.model__c,
        account.offerings__c,
        account.departments__c,
        account.account_type__c,
        account.account_search_business_vod__c,
        account.business_professional_person,
        account.no_spend_tva__c,
        account.hospital_type_vod__c,
        account.account_class_vod__c,
        account.furigana_vod__c,
        account.tirf_rems_tva__c,
        account.fentora_app_tva__c,
        account.total_revenue_000__c,
        account.net_income_loss_000__c,
        account.pmpm_income_loss_000__c,
        account.commercial_premiums_pmpm__c,
        account.medical_loss_ratio__c,
        account.medical_expenses_pmpm__c,
        account.commercial_patient_days_1000,
        account.hmo_market_shr__c,
        account.hmo__c,
        account.hmo_pos__c,
        account.ppo__c,
        account.ppo_pos__c,
        account.medicare__c,
        account.medicaid__c,
        account.nuvigil_app_tva__c,
        account.mds_status_tva__c,
        account.lis_status_tva__c,
        account.dnc_pcs_tva__c,
        account.dnc_cns_tva__c,
        account.suffix_tva__c,
        account.tysabri_status_tva__c,
        account.business_description__c,
        account.regional_strategy__c,
        account.contracts_process__c,
        account.cml_profiled_tva__c,
        account.cell_phone_tva__c,
        account.no_contact_tva__c,
        account.outlet_id_tva__c,
        account.pmo_gpo_account_affiliations,
        account.territory_status_tva__c,
        account.zdea_number_tva__c,
        account.veeva_id_tva__c,
        account.treanda_lq_tgt_tva__c,
        account.tbo_filgrastim_target_tva__c,
        account.sln_rescrub_tva__c,
        account.account_identifier_vod__c,
        account.target__c,
        account.kol_vod__c,
        account.rems_expiration_date_teva__c,
        account.account_demo_id_tva__c,
        account.total_lives__c,
        account.total_physicians_enrolled__c,
        account.tirf_rems_eff_date_tva__c,
        account.business_associate_agreement,
        account.do_not_promote_tva__c,
        account.account_dea_tva__c,
        account.bp_number__c,
        account.paragard_segmentation_tva__c,
        account.telesales_activity_tva__c,
        account.designation_tva__c,
        account.total_pharmacists__c,
        account.comp_pricing_tva__c,
        account.formulary_tva__c,
        account.gln_tva__c,
        account.gpo_contracts_tva__c,
        account.hin_tva__c,
        account.max_id_tva__c,
        account.oncology_services_tva__c,
        account.pcp_program_tva__c,
        account.pharmacy_location_tva__c,
        account.primary_credential_tva__c,
        account.primary_wholesaler_tva__c,
        account.rep_credentialing_tva__c,
        account.secondary_credential_tva__c,
        account.sign_in_location_tva__c,
        account.special_tva__c,
        account.sub_type_id_tva__c,
        account.sub_type_tva__c,
        account.teva_contracts_tva__c,
        account.ims_org_id_tva__c,
        account.cm_id_tva__c,
        account.year_of_birth_tva__c,
        account.teaching_hospital_tva__c,
        account.account_archived_tva__c,
        account.mobile_id_vod__pc,
        account.file_id,
        account.record_id
 FROM veeva.account
 WHERE (account.file_id = ( SELECT max(account.file_id) AS MAX
 FROM veeva.account));

CREATE  VIEW veeva.v_survey_target AS
 SELECT survey_target.id,
        survey_target.ownerid,
        survey_target.isdeleted,
        survey_target.name,
        survey_target.recordtypeid,
        survey_target.createddate,
        survey_target.createdbyid,
        survey_target.lastmodifieddate,
        survey_target.lastmodifiedbyid,
        survey_target.systemmodstamp,
        survey_target.mayedit,
        survey_target.islocked,
        survey_target.lastvieweddate,
        survey_target.lastreferenceddate,
        survey_target.account_display_name_vod__c,
        survey_target.account_vod__c,
        survey_target.channels_vod__c,
        survey_target.end_date_vod__c,
        survey_target.entity_reference_id_vod__c,
        survey_target.external_id_vod__c,
        survey_target.language_vod__c,
        survey_target.lock_vod__c,
        survey_target.mobile_id_vod__c,
        survey_target.no_autoassign_vod__c,
        survey_target.not_completed_vod__c,
        survey_target.region_vod__c,
        survey_target.segment_vod__c,
        survey_target.start_date_vod__c,
        survey_target.status_vod__c,
        survey_target.survey_vod__c,
        survey_target.territory_vod__c,
        survey_target.zvod_address_vod__c,
        survey_target.zvod_specialty_vod__c,
        survey_target.score_vod__c,
        survey_target.coach_vod__c,
        survey_target.Employee_vod__c,
        survey_target.Review_date_vod__c,
        survey_target.report_status_vod__c,
        survey_target.file_id,
        survey_target.record_id
 FROM veeva.survey_target
 WHERE (survey_target.file_id = ( SELECT max(survey_target.file_id) AS MAX
 FROM veeva.survey_target));

CREATE  VIEW veeva.v_dsa_slide AS
 SELECT dsa_slide.id,
        dsa_slide.isdeleted,
        dsa_slide.name,
        dsa_slide.createddate,
        dsa_slide.createdbyid,
        dsa_slide.lastmodifieddate,
        dsa_slide.lastmodifiedbyid,
        dsa_slide.systemmodstamp,
        dsa_slide.mayedit,
        dsa_slide.islocked,
        dsa_slide.clm_presentation_vod__c,
        dsa_slide.key_message_vod__c,
        dsa_slide.display_order_vod__c,
        dsa_slide.sub_presentation_vod__c,
        dsa_slide.mobile_id_vod__c,
        dsa_slide.external_id_vod__c,
        dsa_slide.file_id,
        dsa_slide.record_id
 FROM veeva.dsa_slide
 WHERE (dsa_slide.file_id = ( SELECT max(dsa_slide.file_id) AS max
 FROM veeva.dsa_slide));

CREATE  VIEW veeva.v_dsa_presentation AS
 SELECT dsa_presentation.approved_vod__c,
        dsa_presentation.copied_from_vod__c,
        dsa_presentation.copy_date_vod__c,
        dsa_presentation.createdbyid,
        dsa_presentation.createddate,
        dsa_presentation.default_presentation_vod__c,
        dsa_presentation.group_to_share_to__c,
        dsa_presentation.hidden_vod__c,
        dsa_presentation.id,
        dsa_presentation.isdeleted,
        dsa_presentation.islocked,
        dsa_presentation.lastmodifiedbyid,
        dsa_presentation.lastmodifieddate,
        dsa_presentation.mayedit,
        dsa_presentation.mobile_id_vod__c,
        dsa_presentation.name,
        dsa_presentation.original_record_id_vod__c,
        dsa_presentation.ownerid,
        dsa_presentation.parentid_vod__c,
        dsa_presentation.presentation_id_vod__c,
        dsa_presentation.product_vod__c,
        dsa_presentation.systemmodstamp,
        dsa_presentation.training_vod__c,
        dsa_presentation.type_vod__c,
        dsa_presentation.file_id,
        dsa_presentation.record_id
 FROM veeva.dsa_presentation
 WHERE (dsa_presentation.file_id = ( SELECT max(dsa_presentation.file_id) AS max
 FROM veeva.dsa_presentation));

CREATE  VIEW veeva.v_ids_call_detail AS
 SELECT ids_call_detail.id,
        ids_call_detail.file_id,
        ids_call_detail.record_id
 FROM veeva.ids_call_detail
 WHERE (ids_call_detail.file_id = ( SELECT max(ids_call_detail.file_id) AS max
 FROM veeva.ids_call_detail));

CREATE  VIEW veeva.v_ids_call AS
 SELECT ids_call.id,
        ids_call.file_id,
        ids_call.record_id
 FROM veeva.ids_call
 WHERE (ids_call.file_id = ( SELECT max(ids_call.file_id) AS max
 FROM veeva.ids_call));

CREATE  VIEW veeva.v_time_off_territory_kc AS
 SELECT time_off_territory_kc.id,
        time_off_territory_kc.event_row_id,
        time_off_territory_kc.rep_row_id,
        time_off_territory_kc.territory_num,
        time_off_territory_kc.time_off_date,
        time_off_territory_kc.time_on_date,
        time_off_territory_kc.description,
        time_off_territory_kc.comments,
        time_off_territory_kc.duration_in_minutes,
        time_off_territory_kc.duration_in_hours,
        time_off_territory_kc.duration_in_days,
        time_off_territory_kc.company,
        time_off_territory_kc.file_id,
        time_off_territory_kc.record_id
 FROM veeva.time_off_territory_kc
 WHERE (time_off_territory_kc.file_id = ( SELECT max(time_off_territory_kc.file_id) AS max
 FROM veeva.time_off_territory_kc));

CREATE  VIEW veeva.v_time_off_territory AS
 SELECT time_off_territory.createdbyid,
        time_off_territory.createddate,
        time_off_territory.date_vod__c,
        time_off_territory.hours_off_vod__c,
        time_off_territory.hours_vod__c,
        time_off_territory.id,
        time_off_territory.isdeleted,
        time_off_territory.islocked,
        time_off_territory.lastactivitydate,
        time_off_territory.lastmodifiedbyid,
        time_off_territory.lastmodifieddate,
        time_off_territory.mayedit,
        time_off_territory.mobile_id_vod__c,
        time_off_territory.name,
        time_off_territory.ownerid,
        time_off_territory.reason_vod__c,
        time_off_territory.start_time_vod__c,
        time_off_territory.status_vod__c,
        time_off_territory.systemmodstamp,
        time_off_territory.territory_vod__c,
        time_off_territory.time_vod__c,
        time_off_territory.file_id,
        time_off_territory.record_id
 FROM veeva.time_off_territory
 WHERE (time_off_territory.file_id = ( SELECT max(time_off_territory.file_id) AS max
 FROM veeva.time_off_territory));

CREATE  VIEW veeva.v_accountshare AS
 SELECT accountshare.accountaccesslevel,
        accountshare.accountid,
        accountshare.caseaccesslevel,
        accountshare.contactaccesslevel,
        accountshare.id,
        accountshare.isdeleted,
        accountshare.lastmodifiedbyid,
        accountshare.lastmodifieddate,
        accountshare.opportunityaccesslevel,
        accountshare.rowcause,
        accountshare.userorgroupid,
        accountshare.file_id,
        accountshare.record_id
 FROM veeva.accountshare
 WHERE (accountshare.file_id = ( SELECT max(accountshare.file_id) AS max
 FROM veeva.accountshare));

CREATE  VIEW veeva.v_account_merge_history AS
 SELECT account_merge_history.id,
        account_merge_history.isdeleted,
        account_merge_history.name,
        account_merge_history.createddate,
        account_merge_history.createdbyid,
        account_merge_history.lastmodifieddate,
        account_merge_history.lastmodifiedbyid,
        account_merge_history.systemmodstamp,
        account_merge_history.mayedit,
        account_merge_history.islocked,
        account_merge_history.account_vod__c,
        account_merge_history.personcontactid_vod__c,
        account_merge_history.account_personcontactid_vod__c,
        account_merge_history.file_id,
        account_merge_history.record_id
 FROM veeva.account_merge_history
 WHERE (account_merge_history.file_id = ( SELECT max(account_merge_history.file_id) AS max
 FROM veeva.account_merge_history));

CREATE  VIEW veeva.v_address AS
 SELECT address.id,
        address.isdeleted,
        address.name,
        address.recordtypeid,
        address.createddate,
        address.createdbyid,
        address.lastmodifieddate,
        address.lastmodifiedbyid,
        address.systemmodstamp,
        address.mayedit,
        address.islocked,
        address.account_vod__c,
        address.address_line_2_vod__c,
        address.city_vod__c,
        address.external_id_vod__c,
        address.dea_vod__c,
        address.dea_expiration_date_vod__c,
        address.dea_license_address_vod__c,
        address.phone_vod__c,
        address.fax_vod__c,
        address.map_vod__c,
        address.shipping_vod__c,
        address.primary_vod__c,
        address.license_vod__c,
        address.license_expiration_date_vod__c,
        address.staff_notes_vod__c,
        address.appt_required_vod__c,
        address.office_notes_vod__c,
        address.license_status_vod__c,
        address.zip_4_vod__c,
        address.phone_2_vod__c,
        address.fax_2_vod__c,
        address.license_valid_to_sample_vod__c,
        address.sample_status_vod__c,
        address.include_territory_assignment,
        address.mobile_id_vod__c,
        address.inactive_vod__c,
        address.lock_vod__c,
        address.country_vod__c,
        address.latitude_vod__c,
        address.zip_vod__c,
        address.best_times_vod__c,
        address.source_vod__c,
        address.brick_vod__c,
        address.assmca_vod__c,
        address.dea_address_vod__c,
        address.dea_schedule_vod__c,
        address.business_vod__c,
        address.billing_vod__c,
        address.home_vod__c,
        address.mailing_vod__c,
        address.state_vod__c,
        address.longitude_vod__c,
        address.dea_status_vod__c,
        address.entity_reference_id_vod__c,
        address.controlling_address_vod__c,
        address.controlled_address_vod__c,
        address.no_address_copy_vod__c,
        address.address_line_3_tva__c,
        address.county_tva__c,
        address.external_sln_tva__c,
        address.license_expiration_date_tva__c,
        address.rep_entered_sln_tva__c,
        address.dea_contact_tva__c,
        address.mark_for_deletion_tva__c,
        address.license_valid_date_tva__c,
        address.license_valid_num_tva__c,
        address.cm_id_tva__c,
        address.file_id,
        address.record_id
 FROM veeva.address
 WHERE (address.file_id = ( SELECT max(address.file_id) AS max
 FROM veeva.address));

CREATE  VIEW veeva.v_affiliation AS
 SELECT affiliation.child_affiliation_vod__c,
        affiliation.createdbyid,
        affiliation.createddate,
        affiliation.destroy_vod__c,
        affiliation.disable_trigger_vod__c,
        affiliation.external_id_vod__c,
        affiliation.from_account_vod__c,
        affiliation.from_contact_vod__c,
        affiliation.id,
        affiliation.influence_vod__c,
        affiliation.isdeleted,
        affiliation.islocked,
        affiliation.lastmodifiedbyid,
        affiliation.lastmodifieddate,
        affiliation.mayedit,
        affiliation.mobile_id_vod__c,
        affiliation.name,
        affiliation.ownerid,
        affiliation.parent_vod__c,
        affiliation.role_vod__c,
        affiliation.systemmodstamp,
        affiliation.to_account_vod__c,
        affiliation.to_contact_vod__c,
        affiliation.file_id,
        affiliation.record_id
 FROM veeva.affiliation
 WHERE (affiliation.file_id = ( SELECT max(affiliation.file_id) AS max
 FROM veeva.affiliation));

CREATE  VIEW veeva.v_assessment AS
 SELECT assessment.account__c,
        assessment.assessment_date_tva__c,
        assessment.cc_patient_profiles__c,
        assessment.cc_study_leverage__c,
        assessment.cml_q1_tva__c,
        assessment.cml_q2_tva__c,
        assessment.cml_q3_tva__c,
        assessment.cml_q4_tva__c,
        assessment.cml_q5_1_tva__c,
        assessment.cml_q5_tva__c,
        assessment.cml_q6_tva__c,
        assessment.cml_q7_1_tva__c,
        assessment.cml_q7_tva__c,
        assessment.community_activity__c,
        assessment.createdbyid,
        assessment.createddate,
        assessment.historical_assessment_tva__c,
        assessment.id,
        assessment.isdeleted,
        assessment.islocked,
        assessment.lastmodifiedbyid,
        assessment.lastmodifieddate,
        assessment.ln_patient_profiles__c,
        assessment.ln_study_leverage__c,
        assessment.mayedit,
        assessment.mobile_id_vod__c,
        assessment.name,
        assessment.oncology_board__c,
        assessment.preferred_pathologist__c,
        assessment.recordtypeid,
        assessment.research_focus__c,
        assessment.rl_patient_profiles__c,
        assessment.rl_study_leverage__c,
        assessment.systemmodstamp,
        assessment.treatment_preferences__c,
        assessment.treatment_volume__c,
        assessment.tumor_types__c,
        assessment.file_id,
        assessment.record_id
 FROM veeva.assessment
 WHERE (assessment.file_id = ( SELECT max(assessment.file_id) AS max
 FROM veeva.assessment));

CREATE  VIEW veeva.v_call_goal AS
 SELECT call_goal.account_tva__c,
        call_goal.active_tva__c,
        call_goal.actual_remaining_tva__c,
        call_goal.actual_tva__c,
        call_goal.createdbyid,
        call_goal.createddate,
        call_goal.end_date_tva__c,
        call_goal.external_id_tva__c,
        call_goal.goal_tva__c,
        call_goal.id,
        call_goal.isdeleted,
        call_goal.islocked,
        call_goal.lastactivitydate,
        call_goal.lastmodifiedbyid,
        call_goal.lastmodifieddate,
        call_goal.mayedit,
        call_goal.name,
        call_goal.ownerid,
        call_goal.priority_tva__c,
        call_goal.product_catalog_tva__c,
        call_goal.remaining_tva__c,
        call_goal.sort_order_tva__c,
        call_goal.start_date_tva__c,
        call_goal.systemmodstamp,
        call_goal.territory_tva__c,
        call_goal.file_id,
        call_goal.record_id
 FROM veeva.call_goal
 WHERE (call_goal.file_id = ( SELECT max(call_goal.file_id) AS max
 FROM veeva.call_goal));

CREATE  VIEW veeva.v_deciles AS
 SELECT deciles.account_vod__c,
        deciles.createdbyid,
        deciles.createddate,
        deciles.id,
        deciles.isdeleted,
        deciles.islocked,
        deciles.lastactivitydate,
        deciles.lastmodifiedbyid,
        deciles.lastmodifieddate,
        deciles.market_tva__c,
        deciles.mayedit,
        deciles.mobile_id_vod__c,
        deciles.name,
        deciles.systemmodstamp,
        deciles.value_tva__c,
        deciles.file_id,
        deciles.record_id
 FROM veeva.deciles
 WHERE (deciles.file_id = ( SELECT max(deciles.file_id) AS max
 FROM veeva.deciles));

CREATE  VIEW veeva.v_group AS
 SELECT "group".createdbyid,
        "group".createddate,
        "group".developername,
        "group".doesincludebosses,
        "group".doessendemailtomembers,
        "group".email,
        "group".id,
        "group".lastmodifiedbyid,
        "group".lastmodifieddate,
        "group".name,
        "group".ownerid,
        "group".relatedid,
        "group".systemmodstamp,
        "group".type,
        "group".file_id,
        "group".record_id
 FROM veeva."group"
 WHERE ("group".file_id = ( SELECT max("group".file_id) AS max
 FROM veeva."group"));

CREATE  VIEW veeva.v_key_message AS
 SELECT key_message.id,
        key_message.ownerid,
        key_message.isdeleted,
        key_message.name,
        key_message.createddate,
        key_message.createdbyid,
        key_message.lastmodifieddate,
        key_message.lastmodifiedbyid,
        key_message.systemmodstamp,
        key_message.mayedit,
        key_message.islocked,
        key_message.lastvieweddate,
        key_message.lastreferenceddate,
        key_message.description_vod__c,
        key_message.product_vod__c,
        key_message.product_strategy_vod__c,
        key_message.display_order_vod__c,
        key_message.active_vod__c,
        key_message.category_vod__c,
        key_message.vehicle_vod__c,
        key_message.clm_id_vod__c,
        key_message.custom_reaction_vod__c,
        key_message.slide_version_vod__c,
        key_message.language_vod__c,
        key_message.media_file_crc_vod__c,
        key_message.media_file_name_vod__c,
        key_message.media_file_size_vod__c,
        key_message.segment_vod__c,
        key_message.group_to_share_to__c,
        key_message.file_id,
        key_message.record_id
 FROM veeva.key_message
 WHERE (key_message.file_id = ( SELECT max(key_message.file_id) AS max
 FROM veeva.key_message));

CREATE  VIEW veeva.v_medical_inquiry AS
 SELECT medical_inquiry.account_vod__c,
        medical_inquiry.address_line_1_vod__c,
        medical_inquiry.address_line_2_vod__c,
        medical_inquiry.call2_vod__c,
        medical_inquiry.city_vod__c,
        medical_inquiry.country_vod__c,
        medical_inquiry.createdbyid,
        medical_inquiry.createddate,
        medical_inquiry.delivery_method_vod__c,
        medical_inquiry.disclaimer_vod__c,
        medical_inquiry.email_vod__c,
        medical_inquiry.entity_reference_id_vod__c,
        medical_inquiry.fax_number_vod__c,
        medical_inquiry.id,
        medical_inquiry.inquiry_text__c,
        medical_inquiry.isdeleted,
        medical_inquiry.islocked,
        medical_inquiry.lastmodifiedbyid,
        medical_inquiry.lastmodifieddate,
        medical_inquiry.lock_vod__c,
        medical_inquiry.mayedit,
        medical_inquiry.mobile_id_vod__c,
        medical_inquiry.msl_consult__c,
        medical_inquiry.name,
        medical_inquiry.new_email_tva__c,
        medical_inquiry.new_fax_tva__c,
        medical_inquiry.phone_number_vod__c,
        medical_inquiry.product__c,
        medical_inquiry.recordtypeid,
        medical_inquiry.rush_delivery__c,
        medical_inquiry.signature_date_vod__c,
        medical_inquiry.signature_vod__c,
        medical_inquiry.source__c,
        medical_inquiry.state_vod__c,
        medical_inquiry.status_vod__c,
        medical_inquiry.submitted_by_mobile_vod__c,
        medical_inquiry.systemmodstamp,
        medical_inquiry.zip_vod__c,
        medical_inquiry.zvod_delivery_method_vod__c,
        medical_inquiry.zvod_disclaimer_vod__c,
        medical_inquiry.file_id,
        medical_inquiry.record_id
 FROM veeva.medical_inquiry
 WHERE (medical_inquiry.file_id = ( SELECT max(medical_inquiry.file_id) AS max
 FROM veeva.medical_inquiry));

CREATE  VIEW veeva.v_product_metrics AS
 SELECT product_metrics.id,
        product_metrics.isdeleted,
        product_metrics.name,
        product_metrics.createddate,
        product_metrics.createdbyid,
        product_metrics.lastmodifieddate,
        product_metrics.lastmodifiedbyid,
        product_metrics.systemmodstamp,
        product_metrics.mayedit,
        product_metrics.islocked,
        product_metrics.account_vod__c,
        product_metrics.awareness__c,
        product_metrics.selling_stage__c,
        product_metrics.formulary_status__c,
        product_metrics.movement__c,
        product_metrics.products_vod__c,
        product_metrics.segment__c,
        product_metrics.x12_mo_trx_chg__c,
        product_metrics.speaker_skills__c,
        product_metrics.investigator_readiness__c,
        product_metrics.engagements__c,
        product_metrics.mobile_id_vod__c,
        product_metrics.external_id_vod__c,
        product_metrics.decile_value_tva__c,
        product_metrics.current_tva__c,
        product_metrics.external_id_tva__c,
        product_metrics.marketing_target_tva__c,
        product_metrics.prior_tva__c,
        product_metrics.rep_target_tva__c,
        product_metrics.sbo_target_tva__c,
        product_metrics.trx_3_month_tva__c,
        product_metrics.trx_6_month_tva__c,
        product_metrics.trx_ytd_tva__c,
        product_metrics.cp_decile_tva__c,
        product_metrics.business_segment_tva__c,
        product_metrics.file_id,
        product_metrics.record_id
 FROM veeva.product_metrics
 WHERE (product_metrics.file_id = ( SELECT max(product_metrics.file_id) AS max
 FROM veeva.product_metrics));

CREATE  VIEW veeva.v_survey_question_response AS
 SELECT survey_question_response.id,
        survey_question_response.isdeleted,
        survey_question_response.name,
        survey_question_response.recordtypeid,
        survey_question_response.createddate,
        survey_question_response.createdbyid,
        survey_question_response.lastmodifieddate,
        survey_question_response.lastmodifiedbyid,
        survey_question_response.systemmodstamp,
        survey_question_response.mayedit,
        survey_question_response.islocked,
        survey_question_response.survey_target_vod__c,
        survey_question_response.answer_choice_vod__c,
        survey_question_response.date_vod__c,
        survey_question_response.datetime_vod__c,
        survey_question_response.external_id_vod__c,
        survey_question_response.mobile_id_vod__c,
        survey_question_response.number_vod__c,
        survey_question_response.order_vod__c,
        survey_question_response.question_text_vod__c,
        survey_question_response.required_vod__c,
        survey_question_response.response_hash_vod__c,
        survey_question_response.response_vod__c,
        survey_question_response.score_vod__c,
        survey_question_response.survey_question_vod__c,
        survey_question_response.text_vod__c,
        survey_question_response.type_vod__c,
        survey_question_response.file_id,
        survey_question_response.record_id
 FROM veeva.survey_question_response
 WHERE (survey_question_response.file_id = ( SELECT max(survey_question_response.file_id) AS max
 FROM veeva.survey_question_response));

CREATE  VIEW veeva.v_recordtype AS
 SELECT recordtype.businessprocessid,
        recordtype.createdbyid,
        recordtype.createddate,
        recordtype.description,
        recordtype.developername,
        recordtype.id,
        recordtype.isactive,
        recordtype.ispersontype,
        recordtype.lastmodifiedbyid,
        recordtype.lastmodifieddate,
        recordtype.name,
        recordtype.namespaceprefix,
        recordtype.sobjecttype,
        recordtype.systemmodstamp,
        recordtype.file_id,
        recordtype.record_id
 FROM veeva.recordtype
 WHERE (recordtype.file_id = ( SELECT max(recordtype.file_id) AS max
 FROM veeva.recordtype));

CREATE  VIEW veeva.v_survey_question AS
 SELECT survey_question.id,
        survey_question.isdeleted,
        survey_question.name,
        survey_question.recordtypeid,
        survey_question.createddate,
        survey_question.createdbyid,
        survey_question.lastmodifieddate,
        survey_question.lastmodifiedbyid,
        survey_question.systemmodstamp,
        survey_question.mayedit,
        survey_question.islocked,
        survey_question.survey_vod__c,
        survey_question.answer_choice_vod__c,
        survey_question.external_id_vod__c,
        survey_question.max_score_vod__c,
        survey_question.min_score_vod__c,
        survey_question.order_vod__c,
        survey_question.question_vod__c,
        survey_question.required_vod__c,
        survey_question.text_vod__c,
        survey_question.file_id,
        survey_question.record_id
 FROM veeva.survey_question
 WHERE (survey_question.file_id = ( SELECT max(survey_question.file_id) AS max
 FROM veeva.survey_question));

CREATE  VIEW veeva.v_survey AS
 SELECT survey.id,
        survey.ownerid,
        survey.isdeleted,
        survey.name,
        survey.recordtypeid,
        survey.createddate,
        survey.createdbyid,
        survey.lastmodifieddate,
        survey.lastmodifiedbyid,
        survey.systemmodstamp,
        survey.mayedit,
        survey.islocked,
        survey.lastvieweddate,
        survey.lastreferenceddate,
        survey.assignment_type_vod__c,
        survey.channels_vod__c,
        survey.end_date_vod__c,
        survey.expired_vod__c,
        survey.external_id_vod__c,
        survey.language_vod__c,
        survey.lock_vod__c,
        survey.open_vod__c,
        survey.product_vod__c,
        survey.region_vod__c,
        survey.segment_vod__c,
        survey.start_date_vod__c,
        survey.status_vod__c,
        survey.territory_vod__c,
        survey.zvod_questions_vod__c,
        survey.zvod_segments_vod__c,
        survey.zvod_targets_vod__c,
        survey.max_score_vod__c,
        survey.min_score_vod__c,
        survey.file_id,
        survey.record_id
 FROM veeva.survey
 WHERE (survey.file_id = ( SELECT max(survey.file_id) AS max
 FROM veeva.survey));

CREATE  VIEW veeva.v_sync_tracking AS
 SELECT sync_tracking.createdbyid,
        sync_tracking.createddate,
        sync_tracking.download_processed_vod__c,
        sync_tracking.id,
        sync_tracking.isdeleted,
        sync_tracking.islocked,
        sync_tracking.lastmodifiedbyid,
        sync_tracking.lastmodifieddate,
        sync_tracking.mayedit,
        sync_tracking.media_processed_vod__c,
        sync_tracking.mobile_id_vod__c,
        sync_tracking.name,
        sync_tracking.ownerid,
        sync_tracking.successful_sync_vod__c,
        sync_tracking.sync_completed_datetime_vod__c,
        sync_tracking.sync_duration_vod__c,
        sync_tracking.sync_start_datetime_vod__c,
        sync_tracking.sync_type_vod__c,
        sync_tracking.systemmodstamp,
        sync_tracking.upload_processed_vod__c,
        sync_tracking.version_vod__c,
        sync_tracking.vinsights_processed_vod__c,
        sync_tracking.file_id,
        sync_tracking.record_id
 FROM veeva.sync_tracking
 WHERE (sync_tracking.file_id = ( SELECT max(sync_tracking.file_id) AS max
 FROM veeva.sync_tracking));

CREATE  VIEW veeva.v_tsf AS
 SELECT tsf.id,
        tsf.isdeleted,
        tsf.name,
        tsf.recordtypeid,
        tsf.createddate,
        tsf.createdbyid,
        tsf.lastmodifieddate,
        tsf.lastmodifiedbyid,
        tsf.systemmodstamp,
        tsf.mayedit,
        tsf.islocked,
        tsf.account_vod__c,
        tsf.address_vod__c,
        tsf.last_activity_date_vod__c,
        tsf.my_target_vod__c,
        tsf.route_vod__c,
        tsf.mobile_id_vod__c,
        tsf.external_id_vod__c,
        tsf.territory_vod__c,
        tsf.ytd_activity_vod__c,
        tsf.preferred_account_vod__c,
        tsf.allowed_products_vod__c,
        tsf.territory_status_tva__c,
        tsf.territory_specialty_tva__c,
        tsf.treats_es_osa_tva__c,
        tsf.osa_patients_tva__c,
        tsf.account_status_tva__c,
        tsf.dea_number_tva__c,
        tsf.synribo_target_tva__c,
        tsf.treanda_sbo_tva__c,
        tsf.trisenox_sbo_tva__c,
        tsf.appt_index_tva__c,
        tsf.merged_mvn__c,
        tsf.call_plan_designation_tva__c,
        tsf.campaign_tva__c,
        tsf.file_id,
        tsf.record_id
 FROM veeva.tsf
 WHERE (tsf.file_id = ( SELECT max(tsf.file_id) AS max
 FROM veeva.tsf));

CREATE  VIEW veeva.v_veeva_user AS
 SELECT veeva_user.id,
        veeva_user.username,
        veeva_user.lastname,
        veeva_user.firstname,
        veeva_user.name,
        veeva_user.companyname,
        veeva_user.division,
        veeva_user.department,
        veeva_user.title,
        veeva_user.street,
        veeva_user.city,
        veeva_user.state,
        veeva_user.postalcode,
        veeva_user.country,
        veeva_user.latitude,
        veeva_user.longitude,
        veeva_user.email,
        veeva_user.emailpreferencesautobcc,
        veeva_user.emailpreferencesautobccstayint,
        veeva_user.emailpreferencesstayintouchrem,
        veeva_user.senderemail,
        veeva_user.sendername,
        veeva_user.signature,
        veeva_user.stayintouchsubject,
        veeva_user.stayintouchsignature,
        veeva_user.stayintouchnote,
        veeva_user.phone,
        veeva_user.fax,
        veeva_user.mobilephone,
        veeva_user.alias,
        veeva_user.communitynickname,
        veeva_user.isactive,
        veeva_user.timezonesidkey,
        veeva_user.userroleid,
        veeva_user.localesidkey,
        veeva_user.receivesinfoemails,
        veeva_user.receivesadmininfoemails,
        veeva_user.emailencodingkey,
        veeva_user.usertype,
        veeva_user.languagelocalekey,
        veeva_user.employeenumber,
        veeva_user.delegatedapproverid,
        veeva_user.managerid,
        veeva_user.lastlogindate,
        veeva_user.createddate,
        veeva_user.createdbyid,
        veeva_user.lastmodifieddate,
        veeva_user.lastmodifiedbyid,
        veeva_user.systemmodstamp,
        veeva_user.offlinetrialexpirationdate,
        veeva_user.offlinepdatrialexpirationdate,
        veeva_user.userpermissionsmarketinguser,
        veeva_user.userpermissionsofflineuser,
        veeva_user.userpermissionswirelessuser,
        veeva_user.userpermissionsavantgouser,
        veeva_user.userpermscallcenterautologin,
        veeva_user.userpermissionsmobileuser,
        veeva_user.userpermissionssfcontentuser,
        veeva_user.userpermissionsinteractionuser,
        veeva_user.userpermschatteranswersuser,
        veeva_user.forecastenabled,
        veeva_user.userprefsactivityreminderspopu,
        veeva_user.userprefseventreminderscheckbo,
        veeva_user.userprefstaskreminderscheckbox,
        veeva_user.userprefsremindersoundoff,
        veeva_user.userprefshidecsngetchattermobi,
        veeva_user.userprefshidecsndesktoptask,
        veeva_user.userpreferencesoptoutoftouch,
        veeva_user.userprefsshowtitletoexternalus,
        veeva_user.userprefsshowmanagertoexternal,
        veeva_user.userprefsshowemailtoexternalus,
        veeva_user.userprefsshowworkphonetoextern,
        veeva_user.userprefsshowmobilephonetoexte,
        veeva_user.userprefsshowfaxtoexternaluser,
        veeva_user.userprefsshowstreetaddresstoex,
        veeva_user.userprefsshowcitytoexternaluse,
        veeva_user.userprefsshowstatetoexternalus,
        veeva_user.userprefsshowpostalcodetoexter,
        veeva_user.userprefsshowcountrytoexternal,
        veeva_user.userprefsshowprofilepictoguest,
        veeva_user.userprefsshowtitletoguestusers,
        veeva_user.userprefsshowcitytoguestusers,
        veeva_user.userprefsshowstatetoguestusers,
        veeva_user.userprefsshowpostalcodetoguest,
        veeva_user.userprefsshowcountrytoguestuse,
        veeva_user.contactid,
        veeva_user.accountid,
        veeva_user.callcenterid,
        veeva_user.extension,
        veeva_user.federationidentifier,
        veeva_user.lastvieweddate,
        veeva_user.lastreferenceddate,
        veeva_user.last_mobile_connect_vod__c,
        veeva_user.last_tablet_connect_vod__c,
        veeva_user.last_mobile_connect_version,
        veeva_user.last_tablet_connect_version,
        veeva_user.last_mobile_sync_vod__c,
        veeva_user.last_tablet_sync_vod__c,
        veeva_user.raiselogginglevel_vod__c,
        veeva_user.senddetailedlog_vod__c,
        veeva_user.last_blackberry_connect_vod__c,
        veeva_user.last_blackberry_connect_versio,
        veeva_user.last_blackberry_sync_vod__c,
        veeva_user.force_full_refresh_vod__c,
        veeva_user.override_systemmodstamp_timest,
        veeva_user.facetime_email_vod__c,
        veeva_user.facetime_phone_vod__c,
        veeva_user.product_expertise_vod__c,
        veeva_user.available_vod__c,
        veeva_user.available_last_update_vod__c,
        veeva_user.last_ipad_connect_version,
        veeva_user.last_ipad_connect_vod__c,
        veeva_user.last_ipad_sync_vod__c,
        veeva_user.inventory_order_allocation_gro,
        veeva_user.concur_user_id_vod__c,
        veeva_user.external_id_tva__c,
        veeva_user.last_ipad_ios_version_vod__c,
        veeva_user.veeva_id__c,
        veeva_user.login_id_tva__c,
        veeva_user.primary_territory_vod__c,
        veeva_user.analytics_admin_vod__c,
        veeva_user.content_admin_vod__c,
        veeva_user.upload_vtrans_vod__c,
        veeva_user.can_sample_tva__c,
        veeva_user.do_not_modify_tva__c,
        veeva_user.profile_name_vod__c,
        veeva_user.file_id,
        veeva_user.record_id
 FROM veeva.veeva_user
 WHERE (veeva_user.file_id = ( SELECT max(veeva_user.file_id) AS max
 FROM veeva.veeva_user));

CREATE  VIEW veeva.v_user_role AS
 SELECT user_role.caseaccessforaccountowner,
        user_role.contactaccessforaccountowner,
        user_role.developername,
        user_role.forecastuserid,
        user_role.id,
        user_role.lastmodifiedbyid,
        user_role.lastmodifieddate,
        user_role.mayforecastmanagershare,
        user_role.name,
        user_role.opportunityaccessaccountowner,
        user_role.parentroleid,
        user_role.portalaccountid,
        user_role.portalaccountownerid,
        user_role.portaltype,
        user_role.rollupdescription,
        user_role.systemmodstamp,
        user_role.file_id,
        user_role.record_id
 FROM veeva.user_role
 WHERE (user_role.file_id = ( SELECT max(user_role.file_id) AS max
 FROM veeva.user_role));

CREATE  VIEW veeva.v_ids_call_sample AS
 SELECT ids_call_sample.id,
        ids_call_sample.file_id,
        ids_call_sample.record_id
 FROM veeva.ids_call_sample
 WHERE (ids_call_sample.file_id = ( SELECT max(ids_call_sample.file_id) AS max
 FROM veeva.ids_call_sample));

CREATE  VIEW veeva.v_product AS
 SELECT product.id,
        product.ownerid,
        product.isdeleted,
        product.name,
        product.createddate,
        product.createdbyid,
        product.lastmodifieddate,
        product.lastmodifiedbyid,
        product.systemmodstamp,
        product.mayedit,
        product.islocked,
        product.lastvieweddate,
        product.lastreferenceddate,
        product.consumer_site__c,
        product.product_info__c,
        product.therapeutic_class_vod__c,
        product.parent_product_vod__c,
        product.therapeutic_area_vod__c,
        product.product_type_vod__c,
        product.require_key_message_vod__c,
        product.cost_vod__c,
        product.external_id_vod__c,
        product.manufacturer_vod__c,
        product.company_product_vod__c,
        product.controlled_substance_vod__c,
        product.description_vod__c,
        product.sample_quantity_picklist_vod__,
        product.display_order_vod__c,
        product.no_metrics_vod__c,
        product.distributor_vod__c,
        product.sample_quantity_bound_vod__c,
        product.sample_u_m_vod__c,
        product.no_details_vod__c,
        product.quantity_per_case_vod__c,
        product.schedule_vod__c,
        product.restricted_vod__c,
        product.pricing_rule_quantity_bound_vo,
        product.no_promo_items_vod__c,
        product.user_aligned_vod__c,
        product.restricted_states_vod__c,
        product.sort_code_vod__c,
        product.no_cycle_plans_vod__c,
        product.inventory_order_uom_vod__c,
        product.inventory_quantity_per_case_vo,
        product.sub_type__c,
        product.organization__c,
        product.product_id_teva__c,
        product.product_line_tva__c,
        product.file_id,
        product.record_id,
        product.vexternal_id_vod__c,
        product.product_value_vod__c,
        product.encrypt_veeva_external_id_tva__c,
        product.available_qty_tva__c,
        product.expiration_date_tva__c
 FROM veeva.product
 WHERE (product.file_id = ( SELECT max(product.file_id) AS max
 FROM veeva.product));

CREATE  VIEW veeva.v_medical_event AS
 SELECT me.name AS event_name,
        me.start_date_vod__c AS start_date,
        me.end_date_vod__c AS end_date,
        me.demo_led_by_tva__c AS training_led_by,
        me.number_of_attendees_tva__c AS number_of_attendees,
        me.address_tva__c AS address,
        me.city_tva__c AS city,
        me.state_tva__c AS state,
        me.zip_tva__c AS zip,
        me.primary_product__c AS primary_product
 FROM veeva.medical_event me
 WHERE (me.file_id = ( SELECT max(medical_event.file_id) AS max
 FROM veeva.medical_event));

CREATE  VIEW veeva.v_dedup_ids_call AS
 SELECT vc.id AS call_id,
        vc.account_vod__c AS veeva_account_id,
        vc.call_type_vod__c AS call_type,
        va.recordtypeid,
        vu.employeenumber AS rep_id,
        CASE WHEN (vc.created_by_timezone_tva__c IS NOT NULL) THEN "timezone"(vc.created_by_timezone_tva__c, vc.call_datetime_vod__c) WHEN (tz.zip IS NOT NULL) THEN "timezone"(tz.timezone_name, vc.call_datetime_vod__c) ELSE "timezone"(vu.timezonesidkey, vc.call_datetime_vod__c) END AS call_datetime,
        vc.how_executed_tva__c AS how_executed,
        CASE WHEN (vc.how_executed_tva__c = 'Engage Meeting'::varchar(14)) THEN 1 WHEN (vc.how_executed_tva__c = 'Face to Face'::varchar(12)) THEN 2 WHEN (vc.how_executed_tva__c = 'Phone – with Brand website'::varchar(28)) THEN 3 WHEN (vc.how_executed_tva__c = 'Phone'::varchar(5)) THEN 4 WHEN (vc.how_executed_tva__c = 'Phone - HCP'::varchar(11)) THEN 6 WHEN (vc.how_executed_tva__c = 'Phone - Staff'::varchar(13)) THEN 7 WHEN (vc.how_executed_tva__c = 'Approved Email'::varchar(14)) THEN 8 ELSE 100 END AS he_id
 FROM veeva.v_account va, (((veeva.call vc JOIN ( SELECT v_veeva_user.id,
        v_veeva_user.username,
        v_veeva_user.lastname,
        v_veeva_user.firstname,
        v_veeva_user.name,
        v_veeva_user.companyname,
        v_veeva_user.division,
        v_veeva_user.department,
        v_veeva_user.title,
        v_veeva_user.street,
        v_veeva_user.city,
        v_veeva_user.state,
        v_veeva_user.postalcode,
        v_veeva_user.country,
        v_veeva_user.latitude,
        v_veeva_user.longitude,
        v_veeva_user.email,
        v_veeva_user.emailpreferencesautobcc,
        v_veeva_user.emailpreferencesautobccstayint,
        v_veeva_user.emailpreferencesstayintouchrem,
        v_veeva_user.senderemail,
        v_veeva_user.sendername,
        v_veeva_user.signature,
        v_veeva_user.stayintouchsubject,
        v_veeva_user.stayintouchsignature,
        v_veeva_user.stayintouchnote,
        v_veeva_user.phone,
        v_veeva_user.fax,
        v_veeva_user.mobilephone,
        v_veeva_user.alias,
        v_veeva_user.communitynickname,
        v_veeva_user.isactive,
        v_veeva_user.timezonesidkey,
        v_veeva_user.userroleid,
        v_veeva_user.localesidkey,
        v_veeva_user.receivesinfoemails,
        v_veeva_user.receivesadmininfoemails,
        v_veeva_user.emailencodingkey,
        v_veeva_user.usertype,
        v_veeva_user.languagelocalekey,
        v_veeva_user.employeenumber,
        v_veeva_user.delegatedapproverid,
        v_veeva_user.managerid,
        v_veeva_user.lastlogindate,
        v_veeva_user.createddate,
        v_veeva_user.createdbyid,
        v_veeva_user.lastmodifieddate,
        v_veeva_user.lastmodifiedbyid,
        v_veeva_user.systemmodstamp,
        v_veeva_user.offlinetrialexpirationdate,
        v_veeva_user.offlinepdatrialexpirationdate,
        v_veeva_user.userpermissionsmarketinguser,
        v_veeva_user.userpermissionsofflineuser,
        v_veeva_user.userpermissionswirelessuser,
        v_veeva_user.userpermissionsavantgouser,
        v_veeva_user.userpermscallcenterautologin,
        v_veeva_user.userpermissionsmobileuser,
        v_veeva_user.userpermissionssfcontentuser,
        v_veeva_user.userpermissionsinteractionuser,
        v_veeva_user.userpermschatteranswersuser,
        v_veeva_user.forecastenabled,
        v_veeva_user.userprefsactivityreminderspopu,
        v_veeva_user.userprefseventreminderscheckbo,
        v_veeva_user.userprefstaskreminderscheckbox,
        v_veeva_user.userprefsremindersoundoff,
        v_veeva_user.userprefshidecsngetchattermobi,
        v_veeva_user.userprefshidecsndesktoptask,
        v_veeva_user.userpreferencesoptoutoftouch,
        v_veeva_user.userprefsshowtitletoexternalus,
        v_veeva_user.userprefsshowmanagertoexternal,
        v_veeva_user.userprefsshowemailtoexternalus,
        v_veeva_user.userprefsshowworkphonetoextern,
        v_veeva_user.userprefsshowmobilephonetoexte,
        v_veeva_user.userprefsshowfaxtoexternaluser,
        v_veeva_user.userprefsshowstreetaddresstoex,
        v_veeva_user.userprefsshowcitytoexternaluse,
        v_veeva_user.userprefsshowstatetoexternalus,
        v_veeva_user.userprefsshowpostalcodetoexter,
        v_veeva_user.userprefsshowcountrytoexternal,
        v_veeva_user.userprefsshowprofilepictoguest,
        v_veeva_user.userprefsshowtitletoguestusers,
        v_veeva_user.userprefsshowcitytoguestusers,
        v_veeva_user.userprefsshowstatetoguestusers,
        v_veeva_user.userprefsshowpostalcodetoguest,
        v_veeva_user.userprefsshowcountrytoguestuse,
        v_veeva_user.contactid,
        v_veeva_user.accountid,
        v_veeva_user.callcenterid,
        v_veeva_user.extension,
        v_veeva_user.federationidentifier,
        v_veeva_user.lastvieweddate,
        v_veeva_user.lastreferenceddate,
        v_veeva_user.last_mobile_connect_vod__c,
        v_veeva_user.last_tablet_connect_vod__c,
        v_veeva_user.last_mobile_connect_version,
        v_veeva_user.last_tablet_connect_version,
        v_veeva_user.last_mobile_sync_vod__c,
        v_veeva_user.last_tablet_sync_vod__c,
        v_veeva_user.raiselogginglevel_vod__c,
        v_veeva_user.senddetailedlog_vod__c,
        v_veeva_user.last_blackberry_connect_vod__c,
        v_veeva_user.last_blackberry_connect_versio,
        v_veeva_user.last_blackberry_sync_vod__c,
        v_veeva_user.force_full_refresh_vod__c,
        v_veeva_user.override_systemmodstamp_timest,
        v_veeva_user.facetime_email_vod__c,
        v_veeva_user.facetime_phone_vod__c,
        v_veeva_user.product_expertise_vod__c,
        v_veeva_user.available_vod__c,
        v_veeva_user.available_last_update_vod__c,
        v_veeva_user.last_ipad_connect_version,
        v_veeva_user.last_ipad_connect_vod__c,
        v_veeva_user.last_ipad_sync_vod__c,
        v_veeva_user.inventory_order_allocation_gro,
        v_veeva_user.concur_user_id_vod__c,
        v_veeva_user.external_id_tva__c,
        v_veeva_user.last_ipad_ios_version_vod__c,
        v_veeva_user.veeva_id__c,
        v_veeva_user.login_id_tva__c,
        v_veeva_user.primary_territory_vod__c,
        v_veeva_user.analytics_admin_vod__c,
        v_veeva_user.content_admin_vod__c,
        v_veeva_user.upload_vtrans_vod__c,
        v_veeva_user.can_sample_tva__c,
        v_veeva_user.do_not_modify_tva__c,
        v_veeva_user.profile_name_vod__c,
        v_veeva_user.file_id,
        v_veeva_user.record_id
 FROM veeva.v_veeva_user
 WHERE (length(v_veeva_user.lastname) <= 50)) vu ON ((vc.ownerid = vu.id))) LEFT  JOIN reference.zipcode_timezone tz ON ((vc.zip_vod__c = tz.zip))) LEFT  JOIN reference.how_executed he ON ((vc.how_executed_tva__c = he.how_executed)))
 WHERE ((va.id = vc.account_vod__c) AND (vc.id IN ( SELECT v_ids_call.id
 FROM veeva.v_ids_call)))
 GROUP BY vc.id,
          vc.account_vod__c,
          vc.call_type_vod__c,
          va.recordtypeid,
          vu.employeenumber,
          CASE WHEN (vc.created_by_timezone_tva__c IS NOT NULL) THEN "timezone"(vc.created_by_timezone_tva__c, vc.call_datetime_vod__c) WHEN (tz.zip IS NOT NULL) THEN "timezone"(tz.timezone_name, vc.call_datetime_vod__c) ELSE "timezone"(vu.timezonesidkey, vc.call_datetime_vod__c) END,
          vc.how_executed_tva__c,
          CASE WHEN (vc.how_executed_tva__c = 'Engage Meeting'::varchar(14)) THEN 1 WHEN (vc.how_executed_tva__c = 'Face to Face'::varchar(12)) THEN 2 WHEN (vc.how_executed_tva__c = 'Phone – with Brand website'::varchar(28)) THEN 3 WHEN (vc.how_executed_tva__c = 'Phone'::varchar(5)) THEN 4 WHEN (vc.how_executed_tva__c = 'Phone - HCP'::varchar(11)) THEN 6 WHEN (vc.how_executed_tva__c = 'Phone - Staff'::varchar(13)) THEN 7 WHEN (vc.how_executed_tva__c = 'Approved Email'::varchar(14)) THEN 8 ELSE 100 END;

CREATE  VIEW veeva.v_rep_roster AS
 SELECT rep_roster.Id AS ID,
        rep_roster.CreatedDate,
        rep_roster.CreatedById,
        rep_roster.LastModifiedDate,
        rep_roster.LastModifiedById,
        rep_roster.OwnerId,
        rep_roster.IsDeleted,
        rep_roster.Name,
        rep_roster.SystemModstamp,
        rep_roster.MayEdit,
        rep_roster.IsLocked,
        rep_roster.Territory_vod__c AS Territory,
        rep_roster.Address_line_1_vod__c AS Address_line_1,
        rep_roster.Address_line_2_vod__c AS Address_line_2,
        rep_roster.Address_line_3_tva__c AS Address_line_3,
        rep_roster.City_vod__c AS City,
        rep_roster.State_vod__c AS State,
        rep_roster.ZIP_vod__c AS ZIP,
        rep_roster.Computer_Asset_Tag__c AS Computer_Asset_Tag,
        rep_roster.Fax_Number__c AS Fax_Number,
        rep_roster.Home_Phone__c AS Home_Phone,
        rep_roster.Mobile_Number__c AS Mobile_Number,
        rep_roster.Organization_Id__c AS Organization_Id,
        rep_roster.Rep_Type_TVA__c AS Rep_Type,
        rep_roster.SampleFlag_TVA__c AS SampleFlag,
        rep_roster.Ship_Addr1_TVA__c AS Ship_Addr1,
        rep_roster.Ship_Addr2_TVA__c AS Ship_Addr2,
        rep_roster.Ship_Addr3_TVA__c AS Ship_Addr3,
        rep_roster.Ship_City_TVA__c AS Ship_City,
        rep_roster.Ship_State_TVA__C AS Ship_State,
        rep_roster.Ship_Zip_TVA__c AS Ship_Zip,
        rep_roster.Store_Addr1_TVA__c AS Store_Addr1,
        rep_roster.Store_Addr2_TVA__c AS Store_Addr2,
        rep_roster.Store_Addr3_TVA__c AS Store_Addr3,
        rep_roster.Store_City_TVA__c AS Store_City,
        rep_roster.Store_State_TVA__C AS Store_State,
        rep_roster.Store_Zip_TVA__c AS Store_Zip,
        rep_roster.Username_External_Id_vod__c AS Username_External_Id,
        rep_roster.VIN__c AS VIN,
        rep_roster.LastViewedDate,
        rep_roster.lastReferencedDate,
        rep_roster.record_id,
        rep_roster.file_id
 FROM veeva.rep_roster
 WHERE (rep_roster.file_id = ( SELECT max(rep_roster.file_id) AS MAX
 FROM veeva.rep_roster));

CREATE  VIEW veeva.v_user_territory AS
 SELECT userterritory2association.Id AS id,
        userterritory2association.UserId AS Userid,
        userterritory2association.Territory2Id AS territory2Id,
        userterritory2association.IsActive AS isActive,
        userterritory2association.RoleInTerritory2 AS roleInTerritory2,
        userterritory2association.LastModifiedDate AS lastModifiedDate,
        userterritory2association.LastModifiedById AS lastModifiedById,
        userterritory2association.SystemModstamp AS systemModstamp,
        userterritory2association.record_id,
        userterritory2association.file_id
 FROM veeva.userterritory2association
 WHERE (userterritory2association.file_id = ( SELECT max(userterritory2association.file_id) AS MAX
 FROM veeva.userterritory2association));

CREATE  VIEW veeva.v_territory AS
 SELECT territory2.Id AS territory2Id,
        territory2.Name AS name,
        territory2.Territory2TypeId AS territory2TypeId,
        territory2.Territory2ModelId AS territory2ModelId,
        territory2.ParentTerritory2Id AS parentTerritoryId,
        territory2.Description,
        territory2.AccountAccessLevel AS accountAccessLevel,
        territory2.OpportunityAccessLevel AS opportunityAccessLevel,
        territory2.CaseAccessLevel AS caseAccessLevel,
        territory2.ContactAccessLevel AS contactAccessLevel,
        territory2.LastModifiedDate AS lastModifiedDate,
        territory2.LastModifiedById AS lastModifiedById,
        territory2.SystemModstamp AS systemModstamp,
        territory2.DeveloperName AS developerName,
        territory2.ParentTerritory1Id__c AS parentTerritory1Id__c,
        territory2.Territory1Id__c AS Id,
        territory2.record_id,
        territory2.file_id
 FROM veeva.territory2
 WHERE (territory2.file_id = ( SELECT max(territory2.file_id) AS MAX
 FROM veeva.territory2));
==> failed_tevaQA12G_veeva_partial_export.sql <==
