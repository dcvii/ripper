CREATE SCHEMA sandbox;

CREATE SEQUENCE sandbox.austedo  CACHE      20  CYCLE ;

CREATE TABLE sandbox.ic_target
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    row_create_date date DEFAULT "sysdate"()
);


CREATE TABLE sandbox.ic_goal_setting
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1) DEFAULT 'N',
    dnp_flag char(1) DEFAULT 'N',
    market_rolling_6 float,
    product_rolling_6 float,
    market_rolling_12 float,
    market_baseline float,
    product_baseline float,
    target_market_rolling_6 float,
    target_product_rolling_6 float,
    target_market_rolling_12 float,
    target_market_baseline float,
    target_product_baseline float,
    include_in_nation_rollup char(1) DEFAULT 'Y',
    include_in_area_rollup char(1) DEFAULT 'Y',
    include_in_region_rollup char(1) DEFAULT 'Y',
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date DEFAULT "sysdate"()
);


CREATE TABLE sandbox.call_plan_decile
(
    hcp_id varchar(50),
    market varchar(50),
    decile_value varchar(50),
    veeva_id varchar(50)
);


CREATE TEMPORARY TABLE sandbox.tmp_file_id_purge
(
    file_id int,
    feed_id int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_file_id
(
    file_id int,
    feed_id int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_445_1_md
(
    bucket_date date,
    start_date date,
    end_date date,
    bucket_type varchar(10),
    rollup_445 date
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_445_2_md
(
    bucket_date date,
    start_date date,
    end_date date,
    bucket_type varchar(10),
    rollup_445 date
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_445_md
(
    bucket_date date,
    start_date date,
    end_date date,
    bucket_type varchar(10),
    rollup_445 date
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_ddd_md
(
    onc_account_demo_id int,
    alt_seq_num varchar(10),
    outlet_name varchar(100),
    outlet_code varchar(10),
    ims_facility_number varchar(11),
    ims_prescriber_number varchar(7),
    subcategory_code varchar(10),
    outlet_zip varchar(5),
    ims_client_num varchar(3),
    ims_report_num varchar(2),
    report_frequency varchar(10),
    ims_product_code varchar(9),
    basket_id int,
    basket_name varchar(300),
    data_date date,
    date date,
    rollup_week date,
    rollup_month date,
    rollup_445 date,
    comp_month date,
    quantity numeric(37,15),
    dollars numeric(37,15),
    sales_force_id varchar(2),
    file_id int,
    record_id int,
    tvcmid int,
    outlet_tvcmid int,
    facility_tvcmid int,
    prescriber_tvcmid int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_qty_file_id_adhoc1_ad
(
    file_id int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_cnt_file_id_adhoc1_ad
(
    file_id int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TABLE sandbox.scd_roster
(
    scd_status varchar(10) DEFAULT 'Current',
    scd_effective_date date DEFAULT trunc("sysdate"()),
    scd_expiration_date date DEFAULT '2099-12-31'::date,
    employee_id varchar(100),
    territory_number varchar(100),
    territory_name varchar(255),
    sales_force_id varchar(100),
    full_name varchar(100),
    first_name varchar(100),
    middle_name varchar(100),
    last_name varchar(100),
    address_line1 varchar(100),
    address_line2 varchar(100),
    address_line3 varchar(100),
    city varchar(100),
    state varchar(100),
    zip varchar(100),
    country varchar(100),
    business_address_line1 varchar(100),
    business_address_line2 varchar(100),
    business_address_line3 varchar(100),
    business_city varchar(100),
    business_state varchar(2),
    business_zip varchar(100),
    business_country varchar(100),
    shipping_address_line1 varchar(100),
    shipping_address_line2 varchar(100),
    shipping_address_line3 varchar(100),
    shipping_city varchar(100),
    shipping_state varchar(2),
    shipping_zip varchar(100),
    shipping_country varchar(100),
    business_phone varchar(100),
    home_phone varchar(100),
    mobile_phone varchar(100),
    fax varchar(100),
    voice_mail_extension varchar(100),
    email varchar(255),
    hire_date date,
    title varchar(100),
    rep_type varchar(10),
    username varchar(100),
    out_of_territory varchar(5),
    parent_territory_number varchar(100),
    company_code varchar(100),
    original_hire_date date,
    team varchar(100),
    salutation varchar(15),
    suffix varchar(15),
    cost_center varchar(30),
    sample_eligibility_flag varchar(10),
    samplestorage_address_line1 varchar(100),
    samplestorage_address_line2 varchar(100),
    samplestorage_address_line3 varchar(100),
    samplestorage_city varchar(100),
    samplestorage_zip varchar(100),
    samplestorage_state varchar(2),
    samplestorage_country varchar(100),
    hr_status varchar(100),
    reg_contract varchar(100),
    preferred_name varchar(100),
    business_unit_cd varchar(10),
    business_unit_name varchar(100),
    veeva_user_id varchar(100),
    mngr_employee_id varchar(100),
    birth_month_day varchar(5),
    calculated_rep_type varchar(20),
    job_code varchar(10),
    oracle_string varchar(50),
    global_employee_id varchar(35),
    supervisor_global_employee_id varchar(35),
    separation_date date,
    separation_reason varchar(100)
);


CREATE TABLE sandbox.scd_sales_geography
(
    scd_status varchar(10) DEFAULT 'Current',
    scd_effective_date date DEFAULT trunc("sysdate"()),
    scd_expiration_date date DEFAULT '2099-12-31'::date,
    sales_force_id varchar(4),
    geography_number varchar(15),
    geography_name varchar(100),
    geography_desc varchar(100),
    geography_type varchar(15),
    employee_type varchar(10),
    sales_team varchar(100),
    parent_geography_number varchar(15),
    fleet_eligible_flag varchar(1)
);


CREATE TABLE sandbox.onc_osm_targets
(
    tvcmid int,
    target_value varchar(50)
);


CREATE TABLE sandbox.TJR_DRM45
(
    AUDIT_CODE varchar(10),
    CLIENT_GROUP_DESCRIPTION varchar(100),
    CLIENT_NBR varchar(3),
    FILE_CODE varchar(2),
    PRODUCT_GROUP_NBR varchar(8),
    PRODUCT_GROUP_NAME varchar(100),
    PRODUCT_CODE varchar(8),
    PACK_CODE varchar(3),
    PROD_DESC varchar(255),
    WHOLESALE_PRICE varchar(50),
    MFR_DESC varchar(100),
    MFR_CODE varchar(5),
    SPEC_REPACK_IND varchar(5),
    USC_CODE varchar(10)
);


CREATE TABLE sandbox.ingestion_databurst_updt
(
    table_name varchar(128)
);


CREATE TABLE sandbox.grants_teva_ingestion
(
    grant_id int,
    grantor_id int,
    grantor varchar(128),
    privileges_description varchar(8192),
    object_schema varchar(128),
    object_name varchar(128),
    object_id int,
    object_type varchar(8192),
    grantee_id int,
    grantee varchar(128)
);


CREATE TABLE sandbox.mb_customer
(
    customer_id varchar(25),
    tvcmid int,
    ims_id varchar(10),
    ims_outlet_code varchar(10),
    ims_facility_number varchar(11),
    federation_id varchar(200),
    customer_type varchar(15),
    prescriber_type varchar(25),
    network_name varchar(100),
    account_name varchar(100),
    physician_first_name varchar(50),
    physician_last_name varchar(50),
    credential varchar(100),
    subcat_group varchar(100),
    subcat_code varchar(2),
    pdrp_flag varchar(1),
    pri_specialty_code varchar(10),
    pri_specialty_desc varchar(100),
    sec_specialty_code varchar(10),
    sec_specialty_desc varchar(100),
    cm_status_flag varchar(15),
    gpo varchar(100),
    dnp_flag varchar(1),
    product_1_dnc_flag varchar(1),
    product_2_dnc_flag varchar(1),
    a_specialty_group varchar(10),
    b_specialty_group varchar(10),
    c_specialty_group varchar(10),
    formulary_control varchar(20)
);


CREATE TABLE sandbox.mb_ic_demo_tn
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.mb_ic_rx_tn
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.mb_ic_rx_tr
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.mb_ic_demo_tr
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.concur_hcp_curr
(
    cust_id int,
    organization_name varchar(1),
    contact_type varchar(3),
    first_name varchar(80),
    middle_name varchar(80),
    last_name varchar(80),
    suffix varchar(10),
    npi varchar(100),
    address_line_1 varchar(160),
    address_line_2 varchar(160),
    city varchar(80),
    state varchar(2),
    zipcode varchar(5),
    sln varchar(25),
    sln_state varchar(2),
    dea varchar(18),
    affiliation varchar(1),
    credential varchar(10),
    healthcare_professional_status_code varchar(10),
    create_date date
);


CREATE TABLE sandbox.concur_hcp_delta
(
    cust_id int,
    organization_name varchar(1),
    contact_type varchar(3),
    first_name varchar(80),
    middle_name varchar(80),
    last_name varchar(80),
    suffix varchar(10),
    npi varchar(100),
    address_line_1 varchar(160),
    address_line_2 varchar(160),
    city varchar(80),
    state varchar(2),
    zipcode varchar(5),
    sln varchar(25),
    sln_state varchar(2),
    dea varchar(18),
    affiliation varchar(1),
    credential varchar(10),
    healthcare_professional_status_code varchar(10),
    create_date date
);


CREATE TABLE sandbox.prescriber_rx_ics_splitweek_08252020
(
    ims_id varchar(10),
    payer_plan_number varchar(10),
    ims_client_number varchar(5),
    report_frequency varchar(20),
    ims_product_group varchar(10),
    basket_id int,
    data_date date,
    date date,
    sales_category varchar(2),
    tvcmid int,
    prescriber_first_name varchar(50),
    prescriber_last_name varchar(50),
    basket_name varchar(300),
    basket_type varchar(100),
    rollup_week date,
    rollup_month date,
    nrx_count numeric(18,3),
    trx_count numeric(18,3),
    nrx_quantity numeric(18,3),
    trx_quantity numeric(18,3),
    unnormalized_nrx_count numeric(18,3),
    unnormalized_trx_count numeric(18,3),
    market_name varchar(75),
    payer_name varchar(100),
    plan_name varchar(100),
    pbm_name varchar(100),
    model varchar(100),
    payment_method varchar(250),
    ims_specialty varchar(10),
    ims_rx_type varchar(1),
    ims_supplemental_data varchar(20),
    ims_zip_other varchar(10),
    ims_report_number_cnt varchar(5),
    cnt_file_id int,
    cnt_record_id int,
    ims_report_number_qty varchar(5),
    qty_file_id int,
    qty_record_id int,
    rollup_flag char(1),
    indication varchar(20),
    pbm_parent_name varchar(100)
);


CREATE TABLE sandbox.idl_just_best_address
(
    cust_id int,
    organization_name varchar(1),
    contact_type varchar(3),
    first_name varchar(80),
    middle_name varchar(80),
    last_name varchar(80),
    suffix varchar(10),
    npi varchar(100),
    address_line_1 varchar(160),
    address_line_2 varchar(160),
    city varchar(80),
    state varchar(2),
    zipcode varchar(5),
    sln varchar(25),
    sln_state varchar(2),
    dea varchar(18),
    affiliation varchar(1),
    credential varchar(10),
    healthcare_professional_status_code varchar(10),
    create_date date
);


CREATE TABLE sandbox."SYNEOS TARGET FILE"
(
    ims_id int,
    tvcmid int,
    basket_id int,
    basket_name varchar(50),
    territory_number varchar(50),
    sales_force_id varchar(50),
    flag_type varchar(50),
    flag_value varchar(50),
    flag_effective_start_date timestamp,
    flag_effective_end_date timestamp
);


CREATE TEMPORARY TABLE sandbox.tmp_demo_rank1
(
    veeva_account_id varchar(32),
    territory_number varchar(8),
    demo_rank int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_demo_rank2
(
    veeva_account_id varchar(32),
    territory_number varchar(8),
    demo_rank int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_lat_lon_sfa
(
    address_id int,
    tvcmid int,
    address_latitude varchar(20),
    address_longitude varchar(20),
    veeva_address_id varchar(20),
    rnk int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TABLE sandbox.ic_rx_jan2021
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_jan2021
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.mb_to_weekly_account_summary
(
    sales_force_id varchar(5),
    nation_id varchar(10),
    nation varchar(10),
    area_id varchar(10),
    area varchar(100),
    region_id varchar(10),
    region varchar(100),
    territory_id varchar(10),
    territory varchar(100),
    rep_name varchar(100),
    user_id varchar(255),
    time_period varchar(10),
    period_type varchar(10),
    period varchar(11),
    market_id int,
    market_name varchar(300),
    brand_id int,
    brand_name varchar(300),
    teva_product_flag varchar(1),
    customer_id varchar(25),
    tvcmid int,
    network_name varchar(100),
    account_name varchar(100),
    channel varchar(50),
    address varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    formulary_control varchar(20),
    gpo varchar(100),
    target varchar(100),
    new_account varchar(1),
    market_volume_indicator int,
    product_vol_dollars numeric(21,2),
    product_vol_mg int,
    product_vol_mcg int,
    market_vol_dollars numeric(21,2),
    market_vol_mg int,
    market_vol_mcg int,
    prev_prod_vol_dollars numeric(21,2),
    prev_prod_vol_mg int,
    prev_prod_vol_mcg int,
    prev_market_vol_dollars numeric(21,2),
    prev_market_vol_mg int,
    prev_market_vol_mcg int
);


CREATE TABLE sandbox.ic_rx_feb2021
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_feb2021
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.ic_rx_apr2021
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_apr2021
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.payer_demo
(
    payer_id int,
    payer_name varchar(80)
);


CREATE TABLE sandbox.ftf_formularies
(
    health_plan_id varchar(6),
    drug_id varchar(6),
    tier_code varchar(2),
    restrictions varchar(20),
    reason_code varchar(100),
    reason_code_description varchar(100),
    file_id int,
    record_id int
);


CREATE TABLE sandbox.ftf_health_plans
(
    formularyf_id varchar(6),
    provider_id varchar(6),
    provider varchar(250),
    health_plan_id varchar(6),
    health_plan varchar(100),
    parent_id varchar(6),
    parent varchar(250),
    national_lives_count int,
    plan_type_name varchar(250),
    preferred_brand_tier varchar(64),
    file_id int,
    record_id int
);


CREATE TABLE sandbox.ftf_pbms
(
    health_plan_id varchar(6),
    pbm_id varchar(6),
    pbm varchar(250),
    pbm_function_id varchar(6),
    pbm_function varchar(250),
    file_id int,
    record_id int
);


CREATE TABLE sandbox.ims_pbm_xref
(
    pbm_name varchar(100),
    payer_plan_num varchar(10),
    xref_to_payer_plan_num varchar(10),
    ipd_id varchar(10),
    ipd_type varchar(10),
    plan_name varchar(100),
    pbm_num varchar(6),
    ims_processor_num varchar(10),
    file_id int,
    record_id int
);


CREATE TABLE sandbox.ftf_ims_bridge
(
    payer_name varchar(200),
    code varchar(50),
    name varchar(250),
    state varchar(2),
    comments varchar(250),
    plan_id varchar(100),
    plan_name varchar(250),
    provider_name varchar(250),
    plan_type_name varchar(100),
    file_id int,
    record_id int
);


CREATE TABLE sandbox.raw_ftf_restrictions_2
(
    health_plan_id varchar(6),
    drug_id varchar(6),
    restriction_code varchar(7),
    restriction_detail_id varchar(6),
    restriction_detail_text varchar(250),
    restriction_addtnl_information_1 varchar(4000),
    restriction_addtnl_information_2 varchar(4000),
    step_count varchar(50),
    pa_form varchar(4000),
    indication varchar(255),
    grouped_restriction_level varchar(255)
);


CREATE TABLE sandbox.raw_ftf_restrictions
(
    health_plan_id varchar(6),
    drug_id varchar(6),
    restriction_code varchar(7),
    restriction_detail_id varchar(6),
    restriction_detail_text varchar(500),
    restriction_addtnl_information_1 varchar(4000),
    restriction_addtnl_information_2 varchar(4000),
    step_count varchar(50),
    pa_form varchar(4000),
    indication varchar(255),
    grouped_restriction_level varchar(255)
);


CREATE TABLE sandbox.raw_ftf_health_plan_geography
(
    health_plan_id varchar(6),
    county_fips_id int,
    county_id int,
    county_name varchar(50),
    state_id int,
    state_name varchar(10),
    county_lives numeric(14,2)
);


CREATE TABLE sandbox.raw_access_master_bridge
(
    ftf_health_plan_fid varchar(64),
    ftf_health_plan_name varchar(200),
    ajovy_coverage_category varchar(100),
    aimovid_coverage_category varchar(100),
    emgality_coverage_category varchar(100),
    ftf_provider_fid varchar(64),
    ftf_provider_name varchar(200),
    ftf_parent_name varchar(200),
    pay_type_index varchar(64),
    pay_type varchar(64),
    ftf_health_plan_type varchar(64),
    key_controlling_plan_formulary varchar(100),
    key_controlling_account varchar(100),
    key_pbm varchar(100),
    iqvia_payer_name varchar(100),
    iqvia_pbm varchar(100),
    ftf_formulary_management_pbm varchar(100),
    ftf_formulary_influencer_pbm varchar(100),
    ftf_claims_processing_pbm varchar(100),
    pref_brand_tier varchar(64),
    ftf_match_iqvia int,
    lives_m1 int,
    lives_m2 int,
    lives_m3 int,
    lives_m4 int,
    lives_m5 int,
    lives_m6 int,
    lives_m7 int,
    lives_m8 int,
    lives_m9 int,
    lives_m10 int,
    lives_m11 int,
    lives_m12 int,
    lives_m13 int,
    lives_m14 int,
    lives_m15 int,
    lives_m16 int,
    lives_m17 int
);


CREATE TABLE sandbox.access_monitor_s121
(
    client_id varchar(4),
    client_physician_id varchar(25),
    me_number varchar(11),
    npi varchar(11),
    valid_menum_flag numeric(5,2),
    valid_npi_flag numeric(5,2),
    am_no_see_rating numeric(5,2),
    teams_no_see_rating varchar(25),
    annual_call_freq_perc_25 numeric(5,2),
    annual_call_freq_perc_50 numeric(5,2),
    annual_call_freq_perc_75 numeric(5,2),
    teams_call_freq varchar(25),
    industry_attainment numeric(5,2),
    teams_attainment varchar(25),
    attn_perc_25 numeric(5,2),
    attn_perc_50 numeric(5,2),
    attn_perc_75 numeric(5,2),
    teams_attn_perc varchar(25),
    am_specialty_grouping varchar(50),
    teams_spec varchar(25),
    am_zip varchar(15),
    teams_zip varchar(25),
    reach_type varchar(25),
    annual_f2f_call_freq_perc_25 numeric(5,2),
    annual_f2f_call_freq_perc_50 numeric(5,2),
    annual_f2f_call_freq_perc_75 numeric(5,2),
    teams_call_freq_f2f varchar(25),
    annual_remote_call_freq_perc_25 numeric(5,2),
    annual_remote_call_freq_perc_50 numeric(5,2),
    annual_remote_call_freq_perc_75 numeric(5,2),
    teams_call_freq_remote varchar(25)
);


CREATE TABLE sandbox.ic_rx_may2021
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_may2021
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.PGKMediCal
(
    "<NullColumn 0>" varchar(50),
    "<NullColumn 1>" varchar(53),
    "<NullColumn 2>" varchar(50),
    "<NullColumn 3>" varchar(50),
    "<NullColumn 4>" varchar(50),
    "<NullColumn 5>" varchar(50),
    "<NullColumn 6>" varchar(50),
    "<NullColumn 7>" varchar(66),
    "<NullColumn 8>" varchar(50),
    "<NullColumn 9>" numeric(28,10),
    "<NullColumn 10>" numeric(28,10),
    "<NullColumn 11>" numeric(28,10),
    "<NullColumn 12>" numeric(28,10)
);


CREATE TABLE sandbox.PSS_ARX_HCP_LIST
(
    "Prescribing Physician FN" varchar(50),
    "Prescribing Physician LN" varchar(50),
    "Prescribing Physician NPI" int
);


CREATE TABLE sandbox.ACM_BLANK_NPI_ME
(
    IMSID varchar(50)
);


CREATE TABLE sandbox.activity_line_item_level_v2
(
    activityid varchar(600),
    level varchar(100)
);


CREATE TABLE sandbox.datamart_activity_hub_v2
(
    activity_id varchar(64),
    federation_id varchar(200),
    contact varchar(200),
    source_name varchar(100),
    "datetime" timestamp,
    trackback_id varchar(200),
    previous_activity varchar(64),
    level_name varchar(64),
    activity_role_name varchar(100),
    type_name varchar(100),
    native_type varchar(200),
    details varchar(200),
    line_item_id varchar(64),
    brand_name varchar(200),
    activity varchar(200),
    line_item_datetime timestamp,
    line_item_previous_line_item varchar(200),
    line_item_trackback_id varchar(200),
    line_item_details varchar(200),
    line_item_type_name varchar(100),
    line_item_native_type varchar(200),
    basket_id varchar(64),
    web_url varchar(5000)
);


CREATE TABLE sandbox.raw_ftf_formularies_v2
(
    health_plan_id varchar(6),
    drug_id varchar(6),
    tier_code varchar(2),
    restrictions varchar(20),
    reason_code varchar(100),
    reason_code_description varchar(100),
    pharmacy_status varchar(20)
);


CREATE TABLE sandbox.raw_ftf_health_plans_v2
(
    formularyf_id varchar(6),
    provider_id varchar(6),
    provider varchar(250),
    health_plan_id varchar(6),
    health_plan varchar(100),
    parent_id varchar(6),
    parent varchar(250),
    national_lives_count int,
    plan_type_name varchar(250),
    preferred_brand_tier varchar(64)
);


CREATE TABLE sandbox.raw_ftf_health_plan_geography_v2
(
    health_plan_id varchar(6),
    county_fips_id int,
    county_id int,
    county_name varchar(50),
    state_id int,
    state_name varchar(10),
    county_lives numeric(14,2)
);


CREATE TABLE sandbox.raw_ftf_pbms_v2
(
    health_plan_id varchar(6),
    pbm_id varchar(6),
    pbm varchar(250),
    pbm_function_id varchar(6),
    pbm_function varchar(250)
);


CREATE TABLE sandbox.raw_iqvia_pbm_v2
(
    pbm_name varchar(100),
    payer_plan_id varchar(10),
    xref_to_payer_plan_id varchar(10),
    ipd_id varchar(10),
    ipd_type varchar(10),
    plan_name varchar(100),
    pbm_id varchar(10),
    ims_processor_number varchar(10)
);


CREATE TABLE sandbox.raw_teva_ims_bridge_v2
(
    payer_name varchar(50),
    code varchar(10),
    name varchar(50),
    state varchar(5),
    comments varchar(50),
    plan_id varchar(10),
    plan_name varchar(100),
    provider_name varchar(100),
    plan_type_name varchar(20)
);


CREATE TABLE sandbox.hcp_target_list_csd_1145
(
    IMS_ID varchar(20),
    NPI varchar(20),
    First_Name varchar(100),
    Last_Name varchar(100),
    Address_1 varchar(1000),
    Address_2 varchar(1000),
    City varchar(1000),
    State varchar(10),
    Zip varchar(10),
    Specialty_Group varchar(100),
    Target_Valuation_Decile varchar(100),
    Bright_Spots_Segment_2021 varchar(100),
    DMD_SEQ varchar(100),
    DMD_ID varchar(100),
    DMD_EMAIL varchar(100),
    EXPIRATION_DATE date,
    SOURCE varchar(500),
    FEDID varchar(500),
    Marketing_Cloud_ID varchar(500),
    Encrypted_Federation_ID varchar(500),
    Encrypted_Product_ID varchar(500),
    primary_specialty_code varchar(500)
);


CREATE TABLE sandbox.austedo_iva
(
    call_id varchar(20),
    sales_force_id varchar(2),
    territory_number varchar(8),
    veeva_account_id varchar(20),
    call_date date,
    week_end_date date,
    customer_type varchar(50),
    call_type varchar(50),
    attendees int,
    attendee_type varchar(50),
    how_executed varchar(40),
    presentation_id varchar(100),
    key_message varchar(80),
    track_element_id varchar(100),
    track_element_desc varchar(255),
    track_element_type varchar(100),
    usage_duration numeric(15,0),
    usage_start_time timestamptz
);


CREATE TEMPORARY TABLE sandbox.mb_tmp_call_hist_c
(
    id varchar(18),
    isdeleted varchar(5),
    parentid varchar(18),
    createdbyid varchar(18),
    createddate timestamptz,
    field varchar(255),
    oldvalue varchar(255),
    newvalue varchar(255),
    file_id int,
    record_id int,
    row_num int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TABLE sandbox.hdsa_coe_zs_0928
(
    IMS_ID varchar(50),
    "tvcmid Teva list" int,
    "npi Teva list" varchar(50),
    "Last Name Teva list" varchar(50),
    "First Name Teva list" varchar(50),
    "Middle Name Teva list" varchar(50)
);


CREATE TABLE sandbox.ic_rx_parallel
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_parallel
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.sh_sol_enrollment
(
    basket_name varchar(20),
    referral_date date,
    prescribing_physician_npi varchar(10),
    first_ship_date date,
    tvcmid int
);


CREATE TABLE sandbox.relay_health_coc
(
    DRUG_TRADE_NAME varchar(500),
    NDC varchar(500),
    PAID_OR_REVERSED varchar(500),
    STATE varchar(500),
    QUANTITY numeric(19,3),
    FILL_NUMBER int,
    FILL_TYPE varchar(500),
    PAS_SUBMITTED int,
    DATE_OF_SERVICE date,
    PROCESSED_DATE date,
    PATIENT_PAY_DOLLAR numeric(19,3),
    PHARMACY_PRODUCT_DOLLAR numeric(19,3),
    ADMIN_FEES_DOLLAR numeric(19,3),
    MANUFACTURER_DOLLAR_AMOUNT numeric(19,3),
    TRANSACTION_ID varchar(500)
);


CREATE TABLE sandbox.product_master_psd
(
    ndc_code varchar(20),
    ndc_name varchar(600),
    ndc_code_coc varchar(50),
    ndc_name_coc varchar(50)
);


CREATE TABLE sandbox.coverage_details_demographics_overview
(
    Plan_Name varchar(500),
    Display_Plan_ID varchar(500),
    Payer varchar(500),
    Plan_Type varchar(500),
    Channel varchar(500),
    Pharmacy_Enrollment varchar(500),
    Product varchar(500),
    Tier varchar(500),
    Pharmacy_Restrictions varchar(500),
    Pharmacy_Coverage varchar(500),
    Copay varchar(500),
    Austedo_Publisher varchar(500)
);


CREATE TABLE sandbox.coverage_details_market_coverage
(
    Plan_Name varchar(500),
    Display_Plan_ID varchar(500),
    Pharmacy_Enrollment varchar(500),
    Plan_Type varchar(500),
    Product varchar(500),
    Tier varchar(500),
    Pharmacy_Restrictions varchar(500),
    Pharmacy_Coverage varchar(500),
    Copay varchar(500),
    Austedo_Publisher varchar(500)
);


CREATE TABLE sandbox.email_bounces
(
    ClientID varchar(500),
    SendID varchar(500),
    SubscriberKey varchar(500),
    EmailAddress varchar(500),
    EmailName varchar(500),
    SubscriberID varchar(500),
    ListID varchar(500),
    EventDate timestamp,
    EventType varchar(500),
    BounceCategory varchar(500),
    SMTPCode varchar(500),
    BounceReason varchar(500),
    BatchID varchar(500),
    TriggeredSendExternalKey varchar(500)
);


CREATE TABLE sandbox.email_hcp_bounces
(
    ClientID varchar(500),
    SendID varchar(500),
    SubscriberKey varchar(500),
    EmailAddress varchar(500),
    EmailName varchar(500),
    SubscriberID varchar(500),
    ListID varchar(500),
    EventDate timestamp,
    EventType varchar(500),
    BounceCategory varchar(500),
    SMTPCode varchar(500),
    BounceReason varchar(5000),
    BatchID varchar(500),
    TriggeredSendExternalKey varchar(500)
);


CREATE TABLE sandbox.email_hcp_not_sent
(
    ClientID varchar(500),
    SendID varchar(500),
    SubscriberKey varchar(500),
    EmailAddress varchar(500),
    EmailName varchar(500),
    SubscriberID varchar(500),
    ListID varchar(500),
    EventDate timestamp,
    EventType varchar(500),
    BatchID varchar(500),
    TriggeredSendExternalKey varchar(500),
    Reason varchar(5000)
);


CREATE TABLE sandbox.email_not_sent
(
    ClientID varchar(500),
    SendID varchar(500),
    SubscriberKey varchar(500),
    EmailAddress varchar(500),
    EmailName varchar(500),
    SubscriberID varchar(500),
    ListID varchar(500),
    EventDate timestamp,
    EventType varchar(500),
    BatchID varchar(500),
    TriggeredSendExternalKey varchar(500),
    Reason varchar(5000)
);


CREATE TABLE sandbox.email_hcp_open
(
    ClientID varchar(500),
    SendID varchar(500),
    SubscriberKey varchar(500),
    EmailAddress varchar(500),
    EmailName varchar(500),
    SubscriberID varchar(500),
    ListID varchar(500),
    EventDate timestamp,
    EventType varchar(500),
    BatchID varchar(500),
    TriggeredSendExternalKey varchar(500)
);


CREATE TABLE sandbox.email_open
(
    ClientID varchar(500),
    SendID varchar(500),
    SubscriberKey varchar(500),
    EmailAddress varchar(500),
    EmailName varchar(500),
    SubscriberID varchar(500),
    ListID varchar(500),
    EventDate timestamp,
    EventType varchar(500),
    BatchID varchar(500),
    TriggeredSendExternalKey varchar(500)
);


CREATE TABLE sandbox.email_hcp_send_jobs
(
    ClientID varchar(500),
    SendID varchar(500),
    FromName varchar(500),
    FromEmail varchar(500),
    SchedTime timestamp,
    SentTime timestamp,
    Subject varchar(5000),
    EmailName varchar(5000),
    TriggeredSendExternalKey varchar(500),
    SendDefinitionExternalKey varchar(500),
    JobStatus varchar(500),
    PreviewURL varchar(5000),
    IsMultipart varchar(500),
    Additional varchar(500)
);


CREATE TABLE sandbox.email_send_jobs
(
    ClientID varchar(500),
    SendID varchar(500),
    FromName varchar(500),
    FromEmail varchar(500),
    SchedTime timestamp,
    SentTime timestamp,
    Subject varchar(5000),
    EmailName varchar(5000),
    TriggeredSendExternalKey varchar(500),
    SendDefinitionExternalKey varchar(500),
    JobStatus varchar(500),
    PreviewURL varchar(5000),
    IsMultipart varchar(500),
    Additional varchar(500)
);


CREATE TABLE sandbox.email_hcp_sent
(
    ClientID varchar(500),
    SendID varchar(500),
    SubscriberKey varchar(500),
    EmailAddress varchar(500),
    SubscriberID varchar(500),
    EmailName varchar(500),
    ListID varchar(500),
    EventDate timestamp,
    EventType varchar(500),
    BatchID varchar(500),
    TriggeredSendExternalKey varchar(500)
);


CREATE TABLE sandbox.email_sent
(
    ClientID varchar(500),
    SendID varchar(500),
    EmailName varchar(500),
    SubscriberKey varchar(500),
    EmailAddress varchar(500),
    SubscriberID varchar(500),
    ListID varchar(500),
    EventDate timestamp,
    EventType varchar(500),
    BatchID varchar(500),
    TriggeredSendExternalKey varchar(500)
);


CREATE TABLE sandbox.email_clicks
(
    ClientID varchar(500),
    SendID varchar(500),
    SubscriberKey varchar(500),
    EmailAddress varchar(500),
    EmailName varchar(5000),
    SubscriberID varchar(500),
    ListID varchar(500),
    EventDate timestamp,
    EventType varchar(500),
    SendURLID varchar(500),
    URLID varchar(500),
    URL varchar(5000),
    Alias varchar(500),
    BatchID varchar(500),
    TriggeredSendExternalKey varchar(500)
);


CREATE TABLE sandbox.sob
(
    MONTHID varchar(50),
    AGE varchar(50),
    GENDER varchar(50),
    PAYTYPE varchar(50),
    SPECIALTY varchar(50),
    CHANNEL varchar(50),
    INDICATION varchar(50),
    SOB varchar(50),
    ARISTADA_INITIO_FLAG varchar(50),
    PRIOR_PRODUCT varchar(50),
    INDEX_PRODUCT varchar(50),
    PATIENT_COUNT numeric(19,3)
);


CREATE TABLE sandbox.relay_denial_conversion_metrics_psd_nov
(
    source_name varchar(23),
    ndc_code varchar(500),
    ndc_name varchar(600),
    claim_status varchar(500),
    month_date varchar(106),
    mnth_dt date,
    Relay_Denial_Conversion_Paid int,
    Relay_Spend_Denial_Conversion_Paid numeric(21,3),
    Relay_Denial_Conversion_Units int,
    Relay_Denial_Conversion_Dollars numeric(19,3)
);


CREATE TABLE sandbox.humira_patient_companion
(
    pat_id int,
    pat_gender_cd varchar(1),
    pat_age int,
    pat_zip_3 varchar(3),
    cum_meds_brdn numeric(20,4),
    trx_cnt int,
    nrx_cnt int,
    mail_trx_cnt int,
    mail_nrx_cnt int,
    ltc_trx_cnt int,
    ltc_nrx_cnt int,
    retail_trx_cnt int,
    retail_nrx_cnt int,
    cash_mop_trx int,
    medicare_d_mop_trx int,
    medicaid_mgd_mop_trx int,
    medicaid_ffs_mop_trx int,
    comm_mop_trx int,
    acute_drug_trx_cnt int,
    chronic_drug_trx_cnt int,
    lifestyle_drug_trx_cnt int,
    uniq_prods_dspnsd_cnt int,
    uniq_usc5s_dspnsd_cnt int,
    mpr_avg numeric(20,4),
    rfll_rate numeric(20,4),
    most_freq_rx_prov_pcp int,
    most_freq_rx_prov_pcp_spcl_nm varchar(35),
    most_freq_rx_prov_othr int,
    most_freq_rx_prov_othr_spcl_nm varchar(35),
    most_rcnt_rx_prov_pcp int,
    most_rcnt_rx_prov_pcp_spcl_nm varchar(35),
    most_rcnt_rx_prov_othr int,
    most_rcnt_rx_prov_othr_spcl_nm varchar(35),
    uniq_procd_cnt int,
    tot_adm_procd_cnt int,
    most_freq_rx_payer_nm_ccy varchar(32),
    most_freq_rx_pln_nm_ccy varchar(32),
    most_freq_rx_payer_pln_id_ccy varchar(10),
    most_rcnt_rx_payer_nm_ccy varchar(32),
    most_rcnt_rx_pln_nm_ccy varchar(32),
    most_rcnt_rx_payer_pln_id_ccy varchar(10),
    most_rcnt_rx_payer_nm_pcy varchar(32),
    most_rcnt_rx_pln_nm_pcy varchar(32),
    most_rcnt_rx_payer_pln_id_pcy varchar(10),
    most_freq_rx_payer_nm_pcy varchar(32),
    most_freq_rx_pln_nm_pcy varchar(32),
    most_freq_rx_payer_pln_id_pcy varchar(10),
    most_rcnt_rx_payer_nm_p2cy varchar(32),
    most_rcnt_rx_pln_nm_p2cy varchar(32),
    most_rcnt_rx_payer_pln_id_p2cy varchar(10),
    most_freq_rx_payer_nm_p2cy varchar(32),
    most_freq_rx_pln_nm_p2cy varchar(32),
    most_freq_rx_payer_pln_id_p2cy varchar(10),
    nbr_rx_payers int,
    nbr_rx_plns int,
    spcl_prod_trx_cnt int,
    retail_pharmy_cnt int,
    retail_loyalty_rate numeric(20,4),
    rx_acne_ind int,
    rx_acs_ind int,
    rx_adhd_ind int,
    rx_afib_ind int,
    rx_ait_ind int,
    rx_alz_ind int,
    rx_angi_ind int,
    rx_anor_ind int,
    rx_ansp_ind int,
    rx_anx_ind int,
    rx_asth_ind int,
    rx_bcan_ind int,
    rx_bph_ind int,
    rx_chol_ind int,
    rx_ckde_ind int,
    rx_cntr_ind int,
    rx_cons_ind int,
    rx_copd_ind int,
    rx_croh_ind int,
    rx_de_ind int,
    rx_depr_ind int,
    rx_diab_ind int,
    rx_ed_ind int,
    rx_epil_ind int,
    rx_fibr_ind int,
    rx_flu_ind int,
    rx_gast_ind int,
    rx_ghd_ind int,
    rx_gout_ind int,
    rx_hepb_ind int,
    rx_hepc_ind int,
    rx_herp_ind int,
    rx_hf_ind int,
    rx_hiv_ind int,
    rx_hrt_ind int,
    rx_hyp_ind int,
    rx_hypo_ind int,
    rx_ibs_ind int,
    rx_inco_ind int,
    rx_inft_ind int,
    rx_inso_ind int,
    rx_lrti_ind int,
    rx_lup_ind int,
    rx_md_ind int,
    rx_mgrn_ind int,
    rx_mi_ind int,
    rx_ms_ind int,
    rx_naus_ind int,
    rx_nd_ind int,
    rx_np_ind int,
    rx_oart_ind int,
    rx_ob_ind int,
    rx_obes_ind int,
    rx_om_ind int,
    rx_ost_ind int,
    rx_pai_ind int,
    rx_park_ind int,
    rx_pcan_ind int,
    rx_psor_ind int,
    rx_ra_ind int,
    rx_rls_ind int,
    rx_sc_ind int,
    rx_sssi_ind int,
    rx_strk_ind int,
    rx_test_ind int,
    rx_uc_ind int,
    rx_urti_ind int,
    rx_uti_ind int,
    rx_vacc_ind int,
    rx_vdp_ind int,
    rx_adcn_ind int,
    rx_pain_ind int,
    dx_acne_ind int,
    dx_acs_ind int,
    dx_adhd_ind int,
    dx_afib_ind int,
    dx_ait_ind int,
    dx_alz_ind int,
    dx_angi_ind int,
    dx_anor_ind int,
    dx_ansp_ind int,
    dx_anx_ind int,
    dx_asth_ind int,
    dx_bcan_ind int,
    dx_bph_ind int,
    dx_chol_ind int,
    dx_ckde_ind int,
    dx_cntr_ind int,
    dx_cons_ind int,
    dx_copd_ind int,
    dx_croh_ind int,
    dx_de_ind int,
    dx_depr_ind int,
    dx_diab_ind int,
    dx_ed_ind int,
    dx_epil_ind int,
    dx_fibr_ind int,
    dx_flu_ind int,
    dx_gast_ind int,
    dx_ghd_ind int,
    dx_gout_ind int,
    dx_hepb_ind int,
    dx_hepc_ind int,
    dx_herp_ind int,
    dx_hf_ind int,
    dx_hiv_ind int,
    dx_hrt_ind int,
    dx_hyp_ind int,
    dx_hypo_ind int,
    dx_ibs_ind int,
    dx_inco_ind int,
    dx_inft_ind int,
    dx_inso_ind int,
    dx_lrti_ind int,
    dx_lup_ind int,
    dx_md_ind int,
    dx_mgrn_ind int,
    dx_mi_ind int,
    dx_ms_ind int,
    dx_naus_ind int,
    dx_nd_ind int,
    dx_np_ind int,
    dx_oart_ind int,
    dx_ob_ind int,
    dx_obes_ind int,
    dx_om_ind int,
    dx_ost_ind int,
    dx_pai_ind int,
    dx_park_ind int,
    dx_pcan_ind int,
    dx_psor_ind int,
    dx_ra_ind int,
    dx_rls_ind int,
    dx_sc_ind int,
    dx_sssi_ind int,
    dx_strk_ind int,
    dx_test_ind int,
    dx_uc_ind int,
    dx_urti_ind int,
    dx_uti_ind int,
    dx_vacc_ind int,
    dx_vdp_ind int,
    dx_adcn_ind int,
    rx_dx_acne_ind int,
    rx_dx_acs_ind int,
    rx_dx_adhd_ind int,
    rx_dx_afib_ind int,
    rx_dx_ait_ind int,
    rx_dx_alz_ind int,
    rx_dx_angi_ind int,
    rx_dx_anor_ind int,
    rx_dx_ansp_ind int,
    rx_dx_anx_ind int,
    rx_dx_asth_ind int,
    rx_dx_bcan_ind int,
    rx_dx_bph_ind int,
    rx_dx_chol_ind int,
    rx_dx_ckde_ind int,
    rx_dx_cntr_ind int,
    rx_dx_cons_ind int,
    rx_dx_copd_ind int,
    rx_dx_croh_ind int,
    rx_dx_de_ind int,
    rx_dx_depr_ind int,
    rx_dx_diab_ind int,
    rx_dx_ed_ind int,
    rx_dx_epil_ind int,
    rx_dx_fibr_ind int,
    rx_dx_flu_ind int,
    rx_dx_gast_ind int,
    rx_dx_ghd_ind int,
    rx_dx_gout_ind int,
    rx_dx_hepb_ind int,
    rx_dx_hepc_ind int,
    rx_dx_herp_ind int,
    rx_dx_hf_ind int,
    rx_dx_hiv_ind int,
    rx_dx_hrt_ind int,
    rx_dx_hyp_ind int,
    rx_dx_hypo_ind int,
    rx_dx_ibs_ind int,
    rx_dx_inco_ind int,
    rx_dx_inft_ind int,
    rx_dx_inso_ind int,
    rx_dx_lrti_ind int,
    rx_dx_lup_ind int,
    rx_dx_md_ind int,
    rx_dx_mgrn_ind int,
    rx_dx_mi_ind int,
    rx_dx_ms_ind int,
    rx_dx_naus_ind int,
    rx_dx_nd_ind int,
    rx_dx_np_ind int,
    rx_dx_oart_ind int,
    rx_dx_ob_ind int,
    rx_dx_obes_ind int,
    rx_dx_om_ind int,
    rx_dx_ost_ind int,
    rx_dx_pai_ind int,
    rx_dx_park_ind int,
    rx_dx_pcan_ind int,
    rx_dx_psor_ind int,
    rx_dx_ra_ind int,
    rx_dx_rls_ind int,
    rx_dx_sc_ind int,
    rx_dx_sssi_ind int,
    rx_dx_strk_ind int,
    rx_dx_test_ind int,
    rx_dx_uc_ind int,
    rx_dx_urti_ind int,
    rx_dx_uti_ind int,
    rx_dx_vacc_ind int,
    rx_dx_vdp_ind int,
    rx_dx_adcn_ind int,
    trx_mth int,
    tot_opc_ccy numeric(24,6),
    tot_opc_pcy numeric(24,6),
    tot_opc_p2cy numeric(24,6),
    tot_dx_vst_cnt int,
    jcode_cnt int,
    nbr_dx_payers int,
    nbr_dx_plns int,
    most_freq_dx_payer_nm_ccy varchar(32),
    most_freq_dx_pln_nm_ccy varchar(32),
    most_freq_dx_payer_pln_id_ccy varchar(10),
    most_rcnt_dx_payer_nm_ccy varchar(32),
    most_rcnt_dx_pln_nm_ccy varchar(32),
    most_rcnt_dx_payer_pln_id_ccy varchar(10),
    most_rcnt_dx_payer_nm_pcy varchar(32),
    most_rcnt_dx_pln_nm_pcy varchar(32),
    most_rcnt_dx_payer_pln_id_pcy varchar(10),
    most_freq_dx_payer_nm_pcy varchar(32),
    most_freq_dx_pln_nm_pcy varchar(32),
    most_freq_dx_payer_pln_id_pcy varchar(10),
    most_rcnt_dx_payer_nm_p2cy varchar(32),
    most_rcnt_dx_pln_nm_p2cy varchar(32),
    most_rcnt_dx_payer_pln_id_p2cy varchar(10),
    most_freq_dx_payer_nm_p2cy varchar(32),
    most_freq_dx_pln_nm_p2cy varchar(32),
    most_freq_dx_payer_pln_id_p2cy varchar(10),
    uniq_rx_providers int,
    brand_trx_cnt int,
    brand_trx_share numeric(20,4),
    brand_nrx_cnt int,
    brand_nrx_share numeric(20,4),
    generic_trx_cnt int,
    generic_trx_share numeric(20,4),
    generic_nrx_cnt int,
    generic_nrx_share numeric(20,4),
    pr_ind int,
    professional_claim_cnt int,
    institutional_claim_cnt int,
    uniq_rx_spcl_providers int,
    low_incm_subsidy_pcy_ind int,
    dual_elig_pcy_ind int,
    med_d_pcy_ind int,
    med_d_covrg_gap_dt_reach_pcy timestamp,
    catrphc_covrg_dt_reach_pcy timestamp,
    high_deductbl_pln_pcy_ind int,
    copay_card_pcy_ind int,
    low_incm_subsidy_p2cy_ind int,
    dual_elig_p2cy_ind int,
    med_d_p2cy_ind int,
    med_d_covrg_gap_dt_reach_p2cy timestamp,
    catrphc_covrg_dt_reach_p2cy timestamp,
    high_deductbl_pln_p2cy_ind int,
    copay_card_p2cy_ind int,
    low_incm_subsidy_ccy_ind int,
    dual_elig_ccy_ind int,
    med_d_ccy_ind int,
    med_d_covrg_gap_dt_reach_ccy timestamp,
    catrphc_covrg_dt_reach_ccy timestamp,
    high_deductbl_pln_ccy_ind int,
    copay_card_ccy_ind int,
    well_vst_cnt int,
    most_freq_dx_prov_pcp int,
    most_freq_dx_prov_pcp_spcl_nm varchar(350),
    most_freq_dx_prov_othr int,
    most_freq_dx_prov_othr_spcl_nm varchar(350),
    most_rcnt_dx_prov_pcp int,
    most_rcnt_dx_prov_pcp_spcl_nm varchar(350),
    most_rcnt_dx_prov_othr int,
    most_rcnt_dx_prov_othr_spcl_nm varchar(350),
    uniq_dx_providers int,
    uniq_dx_spcl_providers int,
    rx_nbr_of_conds int,
    dx_nbr_of_conds int,
    rx_dx_nbr_of_conds int,
    trx_lnched_prods int,
    cnt_lnched_prods int,
    avail_lnched_prods int
);


CREATE TABLE sandbox.view5_updtd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    Average_Buy_Down_Covered_Units numeric(39,21),
    Average_Non_Covered_Units numeric(39,21),
    run_date date
);


CREATE TABLE sandbox.view1_psd_updtd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    Demand_units numeric(34,15),
    Covered_Coupon_Units int,
    Non_Covered_Coupon_Units int,
    run_date date
);


CREATE TABLE sandbox.view2_psd_updtd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    EVoucher_Card int,
    CRx_Copay_Covered int,
    Crx_PA_NDC_Block int,
    Denail_Conversion_CofC int,
    run_date date
);


CREATE TABLE sandbox.view3_psd_updtd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    Product_Not_Covered int,
    PA_or_Step int,
    CRx_Other_Units int,
    Percent_Demand numeric(85,34),
    run_date date
);


CREATE TABLE sandbox.view4_1_psd_updtd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    PFS_Covered int,
    AI_Covered int,
    Percent_PFS_Covered numeric(54,18),
    Percent_AI_Covered numeric(54,18),
    run_date date
);


CREATE TABLE sandbox.view4_2_psd_updtd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    PFS_Non_Covered int,
    AI_Non_Covered int,
    Percent_PFS_Non_Covered numeric(54,18),
    Percent_AI_Non_Covered numeric(54,18),
    run_date date
);


CREATE TABLE sandbox.view5_psd_updtd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    Average_Buy_Down_Covered_Units numeric(39,21),
    Average_Non_Covered_Units numeric(39,21),
    run_date date
);


CREATE TABLE sandbox.AHM0126
(
    MasterID int,
    LastName varchar(100),
    FirstName varchar(100),
    MiddleName varchar(25),
    Address varchar(200),
    City varchar(50),
    State varchar(20),
    ST varchar(2),
    Zip varchar(20),
    Email varchar(200),
    Phone varchar(20),
    SpeakerAffiliation varchar(500),
    Profession varchar(10),
    ContractPhase varchar(50)
);


CREATE TABLE sandbox.copay_master_psd
(
    source_name varchar(255),
    ndc_code varchar(20),
    basket_name varchar(300),
    quantity numeric(9,2),
    MEMBER_CASH_EXPENSE numeric(9,2),
    other_coverage_code varchar(10),
    fill_date date,
    month_date varchar(106),
    mnth_dt date,
    reject_code varchar(100),
    benefit_amount numeric(9,2),
    units int,
    run_date date
);


CREATE TABLE sandbox.relay_evoucher_psd
(
    source_name varchar(14),
    ndc_code varchar(500),
    ndc_name varchar(600),
    report_month date,
    month_date varchar(106),
    mnth_dt date,
    claim_status varchar(500),
    evoucher_status_desc varchar(500),
    eVoucher_Amount numeric(19,3),
    units int,
    run_date date
);


CREATE TABLE sandbox.relay_denial_conversion_psd
(
    source_name varchar(23),
    ndc_code varchar(500),
    ndc_name varchar(600),
    date_of_service date,
    month_date varchar(106),
    mnth_dt date,
    claim_status varchar(500),
    denial_voucher_amount numeric(19,3),
    units int,
    run_date date
);


CREATE TABLE sandbox.relay_coc_psd
(
    source_name varchar(9),
    ndc_code varchar(20),
    ndc_name varchar(600),
    date_of_service date,
    month_date varchar(106),
    mnth_dt date,
    claim_status varchar(500),
    pharmacy_product_dollar numeric(19,3),
    units int,
    run_date date
);


CREATE TABLE sandbox.npa_demand_units_psd
(
    ndc_code varchar(500),
    ndc_name varchar(600),
    channel varchar(500),
    month_date varchar(6),
    mnth_dt date,
    EU_TRx numeric(21,3),
    run_date date
);


CREATE TABLE sandbox.copay_metrics_psd
(
    source_name varchar(255),
    ndc_code varchar(20),
    basket_name varchar(300),
    month_date varchar(106),
    mnth_dt date,
    CRx_Covered_Units int,
    CRx_EVoucher_Units int,
    CRx_NonCovered_Units int,
    CRx_DC_Units int,
    CRx_DC_Dollars numeric(20,2),
    CRx_PA_Units int,
    CRx_DC_CoC_Units int,
    CRx_Other_Units int,
    CRx_Covered_Dollars numeric(20,2),
    CRx_NonCovered_Dollars numeric(20,2)
);


CREATE TABLE sandbox.relay_evoucher_metrics_psd
(
    source_name varchar(14),
    ndc_code varchar(500),
    ndc_name varchar(600),
    month_date varchar(106),
    mnth_dt date,
    Relay_EVoucher_Units_Paid int,
    Relay_EVoucher_Dollars_Paid numeric(21,3),
    Relay_EVoucher_Units_Reversed int,
    Relay_EVoucher_Dollars_Reversed numeric(21,3),
    Relay_EVoucher_Units int,
    Relay_EVoucher_Dollars numeric(21,3)
);


CREATE TABLE sandbox.relay_denial_conversion_metrics_psd
(
    source_name varchar(23),
    ndc_code varchar(500),
    ndc_name varchar(600),
    month_date varchar(106),
    mnth_dt date,
    Relay_Denial_Conversion_Units_Paid int,
    Relay_Denial_Conversion_Dollars_Paid numeric(21,3),
    Relay_Denial_Conversion_Units_Reversal int,
    Relay_Denial_Conversion_Dollars_Reversal numeric(21,3),
    Relay_Denial_Conversion_Units int,
    Relay_Denial_Conversion_Dollars numeric(19,3)
);


CREATE TABLE sandbox.relay_coc_metrics_psd
(
    source_name varchar(9),
    ndc_code varchar(20),
    ndc_name varchar(600),
    month_date varchar(106),
    mnth_dt date,
    Relay_CoC_Units_Paid int,
    Relay_CoC_Dollars_Paid numeric(21,3),
    Relay_CoC_Units_Reversed int,
    Relay_CoC_Dollars_Reversed numeric(21,3),
    Relay_CoC_Units int,
    Relay_CoC_Dollars numeric(19,3)
);


CREATE TABLE sandbox.npa_metrics_psd
(
    source_name varchar(22),
    ndc_code varchar(500),
    ndc_name varchar(600),
    month_date varchar(6),
    mnth_dt date,
    EU_TRx numeric(21,3)
);


CREATE TABLE sandbox.base_metrics_psd
(
    ndc_code varchar(500),
    ndc_name varchar(600),
    month_date varchar(106),
    mnth_dt date,
    EU_TRx numeric(21,3),
    CRx_Covered_Units int,
    CRx_EVoucher_Units int,
    CRx_NonCovered_Units int,
    CRx_DC_Units int,
    CRx_DC_Dollars numeric(20,2),
    CRx_PA_Units int,
    CRx_DC_CoC_Units int,
    CRx_Other_Units int,
    CRx_Covered_Dollars numeric(20,2),
    CRx_NonCovered_Dollars numeric(20,2),
    Relay_EVoucher_Units_Paid int,
    Relay_EVoucher_Dollars_Paid numeric(21,3),
    Relay_EVoucher_Units_Reversed int,
    Relay_EVoucher_Dollars_Reversed numeric(21,3),
    Relay_EVoucher_Units int,
    Relay_EVoucher_Dollars numeric(21,3),
    Relay_Denial_Conversion_Units_Paid int,
    Relay_Denial_Conversion_Dollars_Paid numeric(21,3),
    Relay_Denial_Conversion_Units_Reversal int,
    Relay_Denial_Conversion_Dollars_Reversal numeric(21,3),
    Relay_Denial_Conversion_Units int,
    Relay_Denial_Conversion_Dollars numeric(21,3),
    Relay_CoC_Units_Paid int,
    Relay_CoC_Dollars_Paid numeric(21,3),
    Relay_CoC_Units_Reversed int,
    Relay_CoC_Dollars_Reversed numeric(21,3),
    Relay_CoC_Units int,
    Relay_CoC_Dollars numeric(21,3)
);


CREATE TABLE sandbox.view1_psd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    Demand_units numeric(34,15),
    Covered_Coupon_Units int,
    Full_WAC_Buy_Down_Units int,
    run_date date
);


CREATE TABLE sandbox.Austedo_PSFR_Utilization_TN_Rpt20220218
(
    PSRF_ID varchar(50),
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(50),
    PrescriberNPI varchar(50),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_040822
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_042922
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_04292022
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox."Q2_2022_TS Dup Zips"
(
    "zip code" varchar(5)
);


CREATE TABLE sandbox."TS_Q2-2022Call Plan_04282022"
(
    VEEVA_ACCOUNT_ID varchar(50),
    TVCM_ID varchar(50),
    IMS_ID varchar(50),
    FIRST_NAME varchar(50),
    LAST_NAME varchar(50),
    SPECIALTY varchar(50),
    TERRITORY_ID varchar(50),
    ADDRESS_1 varchar(73),
    CITY varchar(50),
    STATE varchar(50),
    ZIP int,
    PRODUCT_NAME varchar(50),
    COMMITTED_P1 int,
    COMMITTED_P2 int,
    COMMITTED_P3 int,
    CALL_PLAN_TARGET varchar(50)
);


CREATE TABLE sandbox.pres_rx_antiPsychMrkt
(
    ims_id varchar(10),
    payer_plan_number varchar(10),
    ims_client_number varchar(5),
    report_frequency varchar(20),
    ims_product_group varchar(10),
    basket_id int,
    data_date date,
    date date,
    sales_category varchar(2),
    tvcmid int,
    prescriber_first_name varchar(50),
    prescriber_last_name varchar(50),
    basket_name varchar(300),
    basket_type varchar(100),
    rollup_week date,
    rollup_month date,
    nrx_count numeric(18,3),
    trx_count numeric(18,3),
    nrx_quantity numeric(18,3),
    trx_quantity numeric(18,3),
    unnormalized_nrx_count numeric(18,3),
    unnormalized_trx_count numeric(18,3),
    market_name varchar(75),
    payer_name varchar(100),
    plan_name varchar(100),
    pbm_name varchar(100),
    model varchar(100),
    payment_method varchar(250),
    ims_specialty varchar(10),
    ims_rx_type varchar(1),
    ims_supplemental_data varchar(20),
    ims_zip_other varchar(10),
    ims_report_number_cnt varchar(5),
    cnt_file_id int,
    cnt_record_id int,
    ims_report_number_qty varchar(5),
    qty_file_id int,
    qty_record_id int,
    rollup_flag char(1),
    indication varchar(20),
    pbm_parent_name varchar(100)
);


CREATE TABLE sandbox."TSQ22022_ Revised 05172022"
(
    VEEVA_ACCOUNT_ID varchar(50),
    TVCM_ID int,
    IMS_ID int,
    FIRST_NAME varchar(50),
    LAST_NAME varchar(50),
    SPECIALTY varchar(50),
    TERRITORY_ID varchar(50),
    ADDRESS_1 varchar(70),
    CITY varchar(50),
    STATE varchar(50),
    ZIP int,
    PRODUCT_NAME varchar(50),
    COMMITTED_P1 int,
    COMMITTED_P2 int,
    COMMITTED_P3 int,
    CALL_PLAN_TARGET varchar(50)
);


CREATE TABLE sandbox.tmp_hcp_universe
(
    customer_id varchar(25),
    sales_force_id varchar(5),
    current_geography_id varchar(10),
    product_id int,
    target_status varchar(1),
    week_ending date,
    week_bucket int
);


CREATE TABLE sandbox.tmp_hcp_dimentions
(
    customer_id varchar(25),
    sales_force_id varchar(5),
    territory_id varchar(10),
    brand_id int,
    target_status varchar(1),
    partner_target_status_flag varchar(1),
    week_ending date,
    week_bucket int,
    brand_name varchar(300),
    market_id int,
    market_name varchar(300),
    decile varchar(100),
    specialty varchar(25)
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt052722
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.tmp_ho_hcp_universe
(
    customer_id varchar(200),
    product_id int,
    target_status varchar(1),
    week_ending date,
    week_bucket int
);


CREATE TABLE sandbox.TH_CALL_ACTVITY_00
(
    sales_force_id varchar(50),
    call_id varchar(50),
    veeva_account_id varchar(50),
    ims_id varchar(20),
    ims_outlet_id varchar(20),
    customer_type varchar(50),
    first_name varchar(52),
    last_name varchar(54),
    call_type varchar(50),
    legacy_call_type varchar(50),
    ceph_id varchar(20),
    dea_num varchar(20),
    rep_id varchar(50),
    rep_first_name varchar(50),
    rep_last_name varchar(50),
    territory_number varchar(50),
    zip_on_call varchar(10),
    call_date timestamp,
    submit_date timestamp,
    attendees int,
    attendee_type varchar(50),
    area_number varchar(20),
    region_number varchar(20),
    tvcmid varchar(20),
    call_recordtype varchar(57),
    call_duration int,
    call_datetime timestamp,
    call_timezone varchar(50),
    how_executed varchar(56),
    remote_meeting_id varchar(20),
    parent_call_id varchar(50),
    is_parent_call varchar(50),
    t21s10_austedo_indication varchar(20),
    Outcomes_from_Visit varchar(79),
    Visit_Trigger varchar(60),
    Visit_Trigger_Date timestamp,
    call_name varchar(50),
    veeva_address_id varchar(50),
    account_name varchar(62),
    address varchar(65),
    city varchar(50),
    state varchar(50),
    zip_code int,
    npi varchar(20)
);


CREATE TABLE sandbox.ddd_md
(
    onc_account_demo_id int,
    alt_seq_num varchar(20),
    outlet_name varchar(100),
    outlet_code varchar(10),
    subcategory_code varchar(5),
    outlet_zip varchar(5),
    ims_client_num varchar(5),
    ims_report_num varchar(5),
    report_frequency varchar(20),
    ims_product_code varchar(10),
    basket_id int,
    basket_name varchar(300),
    data_date date,
    date date,
    rollup_week date,
    rollup_month date,
    comp_month date,
    quantity float,
    dollars float,
    file_id int,
    record_id int,
    sales_force_id varchar(2),
    rollup_445_month date,
    tvcmid int,
    ims_facility_number varchar(11),
    ims_prescriber_number varchar(7),
    facility_tvcmid int,
    prescriber_tvcmid int,
    outlet_tvcmid int,
    normalized_quantity float
);


CREATE TABLE sandbox.ic_rx_may2022
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_may2022
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.Genoa_Roster_Current2
(
    Pharmacy_Status varchar(7),
    Genoa_Site__ float,
    Street_Address_1 varchar(38),
    Street_Address_2 varchar(92),
    City varchar(20),
    State varchar(3),
    ZIP_Code varchar(10),
    Main_Phone varchar(17),
    Fax varchar(15),
    DEA varchar(28),
    DEA_Expiration date,
    NPI varchar(10),
    NCPDP varchar(7),
    State_Issuing_License varchar(3),
    Opening_Date date,
    Location_Notes varchar(1),
    Note_Effective_Date varchar(1),
    Pharmacy_Contact varchar(26)
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_00
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.suggestion_report
(
    territory_number varchar(100),
    ownerid varchar(36),
    account_vod__c varchar(36),
    posted_date_vod__c timestamptz,
    expiration_date_vod__c timestamptz,
    reason_vod__c varchar(2000),
    product varchar(7),
    rule varchar(6),
    activity_execution_type_vod__c varchar(36),
    dismiss1 varchar(18),
    dismiss2 varchar(18),
    dismiss3 varchar(18),
    dismiss4 varchar(18),
    sent_email_vod__c varchar(36),
    days_since_last_call int,
    first_call_date date,
    days_since_suggestion int,
    rep_name varchar(255)
);


CREATE TABLE sandbox.psrf_util_detailed_report
(
    DATA_Source varchar(15),
    Patient_ID varchar(50),
    HCP_NPI varchar(15),
    Product varchar(50),
    PSRF_Date varchar(64),
    HCP_Signature_DATE varchar(64),
    Patient_Authorization_Date varchar(64),
    Script_triaged_to_Phmcy_Date varchar(64),
    Ship_Date varchar(64),
    Therapy_Start_Date varchar(64),
    PAP varchar(5),
    Prescriber_Name varchar(200),
    PrescriberCity varchar(50),
    PrescriberState varchar(25),
    PrescriberZip varchar(10),
    Field_1 varchar(50),
    Field_2 varchar(50),
    Field_3 varchar(50),
    Field_4 varchar(50),
    Field_5 varchar(50)
);


CREATE TABLE sandbox.customer_attributes
(
    customer_id varchar(25),
    tvcmid int,
    sales_force_id varchar(5),
    product_id int,
    attribute_type varchar(50),
    attribute_value varchar(100),
    attribute_effective_start_date date,
    attribute_effective_end_date date
);


CREATE TABLE sandbox.payer_mapping
(
    payer_plan_id varchar(10) NOT NULL,
    pbm_id varchar(6),
    pbm_name varchar(100),
    payer_id varchar(6),
    payer_name varchar(100),
    plan_id varchar(6),
    plan_name varchar(100),
    model_id varchar(10),
    method_of_payment varchar(250),
    CONSTRAINT PK_payer_mapping PRIMARY KEY (payer_plan_id) DISABLED
);


CREATE TABLE sandbox.activity_plan
(
    customer_id varchar(25),
    tvcmid int,
    product_id int,
    sales_force_id varchar(5),
    territory_id varchar(8),
    time_period varchar(10),
    planned_p1_calls int,
    planned_p2_calls int,
    planned_p3_calls int,
    planned_samples int,
    target_status_flag varchar(1)
);


CREATE TABLE sandbox.reporting_rollup_month
(
    rollup_month date NOT NULL,
    sales_month_bucket int,
    activity_month_bucket int,
    CONSTRAINT PK_rollup_month PRIMARY KEY (rollup_month) DISABLED
);


CREATE TABLE sandbox.monthly_prescriber_sales_summary
(
    sales_force_id varchar(5),
    customer_id varchar(25),
    tvcmid int,
    ims_id varchar(10),
    period_type varchar(10),
    period varchar(11),
    month_ending date,
    month_bucket int,
    market_id int,
    brand_id int,
    payer_id varchar(6),
    payer_plan_id varchar(10),
    method_of_payment varchar(250),
    hcp_restriction_flag varchar(1),
    segment varchar(100),
    decile varchar(100),
    hcp_payer_vol_rank int,
    hcp_plan_vol_rank int,
    product_vol_trx_count numeric(21,3),
    prev_prod_vol_trx_count numeric(21,3),
    product_vol_nrx_count numeric(21,3),
    prev_prod_vol_nrx_count numeric(21,3),
    market_vol_trx_count numeric(21,3),
    prev_market_vol_trx_count numeric(21,3),
    market_vol_nrx_count numeric(21,3),
    prev_market_vol_nrx_count numeric(21,3),
    samples numeric(20,2),
    details_p1 numeric(20,2),
    details_p2 numeric(20,2),
    details_p3 numeric(20,2)
);


CREATE TABLE sandbox.Question_Response_07222022
(
    Id varchar(300),
    IsDeleted varchar(50),
    Name varchar(50),
    RecordTypeId varchar(50),
    CreatedDate timestamp,
    CreatedById varchar(50),
    LastModifiedDate timestamp,
    LastModifiedById varchar(50),
    SystemModstamp timestamp,
    MayEdit varchar(50),
    IsLocked varchar(50),
    Survey_Target_vod__c varchar(100),
    Answer_Choice_vod__c varchar(5000),
    Date_vod__c varchar(20),
    Datetime_vod__c varchar(20),
    External_ID_vod__c varchar(50),
    Mobile_ID_vod__c varchar(66),
    Number_vod__c int,
    Order_vod__c int,
    Question_Text_vod__c varchar(1000),
    Required_vod__c varchar(50),
    Response_Hash_vod__c varchar(5000),
    Response_vod__c varchar(5000),
    Score_vod__c int,
    Survey_Question_vod__c varchar(1000),
    Text_vod__c varchar(5000),
    Type_vod__c varchar(100),
    Decimal_vod__c int,
    Confidential_TVA__c varchar(50),
    Condition_vod__c varchar(50),
    Inactive_Condition_vod__c varchar(50),
    Source_ID_vod__c varchar(50)
);


CREATE TABLE sandbox.npa_demand_units
(
    Product varchar(500),
    Channel varchar(500),
    NDC_Details varchar(500),
    EUTRx_May_2018 numeric(19,3),
    EUTRx_Jun_2018 numeric(19,3),
    EUTRx_Jul_2018 numeric(19,3),
    EUTRx_Aug_2018 numeric(19,3),
    EUTRx_Sep_2018 numeric(19,3),
    EUTRx_Oct_2018 numeric(19,3),
    EUTRx_Nov_2018 numeric(19,3),
    EUTRx_Dec_2018 numeric(19,3),
    EUTRx_Jan_2019 numeric(19,3),
    EUTRx_Feb_2019 numeric(19,3),
    EUTRx_Mar_2019 numeric(19,3),
    EUTRx_Apr_2019 numeric(19,3),
    EUTRx_May_2019 numeric(19,3),
    EUTRx_Jun_2019 numeric(19,3),
    EUTRx_Jul_2019 numeric(19,3),
    EUTRx_Aug_2019 numeric(19,3),
    EUTRx_Sep_2019 numeric(19,3),
    EUTRx_Oct_2019 numeric(19,3),
    EUTRx_Nov_2019 numeric(19,3),
    EUTRx_Dec_2019 numeric(19,3),
    EUTRx_Jan_2020 numeric(19,3),
    EUTRx_Feb_2020 numeric(19,3),
    EUTRx_Mar_2020 numeric(19,3),
    EUTRx_Apr_2020 numeric(19,3),
    EUTRx_May_2020 numeric(19,3),
    EUTRx_Jun_2020 numeric(19,3),
    EUTRx_Jul_2020 numeric(19,3),
    EUTRx_Aug_2020 numeric(19,3),
    EUTRx_Sep_2020 numeric(19,3),
    EUTRx_Oct_2020 numeric(19,3),
    EUTRx_Nov_2020 numeric(19,3),
    EUTRx_Dec_2020 numeric(19,3),
    EUTRx_Jan_2021 numeric(19,3),
    EUTRx_Feb_2021 numeric(19,3),
    EUTRx_Mar_2021 numeric(19,3),
    EUTRx_Apr_2021 numeric(19,3),
    EUTRx_May_2021 numeric(19,3),
    EUTRx_Jun_2021 numeric(19,3),
    EUTRx_Jul_2021 numeric(19,3),
    EUTRx_Aug_2021 numeric(19,3),
    EUTRx_Sep_2021 numeric(19,3),
    EUTRx_Oct_2021 numeric(19,3),
    EUTRx_Nov_2021 numeric(19,3),
    EUTRx_Dec_2021 numeric(19,3),
    EUTRx_Jan_2022 numeric(19,3),
    EUTRx_Feb_2022 numeric(19,3),
    EUTRx_Mar_2022 numeric(19,3),
    EUTRx_Apr_2022 numeric(19,3),
    EUTRx_May_2022 numeric(19,3),
    EUTRx_Jun_2022 numeric(19,3)
);


CREATE TABLE sandbox.tp_psrf_for_datamart_v1
(
    sales_force_id varchar(20),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(15),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(50),
    demo_last_name varchar(50),
    demo_city varchar(50),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(32)
);


CREATE TABLE sandbox.tp_psrf_for_datamart_v2
(
    sales_force_id varchar(5),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(8),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(40),
    demo_last_name varchar(40),
    demo_city varchar(40),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(25)
);


CREATE TABLE sandbox.tp_psrf_for_datamart_v3
(
    sales_force_id varchar(5),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(8),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(50),
    demo_last_name varchar(50),
    demo_city varchar(50),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(17)
);


CREATE TABLE sandbox.tn_psrf_for_datamart_v1
(
    sales_force_id varchar(20),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(15),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(50),
    demo_last_name varchar(50),
    demo_city varchar(50),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(32)
);


CREATE TABLE sandbox.tn_psrf_for_datamart_v2
(
    sales_force_id varchar(5),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(8),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(40),
    demo_last_name varchar(40),
    demo_city varchar(40),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(25)
);


CREATE TABLE sandbox.tn_psrf_for_datamart_v3
(
    sales_force_id varchar(5),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(8),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(50),
    demo_last_name varchar(50),
    demo_city varchar(50),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(17)
);


CREATE TABLE sandbox.ts_psrf_for_datamart_v1
(
    sales_force_id varchar(20),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(15),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(50),
    demo_last_name varchar(50),
    demo_city varchar(50),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(32)
);


CREATE TABLE sandbox.ts_psrf_for_datamart_v2
(
    sales_force_id varchar(5),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(8),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(40),
    demo_last_name varchar(40),
    demo_city varchar(40),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(25)
);


CREATE TABLE sandbox.ts_psrf_for_datamart_v3
(
    sales_force_id varchar(5),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(8),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(50),
    demo_last_name varchar(50),
    demo_city varchar(50),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(17)
);


CREATE TABLE sandbox.oncology_sales_deciles
(
    account_demo_id int,
    outlet_name varchar(100),
    outlet_zip varchar(5),
    decile_name varchar(75),
    basket_id int,
    basket_name varchar(300),
    decile_reported_dollars_6_mo int,
    decile_reported_dollars_12_mo int,
    reported_dollars_6_mo float,
    reported_dollars_12_mo float,
    reported_dollars_24_mo float,
    tvcmid int
);


CREATE TABLE sandbox.ic_ms_market_decile_201701
(
    ims_id varchar(10),
    category varchar(100),
    decile_name varchar(50),
    trx_cnt_01_06 int,
    trx_cnt_01_12 int
);


CREATE TABLE sandbox.STG_LAAD_DIAGNOSIS
(
    CLAIM_ID numeric(19,0),
    PATIENT_ID numeric(19,0),
    SERVICE_DATE date,
    DIAGNOSIS_CODE varchar(20),
    RENDERING_PRESCRIBER_ID numeric(19,0),
    REFERRING_PRESCRIBER_ID numeric(19,0)
);


CREATE TABLE sandbox.STG_LAAD_DIAGNOSIS_CODE
(
    DIAGNOSIS_CODE varchar(20),
    DIAGNOSIS_DESCRIPTION varchar(300)
);


CREATE TABLE sandbox.STG_LAAD_PATIENT
(
    PATIENT_ID numeric(19,0),
    PATIENT_BIRTH_YEAR numeric(4,0),
    PATIENT_GENDER varchar(1)
);


CREATE TABLE sandbox.STG_LAAD_PLAN
(
    PLAN_ID varchar(10),
    PAYER_NAME varchar(50),
    PLAN_NAME varchar(50),
    PBM_NAME varchar(50),
    METHOD_OF_PAYMENT varchar(50),
    MODEL_TYPE varchar(50)
);


CREATE TABLE sandbox.STG_LAAD_PRESCRIBER
(
    PRESCRIBER_ID varchar(10),
    FIRST_NAME varchar(100),
    LAST_NAME varchar(100),
    ADDRESS varchar(100),
    CITY varchar(100),
    STATE varchar(2),
    ZIP varchar(5),
    SPECIALTY_CODE varchar(10),
    SPECIALTY_DESC varchar(300),
    ME_NUM varchar(20),
    NPI varchar(20)
);


CREATE TABLE sandbox.STG_LAAD_PROCEDURE
(
    CLAIM_ID numeric(19,0),
    CLAIM_SERVICE_NUMBER numeric(19,0),
    PATIENT_ID numeric(19,0),
    SERVICE_DATE date,
    PROCEDURE_CODE varchar(20),
    RENDERING_PRESCRIBER_ID numeric(19,0),
    REFERRING_PRESCRIBER_ID numeric(19,0)
);


CREATE TABLE sandbox.STG_LAAD_PROCEDURE_CODE
(
    PROCEDURE_CODE varchar(20),
    PROCEDURE_DESCRIPTION varchar(100)
);


CREATE TABLE sandbox.STG_LAAD_PRODUCT
(
    NATL_DRUG_CODE varchar(11),
    BRAND_NAME varchar(100),
    GENERIC_NAME varchar(100),
    BRAND_GENERIC_FLAG varchar(1),
    DRUG_FORM varchar(100),
    DRUG_STRENGTH varchar(100),
    PACKAGE_SIZE numeric(10,2),
    MANUFACTURER varchar(100),
    USC_CODE varchar(5),
    USC_DESCRIPTION varchar(50)
);


CREATE TABLE sandbox.load_bag_territory
(
    territory_number varchar(8),
    bag_name varchar(100)
);


CREATE TABLE sandbox.ic_rx_factor
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    rollup_month date,
    multiplier float,
    approved_trx_count float,
    total_trx_count float
);


CREATE TEMPORARY TABLE sandbox.tmp_file_id_test
(
    file_id int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_ims_data_w_test
(
    sales_force_id varchar(5),
    ims_id varchar(22),
    me_num varchar(10),
    specialty varchar(8),
    specialty_source varchar(8),
    last_name varchar(25),
    first_name varchar(25),
    middle_name varchar(2),
    address varchar(30),
    city varchar(25),
    state varchar(2),
    zip varchar(10),
    data_date date,
    row_num int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_ims_data_m_test
(
    sales_force_id varchar(5),
    ims_id varchar(22),
    me_num varchar(10),
    specialty varchar(8),
    specialty_source varchar(8),
    last_name varchar(25),
    first_name varchar(25),
    middle_name varchar(2),
    address varchar(30),
    city varchar(25),
    state varchar(2),
    zip varchar(10),
    data_date date,
    row_num int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_ims_data_final_test
(
    sales_force_id varchar(5),
    ims_id varchar(22),
    me_num varchar(10),
    specialty varchar(8),
    last_name varchar(25),
    first_name varchar(25),
    middle_name varchar(2),
    address varchar(30),
    city varchar(25),
    state varchar(2),
    zip varchar(10)
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_tn_align_test
(
    veeva_account_id varchar(32),
    ims_id varchar(10),
    veeva_address_id varchar(20),
    address_line1 varchar(100),
    address_line2 varchar(100),
    address_line3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(10),
    phone varchar(1),
    territory_number varchar(8),
    territory_type varchar(10),
    address_source varchar(11),
    sfa_create_date date,
    sfa_align_date date,
    last_call_date date,
    last_call_this_sales_force date,
    rnk int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_tn_calls_test
(
    sales_force_id varchar(5),
    ims_id varchar(10),
    veeva_account_id varchar(32),
    org varchar(255),
    address_line1 varchar(100),
    address_line2 varchar(100),
    address_line3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(10),
    veeva_address_id varchar(20),
    phone varchar(1),
    territory_number varchar(8),
    address_source varchar(11),
    rnk int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_tp_align_test
(
    veeva_account_id varchar(32),
    ims_id varchar(10),
    veeva_address_id varchar(20),
    address_line1 varchar(100),
    address_line2 varchar(100),
    address_line3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(10),
    phone varchar(1),
    territory_number varchar(8),
    territory_type varchar(10),
    address_source varchar(11),
    sfa_create_date date,
    sfa_align_date date,
    last_call_date date,
    last_call_this_sales_force date,
    rnk int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_tp_calls_test
(
    sales_force_id varchar(5),
    ims_id varchar(10),
    veeva_account_id varchar(32),
    org varchar(255),
    address_line1 varchar(100),
    address_line2 varchar(100),
    address_line3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(10),
    veeva_address_id varchar(20),
    phone varchar(1),
    territory_number varchar(8),
    address_source varchar(11),
    rnk int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_tr_align_test
(
    veeva_account_id varchar(32),
    ims_id varchar(10),
    veeva_address_id varchar(20),
    address_line1 varchar(100),
    address_line2 varchar(100),
    address_line3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(10),
    phone varchar(1),
    territory_number varchar(8),
    territory_type varchar(10),
    address_source varchar(11),
    sfa_create_date date,
    sfa_align_date date,
    last_call_date date,
    last_call_this_sales_force date,
    rnk int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_tr_calls_test
(
    sales_force_id varchar(5),
    ims_id varchar(10),
    veeva_account_id varchar(32),
    org varchar(255),
    address_line1 varchar(100),
    address_line2 varchar(100),
    address_line3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(10),
    veeva_address_id varchar(20),
    phone varchar(1),
    territory_number varchar(8),
    address_source varchar(11),
    rnk int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_tw_calls_test
(
    sales_force_id varchar(5),
    ims_id varchar(10),
    veeva_account_id varchar(32),
    org varchar(255),
    address_line1 varchar(100),
    address_line2 varchar(100),
    address_line3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(10),
    veeva_address_id varchar(20),
    phone varchar(1),
    territory_number varchar(8),
    address_source varchar(11),
    rnk int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_territory_test
(
    sales_force_id varchar(20),
    ims_id varchar(10),
    veeva_account_id varchar(20),
    specialty varchar(255),
    first_name varchar(50),
    middle_name varchar(50),
    last_name varchar(50),
    ptr_veeva_address_id varchar(20),
    ptr_address_1 varchar(100),
    ptr_city varchar(50),
    ptr_state varchar(2),
    ptr_zip varchar(5),
    ptr_phone varchar(40),
    ptr_territory_num varchar(15),
    ptr_territory_type varchar(30),
    ptr_address_source varchar(30),
    ptr_mailable varchar(1),
    dea_num varchar(10),
    pdrp_flag varchar(1),
    pdrp_date timestamp,
    np_pa_flag varchar(1),
    no_spend varchar(1),
    ama_no_contact_flag varchar(1),
    email varchar(100),
    degree varchar(10),
    npi varchar(10),
    tvcmid int,
    ptr_address_2 varchar(100),
    ptr_address_3 varchar(100),
    territory_number varchar(8),
    territory_type varchar(6)
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_veeva_id_test
(
    tvcmid int,
    veeva_account_id varchar(100)
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_dup_tvcmid
(
    tvcmid int,
    sales_force_id varchar(2),
    count int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_dup_outlet
(
    tvcmid int,
    outlet_code varchar(10),
    ims_facility_number varchar(11),
    ims_prescriber_number varchar(7),
    sales_force_id varchar(2)
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_ddd_qty
(
    tvcmid int,
    outlet_code varchar(10),
    ims_facility_number varchar(11),
    ims_prescriber_number varchar(7),
    sales_force_id varchar(2),
    quantity float
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_ddd_md_qty
(
    tvcmid int,
    outlet_code varchar(10),
    ims_prescriber_number varchar(7),
    ims_facility_number varchar(11),
    sales_force_id varchar(2),
    quantity float
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_tvcmid_combine
(
    outlet_code varchar(10),
    ims_prescriber_number varchar(7),
    ims_facility_number varchar(11),
    sales_force_id varchar(2),
    tvcmid int,
    quantity float
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_tvcmid_combine_final
(
    outlet_code varchar(10),
    ims_prescriber_number varchar(7),
    ims_facility_number varchar(11),
    sales_force_id varchar(2),
    tvcmid int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_remaining_dup_tvcmid_no_sales
(
    tvcmid int,
    sales_force_id varchar(2)
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_no_sales_data
(
    account_demo_id int,
    outlet_code varchar(10),
    ims_facility_number varchar(11),
    ims_prescriber_number varchar(7),
    category_code varchar(10),
    subcategory_code varchar(2),
    alignment_zip varchar(5),
    outlet_name varchar(100),
    outlet_address varchar(120),
    outlet_city varchar(40),
    outlet_state varchar(2),
    outlet_zip varchar(5),
    facility_name varchar(100),
    facility_address1 varchar(60),
    facility_address2 varchar(60),
    facility_address3 varchar(60),
    facility_address4 varchar(60),
    facility_city varchar(40),
    facility_state varchar(2),
    facility_zip varchar(5),
    prescriber_name varchar(100),
    prescriber_address1 varchar(60),
    prescriber_address2 varchar(60),
    prescriber_address3 varchar(60),
    prescriber_address4 varchar(60),
    prescriber_city varchar(40),
    prescriber_state varchar(2),
    prescriber_zip varchar(5),
    account_status varchar(1),
    tvcmid int,
    sales_force_id varchar(2),
    outlet_tvcmid int,
    facility_tvcmid int,
    prescriber_tvcmid int,
    tvcmid_assignment_rule varchar(25),
    row_num int
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_roster
(
    employee_id varchar(7),
    territory_num varchar(225),
    territory_name varchar(255),
    team varchar(50),
    hire_dt_rnk int,
    sales_force_id varchar(8),
    full_name varchar(152),
    last_name varchar(50),
    first_name varchar(50),
    middle_name varchar(50),
    person_title varchar(15),
    name_suffix varchar(15),
    address_line1 varchar(50),
    address_line2 varchar(50),
    city varchar(50),
    state varchar(2),
    zip varchar(20),
    bus_address_line1 varchar(50),
    bus_address_line2 varchar(50),
    bus_city varchar(50),
    bus_state varchar(2),
    bus_zip varchar(20),
    ship_address_line1 varchar(50),
    ship_address_line2 varchar(50),
    ship_city varchar(50),
    ship_state varchar(2),
    ship_zip varchar(20),
    business_phone varchar(69),
    home_phone varchar(69),
    cell_phone varchar(69),
    fax varchar(69),
    voice_mail_ext varchar(69),
    email varchar(255),
    hire_date date,
    title varchar(50),
    stat_code varchar(2),
    payroll_cost_ctr varchar(30),
    rep_type varchar(3),
    area_trainer varchar(1),
    username varchar(15),
    out_of_territory varchar(1),
    parent_territory_num varchar(26)
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TEMPORARY TABLE sandbox.tmp_roster2
(
    employee_id varchar(7),
    orig_hire_dt date,
    rehire_dt date
) ON COMMIT PRESERVE ROWS NO PROJECTION;


CREATE TABLE sandbox.qc_table_stats
(
    log_date date NOT NULL,
    table_schema varchar(128) NOT NULL,
    table_name varchar(128) NOT NULL,
    row_count int,
    used_bytes int,
    null_tvcmid_count int,
    null_basket_id_count int,
    unique_file_ids int,
    max_file_id int,
    CONSTRAINT C_PRIMARY PRIMARY KEY (log_date, table_schema, table_name) DISABLED
);


CREATE TABLE sandbox.oncology_detail_goals
(
    territory_number varchar(8),
    bendeka_quota int,
    granix_quota int
);


CREATE TABLE sandbox.onc_sales_adjustment_load
(
    adj_code varchar(10),
    adj_time_period varchar(10),
    tvcmid int,
    basket_id int,
    adj_factor numeric(10,2)
);


CREATE TABLE sandbox.customer_flags_nr
(
    hcp_id varchar(50),
    flag_type varchar(50),
    flag_value varchar(50)
);


CREATE TABLE sandbox.tmp_mil_roster
(
    SALES_FORCE_ID varchar(100),
    REP_TYPE varchar(10),
    TERRITORY_NUM varchar(100),
    LAST_NAME varchar(100),
    FIRST_NAME varchar(100),
    SHIP_ADDRESS_LINE1 varchar(100),
    SHIP_ADDRESS_LINE2 varchar(100),
    SHIP_CITY varchar(100),
    SHIP_STATE varchar(2),
    SHIP_ZIP varchar(100),
    PHONE varchar(100),
    EMAIL varchar(255),
    DISTRICT varchar(100),
    REGION varchar(100)
);


CREATE TABLE sandbox.data_feed_metadata_bkp
(
    feed_id int,
    short_name varchar(255),
    subject_area varchar(255),
    source_name varchar(255),
    description varchar(255),
    frequency varchar(255),
    incremental boolean,
    process_cleanse boolean,
    process_intg boolean,
    source_id int
);


CREATE TABLE sandbox.scd_sfa_demographics
(
    scd_status varchar(10) DEFAULT 'Current',
    scd_effective_date date DEFAULT trunc("sysdate"()),
    scd_expiration_date date DEFAULT '2099-12-31'::date,
    veeva_account_id varchar(32),
    sales_force_id varchar(5),
    customer_type varchar(50),
    ims_id varchar(10),
    npi varchar(10),
    ims_outlet_code varchar(12),
    territory_number varchar(8),
    territory_type varchar(10),
    territory_status varchar(30),
    last_name varchar(80),
    first_name varchar(50),
    middle_name varchar(50),
    suffix_name varchar(10),
    credentials varchar(50),
    organization_name varchar(255),
    veeva_address_id varchar(20),
    address_line1 varchar(100),
    address_line2 varchar(100),
    address_line3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(10),
    address_status varchar(20),
    phone varchar(50),
    phone_ext varchar(12),
    fax varchar(50),
    mobile varchar(50),
    email varchar(200),
    prim_specialty varchar(255),
    specialty_code varchar(5),
    sfa_create_date date,
    bp_code varchar(20),
    sfa_align_date date,
    account_demo_id varchar(30),
    pdrp_flag varchar(5),
    designation varchar(255),
    business_type varchar(40),
    area_number varchar(8),
    region_number varchar(8),
    tvcmid int,
    address_id int
);


CREATE TABLE sandbox.ic_copay
(
    ic_data_month date,
    basket_name varchar(300),
    ims_id varchar(10),
    tvcmid int,
    fill_date date,
    txn_id varchar(20),
    rollup_month date,
    month_bucket int,
    days_supply int,
    quantity numeric(9,2),
    join_key varchar(10),
    row_source varchar(100),
    benefit_amount numeric(9,2)
);


CREATE TABLE sandbox.ftf_ims_monthly_market_obm
(
    "PLAN ID" varchar(4),
    "PLAN NAME" varchar(100),
    "PAYER ID" varchar(6),
    "PAYER NAME" varchar(100),
    "MARKET NAME" varchar(300),
    "PRODUCT NAME" varchar(300),
    zip varchar(5),
    DATE varchar(110),
    TRX numeric(36,21),
    NRX numeric(36,21)
);


CREATE TABLE sandbox.tjr_ftf_iqvia_plan_xref
(
    health_plan_id varchar(6),
    health_plan_name varchar(100),
    ajovy_restrictions varchar(250),
    aimovig_restrictions varchar(250),
    emgality_restrictions varchar(250),
    provider_id varchar(6),
    provider_name varchar(250),
    parent_name varchar(250),
    payment_type varchar(250),
    health_plan_type varchar(250),
    masterbridge_key_payer varchar(250),
    iqvia_plan_code varchar(10),
    iqvia_plan_name varchar(100),
    iqvia_payer_name varchar(100),
    masterbridge_payer_name varchar(100),
    formulary_mgmt_pbm varchar(100),
    claims_processing_pbm varchar(100),
    pref_tier int
);


CREATE TABLE sandbox.tjr_model_mop_xref
(
    model varchar(100),
    model_name varchar(100),
    industry_mop varchar(250),
    iqvia_mop varchar(250),
    current_teva_mop varchar(250),
    proposed_teva_mop varchar(250)
);


CREATE TABLE sandbox.tables_to_keep
(
    table_name varchar(100)
);


CREATE TABLE sandbox.mb_ic_rx_tp
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox."MA Missing STATE"
(
    Zip int,
    State varchar(20),
    Territory_1_ID varchar(50),
    Territory_Name varchar(63),
    Area_Name varchar(50),
    Region_Name varchar(20),
    Mirror_Flag varchar(20),
    Territory_2_ID varchar(20)
);


CREATE TABLE sandbox.sent_email_template_id
(
    Sent_Email_vod__c varchar(36),
    Approved_Email_Template_vod__c varchar(36)
);


CREATE TABLE sandbox.veeva_sent_email_07102020
(
    Id varchar(36),
    CreatedDate timestamptz,
    CreatedById varchar(36),
    LastModifiedDate timestamptz,
    LastModifiedById varchar(36),
    OwnerId varchar(36),
    RecordTypeId varchar(36),
    IsDeleted varchar(5),
    SystemModstamp timestamptz,
    Name varchar(160),
    Account_vod__c varchar(36),
    Activity_Tracking_Mode_vod__c varchar(510),
    EM_Attendee_vod__c varchar(36),
    Bcc_vod__c varchar(510),
    Call2_vod__c varchar(36),
    Capture_Datetime_vod__c timestamptz,
    Clicked_vod__c float,
    Content_Type_vod__c varchar(36),
    Detail_Group_vod__c varchar(36),
    Approved_Document_Views_vod__c float,
    Entity_Reference_Id_vod__c varchar(200),
    Event_vod__c varchar(36),
    Event_Attendee_vod__c varchar(36),
    Event_Attendee_Mobile_Id_vod__c varchar(200),
    Event_Mobile_Id_vod__c varchar(200),
    Events_Management_Subtype_vod__c varchar(2600),
    EM_Event_Speaker_vod__c varchar(36),
    EM_Event_Team_Member_vod__c varchar(36),
    Sender_Email_vod__c varchar(160),
    Key_Message_vod__c varchar(36),
    Last_Click_Date_vod__c timestamptz,
    Last_Device_vod__c varchar(510),
    Last_Activity_Date_vod__c timestamptz,
    Last_Open_Date_vod__c timestamptz,
    MC_Capture_Datetime_vod__c timestamptz,
    Medical_Event_vod__c varchar(36),
    Medical_Inquiry_vod__c varchar(36),
    Mobile_ID_vod__c varchar(200),
    Opened_vod__c float,
    Parent_Email_vod__c varchar(36),
    Product_vod__c varchar(36),
    Product_Display_vod__c varchar(2600),
    Receipt_Entity_Type_vod__c varchar(510),
    Receipt_Record_Id_vod__c varchar(200),
    Related_Transaction_ID_vod__c varchar(510),
    Scheduled_Send_Datetime_vod__c timestamptz,
    Email_Sent_Date_vod__c timestamptz,
    Status_vod__c varchar(510),
    Failure_Msg_vod__c varchar(510),
    Suggestion_vod__c varchar(36),
    Territory_vod__c varchar(200),
    Account_Email_vod__c varchar(160),
    Click_Count_vod__c float,
    Open_Count_vod__c float,
    User_vod__c varchar(36),
    Valid_Consent_Exists_vod__c varchar(5),
    VExternal_Id_vod__c varchar(100),
    record_id int,
    file_id int,
    Approved_Email_Template_vod__c varchar(36)
);


CREATE TABLE sandbox.concur_hcp_delta_07212020
(
    cust_id int,
    organization_name varchar(1),
    contact_type varchar(3),
    first_name varchar(80),
    middle_name varchar(80),
    last_name varchar(80),
    suffix varchar(10),
    npi varchar(100),
    address_line_1 varchar(160),
    address_line_2 varchar(160),
    city varchar(80),
    state varchar(2),
    zipcode varchar(5),
    sln varchar(25),
    sln_state varchar(2),
    dea varchar(18),
    affiliation varchar(1),
    credential varchar(10),
    healthcare_professional_status_code varchar(10),
    create_date date
);


CREATE TABLE sandbox.rs_wkly_geo_summ
(
    sales_force_id varchar(5),
    geography_level varchar(10),
    geography_id varchar(100),
    geography varchar(250),
    rep_name varchar(100),
    user_id varchar(255),
    time_period varchar(10),
    period_type varchar(15),
    period varchar(15),
    market_id int,
    market_name varchar(300),
    brand_id int,
    brand_name varchar(300),
    teva_product_flag varchar(1),
    target_status_flag varchar(1),
    method_of_payment varchar(250),
    specialty varchar(15),
    segment varchar(100),
    market_volume_indicator int,
    product_vol_trx_count numeric(21,3),
    product_vol_new_pres_trx_count numeric(21,3),
    market_vol_trx_count numeric(21,3),
    prev_prod_vol_trx_count numeric(21,3),
    prev_market_vol_trx_count numeric(21,3),
    product_vol_nrx_count numeric(21,3),
    product_vol_new_pres_nrx_count numeric(21,3),
    market_vol_nrx_count numeric(21,3),
    prev_prod_vol_nrx_count numeric(21,3),
    prev_market_vol_nrx_count numeric(21,3),
    prescribers_count int,
    new_prescribers_count int
);


CREATE TABLE sandbox."SYNEOS MISSING IMSIDs"
(
    "Digihaler_rx_20210215 (JAN)" int
);


CREATE TABLE sandbox.tmp_teva_transform_lock
(
    transform_lock_id int,
    transform_name varchar(255),
    transform_lock_time timestamp
);


CREATE TABLE sandbox.datamart_activity_hub
(
    activity_id varchar(64),
    federation_id varchar(200),
    contact varchar(200),
    source_name varchar(100),
    "datetime" timestamp,
    trackback_id varchar(200),
    previous_activity varchar(64),
    level_name varchar(64),
    activity_role_name varchar(100),
    type_name varchar(100),
    native_type varchar(200),
    details varchar(200),
    line_item_id varchar(64),
    brand_name varchar(200),
    activity varchar(200),
    line_item_datetime timestamp,
    line_item_previous_line_item varchar(200),
    line_item_trackback_id varchar(200),
    line_item_details varchar(200),
    line_item_type_name varchar(100),
    line_item_native_type varchar(200),
    basket_id varchar(64),
    web_url varchar(5000)
);


CREATE TABLE sandbox.ajovy_cust_level_flags
(
    tvcmid int,
    basket_name varchar(300),
    sales_force_id varchar(2),
    territory_number varchar(8),
    flag_type varchar(50),
    flag_value varchar(50),
    flag_effective_start_date timestamp,
    flag_effective_end_date timestamp
);


CREATE TABLE sandbox.mb_sfa_call
(
    sales_force_id varchar(2),
    call_id varchar(20),
    veeva_account_id varchar(20),
    ims_id varchar(10),
    ims_outlet_id varchar(15),
    customer_type varchar(50),
    first_name varchar(50),
    last_name varchar(80),
    call_type varchar(50),
    legacy_call_type varchar(50),
    ceph_id varchar(10),
    dea_num varchar(10),
    rep_id varchar(20),
    rep_first_name varchar(50),
    rep_last_name varchar(50),
    territory_number varchar(8),
    zip_on_call varchar(10),
    call_date date,
    submit_date timestamp,
    attendees int,
    attendee_type varchar(50),
    area_number varchar(8),
    region_number varchar(8),
    tvcmid int,
    call_recordtype varchar(80),
    call_duration numeric(3,0),
    call_datetime timestamp,
    call_timezone varchar(30),
    how_executed varchar(40),
    remote_meeting_id varchar(100)
);


CREATE TABLE sandbox.payerspine
(
    IQVIAPlanCode varchar(100),
    IQVIAPlanName varchar(100),
    IQVIAPayerName varchar(100),
    IQVIAPBM varchar(100),
    PaymentType varchar(100),
    KeyControllingPlanFormulary varchar(100),
    KeyControllingAccount varchar(100),
    KeyControllingParent varchar(100),
    PBM_Payer varchar(100)
);


CREATE TABLE sandbox.plantrakwbold
(
    PayerID varchar(100),
    PayerName varchar(100),
    PlanID varchar(100),
    PayerPlanID varchar(100),
    PlanName varchar(100),
    Model varchar(100),
    PaymentMethod varchar(100),
    City varchar(100),
    HQState varchar(100),
    OperatingState varchar(100)
);


CREATE TABLE sandbox.Austedo_PSR_Enrolllmonts
(
    "Basket Name" varchar(50),
    "Referral Date" date,
    "Prescribing Physician NPI" int,
    "First Ship Date" date
);


CREATE TABLE sandbox."AUSTEDO ASSTRx_PSRs"
(
    "Basket Name" varchar(50),
    "Referral Date" timestamp,
    "Prescribing Physician NPI" int,
    "First Ship Date" timestamp
);


CREATE TABLE sandbox.relay_health_dc
(
    DRUG_TRADE_NAME varchar(500),
    NDC varchar(500),
    PAID_OR_REVERSED varchar(500),
    STATE varchar(500),
    QUANTITY numeric(19,3),
    DAYS_SUPPLY varchar(500),
    FILL_NUMBER int,
    FILL_TYPE varchar(500),
    DATE_OF_SERVICE date,
    DATE_PROCESSED date,
    PATIENT_PAY_AMT numeric(19,3),
    DENIAL_VOUCHER_AMOUNT numeric(19,3),
    TOTAL_ADMIN_FEES numeric(19,3),
    TOTAL_DUE numeric(19,3),
    TRANSACTION_ID varchar(500)
);


CREATE TABLE sandbox.RELAY_HEALTH_EVOUCHER
(
    RPT_BRAND_NAME varchar(500),
    NDC varchar(500),
    FDB_LABEL_NAME varchar(500),
    REPORT_MONTH date,
    FILL_NUMBER int,
    FILL_TYPE varchar(500),
    CLAIM_STATUS varchar(500),
    PHARMACY_STATE_NAME varchar(500),
    EVOUCHER_STATUS_DESC varchar(500),
    COPAY_RANGE_DISPLAY_ORDER int,
    COPAY_RANGE varchar(500),
    DAYS_SUPPLY int,
    QTY_DISPENSED numeric(19,3),
    ORIGINAL_COPAY numeric(19,3),
    EVOUCHER_AMOUNT numeric(19,3),
    NEW_COPAY numeric(19,3),
    PATIENT_STATUS varchar(500),
    PHARMACY_STATE_TYPE varchar(500),
    PATIENT_AGE_RANGE varchar(500),
    STARTER_BENEFIT_IND varchar(500),
    PPE_TRAN_ID varchar(500),
    PHARMACY_ZIPSEC varchar(500),
    BRD_ISSUE_FLAG varchar(500)
);


CREATE TABLE sandbox.ic_rx_oct2021
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_oct2021
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.AJOVY_GEO_REVERSE_SEP_OCT2021
(
    market_name varchar(1204),
    brand_id int,
    brand_name varchar(1204),
    teva_product_flag varchar(50),
    time_period varchar(64),
    period_type varchar(64),
    period timestamp,
    pbm_id int,
    pbm_name varchar(404),
    payer_id int,
    payer_name varchar(404),
    plan_id int,
    plan_name varchar(404),
    payer_plan_id int,
    method_of_payment varchar(1004),
    final_key_controlling_account varchar(404),
    key_parent_account varchar(404),
    ajovy_formulary_status varchar(404),
    aimovig_formulary_status varchar(404),
    emgality_formulary_status varchar(404),
    plan_payment_type varchar(50),
    market_volume_indicator int,
    Sum_product_vol_trx_count numeric(28,10),
    Sum_market_vol_trx_count numeric(28,10),
    Sum_product_vol_nrx_count numeric(28,10),
    Sum_market_vol_nrx_count numeric(28,10),
    Sum_lives_covered int
);


CREATE TABLE sandbox."TR Demographics QA TOK"
(
    onc_account_demo_id int,
    outlet_name varchar(55),
    outlet_code int,
    outlet_zip int
);


CREATE TABLE sandbox.copay_bkp_209248_209819
(
    redemption_type varchar(10),
    physician_tvcmid int,
    pharmacy_tvcmid int,
    basket_id int,
    basket_name varchar(300),
    asi_txn_id varchar(20),
    orig_asi_txn_id varchar(20),
    rx_num varchar(50),
    fill_date date,
    date_written date,
    days_supply int,
    ndc_code varchar(20),
    daw int,
    new_refill int,
    quantity numeric(9,2),
    refills int,
    other_coverage_code varchar(10),
    program_number varchar(15),
    copay_card_number varchar(20),
    sex varchar(1),
    age_at_redemption int,
    pharmacy_process_date date,
    pharmacy_chain_number varchar(5),
    nabp varchar(7),
    pharmacy_chain varchar(50),
    pharmacy_name varchar(100),
    pharmacy_address varchar(100),
    pharmacy_address2 varchar(100),
    pharmacy_city varchar(50),
    pharmacy_state varchar(2),
    pharmacy_zip varchar(15),
    pharmacy_phone varchar(10),
    pharmacy_npi_num varchar(10),
    principle_physician_dea varchar(9),
    physician_npi varchar(10),
    physician_ims_id varchar(10),
    physician_veeva_id varchar(20),
    physician_name varchar(100),
    physician_address1 varchar(100),
    physician_address2 varchar(100),
    physician_city varchar(50),
    physician_state varchar(2),
    physician_zip varchar(5),
    rebate_amount numeric(9,2),
    member_cash_expense numeric(9,2),
    submitted_cost numeric(9,2),
    pharmacy_fee numeric(9,2),
    total_amount_due numeric(9,2),
    calc_awp numeric(9,2),
    create_date date,
    occ_payment_type varchar(10),
    counted_copay varchar(1),
    auth_refills int,
    admin_hcp_npi varchar(10),
    admin_hcp_name varchar(100),
    admin_hcp_address varchar(100),
    admin_hcp_address2 varchar(100),
    admin_hcp_city varchar(50),
    admin_hcp_state varchar(2),
    admin_hcp_zip varchar(10),
    claim_type varchar(50),
    administration_flag char(1),
    soc_name varchar(60),
    soc_phone varchar(10),
    soc_fax varchar(10),
    soc_address varchar(100),
    soc_city varchar(50),
    soc_state varchar(2),
    soc_zip varchar(10),
    soc_id varchar(50),
    soc_npi varchar(10),
    payer_name varchar(60),
    cpt_code varchar(10),
    trans_type varchar(15),
    previous_payer_id int,
    member_id varchar(20),
    benefit_amount numeric(9,2),
    patient_expense numeric(9,2),
    submission_method varchar(1),
    report_frequency varchar(20),
    source_name varchar(255),
    file_id int,
    record_id int,
    patient_type varchar(100),
    primary_bin varchar(100),
    primary_bin_description varchar(100),
    reject_code varchar(100)
);


CREATE TABLE sandbox.channel_claims
(
    channel_name varchar(500),
    sub_channel_name varchar(500),
    claim_type varchar(500),
    claims_year varchar(500),
    claim_prcnt varchar(500)
);


CREATE TABLE sandbox.dmart_pres_rx_01142022
(
    ims_id varchar(10),
    payer_plan_number varchar(10),
    ims_client_number varchar(5),
    report_frequency varchar(20),
    ims_product_group varchar(10),
    basket_id int,
    data_date date,
    date date,
    sales_category varchar(2),
    tvcmid int,
    prescriber_first_name varchar(50),
    prescriber_last_name varchar(50),
    basket_name varchar(300),
    basket_type varchar(100),
    rollup_week date,
    rollup_month date,
    nrx_count numeric(18,3),
    trx_count numeric(18,3),
    nrx_quantity numeric(18,3),
    trx_quantity numeric(18,3),
    unnormalized_nrx_count numeric(18,3),
    unnormalized_trx_count numeric(18,3),
    market_name varchar(75),
    payer_name varchar(100),
    plan_name varchar(100),
    pbm_name varchar(100),
    model varchar(100),
    payment_method varchar(250),
    ims_specialty varchar(10),
    ims_rx_type varchar(1),
    ims_supplemental_data varchar(20),
    ims_zip_other varchar(10),
    ims_report_number_cnt varchar(5),
    cnt_file_id int,
    cnt_record_id int,
    ims_report_number_qty varchar(5),
    qty_file_id int,
    qty_record_id int,
    rollup_flag char(1),
    indication varchar(20),
    pbm_parent_name varchar(100)
);


CREATE TABLE sandbox."Austedo TD avg dose Nov 2021"
(
    TVCM_ID int,
    IMS_ID varchar(10),
    PRODUCT_NAME varchar(50),
    Data_Type varchar(50),
    Avg_TD_Daily_Dose_New_Patient numeric(10,2),
    Avg_TD_Daily_Dose_Cont_Patient numeric(10,2),
    Data_Ending_Month date
);


CREATE TABLE sandbox.austedo_titration_20220207
(
    TVCM_ID int,
    IMS_ID varchar(10),
    PRODUCT_NAME varchar(50),
    Data_Type varchar(50),
    Avg_TD_Daily_Dose_New_Patient numeric(10,3),
    Avg_TD_Daily_Dose_Cont_Patient numeric(10,3),
    Data_Ending_Month date
);


CREATE TABLE sandbox.pres_rx_anpsych_weekly
(
    ims_id varchar(10),
    payer_plan_number varchar(10),
    ims_client_number varchar(5),
    report_frequency varchar(20),
    ims_product_group varchar(10),
    basket_id int,
    data_date date,
    date date,
    sales_category varchar(2),
    tvcmid int,
    prescriber_first_name varchar(50),
    prescriber_last_name varchar(50),
    basket_name varchar(300),
    basket_type varchar(100),
    rollup_week date,
    rollup_month date,
    nrx_count numeric(18,3),
    trx_count numeric(18,3),
    nrx_quantity numeric(18,3),
    trx_quantity numeric(18,3),
    unnormalized_nrx_count numeric(18,3),
    unnormalized_trx_count numeric(18,3),
    market_name varchar(75),
    payer_name varchar(100),
    plan_name varchar(100),
    pbm_name varchar(100),
    model varchar(100),
    payment_method varchar(250),
    ims_specialty varchar(10),
    ims_rx_type varchar(1),
    ims_supplemental_data varchar(20),
    ims_zip_other varchar(10),
    ims_report_number_cnt varchar(5),
    cnt_file_id int,
    cnt_record_id int,
    ims_report_number_qty varchar(5),
    qty_file_id int,
    qty_record_id int,
    rollup_flag char(1),
    indication varchar(20),
    pbm_parent_name varchar(100)
);


CREATE TABLE sandbox.NPA_DEMAND_UNITS_bkp_21022022
(
    Product varchar(500),
    Channel varchar(500),
    NDC_Details varchar(500),
    EUTRx_May_2018 numeric(19,3),
    EUTRx_Jun_2018 numeric(19,3),
    EUTRx_Jul_2018 numeric(19,3),
    EUTRx_Aug_2018 numeric(19,3),
    EUTRx_Sep_2018 numeric(19,3),
    EUTRx_Oct_2018 numeric(19,3),
    EUTRx_Nov_2018 numeric(19,3),
    EUTRx_Dec_2018 numeric(19,3),
    EUTRx_Jan_2019 numeric(19,3),
    EUTRx_Feb_2019 numeric(19,3),
    EUTRx_Mar_2019 numeric(19,3),
    EUTRx_Apr_2019 numeric(19,3),
    EUTRx_May_2019 numeric(19,3),
    EUTRx_Jun_2019 numeric(19,3),
    EUTRx_Jul_2019 numeric(19,3),
    EUTRx_Aug_2019 numeric(19,3),
    EUTRx_Sep_2019 numeric(19,3),
    EUTRx_Oct_2019 numeric(19,3),
    EUTRx_Nov_2019 numeric(19,3),
    EUTRx_Dec_2019 numeric(19,3),
    EUTRx_Jan_2020 numeric(19,3),
    EUTRx_Feb_2020 numeric(19,3),
    EUTRx_Mar_2020 numeric(19,3),
    EUTRx_Apr_2020 numeric(19,3),
    EUTRx_May_2020 numeric(19,3),
    EUTRx_Jun_2020 numeric(19,3),
    EUTRx_Jul_2020 numeric(19,3),
    EUTRx_Aug_2020 numeric(19,3),
    EUTRx_Sep_2020 numeric(19,3),
    EUTRx_Oct_2020 numeric(19,3),
    EUTRx_Nov_2020 numeric(19,3),
    EUTRx_Dec_2020 numeric(19,3),
    EUTRx_Jan_2021 numeric(19,3),
    EUTRx_Feb_2021 numeric(19,3),
    EUTRx_Mar_2021 numeric(19,3),
    EUTRx_Apr_2021 numeric(19,3),
    EUTRx_May_2021 numeric(19,3),
    EUTRx_Jun_2021 numeric(19,3),
    EUTRx_Jul_2021 numeric(19,3),
    EUTRx_Aug_2021 numeric(19,3),
    EUTRx_Sep_2021 numeric(19,3),
    EUTRx_Oct_2021 numeric(19,3),
    EUTRx_Nov_2021 numeric(19,3),
    EUTRx_Dec_2021 numeric(19,3),
    TRx_May_2018 numeric(19,3),
    TRx_Jun_2018 numeric(19,3),
    TRx_Jul_2018 numeric(19,3),
    TRx_Aug_2018 numeric(19,3),
    TRx_Sep_2018 numeric(19,3),
    TRx_Oct_2018 numeric(19,3),
    TRx_Nov_2018 numeric(19,3),
    TRx_Dec_2018 numeric(19,3),
    TRx_Jan_2019 numeric(19,3),
    TRx_Feb_2019 numeric(19,3),
    TRx_Mar_2019 numeric(19,3),
    TRx_Apr_2019 numeric(19,3),
    TRx_May_2019 numeric(19,3),
    TRx_Jun_2019 numeric(19,3),
    TRx_Jul_2019 numeric(19,3),
    TRx_Aug_2019 numeric(19,3),
    TRx_Sep_2019 numeric(19,3),
    TRx_Oct_2019 numeric(19,3),
    TRx_Nov_2019 numeric(19,3),
    TRx_Dec_2019 numeric(19,3),
    TRx_Jan_2020 numeric(19,3),
    TRx_Feb_2020 numeric(19,3),
    TRx_Mar_2020 numeric(19,3),
    TRx_Apr_2020 numeric(19,3),
    TRx_May_2020 numeric(19,3),
    TRx_Jun_2020 numeric(19,3),
    TRx_Jul_2020 numeric(19,3),
    TRx_Aug_2020 numeric(19,3),
    TRx_Sep_2020 numeric(19,3),
    TRx_Oct_2020 numeric(19,3),
    TRx_Nov_2020 numeric(19,3),
    TRx_Dec_2020 numeric(19,3),
    TRx_Jan_2021 numeric(19,3),
    TRx_Feb_2021 numeric(19,3),
    TRx_Mar_2021 numeric(19,3),
    TRx_Apr_2021 numeric(19,3),
    TRx_May_2021 numeric(19,3),
    TRx_Jun_2021 numeric(19,3),
    TRx_Jul_2021 numeric(19,3),
    TRx_Aug_2021 numeric(19,3),
    TRx_Sep_2021 numeric(19,3),
    TRx_Oct_2021 numeric(19,3),
    TRx_Nov_2021 numeric(19,3),
    TRx_Dec_2021 numeric(19,3)
);


CREATE TABLE sandbox.AUsted_PSRF_Utilization_Rpt_TN02182022
(
    PSRF_ID int,
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(50),
    PrescriberNPI varchar(50),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_031122
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(12),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.dt_sfa_affl_04052022
(
    affiliated_from_id varchar(18),
    affiliated_from_account_type varchar(80),
    affiliated_from_ims_id varchar(20),
    affiliated_from_ims_outlet_cd varchar(100),
    affiliated_from_acct_demo_id varchar(30),
    affiliated_from_bp_code varchar(120),
    affiliated_from_tvcmid int,
    affiliated_to_id varchar(18),
    affiliated_to_account_type varchar(80),
    affiliated_to_ims_id varchar(20),
    affiliated_to_ims_outlet_code varchar(100),
    affiliated_to_acct_demo_id varchar(30),
    affiliated_to_bp_code varchar(120),
    affiliated_to_tvcmid int,
    role varchar(50),
    affiliated_last_modified_date timestamp,
    sales_force_id varchar(2),
    territory_number varchar(100),
    employee_full_name varchar(100),
    employee_id varchar(100)
);


CREATE TABLE sandbox.TRIAL_CARD_LTC_Facility_Profile_Full
(
    "Activity Date" timestamp,
    "Internal Contact ID" int,
    "Current or Final Disposition" varchar(61),
    "Facility ID" varchar(50),
    "Display Name" varchar(88),
    Geography varchar(50),
    "Group" varchar(50),
    "Decile Group" varchar(5),
    Decile varchar(2),
    "Confirm Facility/Network Name" varchar(88),
    "Name Verified" varchar(50),
    "Facility Street Address" varchar(57),
    "Facility City" varchar(50),
    "Facility State" varchar(2),
    "Facility ZIP Code" varchar(10),
    "Address Verified" varchar(50),
    "Address Change" varchar(50),
    "Facility Phone Number" varchar(25),
    "Facility Phone Number Change" varchar(50),
    "Facility Office Fax Number" varchar(50),
    "Facility Email Address" varchar(63),
    "Network Office Key Decisions" varchar(250),
    "Certified Beds" int,
    "Q1. Did # Beds change?" varchar(50),
    "Q1. How many beds?" varchar(54),
    "Q1a. Percent of Long-term Care Beds" varchar(50),
    "Q1a. Dont' KNow/Refused" varchar(50),
    "Q2. Staffing/ Key Points of Contact" varchar(69),
    "Q2a. Director Of Nursing First Name" varchar(50),
    "Q2a. Director of Nursing Last Name" varchar(50),
    "Q2a. Director of Nursing Email" varchar(74),
    "Q2a Director of Nursing Phone" varchar(25),
    "Q2a. Director Of Nursing Best Time to Contact" varchar(58),
    "Q2b. Assistant Director of Nursing First Name" varchar(50),
    "Q2b. Assistant Director of Nursing Last Name" varchar(68),
    "Q2b. Assistant Director of Nursing Email" varchar(76),
    "Q2b Assistant Director of Nursing Phone" varchar(25),
    "Q2b. Assistant Director Of Nursing Best Time to Contact" varchar(50),
    "Q2c. Consultant Pharmacist First Name" varchar(63),
    "Q2c. Consultant Pharmacist Last Name" varchar(50),
    "Q2c. Consultant Pharmacist Email" varchar(51),
    "Q2c Consultant Pharmacist Phone" varchar(25),
    "Q2c. Consultant Pharmacist Best Time to Contact" varchar(50),
    "Q2d. Medical Director First Name" varchar(50),
    "Q2d. Medical Director Last Name" varchar(75),
    "Q2d. Medical Director Email" varchar(63),
    "Q2d Medical Director Phone" varchar(25),
    "Q2d. Medical Director Best Time to Contact" varchar(62),
    "Q2e. Administrator First Name" varchar(50),
    "Q2e. Administrator Last Name" varchar(56),
    "Q2e. Administrator Email" varchar(68),
    "Q2e Administrator Phone" varchar(25),
    "Q2e. Administrator Best Time to Contact" varchar(80),
    "Q2f. Social Worker First Name" varchar(50),
    "Q2f. Social Worker Last Name" varchar(50),
    "Q2f. Social Worker Email" varchar(69),
    "Q2f Social Worker Phone" varchar(25),
    "Q2f. Social Worker Best Time to Contact" varchar(75),
    "Q2g. Office Manager First Name" varchar(50),
    "Q2g. Office Manager Last Name" varchar(50),
    "Q2g. Office Manager Email" varchar(76),
    "Q2g Office Manager Phone" varchar(25),
    "Q2g. Office Manager Best Time to Contact" varchar(75),
    "Q3. Psychiatric Provider First Name" varchar(66),
    "Q3. Psychiatric Provider Last Name" varchar(50),
    "Q3. Psychiatric Provider Email" varchar(50),
    "Q3. Psychiatric Provider Phone" varchar(25),
    "Q3. Psychiatric Provider Best Time to Contact" varchar(50),
    "NT-Q1. Regional Nurse Consultant First Name" varchar(50),
    "NT-Q1. Regional Nurse Consultant Last Name" varchar(50),
    "NT-Q1. Regional Nurse Consultant Email" varchar(20),
    "NT-Q1. Regional Nurse Consultant Phone" varchar(25),
    "NT-Q1. Regional Nurse Consultant Best Time to Contact" varchar(75),
    "NT-Q2. Regional Administrator First Name" varchar(20),
    "NT-Q2. Regional Administrator Last Name" varchar(20),
    "UB. - Other Point of Contact First Name" varchar(50),
    "UB. - Other Point of Contact Last Name" varchar(54),
    "UB. - Other Point of Contact Email" varchar(65),
    "UB. - Other Point of Contact Email Phone" varchar(25),
    "UB. - Other Point of Contact Best Time to Contact" varchar(75),
    "UB. - Questions for me today?" varchar(50),
    "UB. - If Yes, Questions" varchar(180),
    "B- Speak to Clinical Staff Member" varchar(50),
    "QP1. How does staff interact" varchar(250),
    "QP1. Network/Local" varchar(20),
    "QP2. Does staff participate in educational programs" varchar(140),
    "QP2. Network/Local" varchar(20),
    "QP2a. Programs in-person or virtual" varchar(50),
    "QP2a. Network/Local" varchar(20),
    "QP2b. Staff participation in virtual edu programs in 2020" varchar(50),
    "QP2b. Network/Local" varchar(20),
    "QP2c. Preference regarding in-person or virtual programs" varchar(50),
    "QP2c.Preference regarding in-person or virtual programs Yes" varchar(50),
    "Qp2c. Network/Local" varchar(20),
    "QP2d. Current COVID-19 Policies?" varchar(175),
    "Rep. Access" varchar(50),
    "QP2d. Network/Local" varchar(20),
    "QP2e. Branded in-service presentations allowed" varchar(50),
    "QP2e. Network/Local" varchar(20),
    "QP3 Best way to engage staff" varchar(136),
    "QP3. Network/Local" varchar(20),
    "Q4. Most valuable info from pharmaceutical companies" varchar(144),
    "Q4. Most valuable info from pharmaceutical companies Other" varchar(73),
    "Q5. Who assesses patients/performs testing Name" varchar(67),
    "Q5. Who assesses patients/performs testing Title" varchar(66),
    "Q5. Who assesses patients/performs testing Email" varchar(62),
    "Q5. Who assesses patients/performs testing Phone" varchar(25),
    "Q5. Who assesses patients/performs testing Best time to contact" varchar(50),
    "Q5. Who assesses patients/performs testing Don't know" varchar(50),
    "Q6. VMAT2 inhibitors being used" varchar(50),
    "Q7. providers prescribing AUSTEDO" varchar(50),
    "Q8. In-house or contracted pharmacy" varchar(50),
    "Q9. Name and address of pharmacy Name" varchar(83),
    "Pharmacy Name Change" varchar(50),
    "Q9. Name and address of pharmacy Address" varchar(50),
    "Q9. Name and address of pharmacy City" varchar(50),
    "Q9. Name and address of pharmacy State" varchar(2),
    "Q9. Name and address of pharmacy Phone" varchar(25),
    "Q9. Name and address of pharmacy Fax" varchar(50),
    "Q9. Name and address of pharmacy Don't know" varchar(50),
    "Q9a. Pharmacy Email" varchar(51),
    "Q9a. Pharmacy Web" varchar(50),
    "Q9-Oth. Name and address of Other pharmacy Name" varchar(78),
    "Q9-Oth. Name and address of Other pharmacy Address" varchar(82),
    "Q9-Oth. Name and address of Other pharmacy City" varchar(20),
    "Q9-Oth. Name and address of Other pharmacy State" varchar(2),
    "Q9-Oth. Name and address of Other pharmacy Phone number" varchar(25),
    "Q9-Oth. Name and address of Other pharmacy Fax number" varchar(20),
    "Q10. Prior Authorizations" varchar(86),
    "B - Other Point of Contact First Name" varchar(54),
    "B - Other Point of Contact Last Name" varchar(50),
    "B - Other Point of Contact Email" varchar(50),
    "B - Other Point of Contact Phone" varchar(25),
    "B - Other Point of Contact Best Time to Contact" varchar(50),
    "B - Email Address" varchar(70),
    "B - Questions for me today?" varchar(50),
    "B - If Yes, Questions" varchar(146),
    "B- Transferred to Safety Message" varchar(50),
    "Call Date 1" varchar(50),
    "Call Disposition Attempt 1" varchar(60),
    "Call Date 2" varchar(50),
    "Call Disposition Attempt 2" varchar(60),
    "Call Date 3" varchar(50),
    "Call Disposition Attempt 3" varchar(61),
    "Archer Rep" varchar(50),
    "Completed By" varchar(50),
    "Archer Lead Score" int,
    Subject varchar(50),
    "In- Network?" varchar(50),
    "Activity ID" int
);


CREATE TABLE sandbox.ic_rx_feb2022
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_feb2022
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_042222
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.veeva_suggestions_austedo
(
    account_priority_score_vod__c int,
    account_vod__c varchar(55),
    display_dismiss_vod__c varchar(10),
    display_mark_as_complete_vod__c varchar(10),
    display_score_vod__c varchar(10),
    email_template_id_vod__c varchar(255),
    email_template_vault_id_vod__c varchar(255),
    email_template_vod__c varchar(10),
    expiration_date_vod__c date,
    marked_as_complete_vod__c varchar(10),
    mark_complete_count_vod__c int,
    name varchar(255),
    ownerid varchar(255),
    posted_date date,
    priority_vod__c varchar(255),
    reason_vod__c varchar(255),
    record_type_name_vod__c varchar(255),
    suppress_reason_vod__c varchar(10),
    title_vod__c varchar(255),
    business_rule_name varchar(255),
    product varchar(255),
    days_since_last_call int,
    calls_per_mth numeric(3,1),
    austedo_decile varchar(10),
    avg_new_dose numeric(18,3),
    avg_cont_dose numeric(18,3),
    ss_flag varchar(10),
    austedo_rx varchar(10),
    hcp_name varchar(255),
    rep_name varchar(255),
    batch_num int
);


CREATE TABLE sandbox.veeva_sugg_aust_v2
(
    account_priority_score_vod__c int,
    account_vod__c varchar(55),
    display_dismiss_vod__c varchar(10),
    display_mark_as_complete_vod__c varchar(10),
    display_score_vod__c varchar(10),
    email_template_id_vod__c varchar(255),
    email_template_vault_id_vod__c varchar(255),
    email_template_vod__c varchar(10),
    expiration_date_vod__c date,
    marked_as_complete_vod__c varchar(10),
    mark_complete_count_vod__c int,
    name varchar(255),
    ownerid varchar(255),
    posted_date date,
    priority_vod__c varchar(255),
    reason_vod__c varchar(255),
    record_type_name_vod__c varchar(255),
    suppress_reason_vod__c varchar(10),
    title_vod__c varchar(255),
    business_rule_name varchar(255),
    product varchar(255),
    days_since_last_call int,
    calls_per_mth numeric(3,1),
    austedo_decile varchar(10),
    avg_new_dose numeric(18,3),
    avg_cont_dose numeric(18,3),
    ss_flag varchar(10),
    austedo_rx varchar(10),
    hcp_name varchar(255),
    rep_name varchar(255),
    batch_num int
);


CREATE TABLE sandbox.AJOVY_NPP_Segment
(
    TVCMID varchar(20) NOT NULL,
    IMS_ID varchar(20),
    NPI varchar(20),
    Basket_name varchar(20) NOT NULL,
    Segment varchar(20) NOT NULL,
    CONSTRAINT C_PRIMARY PRIMARY KEY (TVCMID) DISABLED
);


CREATE TABLE sandbox.ic_rx_mar2022
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_mar2022
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_06032022
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.ic_rx_apr2022
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_apr2022
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox."TH CALL ACTIVY IDs"
(
    veeva_account_id varchar(50),
    ims_id varchar(50),
    ims_outlet_id varchar(50),
    tvcmid varchar(50)
);


CREATE TABLE sandbox."TH CALL ACTIVITY 01"
(
    veeva_account_id varchar(50),
    ims_id varchar(50),
    ims_outlet_id varchar(50),
    tvcmid int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_002
(
    PrescriberName varchar(50),
    ptr_city varchar(50),
    ptr_state varchar(2),
    ptr_zip varchar(10),
    PrescriberNPI1 varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt06242022
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_07012022
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_POCN_0712
(
    Vendor varchar(50),
    NPI varchar(50),
    "Tactic Subtype" varchar(50),
    Creative varchar(66),
    "Activity Date" timestamp,
    Counts int
);


CREATE TABLE sandbox.vmat2_writers_24mons
(
    ims_id varchar(10),
    austedo_Script_count numeric(37,15),
    ingrezza_script_count numeric(37,15)
);


CREATE TABLE sandbox.license_audits
(
    database_size_bytes int,
    license_size_bytes varchar(20),
    usage_percent float,
    audit_start_timestamp timestamptz,
    audit_end_timestamp timestamptz,
    confidence_level_percent float,
    error_tolerance_percent float,
    used_sampling boolean,
    confidence_interval_lower_bound_bytes int,
    confidence_interval_upper_bound_bytes int,
    sample_count int,
    cell_count int,
    audited_data varchar(128)
);


CREATE TABLE sandbox.query_profiles
(
    session_id varchar(128),
    transaction_id int,
    statement_id int,
    identifier varchar(128),
    node_name varchar(128),
    query varchar(64000),
    query_search_path varchar(64000),
    schema_name varchar(128),
    table_name varchar(128),
    query_duration_us numeric(36,6),
    query_start_epoch int,
    query_start varchar(63),
    query_type varchar(128),
    error_code int,
    user_name varchar(128),
    processed_row_count int,
    reserved_extra_memory_b int,
    is_executing boolean
);


CREATE TABLE sandbox.sessions
(
    node_name varchar(128),
    user_name varchar(128),
    client_hostname varchar(128),
    client_pid int,
    login_timestamp timestamptz,
    session_id varchar(80),
    idle_session_timeout interval,
    grace_period interval,
    client_label varchar(256),
    transaction_start timestamptz,
    transaction_id int,
    transaction_description varchar(8192),
    statement_start timestamptz,
    statement_id int,
    last_statement_duration_us int,
    runtime_priority varchar(8192),
    current_statement varchar(8192),
    last_statement varchar(8192),
    ssl_state varchar(80),
    authentication_method varchar(80),
    client_type varchar(128),
    client_version varchar(128),
    client_os varchar(128),
    client_os_user_name varchar(128),
    client_authentication_name varchar(128),
    client_authentication int,
    requested_protocol varchar(128),
    effective_protocol varchar(128),
    external_memory_kb int,
    temp_table_impaired boolean
);


CREATE TABLE sandbox.ic_rx
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1) DEFAULT 'N',
    dnp_flag char(1) DEFAULT 'N',
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1) DEFAULT 'Y',
    include_in_area_rollup char(1) DEFAULT 'Y',
    include_in_region_rollup char(1) DEFAULT 'Y',
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date DEFAULT "sysdate"(),
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_ms_market_decile_201601
(
    ims_id varchar(10),
    category varchar(100),
    decile_name varchar(50),
    trx_cnt_01_06 int,
    trx_cnt_01_12 int
);


CREATE TABLE sandbox.ic_demo
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1) DEFAULT 'N',
    pdrp_date date,
    np_pa_flag char(1) DEFAULT 'N',
    no_spend char(1) DEFAULT 'N',
    ama_no_contact_flag char(1) DEFAULT 'N',
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date DEFAULT "sysdate"(),
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.qims_td_target_univ
(
    PRESCRIBER_ID varchar(50),
    ME_NBR varchar(20),
    IMS_ID varchar(7),
    NPI varchar(20),
    PRIMARY_SPECIALTY varchar(59),
    SECONDARY_SPECIALTY varchar(68),
    PRIMARY_SPECIALTY_GROUP varchar(50),
    SECONDARY_SPECIALTY_GROUP varchar(50),
    GENDER_CD varchar(50),
    FIRST_NAME varchar(50),
    LAST_NAME varchar(50),
    MID_NAME varchar(50),
    ADDRESS_1 varchar(63),
    ADDRESS_2 varchar(50),
    CITY varchar(50),
    STATE varchar(50),
    ZIP varchar(10),
    AMA_NO_CONTACT_INDICATOR varchar(15),
    AMA_PDRP_IND varchar(50),
    PROVIDER_TYP_DESC varchar(50),
    TARGET_Y_N varchar(50),
    ADOPTION_CATEGORY varchar(50),
    CMHC_AFFILIATION_Y_N varchar(50),
    INFLUENCER varchar(50),
    INFLUENCER_MVT_DIS_LEADER varchar(50),
    INFLUENCER_BHVR_HLTH_LEADER varchar(50),
    PRIORITY_FLAG_Y_N varchar(50),
    DIAGNOSED_TD_PAT_CNT numeric(28,10),
    OVERALL_DIAGNOSED_TD_PAT_CNT numeric(28,10),
    OVERALL_UNIQUE_DIAG_TD_PAT_CNT numeric(28,10),
    PREDICTED_TD_PAT_CNT_HIGH numeric(28,10),
    PREDICTED_TD_PAT_CNT_UNIQUE_HIGH numeric(28,10),
    SUM_OF_SCORES_PREDICTED_PAT_CNT_HIGH numeric(28,10),
    SUM_OF_SCORES_PREDICTED_PAT_CNT_UNIQUE_HIGH numeric(28,10),
    TOTAL_OPPORTUNITY_HIGH numeric(28,10),
    PREDICTED_TD_PAT_CNT_MEDIUM numeric(28,10),
    PREDICTED_TD_PAT_CNT_UNIQUE_MEDIUM numeric(28,10),
    SUM_OF_SCORES_PREDICTED_PAT_CNT_MEDIUM numeric(28,10),
    SUM_OF_SCORES_PREDICTED_PAT_CNT_UNIQUE_MEDIUM numeric(28,10),
    TOTAL_OPPORTUNITY_MEDIUM numeric(28,10),
    TOTAL_OPPORTUNITY_DIAG_HIGH_MEDIUM numeric(28,10),
    RANK numeric(28,10),
    DECILE_PAT_CNT numeric(28,10),
    DECILE_SUM_OF_SCORES numeric(28,10),
    DECILE_SUM_OF_SCORES_UNIQUE numeric(28,10),
    DECILE_OLD numeric(28,10),
    APD_PAT_CNT numeric(28,10),
    APD_PAT_CNT_TD_HIGH numeric(28,10),
    APD_PAT_CNT_TD_MEDIUM numeric(28,10),
    DIAGN_TD_MDD_BPD_SCZ_PAT_CNT numeric(28,10),
    OVERALL_DIAG_TD_MDD_BPD_SCZ_PT numeric(28,10),
    PREDICTED_TD_MDD_BPD_SCZ_PAT_CNT_HIGH numeric(28,10),
    TOTAL_OPPORTUNITY_MDD_BPD_SCZ_HIGH numeric(28,10),
    PREDICTED_TD_MDD_BPD_SCZ_PAT_CNT_MEDIUM numeric(28,10),
    TOTAL_OPPORTUNITY_MDD_BPD_SCZ_MEDIUM numeric(28,10),
    DIAGNOSED_TD_MDD_PAT_CNT numeric(28,10),
    OVERALL_DIAGNOSED_TD_MDD_PAT numeric(28,10),
    PREDICTED_TD_MDD_PAT_CNT_HIGH numeric(28,10),
    TOTAL_OPPORTUNITY_MDD_HIGH numeric(28,10),
    PREDICTED_TD_MDD_PAT_CNT_MEDIUM numeric(28,10),
    TOTAL_OPPORTUNITY_MDD_MEDIUM numeric(28,10),
    DIAGNOSED_TD_BPD_PAT_CNT numeric(28,10),
    OVERALL_DIAGNOSED_TD_BPD_PAT_CNT numeric(28,10),
    PREDICTED_TD_BPD_PAT_CNT_HIGH numeric(28,10),
    TOTAL_OPPORTUNITY_BPD_HIGH numeric(28,10),
    PREDICTED_TD_BPD_PAT_CNT_MEDIUM numeric(28,10),
    TOTAL_OPPORTUNITY_BPD_MEDIUM numeric(28,10),
    DIAGNOSED_TD_SCZ_PAT_CNT numeric(28,10),
    OVERALL_DIAGNOSED_TD_SCZ_PAT_CNT numeric(28,10),
    PREDICTED_TD_SCZ_PAT_CNT_HIGH numeric(28,10),
    TOTAL_OPPORTUNITY_SCZ_HIGH numeric(28,10),
    PREDICTED_TD_SCZ_PAT_CNT_MEDIUM numeric(28,10),
    TOTAL_OPPORTUNITY_SCZ_MEDIUM numeric(28,10),
    APD_CLM_CNT numeric(28,10),
    APD_CLM_CNT_TD_HIGH numeric(28,10),
    APD_CLM_CNT_TD_MEDIUM numeric(28,10),
    DIAGNOSED_TD_CLM_CNT numeric(28,10),
    METO_CLM_CNT numeric(28,10),
    ARIPIPRAZOLE_CLM_CNT numeric(28,10),
    ASENAPINE_CLM_CNT numeric(28,10),
    BREXPIPRAZOLE_CLM_CNT numeric(28,10),
    CARIPRAZINE_CLM_CNT numeric(28,10),
    CHLORPROMAZINE_CLM_CNT numeric(28,10),
    CLOZAPINE_CLM_CNT numeric(28,10),
    DROPERIDOL_CLM_CNT numeric(28,10),
    FLUPHENAZINE_CLM_CNT numeric(28,10),
    HALOPERIDOL_CLM_CNT numeric(28,10),
    ILOPERIDONE_CLM_CNT numeric(28,10),
    LOXAPINE_CLM_CNT numeric(28,10),
    LURASIDONE_CLM_CNT numeric(28,10),
    MOLINDONE_CLM_CNT numeric(28,10),
    OLANZAPINE_CLM_CNT numeric(28,10),
    PALIPERIDONE_CLM_CNT numeric(28,10),
    PERPHENAZINE_CLM_CNT numeric(28,10),
    PIMAVANSERIN_CLM_CNT numeric(28,10),
    PIMOZIDE_CLM_CNT numeric(28,10),
    PROCHLORPERAZINE_CLM_CNT numeric(28,10),
    QUETIAPINE_CLM_CNT numeric(28,10),
    RISPERIDONE_CLM_CNT numeric(28,10),
    THIORIDAZINE_CLM_CNT numeric(28,10),
    THIOTHIXENE_CLM_CNT numeric(28,10),
    TRIFLUOPERAZINE_CLM_CNT numeric(28,10),
    ZIPRASIDONE_CLM_CNT numeric(28,10),
    ABILIFY_LTC_TRX numeric(28,10),
    ABILIFY_DISCMELT_LTC_TRX numeric(28,10),
    ABILIFY_MAINTENA_LTC_TRX numeric(28,10),
    ARIPIPRAZOLE_LTC_TRX numeric(28,10),
    ARIPIPRAZOLE_ODT_LTC_TRX numeric(28,10),
    ARISTADA_LTC_TRX numeric(28,10),
    CHLORPROMAZINE_HCL_LTC_TRX numeric(28,15),
    CLOZAPINE_LTC_TRX numeric(28,10),
    CLOZAPINE_ODT_LTC_TRX numeric(28,10),
    CLOZARIL_LTC_TRX numeric(28,10),
    COMPRO_LTC_TRX numeric(28,10),
    FANAPT_LTC_TRX numeric(28,10),
    FANAPT_TITRATION_PACK_LTC_TRX numeric(28,10),
    FAZACLO_LTC_TRX numeric(28,10),
    FLUPHENAZINE_DECANOATE_LTC_TRX numeric(28,14),
    FLUPHENAZINE_HCL_LTC_TRX numeric(28,13),
    GEODON_LTC_TRX numeric(28,10),
    HALDOL_LTC_TRX numeric(28,10),
    HALDOL_DECANOATE_100_LTC_TRX numeric(28,10),
    HALDOL_DECANOATE_50_LTC_TRX numeric(28,10),
    HALOPERIDOL_LTC_TRX numeric(28,13),
    HALOPERIDOL_DECANOATE_LTC_TRX numeric(28,14),
    HALOPERIDOL_LACTATE_LTC_TRX numeric(28,13),
    INVEGA_LTC_TRX numeric(28,10),
    INVEGA_SUSTENNA_LTC_TRX numeric(28,10),
    INVEGA_TRINZA_LTC_TRX numeric(28,10),
    LATUDA_LTC_TRX numeric(28,14),
    LOXAPINE_LTC_TRX numeric(28,10),
    LOXAPINE_SUCCINATE_LTC_TRX numeric(28,10),
    MOLINDONE_HYDROCHLOR_LTC_TRX numeric(28,10),
    NUPLAZID_LTC_TRX numeric(28,10),
    OLANZAPINE_LTC_TRX numeric(28,14),
    OLANZAPINE_ODT_LTC_TRX numeric(28,10),
    OLANZAPINE_FLUOXETINE_LTC_TRX numeric(28,10),
    ORAP_LTC_TRX numeric(28,10),
    PALIPERIDONE_ER_LTC_TRX numeric(28,10),
    PERPHENAZINE_LTC_TRX numeric(28,10),
    PERPHENAZINE_AMITRIPTY_LTC_TRX numeric(28,10),
    PIMOZIDE_LTC_TRX numeric(28,10),
    PROCHLORPERAZINE_LTC_TRX numeric(28,10),
    PROCHLORPERAZINE_EDISY_LTC_TRX numeric(28,10),
    PROCHLORPERAZINE_MALEA_LTC_TRX numeric(28,10),
    QUETIAPINE_FUMARATE_LTC_TRX numeric(28,13),
    QUETIAPINE_FUMARATE_ER_LTC_TRX numeric(28,10),
    REXULTI_LTC_TRX numeric(28,10),
    RISPERDAL_LTC_TRX numeric(28,10),
    RISPERDAL_CONSTA_LTC_TRX numeric(28,10),
    RISPERDAL_M_TAB_LTC_TRX numeric(28,10),
    RISPERIDONE_LTC_TRX numeric(28,13),
    RISPERIDONE_M_TAB_LTC_TRX numeric(28,10),
    RISPERIDONE_ODT_LTC_TRX numeric(28,10),
    SAPHRIS_LTC_TRX numeric(28,14),
    SEROQUEL_LTC_TRX numeric(28,10),
    SEROQUEL_XR_LTC_TRX numeric(28,10),
    SYMBYAX_LTC_TRX numeric(28,10),
    THIORIDAZINE_HCL_LTC_TRX numeric(28,10),
    THIOTHIXENE_LTC_TRX numeric(28,10),
    TRIFLUOPERAZINE_HCL_LTC_TRX numeric(28,10),
    VERSACLOZ_LTC_TRX numeric(28,10),
    VRAYLAR_LTC_TRX numeric(28,10),
    ZIPRASIDONE_HCL_LTC_TRX numeric(28,14),
    ZYPREXA_LTC_TRX numeric(28,10),
    ZYPREXA_RELPREVV_LTC_TRX numeric(28,10),
    ZYPREXA_ZYDIS_LTC_TRX numeric(28,10),
    FACILITY_TYPE varchar(61)
);


CREATE TABLE sandbox.compliance_speaker_list
(
    tvcmid int,
    npi varchar(50),
    Last_Name varchar(50),
    First_Name varchar(50),
    Middle_Initial varchar(1),
    Address varchar(65),
    City varchar(50),
    State varchar(50),
    Zip varchar(10),
    speaker_affiliation varchar(100)
);


CREATE TABLE sandbox.ic_ms_market_decile_201801
(
    ims_id varchar(10),
    tvcmid int,
    category varchar(2),
    decile_name varchar(300),
    trx_cnt_01_06 int,
    trx_cnt_01_12 int
);


CREATE TABLE sandbox.call_plan_decile_nr
(
    hcp_id varchar(50),
    market varchar(50),
    decile_value varchar(50),
    veeva_id varchar(50)
);


CREATE TABLE sandbox.ic_decile
(
    ic_data_month date,
    ims_id varchar(10),
    tvcmid int,
    decile_name varchar(300),
    decile_value int,
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date DEFAULT "sysdate"()
);


CREATE TABLE sandbox.scd_prescriber_combined_demographics
(
    scd_status varchar(10) DEFAULT 'Current',
    scd_effective_date date DEFAULT trunc("sysdate"()),
    scd_expiration_date date DEFAULT '2099-12-31'::date,
    sales_force_id varchar(20),
    ims_id varchar(10),
    npi varchar(10),
    tvcmid int,
    veeva_account_id varchar(20),
    specialty varchar(255),
    first_name varchar(50),
    middle_name varchar(50),
    last_name varchar(50),
    ptr_veeva_address_id varchar(20),
    ptr_address_1 varchar(100),
    ptr_address_2 varchar(100),
    ptr_address_3 varchar(100),
    ptr_city varchar(50),
    ptr_state varchar(2),
    ptr_zip varchar(5),
    ptr_phone varchar(40),
    ptr_territory_num varchar(15),
    ptr_territory_type varchar(30),
    ptr_address_source varchar(50),
    ptr_mailable varchar(1),
    dea_num varchar(10),
    pdrp_flag varchar(1),
    pdrp_date timestamp,
    np_pa_flag varchar(1),
    no_spend varchar(1),
    ama_no_contact_flag varchar(1),
    email varchar(100),
    degree varchar(100),
    address_id int,
    address_latitude varchar(20),
    address_longitude varchar(20),
    row_source varchar(100)
);


CREATE TABLE sandbox.call_sample_product_value
(
    Id varchar(18),
    product_value_vod__c varchar(20)
);


CREATE TABLE sandbox.views_to_keep
(
    view_name varchar(255)
);


CREATE TABLE sandbox.HeadacheCenter
(
    IMS_ID varchar(50),
    TVCMID int,
    First_Name varchar(50),
    Middle_Name varchar(50),
    Last_Name varchar(50),
    Cred varchar(59),
    Location varchar(112),
    Address_1 varchar(76),
    Address_2 varchar(51),
    City varchar(50),
    State_Code varchar(50),
    Zip_Code varchar(50),
    Zip_Extension varchar(50),
    Telephone varchar(50),
    Alternative_Telephone varchar(50)
);


CREATE TABLE sandbox.a_mktdef
(
    market_name varchar(20),
    market_id float,
    brand_form_strength varchar(38),
    bfs_id float,
    brand varchar(1),
    teva_prod varchar(1),
    prod_group varchar(16),
    F8 varchar(1)
);


CREATE TABLE sandbox.QVAR_HCPs_09272019
(
    IMSID varchar(12),
    NPI varchar(12)
);


CREATE TABLE sandbox.M_D_PRODUCTS
(
    MOVEMENT_DISORDER_PRODUCTS varchar(50)
);


CREATE TABLE sandbox.ONC_Basket_IDs_for_QA
(
    BRAND varchar(50),
    basket_id int
);


CREATE TABLE sandbox.customer_mb
(
    customer_id varchar(25),
    tvcmid int,
    ims_id varchar(10),
    ims_outlet_code varchar(10),
    ims_facility_number varchar(11),
    federation_id varchar(200),
    customer_type varchar(15),
    prescriber_type varchar(25),
    network_name varchar(100),
    account_name varchar(100),
    physician_first_name varchar(50),
    physician_last_name varchar(50),
    credential varchar(100),
    subcat_group varchar(100),
    subcat_code varchar(2),
    pdrp_flag varchar(1),
    pri_specialty_code varchar(10),
    pri_specialty_desc varchar(100),
    sec_specialty_code varchar(10),
    sec_specialty_desc varchar(100),
    cm_status_flag varchar(15),
    gpo varchar(100),
    dnp_flag varchar(1),
    product_1_dnc_flag varchar(1),
    product_2_dnc_flag varchar(1),
    a_specialty_group varchar(10),
    b_specialty_group varchar(10),
    c_specialty_group varchar(10),
    formulary_control varchar(20)
);


CREATE TABLE sandbox.mb_ic_demo_tp
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.concur_hcp_prev
(
    cust_id int,
    organization_name varchar(1),
    contact_type varchar(3),
    first_name varchar(80),
    middle_name varchar(80),
    last_name varchar(80),
    suffix varchar(10),
    npi varchar(100),
    address_line_1 varchar(160),
    address_line_2 varchar(160),
    city varchar(80),
    state varchar(2),
    zipcode varchar(5),
    sln varchar(25),
    sln_state varchar(2),
    dea varchar(18),
    affiliation varchar(1),
    credential varchar(10),
    healthcare_professional_status_code varchar(10)
);


CREATE TABLE sandbox.zs_teva_payer_master
(
    plan_code varchar(15),
    Final_Key_Controlling_Account varchar(100),
    Key_Parent_Account varchar(100),
    PBM varchar(100),
    Payer varchar(100),
    Plan varchar(100),
    State_Code varchar(50),
    AJOVY_TRx numeric(10,4),
    Aimovig_TRx numeric(10,4),
    Emgality_TRx numeric(10,4),
    aCGRP_TRx numeric(10,4),
    AJOVY_Share_Percent numeric(28,16),
    Aimovig_Share_Percent numeric(28,16),
    Emgality_Share_Percent numeric(28,16),
    Latest_Mth_AJOVY_TRx numeric(10,4),
    Latest_Mth_AJOVY_Share_Percent numeric(28,16),
    Lives_Covered_Total int,
    Ajovy_Formulary_Status varchar(100),
    Aimovig_Formulary_Status varchar(100),
    Emgality_Formulary_Status varchar(100),
    Plan_Payment_Type varchar(100),
    Priority_Account_flag varchar(100),
    Justification varchar(100),
    Plan_Mapping varchar(50)
);


CREATE TABLE sandbox.idl_best_address_2
(
    cust_id int,
    organization_name varchar(1),
    contact_type varchar(3),
    first_name varchar(80),
    middle_name varchar(80),
    last_name varchar(80),
    suffix varchar(10),
    npi varchar(100),
    address_line_1 varchar(160),
    address_line_2 varchar(160),
    city varchar(80),
    state varchar(2),
    zipcode varchar(5),
    sln varchar(25),
    sln_state varchar(2),
    dea varchar(18),
    affiliation varchar(1),
    credential varchar(10),
    healthcare_professional_status_code varchar(10),
    create_date date
);


CREATE TABLE sandbox.idl_best_address_non2
(
    cust_id int,
    organization_name varchar(1),
    contact_type varchar(3),
    first_name varchar(80),
    middle_name varchar(80),
    last_name varchar(80),
    suffix varchar(10),
    npi varchar(100),
    address_line_1 varchar(160),
    address_line_2 varchar(160),
    city varchar(80),
    state varchar(2),
    zipcode varchar(5),
    sln varchar(25),
    sln_state varchar(2),
    dea varchar(18),
    affiliation varchar(1),
    credential varchar(10),
    healthcare_professional_status_code varchar(10),
    create_date date
);


CREATE TABLE sandbox.prescriber_rx_adhoc_06282021
(
    ims_id varchar(10),
    payer_plan_number varchar(10),
    ims_client_number varchar(5),
    report_frequency varchar(20),
    ims_product_group varchar(10),
    basket_id int,
    data_date date,
    date date,
    sales_category varchar(2),
    tvcmid int,
    prescriber_first_name varchar(50),
    prescriber_last_name varchar(50),
    basket_name varchar(300),
    basket_type varchar(100),
    rollup_week date,
    rollup_month date,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    unnormalized_nrx_count float,
    unnormalized_trx_count float,
    market_name varchar(75),
    payer_name varchar(100),
    plan_name varchar(100),
    pbm_name varchar(100),
    model varchar(100),
    payment_method varchar(250),
    ims_specialty varchar(10),
    ims_rx_type varchar(1),
    ims_supplemental_data varchar(20),
    ims_zip_other varchar(10),
    ims_report_number_cnt varchar(5),
    cnt_file_id int,
    cnt_record_id int,
    ims_report_number_qty varchar(5),
    qty_file_id int,
    qty_record_id int,
    rollup_flag char(1),
    indication varchar(20)
);


CREATE TABLE sandbox."IQVIA OPTUM OUTLETS11032020"
(
    "Outlet #" int,
    Active varchar(50),
    PRE int,
    Name varchar(53),
    "10/2/2020 12:00:00 AM" varchar(50)
);


CREATE TABLE sandbox.RELIANCE_PRODUCT_MODEL
(
    Market varchar(50),
    "Source Name" varchar(50),
    "Product Name" varchar(63),
    "Product Description" varchar(107),
    "Manufacturer Name" varchar(50)
);


CREATE TABLE sandbox.prescriber_rx_adhoc_12022020
(
    ims_id varchar(10),
    payer_plan_number varchar(10),
    ims_client_number varchar(5),
    report_frequency varchar(20),
    ims_product_group varchar(10),
    basket_id int,
    data_date date,
    date date,
    sales_category varchar(2),
    tvcmid int,
    prescriber_first_name varchar(50),
    prescriber_last_name varchar(50),
    basket_name varchar(300),
    basket_type varchar(100),
    rollup_week date,
    rollup_month date,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    unnormalized_nrx_count float,
    unnormalized_trx_count float,
    market_name varchar(75),
    payer_name varchar(100),
    plan_name varchar(100),
    pbm_name varchar(100),
    model varchar(100),
    payment_method varchar(250),
    ims_specialty varchar(10),
    ims_rx_type varchar(1),
    ims_supplemental_data varchar(20),
    ims_zip_other varchar(10),
    ims_report_number_cnt varchar(5),
    cnt_file_id int,
    cnt_record_id int,
    ims_report_number_qty varchar(5),
    qty_file_id int,
    qty_record_id int,
    rollup_flag char(1),
    indication varchar(20)
);


CREATE TABLE sandbox.ref_rptng_mrkts
(
    basket_id int,
    basket_name varchar(300),
    basket_type varchar(100),
    status varchar(1),
    geo_summary_include varchar(1),
    presc_summary_include varchar(1),
    market_share_market_id int,
    market_share_brand_id int,
    rptg_decile_attribute_type varchar(100),
    rptg_decile_attribute_prod_id int,
    rptg_segment_attribute_type varchar(100),
    rptg_segment_attribute_prod_id int
);


CREATE TABLE sandbox.archer_zip_terr
(
    zip_code varchar(5),
    city varchar(50),
    state_code varchar(2),
    territory_number varchar(10),
    territory_name varchar(100),
    area_name varchar(50),
    region_name varchar(50),
    mirror_flag varchar(5),
    sales_force_id varchar(5),
    region_number varchar(8),
    area_number varchar(8)
);


CREATE TABLE sandbox.archer_target_data
(
    territory varchar(10),
    geography varchar(100),
    region varchar(10),
    tvcmid int,
    ims_id varchar(10),
    npi varchar(20),
    decile varchar(5),
    vmat2_12_mth varchar(10),
    pdrp_flag varchar(5),
    last_name varchar(50),
    first_name varchar(50),
    specialty varchar(10),
    address varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5)
);


CREATE TABLE sandbox."SYNEOS TERRs MISSING IMS IDs"
(
    "SYNEOS TERR" varchar(50),
    "Count of Missing IMS IDs" int
);


CREATE TABLE sandbox.newman_products
(
    sfa varchar(5),
    cne varchar(5),
    hcp varchar(5),
    consumer varchar(10),
    item_id varchar(25),
    product_line varchar(20),
    product_name varchar(100),
    Organization varchar(20),
    Description varchar(1000),
    expiration_date date,
    deleted_date date,
    status varchar(15),
    approval_number varchar(10),
    available_qty int,
    category varchar(50),
    cost numeric(10,2)
);


CREATE TABLE sandbox.ic_rx_bkp
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.rptng_approv_email_05022021
(
    veeva_sent_email_id varchar(36),
    sent_email_id varchar(160),
    product varchar(2600),
    date_sent timestamptz,
    status varchar(9),
    failure_message varchar(510),
    veeva_account_id varchar(36),
    tvcmid int,
    veeva_call_id varchar(36),
    call_id varchar(80),
    sender_email varchar(160),
    territory varchar(200),
    recipient_email varchar(160),
    click_count float,
    open_count float,
    last_open_date timestamptz,
    valid_consent varchar(5),
    delivered varchar(1),
    opened varchar(1),
    dropped varchar(1),
    clicked varchar(1),
    downloaded varchar(1),
    viewed varchar(1),
    template_id varchar(36),
    template_name varchar(80),
    event_msg_vod__c varchar(65000),
    click_url_vod__c varchar(510),
    subject varchar(255)
);


CREATE TABLE sandbox.ic_rx_mar2021
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_mar2021
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.payer_test1
(
    activity_id varchar(64),
    federation_id varchar(200),
    contact varchar(200),
    source_name varchar(100),
    "datetime" timestamp,
    trackback_id varchar(200),
    previous_activity varchar(64),
    level_name varchar(64),
    activity_role_name varchar(100),
    type_name varchar(100),
    native_type varchar(200),
    details varchar(200),
    line_item_id varchar(64),
    brand_name varchar(200),
    activity varchar(200),
    line_item_datetime timestamp,
    line_item_previous_line_item varchar(200),
    line_item_trackback_id varchar(200),
    line_item_details varchar(200),
    line_item_type_name varchar(100),
    line_item_native_type varchar(200),
    basket_id varchar(64),
    web_url varchar(5000)
);


CREATE TABLE sandbox.ftf_health_plan_geography
(
    health_plan_id varchar(6),
    operating_state varchar(2),
    lives_coverage int,
    file_id int,
    record_id int
);


CREATE TABLE sandbox.ftf_restrictions
(
    health_plan_id varchar(64),
    drug_id varchar(64),
    restriction_detail_id varchar(64),
    restriction_code varchar(64),
    formulary_entry_restriction_id varchar(64),
    restriction_detail_text varchar(250),
    restriction_addtnl_information_1 varchar(1000),
    restriction_addtnl_information_2 varchar(1000),
    record_id int,
    file_id int
);


CREATE TABLE sandbox.ims_plan_xref
(
    payer_num varchar(6),
    payer_name varchar(100),
    plan_num varchar(4),
    payer_plan_num varchar(10),
    plan_name varchar(100),
    model varchar(10),
    city varchar(30),
    hq_state varchar(2),
    operating_state varchar(2),
    months_with_data varchar(4),
    file_id int,
    record_id int
);


CREATE TABLE sandbox.addr
(
    tvcmid int,
    address_id int,
    address_type varchar(10),
    address_type_name varchar(50),
    address_line_1 varchar(80),
    address_line_2 varchar(80),
    county varchar(40),
    city varchar(40),
    state varchar(2),
    state_name varchar(50),
    country_code varchar(3),
    country_name varchar(50),
    zip5_postal_code varchar(5),
    zip4_postal_extension_code varchar(4),
    address_status varchar(10),
    address_status_name varchar(50),
    address_effective_date timestamp,
    msa_cbsa varchar(5),
    fips_state_code varchar(2),
    fips_state_description varchar(50),
    fips_county_code varchar(3),
    fips_county_description varchar(50),
    deliverability_confidence varchar(10),
    address_setting_type_code varchar(10),
    address_setting_type_description varchar(50),
    address_category_code varchar(10),
    address_category_description varchar(50),
    address_latitude varchar(20),
    address_longitude varchar(20),
    postal_barcode varchar(10),
    single_address_indicator varchar(1),
    practice_location_confidence_indicator varchar(10),
    practice_location_rank varchar(10),
    validation_message varchar(100),
    created_by varchar(50),
    created_date timestamp,
    updated_by varchar(50),
    updated_date timestamp,
    file_id int,
    record_id int
);


CREATE TABLE sandbox.ps_process_run_tbl
(
    process_id int,
    process_name varchar(64),
    date_run date
);


CREATE TABLE sandbox.ps_process_audit_tbl
(
    process_id int NOT NULL,
    cycle_id int,
    date_run date,
    insert_time timestamp,
    inserted_by varchar(64),
    modified_time timestamp,
    modified_by varchar(64)
)
PARTITION BY (ps_process_audit_tbl.process_id);


CREATE TABLE sandbox.iqvia_pbm_preprocessed
(
    iqvia_plan_code varchar(10),
    iqvia_pbm varchar(100),
    xref_to varchar(10),
    iqvia_plan_name varchar(100),
    cycle_id int,
    modified_time timestamptz(6),
    modified_by varchar(3)
);


CREATE TABLE sandbox.ftf_health_plans_preprocessed
(
    ftf_health_plan_fid varchar(6),
    ftf_health_plan_name varchar(100),
    ftf_provider_fid varchar(6),
    ftf_provider_name varchar(250),
    parent_id varchar(6),
    ftf_parent_name varchar(250),
    ftf_health_plan_type varchar(250),
    pref_brand_tier varchar(64),
    plan_lives int,
    paytype varchar(64),
    cycle_id int,
    modified_time timestamptz(6),
    modified_by varchar(3)
);


CREATE TABLE sandbox.ftf_formularies_preprocessed
(
    drug_seq int,
    ftf_health_plan_fid varchar(6),
    drug_id varchar(6),
    tier_code varchar(2),
    restrictions varchar(20),
    reason_code varchar(100),
    reason_code_description varchar(100),
    pharmacy_status varchar(80),
    check_blank_pharmstat varchar(80),
    cycle_id int,
    modified_time timestamptz(6),
    modified_by varchar(3)
);


CREATE TABLE sandbox.ftf_pbms_preprocessed
(
    ftf_health_plan_fid varchar(6),
    pbm_id varchar(6),
    pbm varchar(250),
    pbm_function_id varchar(6),
    pbm_function varchar(250),
    cycle_id int,
    modified_time timestamptz(6),
    modified_by varchar(3)
);


CREATE TABLE sandbox.ftf_restrictions_preprocessed_v2
(
    ftf_health_plan_fid varchar(6),
    drug_id varchar(6),
    drug_seq int,
    MAX varchar(6),
    botox int,
    step int,
    pres_pa int,
    pat_pa int,
    med_rec int,
    unspec int,
    cycle_id int,
    modified_time timestamptz(6),
    modified_by varchar(3)
);


CREATE TABLE sandbox.raw_ftf_formularies
(
    health_plan_id varchar(6),
    drug_id varchar(6),
    tier_code varchar(2),
    restrictions varchar(20),
    reason_code varchar(100),
    reason_code_description varchar(100),
    pharmacy_status varchar(20)
);


CREATE TABLE sandbox.raw_ftf_health_plans
(
    formularyf_id varchar(6),
    provider_id varchar(6),
    provider varchar(250),
    health_plan_id varchar(6),
    health_plan varchar(100),
    parent_id varchar(6),
    parent varchar(250),
    national_lives_count int,
    plan_type_name varchar(250),
    preferred_brand_tier varchar(64)
);


CREATE TABLE sandbox.raw_ftf_pbms
(
    health_plan_id varchar(6),
    pbm_id varchar(6),
    pbm varchar(250),
    pbm_function_id varchar(6),
    pbm_function varchar(250)
);


CREATE TABLE sandbox.raw_iqvia_plan
(
    payer_num varchar(6),
    payer_name varchar(100),
    plan_num varchar(4),
    payer_plan_num varchar(10),
    plan_name varchar(100),
    model varchar(10),
    city varchar(30),
    hq_state varchar(2),
    operating_state varchar(2),
    months_with_data varchar(4)
);


CREATE TABLE sandbox.raw_iqvia_pbm
(
    pbm_name varchar(100),
    payer_plan_num varchar(10),
    xref_to_payer_plan_num varchar(10),
    ipd_id varchar(10),
    ipd_type varchar(10),
    plan_name varchar(100),
    pbm_num varchar(6),
    ims_processor_num varchar(10)
);


CREATE TABLE sandbox.raw_teva_ims_bridge
(
    payer_name varchar(50),
    code varchar(10),
    name varchar(50),
    state varchar(5),
    comments varchar(50),
    plan_id varchar(10),
    plan_name varchar(100),
    provider_name varchar(100),
    plan_type_name varchar(20)
);


CREATE TABLE sandbox.afm_cycle1_teva_hcp_report
(
    npi varchar(10),
    zs_spec_desc_md varchar(25),
    specialty_name varchar(100),
    specialty_group varchar(25),
    pff_ctt_vol varchar(15),
    pff_en varchar(10),
    pff_en_quintile varchar(15),
    pff_affinity varchar(15),
    pr_ctt_vol varchar(15),
    pr_en varchar(10),
    pr_en_quintile varchar(15),
    pr_affinity varchar(15),
    pi_ctt_vol varchar(15),
    pi_en varchar(10),
    pi_en_quintile varchar(15),
    pi_affinity varchar(15),
    dph_ctt_vol varchar(15),
    dph_en varchar(10),
    dph_en_quintile varchar(15),
    dph_affinity varchar(15),
    dpl_ctt_vol varchar(15),
    dpl_en varchar(10),
    dpl_en_quintile varchar(15),
    dpl_affinity varchar(15),
    drt_ctt_vol varchar(15),
    drt_en varchar(10),
    drt_en_quintile varchar(15),
    drt_affinity varchar(15),
    top_channels varchar(15),
    pp_access_rating varchar(20),
    npp_access_rating varchar(20),
    peer_offer_en varchar(15),
    copay_offer_en varchar(15),
    sample_offer_en varchar(15),
    voucher_offer_en varchar(20)
);


CREATE TABLE sandbox.sample_table
(
    a int
);


CREATE TABLE sandbox.presr_rx_resp_07172021
(
    ims_id varchar(10),
    payer_plan_number varchar(10),
    ims_client_number varchar(5),
    report_frequency varchar(20),
    ims_product_group varchar(10),
    basket_id int,
    data_date date,
    date date,
    sales_category varchar(2),
    tvcmid int,
    prescriber_first_name varchar(50),
    prescriber_last_name varchar(50),
    basket_name varchar(300),
    basket_type varchar(100),
    rollup_week date,
    rollup_month date,
    nrx_count numeric(18,3),
    trx_count numeric(18,3),
    nrx_quantity numeric(18,3),
    trx_quantity numeric(18,3),
    unnormalized_nrx_count numeric(18,3),
    unnormalized_trx_count numeric(18,3),
    market_name varchar(75),
    payer_name varchar(100),
    plan_name varchar(100),
    pbm_name varchar(100),
    model varchar(100),
    payment_method varchar(250),
    ims_specialty varchar(10),
    ims_rx_type varchar(1),
    ims_supplemental_data varchar(20),
    ims_zip_other varchar(10),
    ims_report_number_cnt varchar(5),
    cnt_file_id int,
    cnt_record_id int,
    ims_report_number_qty varchar(5),
    qty_file_id int,
    qty_record_id int,
    rollup_flag char(1),
    indication varchar(20),
    pbm_parent_name varchar(100)
);


CREATE TABLE sandbox.sample_table1
(
    a int
);


CREATE TABLE sandbox.vid_npi
(
    vid varchar(25),
    npi_num varchar(15)
);


CREATE TABLE sandbox.has_pa_mapping
(
    has_pa int,
    pa_regex varchar(100),
    notes varchar(200),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (has_pa_mapping.file_id);


CREATE TABLE sandbox.calc_pbm_key_pbm_mapping
(
    calculated_pbm varchar(100),
    key_pbm varchar(100),
    added_by varchar(100),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (calc_pbm_key_pbm_mapping.file_id);


CREATE TABLE sandbox.calculated_pbm_config
(
    ftf_formulary_management_pbm_regex varchar(100),
    ftf_formulary_influencer_pbm_regex varchar(100),
    ftf_claims_processing_pbm_regex varchar(100),
    calculated_pbm_column varchar(100),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (calculated_pbm_config.file_id);


CREATE TABLE sandbox.key_controller_list
(
    ftf_health_plan_fid int,
    ftf_health_plan_name varchar(200),
    key_controlling_account varchar(100),
    key_controlling_plan_formulary varchar(100),
    key_controlling_parent varchar(100),
    payer_pbm varchar(100),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (key_controller_list.file_id);


CREATE TABLE sandbox.has_st_mapping_d1
(
    has_st int,
    st_regex varchar(100),
    notes varchar(100),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (has_st_mapping_d1.file_id);


CREATE TABLE sandbox.provider_override_default
(
    provider_id varchar(10),
    paytype_regex varchar(100),
    provider_name varchar(100),
    fill_in_iqvia_payer_name_if_no_bridge varchar(100),
    override_best_iqvia_payer varchar(100),
    fill_in_iqvia_pbm_if_no_bridge varchar(100),
    override_best_iqvia_pbm varchar(100),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (provider_override_default.file_id);


CREATE TABLE sandbox.delete_bridge_ftf_plan_types
(
    ftf_health_plan_name_regex varchar(200),
    iqvia_payer_name_regex varchar(100),
    iqvia_plan_name_regex varchar(200),
    delete_flag varchar(100),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (delete_bridge_ftf_plan_types.file_id);


CREATE TABLE sandbox.override_bridge_ftf_plan_types
(
    ftf_health_plan_name_regex varchar(200),
    iqvia_payer_name_regex varchar(100),
    iqvia_plan_name_regex varchar(200),
    override_ftf_health_plan_type varchar(100),
    override_precedence int NOT NULL,
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (override_bridge_ftf_plan_types.file_id);


CREATE TABLE sandbox.unspecified_rec_restriction
(
    code int,
    unspecified_restriction_flag varchar(100),
    restriction_detail_id varchar(64),
    notes varchar(200),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (unspecified_rec_restriction.file_id);


CREATE TABLE sandbox.medical_rec_restriction
(
    code int,
    medical_records_submission_required_flag varchar(100),
    restriction_detail_id varchar(64),
    notes varchar(200),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (medical_rec_restriction.file_id);


CREATE TABLE sandbox.step_restriction
(
    code int,
    step_category varchar(100),
    restriction_group varchar(200),
    notes varchar(200),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (step_restriction.file_id);


CREATE TABLE sandbox.botox_step_restriction
(
    code int,
    botox_step_flag varchar(100),
    restriction_group varchar(200),
    notes varchar(200),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (botox_step_restriction.file_id);


CREATE TABLE sandbox.drug_assignments
(
    drug_id int,
    drug_seq int,
    product varchar(64),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (drug_assignments.file_id);


CREATE TABLE sandbox.ftf_pbm_functions
(
    pbm_function_id int,
    pbm_function varchar(64),
    notes varchar(200),
    used int,
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (ftf_pbm_functions.file_id);


CREATE TABLE sandbox.ftf_override_plan
(
    ftf_health_planid varchar(64),
    paytype_index varchar(64),
    notes varchar(200),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (ftf_override_plan.file_id);


CREATE TABLE sandbox.ftf_override_provider
(
    provider_id varchar(64),
    paytype_index varchar(64),
    notes varchar(200),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (ftf_override_provider.file_id);


CREATE TABLE sandbox.ftf_paytype_paytypeindex
(
    paytype_index varchar(64),
    paytype varchar(64),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (ftf_paytype_paytypeindex.file_id);


CREATE TABLE sandbox.ftf_plans_paytypeindex
(
    ftf_health_plantype varchar(64),
    paytype_index int,
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (ftf_plans_paytypeindex.file_id);


CREATE TABLE sandbox.iqvia_plans_discard
(
    payer_id varchar(64),
    notes varchar(200),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (iqvia_plans_discard.file_id);


CREATE TABLE sandbox.model_paytype_map
(
    model varchar(64),
    paytype varchar(64),
    notes varchar(200),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (model_paytype_map.file_id);


CREATE TABLE sandbox.iqvia_paytypeindex
(
    paytype_index varchar(64),
    paytype varchar(64),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (iqvia_paytypeindex.file_id);


CREATE TABLE sandbox.iqvia_payer_paytype_override
(
    iqvia_payer_name varchar(200),
    iqvia_plan_name_regex varchar(200),
    paytype varchar(128),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (iqvia_payer_paytype_override.file_id);


CREATE TABLE sandbox.patient_pa_restriction
(
    code int,
    patient_prior_authorization_category varchar(100),
    restriction_detail_id varchar(100),
    notes varchar(200),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (patient_pa_restriction.file_id);


CREATE TABLE sandbox.pa_restriction
(
    code int,
    prescriber_prior_authorization_category varchar(100),
    restriction_detail_id varchar(100),
    notes varchar(200),
    file_id int NOT NULL,
    record_id int
)
PARTITION BY (pa_restriction.file_id);


CREATE TABLE sandbox.a_payer_Migrane_Market
(
    ims_id varchar(10),
    sorg_lvl varchar(1),
    sorg varchar(8),
    payment_method varchar(250),
    pbm_name varchar(100),
    payer_name varchar(100),
    plan_name varchar(100),
    mkt_id numeric(9,0),
    prod_grp varchar(50),
    teva_prod varchar(1),
    SubGroup varchar(1),
    trx_c1 numeric(21,3),
    trx_p1 numeric(21,3),
    trx_c3 numeric(21,3),
    trx_p3 numeric(21,3)
);


CREATE TABLE sandbox.iqvia_plan_preprocessed
(
    iqvia_payer_id varchar(6),
    iqvia_payer_name varchar(100),
    iqvia_plan_id varchar(4),
    iqvia_plan_code varchar(10),
    iqvia_plan_name varchar(100),
    model varchar(10),
    iqvia_pbm varchar(100),
    paytype varchar(128),
    paytype_index varchar(64),
    cycle_id numeric(18,6),
    modified_time timestamptz(6),
    modified_by varchar(3)
);


CREATE TABLE sandbox.raw_ftf_restrictions_v2
(
    health_plan_id varchar(6),
    drug_id varchar(7),
    restriction_code varchar(20),
    restriction_details_id varchar(6),
    restriction_details_text varchar(500),
    restriction_details_information_1 varchar(4000),
    restriction_details_information_2 varchar(8000),
    step_count varchar(50),
    pa_form varchar(4000),
    indication varchar(255),
    grouped_restriction_level varchar(255)
);


CREATE TABLE sandbox.raw_iqvia_plan_v2
(
    payer_id varchar(6),
    payer_name varchar(100),
    plan_id varchar(7),
    payer_plan_id varchar(10),
    plan_name varchar(35),
    model varchar(10),
    city varchar(30),
    hq_state varchar(2),
    operating_state varchar(2),
    months_with_data varchar(4)
);


CREATE TABLE sandbox.a_prodgrp_a
(
    mkt_name varchar(100),
    mkt_id numeric(8,0),
    mkt_rpt_flag varchar(1),
    bfs_name varchar(100),
    bfs_id numeric(8,0),
    brand varchar(50),
    teva_prod varchar(1),
    mkt_basket varchar(1),
    prod_grp varchar(50)
);


CREATE TABLE sandbox.a_prodgrp
(
    mkt_name varchar(100),
    mkt_id numeric(9,0),
    mkt_rpt_flag varchar(1),
    bfs_name varchar(100),
    bfs_id numeric(9,0),
    brand varchar(50),
    teva_prod varchar(1),
    mkt_basket varchar(1),
    prod_grp varchar(50)
);


CREATE TABLE sandbox.a_roster_denorm
(
    sales_force_id varchar(5),
    terr varchar(8),
    terr_name varchar(50),
    reg varchar(8),
    reg_name varchar(50),
    area varchar(8),
    area_name varchar(50),
    nation varchar(4),
    nation_name varchar(6)
);


CREATE TABLE sandbox.a_roster_norm
(
    sales_force_id varchar(5),
    sorg_lvl varchar(1),
    sorg varchar(8),
    sorg_name varchar(50),
    terr varchar(8),
    terr_name varchar(50),
    reg varchar(8),
    reg_name varchar(50),
    area varchar(8),
    area_name varchar(50),
    nation varchar(4),
    nation_name varchar(6)
);


CREATE TABLE sandbox.a_align_payer_rollup
(
    ims_id varchar(10),
    sorg_lvl varchar(1),
    sorg varchar(8)
);


CREATE TABLE sandbox.a_payer_rollup_temp
(
    ims_id varchar(10),
    sorg_lvl varchar(1),
    sorg varchar(8),
    payment_method varchar(250),
    pbm_name varchar(100),
    payer_name varchar(100),
    plan_name varchar(100),
    mkt_id numeric(9,0),
    prod_grp varchar(50),
    teva_prod varchar(1),
    SubGroup varchar(1),
    trx_c1 numeric(21,3),
    trx_p1 numeric(21,3),
    trx_c3 numeric(21,3),
    trx_p3 numeric(21,3)
);


CREATE TABLE sandbox.a_payer_rollup
(
    ims_id varchar(10),
    sorg_lvl varchar(1),
    sorg varchar(8),
    payment_method varchar(250),
    pbm_name varchar(100),
    payer_name varchar(100),
    plan_name varchar(100),
    mkt_id numeric(9,0),
    prod_grp varchar(50),
    teva_prod varchar(1),
    SubGroup varchar(1),
    trx_c1 numeric(21,3),
    trx_p1 numeric(21,3),
    trx_c3 numeric(21,3),
    trx_p3 numeric(21,3)
);


CREATE TABLE sandbox.a_tmp_a
(
    sorg_lvl varchar(1),
    sorg varchar(8),
    payment_method varchar(250),
    pbm_name varchar(100),
    payer_name varchar(100),
    plan_name varchar(100),
    mkttrx_c3 numeric(21,3),
    mkttrx_p3 numeric(21,3),
    mkttrx_A_c3 numeric(21,3),
    mkttrx_A_p3 numeric(21,3)
);


CREATE TABLE sandbox.a_tmp_b
(
    sorg_lvl varchar(1),
    sorg varchar(8),
    payment_method varchar(250),
    pbm_name varchar(100),
    payer_name varchar(100),
    plan_name varchar(100),
    mkttrx_c3 numeric(21,3),
    mkttrx_p3 numeric(21,3),
    mkttrx_A_c3 numeric(21,3),
    mkttrx_A_p3 numeric(21,3),
    Total numeric(21,3),
    RunningTotal numeric(21,3)
);


CREATE TABLE sandbox.a_top_plans_rollup
(
    sorg_lvl varchar(1),
    sorg varchar(8),
    payment_method varchar(250),
    pbm_name varchar(100),
    payer_name varchar(100),
    plan_name varchar(100),
    mkttrx_c3 numeric(21,3),
    mkttrx_p3 numeric(21,3),
    mkttrx_A_c3 numeric(21,3),
    mkttrx_A_p3 numeric(21,3),
    Total numeric(21,3),
    RunningTotal numeric(21,3)
);


CREATE TABLE sandbox.a_plans_by_geo
(
    sorg_lvl varchar(1),
    sorg varchar(8),
    payment_method varchar(250),
    pbm_name varchar(100),
    payer_name varchar(100),
    plan_name varchar(100),
    mkt_id numeric(9,0),
    prod_grp varchar(50),
    teva_prod varchar(1),
    mkttrx_c3 numeric(21,3),
    Total numeric(21,3),
    mkttrx_p3 numeric(21,3),
    mkttrx_A_c3 numeric(21,3),
    mkttrx_A_p3 numeric(21,3),
    trx_c1 numeric(21,3),
    trx_p1 numeric(21,3),
    trx_c3 numeric(21,3),
    trx_p3 numeric(21,3)
);


CREATE TABLE sandbox.parent_call_id_xref
(
    id varchar(18),
    parent_call_vod__c varchar(18)
);


CREATE TABLE sandbox.ic_rx_adhoc
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_target_adhoc
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    row_create_date date
);


CREATE TABLE sandbox.ic_demo_adhoc
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.ic_rx_factor_adhoc
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    rollup_month date,
    multiplier float,
    approved_trx_count float,
    total_trx_count float
);


CREATE TABLE sandbox.ic_rx_jul2021
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_jul2021
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.ic_rx_aug2021
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_aug2021
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.suggestions_targets
(
    veeva_account_id varchar(18),
    tvcmid int,
    territory_number varchar(8),
    employee_id varchar(100),
    product varchar(9)
);


CREATE TABLE sandbox.AJOVYDecile2021
(
    IMS_ID varchar(10),
    Decile varchar(10),
    TVCMID int,
    Effective_EndDate varchar(20)
);


CREATE TABLE sandbox.afm_cycle2_teva_hcp_report
(
    NPI varchar(10),
    CONTRIBUTOR_ID varchar(18),
    PFF_CTT_VOL varchar(2),
    PFF_EN varchar(3),
    PFF_EN_QUINTILE varchar(2),
    PFF_AFFINITY varchar(2),
    PFF_CTBR_CTT_VOL varchar(4),
    PFF_CTBR_EN varchar(3),
    PR_CTT_VOL varchar(2),
    PR_EN varchar(3),
    PR_EN_QUINTILE varchar(2),
    PR_AFFINITY varchar(2),
    PR_CTBR_CTT_VOL varchar(4),
    PR_CTBR_EN varchar(3),
    PI_CTT_VOL varchar(2),
    PI_EN varchar(3),
    PI_EN_QUINTILE varchar(2),
    PI_AFFINITY varchar(2),
    PI_CTBR_CTT_VOL varchar(4),
    PI_CTBR_EN varchar(3),
    DPH_CTT_VOL varchar(2),
    DPH_EN varchar(3),
    DPH_EN_QUINTILE varchar(2),
    DPH_AFFINITY varchar(2),
    DPH_CTBR_CTT_VOL varchar(4),
    DPH_CTBR_EN varchar(3),
    DPL_CTT_VOL varchar(2),
    DPL_EN varchar(3),
    DPL_EN_QUINTILE varchar(2),
    DPL_AFFINITY varchar(2),
    DPL_CTBR_CTT_VOL varchar(4),
    DPL_CTBR_EN varchar(3),
    DRT_CTT_VOL varchar(2),
    DRT_EN varchar(3),
    DRT_EN_QUINTILE varchar(2),
    DRT_AFFINITY varchar(2),
    DRT_CTBR_CTT_VOL varchar(4),
    DRT_CTBR_EN varchar(3),
    Top_Channels varchar(25),
    PP_ACCESS_RATING varchar(20),
    NPP_ACCESS_RATING varchar(20),
    PEER_OFFER_EN varchar(2),
    COPAY_OFFER_EN varchar(2),
    SAMPLE_OFFER_EN varchar(2),
    VOUCHER_OFFER_EN varchar(2)
);


CREATE TABLE sandbox.ic_rx_sep2021
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_sep2021
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.view2_psd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    EVoucher_Card int,
    CRx_Copay_Covered int,
    Crx_PA_NDC_Block int,
    Denail_Conversion_CofC int,
    run_date date
);


CREATE TABLE sandbox.view3_psd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    Product_Not_Covered numeric(36,18),
    PA_or_Step int,
    CRx_Other int,
    Percent_Demand numeric(103,52),
    run_date date
);


CREATE TABLE sandbox.view4_1_psd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    PFS_Covered int,
    AI_Covered int,
    Percent_PFS_Covered numeric(54,18),
    Percent_AI_Covered numeric(54,18),
    run_date date
);


CREATE TABLE sandbox.view4_2_psd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    PFS_Full_WAC_Buy_Down int,
    AI_Full_WAC_Buy_Down int,
    Percent_PFS_Full_WAC_Buy_Down numeric(54,18),
    Percent_AI_Full_WAC_Buy_Down numeric(54,18),
    run_date date
);


CREATE TABLE sandbox.view5_psd
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    Average_Buy_Down_Covered_Units numeric(39,21),
    Average_Full_WAC_BuyDown_Units numeric(39,21),
    run_date date
);


CREATE TABLE sandbox.npa
(
    Product varchar(500),
    Metric varchar(500),
    Oct_2015 numeric(19,3),
    Nov_2015 numeric(19,3),
    Dec_2015 numeric(19,3),
    Jan_2016 numeric(19,3),
    Feb_2016 numeric(19,3),
    Mar_2016 numeric(19,3),
    Apr_2016 numeric(19,3),
    May_2016 numeric(19,3),
    Jun_2016 numeric(19,3),
    Jul_2016 numeric(19,3),
    Aug_2016 numeric(19,3),
    Sep_2016 numeric(19,3),
    Oct_2016 numeric(19,3),
    Nov_2016 numeric(19,3),
    Dec_2016 numeric(19,3),
    Jan_2017 numeric(19,3),
    Feb_2017 numeric(19,3),
    Mar_2017 numeric(19,3),
    Apr_2017 numeric(19,3),
    May_2017 numeric(19,3),
    Jun_2017 numeric(19,3),
    Jul_2017 numeric(19,3),
    Aug_2017 numeric(19,3),
    Sep_2017 numeric(19,3),
    Oct_2017 numeric(19,3),
    Nov_2017 numeric(19,3),
    Dec_2017 numeric(19,3),
    Jan_2018 numeric(19,3),
    Feb_2018 numeric(19,3),
    Mar_2018 numeric(19,3),
    Apr_2018 numeric(19,3),
    May_2018 numeric(19,3),
    Jun_2018 numeric(19,3),
    Jul_2018 numeric(19,3),
    Aug_2018 numeric(19,3),
    Sep_2018 numeric(19,3),
    Oct_2018 numeric(19,3),
    Nov_2018 numeric(19,3),
    Dec_2018 numeric(19,3),
    Jan_2019 numeric(19,3),
    Feb_2019 numeric(19,3),
    Mar_2019 numeric(19,3),
    Apr_2019 numeric(19,3),
    May_2019 numeric(19,3),
    Jun_2019 numeric(19,3),
    Jul_2019 numeric(19,3),
    Aug_2019 numeric(19,3),
    Sep_2019 numeric(19,3),
    Oct_2019 numeric(19,3),
    Nov_2019 numeric(19,3),
    Dec_2019 numeric(19,3),
    Jan_2020 numeric(19,3),
    Feb_2020 numeric(19,3),
    Mar_2020 numeric(19,3),
    Apr_2020 numeric(19,3),
    May_2020 numeric(19,3),
    Jun_2020 numeric(19,3),
    Jul_2020 numeric(19,3),
    Aug_2020 numeric(19,3),
    Sep_2020 numeric(19,3),
    Oct_2020 numeric(19,3),
    Nov_2020 numeric(19,3),
    Dec_2020 numeric(19,3),
    Jan_2021 numeric(19,3),
    Feb_2021 numeric(19,3),
    Mar_2021 numeric(19,3),
    Apr_2021 numeric(19,3),
    May_2021 numeric(19,3),
    Jun_2021 numeric(19,3),
    Jul_2021 numeric(19,3),
    Aug_2021 numeric(19,3),
    Sep_2021 numeric(19,3)
);


CREATE TABLE sandbox.npa_method_of_payment
(
    ATC3 varchar(500),
    Product varchar(500),
    Brand_Generic varchar(500),
    Combined_Molecule varchar(500),
    Corporation varchar(500),
    Metric varchar(500),
    Oct_2018 numeric(19,3),
    Nov_2018 numeric(19,3),
    Dec_2018 numeric(19,3),
    Jan_2019 numeric(19,3),
    Feb_2019 numeric(19,3),
    Mar_2019 numeric(19,3),
    Apr_2019 numeric(19,3),
    May_2019 numeric(19,3),
    Jun_2019 numeric(19,3),
    Jul_2019 numeric(19,3),
    Aug_2019 numeric(19,3),
    Sep_2019 numeric(19,3),
    Oct_2019 numeric(19,3),
    Nov_2019 numeric(19,3),
    Dec_2019 numeric(19,3),
    Jan_2020 numeric(19,3),
    Feb_2020 numeric(19,3),
    Mar_2020 numeric(19,3),
    Apr_2020 numeric(19,3),
    May_2020 numeric(19,3),
    Jun_2020 numeric(19,3),
    Jul_2020 numeric(19,3),
    Aug_2020 numeric(19,3),
    Sep_2020 numeric(19,3),
    Oct_2020 numeric(19,3),
    Nov_2020 numeric(19,3),
    Dec_2020 numeric(19,3),
    Jan_2021 numeric(19,3),
    Feb_2021 numeric(19,3),
    Mar_2021 numeric(19,3),
    Apr_2021 numeric(19,3),
    May_2021 numeric(19,3),
    Jun_2021 numeric(19,3),
    Jul_2021 numeric(19,3),
    Aug_2021 numeric(19,3),
    Sep_2021 numeric(19,3)
);


CREATE TABLE sandbox.shared_solutions
(
    Year int,
    Month varchar(50),
    HD_TD varchar(50),
    Total_PSRF_submitted numeric(19,3),
    PSRF_with_Patient_Authorization numeric(19,3),
    Patient_authorizations_obtained_on_PSRF numeric(19,3),
    Patient_authorizations_obtained_on_follow_up numeric(19,3),
    PSRF_triaged_to_pharmacy numeric(19,3),
    Patients_converted numeric(19,3),
    Total_nurse_calls_completed numeric(19,3),
    Total_nurse_calls_due numeric(19,3)
);


CREATE TABLE sandbox.speaker_program_attendee
(
    Master_ID varchar(500),
    Participant_Name varchar(500),
    Program_ID varchar(500),
    Program_Topic varchar(5000),
    Program_Product varchar(500),
    Program_Start_Date date,
    Role varchar(500),
    Did_Attend varchar(500),
    Participant_Address varchar(500),
    Participant_City varchar(500),
    Participant_State varchar(500)
);


CREATE TABLE sandbox.speaker_program_non_reportable
(
    Program_Code varchar(500),
    Program_Date date,
    Product varchar(500),
    Non_Reportable_HCP varchar(500)
);


CREATE TABLE sandbox.speaker_program_data
(
    Client varchar(500),
    Brand varchar(500),
    Project varchar(500),
    Service_Type varchar(500),
    Program_Type varchar(500),
    Meeting_Code varchar(500),
    Meeting_Topic varchar(1000),
    Bf_Ln_Dn varchar(500),
    Meeting_Status varchar(500),
    Meeting_Status_2 varchar(500),
    Financial_Status varchar(500),
    Meeting_Review_Status varchar(500),
    Meeting_Date date,
    Request_Date date,
    Speaker_PT_wo_Honoraria numeric(19,3),
    Honoraria numeric(19,3),
    A_V numeric(19,3),
    F_B numeric(19,3),
    Venue_PT numeric(19,3),
    Unmet_Chgs numeric(19,3),
    Other_PT numeric(19,3),
    Actual_PT numeric(19,3),
    Actual_MF numeric(19,3),
    Actual_PT_MF numeric(19,3),
    Adl_Cmtd_PT numeric(19,3),
    Adl_Cmtd_MF numeric(19,3),
    Adl_Cmtd_PT_MF numeric(19,3),
    Total_Cmtd_PT numeric(19,3),
    Total_Cmtd_MF numeric(19,3),
    Total_Spend numeric(19,3),
    Venue_Name varchar(500),
    Venue_PP_Id varchar(500),
    Venue_Zip varchar(500),
    Venue_State varchar(500),
    Venue_City varchar(500),
    Meeting_Year varchar(500),
    Meeting_Qtr varchar(500),
    Meeting_Month varchar(500),
    Request_Month varchar(500),
    Lead_Time_Days varchar(500),
    Lead_Time_Grouped varchar(500),
    New_Lead_Time_Grouped varchar(500),
    Lead_Time_Weeks varchar(500),
    Cancellation_Reason varchar(500),
    Cancellation_Date date,
    Meeting_Date_and_Time timestamp,
    Est_Participants int,
    Host_Name varchar(500),
    Territory varchar(500),
    Num_of_Speakers int,
    Meeting_ID varchar(500),
    Total_RSVP_Role_Attendee_RSVP_Status_Yes int,
    Total_Attendance_Participant_Role_Attendee int,
    Att_Specialty_Allergy int,
    Attendance_grtr_0 varchar(500),
    Centris_Meeting_Status varchar(500),
    Placeholder_Profiles varchar(500),
    Non_Profiled varchar(500),
    Is_placeholder_Counts_NonProfiled_Counts varchar(500),
    Product varchar(500),
    Budget_Name varchar(500),
    Budget numeric(19,3),
    LocationType varchar(500),
    Type_of_Speaker_Used varchar(500),
    ClientEventType varchar(500),
    Speaker_1 varchar(500),
    Speaker_1_status varchar(500),
    Speaker_1_Master_ID varchar(500),
    Speaker_1_Tier varchar(500),
    Speaker_2 varchar(500),
    Speaker_2_status varchar(500),
    Speaker_2_Master_ID varchar(500),
    Speaker_2_Tier varchar(500),
    Speaker_3 varchar(500),
    Speaker_3_status varchar(500),
    Speaker_3_Master_ID varchar(500),
    Speaker_3_Tier varchar(500),
    Speaker_4 varchar(500),
    Speaker_4_status varchar(500),
    Speaker_4_Master_ID varchar(500),
    Speaker_4_Tier varchar(500),
    Date_Changes int,
    Speaker_Changes int,
    Venue_Changes int,
    Meetings_with_Changes varchar(500),
    Setup_Complete_Date varchar(500),
    Speaker_1_pp_id varchar(500),
    Speaker_2_pp_id varchar(500),
    Speaker_3_pp_id varchar(500),
    Speaker_4_pp_id varchar(500),
    Business_Days_to_SUC varchar(500),
    Area varchar(500),
    Region varchar(500),
    Total_Honoraria_Centris_Estimate numeric(19,3),
    Cancellation_Date_Time timestamp,
    Programs_Submitted int,
    Cancelled int,
    Display varchar(500)
);


CREATE TABLE sandbox.website_session
(
    Brand varchar(50),
    Month date,
    Sessions numeric(19,3),
    Pageviews numeric(19,3)
);


CREATE TABLE sandbox.website_events
(
    Brand varchar(50),
    Month date,
    Event_Label varchar(500),
    Total_events numeric(19,3),
    Unique_events numeric(19,3)
);


CREATE TABLE sandbox.website_ksa_mapping
(
    Event_Label varchar(500),
    Name_of_Action varchar(500),
    KPI_Group2 varchar(500)
);


CREATE TABLE sandbox.view1_psd_new
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    Demand_units numeric(34,15),
    Covered_Coupon_Units int,
    Full_Buy_Down_Units int
);


CREATE TABLE sandbox.view1_psd_old
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    Demand_units numeric(34,15),
    Covered_Coupon_Units int,
    Full_WAC_Buy_Down_Units int
);


CREATE TABLE sandbox.ic_rx_nov2021
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_nov2021
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.activity_line_level_v3
(
    activityid varchar(100),
    level varchar(100),
    basket_name varchar(50)
);


CREATE TABLE sandbox.relay_health_evoucher_nov
(
    RPT_BRAND_NAME varchar(500),
    NDC varchar(500),
    FDB_LABEL_NAME varchar(500),
    REPORT_MONTH date,
    FILL_NUMBER int,
    FILL_TYPE varchar(500),
    CLAIM_STATUS varchar(500),
    PHARMACY_STATE_NAME varchar(500),
    EVOUCHER_STATUS_DESC varchar(500),
    COPAY_RANGE_DISPLAY_ORDER int,
    COPAY_RANGE varchar(500),
    DAYS_SUPPLY int,
    QTY_DISPENSED numeric(19,3),
    ORIGINAL_COPAY numeric(19,3),
    EVOUCHER_AMOUNT numeric(19,3),
    NEW_COPAY numeric(19,3),
    PATIENT_STATUS varchar(500),
    PHARMACY_STATE_TYPE varchar(500),
    PATIENT_AGE_RANGE varchar(500),
    STARTER_BENEFIT_IND varchar(500),
    PPE_TRAN_ID varchar(500),
    PHARMACY_ZIPSEC varchar(500),
    BRD_ISSUE_FLAG varchar(500)
);


CREATE TABLE sandbox.relay_health_dc_nov
(
    DRUG_TRADE_NAME varchar(500),
    NDC varchar(500),
    PAID_OR_REVERSED varchar(500),
    STATE varchar(500),
    QUANTITY numeric(19,3),
    DAYS_SUPPLY varchar(500),
    FILL_NUMBER int,
    FILL_TYPE varchar(500),
    DATE_OF_SERVICE date,
    DATE_PROCESSED date,
    PATIENT_PAY_AMT numeric(19,3),
    DENIAL_VOUCHER_AMOUNT numeric(19,3),
    TOTAL_ADMIN_FEES numeric(19,3),
    TOTAL_DUE numeric(19,3),
    TRANSACTION_ID varchar(500)
);


CREATE TABLE sandbox.relay_health_coc_nov
(
    DRUG_TRADE_NAME varchar(500),
    NDC varchar(500),
    PAID_OR_REVERSED varchar(500),
    STATE varchar(500),
    QUANTITY numeric(19,3),
    FILL_NUMBER int,
    FILL_TYPE varchar(500),
    PAS_SUBMITTED int,
    DATE_OF_SERVICE date,
    PROCESSED_DATE date,
    PATIENT_PAY_DOLLAR numeric(19,3),
    PHARMACY_PRODUCT_DOLLAR numeric(19,3),
    ADMIN_FEES_DOLLAR numeric(19,3),
    MANUFACTURER_DOLLAR_AMOUNT numeric(19,3),
    TRANSACTION_ID varchar(500)
);


CREATE TABLE sandbox.relay_evoucher_metrics_psd_nov
(
    source_name varchar(14),
    ndc_code varchar(500),
    ndc_name varchar(600),
    claim_status varchar(500),
    month_date varchar(106),
    mnth_dt date,
    Relay_EVoucher_Units int,
    Relay_Spend_EVoucher_Paid numeric(21,3)
);


CREATE TABLE sandbox.copay_master_psd_nov
(
    source_name varchar(255),
    ndc_code varchar(20),
    basket_name varchar(300),
    quantity numeric(9,2),
    MEMBER_CASH_EXPENSE numeric(9,2),
    other_coverage_code varchar(10),
    fill_date date,
    month_date varchar(106),
    mnth_dt date,
    reject_code varchar(100),
    benefit_amount numeric(9,2),
    units int,
    run_date date
);


CREATE TABLE sandbox.relay_evoucher_psd_nov
(
    source_name varchar(14),
    ndc_code varchar(500),
    ndc_name varchar(600),
    report_month date,
    month_date varchar(106),
    mnth_dt date,
    claim_status varchar(500),
    evoucher_status_desc varchar(500),
    eVoucher_Amount numeric(19,3),
    units int,
    run_date date
);


CREATE TABLE sandbox.relay_denial_conversion_psd_nov
(
    source_name varchar(23),
    ndc_code varchar(500),
    ndc_name varchar(600),
    date_of_service date,
    month_date varchar(106),
    mnth_dt date,
    claim_status varchar(500),
    denial_voucher_amount numeric(19,3),
    units int,
    run_date date
);


CREATE TABLE sandbox.relay_coc_metrics_psd_nov
(
    source_name varchar(9),
    ndc_code varchar(500),
    ndc_name varchar(600),
    claim_status varchar(500),
    month_date varchar(106),
    mnth_dt date,
    Relay_CoC_Units_Paid int,
    Relay_CoC_Dollars_Paid numeric(21,3),
    Relay_CoC_Units_Reversed int,
    Relay_CoC_Dollars_Reversed numeric(21,3),
    Relay_CoC_Units int,
    Relay_CoC_Dollars numeric(19,3)
);


CREATE TABLE sandbox.relay_evoucher_metrics_psd_updtd_new
(
    source_name varchar(14),
    ndc_code varchar(500),
    ndc_name varchar(600),
    month_date varchar(106),
    mnth_dt date,
    Relay_EVoucher_Units_Paid int,
    Relay_EVoucher_Dollars_Paid numeric(21,3),
    Relay_EVoucher_Units_Reversed int,
    Relay_EVoucher_Dollars_Reversed numeric(21,3),
    Relay_EVoucher_Units int,
    Relay_EVoucher_Dollars numeric(21,3)
);


CREATE TABLE sandbox.relay_evoucher_metrics_psd_updtd
(
    source_name varchar(14),
    ndc_code varchar(500),
    ndc_name varchar(600),
    month_date varchar(106),
    mnth_dt date,
    Relay_EVoucher_Units_Paid int,
    Relay_EVoucher_Dollars_Paid numeric(21,3),
    Relay_EVoucher_Units_Reversed int,
    Relay_EVoucher_Dollars_Reversed numeric(21,3),
    Relay_EVoucher_Units int,
    Relay_EVoucher_Dollars numeric(21,3)
);


CREATE TABLE sandbox.relay_denial_conversion_metrics_psd_updtd
(
    source_name varchar(23),
    ndc_code varchar(500),
    ndc_name varchar(600),
    month_date varchar(106),
    mnth_dt date,
    Relay_Denial_Conversion_Units_Paid int,
    Relay_Denial_Conversion_Dollars_Paid numeric(21,3),
    Relay_Denial_Conversion_Units_Reversal int,
    Relay_Denial_Conversion_Dollars_Reversal numeric(21,3),
    Relay_Denial_Conversion_Units int,
    Relay_Denial_Conversion_Dollars numeric(19,3)
);


CREATE TABLE sandbox.ddd_md_anpsych_weekly
(
    onc_account_demo_id int,
    alt_seq_num varchar(20),
    outlet_name varchar(100),
    outlet_code varchar(10),
    subcategory_code varchar(5),
    outlet_zip varchar(5),
    ims_client_num varchar(5),
    ims_report_num varchar(5),
    report_frequency varchar(20),
    ims_product_code varchar(10),
    basket_id int,
    basket_name varchar(300),
    data_date date,
    date date,
    rollup_week date,
    rollup_month date,
    comp_month date,
    quantity float,
    dollars float,
    file_id int,
    record_id int,
    sales_force_id varchar(2),
    rollup_445_month date,
    tvcmid int,
    ims_facility_number varchar(11),
    ims_prescriber_number varchar(7),
    facility_tvcmid int,
    prescriber_tvcmid int,
    outlet_tvcmid int,
    normalized_quantity float
);


CREATE TABLE sandbox.austedo_titration
(
    TVCM_ID int,
    IMS_ID varchar(50),
    PRODUCT_NAME varchar(50),
    Data_Type varchar(50),
    Avg_TD_Daily_Dose_New_Patient numeric(10,3),
    Avg_TD_Daily_Dose_Cont_Patient numeric(10,3),
    Data_Ending_Month date
);


CREATE TABLE sandbox.ic_rx_dec2021
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_dec2021
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_021822
(
    PrescriberName varchar(75),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(5),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" numeric(5,0),
    "Current Month PSRFs" numeric(5,0),
    HCP_Signature_Yes numeric(5,0),
    HCP_Signature_No numeric(5,0),
    Patient_Auth_Yes numeric(5,0),
    Patient_Auth_No numeric(5,0),
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_030422
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(12),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.veeva_suggestions_digihaler
(
    account_priority_score_vod__c int,
    account_vod__c varchar(55),
    display_dismiss_vod__c varchar(10),
    display_mark_as_complete_vod__c varchar(10),
    display_score_vod__c varchar(10),
    email_template_id_vod__c varchar(255),
    email_template_vault_id_vod__c varchar(255),
    email_template_vod__c varchar(10),
    expiration_date_vod__c date,
    marked_as_complete_vod__c varchar(10),
    mark_complete_count_vod__c int,
    name varchar(255),
    ownerid varchar(255),
    posted_date date,
    priority_vod__c varchar(255),
    reason_vod__c varchar(255),
    record_type_name_vod__c varchar(255),
    suppress_reason_vod__c varchar(10),
    title_vod__c varchar(255),
    business_rule_name varchar(255),
    product varchar(255),
    combined_owner_account_key varchar(255),
    days_since_last_call int
);


CREATE TABLE sandbox.ic_rx_tp_tmp
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_tp_tmp
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt03182022
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(12),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_032522
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(12),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.sfa_affl
(
    affiliated_from_id varchar(18),
    affiliated_from_account_type varchar(80),
    affiliated_from_ims_id varchar(10),
    affiliated_from_ims_outlet_cd varchar(100),
    affiliated_from_acct_demo_id varchar(30),
    affiliated_from_bp_code varchar(120),
    affiliated_from_tvcmid int,
    affiliated_to_id varchar(18),
    affiliated_to_account_type varchar(80),
    affiliated_to_ims_id varchar(10),
    affiliated_to_ims_outlet_code varchar(100),
    affiliated_to_acct_demo_id varchar(30),
    affiliated_to_bp_code varchar(120),
    affiliated_to_tvcmid int,
    role varchar(50),
    lastmodifieddate timestamptz,
    sales_force_id varchar(8),
    territory_number varchar(80),
    employee_full_name varchar(121),
    employee_id varchar(20)
);


CREATE TABLE sandbox.TRIAL_CARD_LTC_HCP_DETAIL
(
    "Activity Date" date,
    "Internal Contact ID" int,
    "Current or Final Disposition" varchar(68),
    "Facility ID" varchar(50),
    "Display Name" varchar(83),
    Geography varchar(50),
    "Group" varchar(50),
    "Decile Group" varchar(5),
    Decile varchar(2),
    "HD - Person Detailed First Name" varchar(50),
    "HD - Person Detailed Last Name" varchar(50),
    "HD - Person Detailed Title" varchar(62),
    "HD - Resident's receiving anitpsychotic treatment?" varchar(50),
    "HD - Familiar with tardive dyskinesia?" varchar(50),
    "HD - Resident's in care that suffer from TD?" varchar(50),
    "HD - Seen similar wide-ranging effects in residents with TD?" varchar(50),
    "HD - Process for indentifying and diagnosing TD" varchar(239),
    "HD - Protocols for managing TD?" varchar(50),
    "HD - Key elements of TD management?" varchar(212),
    "HD - Continue Discussion?" varchar(50),
    "HD - Suggested contact First Name" varchar(50),
    "HD - Suggested contact Last Name" varchar(50),
    "HD - Suggested contact Title" varchar(50),
    "HD - Suggested contact Phone" int,
    "HD - Suggested contact Email" varchar(53),
    "HD - Familiar with Austedo?" varchar(50),
    "HD - Questions on clinical studies?" varchar(50),
    "HD - Questions on Safety Info?" varchar(50),
    "HD - Interested in future in-service Presentations?" varchar(50),
    "HD - In-service contact First Name" varchar(50),
    "HD - In-service contact Last Name" varchar(50),
    "HD - In-service contact Title" varchar(56),
    "HD - In-service contact Phone" int,
    "HD - In-service contact Email" varchar(63),
    "HD - In-service contact Preferred Day of the Week" varchar(50),
    "FD - Follow up Materials?" varchar(50),
    "HD - Facility Name" varchar(80),
    "HD - Attn" varchar(50),
    "HD - Street Address" varchar(53),
    "HD - City" varchar(50),
    "HD - State" varchar(2),
    "HD - Postal code" varchar(12),
    "Call Date 1" varchar(50),
    "Call Disposition Attempt 1" varchar(68),
    "Call Date 2" varchar(50),
    "Call Disposition Attempt 2" varchar(68),
    "Call Date 3" varchar(50),
    "Call Disposition Attempt 3" varchar(68),
    "Archer Rep" varchar(50),
    "Completed By" varchar(50),
    "Archer Lead Score" int,
    Subject varchar(55),
    "Activity Type" varchar(50),
    "Activity ID" varchar(50)
);


CREATE TABLE sandbox."Austedo_PSRF_Utilization _Null_TERR"
(
    territory_name varchar(50),
    PrescriberName varchar(50),
    PrescriberNPI int,
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.veeva_sugg_aust
(
    account_priority_score_vod__c int,
    account_vod__c varchar(55),
    display_dismiss_vod__c varchar(10),
    display_mark_as_complete_vod__c varchar(10),
    display_score_vod__c varchar(10),
    email_template_id_vod__c varchar(255),
    email_template_vault_id_vod__c varchar(255),
    email_template_vod__c varchar(10),
    expiration_date_vod__c date,
    marked_as_complete_vod__c varchar(10),
    mark_complete_count_vod__c int,
    name varchar(255),
    ownerid varchar(255),
    posted_date date,
    priority_vod__c varchar(255),
    reason_vod__c varchar(255),
    record_type_name_vod__c varchar(255),
    suppress_reason_vod__c varchar(10),
    title_vod__c varchar(255),
    business_rule_name varchar(255),
    product varchar(255),
    days_since_last_call int,
    calls_per_mth numeric(3,1),
    austedo_decile varchar(10),
    avg_new_dose numeric(18,3),
    avg_cont_dose numeric(18,3),
    ss_flag varchar(10),
    austedo_rx varchar(10),
    hcp_name varchar(255),
    rep_name varchar(255),
    batch_num int
);


CREATE TABLE sandbox.Austedo_TargetUniverse_H2022
(
    ims_id int,
    Source varchar(50),
    Quintile int,
    "ZS Quintile to use" int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_052022
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.activity_line_level_v2
(
    activityid varchar(400),
    level varchar(100),
    basket_name varchar(50)
);


CREATE TABLE sandbox.datamart_activity_hub_v4
(
    activity_id varchar(64),
    federation_id varchar(200),
    contact varchar(200),
    source_name varchar(100),
    "datetime" timestamp,
    trackback_id varchar(200),
    previous_activity varchar(64),
    level_name varchar(64),
    activity_role_name varchar(100),
    type_name varchar(100),
    native_type varchar(200),
    details varchar(200),
    line_item_id varchar(64),
    brand_name varchar(200),
    activity varchar(200),
    line_item_datetime timestamp,
    line_item_previous_line_item varchar(200),
    line_item_trackback_id varchar(200),
    line_item_details varchar(200),
    line_item_type_name varchar(100),
    line_item_native_type varchar(200),
    basket_id varchar(64),
    web_url varchar(5000)
);


CREATE TABLE sandbox.act_hub_all
(
    npi varchar(255),
    activity_id varchar(64),
    federation_id varchar(200),
    contact varchar(200),
    source_name varchar(100),
    "datetime" timestamp,
    trackback_id varchar(200),
    previous_activity varchar(64),
    level_name varchar(64),
    activity_role_name varchar(100),
    type_name varchar(100),
    native_type varchar(200),
    details varchar(200),
    line_item_id varchar(64),
    brand_name varchar(200),
    activity varchar(200),
    line_item_datetime timestamp,
    line_item_previous_line_item varchar(200),
    line_item_trackback_id varchar(200),
    line_item_details varchar(200),
    line_item_type_name varchar(100),
    line_item_native_type varchar(200),
    basket_id varchar(64),
    web_url varchar(5000)
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_052022b
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.outlets_missing_tvcmid
(
    TVCMID int,
    OUTLET_CODE int,
    OUTLET_NAME varchar(100),
    OUTLET_ZIP int,
    SUBCATEGORY_CODE varchar(50)
);


CREATE TABLE sandbox.TH_Call_Activity_00
(
    sales_force_id varchar(50),
    call_id varchar(50),
    veeva_account_id varchar(50),
    ims_id varchar(20),
    ims_outlet_id varchar(20),
    customer_type varchar(50),
    first_name varchar(52),
    last_name varchar(54),
    call_type varchar(50),
    legacy_call_type varchar(50),
    ceph_id varchar(20),
    dea_num varchar(20),
    rep_id varchar(50),
    rep_first_name varchar(50),
    rep_last_name varchar(50),
    territory_number varchar(50),
    zip_on_call varchar(10),
    call_date timestamp,
    submit_date timestamp,
    attendees int,
    attendee_type varchar(50),
    area_number varchar(20),
    region_number varchar(20),
    tvcmid varchar(20),
    call_recordtype varchar(57),
    call_duration int,
    call_datetime timestamp,
    call_timezone varchar(50),
    how_executed varchar(56),
    remote_meeting_id varchar(20),
    parent_call_id varchar(50),
    is_parent_call varchar(50),
    t21s10_austedo_indication varchar(20),
    Outcomes_from_Visit varchar(79),
    Visit_Trigger varchar(60),
    Visit_Trigger_Date timestamp,
    call_name varchar(50),
    veeva_address_id varchar(50),
    account_name varchar(62),
    address varchar(65),
    city varchar(50),
    state varchar(2),
    zip_code varchar(10),
    npi varchar(20)
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt06102022
(
    PrescriberName varchar(65),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.pres_comb_frozen_TR_Q32022
(
    start_date date,
    end_date date,
    sales_force_id varchar(20),
    ims_id varchar(10),
    npi varchar(10),
    tvcmid int,
    veeva_account_id varchar(20),
    specialty varchar(255),
    first_name varchar(50),
    middle_name varchar(50),
    last_name varchar(50),
    ptr_veeva_address_id varchar(20),
    ptr_address_1 varchar(100),
    ptr_address_2 varchar(100),
    ptr_address_3 varchar(100),
    ptr_city varchar(50),
    ptr_state varchar(2),
    ptr_zip varchar(5),
    ptr_phone varchar(40),
    ptr_territory_num varchar(15),
    ptr_territory_type varchar(30),
    ptr_address_source varchar(50),
    ptr_mailable varchar(1),
    dea_num varchar(10),
    pdrp_flag varchar(1),
    pdrp_date timestamp,
    np_pa_flag varchar(1),
    no_spend varchar(1),
    ama_no_contact_flag varchar(1),
    email varchar(100),
    degree varchar(100),
    address_id int,
    address_latitude varchar(20),
    address_longitude varchar(20),
    row_source varchar(100),
    freeze_reason varchar(100),
    freeze_date date,
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt06242022_2
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_02
(
    PrescriberName varchar(50),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    PrescriberNPI1 int,
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Genoa_Roster_Current
(
    Pharmacy_Status varchar(7),
    Genoa_Site__ float,
    Street_Address_1 varchar(38),
    Street_Address_2 varchar(92),
    City varchar(20),
    State varchar(3),
    ZIP_Code varchar(10),
    Main_Phone varchar(17),
    Fax varchar(15),
    DEA varchar(28),
    DEA_Expiration date,
    NPI varchar(10),
    NCPDP varchar(7),
    State_Issuing_License varchar(3),
    Opening_Date date,
    Location_Notes varchar(1),
    Note_Effective_Date varchar(1),
    Pharmacy_Contact varchar(26)
);


CREATE TABLE sandbox.ddd_exc_or
(
    outlet_code varchar(50),
    outlet_name varchar(50),
    sub_cat varchar(50)
);


CREATE TABLE sandbox.psrf_for_datamart_v1
(
    sales_force_id varchar(20),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(15),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(50),
    demo_last_name varchar(50),
    demo_city varchar(50),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(32)
);


CREATE TABLE sandbox.psrf_for_datamart_v2
(
    sales_force_id varchar(5),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(8),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(40),
    demo_last_name varchar(40),
    demo_city varchar(40),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(25)
);


CREATE TABLE sandbox.psrf_for_datamart_v1_v2
(
    sales_force_id varchar(20),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(15),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(50),
    demo_last_name varchar(50),
    demo_city varchar(50),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(32)
);


CREATE TABLE sandbox.psrf_for_datamart_v3
(
    sales_force_id varchar(5),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(8),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(50),
    demo_last_name varchar(50),
    demo_city varchar(50),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(17)
);


CREATE TABLE sandbox.psrf_for_datamart_v1_v2_v3
(
    sales_force_id varchar(20),
    area_number varchar(8),
    region_number varchar(8),
    territory_number varchar(15),
    area_name varchar(50),
    region_name varchar(50),
    territory_name varchar(50),
    PrescriberName varchar(58),
    psrf_city varchar(50),
    psrf_state varchar(50),
    psrf_zip varchar(12),
    psrf_npi varchar(10),
    demo_first_name varchar(50),
    demo_last_name varchar(50),
    demo_city varchar(50),
    demo_state varchar(2),
    demo_zip varchar(5),
    demo_npi varchar(10),
    Current_Week_PSRFs varchar(20),
    Current_Month_PSRFs varchar(20),
    HCP_Signature_Yes varchar(20),
    HCP_Signature_No varchar(20),
    Patient_Auth_Yes varchar(20),
    Patient_Auth_No varchar(20),
    YTD_PSRFs varchar(20),
    file_id int,
    row_source varchar(32)
);


CREATE TABLE sandbox.humira_dddmd_adhoc_mthly_quantity
(
    client_num varchar(3),
    report_num varchar(2),
    filler varchar(1),
    outlet_code varchar(100),
    subcategory_code varchar(100),
    asn_number varchar(100),
    category_code varchar(2),
    product_group varchar(10),
    data_date varchar(64),
    qty_mth01 numeric(17,3),
    qty_mth02 numeric(17,3),
    qty_mth03 numeric(17,3),
    qty_mth04 numeric(17,3),
    qty_mth05 numeric(17,3),
    qty_mth06 numeric(17,3),
    qty_mth07 numeric(17,3),
    qty_mth08 numeric(17,3),
    qty_mth09 numeric(17,3),
    qty_mth10 numeric(17,3),
    qty_mth11 numeric(17,3),
    qty_mth12 numeric(17,3),
    qty_mth13 numeric(17,3),
    qty_mth14 numeric(17,3),
    qty_mth15 numeric(17,3),
    qty_mth16 numeric(17,3),
    qty_mth17 numeric(17,3),
    qty_mth18 numeric(17,3),
    qty_mth19 numeric(17,3),
    qty_mth20 numeric(17,3),
    qty_mth21 numeric(17,3),
    qty_mth22 numeric(17,3),
    qty_mth23 numeric(17,3),
    qty_mth24 numeric(17,3),
    outlet_name varchar(100),
    outlet_address varchar(500),
    outlet_city varchar(100),
    outlet_state varchar(100),
    outlet_zip varchar(100)
);


CREATE TABLE sandbox.humira_dddmd_adhoc_mthly_dollars
(
    client_num varchar(3),
    report_num varchar(2),
    filler varchar(1),
    outlet_code varchar(100),
    subcategory_code varchar(100),
    asn_number varchar(100),
    category_code varchar(2),
    product_group varchar(10),
    data_date varchar(64),
    dol_mth01 numeric(17,3),
    dol_mth02 numeric(17,3),
    dol_mth03 numeric(17,3),
    dol_mth04 numeric(17,3),
    dol_mth05 numeric(17,3),
    dol_mth06 numeric(17,3),
    dol_mth07 numeric(17,3),
    dol_mth08 numeric(17,3),
    dol_mth09 numeric(17,3),
    dol_mth10 numeric(17,3),
    dol_mth11 numeric(17,3),
    dol_mth12 numeric(17,3),
    dol_mth13 numeric(17,3),
    dol_mth14 numeric(17,3),
    dol_mth15 numeric(17,3),
    dol_mth16 numeric(17,3),
    dol_mth17 numeric(17,3),
    dol_mth18 numeric(17,3),
    dol_mth19 numeric(17,3),
    dol_mth20 numeric(17,3),
    dol_mth21 numeric(17,3),
    dol_mth22 numeric(17,3),
    dol_mth23 numeric(17,3),
    dol_mth24 numeric(17,3),
    outlet_name varchar(100),
    outlet_address varchar(500),
    outlet_city varchar(100),
    outlet_state varchar(100),
    outlet_zip varchar(100)
);


CREATE TABLE sandbox."digital-affinity"
(
    vid__v int,
    id varchar(50),
    entity_type varchar(50),
    id_type varchar(50)
);


CREATE TABLE sandbox.activity_line_level
(
    activityid varchar(100),
    level varchar(100),
    basket_name varchar(50)
);


CREATE TABLE sandbox.activity_line_item_level
(
    activityid varchar(600),
    level varchar(100)
);


CREATE TABLE sandbox.ic_rx_Feb21
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_Feb21
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.act_hub_CSD1015
(
    npi varchar(255),
    activity_id varchar(64),
    federation_id varchar(200),
    contact varchar(200),
    source_name varchar(100),
    "datetime" timestamp,
    trackback_id varchar(200),
    previous_activity varchar(64),
    level_name varchar(64),
    activity_role_name varchar(100),
    type_name varchar(100),
    native_type varchar(200),
    details varchar(200),
    line_item_id varchar(64),
    brand_name varchar(200),
    activity varchar(200),
    line_item_datetime timestamp,
    line_item_previous_line_item varchar(200),
    line_item_trackback_id varchar(200),
    line_item_details varchar(200),
    line_item_type_name varchar(100),
    line_item_native_type varchar(200),
    basket_id varchar(64),
    web_url varchar(5000)
);


CREATE TABLE sandbox.mb_to_monthly_account_summary
(
    sales_force_id varchar(5),
    nation_id varchar(10),
    nation varchar(10),
    area_id varchar(10),
    area varchar(100),
    region_id varchar(10),
    region varchar(100),
    territory_id varchar(10),
    territory varchar(100),
    rep_name varchar(100),
    user_id varchar(255),
    time_period varchar(10),
    period_type varchar(10),
    period varchar(11),
    market_id int,
    market_name varchar(300),
    brand_id int,
    brand_name varchar(300),
    teva_product_flag varchar(1),
    customer_id varchar(25),
    tvcmid int,
    network_name varchar(100),
    account_name varchar(100),
    channel varchar(50),
    address varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    formulary_control varchar(20),
    gpo varchar(100),
    target varchar(100),
    new_account varchar(1),
    market_volume_indicator int,
    product_vol_dollars numeric(21,2),
    product_vol_mg int,
    product_vol_mcg int,
    market_vol_dollars numeric(21,2),
    market_vol_mg int,
    market_vol_mcg int,
    prev_prod_vol_dollars numeric(21,2),
    prev_prod_vol_mg int,
    prev_prod_vol_mcg int,
    prev_market_vol_dollars numeric(21,2),
    prev_market_vol_mg int,
    prev_market_vol_mcg int
);


CREATE TABLE sandbox.health_plan_geography
(
    health_plan_id varchar(10),
    Country_fips_id varchar(10),
    country_id varchar(5),
    country_name varchar(50),
    state_id varchar(2),
    state_name varchar(2),
    country_lives numeric(18,2)
);


CREATE TABLE sandbox.act_hub_CSD1015_nonAustedo
(
    npi varchar(255),
    activity_id varchar(64),
    federation_id varchar(200),
    contact varchar(200),
    source_name varchar(100),
    "datetime" timestamp,
    trackback_id varchar(200),
    previous_activity varchar(64),
    level_name varchar(64),
    activity_role_name varchar(100),
    type_name varchar(100),
    native_type varchar(200),
    details varchar(200),
    line_item_id varchar(64),
    brand_name varchar(200),
    activity varchar(200),
    line_item_datetime timestamp,
    line_item_previous_line_item varchar(200),
    line_item_trackback_id varchar(200),
    line_item_details varchar(200),
    line_item_type_name varchar(100),
    line_item_native_type varchar(200),
    basket_id varchar(64),
    web_url varchar(5000)
);


CREATE TABLE sandbox.zip_states
(
    ZIP_CODE varchar(10),
    STATE varchar(10)
);


CREATE TABLE sandbox.fcr_summ_0622
(
    rsm_name varchar(121),
    rsm_title varchar(80),
    region_number varchar(26),
    rsm_email varchar(128),
    sales_rep_name varchar(121),
    sales_rep_title varchar(80),
    territory_number varchar(50),
    sales_rep_email varchar(128),
    fcr_date date
);


CREATE TABLE sandbox.payer_test
(
    IMS_ID varchar(50),
    TVCMID int,
    First_Name varchar(50),
    Middle_Name varchar(50),
    Last_Name varchar(50),
    Cred varchar(59),
    Location varchar(112),
    Address_1 varchar(76),
    Address_2 varchar(51),
    City varchar(50),
    State_Code varchar(50),
    Zip_Code varchar(50),
    Zip_Extension varchar(50),
    Telephone varchar(50),
    Alternative_Telephone varchar(50)
);


CREATE TABLE sandbox.ftf_restrictions_v2
(
    health_plan_id varchar(6),
    drug_id varchar(6),
    restriction_code varchar(7),
    restriction_detail_id varchar(6),
    restriction_detail_text varchar(250),
    restriction_addtnl_information_1 varchar(4000),
    restriction_addtnl_information_2 varchar(4000),
    step_count varchar(50),
    pa_form varchar(4000),
    indication varchar(255),
    grouped_restriction_level varchar(255),
    record_id int,
    file_id int
);


CREATE TABLE sandbox.veeva_suggestions
(
    account_priority_score_vod__c int,
    account_vod__c varchar(55),
    display_dismiss_vod__c varchar(10),
    display_mark_as_complete_vod__c varchar(10),
    display_score_vod__c varchar(10),
    email_template_id_vod__c varchar(255),
    email_template_vault_id_vod__c varchar(255),
    email_template_vod__c varchar(10),
    expiration_date_vod__c date,
    marked_as_complete_vod__c varchar(10),
    mark_complete_count_vod__c int,
    name varchar(255),
    ownerid varchar(255),
    posted_date date,
    priority_vod__c varchar(255),
    reason_vod__c varchar(255),
    record_type_name_vod__c varchar(255),
    suppress_reason_vod__c varchar(10),
    title_vod__c varchar(255),
    business_rule_name varchar(255),
    product varchar(255),
    combined_owner_account_key varchar(255),
    days_since_last_call int
);


CREATE TABLE sandbox.fcr_summary_0714
(
    rsm_name varchar(132),
    rsm_title varchar(80),
    region_number varchar(26),
    rsm_email varchar(128),
    sales_rep_name varchar(132),
    sales_rep_title varchar(80),
    territory_number varchar(80),
    sales_rep_email varchar(128),
    fcr_date date
);


CREATE TABLE sandbox."MediCal HCPs"
(
    Region_ID varchar(50),
    Region_Name varchar(53),
    Territory_ID varchar(50),
    Territory_Name varchar(50),
    IMS_ID varchar(50),
    First_Name varchar(50),
    Last_Name varchar(50),
    Specialty_Name varchar(66),
    Specialty_Group varchar(50),
    ACUTE_MIGRAINE numeric(28,10),
    PREVENT_MIGRAINE numeric(28,10),
    "ANTI-CGRP" numeric(28,10),
    AJOVY numeric(28,10)
);


CREATE TABLE sandbox.presr_rx_for_June_ic_07192021
(
    ims_id varchar(10),
    payer_plan_number varchar(10),
    ims_client_number varchar(5),
    report_frequency varchar(20),
    ims_product_group varchar(10),
    basket_id int,
    data_date date,
    date date,
    sales_category varchar(2),
    tvcmid int,
    prescriber_first_name varchar(50),
    prescriber_last_name varchar(50),
    basket_name varchar(300),
    basket_type varchar(100),
    rollup_week date,
    rollup_month date,
    nrx_count numeric(18,3),
    trx_count numeric(18,3),
    nrx_quantity numeric(18,3),
    trx_quantity numeric(18,3),
    unnormalized_nrx_count numeric(18,3),
    unnormalized_trx_count numeric(18,3),
    market_name varchar(75),
    payer_name varchar(100),
    plan_name varchar(100),
    pbm_name varchar(100),
    model varchar(100),
    payment_method varchar(250),
    ims_specialty varchar(10),
    ims_rx_type varchar(1),
    ims_supplemental_data varchar(20),
    ims_zip_other varchar(10),
    ims_report_number_cnt varchar(5),
    cnt_file_id int,
    cnt_record_id int,
    ims_report_number_qty varchar(5),
    qty_file_id int,
    qty_record_id int,
    rollup_flag char(1),
    indication varchar(20),
    pbm_parent_name varchar(100)
);


CREATE TABLE sandbox."AcMonitor Missing IDs"
(
    IMSID int
);


CREATE TABLE sandbox.ic_rx_jun2021
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_jun2021
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.hcp_target_list_csd_1145_new
(
    IMS_ID varchar(20),
    NPI varchar(20),
    First_Name varchar(100),
    Last_Name varchar(100),
    Address_1 varchar(1000),
    Address_2 varchar(1000),
    City varchar(1000),
    State varchar(10),
    Zip varchar(10),
    Specialty_Group varchar(100),
    Target_Valuation_Decile varchar(100),
    Bright_Spots_Segment_2021 varchar(100),
    DMD_SEQ varchar(100),
    DMD_ID varchar(100),
    DMD_EMAIL varchar(100),
    EXPIRATION_DATE timestamp,
    SOURCE varchar(500),
    FEDID varchar(500),
    Marketing_Cloud_ID varchar(500),
    Encrypted_Federation_ID varchar(500),
    Encrypted_Product_ID varchar(500),
    primary_specialty_code varchar(500)
);


CREATE TABLE sandbox.hcp_target_list_csd_1145_updtd
(
    IMS_ID varchar(20),
    NPI varchar(20),
    First_Name varchar(100),
    Last_Name varchar(100),
    Address_1 varchar(1000),
    Address_2 varchar(1000),
    City varchar(1000),
    State varchar(10),
    Zip varchar(10),
    Specialty_Group varchar(100),
    Target_Valuation_Decile varchar(100),
    Bright_Spots_Segment_2021 varchar(100),
    DMD_SEQ varchar(100),
    DMD_ID varchar(100),
    DMD_EMAIL varchar(100),
    EXPIRATION_DATE timestamp,
    SOURCE varchar(500),
    FEDID varchar(500),
    Marketing_Cloud_ID varchar(500),
    Encrypted_Federation_ID varchar(500),
    Encrypted_Product_ID varchar(500),
    primary_specialty_code varchar(500),
    phone varchar(100)
);


CREATE TABLE sandbox.fcr_summary
(
    rsm_name varchar(132),
    rsm_title varchar(80),
    region_number varchar(80),
    rsm_email varchar(128),
    sales_rep_name varchar(132),
    sales_rep_title varchar(80),
    territory_number varchar(80),
    sales_rep_email varchar(128),
    fcr_date date,
    report_status_vod__c varchar(50)
);


CREATE TABLE sandbox.sfa_call_bkp_0908
(
    sales_force_id varchar(2),
    call_id varchar(20),
    veeva_account_id varchar(20),
    ims_id varchar(10),
    ims_outlet_id varchar(15),
    customer_type varchar(50),
    first_name varchar(50),
    last_name varchar(80),
    call_type varchar(50),
    legacy_call_type varchar(50),
    ceph_id varchar(10),
    dea_num varchar(10),
    rep_id varchar(20),
    rep_first_name varchar(50),
    rep_last_name varchar(50),
    territory_number varchar(8),
    zip_on_call varchar(10),
    call_date date,
    submit_date timestamp,
    attendees int,
    attendee_type varchar(50),
    area_number varchar(8),
    region_number varchar(8),
    tvcmid int,
    call_recordtype varchar(80),
    call_duration numeric(3,0),
    call_datetime timestamp,
    call_timezone varchar(30),
    how_executed varchar(40),
    remote_meeting_id varchar(100)
);


CREATE TABLE sandbox."SYNEOS_TERR IDs 09022021"
(
    "RMS Territory ID" varchar(50)
);


CREATE TABLE sandbox."CUstomer Flags QC09172021"
(
    TVCM_ID int,
    PRODUCT_NAME int
);


CREATE TABLE sandbox.datamart_sfa_call_09202021
(
    sales_force_id varchar(2),
    call_id varchar(20),
    veeva_account_id varchar(20),
    ims_id varchar(10),
    ims_outlet_id varchar(15),
    customer_type varchar(50),
    first_name varchar(50),
    last_name varchar(80),
    call_type varchar(50),
    legacy_call_type varchar(50),
    ceph_id varchar(10),
    dea_num varchar(10),
    rep_id varchar(20),
    rep_first_name varchar(50),
    rep_last_name varchar(50),
    territory_number varchar(8),
    zip_on_call varchar(10),
    call_date date,
    submit_date timestamp,
    attendees int,
    attendee_type varchar(50),
    area_number varchar(8),
    region_number varchar(8),
    tvcmid int,
    call_recordtype varchar(80),
    call_duration numeric(3,0),
    call_datetime timestamp,
    call_timezone varchar(30),
    how_executed varchar(40),
    remote_meeting_id varchar(100)
);


CREATE TABLE sandbox.archer_target_data_v2
(
    sales_force_id varchar(5),
    period varchar(20),
    veeva_account_id varchar(18),
    ims_id varchar(10),
    tvcmid int,
    first_name varchar(50),
    last_name varchar(50),
    specialty varchar(100),
    area_name varchar(50),
    region_name varchar(50),
    territory_id varchar(8),
    basket_id int,
    basket_name varchar(300),
    p1 int,
    p2 int,
    p3 int
);


CREATE TABLE sandbox.sob_bkp
(
    MONTHID varchar(50),
    AGE varchar(50),
    GENDER varchar(50),
    PAYTYPE varchar(50),
    SPECIALTY varchar(50),
    CHANNEL varchar(50),
    INDICATION varchar(50),
    SOB varchar(50),
    ARISTADA_INITIO_FLAG varchar(50),
    PRIOR_PRODUCT varchar(50),
    INDEX_PRODUCT varchar(50),
    PATIENT_COUNT numeric(19,3)
);


CREATE TABLE sandbox.archer_target_data_v3
(
    veeva_account_id varchar(50),
    tvcmid int,
    ims_id varchar(10),
    npi varchar(20),
    vmat2_decile varchar(10),
    first_name varchar(50),
    last_name varchar(50),
    specialty_group varchar(50),
    specialty varchar(10),
    address varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5)
);


CREATE TABLE sandbox.activity_line_item_level_v3
(
    activityid varchar(600),
    level varchar(100)
);


CREATE TABLE sandbox.datamart_activity_hub_v3
(
    activity_id varchar(64),
    federation_id varchar(200),
    contact varchar(200),
    source_name varchar(100),
    "datetime" timestamp,
    trackback_id varchar(200),
    previous_activity varchar(64),
    level_name varchar(64),
    activity_role_name varchar(100),
    type_name varchar(100),
    native_type varchar(200),
    details varchar(200),
    line_item_id varchar(64),
    brand_name varchar(200),
    activity varchar(200),
    line_item_datetime timestamp,
    line_item_previous_line_item varchar(200),
    line_item_trackback_id varchar(200),
    line_item_details varchar(200),
    line_item_type_name varchar(100),
    line_item_native_type varchar(200),
    basket_id varchar(64),
    web_url varchar(5000)
);


CREATE TABLE sandbox.copay_metrics_psd_nov
(
    source_name varchar(255),
    ndc_code varchar(20),
    basket_name varchar(300),
    month_date varchar(106),
    mnth_dt date,
    Covered_CRx_Units int,
    Relay_EVoucher_And_CRx int,
    FBDU_CRx_03_Units int,
    Relay_DenialConversion_And_CRx int,
    FDBU_Total_PA_Step_Edit_Units int,
    FDBU_Total_Product_Not_Covered_Units int,
    FDBU_Total_All_Other_Units int,
    FAS_CRx_Spend_Coupon_OCC3 int,
    FAS_CRx_Spend_Coupon_OCC8 int,
    FAS_CRx_Spend_EVoucher int,
    FAS_CRx_Spend_Denial_Conversion int
);


CREATE TABLE sandbox.base_metrics_psd_nov
(
    ndc_code varchar(500),
    ndc_name varchar(600),
    month_date varchar(106),
    mnth_dt date,
    EU_TRx numeric(21,3),
    Covered_CRx_Units int,
    Relay_EVoucher_And_CRx int,
    FBDU_CRx_03_Units int,
    Relay_DenialConversion_And_CRx int,
    FDBU_Total_PA_Step_Edit_Units int,
    FDBU_Total_Product_Not_Covered_Units int,
    FDBU_Total_All_Other_Units int,
    FAS_CRx_Spend_Coupon_OCC3 int,
    FAS_CRx_Spend_Coupon_OCC8 int,
    FAS_CRx_Spend_EVoucher int,
    FAS_CRx_Spend_Denial_Conversion int,
    Relay_EVoucher_Units int,
    Relay_Spend_EVoucher_Paid numeric(21,3),
    Relay_Denial_Conversion_Paid int,
    Relay_Spend_Denial_Conversion_Paid numeric(21,3)
);


CREATE TABLE sandbox.view1_psd_nov
(
    product_name varchar(5),
    month_year varchar(106),
    mnth_dt date,
    Demand_units numeric(34,15),
    Covered_Coupon_Units int,
    Full_WAC_Buy_Down_Units numeric(54,18)
);


CREATE TABLE sandbox.tv46k_segmentation_2020
(
    ims_id varchar(10),
    ABILIFY numeric(21,3),
    "ABILIFY DISCMELT" numeric(21,3),
    "ABILIFY MAINTENA" numeric(21,3),
    "ABILIFY MYCITE" numeric(21,3),
    "ANTI PSYCHOTIC MARKET" numeric(21,3),
    ARIPIPRAZOLE numeric(21,3),
    "ARIPIPRAZOLE ODT" numeric(21,3),
    "ARISTADA INITIO SYR PRF IM" numeric(21,3),
    "ARISTADA SYRINGE 1064MG" numeric(21,3),
    "ARISTADA SYRINGE 441MG" numeric(21,3),
    "ARISTADA SYRINGE 662MG" numeric(21,3),
    "ARISTADA SYRINGE 882MG" numeric(21,3),
    "ASENAPINE MALEATE" numeric(21,3),
    CAPLYTA numeric(21,3),
    "CHLORPROMAZINE HCL" numeric(21,3),
    CLOZAPINE numeric(21,3),
    "CLOZAPINE ODT" numeric(21,3),
    CLOZARIL numeric(21,3),
    COMPAZINE numeric(21,3),
    COMPRO numeric(21,3),
    "FANAPT TAB/PACK" numeric(21,3),
    "FANAPT TITRATION PACK" numeric(21,3),
    FAZACLO numeric(21,3),
    FLUPHENAZINE numeric(21,3),
    "FLUPHENAZINE DECAN VIAL" numeric(21,3),
    GEODON numeric(21,3),
    HALDOL numeric(21,3),
    "HALDOL DECANOATE 100" numeric(21,3),
    "HALDOL DECANOATE 50" numeric(21,3),
    HALOPERIDOL numeric(21,3),
    "HALOPERIDOL DECANOATE" numeric(21,3),
    "HALOPERIDOL LACTATE VIAL/SOLN/SYR" numeric(21,3),
    "INVEGA HAFYERA" numeric(21,3),
    "INVEGA SUSTENNA" numeric(21,3),
    "INVEGA TAB" numeric(21,3),
    "INVEGA TRINZA" numeric(21,3),
    LATUDA numeric(21,3),
    LOXAPINE numeric(21,3),
    "MOLINDONE HYDROCHLORIDE" numeric(21,3),
    OLANZAPINE numeric(21,3),
    "OLANZAPINE ODT" numeric(21,3),
    PALIPERIDONE numeric(21,3),
    PERPHENAZINE numeric(21,3),
    "PERSERIS KIT SYRINGE" numeric(21,3),
    "PROCHLORPERAZINE EDISYLAT" numeric(21,3),
    "PROCHLORPERAZINE MALEATE" numeric(21,3),
    "QUETIAPINE FUMARATE" numeric(21,3),
    "QUETIAPINE FUMARATE ER" numeric(21,3),
    REXULTI numeric(21,3),
    RISPERDAL numeric(21,3),
    "RISPERDAL CONSTA" numeric(21,3),
    "RISPERDAL M-TAB" numeric(21,3),
    RISPERIDONE numeric(21,3),
    "RISPERIDONE ODT" numeric(21,3),
    "SAPHRIS TAB" numeric(21,3),
    SECUADO numeric(21,3),
    SEROQUEL numeric(21,3),
    "SEROQUEL XR" numeric(21,3),
    "THIORIDAZINE HCL" numeric(21,3),
    THIOTHIXENE numeric(21,3),
    VERSACLOZ numeric(21,3),
    VRAYLAR numeric(21,3),
    "ZIPRASIDONE HCL CAP" numeric(21,3),
    "ZIPRASIDONE MESY" numeric(21,3),
    ZYPREXA numeric(21,3),
    "ZYPREXA RELPREVV" numeric(21,3),
    "ZYPREXA ZYDIS TAB" numeric(21,3)
);


CREATE TABLE sandbox.tv46k_segmentation_2021
(
    ims_id varchar(10),
    ABILIFY numeric(21,3),
    "ABILIFY DISCMELT" numeric(21,3),
    "ABILIFY MAINTENA" numeric(21,3),
    "ABILIFY MYCITE" numeric(21,3),
    "ANTI PSYCHOTIC MARKET" numeric(21,3),
    ARIPIPRAZOLE numeric(21,3),
    "ARIPIPRAZOLE ODT" numeric(21,3),
    "ARISTADA INITIO SYR PRF IM" numeric(21,3),
    "ARISTADA SYRINGE 1064MG" numeric(21,3),
    "ARISTADA SYRINGE 441MG" numeric(21,3),
    "ARISTADA SYRINGE 662MG" numeric(21,3),
    "ARISTADA SYRINGE 882MG" numeric(21,3),
    "ASENAPINE MALEATE" numeric(21,3),
    CAPLYTA numeric(21,3),
    "CHLORPROMAZINE HCL" numeric(21,3),
    CLOZAPINE numeric(21,3),
    "CLOZAPINE ODT" numeric(21,3),
    CLOZARIL numeric(21,3),
    COMPAZINE numeric(21,3),
    COMPRO numeric(21,3),
    "FANAPT TAB/PACK" numeric(21,3),
    "FANAPT TITRATION PACK" numeric(21,3),
    FAZACLO numeric(21,3),
    FLUPHENAZINE numeric(21,3),
    "FLUPHENAZINE DECAN VIAL" numeric(21,3),
    GEODON numeric(21,3),
    HALDOL numeric(21,3),
    "HALDOL DECANOATE 100" numeric(21,3),
    "HALDOL DECANOATE 50" numeric(21,3),
    HALOPERIDOL numeric(21,3),
    "HALOPERIDOL DECANOATE" numeric(21,3),
    "HALOPERIDOL LACTATE VIAL/SOLN/SYR" numeric(21,3),
    "INVEGA HAFYERA" numeric(21,3),
    "INVEGA SUSTENNA" numeric(21,3),
    "INVEGA TAB" numeric(21,3),
    "INVEGA TRINZA" numeric(21,3),
    LATUDA numeric(21,3),
    LOXAPINE numeric(21,3),
    "MOLINDONE HYDROCHLORIDE" numeric(21,3),
    OLANZAPINE numeric(21,3),
    "OLANZAPINE ODT" numeric(21,3),
    PALIPERIDONE numeric(21,3),
    PERPHENAZINE numeric(21,3),
    "PERSERIS KIT SYRINGE" numeric(21,3),
    "PROCHLORPERAZINE EDISYLAT" numeric(21,3),
    "PROCHLORPERAZINE MALEATE" numeric(21,3),
    "QUETIAPINE FUMARATE" numeric(21,3),
    "QUETIAPINE FUMARATE ER" numeric(21,3),
    REXULTI numeric(21,3),
    RISPERDAL numeric(21,3),
    "RISPERDAL CONSTA" numeric(21,3),
    "RISPERDAL M-TAB" numeric(21,3),
    RISPERIDONE numeric(21,3),
    "RISPERIDONE ODT" numeric(21,3),
    "SAPHRIS TAB" numeric(21,3),
    SECUADO numeric(21,3),
    SEROQUEL numeric(21,3),
    "SEROQUEL XR" numeric(21,3),
    "THIORIDAZINE HCL" numeric(21,3),
    THIOTHIXENE numeric(21,3),
    VERSACLOZ numeric(21,3),
    VRAYLAR numeric(21,3),
    "ZIPRASIDONE HCL CAP" numeric(21,3),
    "ZIPRASIDONE MESY" numeric(21,3),
    ZYPREXA numeric(21,3),
    "ZYPREXA RELPREVV" numeric(21,3),
    "ZYPREXA ZYDIS TAB" numeric(21,3)
);


CREATE TABLE sandbox.tv46_MOP_2020
(
    ims_id varchar(10),
    "NULL" numeric(21,3),
    "COMMERCIAL 3RD PTY" numeric(21,3),
    "MANAGED MEDICAID" numeric(21,3),
    MEDICAID numeric(21,3),
    "MEDICARE PT D" numeric(21,3),
    "VOUCHER/COPAY CARDS" numeric(21,3)
);


CREATE TABLE sandbox.tv46_MOP_2021
(
    ims_id varchar(10),
    "NULL" numeric(21,3),
    "COMMERCIAL 3RD PTY" numeric(21,3),
    "MANAGED MEDICAID" numeric(21,3),
    MEDICAID numeric(21,3),
    "MEDICARE PT D" numeric(21,3),
    "VOUCHER/COPAY CARDS" numeric(21,3)
);


CREATE TABLE sandbox.relay_coc_psd_nov
(
    source_name varchar(9),
    ndc_code varchar(20),
    ndc_name varchar(600),
    date_of_service date,
    month_date varchar(106),
    mnth_dt date,
    claim_status varchar(500),
    pharmacy_product_dollar numeric(19,3),
    units int,
    run_date date
);


CREATE TABLE sandbox.relay_coc_metrics_psd_updtd
(
    source_name varchar(9),
    ndc_code varchar(20),
    ndc_name varchar(600),
    month_date varchar(106),
    mnth_dt date,
    Relay_CoC_Units_Paid int,
    Relay_CoC_Dollars_Paid numeric(21,3),
    Relay_CoC_Units_Reversed int,
    Relay_CoC_Dollars_Reversed numeric(21,3),
    Relay_CoC_Units int,
    Relay_CoC_Dollars numeric(19,3)
);


CREATE TABLE sandbox.base_metrics_psd_updtd
(
    ndc_code varchar(500),
    ndc_name varchar(600),
    month_date varchar(106),
    mnth_dt date,
    EU_TRx numeric(21,3),
    CRx_Covered_Units int,
    CRx_EVoucher_Units int,
    CRx_NonCovered_Units int,
    CRx_DC_Units int,
    CRx_DC_Dollars numeric(20,2),
    CRx_PA_Units int,
    CRx_DC_CoC_Units int,
    CRx_Other_Units int,
    CRx_Covered_Dollars numeric(20,2),
    CRx_NonCovered_Dollars numeric(20,2),
    Relay_EVoucher_Units_Paid int,
    Relay_EVoucher_Dollars_Paid numeric(21,3),
    Relay_EVoucher_Units_Reversed int,
    Relay_EVoucher_Dollars_Reversed numeric(21,3),
    Relay_EVoucher_Units int,
    Relay_EVoucher_Dollars numeric(21,3),
    Relay_Denial_Conversion_Units_Paid int,
    Relay_Denial_Conversion_Dollars_Paid numeric(21,3),
    Relay_Denial_Conversion_Units_Reversal int,
    Relay_Denial_Conversion_Dollars_Reversal numeric(21,3),
    Relay_Denial_Conversion_Units int,
    Relay_Denial_Conversion_Dollars numeric(21,3),
    Relay_CoC_Units_Paid int,
    Relay_CoC_Dollars_Paid numeric(21,3),
    Relay_CoC_Units_Reversed int,
    Relay_CoC_Dollars_Reversed numeric(21,3),
    Relay_CoC_Units int,
    Relay_CoC_Dollars numeric(21,3)
);


CREATE TABLE sandbox.NPA_DEMAND_UNITS_bkp_may21
(
    Product varchar(500),
    Channel varchar(500),
    NDC_Details varchar(500),
    EUTRx_May_2018 numeric(19,3),
    EUTRx_Jun_2018 numeric(19,3),
    EUTRx_Jul_2018 numeric(19,3),
    EUTRx_Aug_2018 numeric(19,3),
    EUTRx_Sep_2018 numeric(19,3),
    EUTRx_Oct_2018 numeric(19,3),
    EUTRx_Nov_2018 numeric(19,3),
    EUTRx_Dec_2018 numeric(19,3),
    EUTRx_Jan_2019 numeric(19,3),
    EUTRx_Feb_2019 numeric(19,3),
    EUTRx_Mar_2019 numeric(19,3),
    EUTRx_Apr_2019 numeric(19,3),
    EUTRx_May_2019 numeric(19,3),
    EUTRx_Jun_2019 numeric(19,3),
    EUTRx_Jul_2019 numeric(19,3),
    EUTRx_Aug_2019 numeric(19,3),
    EUTRx_Sep_2019 numeric(19,3),
    EUTRx_Oct_2019 numeric(19,3),
    EUTRx_Nov_2019 numeric(19,3),
    EUTRx_Dec_2019 numeric(19,3),
    EUTRx_Jan_2020 numeric(19,3),
    EUTRx_Feb_2020 numeric(19,3),
    EUTRx_Mar_2020 numeric(19,3),
    EUTRx_Apr_2020 numeric(19,3),
    EUTRx_May_2020 numeric(19,3),
    EUTRx_Jun_2020 numeric(19,3),
    EUTRx_Jul_2020 numeric(19,3),
    EUTRx_Aug_2020 numeric(19,3),
    EUTRx_Sep_2020 numeric(19,3),
    EUTRx_Oct_2020 numeric(19,3),
    EUTRx_Nov_2020 numeric(19,3),
    EUTRx_Dec_2020 numeric(19,3),
    EUTRx_Jan_2021 numeric(19,3),
    EUTRx_Feb_2021 numeric(19,3),
    EUTRx_Mar_2021 numeric(19,3),
    EUTRx_Apr_2021 numeric(19,3),
    EUTRx_May_2021 numeric(19,3),
    TRx_May_2018 numeric(19,3),
    TRx_Jun_2018 numeric(19,3),
    TRx_Jul_2018 numeric(19,3),
    TRx_Aug_2018 numeric(19,3),
    TRx_Sep_2018 numeric(19,3),
    TRx_Oct_2018 numeric(19,3),
    TRx_Nov_2018 numeric(19,3),
    TRx_Dec_2018 numeric(19,3),
    TRx_Jan_2019 numeric(19,3),
    TRx_Feb_2019 numeric(19,3),
    TRx_Mar_2019 numeric(19,3),
    TRx_Apr_2019 numeric(19,3),
    TRx_May_2019 numeric(19,3),
    TRx_Jun_2019 numeric(19,3),
    TRx_Jul_2019 numeric(19,3),
    TRx_Aug_2019 numeric(19,3),
    TRx_Sep_2019 numeric(19,3),
    TRx_Oct_2019 numeric(19,3),
    TRx_Nov_2019 numeric(19,3),
    TRx_Dec_2019 numeric(19,3),
    TRx_Jan_2020 numeric(19,3),
    TRx_Feb_2020 numeric(19,3),
    TRx_Mar_2020 numeric(19,3),
    TRx_Apr_2020 numeric(19,3),
    TRx_May_2020 numeric(19,3),
    TRx_Jun_2020 numeric(19,3),
    TRx_Jul_2020 numeric(19,3),
    TRx_Aug_2020 numeric(19,3),
    TRx_Sep_2020 numeric(19,3),
    TRx_Oct_2020 numeric(19,3),
    TRx_Nov_2020 numeric(19,3),
    TRx_Dec_2020 numeric(19,3),
    TRx_Jan_2021 numeric(19,3),
    TRx_Feb_2021 numeric(19,3),
    TRx_Mar_2021 numeric(19,3),
    TRx_Apr_2021 numeric(19,3),
    TRx_May_2021 numeric(19,3)
);


CREATE TABLE sandbox.RELAY_HEALTH_EVOUCHER_sep21
(
    RPT_BRAND_NAME varchar(500),
    NDC varchar(500),
    FDB_LABEL_NAME varchar(500),
    REPORT_MONTH date,
    FILL_NUMBER int,
    FILL_TYPE varchar(500),
    CLAIM_STATUS varchar(500),
    PHARMACY_STATE_NAME varchar(500),
    EVOUCHER_STATUS_DESC varchar(500),
    COPAY_RANGE_DISPLAY_ORDER int,
    COPAY_RANGE varchar(500),
    DAYS_SUPPLY int,
    QTY_DISPENSED numeric(19,3),
    ORIGINAL_COPAY numeric(19,3),
    EVOUCHER_AMOUNT numeric(19,3),
    NEW_COPAY numeric(19,3),
    PATIENT_STATUS varchar(500),
    PHARMACY_STATE_TYPE varchar(500),
    PATIENT_AGE_RANGE varchar(500),
    STARTER_BENEFIT_IND varchar(500),
    PPE_TRAN_ID varchar(500),
    PHARMACY_ZIPSEC varchar(500),
    BRD_ISSUE_FLAG varchar(500)
);


CREATE TABLE sandbox.relay_health_dc_sep21
(
    DRUG_TRADE_NAME varchar(500),
    NDC varchar(500),
    PAID_OR_REVERSED varchar(500),
    STATE varchar(500),
    QUANTITY numeric(19,3),
    DAYS_SUPPLY varchar(500),
    FILL_NUMBER int,
    FILL_TYPE varchar(500),
    DATE_OF_SERVICE date,
    DATE_PROCESSED date,
    PATIENT_PAY_AMT numeric(19,3),
    DENIAL_VOUCHER_AMOUNT numeric(19,3),
    TOTAL_ADMIN_FEES numeric(19,3),
    TOTAL_DUE numeric(19,3),
    TRANSACTION_ID varchar(500)
);


CREATE TABLE sandbox.RELAY_HEALTH_coc_spe21
(
    DRUG_TRADE_NAME varchar(500),
    NDC varchar(500),
    PAID_OR_REVERSED varchar(500),
    STATE varchar(500),
    QUANTITY numeric(19,3),
    FILL_NUMBER int,
    FILL_TYPE varchar(500),
    PAS_SUBMITTED int,
    DATE_OF_SERVICE date,
    PROCESSED_DATE date,
    PATIENT_PAY_DOLLAR numeric(19,3),
    PHARMACY_PRODUCT_DOLLAR numeric(19,3),
    ADMIN_FEES_DOLLAR numeric(19,3),
    MANUFACTURER_DOLLAR_AMOUNT numeric(19,3),
    TRANSACTION_ID varchar(500)
);


CREATE TABLE sandbox.copay_metrics_psd_updtd
(
    source_name varchar(255),
    ndc_code varchar(20),
    basket_name varchar(300),
    month_date varchar(106),
    mnth_dt date,
    CRx_Covered_Units int,
    CRx_EVoucher_Units int,
    CRx_NonCovered_Units int,
    CRx_DC_Units int,
    CRx_DC_Dollars numeric(20,2),
    CRx_PA_Units int,
    CRx_DC_CoC_Units int,
    CRx_Other_Units int,
    CRx_Covered_Dollars numeric(20,2),
    CRx_NonCovered_Dollars numeric(20,2)
);


CREATE TABLE sandbox.tv46k_MOP_2020
(
    ims_id varchar(10),
    "NULL" numeric(21,3),
    CASH numeric(21,3),
    "COMMERCIAL 3RD PTY" numeric(21,3),
    "MANAGED MEDICAID" numeric(21,3),
    MEDICAID numeric(21,3),
    "MEDICARE PT D" numeric(21,3),
    "VOUCHER/COPAY CARDS" numeric(21,3)
);


CREATE TABLE sandbox.tv46k_MOP_2021
(
    ims_id varchar(10),
    "NULL" numeric(21,3),
    CASH numeric(21,3),
    "COMMERCIAL 3RD PTY" numeric(21,3),
    "MANAGED MEDICAID" numeric(21,3),
    MEDICAID numeric(21,3),
    "MEDICARE PT D" numeric(21,3),
    "VOUCHER/COPAY CARDS" numeric(21,3)
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt
(
    PrescriberName varchar(75),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(5),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" numeric(5,0),
    "Current Month PSRFs" numeric(5,0),
    HCP_Signature_Yes numeric(5,0),
    HCP_Signature_No numeric(5,0),
    Patient_Auth_Yes numeric(5,0),
    Patient_Auth_No numeric(5,0),
    "YTD PSRFs" numeric(5,0)
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_022522
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(5),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" numeric(5,0),
    "Current Month PSRFs" numeric(5,0),
    HCP_Signature_Yes numeric(5,0),
    HCP_Signature_No numeric(5,0),
    Patient_Auth_Yes numeric(5,0),
    Patient_Auth_No numeric(5,0),
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_TP02182022
(
    PSRF_ID varchar(50),
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(12),
    PrescriberNPI varchar(50),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.metadata_workflow_command_03132022
(
    process_id int,
    command_step int,
    type varchar(100),
    folder varchar(100),
    file varchar(100),
    arguments varchar(100),
    search_for_text varchar(100),
    replace_with_text varchar(100),
    comments varchar(500),
    is_active boolean,
    create_timestamp timestamp,
    update_timestamp timestamp
);


CREATE TABLE sandbox.ajovy_payer_dash
(
    payment_method varchar(250),
    ptr_territory_num varchar(15),
    reg_territory_num varchar(17),
    area_territory_num varchar(19),
    nat_territory_num varchar(8),
    payer_plan_number varchar(10),
    CONTR_PARENT varchar(40),
    plan_name varchar(100),
    time_period varchar(14),
    max_week date,
    ajovy_access varchar(11),
    aimovig_access varchar(11),
    emgality_access varchar(11),
    ajovy float,
    aimovig float,
    emgality float,
    territory_name varchar(255),
    reg_name varchar(255),
    area_name varchar(255),
    nat_name varchar(6)
);


CREATE TABLE sandbox.ic_rx_jan2022
(
    ic_data_month date,
    basket_name varchar(300),
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    dnc_flag char(1),
    dnp_flag char(1),
    rollup_month date,
    month_bucket int,
    nrx_count float,
    trx_count float,
    nrx_quantity float,
    trx_quantity float,
    include_in_nation_rollup char(1),
    include_in_area_rollup char(1),
    include_in_region_rollup char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    indication varchar(20),
    outlet_dea varchar(15),
    payer_plan_number varchar(10),
    payment_method varchar(250)
);


CREATE TABLE sandbox.ic_demo_jan2022
(
    ic_data_month date,
    sales_force_id varchar(20),
    area_number varchar(15),
    region_number varchar(15),
    territory_number varchar(15),
    ims_id varchar(10),
    tvcmid int,
    outlet_code varchar(8),
    va_station_number varchar(10),
    specialty varchar(10),
    last_name varchar(80),
    first_name varchar(25),
    mid_name varchar(2),
    address_1 varchar(100),
    address_2 varchar(100),
    address_3 varchar(100),
    city varchar(50),
    state varchar(2),
    zip varchar(5),
    address_source varchar(50),
    pdrp_flag char(1),
    pdrp_date date,
    np_pa_flag char(1),
    no_spend char(1),
    ama_no_contact_flag char(1),
    join_key varchar(10),
    row_source varchar(100),
    row_create_date date,
    outlet_dea varchar(15),
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox.Austedo_HDCOE_2022
(
    "HD-COE ID" numeric(28,10),
    ims_org_id varchar(50),
    "tvcmid Teva list" int,
    "COE / Partner Site Name" varchar(111),
    "Active/Inactive_(per 2021 HDSA)" varchar(50),
    IMS_ID varchar(50),
    "tvcmid Teva list_1" int,
    "npi Teva list" int,
    "Last Name Teva list" varchar(50),
    "First Name Teva list" varchar(50),
    "Middle Name Teva list" varchar(50),
    primary_specialty varchar(50),
    address_line1 varchar(59),
    city varchar(50),
    state_code varchar(50),
    zip int,
    specialty_group varchar(50),
    "Level 1 COE" varchar(50),
    "Level 1 COE Partner sites" varchar(50),
    "In HCOS data" varchar(50),
    "In Teva List" varchar(50),
    "In Both (HCOS & TEVA List)" varchar(50),
    "In COE website" varchar(50),
    "In Both (COE Websites & Teva List)" varchar(50),
    "In All 3 (HCOS - COE Web - Teva List)" varchar(50),
    "Director/Professor" varchar(50),
    "Listed under HD/Movement Disporder" varchar(50),
    "Target HCP (Y/N)" varchar(50)
);


CREATE TABLE sandbox.pres_comb_demo_frozen_03242022_TPWED109_TPWED108
(
    start_date date,
    end_date date,
    sales_force_id varchar(20),
    ims_id varchar(10),
    npi varchar(10),
    tvcmid int,
    veeva_account_id varchar(20),
    specialty varchar(255),
    first_name varchar(50),
    middle_name varchar(50),
    last_name varchar(50),
    ptr_veeva_address_id varchar(20),
    ptr_address_1 varchar(100),
    ptr_address_2 varchar(100),
    ptr_address_3 varchar(100),
    ptr_city varchar(50),
    ptr_state varchar(2),
    ptr_zip varchar(5),
    ptr_phone varchar(40),
    ptr_territory_num varchar(15),
    ptr_territory_type varchar(30),
    ptr_address_source varchar(50),
    ptr_mailable varchar(1),
    dea_num varchar(10),
    pdrp_flag varchar(1),
    pdrp_date timestamp,
    np_pa_flag varchar(1),
    no_spend varchar(1),
    ama_no_contact_flag varchar(1),
    email varchar(100),
    degree varchar(100),
    address_id int,
    address_latitude varchar(20),
    address_longitude varchar(20),
    row_source varchar(100),
    freeze_reason varchar(100),
    freeze_date date,
    secondary_specialty varchar(255)
);


CREATE TABLE sandbox."FSRF today"
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(12),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox."Austedo PSRF today"
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(12),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_040122
(
    PrescriberName varchar(75),
    PrescriberCity varchar(50),
    PrescriberState varchar(50),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.Austedo_LTC_Affiliations
(
    "FACILITY ID" varchar(50),
    IMS_ID varchar(50)
);


CREATE TABLE sandbox.Austedo_PSRF_Utilization_Rpt_050622
(
    PrescriberName varchar(58),
    PrescriberCity varchar(50),
    PrescriberState varchar(2),
    PrescriberZip varchar(10),
    PrescriberNPI varchar(10),
    "Current Week PSRFs" int,
    "Current Month PSRFs" int,
    HCP_Signature_Yes int,
    HCP_Signature_No int,
    Patient_Auth_Yes int,
    Patient_Auth_No int,
    "YTD PSRFs" int
);


CREATE TABLE sandbox.sugg_terr
(
    id varchar(18),
    employeenumber varchar(20),
    name varchar(121),
    email varchar(128),
    territory_number varchar(80),
    ownerid varchar(255),
    batch_num int
);


CREATE TABLE sandbox.user_terr
(
    userid varchar(18),
    name varchar(80)
);


CREATE TABLE sandbox.acct_vod_tvcmid
(
    account_vod__c varchar(55),
    tvcmid varchar(100)
);


CREATE TABLE sandbox."TS_Call Plan Misaligned"
(
    tvcmid varchar(50),
    "pcd - ter_id" varchar(50),
    "call plan - ter id" varchar(50),
    "current alignment - ter id" varchar(50)
);


CREATE TABLE sandbox.TS_Q2_2022_callplan_rev_05172022
(
    VEEVA_ACCOUNT_ID varchar(50),
    TVCM_ID int,
    IMS_ID int,
    FIRST_NAME varchar(50),
    LAST_NAME varchar(50),
    SPECIALTY varchar(50),
    TERRITORY_ID varchar(50),
    ADDRESS_1 varchar(70),
    CITY varchar(50),
    STATE varchar(50),
    ZIP int,
    PRODUCT_NAME varchar(50),
    COMMITTED_P1 int,
    COMMITTED_P2 int,
    COMMITTED_P3 int,
    CALL_PLAN_TARGET varchar(50)
);


CREATE TABLE sandbox.call_key_msgs
(
    veeva_account_id varchar(18),
    tvcmid int,
    call_id varchar(80),
    call_record_type varchar(80),
    product varchar(80),
    key_message varchar(80),
    call_date date,
    duration numeric(12,4),
    display_order varchar(64),
    call_status varchar(255),
    territory varchar(100),
    call_type varchar(255),
    hcp_name varchar(1300),
    key_message_description varchar(200)
);


CREATE TABLE sandbox.res_pool
(
    pool_id int,
    name varchar(128),
    subcluster_oid int,
    subcluster_name varchar(128),
    is_internal boolean,
    memorysize varchar(128),
    maxmemorysize varchar(137),
    maxquerymemorysize varchar(128),
    executionparallelism varchar(20),
    priority int,
    runtimepriority varchar(12),
    runtimeprioritythreshold int,
    queuetimeout interval,
    plannedconcurrency varchar(20),
    maxconcurrency int,
    runtimecap interval,
    singleinitiator boolean,
    cpuaffinityset varchar(256),
    cpuaffinitymode varchar(12),
    cascadeto varchar(128),
    cascadetosubclusterpool boolean
);


CREATE TABLE sandbox.genoa_roster
(
    Pharmacy_Status varchar(7),
    Genoa_Site__ float,
    Street_Address_1 varchar(38),
    Street_Address_2 varchar(92),
    City varchar(20),
    State varchar(3),
    ZIP_Code varchar(10),
    Main_Phone varchar(17),
    Fax varchar(15),
    DEA varchar(28),
    DEA_Expiration date,
    NPI varchar(10),
    NCPDP varchar(7),
    State_Issuing_License varchar(3),
    Opening_Date date,
    Location_Notes varchar(1),
    Note_Effective_Date varchar(1),
    Pharmacy_Contact varchar(26)
);


CREATE TABLE sandbox.product
(
    product_id int NOT NULL,
    product_name varchar(300),
    product_type varchar(100),
    brand_id int,
    brand_name varchar(300),
    market_id int,
    market_name varchar(300),
    teva_product_flag varchar(1),
    geo_summary_include varchar(1),
    presc_summary_include varchar(1),
    market_share_market_id int,
    market_share_market_name varchar(300),
    market_share_default_brand varchar(1),
    rptg_decile_attribute_type varchar(100),
    rptg_decile_attribute_prod_id int,
    rptg_segment_attribute_type varchar(100),
    rptg_segment_attribute_prod_id int,
    molecule_id varchar(1),
    molecule_name varchar(1),
    class_name varchar(1),
    form_strength_name varchar(1),
    indication varchar(1),
    CONSTRAINT PK_product PRIMARY KEY (product_id) DISABLED
);


CREATE TABLE sandbox.product_item
(
    product_id int NOT NULL,
    product_name varchar(300),
    product_type varchar(100),
    item_id int NOT NULL,
    item_name varchar(300),
    item_type varchar(100),
    CONSTRAINT PK_product_item PRIMARY KEY (product_id, item_id) DISABLED
);


CREATE TABLE sandbox.genoa_roster_june2022
(
    Pharmacy_Status varchar(7),
    Genoa_Site__ float,
    Street_Address_1 varchar(38),
    Street_Address_2 varchar(92),
    City varchar(20),
    State varchar(3),
    ZIP_Code varchar(10),
    Main_Phone varchar(17),
    Fax varchar(15),
    DEA varchar(28),
    DEA_Expiration date,
    NPI varchar(10),
    NCPDP varchar(7),
    State_Issuing_License varchar(3),
    Opening_Date date,
    Location_Notes varchar(1),
    Note_Effective_Date varchar(1),
    Pharmacy_Contact varchar(26)
);


CREATE PROJECTION sandbox.ic_target_b0 /*+basename(ic_target),createtype(L)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 row_create_date
)
AS
 SELECT ic_target.ic_data_month,
        ic_target.basket_name,
        ic_target.sales_force_id,
        ic_target.area_number,
        ic_target.region_number,
        ic_target.territory_number,
        ic_target.ims_id,
        ic_target.tvcmid,
        ic_target.row_create_date
 FROM sandbox.ic_target
 ORDER BY ic_target.ims_id,
          ic_target.tvcmid,
          ic_target.territory_number
SEGMENTED BY hash(ic_target.ims_id, ic_target.tvcmid, ic_target.territory_number) ALL NODES;

CREATE PROJECTION sandbox.ic_goal_setting_b0 /*+basename(ic_goal_setting),createtype(L)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 market_rolling_6,
 product_rolling_6,
 market_rolling_12,
 market_baseline,
 product_baseline,
 target_market_rolling_6,
 target_product_rolling_6,
 target_market_rolling_12,
 target_market_baseline,
 target_product_baseline,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date
)
AS
 SELECT ic_goal_setting.ic_data_month,
        ic_goal_setting.basket_name,
        ic_goal_setting.sales_force_id,
        ic_goal_setting.area_number,
        ic_goal_setting.region_number,
        ic_goal_setting.territory_number,
        ic_goal_setting.ims_id,
        ic_goal_setting.tvcmid,
        ic_goal_setting.outlet_code,
        ic_goal_setting.va_station_number,
        ic_goal_setting.dnc_flag,
        ic_goal_setting.dnp_flag,
        ic_goal_setting.market_rolling_6,
        ic_goal_setting.product_rolling_6,
        ic_goal_setting.market_rolling_12,
        ic_goal_setting.market_baseline,
        ic_goal_setting.product_baseline,
        ic_goal_setting.target_market_rolling_6,
        ic_goal_setting.target_product_rolling_6,
        ic_goal_setting.target_market_rolling_12,
        ic_goal_setting.target_market_baseline,
        ic_goal_setting.target_product_baseline,
        ic_goal_setting.include_in_nation_rollup,
        ic_goal_setting.include_in_area_rollup,
        ic_goal_setting.include_in_region_rollup,
        ic_goal_setting.join_key,
        ic_goal_setting.row_source,
        ic_goal_setting.row_create_date
 FROM sandbox.ic_goal_setting
 ORDER BY ic_goal_setting.ic_data_month,
          ic_goal_setting.sales_force_id,
          ic_goal_setting.area_number,
          ic_goal_setting.region_number,
          ic_goal_setting.territory_number,
          ic_goal_setting.ims_id,
          ic_goal_setting.tvcmid,
          ic_goal_setting.outlet_code,
          ic_goal_setting.va_station_number,
          ic_goal_setting.dnp_flag,
          ic_goal_setting.join_key,
          ic_goal_setting.row_source
SEGMENTED BY hash(ic_goal_setting.ic_data_month, ic_goal_setting.sales_force_id, ic_goal_setting.area_number, ic_goal_setting.region_number, ic_goal_setting.territory_number, ic_goal_setting.ims_id, ic_goal_setting.tvcmid, ic_goal_setting.outlet_code, ic_goal_setting.va_station_number, ic_goal_setting.dnp_flag, ic_goal_setting.join_key, ic_goal_setting.row_source) ALL NODES;

CREATE PROJECTION sandbox.STG_LAAD_DIAGNOSIS_b0 /*+basename(STG_LAAD_DIAGNOSIS),createtype(L)*/ 
(
 CLAIM_ID,
 PATIENT_ID,
 SERVICE_DATE,
 DIAGNOSIS_CODE,
 RENDERING_PRESCRIBER_ID,
 REFERRING_PRESCRIBER_ID
)
AS
 SELECT STG_LAAD_DIAGNOSIS.CLAIM_ID,
        STG_LAAD_DIAGNOSIS.PATIENT_ID,
        STG_LAAD_DIAGNOSIS.SERVICE_DATE,
        STG_LAAD_DIAGNOSIS.DIAGNOSIS_CODE,
        STG_LAAD_DIAGNOSIS.RENDERING_PRESCRIBER_ID,
        STG_LAAD_DIAGNOSIS.REFERRING_PRESCRIBER_ID
 FROM sandbox.STG_LAAD_DIAGNOSIS
 ORDER BY STG_LAAD_DIAGNOSIS.CLAIM_ID,
          STG_LAAD_DIAGNOSIS.PATIENT_ID,
          STG_LAAD_DIAGNOSIS.SERVICE_DATE,
          STG_LAAD_DIAGNOSIS.DIAGNOSIS_CODE,
          STG_LAAD_DIAGNOSIS.RENDERING_PRESCRIBER_ID,
          STG_LAAD_DIAGNOSIS.REFERRING_PRESCRIBER_ID
SEGMENTED BY hash(STG_LAAD_DIAGNOSIS.SERVICE_DATE, STG_LAAD_DIAGNOSIS.CLAIM_ID, STG_LAAD_DIAGNOSIS.PATIENT_ID, STG_LAAD_DIAGNOSIS.RENDERING_PRESCRIBER_ID, STG_LAAD_DIAGNOSIS.REFERRING_PRESCRIBER_ID, STG_LAAD_DIAGNOSIS.DIAGNOSIS_CODE) ALL NODES;

CREATE PROJECTION sandbox.load_bag_territory_b0 /*+basename(load_bag_territory),createtype(L)*/ 
(
 territory_number,
 bag_name
)
AS
 SELECT load_bag_territory.territory_number,
        load_bag_territory.bag_name
 FROM sandbox.load_bag_territory
 ORDER BY load_bag_territory.territory_number,
          load_bag_territory.bag_name
SEGMENTED BY hash(load_bag_territory.territory_number, load_bag_territory.bag_name) ALL NODES;

CREATE PROJECTION sandbox.call_plan_decile_b0 /*+basename(call_plan_decile),createtype(L)*/ 
(
 hcp_id,
 market,
 decile_value,
 veeva_id
)
AS
 SELECT call_plan_decile.hcp_id,
        call_plan_decile.market,
        call_plan_decile.decile_value,
        call_plan_decile.veeva_id
 FROM sandbox.call_plan_decile
 ORDER BY call_plan_decile.hcp_id,
          call_plan_decile.market,
          call_plan_decile.decile_value
SEGMENTED BY hash(call_plan_decile.hcp_id, call_plan_decile.market, call_plan_decile.decile_value) ALL NODES;

CREATE PROJECTION sandbox.tmp_file_id_purge_b0 /*+basename(tmp_file_id_purge),createtype(A)*/ 
(
 file_id,
 feed_id
)
AS
 SELECT tmp_file_id_purge.file_id,
        tmp_file_id_purge.feed_id
 FROM sandbox.tmp_file_id_purge
 ORDER BY tmp_file_id_purge.file_id,
          tmp_file_id_purge.feed_id
SEGMENTED BY hash(tmp_file_id_purge.file_id, tmp_file_id_purge.feed_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_file_id_b0 /*+basename(tmp_file_id),createtype(A)*/ 
(
 file_id,
 feed_id
)
AS
 SELECT tmp_file_id.file_id,
        tmp_file_id.feed_id
 FROM sandbox.tmp_file_id
 ORDER BY tmp_file_id.file_id,
          tmp_file_id.feed_id
SEGMENTED BY hash(tmp_file_id.file_id, tmp_file_id.feed_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_445_1_md_b0 /*+basename(tmp_445_1_md),createtype(A)*/ 
(
 bucket_date,
 start_date,
 end_date,
 bucket_type,
 rollup_445
)
AS
 SELECT tmp_445_1_md.bucket_date,
        tmp_445_1_md.start_date,
        tmp_445_1_md.end_date,
        tmp_445_1_md.bucket_type,
        tmp_445_1_md.rollup_445
 FROM sandbox.tmp_445_1_md
 ORDER BY tmp_445_1_md.bucket_date,
          tmp_445_1_md.start_date,
          tmp_445_1_md.end_date,
          tmp_445_1_md.bucket_type,
          tmp_445_1_md.rollup_445
SEGMENTED BY hash(tmp_445_1_md.bucket_date, tmp_445_1_md.start_date, tmp_445_1_md.end_date, tmp_445_1_md.bucket_type, tmp_445_1_md.rollup_445) ALL NODES;

CREATE PROJECTION sandbox.tmp_445_2_md_b0 /*+basename(tmp_445_2_md),createtype(A)*/ 
(
 bucket_date,
 start_date,
 end_date,
 bucket_type,
 rollup_445
)
AS
 SELECT tmp_445_2_md.bucket_date,
        tmp_445_2_md.start_date,
        tmp_445_2_md.end_date,
        tmp_445_2_md.bucket_type,
        tmp_445_2_md.rollup_445
 FROM sandbox.tmp_445_2_md
 ORDER BY tmp_445_2_md.bucket_date,
          tmp_445_2_md.start_date,
          tmp_445_2_md.end_date,
          tmp_445_2_md.bucket_type,
          tmp_445_2_md.rollup_445
SEGMENTED BY hash(tmp_445_2_md.bucket_date, tmp_445_2_md.start_date, tmp_445_2_md.end_date, tmp_445_2_md.bucket_type, tmp_445_2_md.rollup_445) ALL NODES;

CREATE PROJECTION sandbox.tmp_445_md_b0 /*+basename(tmp_445_md),createtype(A)*/ 
(
 bucket_date,
 start_date,
 end_date,
 bucket_type,
 rollup_445
)
AS
 SELECT tmp_445_md.bucket_date,
        tmp_445_md.start_date,
        tmp_445_md.end_date,
        tmp_445_md.bucket_type,
        tmp_445_md.rollup_445
 FROM sandbox.tmp_445_md
 ORDER BY tmp_445_md.bucket_date,
          tmp_445_md.start_date,
          tmp_445_md.end_date,
          tmp_445_md.bucket_type,
          tmp_445_md.rollup_445
SEGMENTED BY hash(tmp_445_md.bucket_date, tmp_445_md.start_date, tmp_445_md.end_date, tmp_445_md.bucket_type, tmp_445_md.rollup_445) ALL NODES;

CREATE PROJECTION sandbox.tmp_ddd_md_b0 /*+basename(tmp_ddd_md),createtype(A)*/ 
(
 onc_account_demo_id,
 alt_seq_num,
 outlet_name,
 outlet_code,
 ims_facility_number,
 ims_prescriber_number,
 subcategory_code,
 outlet_zip,
 ims_client_num,
 ims_report_num,
 report_frequency,
 ims_product_code,
 basket_id,
 basket_name,
 data_date,
 date,
 rollup_week,
 rollup_month,
 rollup_445,
 comp_month,
 quantity,
 dollars,
 sales_force_id,
 file_id,
 record_id,
 tvcmid,
 outlet_tvcmid,
 facility_tvcmid,
 prescriber_tvcmid
)
AS
 SELECT tmp_ddd_md.onc_account_demo_id,
        tmp_ddd_md.alt_seq_num,
        tmp_ddd_md.outlet_name,
        tmp_ddd_md.outlet_code,
        tmp_ddd_md.ims_facility_number,
        tmp_ddd_md.ims_prescriber_number,
        tmp_ddd_md.subcategory_code,
        tmp_ddd_md.outlet_zip,
        tmp_ddd_md.ims_client_num,
        tmp_ddd_md.ims_report_num,
        tmp_ddd_md.report_frequency,
        tmp_ddd_md.ims_product_code,
        tmp_ddd_md.basket_id,
        tmp_ddd_md.basket_name,
        tmp_ddd_md.data_date,
        tmp_ddd_md.date,
        tmp_ddd_md.rollup_week,
        tmp_ddd_md.rollup_month,
        tmp_ddd_md.rollup_445,
        tmp_ddd_md.comp_month,
        tmp_ddd_md.quantity,
        tmp_ddd_md.dollars,
        tmp_ddd_md.sales_force_id,
        tmp_ddd_md.file_id,
        tmp_ddd_md.record_id,
        tmp_ddd_md.tvcmid,
        tmp_ddd_md.outlet_tvcmid,
        tmp_ddd_md.facility_tvcmid,
        tmp_ddd_md.prescriber_tvcmid
 FROM sandbox.tmp_ddd_md
 ORDER BY tmp_ddd_md.onc_account_demo_id,
          tmp_ddd_md.alt_seq_num,
          tmp_ddd_md.outlet_name,
          tmp_ddd_md.outlet_code,
          tmp_ddd_md.ims_facility_number,
          tmp_ddd_md.ims_prescriber_number,
          tmp_ddd_md.subcategory_code,
          tmp_ddd_md.outlet_zip,
          tmp_ddd_md.ims_client_num,
          tmp_ddd_md.ims_report_num,
          tmp_ddd_md.report_frequency,
          tmp_ddd_md.ims_product_code,
          tmp_ddd_md.basket_id,
          tmp_ddd_md.basket_name,
          tmp_ddd_md.data_date,
          tmp_ddd_md.date,
          tmp_ddd_md.rollup_week,
          tmp_ddd_md.rollup_month,
          tmp_ddd_md.rollup_445,
          tmp_ddd_md.comp_month,
          tmp_ddd_md.quantity,
          tmp_ddd_md.dollars,
          tmp_ddd_md.sales_force_id,
          tmp_ddd_md.file_id,
          tmp_ddd_md.record_id,
          tmp_ddd_md.tvcmid,
          tmp_ddd_md.outlet_tvcmid,
          tmp_ddd_md.facility_tvcmid,
          tmp_ddd_md.prescriber_tvcmid
SEGMENTED BY hash(tmp_ddd_md.record_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_qty_file_id_adhoc1_ad_b0 /*+basename(tmp_qty_file_id_adhoc1_ad),createtype(A)*/ 
(
 file_id
)
AS
 SELECT tmp_qty_file_id_adhoc1_ad.file_id
 FROM sandbox.tmp_qty_file_id_adhoc1_ad
 ORDER BY tmp_qty_file_id_adhoc1_ad.file_id
SEGMENTED BY hash(tmp_qty_file_id_adhoc1_ad.file_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_cnt_file_id_adhoc1_ad_b0 /*+basename(tmp_cnt_file_id_adhoc1_ad),createtype(A)*/ 
(
 file_id
)
AS
 SELECT tmp_cnt_file_id_adhoc1_ad.file_id
 FROM sandbox.tmp_cnt_file_id_adhoc1_ad
 ORDER BY tmp_cnt_file_id_adhoc1_ad.file_id
SEGMENTED BY hash(tmp_cnt_file_id_adhoc1_ad.file_id) ALL NODES;

CREATE PROJECTION sandbox.oncology_detail_goals_b0 /*+basename(oncology_detail_goals),createtype(L)*/ 
(
 territory_number,
 bendeka_quota,
 granix_quota
)
AS
 SELECT oncology_detail_goals.territory_number,
        oncology_detail_goals.bendeka_quota,
        oncology_detail_goals.granix_quota
 FROM sandbox.oncology_detail_goals
 ORDER BY oncology_detail_goals.territory_number,
          oncology_detail_goals.bendeka_quota,
          oncology_detail_goals.granix_quota
SEGMENTED BY hash(oncology_detail_goals.territory_number, oncology_detail_goals.bendeka_quota, oncology_detail_goals.granix_quota) ALL NODES;

CREATE PROJECTION sandbox.ic_decile_b0 /*+basename(ic_decile),createtype(L)*/ 
(
 ic_data_month,
 ims_id,
 tvcmid,
 decile_name,
 decile_value,
 join_key,
 row_source,
 row_create_date
)
AS
 SELECT ic_decile.ic_data_month,
        ic_decile.ims_id,
        ic_decile.tvcmid,
        ic_decile.decile_name,
        ic_decile.decile_value,
        ic_decile.join_key,
        ic_decile.row_source,
        ic_decile.row_create_date
 FROM sandbox.ic_decile
 ORDER BY ic_decile.ims_id
SEGMENTED BY hash(ic_decile.ic_data_month, ic_decile.tvcmid, ic_decile.decile_value, ic_decile.row_create_date, ic_decile.ims_id, ic_decile.join_key, ic_decile.row_source, ic_decile.decile_name) ALL NODES;

CREATE PROJECTION sandbox.scd_sfa_demographics_b0 /*+basename(scd_sfa_demographics),createtype(L)*/ 
(
 scd_status,
 scd_effective_date,
 scd_expiration_date,
 veeva_account_id,
 sales_force_id,
 customer_type,
 ims_id,
 npi,
 ims_outlet_code,
 territory_number,
 territory_type,
 territory_status,
 last_name,
 first_name,
 middle_name,
 suffix_name,
 credentials,
 organization_name,
 veeva_address_id,
 address_line1,
 address_line2,
 address_line3,
 city,
 state,
 zip,
 address_status,
 phone,
 phone_ext,
 fax,
 mobile,
 email,
 prim_specialty,
 specialty_code,
 sfa_create_date,
 bp_code,
 sfa_align_date,
 account_demo_id,
 pdrp_flag,
 designation,
 business_type,
 area_number,
 region_number,
 tvcmid,
 address_id
)
AS
 SELECT scd_sfa_demographics.scd_status,
        scd_sfa_demographics.scd_effective_date,
        scd_sfa_demographics.scd_expiration_date,
        scd_sfa_demographics.veeva_account_id,
        scd_sfa_demographics.sales_force_id,
        scd_sfa_demographics.customer_type,
        scd_sfa_demographics.ims_id,
        scd_sfa_demographics.npi,
        scd_sfa_demographics.ims_outlet_code,
        scd_sfa_demographics.territory_number,
        scd_sfa_demographics.territory_type,
        scd_sfa_demographics.territory_status,
        scd_sfa_demographics.last_name,
        scd_sfa_demographics.first_name,
        scd_sfa_demographics.middle_name,
        scd_sfa_demographics.suffix_name,
        scd_sfa_demographics.credentials,
        scd_sfa_demographics.organization_name,
        scd_sfa_demographics.veeva_address_id,
        scd_sfa_demographics.address_line1,
        scd_sfa_demographics.address_line2,
        scd_sfa_demographics.address_line3,
        scd_sfa_demographics.city,
        scd_sfa_demographics.state,
        scd_sfa_demographics.zip,
        scd_sfa_demographics.address_status,
        scd_sfa_demographics.phone,
        scd_sfa_demographics.phone_ext,
        scd_sfa_demographics.fax,
        scd_sfa_demographics.mobile,
        scd_sfa_demographics.email,
        scd_sfa_demographics.prim_specialty,
        scd_sfa_demographics.specialty_code,
        scd_sfa_demographics.sfa_create_date,
        scd_sfa_demographics.bp_code,
        scd_sfa_demographics.sfa_align_date,
        scd_sfa_demographics.account_demo_id,
        scd_sfa_demographics.pdrp_flag,
        scd_sfa_demographics.designation,
        scd_sfa_demographics.business_type,
        scd_sfa_demographics.area_number,
        scd_sfa_demographics.region_number,
        scd_sfa_demographics.tvcmid,
        scd_sfa_demographics.address_id
 FROM sandbox.scd_sfa_demographics
 ORDER BY scd_sfa_demographics.veeva_account_id
SEGMENTED BY hash(scd_sfa_demographics.veeva_account_id) ALL NODES;

CREATE PROJECTION sandbox.scd_roster_b0 /*+basename(scd_roster),createtype(L)*/ 
(
 scd_status,
 scd_effective_date,
 scd_expiration_date,
 employee_id,
 territory_number,
 territory_name,
 sales_force_id,
 full_name,
 first_name,
 middle_name,
 last_name,
 address_line1,
 address_line2,
 address_line3,
 city,
 state,
 zip,
 country,
 business_address_line1,
 business_address_line2,
 business_address_line3,
 business_city,
 business_state,
 business_zip,
 business_country,
 shipping_address_line1,
 shipping_address_line2,
 shipping_address_line3,
 shipping_city,
 shipping_state,
 shipping_zip,
 shipping_country,
 business_phone,
 home_phone,
 mobile_phone,
 fax,
 voice_mail_extension,
 email,
 hire_date,
 title,
 rep_type,
 username,
 out_of_territory,
 parent_territory_number,
 company_code,
 original_hire_date,
 team,
 salutation,
 suffix,
 cost_center,
 sample_eligibility_flag,
 samplestorage_address_line1,
 samplestorage_address_line2,
 samplestorage_address_line3,
 samplestorage_city,
 samplestorage_zip,
 samplestorage_state,
 samplestorage_country,
 hr_status,
 reg_contract,
 preferred_name,
 business_unit_cd,
 business_unit_name,
 veeva_user_id,
 mngr_employee_id,
 birth_month_day,
 calculated_rep_type,
 job_code,
 oracle_string,
 global_employee_id,
 supervisor_global_employee_id,
 separation_date,
 separation_reason
)
AS
 SELECT scd_roster.scd_status,
        scd_roster.scd_effective_date,
        scd_roster.scd_expiration_date,
        scd_roster.employee_id,
        scd_roster.territory_number,
        scd_roster.territory_name,
        scd_roster.sales_force_id,
        scd_roster.full_name,
        scd_roster.first_name,
        scd_roster.middle_name,
        scd_roster.last_name,
        scd_roster.address_line1,
        scd_roster.address_line2,
        scd_roster.address_line3,
        scd_roster.city,
        scd_roster.state,
        scd_roster.zip,
        scd_roster.country,
        scd_roster.business_address_line1,
        scd_roster.business_address_line2,
        scd_roster.business_address_line3,
        scd_roster.business_city,
        scd_roster.business_state,
        scd_roster.business_zip,
        scd_roster.business_country,
        scd_roster.shipping_address_line1,
        scd_roster.shipping_address_line2,
        scd_roster.shipping_address_line3,
        scd_roster.shipping_city,
        scd_roster.shipping_state,
        scd_roster.shipping_zip,
        scd_roster.shipping_country,
        scd_roster.business_phone,
        scd_roster.home_phone,
        scd_roster.mobile_phone,
        scd_roster.fax,
        scd_roster.voice_mail_extension,
        scd_roster.email,
        scd_roster.hire_date,
        scd_roster.title,
        scd_roster.rep_type,
        scd_roster.username,
        scd_roster.out_of_territory,
        scd_roster.parent_territory_number,
        scd_roster.company_code,
        scd_roster.original_hire_date,
        scd_roster.team,
        scd_roster.salutation,
        scd_roster.suffix,
        scd_roster.cost_center,
        scd_roster.sample_eligibility_flag,
        scd_roster.samplestorage_address_line1,
        scd_roster.samplestorage_address_line2,
        scd_roster.samplestorage_address_line3,
        scd_roster.samplestorage_city,
        scd_roster.samplestorage_zip,
        scd_roster.samplestorage_state,
        scd_roster.samplestorage_country,
        scd_roster.hr_status,
        scd_roster.reg_contract,
        scd_roster.preferred_name,
        scd_roster.business_unit_cd,
        scd_roster.business_unit_name,
        scd_roster.veeva_user_id,
        scd_roster.mngr_employee_id,
        scd_roster.birth_month_day,
        scd_roster.calculated_rep_type,
        scd_roster.job_code,
        scd_roster.oracle_string,
        scd_roster.global_employee_id,
        scd_roster.supervisor_global_employee_id,
        scd_roster.separation_date,
        scd_roster.separation_reason
 FROM sandbox.scd_roster
 ORDER BY scd_roster.employee_id,
          scd_roster.territory_number,
          scd_roster.territory_name,
          scd_roster.sales_force_id,
          scd_roster.full_name,
          scd_roster.first_name,
          scd_roster.middle_name,
          scd_roster.last_name,
          scd_roster.address_line1,
          scd_roster.address_line2,
          scd_roster.address_line3,
          scd_roster.city,
          scd_roster.state,
          scd_roster.zip,
          scd_roster.country,
          scd_roster.business_address_line1,
          scd_roster.business_address_line2,
          scd_roster.business_address_line3,
          scd_roster.business_city,
          scd_roster.business_state,
          scd_roster.business_zip,
          scd_roster.business_country,
          scd_roster.shipping_address_line1,
          scd_roster.shipping_address_line2,
          scd_roster.shipping_address_line3,
          scd_roster.shipping_city,
          scd_roster.shipping_state,
          scd_roster.shipping_zip,
          scd_roster.shipping_country,
          scd_roster.business_phone,
          scd_roster.home_phone,
          scd_roster.mobile_phone,
          scd_roster.fax,
          scd_roster.voice_mail_extension,
          scd_roster.email,
          scd_roster.hire_date,
          scd_roster.title,
          scd_roster.rep_type,
          scd_roster.username,
          scd_roster.out_of_territory,
          scd_roster.parent_territory_number,
          scd_roster.company_code,
          scd_roster.original_hire_date,
          scd_roster.team,
          scd_roster.salutation,
          scd_roster.suffix,
          scd_roster.cost_center,
          scd_roster.sample_eligibility_flag,
          scd_roster.samplestorage_address_line1,
          scd_roster.samplestorage_address_line2,
          scd_roster.samplestorage_address_line3,
          scd_roster.samplestorage_city,
          scd_roster.samplestorage_zip,
          scd_roster.samplestorage_state,
          scd_roster.samplestorage_country,
          scd_roster.hr_status,
          scd_roster.reg_contract,
          scd_roster.preferred_name,
          scd_roster.business_unit_cd,
          scd_roster.business_unit_name,
          scd_roster.veeva_user_id,
          scd_roster.mngr_employee_id,
          scd_roster.birth_month_day,
          scd_roster.calculated_rep_type,
          scd_roster.job_code,
          scd_roster.oracle_string,
          scd_roster.global_employee_id,
          scd_roster.supervisor_global_employee_id
SEGMENTED BY hash(scd_roster.scd_effective_date, scd_roster.scd_expiration_date, scd_roster.business_state, scd_roster.shipping_state, scd_roster.hire_date, scd_roster.out_of_territory, scd_roster.original_hire_date, scd_roster.samplestorage_state, scd_roster.birth_month_day, scd_roster.separation_date, scd_roster.scd_status, scd_roster.rep_type, scd_roster.sample_eligibility_flag, scd_roster.business_unit_cd, scd_roster.job_code, scd_roster.salutation, scd_roster.suffix, scd_roster.calculated_rep_type, scd_roster.cost_center, scd_roster.global_employee_id, scd_roster.supervisor_global_employee_id, scd_roster.oracle_string, scd_roster.employee_id, scd_roster.territory_number, scd_roster.sales_force_id, scd_roster.full_name, scd_roster.first_name, scd_roster.middle_name, scd_roster.last_name, scd_roster.address_line1, scd_roster.address_line2, scd_roster.address_line3) ALL NODES;

CREATE PROJECTION sandbox.scd_sales_geography_b0 /*+basename(scd_sales_geography),createtype(L)*/ 
(
 scd_status,
 scd_effective_date,
 scd_expiration_date,
 sales_force_id,
 geography_number,
 geography_name,
 geography_desc,
 geography_type,
 employee_type,
 sales_team,
 parent_geography_number,
 fleet_eligible_flag
)
AS
 SELECT scd_sales_geography.scd_status,
        scd_sales_geography.scd_effective_date,
        scd_sales_geography.scd_expiration_date,
        scd_sales_geography.sales_force_id,
        scd_sales_geography.geography_number,
        scd_sales_geography.geography_name,
        scd_sales_geography.geography_desc,
        scd_sales_geography.geography_type,
        scd_sales_geography.employee_type,
        scd_sales_geography.sales_team,
        scd_sales_geography.parent_geography_number,
        scd_sales_geography.fleet_eligible_flag
 FROM sandbox.scd_sales_geography
 ORDER BY scd_sales_geography.sales_force_id,
          scd_sales_geography.geography_number,
          scd_sales_geography.geography_name,
          scd_sales_geography.geography_desc,
          scd_sales_geography.geography_type,
          scd_sales_geography.employee_type,
          scd_sales_geography.sales_team,
          scd_sales_geography.parent_geography_number
SEGMENTED BY hash(scd_sales_geography.sales_force_id, scd_sales_geography.employee_type, scd_sales_geography.geography_number, scd_sales_geography.geography_type, scd_sales_geography.parent_geography_number, scd_sales_geography.geography_name, scd_sales_geography.geography_desc, scd_sales_geography.sales_team) ALL NODES;

CREATE PROJECTION sandbox.onc_osm_targets_b0 /*+basename(onc_osm_targets),createtype(L)*/ 
(
 tvcmid,
 target_value
)
AS
 SELECT onc_osm_targets.tvcmid,
        onc_osm_targets.target_value
 FROM sandbox.onc_osm_targets
 ORDER BY onc_osm_targets.tvcmid,
          onc_osm_targets.target_value
SEGMENTED BY hash(onc_osm_targets.tvcmid, onc_osm_targets.target_value) ALL NODES;

CREATE PROJECTION sandbox.call_sample_product_value_b0 /*+basename(call_sample_product_value),createtype(L)*/ 
(
 Id,
 product_value_vod__c
)
AS
 SELECT call_sample_product_value.Id,
        call_sample_product_value.product_value_vod__c
 FROM sandbox.call_sample_product_value
 ORDER BY call_sample_product_value.Id,
          call_sample_product_value.product_value_vod__c
SEGMENTED BY hash(call_sample_product_value.Id, call_sample_product_value.product_value_vod__c) ALL NODES;

CREATE PROJECTION sandbox.views_to_keep_b0 /*+basename(views_to_keep),createtype(L)*/ 
(
 view_name
)
AS
 SELECT views_to_keep.view_name
 FROM sandbox.views_to_keep
 ORDER BY views_to_keep.view_name
SEGMENTED BY hash(views_to_keep.view_name) ALL NODES;

CREATE PROJECTION sandbox.ingestion_databurst_updt_b0 /*+basename(ingestion_databurst_updt),createtype(A)*/ 
(
 table_name
)
AS
 SELECT ingestion_databurst_updt.table_name
 FROM sandbox.ingestion_databurst_updt
 ORDER BY ingestion_databurst_updt.table_name
SEGMENTED BY hash(ingestion_databurst_updt.table_name) ALL NODES;

CREATE PROJECTION sandbox.grants_teva_ingestion_b0 /*+basename(grants_teva_ingestion),createtype(A)*/ 
(
 grant_id,
 grantor_id,
 grantor,
 privileges_description,
 object_schema,
 object_name,
 object_id,
 object_type,
 grantee_id,
 grantee
)
AS
 SELECT grants_teva_ingestion.grant_id,
        grants_teva_ingestion.grantor_id,
        grants_teva_ingestion.grantor,
        grants_teva_ingestion.privileges_description,
        grants_teva_ingestion.object_schema,
        grants_teva_ingestion.object_name,
        grants_teva_ingestion.object_id,
        grants_teva_ingestion.object_type,
        grants_teva_ingestion.grantee_id,
        grants_teva_ingestion.grantee
 FROM sandbox.grants_teva_ingestion
 ORDER BY grants_teva_ingestion.grant_id
SEGMENTED BY hash(grants_teva_ingestion.grant_id, grants_teva_ingestion.grantor_id, grants_teva_ingestion.object_id, grants_teva_ingestion.grantee_id, grants_teva_ingestion.grantor, grants_teva_ingestion.object_schema, grants_teva_ingestion.object_name, grants_teva_ingestion.grantee) ALL NODES;

CREATE PROJECTION sandbox.mb_customer_b0 /*+basename(mb_customer),createtype(A)*/ 
(
 customer_id,
 tvcmid,
 ims_id,
 ims_outlet_code,
 ims_facility_number,
 federation_id,
 customer_type,
 prescriber_type,
 network_name,
 account_name,
 physician_first_name,
 physician_last_name,
 credential,
 subcat_group,
 subcat_code,
 pdrp_flag,
 pri_specialty_code,
 pri_specialty_desc,
 sec_specialty_code,
 sec_specialty_desc,
 cm_status_flag,
 gpo,
 dnp_flag,
 product_1_dnc_flag,
 product_2_dnc_flag,
 a_specialty_group,
 b_specialty_group,
 c_specialty_group,
 formulary_control
)
AS
 SELECT mb_customer.customer_id,
        mb_customer.tvcmid,
        mb_customer.ims_id,
        mb_customer.ims_outlet_code,
        mb_customer.ims_facility_number,
        mb_customer.federation_id,
        mb_customer.customer_type,
        mb_customer.prescriber_type,
        mb_customer.network_name,
        mb_customer.account_name,
        mb_customer.physician_first_name,
        mb_customer.physician_last_name,
        mb_customer.credential,
        mb_customer.subcat_group,
        mb_customer.subcat_code,
        mb_customer.pdrp_flag,
        mb_customer.pri_specialty_code,
        mb_customer.pri_specialty_desc,
        mb_customer.sec_specialty_code,
        mb_customer.sec_specialty_desc,
        mb_customer.cm_status_flag,
        mb_customer.gpo,
        mb_customer.dnp_flag,
        mb_customer.product_1_dnc_flag,
        mb_customer.product_2_dnc_flag,
        mb_customer.a_specialty_group,
        mb_customer.b_specialty_group,
        mb_customer.c_specialty_group,
        mb_customer.formulary_control
 FROM sandbox.mb_customer
 ORDER BY mb_customer.customer_id,
          mb_customer.tvcmid,
          mb_customer.ims_id,
          mb_customer.ims_outlet_code,
          mb_customer.ims_facility_number,
          mb_customer.federation_id,
          mb_customer.customer_type,
          mb_customer.prescriber_type
SEGMENTED BY hash(mb_customer.tvcmid, mb_customer.subcat_code, mb_customer.pdrp_flag, mb_customer.dnp_flag, mb_customer.product_1_dnc_flag, mb_customer.product_2_dnc_flag, mb_customer.ims_id, mb_customer.ims_outlet_code) ALL NODES;

CREATE PROJECTION sandbox.mb_ic_demo_tn_b0 /*+basename(mb_ic_demo_tn),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT mb_ic_demo_tn.ic_data_month,
        mb_ic_demo_tn.sales_force_id,
        mb_ic_demo_tn.area_number,
        mb_ic_demo_tn.region_number,
        mb_ic_demo_tn.territory_number,
        mb_ic_demo_tn.ims_id,
        mb_ic_demo_tn.tvcmid,
        mb_ic_demo_tn.outlet_code,
        mb_ic_demo_tn.va_station_number,
        mb_ic_demo_tn.specialty,
        mb_ic_demo_tn.last_name,
        mb_ic_demo_tn.first_name,
        mb_ic_demo_tn.mid_name,
        mb_ic_demo_tn.address_1,
        mb_ic_demo_tn.address_2,
        mb_ic_demo_tn.address_3,
        mb_ic_demo_tn.city,
        mb_ic_demo_tn.state,
        mb_ic_demo_tn.zip,
        mb_ic_demo_tn.address_source,
        mb_ic_demo_tn.pdrp_flag,
        mb_ic_demo_tn.pdrp_date,
        mb_ic_demo_tn.np_pa_flag,
        mb_ic_demo_tn.no_spend,
        mb_ic_demo_tn.ama_no_contact_flag,
        mb_ic_demo_tn.join_key,
        mb_ic_demo_tn.row_source,
        mb_ic_demo_tn.row_create_date,
        mb_ic_demo_tn.outlet_dea,
        mb_ic_demo_tn.secondary_specialty
 FROM sandbox.mb_ic_demo_tn
 ORDER BY mb_ic_demo_tn.ic_data_month,
          mb_ic_demo_tn.sales_force_id,
          mb_ic_demo_tn.area_number,
          mb_ic_demo_tn.region_number,
          mb_ic_demo_tn.territory_number,
          mb_ic_demo_tn.ims_id,
          mb_ic_demo_tn.tvcmid,
          mb_ic_demo_tn.outlet_code
SEGMENTED BY hash(mb_ic_demo_tn.ic_data_month, mb_ic_demo_tn.tvcmid, mb_ic_demo_tn.outlet_code, mb_ic_demo_tn.mid_name, mb_ic_demo_tn.state, mb_ic_demo_tn.zip, mb_ic_demo_tn.pdrp_flag, mb_ic_demo_tn.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.mb_ic_rx_tn_b0 /*+basename(mb_ic_rx_tn),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT mb_ic_rx_tn.ic_data_month,
        mb_ic_rx_tn.basket_name,
        mb_ic_rx_tn.sales_force_id,
        mb_ic_rx_tn.area_number,
        mb_ic_rx_tn.region_number,
        mb_ic_rx_tn.territory_number,
        mb_ic_rx_tn.ims_id,
        mb_ic_rx_tn.tvcmid,
        mb_ic_rx_tn.outlet_code,
        mb_ic_rx_tn.va_station_number,
        mb_ic_rx_tn.dnc_flag,
        mb_ic_rx_tn.dnp_flag,
        mb_ic_rx_tn.rollup_month,
        mb_ic_rx_tn.month_bucket,
        mb_ic_rx_tn.nrx_count,
        mb_ic_rx_tn.trx_count,
        mb_ic_rx_tn.nrx_quantity,
        mb_ic_rx_tn.trx_quantity,
        mb_ic_rx_tn.include_in_nation_rollup,
        mb_ic_rx_tn.include_in_area_rollup,
        mb_ic_rx_tn.include_in_region_rollup,
        mb_ic_rx_tn.join_key,
        mb_ic_rx_tn.row_source,
        mb_ic_rx_tn.row_create_date,
        mb_ic_rx_tn.indication,
        mb_ic_rx_tn.outlet_dea,
        mb_ic_rx_tn.payer_plan_number,
        mb_ic_rx_tn.payment_method
 FROM sandbox.mb_ic_rx_tn
 ORDER BY mb_ic_rx_tn.ic_data_month,
          mb_ic_rx_tn.basket_name,
          mb_ic_rx_tn.sales_force_id,
          mb_ic_rx_tn.area_number,
          mb_ic_rx_tn.region_number,
          mb_ic_rx_tn.territory_number,
          mb_ic_rx_tn.ims_id,
          mb_ic_rx_tn.tvcmid
SEGMENTED BY hash(mb_ic_rx_tn.ic_data_month, mb_ic_rx_tn.tvcmid, mb_ic_rx_tn.outlet_code, mb_ic_rx_tn.dnc_flag, mb_ic_rx_tn.dnp_flag, mb_ic_rx_tn.rollup_month, mb_ic_rx_tn.month_bucket, mb_ic_rx_tn.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.mb_ic_rx_tr_b0 /*+basename(mb_ic_rx_tr),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT mb_ic_rx_tr.ic_data_month,
        mb_ic_rx_tr.basket_name,
        mb_ic_rx_tr.sales_force_id,
        mb_ic_rx_tr.area_number,
        mb_ic_rx_tr.region_number,
        mb_ic_rx_tr.territory_number,
        mb_ic_rx_tr.ims_id,
        mb_ic_rx_tr.tvcmid,
        mb_ic_rx_tr.outlet_code,
        mb_ic_rx_tr.va_station_number,
        mb_ic_rx_tr.dnc_flag,
        mb_ic_rx_tr.dnp_flag,
        mb_ic_rx_tr.rollup_month,
        mb_ic_rx_tr.month_bucket,
        mb_ic_rx_tr.nrx_count,
        mb_ic_rx_tr.trx_count,
        mb_ic_rx_tr.nrx_quantity,
        mb_ic_rx_tr.trx_quantity,
        mb_ic_rx_tr.include_in_nation_rollup,
        mb_ic_rx_tr.include_in_area_rollup,
        mb_ic_rx_tr.include_in_region_rollup,
        mb_ic_rx_tr.join_key,
        mb_ic_rx_tr.row_source,
        mb_ic_rx_tr.row_create_date,
        mb_ic_rx_tr.indication,
        mb_ic_rx_tr.outlet_dea,
        mb_ic_rx_tr.payer_plan_number,
        mb_ic_rx_tr.payment_method
 FROM sandbox.mb_ic_rx_tr
 ORDER BY mb_ic_rx_tr.ic_data_month,
          mb_ic_rx_tr.basket_name,
          mb_ic_rx_tr.sales_force_id,
          mb_ic_rx_tr.area_number,
          mb_ic_rx_tr.region_number,
          mb_ic_rx_tr.territory_number,
          mb_ic_rx_tr.ims_id,
          mb_ic_rx_tr.tvcmid
SEGMENTED BY hash(mb_ic_rx_tr.ic_data_month, mb_ic_rx_tr.tvcmid, mb_ic_rx_tr.outlet_code, mb_ic_rx_tr.dnc_flag, mb_ic_rx_tr.dnp_flag, mb_ic_rx_tr.rollup_month, mb_ic_rx_tr.month_bucket, mb_ic_rx_tr.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.mb_ic_demo_tr_b0 /*+basename(mb_ic_demo_tr),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT mb_ic_demo_tr.ic_data_month,
        mb_ic_demo_tr.sales_force_id,
        mb_ic_demo_tr.area_number,
        mb_ic_demo_tr.region_number,
        mb_ic_demo_tr.territory_number,
        mb_ic_demo_tr.ims_id,
        mb_ic_demo_tr.tvcmid,
        mb_ic_demo_tr.outlet_code,
        mb_ic_demo_tr.va_station_number,
        mb_ic_demo_tr.specialty,
        mb_ic_demo_tr.last_name,
        mb_ic_demo_tr.first_name,
        mb_ic_demo_tr.mid_name,
        mb_ic_demo_tr.address_1,
        mb_ic_demo_tr.address_2,
        mb_ic_demo_tr.address_3,
        mb_ic_demo_tr.city,
        mb_ic_demo_tr.state,
        mb_ic_demo_tr.zip,
        mb_ic_demo_tr.address_source,
        mb_ic_demo_tr.pdrp_flag,
        mb_ic_demo_tr.pdrp_date,
        mb_ic_demo_tr.np_pa_flag,
        mb_ic_demo_tr.no_spend,
        mb_ic_demo_tr.ama_no_contact_flag,
        mb_ic_demo_tr.join_key,
        mb_ic_demo_tr.row_source,
        mb_ic_demo_tr.row_create_date,
        mb_ic_demo_tr.outlet_dea,
        mb_ic_demo_tr.secondary_specialty
 FROM sandbox.mb_ic_demo_tr
 ORDER BY mb_ic_demo_tr.ic_data_month,
          mb_ic_demo_tr.sales_force_id,
          mb_ic_demo_tr.area_number,
          mb_ic_demo_tr.region_number,
          mb_ic_demo_tr.territory_number,
          mb_ic_demo_tr.ims_id,
          mb_ic_demo_tr.tvcmid,
          mb_ic_demo_tr.outlet_code
SEGMENTED BY hash(mb_ic_demo_tr.ic_data_month, mb_ic_demo_tr.tvcmid, mb_ic_demo_tr.outlet_code, mb_ic_demo_tr.mid_name, mb_ic_demo_tr.state, mb_ic_demo_tr.zip, mb_ic_demo_tr.pdrp_flag, mb_ic_demo_tr.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.concur_hcp_curr_b0 /*+basename(concur_hcp_curr),createtype(A)*/ 
(
 cust_id,
 organization_name,
 contact_type,
 first_name,
 middle_name,
 last_name,
 suffix,
 npi,
 address_line_1,
 address_line_2,
 city,
 state,
 zipcode,
 sln,
 sln_state,
 dea,
 affiliation,
 credential,
 healthcare_professional_status_code,
 create_date
)
AS
 SELECT concur_hcp_curr.cust_id,
        concur_hcp_curr.organization_name,
        concur_hcp_curr.contact_type,
        concur_hcp_curr.first_name,
        concur_hcp_curr.middle_name,
        concur_hcp_curr.last_name,
        concur_hcp_curr.suffix,
        concur_hcp_curr.npi,
        concur_hcp_curr.address_line_1,
        concur_hcp_curr.address_line_2,
        concur_hcp_curr.city,
        concur_hcp_curr.state,
        concur_hcp_curr.zipcode,
        concur_hcp_curr.sln,
        concur_hcp_curr.sln_state,
        concur_hcp_curr.dea,
        concur_hcp_curr.affiliation,
        concur_hcp_curr.credential,
        concur_hcp_curr.healthcare_professional_status_code,
        concur_hcp_curr.create_date
 FROM sandbox.concur_hcp_curr
 ORDER BY concur_hcp_curr.cust_id,
          concur_hcp_curr.first_name,
          concur_hcp_curr.middle_name,
          concur_hcp_curr.last_name,
          concur_hcp_curr.suffix,
          concur_hcp_curr.npi,
          concur_hcp_curr.address_line_1,
          concur_hcp_curr.address_line_2,
          concur_hcp_curr.city,
          concur_hcp_curr.state,
          concur_hcp_curr.zipcode,
          concur_hcp_curr.sln,
          concur_hcp_curr.sln_state,
          concur_hcp_curr.dea,
          concur_hcp_curr.credential,
          concur_hcp_curr.healthcare_professional_status_code
SEGMENTED BY hash(concur_hcp_curr.cust_id, concur_hcp_curr.first_name, concur_hcp_curr.middle_name, concur_hcp_curr.last_name, concur_hcp_curr.suffix, concur_hcp_curr.npi, concur_hcp_curr.address_line_1, concur_hcp_curr.address_line_2, concur_hcp_curr.city, concur_hcp_curr.state, concur_hcp_curr.zipcode, concur_hcp_curr.sln, concur_hcp_curr.sln_state, concur_hcp_curr.dea, concur_hcp_curr.credential, concur_hcp_curr.healthcare_professional_status_code) ALL NODES;

CREATE PROJECTION sandbox.concur_hcp_delta_b0 /*+basename(concur_hcp_delta),createtype(A)*/ 
(
 cust_id,
 organization_name,
 contact_type,
 first_name,
 middle_name,
 last_name,
 suffix,
 npi,
 address_line_1,
 address_line_2,
 city,
 state,
 zipcode,
 sln,
 sln_state,
 dea,
 affiliation,
 credential,
 healthcare_professional_status_code,
 create_date
)
AS
 SELECT concur_hcp_delta.cust_id,
        concur_hcp_delta.organization_name,
        concur_hcp_delta.contact_type,
        concur_hcp_delta.first_name,
        concur_hcp_delta.middle_name,
        concur_hcp_delta.last_name,
        concur_hcp_delta.suffix,
        concur_hcp_delta.npi,
        concur_hcp_delta.address_line_1,
        concur_hcp_delta.address_line_2,
        concur_hcp_delta.city,
        concur_hcp_delta.state,
        concur_hcp_delta.zipcode,
        concur_hcp_delta.sln,
        concur_hcp_delta.sln_state,
        concur_hcp_delta.dea,
        concur_hcp_delta.affiliation,
        concur_hcp_delta.credential,
        concur_hcp_delta.healthcare_professional_status_code,
        concur_hcp_delta.create_date
 FROM sandbox.concur_hcp_delta
 ORDER BY concur_hcp_delta.cust_id
SEGMENTED BY hash(concur_hcp_delta.cust_id, concur_hcp_delta.first_name, concur_hcp_delta.middle_name, concur_hcp_delta.last_name, concur_hcp_delta.suffix, concur_hcp_delta.npi, concur_hcp_delta.address_line_1, concur_hcp_delta.address_line_2, concur_hcp_delta.city, concur_hcp_delta.state, concur_hcp_delta.zipcode, concur_hcp_delta.sln, concur_hcp_delta.sln_state, concur_hcp_delta.dea, concur_hcp_delta.credential, concur_hcp_delta.healthcare_professional_status_code) ALL NODES;

CREATE PROJECTION sandbox.prescriber_rx_ics_splitweek_08252020_b0 /*+basename(prescriber_rx_ics_splitweek_08252020),createtype(A)*/ 
(
 ims_id,
 payer_plan_number,
 ims_client_number,
 report_frequency,
 ims_product_group,
 basket_id,
 data_date,
 date,
 sales_category,
 tvcmid,
 prescriber_first_name,
 prescriber_last_name,
 basket_name,
 basket_type,
 rollup_week,
 rollup_month,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 unnormalized_nrx_count,
 unnormalized_trx_count,
 market_name,
 payer_name,
 plan_name,
 pbm_name,
 model,
 payment_method,
 ims_specialty,
 ims_rx_type,
 ims_supplemental_data,
 ims_zip_other,
 ims_report_number_cnt,
 cnt_file_id,
 cnt_record_id,
 ims_report_number_qty,
 qty_file_id,
 qty_record_id,
 rollup_flag,
 indication,
 pbm_parent_name
)
AS
 SELECT prescriber_rx_ics_splitweek_08252020.ims_id,
        prescriber_rx_ics_splitweek_08252020.payer_plan_number,
        prescriber_rx_ics_splitweek_08252020.ims_client_number,
        prescriber_rx_ics_splitweek_08252020.report_frequency,
        prescriber_rx_ics_splitweek_08252020.ims_product_group,
        prescriber_rx_ics_splitweek_08252020.basket_id,
        prescriber_rx_ics_splitweek_08252020.data_date,
        prescriber_rx_ics_splitweek_08252020.date,
        prescriber_rx_ics_splitweek_08252020.sales_category,
        prescriber_rx_ics_splitweek_08252020.tvcmid,
        prescriber_rx_ics_splitweek_08252020.prescriber_first_name,
        prescriber_rx_ics_splitweek_08252020.prescriber_last_name,
        prescriber_rx_ics_splitweek_08252020.basket_name,
        prescriber_rx_ics_splitweek_08252020.basket_type,
        prescriber_rx_ics_splitweek_08252020.rollup_week,
        prescriber_rx_ics_splitweek_08252020.rollup_month,
        prescriber_rx_ics_splitweek_08252020.nrx_count,
        prescriber_rx_ics_splitweek_08252020.trx_count,
        prescriber_rx_ics_splitweek_08252020.nrx_quantity,
        prescriber_rx_ics_splitweek_08252020.trx_quantity,
        prescriber_rx_ics_splitweek_08252020.unnormalized_nrx_count,
        prescriber_rx_ics_splitweek_08252020.unnormalized_trx_count,
        prescriber_rx_ics_splitweek_08252020.market_name,
        prescriber_rx_ics_splitweek_08252020.payer_name,
        prescriber_rx_ics_splitweek_08252020.plan_name,
        prescriber_rx_ics_splitweek_08252020.pbm_name,
        prescriber_rx_ics_splitweek_08252020.model,
        prescriber_rx_ics_splitweek_08252020.payment_method,
        prescriber_rx_ics_splitweek_08252020.ims_specialty,
        prescriber_rx_ics_splitweek_08252020.ims_rx_type,
        prescriber_rx_ics_splitweek_08252020.ims_supplemental_data,
        prescriber_rx_ics_splitweek_08252020.ims_zip_other,
        prescriber_rx_ics_splitweek_08252020.ims_report_number_cnt,
        prescriber_rx_ics_splitweek_08252020.cnt_file_id,
        prescriber_rx_ics_splitweek_08252020.cnt_record_id,
        prescriber_rx_ics_splitweek_08252020.ims_report_number_qty,
        prescriber_rx_ics_splitweek_08252020.qty_file_id,
        prescriber_rx_ics_splitweek_08252020.qty_record_id,
        prescriber_rx_ics_splitweek_08252020.rollup_flag,
        prescriber_rx_ics_splitweek_08252020.indication,
        prescriber_rx_ics_splitweek_08252020.pbm_parent_name
 FROM sandbox.prescriber_rx_ics_splitweek_08252020
 ORDER BY prescriber_rx_ics_splitweek_08252020.rollup_flag,
          prescriber_rx_ics_splitweek_08252020.ims_rx_type,
          prescriber_rx_ics_splitweek_08252020.basket_type,
          prescriber_rx_ics_splitweek_08252020.ims_client_number,
          prescriber_rx_ics_splitweek_08252020.indication,
          prescriber_rx_ics_splitweek_08252020.market_name,
          prescriber_rx_ics_splitweek_08252020.ims_product_group,
          prescriber_rx_ics_splitweek_08252020.basket_id,
          prescriber_rx_ics_splitweek_08252020.ims_specialty,
          prescriber_rx_ics_splitweek_08252020.ims_zip_other,
          prescriber_rx_ics_splitweek_08252020.ims_report_number_qty,
          prescriber_rx_ics_splitweek_08252020.ims_report_number_cnt,
          prescriber_rx_ics_splitweek_08252020.tvcmid,
          prescriber_rx_ics_splitweek_08252020.payment_method,
          prescriber_rx_ics_splitweek_08252020.payer_plan_number,
          prescriber_rx_ics_splitweek_08252020.rollup_month,
          prescriber_rx_ics_splitweek_08252020.rollup_week,
          prescriber_rx_ics_splitweek_08252020.nrx_quantity,
          prescriber_rx_ics_splitweek_08252020.trx_quantity,
          prescriber_rx_ics_splitweek_08252020.nrx_count,
          prescriber_rx_ics_splitweek_08252020.trx_count,
          prescriber_rx_ics_splitweek_08252020.sales_category,
          prescriber_rx_ics_splitweek_08252020.ims_id
SEGMENTED BY hash(prescriber_rx_ics_splitweek_08252020.ims_id) ALL NODES;

CREATE PROJECTION sandbox.zs_teva_payer_master_b0 /*+basename(zs_teva_payer_master),createtype(L)*/ 
(
 plan_code,
 Final_Key_Controlling_Account,
 Key_Parent_Account,
 PBM,
 Payer,
 Plan,
 State_Code,
 AJOVY_TRx,
 Aimovig_TRx,
 Emgality_TRx,
 aCGRP_TRx,
 AJOVY_Share_Percent,
 Aimovig_Share_Percent,
 Emgality_Share_Percent,
 Latest_Mth_AJOVY_TRx,
 Latest_Mth_AJOVY_Share_Percent,
 Lives_Covered_Total,
 Ajovy_Formulary_Status,
 Aimovig_Formulary_Status,
 Emgality_Formulary_Status,
 Plan_Payment_Type,
 Priority_Account_flag,
 Justification,
 Plan_Mapping
)
AS
 SELECT zs_teva_payer_master.plan_code,
        zs_teva_payer_master.Final_Key_Controlling_Account,
        zs_teva_payer_master.Key_Parent_Account,
        zs_teva_payer_master.PBM,
        zs_teva_payer_master.Payer,
        zs_teva_payer_master.Plan,
        zs_teva_payer_master.State_Code,
        zs_teva_payer_master.AJOVY_TRx,
        zs_teva_payer_master.Aimovig_TRx,
        zs_teva_payer_master.Emgality_TRx,
        zs_teva_payer_master.aCGRP_TRx,
        zs_teva_payer_master.AJOVY_Share_Percent,
        zs_teva_payer_master.Aimovig_Share_Percent,
        zs_teva_payer_master.Emgality_Share_Percent,
        zs_teva_payer_master.Latest_Mth_AJOVY_TRx,
        zs_teva_payer_master.Latest_Mth_AJOVY_Share_Percent,
        zs_teva_payer_master.Lives_Covered_Total,
        zs_teva_payer_master.Ajovy_Formulary_Status,
        zs_teva_payer_master.Aimovig_Formulary_Status,
        zs_teva_payer_master.Emgality_Formulary_Status,
        zs_teva_payer_master.Plan_Payment_Type,
        zs_teva_payer_master.Priority_Account_flag,
        zs_teva_payer_master.Justification,
        zs_teva_payer_master.Plan_Mapping
 FROM sandbox.zs_teva_payer_master
 ORDER BY zs_teva_payer_master.plan_code,
          zs_teva_payer_master.Final_Key_Controlling_Account,
          zs_teva_payer_master.Key_Parent_Account,
          zs_teva_payer_master.PBM,
          zs_teva_payer_master.Payer,
          zs_teva_payer_master.Plan,
          zs_teva_payer_master.State_Code,
          zs_teva_payer_master.AJOVY_TRx
SEGMENTED BY hash(zs_teva_payer_master.AJOVY_TRx, zs_teva_payer_master.Aimovig_TRx, zs_teva_payer_master.Emgality_TRx, zs_teva_payer_master.aCGRP_TRx, zs_teva_payer_master.Latest_Mth_AJOVY_TRx, zs_teva_payer_master.Lives_Covered_Total, zs_teva_payer_master.plan_code, zs_teva_payer_master.AJOVY_Share_Percent) ALL NODES;

CREATE PROJECTION sandbox.idl_just_best_address_b0 /*+basename(idl_just_best_address),createtype(A)*/ 
(
 cust_id,
 organization_name,
 contact_type,
 first_name,
 middle_name,
 last_name,
 suffix,
 npi,
 address_line_1,
 address_line_2,
 city,
 state,
 zipcode,
 sln,
 sln_state,
 dea,
 affiliation,
 credential,
 healthcare_professional_status_code,
 create_date
)
AS
 SELECT idl_just_best_address.cust_id,
        idl_just_best_address.organization_name,
        idl_just_best_address.contact_type,
        idl_just_best_address.first_name,
        idl_just_best_address.middle_name,
        idl_just_best_address.last_name,
        idl_just_best_address.suffix,
        idl_just_best_address.npi,
        idl_just_best_address.address_line_1,
        idl_just_best_address.address_line_2,
        idl_just_best_address.city,
        idl_just_best_address.state,
        idl_just_best_address.zipcode,
        idl_just_best_address.sln,
        idl_just_best_address.sln_state,
        idl_just_best_address.dea,
        idl_just_best_address.affiliation,
        idl_just_best_address.credential,
        idl_just_best_address.healthcare_professional_status_code,
        idl_just_best_address.create_date
 FROM sandbox.idl_just_best_address
 ORDER BY idl_just_best_address.cust_id,
          idl_just_best_address.first_name,
          idl_just_best_address.middle_name,
          idl_just_best_address.last_name,
          idl_just_best_address.suffix,
          idl_just_best_address.npi,
          idl_just_best_address.address_line_1,
          idl_just_best_address.address_line_2,
          idl_just_best_address.city,
          idl_just_best_address.state,
          idl_just_best_address.zipcode,
          idl_just_best_address.sln,
          idl_just_best_address.sln_state,
          idl_just_best_address.dea,
          idl_just_best_address.credential,
          idl_just_best_address.healthcare_professional_status_code
SEGMENTED BY hash(idl_just_best_address.cust_id, idl_just_best_address.first_name, idl_just_best_address.middle_name, idl_just_best_address.last_name, idl_just_best_address.suffix, idl_just_best_address.npi, idl_just_best_address.address_line_1, idl_just_best_address.address_line_2, idl_just_best_address.city, idl_just_best_address.state, idl_just_best_address.zipcode, idl_just_best_address.sln, idl_just_best_address.sln_state, idl_just_best_address.dea, idl_just_best_address.credential, idl_just_best_address.healthcare_professional_status_code) ALL NODES;

CREATE PROJECTION sandbox."SYNEOS TARGET FILE_b0" /*+basename(SYNEOS TARGET FILE),createtype(L)*/ 
(
 ims_id,
 tvcmid,
 basket_id,
 basket_name,
 territory_number,
 sales_force_id,
 flag_type,
 flag_value,
 flag_effective_start_date,
 flag_effective_end_date
)
AS
 SELECT "SYNEOS TARGET FILE".ims_id,
        "SYNEOS TARGET FILE".tvcmid,
        "SYNEOS TARGET FILE".basket_id,
        "SYNEOS TARGET FILE".basket_name,
        "SYNEOS TARGET FILE".territory_number,
        "SYNEOS TARGET FILE".sales_force_id,
        "SYNEOS TARGET FILE".flag_type,
        "SYNEOS TARGET FILE".flag_value,
        "SYNEOS TARGET FILE".flag_effective_start_date,
        "SYNEOS TARGET FILE".flag_effective_end_date
 FROM sandbox."SYNEOS TARGET FILE"
 ORDER BY "SYNEOS TARGET FILE".ims_id,
          "SYNEOS TARGET FILE".tvcmid,
          "SYNEOS TARGET FILE".basket_id,
          "SYNEOS TARGET FILE".basket_name,
          "SYNEOS TARGET FILE".territory_number,
          "SYNEOS TARGET FILE".sales_force_id,
          "SYNEOS TARGET FILE".flag_type,
          "SYNEOS TARGET FILE".flag_value
SEGMENTED BY hash("SYNEOS TARGET FILE".ims_id, "SYNEOS TARGET FILE".tvcmid, "SYNEOS TARGET FILE".basket_id, "SYNEOS TARGET FILE".flag_effective_start_date, "SYNEOS TARGET FILE".flag_effective_end_date, "SYNEOS TARGET FILE".basket_name, "SYNEOS TARGET FILE".territory_number, "SYNEOS TARGET FILE".sales_force_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_demo_rank1_b0 /*+basename(tmp_demo_rank1),createtype(A)*/ 
(
 veeva_account_id,
 territory_number,
 demo_rank
)
AS
 SELECT tmp_demo_rank1.veeva_account_id,
        tmp_demo_rank1.territory_number,
        tmp_demo_rank1.demo_rank
 FROM sandbox.tmp_demo_rank1
 ORDER BY tmp_demo_rank1.veeva_account_id,
          tmp_demo_rank1.territory_number,
          tmp_demo_rank1.demo_rank
SEGMENTED BY hash(tmp_demo_rank1.territory_number, tmp_demo_rank1.demo_rank, tmp_demo_rank1.veeva_account_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_demo_rank2_b0 /*+basename(tmp_demo_rank2),createtype(A)*/ 
(
 veeva_account_id,
 territory_number,
 demo_rank
)
AS
 SELECT tmp_demo_rank2.veeva_account_id,
        tmp_demo_rank2.territory_number,
        tmp_demo_rank2.demo_rank
 FROM sandbox.tmp_demo_rank2
 ORDER BY tmp_demo_rank2.territory_number
SEGMENTED BY hash(tmp_demo_rank2.territory_number, tmp_demo_rank2.demo_rank, tmp_demo_rank2.veeva_account_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_lat_lon_sfa_b0 /*+basename(tmp_lat_lon_sfa),createtype(A)*/ 
(
 address_id,
 tvcmid,
 address_latitude,
 address_longitude,
 veeva_address_id,
 rnk
)
AS
 SELECT tmp_lat_lon_sfa.address_id,
        tmp_lat_lon_sfa.tvcmid,
        tmp_lat_lon_sfa.address_latitude,
        tmp_lat_lon_sfa.address_longitude,
        tmp_lat_lon_sfa.veeva_address_id,
        tmp_lat_lon_sfa.rnk
 FROM sandbox.tmp_lat_lon_sfa
 ORDER BY tmp_lat_lon_sfa.tvcmid
SEGMENTED BY hash(tmp_lat_lon_sfa.tvcmid) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_jan2020_b0 /*+basename(ic_rx_jan2020),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_jan2021.ic_data_month,
        ic_rx_jan2021.basket_name,
        ic_rx_jan2021.sales_force_id,
        ic_rx_jan2021.area_number,
        ic_rx_jan2021.region_number,
        ic_rx_jan2021.territory_number,
        ic_rx_jan2021.ims_id,
        ic_rx_jan2021.tvcmid,
        ic_rx_jan2021.outlet_code,
        ic_rx_jan2021.va_station_number,
        ic_rx_jan2021.dnc_flag,
        ic_rx_jan2021.dnp_flag,
        ic_rx_jan2021.rollup_month,
        ic_rx_jan2021.month_bucket,
        ic_rx_jan2021.nrx_count,
        ic_rx_jan2021.trx_count,
        ic_rx_jan2021.nrx_quantity,
        ic_rx_jan2021.trx_quantity,
        ic_rx_jan2021.include_in_nation_rollup,
        ic_rx_jan2021.include_in_area_rollup,
        ic_rx_jan2021.include_in_region_rollup,
        ic_rx_jan2021.join_key,
        ic_rx_jan2021.row_source,
        ic_rx_jan2021.row_create_date,
        ic_rx_jan2021.indication,
        ic_rx_jan2021.outlet_dea,
        ic_rx_jan2021.payer_plan_number,
        ic_rx_jan2021.payment_method
 FROM sandbox.ic_rx_jan2021
 ORDER BY ic_rx_jan2021.ic_data_month,
          ic_rx_jan2021.basket_name,
          ic_rx_jan2021.sales_force_id,
          ic_rx_jan2021.area_number,
          ic_rx_jan2021.region_number,
          ic_rx_jan2021.territory_number,
          ic_rx_jan2021.ims_id,
          ic_rx_jan2021.tvcmid
SEGMENTED BY hash(ic_rx_jan2021.ic_data_month, ic_rx_jan2021.tvcmid, ic_rx_jan2021.outlet_code, ic_rx_jan2021.dnc_flag, ic_rx_jan2021.dnp_flag, ic_rx_jan2021.rollup_month, ic_rx_jan2021.month_bucket, ic_rx_jan2021.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_jan2020_b0 /*+basename(ic_demo_jan2020),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_jan2021.ic_data_month,
        ic_demo_jan2021.sales_force_id,
        ic_demo_jan2021.area_number,
        ic_demo_jan2021.region_number,
        ic_demo_jan2021.territory_number,
        ic_demo_jan2021.ims_id,
        ic_demo_jan2021.tvcmid,
        ic_demo_jan2021.outlet_code,
        ic_demo_jan2021.va_station_number,
        ic_demo_jan2021.specialty,
        ic_demo_jan2021.last_name,
        ic_demo_jan2021.first_name,
        ic_demo_jan2021.mid_name,
        ic_demo_jan2021.address_1,
        ic_demo_jan2021.address_2,
        ic_demo_jan2021.address_3,
        ic_demo_jan2021.city,
        ic_demo_jan2021.state,
        ic_demo_jan2021.zip,
        ic_demo_jan2021.address_source,
        ic_demo_jan2021.pdrp_flag,
        ic_demo_jan2021.pdrp_date,
        ic_demo_jan2021.np_pa_flag,
        ic_demo_jan2021.no_spend,
        ic_demo_jan2021.ama_no_contact_flag,
        ic_demo_jan2021.join_key,
        ic_demo_jan2021.row_source,
        ic_demo_jan2021.row_create_date,
        ic_demo_jan2021.outlet_dea,
        ic_demo_jan2021.secondary_specialty
 FROM sandbox.ic_demo_jan2021
 ORDER BY ic_demo_jan2021.ic_data_month,
          ic_demo_jan2021.sales_force_id,
          ic_demo_jan2021.area_number,
          ic_demo_jan2021.region_number,
          ic_demo_jan2021.territory_number,
          ic_demo_jan2021.ims_id,
          ic_demo_jan2021.tvcmid,
          ic_demo_jan2021.outlet_code
SEGMENTED BY hash(ic_demo_jan2021.ic_data_month, ic_demo_jan2021.tvcmid, ic_demo_jan2021.outlet_code, ic_demo_jan2021.mid_name, ic_demo_jan2021.state, ic_demo_jan2021.zip, ic_demo_jan2021.pdrp_flag, ic_demo_jan2021.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.mb_to_weekly_account_summary_b0 /*+basename(mb_to_weekly_account_summary),createtype(A)*/ 
(
 sales_force_id,
 nation_id,
 nation,
 area_id,
 area,
 region_id,
 region,
 territory_id,
 territory,
 rep_name,
 user_id,
 time_period,
 period_type,
 period,
 market_id,
 market_name,
 brand_id,
 brand_name,
 teva_product_flag,
 customer_id,
 tvcmid,
 network_name,
 account_name,
 channel,
 address,
 city,
 state,
 zip,
 formulary_control,
 gpo,
 target,
 new_account,
 market_volume_indicator,
 product_vol_dollars,
 product_vol_mg,
 product_vol_mcg,
 market_vol_dollars,
 market_vol_mg,
 market_vol_mcg,
 prev_prod_vol_dollars,
 prev_prod_vol_mg,
 prev_prod_vol_mcg,
 prev_market_vol_dollars,
 prev_market_vol_mg,
 prev_market_vol_mcg
)
AS
 SELECT mb_to_weekly_account_summary.sales_force_id,
        mb_to_weekly_account_summary.nation_id,
        mb_to_weekly_account_summary.nation,
        mb_to_weekly_account_summary.area_id,
        mb_to_weekly_account_summary.area,
        mb_to_weekly_account_summary.region_id,
        mb_to_weekly_account_summary.region,
        mb_to_weekly_account_summary.territory_id,
        mb_to_weekly_account_summary.territory,
        mb_to_weekly_account_summary.rep_name,
        mb_to_weekly_account_summary.user_id,
        mb_to_weekly_account_summary.time_period,
        mb_to_weekly_account_summary.period_type,
        mb_to_weekly_account_summary.period,
        mb_to_weekly_account_summary.market_id,
        mb_to_weekly_account_summary.market_name,
        mb_to_weekly_account_summary.brand_id,
        mb_to_weekly_account_summary.brand_name,
        mb_to_weekly_account_summary.teva_product_flag,
        mb_to_weekly_account_summary.customer_id,
        mb_to_weekly_account_summary.tvcmid,
        mb_to_weekly_account_summary.network_name,
        mb_to_weekly_account_summary.account_name,
        mb_to_weekly_account_summary.channel,
        mb_to_weekly_account_summary.address,
        mb_to_weekly_account_summary.city,
        mb_to_weekly_account_summary.state,
        mb_to_weekly_account_summary.zip,
        mb_to_weekly_account_summary.formulary_control,
        mb_to_weekly_account_summary.gpo,
        mb_to_weekly_account_summary.target,
        mb_to_weekly_account_summary.new_account,
        mb_to_weekly_account_summary.market_volume_indicator,
        mb_to_weekly_account_summary.product_vol_dollars,
        mb_to_weekly_account_summary.product_vol_mg,
        mb_to_weekly_account_summary.product_vol_mcg,
        mb_to_weekly_account_summary.market_vol_dollars,
        mb_to_weekly_account_summary.market_vol_mg,
        mb_to_weekly_account_summary.market_vol_mcg,
        mb_to_weekly_account_summary.prev_prod_vol_dollars,
        mb_to_weekly_account_summary.prev_prod_vol_mg,
        mb_to_weekly_account_summary.prev_prod_vol_mcg,
        mb_to_weekly_account_summary.prev_market_vol_dollars,
        mb_to_weekly_account_summary.prev_market_vol_mg,
        mb_to_weekly_account_summary.prev_market_vol_mcg
 FROM sandbox.mb_to_weekly_account_summary
 ORDER BY mb_to_weekly_account_summary.sales_force_id,
          mb_to_weekly_account_summary.nation_id,
          mb_to_weekly_account_summary.nation,
          mb_to_weekly_account_summary.area_id,
          mb_to_weekly_account_summary.area,
          mb_to_weekly_account_summary.region_id,
          mb_to_weekly_account_summary.region,
          mb_to_weekly_account_summary.territory_id
SEGMENTED BY hash(mb_to_weekly_account_summary.sales_force_id, mb_to_weekly_account_summary.market_id, mb_to_weekly_account_summary.brand_id, mb_to_weekly_account_summary.teva_product_flag, mb_to_weekly_account_summary.tvcmid, mb_to_weekly_account_summary.state, mb_to_weekly_account_summary.zip, mb_to_weekly_account_summary.new_account) ALL NODES;

CREATE PROJECTION sandbox.newman_products_b0 /*+basename(newman_products),createtype(L)*/ 
(
 sfa,
 cne,
 hcp,
 consumer,
 item_id,
 product_line,
 product_name,
 Organization,
 Description,
 expiration_date,
 deleted_date,
 status,
 approval_number,
 available_qty,
 category,
 cost
)
AS
 SELECT newman_products.sfa,
        newman_products.cne,
        newman_products.hcp,
        newman_products.consumer,
        newman_products.item_id,
        newman_products.product_line,
        newman_products.product_name,
        newman_products.Organization,
        newman_products.Description,
        newman_products.expiration_date,
        newman_products.deleted_date,
        newman_products.status,
        newman_products.approval_number,
        newman_products.available_qty,
        newman_products.category,
        newman_products.cost
 FROM sandbox.newman_products
 ORDER BY newman_products.sfa,
          newman_products.cne,
          newman_products.hcp,
          newman_products.consumer,
          newman_products.item_id,
          newman_products.product_line,
          newman_products.product_name,
          newman_products.Organization
SEGMENTED BY hash(newman_products.sfa, newman_products.cne, newman_products.hcp, newman_products.expiration_date, newman_products.deleted_date, newman_products.available_qty, newman_products.cost, newman_products.consumer) ALL NODES;

CREATE PROJECTION sandbox.activity_line_level_b0 /*+basename(activity_line_level),createtype(L)*/ 
(
 activityid,
 level,
 basket_name
)
AS
 SELECT activity_line_level.activityid,
        activity_line_level.level,
        activity_line_level.basket_name
 FROM sandbox.activity_line_level
 ORDER BY activity_line_level.activityid,
          activity_line_level.level
SEGMENTED BY hash(activity_line_level.activityid, activity_line_level.level) ALL NODES;

CREATE PROJECTION sandbox.activity_line_item_level_b0 /*+basename(activity_line_item_level),createtype(L)*/ 
(
 activityid,
 level
)
AS
 SELECT activity_line_item_level.activityid,
        activity_line_item_level.level
 FROM sandbox.activity_line_item_level
 ORDER BY activity_line_item_level.activityid,
          activity_line_item_level.level
SEGMENTED BY hash(activity_line_item_level.level, activity_line_item_level.activityid) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_feb2021_b0 /*+basename(ic_rx_feb2021),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_feb2021.ic_data_month,
        ic_rx_feb2021.basket_name,
        ic_rx_feb2021.sales_force_id,
        ic_rx_feb2021.area_number,
        ic_rx_feb2021.region_number,
        ic_rx_feb2021.territory_number,
        ic_rx_feb2021.ims_id,
        ic_rx_feb2021.tvcmid,
        ic_rx_feb2021.outlet_code,
        ic_rx_feb2021.va_station_number,
        ic_rx_feb2021.dnc_flag,
        ic_rx_feb2021.dnp_flag,
        ic_rx_feb2021.rollup_month,
        ic_rx_feb2021.month_bucket,
        ic_rx_feb2021.nrx_count,
        ic_rx_feb2021.trx_count,
        ic_rx_feb2021.nrx_quantity,
        ic_rx_feb2021.trx_quantity,
        ic_rx_feb2021.include_in_nation_rollup,
        ic_rx_feb2021.include_in_area_rollup,
        ic_rx_feb2021.include_in_region_rollup,
        ic_rx_feb2021.join_key,
        ic_rx_feb2021.row_source,
        ic_rx_feb2021.row_create_date,
        ic_rx_feb2021.indication,
        ic_rx_feb2021.outlet_dea,
        ic_rx_feb2021.payer_plan_number,
        ic_rx_feb2021.payment_method
 FROM sandbox.ic_rx_feb2021
 ORDER BY ic_rx_feb2021.ic_data_month,
          ic_rx_feb2021.basket_name,
          ic_rx_feb2021.sales_force_id,
          ic_rx_feb2021.area_number,
          ic_rx_feb2021.region_number,
          ic_rx_feb2021.territory_number,
          ic_rx_feb2021.ims_id,
          ic_rx_feb2021.tvcmid
SEGMENTED BY hash(ic_rx_feb2021.ic_data_month, ic_rx_feb2021.tvcmid, ic_rx_feb2021.outlet_code, ic_rx_feb2021.dnc_flag, ic_rx_feb2021.dnp_flag, ic_rx_feb2021.rollup_month, ic_rx_feb2021.month_bucket, ic_rx_feb2021.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_feb2021_b0 /*+basename(ic_demo_feb2021),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_feb2021.ic_data_month,
        ic_demo_feb2021.sales_force_id,
        ic_demo_feb2021.area_number,
        ic_demo_feb2021.region_number,
        ic_demo_feb2021.territory_number,
        ic_demo_feb2021.ims_id,
        ic_demo_feb2021.tvcmid,
        ic_demo_feb2021.outlet_code,
        ic_demo_feb2021.va_station_number,
        ic_demo_feb2021.specialty,
        ic_demo_feb2021.last_name,
        ic_demo_feb2021.first_name,
        ic_demo_feb2021.mid_name,
        ic_demo_feb2021.address_1,
        ic_demo_feb2021.address_2,
        ic_demo_feb2021.address_3,
        ic_demo_feb2021.city,
        ic_demo_feb2021.state,
        ic_demo_feb2021.zip,
        ic_demo_feb2021.address_source,
        ic_demo_feb2021.pdrp_flag,
        ic_demo_feb2021.pdrp_date,
        ic_demo_feb2021.np_pa_flag,
        ic_demo_feb2021.no_spend,
        ic_demo_feb2021.ama_no_contact_flag,
        ic_demo_feb2021.join_key,
        ic_demo_feb2021.row_source,
        ic_demo_feb2021.row_create_date,
        ic_demo_feb2021.outlet_dea,
        ic_demo_feb2021.secondary_specialty
 FROM sandbox.ic_demo_feb2021
 ORDER BY ic_demo_feb2021.ic_data_month,
          ic_demo_feb2021.sales_force_id,
          ic_demo_feb2021.area_number,
          ic_demo_feb2021.region_number,
          ic_demo_feb2021.territory_number,
          ic_demo_feb2021.ims_id,
          ic_demo_feb2021.tvcmid,
          ic_demo_feb2021.outlet_code
SEGMENTED BY hash(ic_demo_feb2021.ic_data_month, ic_demo_feb2021.tvcmid, ic_demo_feb2021.outlet_code, ic_demo_feb2021.mid_name, ic_demo_feb2021.state, ic_demo_feb2021.zip, ic_demo_feb2021.pdrp_flag, ic_demo_feb2021.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_apr2021_b0 /*+basename(ic_rx_apr2021),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_apr2021.ic_data_month,
        ic_rx_apr2021.basket_name,
        ic_rx_apr2021.sales_force_id,
        ic_rx_apr2021.area_number,
        ic_rx_apr2021.region_number,
        ic_rx_apr2021.territory_number,
        ic_rx_apr2021.ims_id,
        ic_rx_apr2021.tvcmid,
        ic_rx_apr2021.outlet_code,
        ic_rx_apr2021.va_station_number,
        ic_rx_apr2021.dnc_flag,
        ic_rx_apr2021.dnp_flag,
        ic_rx_apr2021.rollup_month,
        ic_rx_apr2021.month_bucket,
        ic_rx_apr2021.nrx_count,
        ic_rx_apr2021.trx_count,
        ic_rx_apr2021.nrx_quantity,
        ic_rx_apr2021.trx_quantity,
        ic_rx_apr2021.include_in_nation_rollup,
        ic_rx_apr2021.include_in_area_rollup,
        ic_rx_apr2021.include_in_region_rollup,
        ic_rx_apr2021.join_key,
        ic_rx_apr2021.row_source,
        ic_rx_apr2021.row_create_date,
        ic_rx_apr2021.indication,
        ic_rx_apr2021.outlet_dea,
        ic_rx_apr2021.payer_plan_number,
        ic_rx_apr2021.payment_method
 FROM sandbox.ic_rx_apr2021
 ORDER BY ic_rx_apr2021.ic_data_month,
          ic_rx_apr2021.basket_name,
          ic_rx_apr2021.sales_force_id,
          ic_rx_apr2021.area_number,
          ic_rx_apr2021.region_number,
          ic_rx_apr2021.territory_number,
          ic_rx_apr2021.ims_id,
          ic_rx_apr2021.tvcmid
SEGMENTED BY hash(ic_rx_apr2021.ic_data_month, ic_rx_apr2021.tvcmid, ic_rx_apr2021.outlet_code, ic_rx_apr2021.dnc_flag, ic_rx_apr2021.dnp_flag, ic_rx_apr2021.rollup_month, ic_rx_apr2021.month_bucket, ic_rx_apr2021.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_apr2021_b0 /*+basename(ic_demo_apr2021),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_apr2021.ic_data_month,
        ic_demo_apr2021.sales_force_id,
        ic_demo_apr2021.area_number,
        ic_demo_apr2021.region_number,
        ic_demo_apr2021.territory_number,
        ic_demo_apr2021.ims_id,
        ic_demo_apr2021.tvcmid,
        ic_demo_apr2021.outlet_code,
        ic_demo_apr2021.va_station_number,
        ic_demo_apr2021.specialty,
        ic_demo_apr2021.last_name,
        ic_demo_apr2021.first_name,
        ic_demo_apr2021.mid_name,
        ic_demo_apr2021.address_1,
        ic_demo_apr2021.address_2,
        ic_demo_apr2021.address_3,
        ic_demo_apr2021.city,
        ic_demo_apr2021.state,
        ic_demo_apr2021.zip,
        ic_demo_apr2021.address_source,
        ic_demo_apr2021.pdrp_flag,
        ic_demo_apr2021.pdrp_date,
        ic_demo_apr2021.np_pa_flag,
        ic_demo_apr2021.no_spend,
        ic_demo_apr2021.ama_no_contact_flag,
        ic_demo_apr2021.join_key,
        ic_demo_apr2021.row_source,
        ic_demo_apr2021.row_create_date,
        ic_demo_apr2021.outlet_dea,
        ic_demo_apr2021.secondary_specialty
 FROM sandbox.ic_demo_apr2021
 ORDER BY ic_demo_apr2021.ic_data_month,
          ic_demo_apr2021.sales_force_id,
          ic_demo_apr2021.area_number,
          ic_demo_apr2021.region_number,
          ic_demo_apr2021.territory_number,
          ic_demo_apr2021.ims_id,
          ic_demo_apr2021.tvcmid,
          ic_demo_apr2021.outlet_code
SEGMENTED BY hash(ic_demo_apr2021.ic_data_month, ic_demo_apr2021.tvcmid, ic_demo_apr2021.outlet_code, ic_demo_apr2021.mid_name, ic_demo_apr2021.state, ic_demo_apr2021.zip, ic_demo_apr2021.pdrp_flag, ic_demo_apr2021.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.payer_demo_b0 /*+basename(payer_demo),createtype(L)*/ 
(
 payer_id,
 payer_name
)
AS
 SELECT payer_demo.payer_id,
        payer_demo.payer_name
 FROM sandbox.payer_demo
 ORDER BY payer_demo.payer_id,
          payer_demo.payer_name
SEGMENTED BY hash(payer_demo.payer_id, payer_demo.payer_name) ALL NODES;

CREATE PROJECTION sandbox.ftf_formularies_b0 /*+basename(ftf_formularies),createtype(A)*/ 
(
 health_plan_id,
 drug_id,
 tier_code,
 restrictions,
 reason_code,
 reason_code_description,
 file_id,
 record_id
)
AS
 SELECT ftf_formularies.health_plan_id,
        ftf_formularies.drug_id,
        ftf_formularies.tier_code,
        ftf_formularies.restrictions,
        ftf_formularies.reason_code,
        ftf_formularies.reason_code_description,
        ftf_formularies.file_id,
        ftf_formularies.record_id
 FROM sandbox.ftf_formularies
 ORDER BY ftf_formularies.health_plan_id,
          ftf_formularies.drug_id,
          ftf_formularies.tier_code,
          ftf_formularies.restrictions,
          ftf_formularies.reason_code,
          ftf_formularies.reason_code_description,
          ftf_formularies.file_id,
          ftf_formularies.record_id
SEGMENTED BY hash(ftf_formularies.record_id) ALL NODES;

CREATE PROJECTION sandbox.ftf_health_plans_b0 /*+basename(ftf_health_plans),createtype(A)*/ 
(
 formularyf_id,
 provider_id,
 provider,
 health_plan_id,
 health_plan,
 parent_id,
 parent,
 national_lives_count,
 plan_type_name,
 preferred_brand_tier,
 file_id,
 record_id
)
AS
 SELECT ftf_health_plans.formularyf_id,
        ftf_health_plans.provider_id,
        ftf_health_plans.provider,
        ftf_health_plans.health_plan_id,
        ftf_health_plans.health_plan,
        ftf_health_plans.parent_id,
        ftf_health_plans.parent,
        ftf_health_plans.national_lives_count,
        ftf_health_plans.plan_type_name,
        ftf_health_plans.preferred_brand_tier,
        ftf_health_plans.file_id,
        ftf_health_plans.record_id
 FROM sandbox.ftf_health_plans
 ORDER BY ftf_health_plans.formularyf_id,
          ftf_health_plans.provider_id,
          ftf_health_plans.provider,
          ftf_health_plans.health_plan_id,
          ftf_health_plans.health_plan,
          ftf_health_plans.parent_id,
          ftf_health_plans.parent,
          ftf_health_plans.national_lives_count,
          ftf_health_plans.plan_type_name,
          ftf_health_plans.preferred_brand_tier,
          ftf_health_plans.file_id,
          ftf_health_plans.record_id
SEGMENTED BY hash(ftf_health_plans.record_id) ALL NODES;

CREATE PROJECTION sandbox.ftf_pbms_b0 /*+basename(ftf_pbms),createtype(A)*/ 
(
 health_plan_id,
 pbm_id,
 pbm,
 pbm_function_id,
 pbm_function,
 file_id,
 record_id
)
AS
 SELECT ftf_pbms.health_plan_id,
        ftf_pbms.pbm_id,
        ftf_pbms.pbm,
        ftf_pbms.pbm_function_id,
        ftf_pbms.pbm_function,
        ftf_pbms.file_id,
        ftf_pbms.record_id
 FROM sandbox.ftf_pbms
 ORDER BY ftf_pbms.health_plan_id,
          ftf_pbms.pbm_id,
          ftf_pbms.pbm,
          ftf_pbms.pbm_function_id,
          ftf_pbms.pbm_function,
          ftf_pbms.file_id,
          ftf_pbms.record_id
SEGMENTED BY hash(ftf_pbms.record_id) ALL NODES;

CREATE PROJECTION sandbox.ims_pbm_xref_b0 /*+basename(ims_pbm_xref),createtype(A)*/ 
(
 pbm_name,
 payer_plan_num,
 xref_to_payer_plan_num,
 ipd_id,
 ipd_type,
 plan_name,
 pbm_num,
 ims_processor_num,
 file_id,
 record_id
)
AS
 SELECT ims_pbm_xref.pbm_name,
        ims_pbm_xref.payer_plan_num,
        ims_pbm_xref.xref_to_payer_plan_num,
        ims_pbm_xref.ipd_id,
        ims_pbm_xref.ipd_type,
        ims_pbm_xref.plan_name,
        ims_pbm_xref.pbm_num,
        ims_pbm_xref.ims_processor_num,
        ims_pbm_xref.file_id,
        ims_pbm_xref.record_id
 FROM sandbox.ims_pbm_xref
 ORDER BY ims_pbm_xref.pbm_name,
          ims_pbm_xref.payer_plan_num,
          ims_pbm_xref.xref_to_payer_plan_num,
          ims_pbm_xref.ipd_id,
          ims_pbm_xref.ipd_type,
          ims_pbm_xref.plan_name,
          ims_pbm_xref.pbm_num,
          ims_pbm_xref.ims_processor_num
SEGMENTED BY hash(ims_pbm_xref.pbm_num, ims_pbm_xref.file_id, ims_pbm_xref.record_id, ims_pbm_xref.payer_plan_num, ims_pbm_xref.xref_to_payer_plan_num, ims_pbm_xref.ipd_id, ims_pbm_xref.ipd_type, ims_pbm_xref.ims_processor_num, ims_pbm_xref.pbm_name, ims_pbm_xref.plan_name) ALL NODES;

CREATE PROJECTION sandbox.ftf_ims_bridge_b0 /*+basename(ftf_ims_bridge),createtype(A)*/ 
(
 payer_name,
 code,
 name,
 state,
 comments,
 plan_id,
 plan_name,
 provider_name,
 plan_type_name,
 file_id,
 record_id
)
AS
 SELECT ftf_ims_bridge.payer_name,
        ftf_ims_bridge.code,
        ftf_ims_bridge.name,
        ftf_ims_bridge.state,
        ftf_ims_bridge.comments,
        ftf_ims_bridge.plan_id,
        ftf_ims_bridge.plan_name,
        ftf_ims_bridge.provider_name,
        ftf_ims_bridge.plan_type_name,
        ftf_ims_bridge.file_id,
        ftf_ims_bridge.record_id
 FROM sandbox.ftf_ims_bridge
 ORDER BY ftf_ims_bridge.payer_name,
          ftf_ims_bridge.code,
          ftf_ims_bridge.name,
          ftf_ims_bridge.state,
          ftf_ims_bridge.comments,
          ftf_ims_bridge.plan_id,
          ftf_ims_bridge.plan_name,
          ftf_ims_bridge.provider_name,
          ftf_ims_bridge.plan_type_name,
          ftf_ims_bridge.file_id,
          ftf_ims_bridge.record_id
SEGMENTED BY hash(ftf_ims_bridge.record_id) ALL NODES;

CREATE PROJECTION sandbox.raw_ftf_restrictions_2_b0 /*+basename(raw_ftf_restrictions_2),createtype(A)*/ 
(
 health_plan_id,
 drug_id,
 restriction_code,
 restriction_detail_id,
 restriction_detail_text,
 restriction_addtnl_information_1,
 restriction_addtnl_information_2,
 step_count,
 pa_form,
 indication,
 grouped_restriction_level
)
AS
 SELECT raw_ftf_restrictions_2.health_plan_id,
        raw_ftf_restrictions_2.drug_id,
        raw_ftf_restrictions_2.restriction_code,
        raw_ftf_restrictions_2.restriction_detail_id,
        raw_ftf_restrictions_2.restriction_detail_text,
        raw_ftf_restrictions_2.restriction_addtnl_information_1,
        raw_ftf_restrictions_2.restriction_addtnl_information_2,
        raw_ftf_restrictions_2.step_count,
        raw_ftf_restrictions_2.pa_form,
        raw_ftf_restrictions_2.indication,
        raw_ftf_restrictions_2.grouped_restriction_level
 FROM sandbox.raw_ftf_restrictions_2
 ORDER BY raw_ftf_restrictions_2.health_plan_id,
          raw_ftf_restrictions_2.drug_id,
          raw_ftf_restrictions_2.restriction_code,
          raw_ftf_restrictions_2.restriction_detail_id,
          raw_ftf_restrictions_2.restriction_detail_text,
          raw_ftf_restrictions_2.restriction_addtnl_information_1,
          raw_ftf_restrictions_2.restriction_addtnl_information_2,
          raw_ftf_restrictions_2.step_count
SEGMENTED BY hash(raw_ftf_restrictions_2.health_plan_id, raw_ftf_restrictions_2.drug_id, raw_ftf_restrictions_2.restriction_code, raw_ftf_restrictions_2.restriction_detail_id, raw_ftf_restrictions_2.step_count, raw_ftf_restrictions_2.restriction_detail_text, raw_ftf_restrictions_2.indication, raw_ftf_restrictions_2.grouped_restriction_level) ALL NODES;

CREATE PROJECTION sandbox.raw_access_master_bridge_b0 /*+basename(raw_access_master_bridge),createtype(L)*/ 
(
 ftf_health_plan_fid,
 ftf_health_plan_name,
 ajovy_coverage_category,
 aimovid_coverage_category,
 emgality_coverage_category,
 ftf_provider_fid,
 ftf_provider_name,
 ftf_parent_name,
 pay_type_index,
 pay_type,
 ftf_health_plan_type,
 key_controlling_plan_formulary,
 key_controlling_account,
 key_pbm,
 iqvia_payer_name,
 iqvia_pbm,
 ftf_formulary_management_pbm,
 ftf_formulary_influencer_pbm,
 ftf_claims_processing_pbm,
 pref_brand_tier,
 ftf_match_iqvia,
 lives_m1,
 lives_m2,
 lives_m3,
 lives_m4,
 lives_m5,
 lives_m6,
 lives_m7,
 lives_m8,
 lives_m9,
 lives_m10,
 lives_m11,
 lives_m12,
 lives_m13,
 lives_m14,
 lives_m15,
 lives_m16,
 lives_m17
)
AS
 SELECT raw_access_master_bridge.ftf_health_plan_fid,
        raw_access_master_bridge.ftf_health_plan_name,
        raw_access_master_bridge.ajovy_coverage_category,
        raw_access_master_bridge.aimovid_coverage_category,
        raw_access_master_bridge.emgality_coverage_category,
        raw_access_master_bridge.ftf_provider_fid,
        raw_access_master_bridge.ftf_provider_name,
        raw_access_master_bridge.ftf_parent_name,
        raw_access_master_bridge.pay_type_index,
        raw_access_master_bridge.pay_type,
        raw_access_master_bridge.ftf_health_plan_type,
        raw_access_master_bridge.key_controlling_plan_formulary,
        raw_access_master_bridge.key_controlling_account,
        raw_access_master_bridge.key_pbm,
        raw_access_master_bridge.iqvia_payer_name,
        raw_access_master_bridge.iqvia_pbm,
        raw_access_master_bridge.ftf_formulary_management_pbm,
        raw_access_master_bridge.ftf_formulary_influencer_pbm,
        raw_access_master_bridge.ftf_claims_processing_pbm,
        raw_access_master_bridge.pref_brand_tier,
        raw_access_master_bridge.ftf_match_iqvia,
        raw_access_master_bridge.lives_m1,
        raw_access_master_bridge.lives_m2,
        raw_access_master_bridge.lives_m3,
        raw_access_master_bridge.lives_m4,
        raw_access_master_bridge.lives_m5,
        raw_access_master_bridge.lives_m6,
        raw_access_master_bridge.lives_m7,
        raw_access_master_bridge.lives_m8,
        raw_access_master_bridge.lives_m9,
        raw_access_master_bridge.lives_m10,
        raw_access_master_bridge.lives_m11,
        raw_access_master_bridge.lives_m12,
        raw_access_master_bridge.lives_m13,
        raw_access_master_bridge.lives_m14,
        raw_access_master_bridge.lives_m15,
        raw_access_master_bridge.lives_m16,
        raw_access_master_bridge.lives_m17
 FROM sandbox.raw_access_master_bridge
 ORDER BY raw_access_master_bridge.ftf_health_plan_fid,
          raw_access_master_bridge.ftf_health_plan_name,
          raw_access_master_bridge.ajovy_coverage_category,
          raw_access_master_bridge.aimovid_coverage_category,
          raw_access_master_bridge.emgality_coverage_category,
          raw_access_master_bridge.ftf_provider_fid,
          raw_access_master_bridge.ftf_provider_name,
          raw_access_master_bridge.ftf_parent_name
SEGMENTED BY hash(raw_access_master_bridge.ftf_match_iqvia, raw_access_master_bridge.lives_m1, raw_access_master_bridge.lives_m2, raw_access_master_bridge.lives_m3, raw_access_master_bridge.lives_m4, raw_access_master_bridge.lives_m5, raw_access_master_bridge.lives_m6, raw_access_master_bridge.lives_m7) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_may2021_b0 /*+basename(ic_rx_may2021),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_may2021.ic_data_month,
        ic_rx_may2021.basket_name,
        ic_rx_may2021.sales_force_id,
        ic_rx_may2021.area_number,
        ic_rx_may2021.region_number,
        ic_rx_may2021.territory_number,
        ic_rx_may2021.ims_id,
        ic_rx_may2021.tvcmid,
        ic_rx_may2021.outlet_code,
        ic_rx_may2021.va_station_number,
        ic_rx_may2021.dnc_flag,
        ic_rx_may2021.dnp_flag,
        ic_rx_may2021.rollup_month,
        ic_rx_may2021.month_bucket,
        ic_rx_may2021.nrx_count,
        ic_rx_may2021.trx_count,
        ic_rx_may2021.nrx_quantity,
        ic_rx_may2021.trx_quantity,
        ic_rx_may2021.include_in_nation_rollup,
        ic_rx_may2021.include_in_area_rollup,
        ic_rx_may2021.include_in_region_rollup,
        ic_rx_may2021.join_key,
        ic_rx_may2021.row_source,
        ic_rx_may2021.row_create_date,
        ic_rx_may2021.indication,
        ic_rx_may2021.outlet_dea,
        ic_rx_may2021.payer_plan_number,
        ic_rx_may2021.payment_method
 FROM sandbox.ic_rx_may2021
 ORDER BY ic_rx_may2021.ic_data_month,
          ic_rx_may2021.basket_name,
          ic_rx_may2021.sales_force_id,
          ic_rx_may2021.area_number,
          ic_rx_may2021.region_number,
          ic_rx_may2021.territory_number,
          ic_rx_may2021.ims_id,
          ic_rx_may2021.tvcmid
SEGMENTED BY hash(ic_rx_may2021.ic_data_month, ic_rx_may2021.tvcmid, ic_rx_may2021.outlet_code, ic_rx_may2021.dnc_flag, ic_rx_may2021.dnp_flag, ic_rx_may2021.rollup_month, ic_rx_may2021.month_bucket, ic_rx_may2021.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_may2021_b0 /*+basename(ic_demo_may2021),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_may2021.ic_data_month,
        ic_demo_may2021.sales_force_id,
        ic_demo_may2021.area_number,
        ic_demo_may2021.region_number,
        ic_demo_may2021.territory_number,
        ic_demo_may2021.ims_id,
        ic_demo_may2021.tvcmid,
        ic_demo_may2021.outlet_code,
        ic_demo_may2021.va_station_number,
        ic_demo_may2021.specialty,
        ic_demo_may2021.last_name,
        ic_demo_may2021.first_name,
        ic_demo_may2021.mid_name,
        ic_demo_may2021.address_1,
        ic_demo_may2021.address_2,
        ic_demo_may2021.address_3,
        ic_demo_may2021.city,
        ic_demo_may2021.state,
        ic_demo_may2021.zip,
        ic_demo_may2021.address_source,
        ic_demo_may2021.pdrp_flag,
        ic_demo_may2021.pdrp_date,
        ic_demo_may2021.np_pa_flag,
        ic_demo_may2021.no_spend,
        ic_demo_may2021.ama_no_contact_flag,
        ic_demo_may2021.join_key,
        ic_demo_may2021.row_source,
        ic_demo_may2021.row_create_date,
        ic_demo_may2021.outlet_dea,
        ic_demo_may2021.secondary_specialty
 FROM sandbox.ic_demo_may2021
 ORDER BY ic_demo_may2021.ic_data_month,
          ic_demo_may2021.sales_force_id,
          ic_demo_may2021.area_number,
          ic_demo_may2021.region_number,
          ic_demo_may2021.territory_number,
          ic_demo_may2021.ims_id,
          ic_demo_may2021.tvcmid,
          ic_demo_may2021.outlet_code
SEGMENTED BY hash(ic_demo_may2021.ic_data_month, ic_demo_may2021.tvcmid, ic_demo_may2021.outlet_code, ic_demo_may2021.mid_name, ic_demo_may2021.state, ic_demo_may2021.zip, ic_demo_may2021.pdrp_flag, ic_demo_may2021.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.PGKMediCal_b0 /*+basename(PGKMediCal),createtype(L)*/ 
(
 "<NullColumn 0>",
 "<NullColumn 1>",
 "<NullColumn 2>",
 "<NullColumn 3>",
 "<NullColumn 4>",
 "<NullColumn 5>",
 "<NullColumn 6>",
 "<NullColumn 7>",
 "<NullColumn 8>",
 "<NullColumn 9>",
 "<NullColumn 10>",
 "<NullColumn 11>",
 "<NullColumn 12>"
)
AS
 SELECT PGKMediCal."<NullColumn 0>",
        PGKMediCal."<NullColumn 1>",
        PGKMediCal."<NullColumn 2>",
        PGKMediCal."<NullColumn 3>",
        PGKMediCal."<NullColumn 4>",
        PGKMediCal."<NullColumn 5>",
        PGKMediCal."<NullColumn 6>",
        PGKMediCal."<NullColumn 7>",
        PGKMediCal."<NullColumn 8>",
        PGKMediCal."<NullColumn 9>",
        PGKMediCal."<NullColumn 10>",
        PGKMediCal."<NullColumn 11>",
        PGKMediCal."<NullColumn 12>"
 FROM sandbox.PGKMediCal
 ORDER BY PGKMediCal."<NullColumn 0>",
          PGKMediCal."<NullColumn 1>",
          PGKMediCal."<NullColumn 2>",
          PGKMediCal."<NullColumn 3>",
          PGKMediCal."<NullColumn 4>",
          PGKMediCal."<NullColumn 5>",
          PGKMediCal."<NullColumn 6>",
          PGKMediCal."<NullColumn 7>"
SEGMENTED BY hash(PGKMediCal."<NullColumn 9>", PGKMediCal."<NullColumn 10>", PGKMediCal."<NullColumn 11>", PGKMediCal."<NullColumn 12>", PGKMediCal."<NullColumn 0>", PGKMediCal."<NullColumn 2>", PGKMediCal."<NullColumn 3>", PGKMediCal."<NullColumn 4>") ALL NODES;

CREATE PROJECTION sandbox.vid_npi_b0 /*+basename(vid_npi),createtype(L)*/ 
(
 vid,
 npi_num
)
AS
 SELECT vid_npi.vid,
        vid_npi.npi_num
 FROM sandbox.vid_npi
 ORDER BY vid_npi.vid,
          vid_npi.npi_num
SEGMENTED BY hash(vid_npi.npi_num, vid_npi.vid) ALL NODES;

CREATE PROJECTION sandbox.ACM_BLANK_NPI_ME_b0 /*+basename(ACM_BLANK_NPI_ME),createtype(L)*/ 
(
 IMSID
)
AS
 SELECT ACM_BLANK_NPI_ME.IMSID
 FROM sandbox.ACM_BLANK_NPI_ME
 ORDER BY ACM_BLANK_NPI_ME.IMSID
SEGMENTED BY hash(ACM_BLANK_NPI_ME.IMSID) ALL NODES;

CREATE PROJECTION sandbox.activity_line_item_level_v2_b0 /*+basename(activity_line_item_level_v2),createtype(L)*/ 
(
 activityid,
 level
)
AS
 SELECT activity_line_item_level_v2.activityid,
        activity_line_item_level_v2.level
 FROM sandbox.activity_line_item_level_v2
 ORDER BY activity_line_item_level_v2.activityid,
          activity_line_item_level_v2.level
SEGMENTED BY hash(activity_line_item_level_v2.level, activity_line_item_level_v2.activityid) ALL NODES;

CREATE PROJECTION sandbox.datamart_activity_hub_v2_b0 /*+basename(datamart_activity_hub_v2),createtype(A)*/ 
(
 activity_id,
 federation_id,
 contact,
 source_name,
 "datetime",
 trackback_id,
 previous_activity,
 level_name,
 activity_role_name,
 type_name,
 native_type,
 details,
 line_item_id,
 brand_name,
 activity,
 line_item_datetime,
 line_item_previous_line_item,
 line_item_trackback_id,
 line_item_details,
 line_item_type_name,
 line_item_native_type,
 basket_id,
 web_url
)
AS
 SELECT datamart_activity_hub_v2.activity_id,
        datamart_activity_hub_v2.federation_id,
        datamart_activity_hub_v2.contact,
        datamart_activity_hub_v2.source_name,
        datamart_activity_hub_v2."datetime",
        datamart_activity_hub_v2.trackback_id,
        datamart_activity_hub_v2.previous_activity,
        datamart_activity_hub_v2.level_name,
        datamart_activity_hub_v2.activity_role_name,
        datamart_activity_hub_v2.type_name,
        datamart_activity_hub_v2.native_type,
        datamart_activity_hub_v2.details,
        datamart_activity_hub_v2.line_item_id,
        datamart_activity_hub_v2.brand_name,
        datamart_activity_hub_v2.activity,
        datamart_activity_hub_v2.line_item_datetime,
        datamart_activity_hub_v2.line_item_previous_line_item,
        datamart_activity_hub_v2.line_item_trackback_id,
        datamart_activity_hub_v2.line_item_details,
        datamart_activity_hub_v2.line_item_type_name,
        datamart_activity_hub_v2.line_item_native_type,
        datamart_activity_hub_v2.basket_id,
        datamart_activity_hub_v2.web_url
 FROM sandbox.datamart_activity_hub_v2
 ORDER BY datamart_activity_hub_v2.activity_id
SEGMENTED BY hash(datamart_activity_hub_v2.activity_id) ALL NODES;

CREATE PROJECTION sandbox.raw_ftf_formularies_v2_b0 /*+basename(raw_ftf_formularies_v2),createtype(L)*/ 
(
 health_plan_id,
 drug_id,
 tier_code,
 restrictions,
 reason_code,
 reason_code_description,
 pharmacy_status
)
AS
 SELECT raw_ftf_formularies_v2.health_plan_id,
        raw_ftf_formularies_v2.drug_id,
        raw_ftf_formularies_v2.tier_code,
        raw_ftf_formularies_v2.restrictions,
        raw_ftf_formularies_v2.reason_code,
        raw_ftf_formularies_v2.reason_code_description,
        raw_ftf_formularies_v2.pharmacy_status
 FROM sandbox.raw_ftf_formularies_v2
 ORDER BY raw_ftf_formularies_v2.health_plan_id,
          raw_ftf_formularies_v2.drug_id,
          raw_ftf_formularies_v2.tier_code,
          raw_ftf_formularies_v2.restrictions,
          raw_ftf_formularies_v2.reason_code,
          raw_ftf_formularies_v2.reason_code_description,
          raw_ftf_formularies_v2.pharmacy_status
SEGMENTED BY hash(raw_ftf_formularies_v2.health_plan_id, raw_ftf_formularies_v2.drug_id, raw_ftf_formularies_v2.tier_code, raw_ftf_formularies_v2.restrictions, raw_ftf_formularies_v2.pharmacy_status, raw_ftf_formularies_v2.reason_code, raw_ftf_formularies_v2.reason_code_description) ALL NODES;

CREATE PROJECTION sandbox.raw_ftf_health_plans_v2_b0 /*+basename(raw_ftf_health_plans_v2),createtype(L)*/ 
(
 formularyf_id,
 provider_id,
 provider,
 health_plan_id,
 health_plan,
 parent_id,
 parent,
 national_lives_count,
 plan_type_name,
 preferred_brand_tier
)
AS
 SELECT raw_ftf_health_plans_v2.formularyf_id,
        raw_ftf_health_plans_v2.provider_id,
        raw_ftf_health_plans_v2.provider,
        raw_ftf_health_plans_v2.health_plan_id,
        raw_ftf_health_plans_v2.health_plan,
        raw_ftf_health_plans_v2.parent_id,
        raw_ftf_health_plans_v2.parent,
        raw_ftf_health_plans_v2.national_lives_count,
        raw_ftf_health_plans_v2.plan_type_name,
        raw_ftf_health_plans_v2.preferred_brand_tier
 FROM sandbox.raw_ftf_health_plans_v2
 ORDER BY raw_ftf_health_plans_v2.formularyf_id,
          raw_ftf_health_plans_v2.provider_id,
          raw_ftf_health_plans_v2.provider,
          raw_ftf_health_plans_v2.health_plan_id,
          raw_ftf_health_plans_v2.health_plan,
          raw_ftf_health_plans_v2.parent_id,
          raw_ftf_health_plans_v2.parent,
          raw_ftf_health_plans_v2.national_lives_count
SEGMENTED BY hash(raw_ftf_health_plans_v2.formularyf_id, raw_ftf_health_plans_v2.provider_id, raw_ftf_health_plans_v2.health_plan_id, raw_ftf_health_plans_v2.parent_id, raw_ftf_health_plans_v2.national_lives_count, raw_ftf_health_plans_v2.preferred_brand_tier, raw_ftf_health_plans_v2.health_plan, raw_ftf_health_plans_v2.provider) ALL NODES;

CREATE PROJECTION sandbox.raw_ftf_health_plan_geography_v2_b0 /*+basename(raw_ftf_health_plan_geography_v2),createtype(L)*/ 
(
 health_plan_id,
 county_fips_id,
 county_id,
 county_name,
 state_id,
 state_name,
 county_lives
)
AS
 SELECT raw_ftf_health_plan_geography_v2.health_plan_id,
        raw_ftf_health_plan_geography_v2.county_fips_id,
        raw_ftf_health_plan_geography_v2.county_id,
        raw_ftf_health_plan_geography_v2.county_name,
        raw_ftf_health_plan_geography_v2.state_id,
        raw_ftf_health_plan_geography_v2.state_name,
        raw_ftf_health_plan_geography_v2.county_lives
 FROM sandbox.raw_ftf_health_plan_geography_v2
 ORDER BY raw_ftf_health_plan_geography_v2.health_plan_id,
          raw_ftf_health_plan_geography_v2.county_fips_id,
          raw_ftf_health_plan_geography_v2.county_id,
          raw_ftf_health_plan_geography_v2.county_name,
          raw_ftf_health_plan_geography_v2.state_id,
          raw_ftf_health_plan_geography_v2.state_name,
          raw_ftf_health_plan_geography_v2.county_lives
SEGMENTED BY hash(raw_ftf_health_plan_geography_v2.health_plan_id, raw_ftf_health_plan_geography_v2.county_fips_id, raw_ftf_health_plan_geography_v2.county_id, raw_ftf_health_plan_geography_v2.state_id, raw_ftf_health_plan_geography_v2.county_lives, raw_ftf_health_plan_geography_v2.state_name, raw_ftf_health_plan_geography_v2.county_name) ALL NODES;

CREATE PROJECTION sandbox.raw_ftf_pbms_v2_b0 /*+basename(raw_ftf_pbms_v2),createtype(L)*/ 
(
 health_plan_id,
 pbm_id,
 pbm,
 pbm_function_id,
 pbm_function
)
AS
 SELECT raw_ftf_pbms_v2.health_plan_id,
        raw_ftf_pbms_v2.pbm_id,
        raw_ftf_pbms_v2.pbm,
        raw_ftf_pbms_v2.pbm_function_id,
        raw_ftf_pbms_v2.pbm_function
 FROM sandbox.raw_ftf_pbms_v2
 ORDER BY raw_ftf_pbms_v2.health_plan_id,
          raw_ftf_pbms_v2.pbm_id,
          raw_ftf_pbms_v2.pbm,
          raw_ftf_pbms_v2.pbm_function_id,
          raw_ftf_pbms_v2.pbm_function
SEGMENTED BY hash(raw_ftf_pbms_v2.health_plan_id, raw_ftf_pbms_v2.pbm_id, raw_ftf_pbms_v2.pbm_function_id, raw_ftf_pbms_v2.pbm, raw_ftf_pbms_v2.pbm_function) ALL NODES;

CREATE PROJECTION sandbox.hcp_target_list_csd_1145_b0 /*+basename(hcp_target_list_csd_1145),createtype(L)*/ 
(
 IMS_ID,
 NPI,
 First_Name,
 Last_Name,
 Address_1,
 Address_2,
 City,
 State,
 Zip,
 Specialty_Group,
 Target_Valuation_Decile,
 Bright_Spots_Segment_2021,
 DMD_SEQ,
 DMD_ID,
 DMD_EMAIL,
 EXPIRATION_DATE,
 SOURCE,
 FEDID,
 Marketing_Cloud_ID,
 Encrypted_Federation_ID,
 Encrypted_Product_ID,
 primary_specialty_code
)
AS
 SELECT hcp_target_list_csd_1145.IMS_ID,
        hcp_target_list_csd_1145.NPI,
        hcp_target_list_csd_1145.First_Name,
        hcp_target_list_csd_1145.Last_Name,
        hcp_target_list_csd_1145.Address_1,
        hcp_target_list_csd_1145.Address_2,
        hcp_target_list_csd_1145.City,
        hcp_target_list_csd_1145.State,
        hcp_target_list_csd_1145.Zip,
        hcp_target_list_csd_1145.Specialty_Group,
        hcp_target_list_csd_1145.Target_Valuation_Decile,
        hcp_target_list_csd_1145.Bright_Spots_Segment_2021,
        hcp_target_list_csd_1145.DMD_SEQ,
        hcp_target_list_csd_1145.DMD_ID,
        hcp_target_list_csd_1145.DMD_EMAIL,
        hcp_target_list_csd_1145.EXPIRATION_DATE,
        hcp_target_list_csd_1145.SOURCE,
        hcp_target_list_csd_1145.FEDID,
        hcp_target_list_csd_1145.Marketing_Cloud_ID,
        hcp_target_list_csd_1145.Encrypted_Federation_ID,
        hcp_target_list_csd_1145.Encrypted_Product_ID,
        hcp_target_list_csd_1145.primary_specialty_code
 FROM sandbox.hcp_target_list_csd_1145
 ORDER BY hcp_target_list_csd_1145.IMS_ID,
          hcp_target_list_csd_1145.NPI,
          hcp_target_list_csd_1145.First_Name,
          hcp_target_list_csd_1145.Last_Name,
          hcp_target_list_csd_1145.Address_1,
          hcp_target_list_csd_1145.Address_2,
          hcp_target_list_csd_1145.City,
          hcp_target_list_csd_1145.State
SEGMENTED BY hash(hcp_target_list_csd_1145.EXPIRATION_DATE, hcp_target_list_csd_1145.State, hcp_target_list_csd_1145.Zip, hcp_target_list_csd_1145.IMS_ID, hcp_target_list_csd_1145.NPI, hcp_target_list_csd_1145.First_Name, hcp_target_list_csd_1145.Last_Name, hcp_target_list_csd_1145.Specialty_Group) ALL NODES;

CREATE PROJECTION sandbox.austedo_iva_b0 /*+basename(austedo_iva),createtype(A)*/ 
(
 call_id,
 sales_force_id,
 territory_number,
 veeva_account_id,
 call_date,
 week_end_date,
 customer_type,
 call_type,
 attendees,
 attendee_type,
 how_executed,
 presentation_id,
 key_message,
 track_element_id,
 track_element_desc,
 track_element_type,
 usage_duration,
 usage_start_time
)
AS
 SELECT austedo_iva.call_id,
        austedo_iva.sales_force_id,
        austedo_iva.territory_number,
        austedo_iva.veeva_account_id,
        austedo_iva.call_date,
        austedo_iva.week_end_date,
        austedo_iva.customer_type,
        austedo_iva.call_type,
        austedo_iva.attendees,
        austedo_iva.attendee_type,
        austedo_iva.how_executed,
        austedo_iva.presentation_id,
        austedo_iva.key_message,
        austedo_iva.track_element_id,
        austedo_iva.track_element_desc,
        austedo_iva.track_element_type,
        austedo_iva.usage_duration,
        austedo_iva.usage_start_time
 FROM sandbox.austedo_iva
 ORDER BY austedo_iva.call_id,
          austedo_iva.sales_force_id,
          austedo_iva.territory_number,
          austedo_iva.veeva_account_id,
          austedo_iva.call_date,
          austedo_iva.week_end_date,
          austedo_iva.customer_type,
          austedo_iva.call_type
SEGMENTED BY hash(austedo_iva.call_id) ALL NODES;

CREATE PROJECTION sandbox.mb_tmp_call_hist_c_b0 /*+basename(mb_tmp_call_hist_c),createtype(A)*/ 
(
 id,
 isdeleted,
 parentid,
 createdbyid,
 createddate,
 field,
 oldvalue,
 newvalue,
 file_id,
 record_id,
 row_num
)
AS
 SELECT mb_tmp_call_hist_c.id,
        mb_tmp_call_hist_c.isdeleted,
        mb_tmp_call_hist_c.parentid,
        mb_tmp_call_hist_c.createdbyid,
        mb_tmp_call_hist_c.createddate,
        mb_tmp_call_hist_c.field,
        mb_tmp_call_hist_c.oldvalue,
        mb_tmp_call_hist_c.newvalue,
        mb_tmp_call_hist_c.file_id,
        mb_tmp_call_hist_c.record_id,
        mb_tmp_call_hist_c.row_num
 FROM sandbox.mb_tmp_call_hist_c
 ORDER BY mb_tmp_call_hist_c.id
SEGMENTED BY hash(mb_tmp_call_hist_c.id) ALL NODES;

CREATE PROJECTION sandbox.hdsa_coe_zs_0928_b0 /*+basename(hdsa_coe_zs_0928),createtype(L)*/ 
(
 IMS_ID,
 "tvcmid Teva list",
 "npi Teva list",
 "Last Name Teva list",
 "First Name Teva list",
 "Middle Name Teva list"
)
AS
 SELECT hdsa_coe_zs_0928.IMS_ID,
        hdsa_coe_zs_0928."tvcmid Teva list",
        hdsa_coe_zs_0928."npi Teva list",
        hdsa_coe_zs_0928."Last Name Teva list",
        hdsa_coe_zs_0928."First Name Teva list",
        hdsa_coe_zs_0928."Middle Name Teva list"
 FROM sandbox.hdsa_coe_zs_0928
 ORDER BY hdsa_coe_zs_0928.IMS_ID,
          hdsa_coe_zs_0928."tvcmid Teva list",
          hdsa_coe_zs_0928."npi Teva list",
          hdsa_coe_zs_0928."Last Name Teva list",
          hdsa_coe_zs_0928."First Name Teva list",
          hdsa_coe_zs_0928."Middle Name Teva list"
SEGMENTED BY hash(hdsa_coe_zs_0928."tvcmid Teva list", hdsa_coe_zs_0928.IMS_ID, hdsa_coe_zs_0928."npi Teva list", hdsa_coe_zs_0928."Last Name Teva list", hdsa_coe_zs_0928."First Name Teva list", hdsa_coe_zs_0928."Middle Name Teva list") ALL NODES;

CREATE PROJECTION sandbox.payerspine_b0 /*+basename(payerspine),createtype(L)*/ 
(
 IQVIAPlanCode,
 IQVIAPlanName,
 IQVIAPayerName,
 IQVIAPBM,
 PaymentType,
 KeyControllingPlanFormulary,
 KeyControllingAccount,
 KeyControllingParent,
 PBM_Payer
)
AS
 SELECT payerspine.IQVIAPlanCode,
        payerspine.IQVIAPlanName,
        payerspine.IQVIAPayerName,
        payerspine.IQVIAPBM,
        payerspine.PaymentType,
        payerspine.KeyControllingPlanFormulary,
        payerspine.KeyControllingAccount,
        payerspine.KeyControllingParent,
        payerspine.PBM_Payer
 FROM sandbox.payerspine
 ORDER BY payerspine.IQVIAPlanCode,
          payerspine.IQVIAPlanName,
          payerspine.IQVIAPayerName,
          payerspine.IQVIAPBM,
          payerspine.PaymentType,
          payerspine.KeyControllingPlanFormulary,
          payerspine.KeyControllingAccount,
          payerspine.KeyControllingParent
SEGMENTED BY hash(payerspine.IQVIAPlanCode, payerspine.IQVIAPlanName, payerspine.IQVIAPayerName, payerspine.IQVIAPBM, payerspine.PaymentType, payerspine.KeyControllingPlanFormulary, payerspine.KeyControllingAccount, payerspine.KeyControllingParent) ALL NODES;

CREATE PROJECTION sandbox.plantrakwbold_b0 /*+basename(plantrakwbold),createtype(L)*/ 
(
 PayerID,
 PayerName,
 PlanID,
 PayerPlanID,
 PlanName,
 Model,
 PaymentMethod,
 City,
 HQState,
 OperatingState
)
AS
 SELECT plantrakwbold.PayerID,
        plantrakwbold.PayerName,
        plantrakwbold.PlanID,
        plantrakwbold.PayerPlanID,
        plantrakwbold.PlanName,
        plantrakwbold.Model,
        plantrakwbold.PaymentMethod,
        plantrakwbold.City,
        plantrakwbold.HQState,
        plantrakwbold.OperatingState
 FROM sandbox.plantrakwbold
 ORDER BY plantrakwbold.PayerID,
          plantrakwbold.PayerName,
          plantrakwbold.PlanID,
          plantrakwbold.PayerPlanID,
          plantrakwbold.PlanName,
          plantrakwbold.Model,
          plantrakwbold.PaymentMethod,
          plantrakwbold.City
SEGMENTED BY hash(plantrakwbold.PayerID, plantrakwbold.PayerName, plantrakwbold.PlanID, plantrakwbold.PayerPlanID, plantrakwbold.PlanName, plantrakwbold.Model, plantrakwbold.PaymentMethod, plantrakwbold.City) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_parallel_b0 /*+basename(ic_rx_parallel),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_parallel.ic_data_month,
        ic_rx_parallel.basket_name,
        ic_rx_parallel.sales_force_id,
        ic_rx_parallel.area_number,
        ic_rx_parallel.region_number,
        ic_rx_parallel.territory_number,
        ic_rx_parallel.ims_id,
        ic_rx_parallel.tvcmid,
        ic_rx_parallel.outlet_code,
        ic_rx_parallel.va_station_number,
        ic_rx_parallel.dnc_flag,
        ic_rx_parallel.dnp_flag,
        ic_rx_parallel.rollup_month,
        ic_rx_parallel.month_bucket,
        ic_rx_parallel.nrx_count,
        ic_rx_parallel.trx_count,
        ic_rx_parallel.nrx_quantity,
        ic_rx_parallel.trx_quantity,
        ic_rx_parallel.include_in_nation_rollup,
        ic_rx_parallel.include_in_area_rollup,
        ic_rx_parallel.include_in_region_rollup,
        ic_rx_parallel.join_key,
        ic_rx_parallel.row_source,
        ic_rx_parallel.row_create_date,
        ic_rx_parallel.indication,
        ic_rx_parallel.outlet_dea,
        ic_rx_parallel.payer_plan_number,
        ic_rx_parallel.payment_method
 FROM sandbox.ic_rx_parallel
 ORDER BY ic_rx_parallel.ic_data_month,
          ic_rx_parallel.basket_name,
          ic_rx_parallel.sales_force_id,
          ic_rx_parallel.area_number,
          ic_rx_parallel.region_number,
          ic_rx_parallel.territory_number,
          ic_rx_parallel.ims_id,
          ic_rx_parallel.tvcmid
SEGMENTED BY hash(ic_rx_parallel.ic_data_month, ic_rx_parallel.tvcmid, ic_rx_parallel.outlet_code, ic_rx_parallel.dnc_flag, ic_rx_parallel.dnp_flag, ic_rx_parallel.rollup_month, ic_rx_parallel.month_bucket, ic_rx_parallel.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_parallel_b0 /*+basename(ic_demo_parallel),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_parallel.ic_data_month,
        ic_demo_parallel.sales_force_id,
        ic_demo_parallel.area_number,
        ic_demo_parallel.region_number,
        ic_demo_parallel.territory_number,
        ic_demo_parallel.ims_id,
        ic_demo_parallel.tvcmid,
        ic_demo_parallel.outlet_code,
        ic_demo_parallel.va_station_number,
        ic_demo_parallel.specialty,
        ic_demo_parallel.last_name,
        ic_demo_parallel.first_name,
        ic_demo_parallel.mid_name,
        ic_demo_parallel.address_1,
        ic_demo_parallel.address_2,
        ic_demo_parallel.address_3,
        ic_demo_parallel.city,
        ic_demo_parallel.state,
        ic_demo_parallel.zip,
        ic_demo_parallel.address_source,
        ic_demo_parallel.pdrp_flag,
        ic_demo_parallel.pdrp_date,
        ic_demo_parallel.np_pa_flag,
        ic_demo_parallel.no_spend,
        ic_demo_parallel.ama_no_contact_flag,
        ic_demo_parallel.join_key,
        ic_demo_parallel.row_source,
        ic_demo_parallel.row_create_date,
        ic_demo_parallel.outlet_dea,
        ic_demo_parallel.secondary_specialty
 FROM sandbox.ic_demo_parallel
 ORDER BY ic_demo_parallel.ic_data_month,
          ic_demo_parallel.sales_force_id,
          ic_demo_parallel.area_number,
          ic_demo_parallel.region_number,
          ic_demo_parallel.territory_number,
          ic_demo_parallel.ims_id,
          ic_demo_parallel.tvcmid,
          ic_demo_parallel.outlet_code
SEGMENTED BY hash(ic_demo_parallel.ic_data_month, ic_demo_parallel.tvcmid, ic_demo_parallel.outlet_code, ic_demo_parallel.mid_name, ic_demo_parallel.state, ic_demo_parallel.zip, ic_demo_parallel.pdrp_flag, ic_demo_parallel.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.sh_sol_enrollment_b0 /*+basename(sh_sol_enrollment),createtype(A)*/ 
(
 basket_name,
 referral_date,
 prescribing_physician_npi,
 first_ship_date,
 tvcmid
)
AS
 SELECT sh_sol_enrollment.basket_name,
        sh_sol_enrollment.referral_date,
        sh_sol_enrollment.prescribing_physician_npi,
        sh_sol_enrollment.first_ship_date,
        sh_sol_enrollment.tvcmid
 FROM sandbox.sh_sol_enrollment
 ORDER BY sh_sol_enrollment.basket_name,
          sh_sol_enrollment.referral_date,
          sh_sol_enrollment.prescribing_physician_npi,
          sh_sol_enrollment.first_ship_date,
          sh_sol_enrollment.tvcmid
SEGMENTED BY hash(sh_sol_enrollment.referral_date, sh_sol_enrollment.first_ship_date, sh_sol_enrollment.tvcmid, sh_sol_enrollment.prescribing_physician_npi, sh_sol_enrollment.basket_name) ALL NODES;

CREATE PROJECTION sandbox.relay_health_coc_b0 /*+basename(relay_health_coc),createtype(L)*/ 
(
 DRUG_TRADE_NAME,
 NDC,
 PAID_OR_REVERSED,
 STATE,
 QUANTITY,
 FILL_NUMBER,
 FILL_TYPE,
 PAS_SUBMITTED,
 DATE_OF_SERVICE,
 PROCESSED_DATE,
 PATIENT_PAY_DOLLAR,
 PHARMACY_PRODUCT_DOLLAR,
 ADMIN_FEES_DOLLAR,
 MANUFACTURER_DOLLAR_AMOUNT,
 TRANSACTION_ID
)
AS
 SELECT relay_health_coc.DRUG_TRADE_NAME,
        relay_health_coc.NDC,
        relay_health_coc.PAID_OR_REVERSED,
        relay_health_coc.STATE,
        relay_health_coc.QUANTITY,
        relay_health_coc.FILL_NUMBER,
        relay_health_coc.FILL_TYPE,
        relay_health_coc.PAS_SUBMITTED,
        relay_health_coc.DATE_OF_SERVICE,
        relay_health_coc.PROCESSED_DATE,
        relay_health_coc.PATIENT_PAY_DOLLAR,
        relay_health_coc.PHARMACY_PRODUCT_DOLLAR,
        relay_health_coc.ADMIN_FEES_DOLLAR,
        relay_health_coc.MANUFACTURER_DOLLAR_AMOUNT,
        relay_health_coc.TRANSACTION_ID
 FROM sandbox.relay_health_coc
 ORDER BY relay_health_coc.DRUG_TRADE_NAME,
          relay_health_coc.NDC,
          relay_health_coc.PAID_OR_REVERSED,
          relay_health_coc.STATE,
          relay_health_coc.QUANTITY,
          relay_health_coc.FILL_NUMBER,
          relay_health_coc.FILL_TYPE,
          relay_health_coc.PAS_SUBMITTED
SEGMENTED BY hash(relay_health_coc.FILL_NUMBER, relay_health_coc.PAS_SUBMITTED, relay_health_coc.DATE_OF_SERVICE, relay_health_coc.PROCESSED_DATE, relay_health_coc.QUANTITY, relay_health_coc.PATIENT_PAY_DOLLAR, relay_health_coc.PHARMACY_PRODUCT_DOLLAR, relay_health_coc.ADMIN_FEES_DOLLAR) ALL NODES;

CREATE PROJECTION sandbox.AJOVYDecile2021_b0 /*+basename(AJOVYDecile2021),createtype(L)*/ 
(
 IMS_ID,
 Decile,
 TVCMID,
 Effective_EndDate
)
AS
 SELECT AJOVYDecile2021.IMS_ID,
        AJOVYDecile2021.Decile,
        AJOVYDecile2021.TVCMID,
        AJOVYDecile2021.Effective_EndDate
 FROM sandbox.AJOVYDecile2021
 ORDER BY AJOVYDecile2021.IMS_ID,
          AJOVYDecile2021.Decile,
          AJOVYDecile2021.TVCMID,
          AJOVYDecile2021.Effective_EndDate
SEGMENTED BY hash(AJOVYDecile2021.TVCMID, AJOVYDecile2021.IMS_ID, AJOVYDecile2021.Decile, AJOVYDecile2021.Effective_EndDate) ALL NODES;

CREATE PROJECTION sandbox.afm_cycle2_teva_hcp_report_b0 /*+basename(afm_cycle2_teva_hcp_report),createtype(L)*/ 
(
 NPI,
 CONTRIBUTOR_ID,
 PFF_CTT_VOL,
 PFF_EN,
 PFF_EN_QUINTILE,
 PFF_AFFINITY,
 PFF_CTBR_CTT_VOL,
 PFF_CTBR_EN,
 PR_CTT_VOL,
 PR_EN,
 PR_EN_QUINTILE,
 PR_AFFINITY,
 PR_CTBR_CTT_VOL,
 PR_CTBR_EN,
 PI_CTT_VOL,
 PI_EN,
 PI_EN_QUINTILE,
 PI_AFFINITY,
 PI_CTBR_CTT_VOL,
 PI_CTBR_EN,
 DPH_CTT_VOL,
 DPH_EN,
 DPH_EN_QUINTILE,
 DPH_AFFINITY,
 DPH_CTBR_CTT_VOL,
 DPH_CTBR_EN,
 DPL_CTT_VOL,
 DPL_EN,
 DPL_EN_QUINTILE,
 DPL_AFFINITY,
 DPL_CTBR_CTT_VOL,
 DPL_CTBR_EN,
 DRT_CTT_VOL,
 DRT_EN,
 DRT_EN_QUINTILE,
 DRT_AFFINITY,
 DRT_CTBR_CTT_VOL,
 DRT_CTBR_EN,
 Top_Channels,
 PP_ACCESS_RATING,
 NPP_ACCESS_RATING,
 PEER_OFFER_EN,
 COPAY_OFFER_EN,
 SAMPLE_OFFER_EN,
 VOUCHER_OFFER_EN
)
AS
 SELECT afm_cycle2_teva_hcp_report.NPI,
        afm_cycle2_teva_hcp_report.CONTRIBUTOR_ID,
        afm_cycle2_teva_hcp_report.PFF_CTT_VOL,
        afm_cycle2_teva_hcp_report.PFF_EN,
        afm_cycle2_teva_hcp_report.PFF_EN_QUINTILE,
        afm_cycle2_teva_hcp_report.PFF_AFFINITY,
        afm_cycle2_teva_hcp_report.PFF_CTBR_CTT_VOL,
        afm_cycle2_teva_hcp_report.PFF_CTBR_EN,
        afm_cycle2_teva_hcp_report.PR_CTT_VOL,
        afm_cycle2_teva_hcp_report.PR_EN,
        afm_cycle2_teva_hcp_report.PR_EN_QUINTILE,
        afm_cycle2_teva_hcp_report.PR_AFFINITY,
        afm_cycle2_teva_hcp_report.PR_CTBR_CTT_VOL,
        afm_cycle2_teva_hcp_report.PR_CTBR_EN,
        afm_cycle2_teva_hcp_report.PI_CTT_VOL,
        afm_cycle2_teva_hcp_report.PI_EN,
        afm_cycle2_teva_hcp_report.PI_EN_QUINTILE,
        afm_cycle2_teva_hcp_report.PI_AFFINITY,
        afm_cycle2_teva_hcp_report.PI_CTBR_CTT_VOL,
        afm_cycle2_teva_hcp_report.PI_CTBR_EN,
        afm_cycle2_teva_hcp_report.DPH_CTT_VOL,
        afm_cycle2_teva_hcp_report.DPH_EN,
        afm_cycle2_teva_hcp_report.DPH_EN_QUINTILE,
        afm_cycle2_teva_hcp_report.DPH_AFFINITY,
        afm_cycle2_teva_hcp_report.DPH_CTBR_CTT_VOL,
        afm_cycle2_teva_hcp_report.DPH_CTBR_EN,
        afm_cycle2_teva_hcp_report.DPL_CTT_VOL,
        afm_cycle2_teva_hcp_report.DPL_EN,
        afm_cycle2_teva_hcp_report.DPL_EN_QUINTILE,
        afm_cycle2_teva_hcp_report.DPL_AFFINITY,
        afm_cycle2_teva_hcp_report.DPL_CTBR_CTT_VOL,
        afm_cycle2_teva_hcp_report.DPL_CTBR_EN,
        afm_cycle2_teva_hcp_report.DRT_CTT_VOL,
        afm_cycle2_teva_hcp_report.DRT_EN,
        afm_cycle2_teva_hcp_report.DRT_EN_QUINTILE,
        afm_cycle2_teva_hcp_report.DRT_AFFINITY,
        afm_cycle2_teva_hcp_report.DRT_CTBR_CTT_VOL,
        afm_cycle2_teva_hcp_report.DRT_CTBR_EN,
        afm_cycle2_teva_hcp_report.Top_Channels,
        afm_cycle2_teva_hcp_report.PP_ACCESS_RATING,
        afm_cycle2_teva_hcp_report.NPP_ACCESS_RATING,
        afm_cycle2_teva_hcp_report.PEER_OFFER_EN,
        afm_cycle2_teva_hcp_report.COPAY_OFFER_EN,
        afm_cycle2_teva_hcp_report.SAMPLE_OFFER_EN,
        afm_cycle2_teva_hcp_report.VOUCHER_OFFER_EN
 FROM sandbox.afm_cycle2_teva_hcp_report
 ORDER BY afm_cycle2_teva_hcp_report.NPI,
          afm_cycle2_teva_hcp_report.CONTRIBUTOR_ID,
          afm_cycle2_teva_hcp_report.PFF_CTT_VOL,
          afm_cycle2_teva_hcp_report.PFF_EN,
          afm_cycle2_teva_hcp_report.PFF_EN_QUINTILE,
          afm_cycle2_teva_hcp_report.PFF_AFFINITY,
          afm_cycle2_teva_hcp_report.PFF_CTBR_CTT_VOL,
          afm_cycle2_teva_hcp_report.PFF_CTBR_EN
SEGMENTED BY hash(afm_cycle2_teva_hcp_report.PFF_CTT_VOL, afm_cycle2_teva_hcp_report.PFF_EN, afm_cycle2_teva_hcp_report.PFF_EN_QUINTILE, afm_cycle2_teva_hcp_report.PFF_AFFINITY, afm_cycle2_teva_hcp_report.PFF_CTBR_CTT_VOL, afm_cycle2_teva_hcp_report.PFF_CTBR_EN, afm_cycle2_teva_hcp_report.PR_CTT_VOL, afm_cycle2_teva_hcp_report.PR_EN) ALL NODES;

CREATE PROJECTION sandbox.product_master_psd_b0 /*+basename(product_master_psd),createtype(A)*/ 
(
 ndc_code,
 ndc_name,
 ndc_code_coc,
 ndc_name_coc
)
AS
 SELECT product_master_psd.ndc_code,
        product_master_psd.ndc_name,
        product_master_psd.ndc_code_coc,
        product_master_psd.ndc_name_coc
 FROM sandbox.product_master_psd
 ORDER BY product_master_psd.ndc_code,
          product_master_psd.ndc_name
SEGMENTED BY hash(product_master_psd.ndc_code, product_master_psd.ndc_name) ALL NODES;

CREATE PROJECTION sandbox.email_hcp_bounces_b0 /*+basename(email_hcp_bounces),createtype(L)*/ 
(
 ClientID,
 SendID,
 SubscriberKey,
 EmailAddress,
 EmailName,
 SubscriberID,
 ListID,
 EventDate,
 EventType,
 BounceCategory,
 SMTPCode,
 BounceReason,
 BatchID,
 TriggeredSendExternalKey
)
AS
 SELECT email_hcp_bounces.ClientID,
        email_hcp_bounces.SendID,
        email_hcp_bounces.SubscriberKey,
        email_hcp_bounces.EmailAddress,
        email_hcp_bounces.EmailName,
        email_hcp_bounces.SubscriberID,
        email_hcp_bounces.ListID,
        email_hcp_bounces.EventDate,
        email_hcp_bounces.EventType,
        email_hcp_bounces.BounceCategory,
        email_hcp_bounces.SMTPCode,
        email_hcp_bounces.BounceReason,
        email_hcp_bounces.BatchID,
        email_hcp_bounces.TriggeredSendExternalKey
 FROM sandbox.email_hcp_bounces
 ORDER BY email_hcp_bounces.ClientID,
          email_hcp_bounces.SendID,
          email_hcp_bounces.SubscriberKey,
          email_hcp_bounces.EmailAddress,
          email_hcp_bounces.EmailName,
          email_hcp_bounces.SubscriberID,
          email_hcp_bounces.ListID,
          email_hcp_bounces.EventDate
SEGMENTED BY hash(email_hcp_bounces.EventDate, email_hcp_bounces.ClientID, email_hcp_bounces.SendID, email_hcp_bounces.SubscriberKey, email_hcp_bounces.EmailAddress, email_hcp_bounces.EmailName, email_hcp_bounces.SubscriberID, email_hcp_bounces.ListID) ALL NODES;

CREATE PROJECTION sandbox.email_hcp_not_sent_b0 /*+basename(email_hcp_not_sent),createtype(L)*/ 
(
 ClientID,
 SendID,
 SubscriberKey,
 EmailAddress,
 EmailName,
 SubscriberID,
 ListID,
 EventDate,
 EventType,
 BatchID,
 TriggeredSendExternalKey,
 Reason
)
AS
 SELECT email_hcp_not_sent.ClientID,
        email_hcp_not_sent.SendID,
        email_hcp_not_sent.SubscriberKey,
        email_hcp_not_sent.EmailAddress,
        email_hcp_not_sent.EmailName,
        email_hcp_not_sent.SubscriberID,
        email_hcp_not_sent.ListID,
        email_hcp_not_sent.EventDate,
        email_hcp_not_sent.EventType,
        email_hcp_not_sent.BatchID,
        email_hcp_not_sent.TriggeredSendExternalKey,
        email_hcp_not_sent.Reason
 FROM sandbox.email_hcp_not_sent
 ORDER BY email_hcp_not_sent.ClientID,
          email_hcp_not_sent.SendID,
          email_hcp_not_sent.SubscriberKey,
          email_hcp_not_sent.EmailAddress,
          email_hcp_not_sent.EmailName,
          email_hcp_not_sent.SubscriberID,
          email_hcp_not_sent.ListID,
          email_hcp_not_sent.EventDate
SEGMENTED BY hash(email_hcp_not_sent.EventDate, email_hcp_not_sent.ClientID, email_hcp_not_sent.SendID, email_hcp_not_sent.SubscriberKey, email_hcp_not_sent.EmailAddress, email_hcp_not_sent.EmailName, email_hcp_not_sent.SubscriberID, email_hcp_not_sent.ListID) ALL NODES;

CREATE PROJECTION sandbox.email_hcp_open_b0 /*+basename(email_hcp_open),createtype(L)*/ 
(
 ClientID,
 SendID,
 SubscriberKey,
 EmailAddress,
 EmailName,
 SubscriberID,
 ListID,
 EventDate,
 EventType,
 BatchID,
 TriggeredSendExternalKey
)
AS
 SELECT email_hcp_open.ClientID,
        email_hcp_open.SendID,
        email_hcp_open.SubscriberKey,
        email_hcp_open.EmailAddress,
        email_hcp_open.EmailName,
        email_hcp_open.SubscriberID,
        email_hcp_open.ListID,
        email_hcp_open.EventDate,
        email_hcp_open.EventType,
        email_hcp_open.BatchID,
        email_hcp_open.TriggeredSendExternalKey
 FROM sandbox.email_hcp_open
 ORDER BY email_hcp_open.ClientID,
          email_hcp_open.SendID,
          email_hcp_open.SubscriberKey,
          email_hcp_open.EmailAddress,
          email_hcp_open.EmailName,
          email_hcp_open.SubscriberID,
          email_hcp_open.ListID,
          email_hcp_open.EventDate
SEGMENTED BY hash(email_hcp_open.EventDate, email_hcp_open.ClientID, email_hcp_open.SendID, email_hcp_open.SubscriberKey, email_hcp_open.EmailAddress, email_hcp_open.EmailName, email_hcp_open.SubscriberID, email_hcp_open.ListID) ALL NODES;

CREATE PROJECTION sandbox.email_hcp_send_jobs_b0 /*+basename(email_hcp_send_jobs),createtype(L)*/ 
(
 ClientID,
 SendID,
 FromName,
 FromEmail,
 SchedTime,
 SentTime,
 Subject,
 EmailName,
 TriggeredSendExternalKey,
 SendDefinitionExternalKey,
 JobStatus,
 PreviewURL,
 IsMultipart,
 Additional
)
AS
 SELECT email_hcp_send_jobs.ClientID,
        email_hcp_send_jobs.SendID,
        email_hcp_send_jobs.FromName,
        email_hcp_send_jobs.FromEmail,
        email_hcp_send_jobs.SchedTime,
        email_hcp_send_jobs.SentTime,
        email_hcp_send_jobs.Subject,
        email_hcp_send_jobs.EmailName,
        email_hcp_send_jobs.TriggeredSendExternalKey,
        email_hcp_send_jobs.SendDefinitionExternalKey,
        email_hcp_send_jobs.JobStatus,
        email_hcp_send_jobs.PreviewURL,
        email_hcp_send_jobs.IsMultipart,
        email_hcp_send_jobs.Additional
 FROM sandbox.email_hcp_send_jobs
 ORDER BY email_hcp_send_jobs.ClientID,
          email_hcp_send_jobs.SendID,
          email_hcp_send_jobs.FromName,
          email_hcp_send_jobs.FromEmail,
          email_hcp_send_jobs.SchedTime,
          email_hcp_send_jobs.SentTime,
          email_hcp_send_jobs.Subject,
          email_hcp_send_jobs.EmailName
SEGMENTED BY hash(email_hcp_send_jobs.SchedTime, email_hcp_send_jobs.SentTime, email_hcp_send_jobs.ClientID, email_hcp_send_jobs.SendID, email_hcp_send_jobs.FromName, email_hcp_send_jobs.FromEmail, email_hcp_send_jobs.TriggeredSendExternalKey, email_hcp_send_jobs.SendDefinitionExternalKey) ALL NODES;

CREATE PROJECTION sandbox.email_hcp_sent_b0 /*+basename(email_hcp_sent),createtype(L)*/ 
(
 ClientID,
 SendID,
 SubscriberKey,
 EmailAddress,
 SubscriberID,
 EmailName,
 ListID,
 EventDate,
 EventType,
 BatchID,
 TriggeredSendExternalKey
)
AS
 SELECT email_hcp_sent.ClientID,
        email_hcp_sent.SendID,
        email_hcp_sent.SubscriberKey,
        email_hcp_sent.EmailAddress,
        email_hcp_sent.SubscriberID,
        email_hcp_sent.EmailName,
        email_hcp_sent.ListID,
        email_hcp_sent.EventDate,
        email_hcp_sent.EventType,
        email_hcp_sent.BatchID,
        email_hcp_sent.TriggeredSendExternalKey
 FROM sandbox.email_hcp_sent
 ORDER BY email_hcp_sent.ClientID,
          email_hcp_sent.SendID,
          email_hcp_sent.SubscriberKey,
          email_hcp_sent.EmailAddress,
          email_hcp_sent.SubscriberID,
          email_hcp_sent.EmailName,
          email_hcp_sent.ListID,
          email_hcp_sent.EventDate
SEGMENTED BY hash(email_hcp_sent.EventDate, email_hcp_sent.ClientID, email_hcp_sent.SendID, email_hcp_sent.SubscriberKey, email_hcp_sent.EmailAddress, email_hcp_sent.SubscriberID, email_hcp_sent.EmailName, email_hcp_sent.ListID) ALL NODES;

CREATE PROJECTION sandbox.website_session_b0 /*+basename(website_session),createtype(L)*/ 
(
 Brand,
 Month,
 Sessions,
 Pageviews
)
AS
 SELECT website_session.Brand,
        website_session.Month,
        website_session.Sessions,
        website_session.Pageviews
 FROM sandbox.website_session
 ORDER BY website_session.Brand,
          website_session.Month,
          website_session.Sessions,
          website_session.Pageviews
SEGMENTED BY hash(website_session.Month, website_session.Sessions, website_session.Pageviews, website_session.Brand) ALL NODES;

CREATE PROJECTION sandbox.website_events_b0 /*+basename(website_events),createtype(L)*/ 
(
 Brand,
 Month,
 Event_Label,
 Total_events,
 Unique_events
)
AS
 SELECT website_events.Brand,
        website_events.Month,
        website_events.Event_Label,
        website_events.Total_events,
        website_events.Unique_events
 FROM sandbox.website_events
 ORDER BY website_events.Brand,
          website_events.Month,
          website_events.Event_Label,
          website_events.Total_events,
          website_events.Unique_events
SEGMENTED BY hash(website_events.Month, website_events.Total_events, website_events.Unique_events, website_events.Brand, website_events.Event_Label) ALL NODES;

CREATE PROJECTION sandbox.website_ksa_mapping_b0 /*+basename(website_ksa_mapping),createtype(L)*/ 
(
 Event_Label,
 Name_of_Action,
 KPI_Group2
)
AS
 SELECT website_ksa_mapping.Event_Label,
        website_ksa_mapping.Name_of_Action,
        website_ksa_mapping.KPI_Group2
 FROM sandbox.website_ksa_mapping
 ORDER BY website_ksa_mapping.Event_Label,
          website_ksa_mapping.Name_of_Action,
          website_ksa_mapping.KPI_Group2
SEGMENTED BY hash(website_ksa_mapping.Event_Label, website_ksa_mapping.Name_of_Action, website_ksa_mapping.KPI_Group2) ALL NODES;

CREATE PROJECTION sandbox.activity_line_item_level_v3_b0 /*+basename(activity_line_item_level_v3),createtype(L)*/ 
(
 activityid,
 level
)
AS
 SELECT activity_line_item_level_v3.activityid,
        activity_line_item_level_v3.level
 FROM sandbox.activity_line_item_level_v3
 ORDER BY activity_line_item_level_v3.activityid,
          activity_line_item_level_v3.level
SEGMENTED BY hash(activity_line_item_level_v3.level, activity_line_item_level_v3.activityid) ALL NODES;

CREATE PROJECTION sandbox.relay_denial_conversion_metrics_psd_nov_b0 /*+basename(relay_denial_conversion_metrics_psd_nov),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 claim_status,
 month_date,
 mnth_dt,
 Relay_Denial_Conversion_Paid,
 Relay_Spend_Denial_Conversion_Paid,
 Relay_Denial_Conversion_Units,
 Relay_Denial_Conversion_Dollars
)
AS
 SELECT relay_denial_conversion_metrics_psd_nov.source_name,
        relay_denial_conversion_metrics_psd_nov.ndc_code,
        relay_denial_conversion_metrics_psd_nov.ndc_name,
        relay_denial_conversion_metrics_psd_nov.claim_status,
        relay_denial_conversion_metrics_psd_nov.month_date,
        relay_denial_conversion_metrics_psd_nov.mnth_dt,
        relay_denial_conversion_metrics_psd_nov.Relay_Denial_Conversion_Paid,
        relay_denial_conversion_metrics_psd_nov.Relay_Spend_Denial_Conversion_Paid,
        relay_denial_conversion_metrics_psd_nov.Relay_Denial_Conversion_Units,
        relay_denial_conversion_metrics_psd_nov.Relay_Denial_Conversion_Dollars
 FROM sandbox.relay_denial_conversion_metrics_psd_nov
 ORDER BY relay_denial_conversion_metrics_psd_nov.source_name,
          relay_denial_conversion_metrics_psd_nov.ndc_code,
          relay_denial_conversion_metrics_psd_nov.ndc_name,
          relay_denial_conversion_metrics_psd_nov.claim_status,
          relay_denial_conversion_metrics_psd_nov.month_date,
          relay_denial_conversion_metrics_psd_nov.mnth_dt
SEGMENTED BY hash(relay_denial_conversion_metrics_psd_nov.ndc_code) ALL NODES;

CREATE PROJECTION sandbox.view5_updtd_b0 /*+basename(view5_updtd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 Average_Buy_Down_Covered_Units,
 Average_Non_Covered_Units,
 run_date
)
AS
 SELECT view5_updtd.product_name,
        view5_updtd.month_year,
        view5_updtd.mnth_dt,
        view5_updtd.Average_Buy_Down_Covered_Units,
        view5_updtd.Average_Non_Covered_Units,
        view5_updtd.run_date
 FROM sandbox.view5_updtd
 ORDER BY view5_updtd.product_name,
          view5_updtd.month_year,
          view5_updtd.mnth_dt,
          view5_updtd.Average_Buy_Down_Covered_Units,
          view5_updtd.Average_Non_Covered_Units,
          view5_updtd.run_date
SEGMENTED BY hash(view5_updtd.product_name, view5_updtd.mnth_dt, view5_updtd.run_date, view5_updtd.Average_Buy_Down_Covered_Units, view5_updtd.Average_Non_Covered_Units, view5_updtd.month_year) ALL NODES;

CREATE PROJECTION sandbox.view1_psd_updtd_b0 /*+basename(view1_psd_updtd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 Demand_units,
 Covered_Coupon_Units,
 Non_Covered_Coupon_Units,
 run_date
)
AS
 SELECT view1_psd_updtd.product_name,
        view1_psd_updtd.month_year,
        view1_psd_updtd.mnth_dt,
        view1_psd_updtd.Demand_units,
        view1_psd_updtd.Covered_Coupon_Units,
        view1_psd_updtd.Non_Covered_Coupon_Units,
        view1_psd_updtd.run_date
 FROM sandbox.view1_psd_updtd
 ORDER BY view1_psd_updtd.product_name,
          view1_psd_updtd.month_year,
          view1_psd_updtd.mnth_dt,
          view1_psd_updtd.Demand_units,
          view1_psd_updtd.Covered_Coupon_Units,
          view1_psd_updtd.Non_Covered_Coupon_Units,
          view1_psd_updtd.run_date
SEGMENTED BY hash(view1_psd_updtd.product_name, view1_psd_updtd.mnth_dt, view1_psd_updtd.Covered_Coupon_Units, view1_psd_updtd.Non_Covered_Coupon_Units, view1_psd_updtd.run_date, view1_psd_updtd.Demand_units, view1_psd_updtd.month_year) ALL NODES;

CREATE PROJECTION sandbox.view2_psd_updtd_b0 /*+basename(view2_psd_updtd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 EVoucher_Card,
 CRx_Copay_Covered,
 Crx_PA_NDC_Block,
 Denail_Conversion_CofC,
 run_date
)
AS
 SELECT view2_psd_updtd.product_name,
        view2_psd_updtd.month_year,
        view2_psd_updtd.mnth_dt,
        view2_psd_updtd.EVoucher_Card,
        view2_psd_updtd.CRx_Copay_Covered,
        view2_psd_updtd.Crx_PA_NDC_Block,
        view2_psd_updtd.Denail_Conversion_CofC,
        view2_psd_updtd.run_date
 FROM sandbox.view2_psd_updtd
 ORDER BY view2_psd_updtd.product_name,
          view2_psd_updtd.month_year,
          view2_psd_updtd.mnth_dt,
          view2_psd_updtd.EVoucher_Card,
          view2_psd_updtd.CRx_Copay_Covered,
          view2_psd_updtd.Crx_PA_NDC_Block,
          view2_psd_updtd.Denail_Conversion_CofC,
          view2_psd_updtd.run_date
SEGMENTED BY hash(view2_psd_updtd.product_name, view2_psd_updtd.mnth_dt, view2_psd_updtd.EVoucher_Card, view2_psd_updtd.CRx_Copay_Covered, view2_psd_updtd.Crx_PA_NDC_Block, view2_psd_updtd.Denail_Conversion_CofC, view2_psd_updtd.run_date, view2_psd_updtd.month_year) ALL NODES;

CREATE PROJECTION sandbox.view3_psd_updtd_b0 /*+basename(view3_psd_updtd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 Product_Not_Covered,
 PA_or_Step,
 CRx_Other_Units,
 Percent_Demand,
 run_date
)
AS
 SELECT view3_psd_updtd.product_name,
        view3_psd_updtd.month_year,
        view3_psd_updtd.mnth_dt,
        view3_psd_updtd.Product_Not_Covered,
        view3_psd_updtd.PA_or_Step,
        view3_psd_updtd.CRx_Other_Units,
        view3_psd_updtd.Percent_Demand,
        view3_psd_updtd.run_date
 FROM sandbox.view3_psd_updtd
 ORDER BY view3_psd_updtd.product_name,
          view3_psd_updtd.month_year,
          view3_psd_updtd.mnth_dt,
          view3_psd_updtd.Product_Not_Covered,
          view3_psd_updtd.PA_or_Step,
          view3_psd_updtd.CRx_Other_Units,
          view3_psd_updtd.Percent_Demand,
          view3_psd_updtd.run_date
SEGMENTED BY hash(view3_psd_updtd.product_name, view3_psd_updtd.mnth_dt, view3_psd_updtd.Product_Not_Covered, view3_psd_updtd.PA_or_Step, view3_psd_updtd.CRx_Other_Units, view3_psd_updtd.run_date, view3_psd_updtd.Percent_Demand, view3_psd_updtd.month_year) ALL NODES;

CREATE PROJECTION sandbox.view4_1_psd_updtd_b0 /*+basename(view4_1_psd_updtd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 PFS_Covered,
 AI_Covered,
 Percent_PFS_Covered,
 Percent_AI_Covered,
 run_date
)
AS
 SELECT view4_1_psd_updtd.product_name,
        view4_1_psd_updtd.month_year,
        view4_1_psd_updtd.mnth_dt,
        view4_1_psd_updtd.PFS_Covered,
        view4_1_psd_updtd.AI_Covered,
        view4_1_psd_updtd.Percent_PFS_Covered,
        view4_1_psd_updtd.Percent_AI_Covered,
        view4_1_psd_updtd.run_date
 FROM sandbox.view4_1_psd_updtd
 ORDER BY view4_1_psd_updtd.product_name,
          view4_1_psd_updtd.month_year,
          view4_1_psd_updtd.mnth_dt,
          view4_1_psd_updtd.PFS_Covered,
          view4_1_psd_updtd.AI_Covered,
          view4_1_psd_updtd.Percent_PFS_Covered,
          view4_1_psd_updtd.Percent_AI_Covered,
          view4_1_psd_updtd.run_date
SEGMENTED BY hash(view4_1_psd_updtd.product_name, view4_1_psd_updtd.mnth_dt, view4_1_psd_updtd.PFS_Covered, view4_1_psd_updtd.AI_Covered, view4_1_psd_updtd.run_date, view4_1_psd_updtd.Percent_PFS_Covered, view4_1_psd_updtd.Percent_AI_Covered, view4_1_psd_updtd.month_year) ALL NODES;

CREATE PROJECTION sandbox.view4_2_psd_updtd_b0 /*+basename(view4_2_psd_updtd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 PFS_Non_Covered,
 AI_Non_Covered,
 Percent_PFS_Non_Covered,
 Percent_AI_Non_Covered,
 run_date
)
AS
 SELECT view4_2_psd_updtd.product_name,
        view4_2_psd_updtd.month_year,
        view4_2_psd_updtd.mnth_dt,
        view4_2_psd_updtd.PFS_Non_Covered,
        view4_2_psd_updtd.AI_Non_Covered,
        view4_2_psd_updtd.Percent_PFS_Non_Covered,
        view4_2_psd_updtd.Percent_AI_Non_Covered,
        view4_2_psd_updtd.run_date
 FROM sandbox.view4_2_psd_updtd
 ORDER BY view4_2_psd_updtd.product_name,
          view4_2_psd_updtd.month_year,
          view4_2_psd_updtd.mnth_dt,
          view4_2_psd_updtd.PFS_Non_Covered,
          view4_2_psd_updtd.AI_Non_Covered,
          view4_2_psd_updtd.Percent_PFS_Non_Covered,
          view4_2_psd_updtd.Percent_AI_Non_Covered,
          view4_2_psd_updtd.run_date
SEGMENTED BY hash(view4_2_psd_updtd.product_name, view4_2_psd_updtd.mnth_dt, view4_2_psd_updtd.PFS_Non_Covered, view4_2_psd_updtd.AI_Non_Covered, view4_2_psd_updtd.run_date, view4_2_psd_updtd.Percent_PFS_Non_Covered, view4_2_psd_updtd.Percent_AI_Non_Covered, view4_2_psd_updtd.month_year) ALL NODES;

CREATE PROJECTION sandbox.view5_psd_updtd_b0 /*+basename(view5_psd_updtd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 Average_Buy_Down_Covered_Units,
 Average_Non_Covered_Units,
 run_date
)
AS
 SELECT view5_psd_updtd.product_name,
        view5_psd_updtd.month_year,
        view5_psd_updtd.mnth_dt,
        view5_psd_updtd.Average_Buy_Down_Covered_Units,
        view5_psd_updtd.Average_Non_Covered_Units,
        view5_psd_updtd.run_date
 FROM sandbox.view5_psd_updtd
 ORDER BY view5_psd_updtd.product_name,
          view5_psd_updtd.month_year,
          view5_psd_updtd.mnth_dt,
          view5_psd_updtd.Average_Buy_Down_Covered_Units,
          view5_psd_updtd.Average_Non_Covered_Units,
          view5_psd_updtd.run_date
SEGMENTED BY hash(view5_psd_updtd.product_name, view5_psd_updtd.mnth_dt, view5_psd_updtd.run_date, view5_psd_updtd.Average_Buy_Down_Covered_Units, view5_psd_updtd.Average_Non_Covered_Units, view5_psd_updtd.month_year) ALL NODES;

CREATE PROJECTION sandbox.copay_master_psd_b0 /*+basename(copay_master_psd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 basket_name,
 quantity,
 MEMBER_CASH_EXPENSE,
 other_coverage_code,
 fill_date,
 month_date,
 mnth_dt,
 reject_code,
 benefit_amount,
 units,
 run_date
)
AS
 SELECT copay_master_psd.source_name,
        copay_master_psd.ndc_code,
        copay_master_psd.basket_name,
        copay_master_psd.quantity,
        copay_master_psd.MEMBER_CASH_EXPENSE,
        copay_master_psd.other_coverage_code,
        copay_master_psd.fill_date,
        copay_master_psd.month_date,
        copay_master_psd.mnth_dt,
        copay_master_psd.reject_code,
        copay_master_psd.benefit_amount,
        copay_master_psd.units,
        copay_master_psd.run_date
 FROM sandbox.copay_master_psd
 ORDER BY copay_master_psd.source_name
SEGMENTED BY hash(copay_master_psd.quantity, copay_master_psd.MEMBER_CASH_EXPENSE, copay_master_psd.fill_date, copay_master_psd.mnth_dt, copay_master_psd.benefit_amount, copay_master_psd.units, copay_master_psd.run_date, copay_master_psd.other_coverage_code) ALL NODES;

CREATE PROJECTION sandbox.relay_evoucher_psd_b0 /*+basename(relay_evoucher_psd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 report_month,
 month_date,
 mnth_dt,
 claim_status,
 evoucher_status_desc,
 eVoucher_Amount,
 units,
 run_date
)
AS
 SELECT relay_evoucher_psd.source_name,
        relay_evoucher_psd.ndc_code,
        relay_evoucher_psd.ndc_name,
        relay_evoucher_psd.report_month,
        relay_evoucher_psd.month_date,
        relay_evoucher_psd.mnth_dt,
        relay_evoucher_psd.claim_status,
        relay_evoucher_psd.evoucher_status_desc,
        relay_evoucher_psd.eVoucher_Amount,
        relay_evoucher_psd.units,
        relay_evoucher_psd.run_date
 FROM sandbox.relay_evoucher_psd
 ORDER BY relay_evoucher_psd.source_name,
          relay_evoucher_psd.ndc_code,
          relay_evoucher_psd.ndc_name,
          relay_evoucher_psd.report_month,
          relay_evoucher_psd.month_date,
          relay_evoucher_psd.mnth_dt,
          relay_evoucher_psd.claim_status,
          relay_evoucher_psd.evoucher_status_desc
SEGMENTED BY hash(relay_evoucher_psd.report_month, relay_evoucher_psd.mnth_dt, relay_evoucher_psd.units, relay_evoucher_psd.run_date, relay_evoucher_psd.source_name, relay_evoucher_psd.eVoucher_Amount, relay_evoucher_psd.month_date, relay_evoucher_psd.ndc_code) ALL NODES;

CREATE PROJECTION sandbox.relay_denial_conversion_psd_b0 /*+basename(relay_denial_conversion_psd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 date_of_service,
 month_date,
 mnth_dt,
 claim_status,
 denial_voucher_amount,
 units,
 run_date
)
AS
 SELECT relay_denial_conversion_psd.source_name,
        relay_denial_conversion_psd.ndc_code,
        relay_denial_conversion_psd.ndc_name,
        relay_denial_conversion_psd.date_of_service,
        relay_denial_conversion_psd.month_date,
        relay_denial_conversion_psd.mnth_dt,
        relay_denial_conversion_psd.claim_status,
        relay_denial_conversion_psd.denial_voucher_amount,
        relay_denial_conversion_psd.units,
        relay_denial_conversion_psd.run_date
 FROM sandbox.relay_denial_conversion_psd
 ORDER BY relay_denial_conversion_psd.source_name,
          relay_denial_conversion_psd.ndc_code,
          relay_denial_conversion_psd.ndc_name,
          relay_denial_conversion_psd.date_of_service,
          relay_denial_conversion_psd.month_date,
          relay_denial_conversion_psd.mnth_dt,
          relay_denial_conversion_psd.claim_status,
          relay_denial_conversion_psd.denial_voucher_amount
SEGMENTED BY hash(relay_denial_conversion_psd.date_of_service, relay_denial_conversion_psd.mnth_dt, relay_denial_conversion_psd.units, relay_denial_conversion_psd.run_date, relay_denial_conversion_psd.denial_voucher_amount, relay_denial_conversion_psd.source_name, relay_denial_conversion_psd.month_date, relay_denial_conversion_psd.ndc_code) ALL NODES;

CREATE PROJECTION sandbox.relay_coc_psd_b0 /*+basename(relay_coc_psd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 date_of_service,
 month_date,
 mnth_dt,
 claim_status,
 pharmacy_product_dollar,
 units,
 run_date
)
AS
 SELECT relay_coc_psd.source_name,
        relay_coc_psd.ndc_code,
        relay_coc_psd.ndc_name,
        relay_coc_psd.date_of_service,
        relay_coc_psd.month_date,
        relay_coc_psd.mnth_dt,
        relay_coc_psd.claim_status,
        relay_coc_psd.pharmacy_product_dollar,
        relay_coc_psd.units,
        relay_coc_psd.run_date
 FROM sandbox.relay_coc_psd
 ORDER BY relay_coc_psd.source_name,
          relay_coc_psd.ndc_code,
          relay_coc_psd.ndc_name,
          relay_coc_psd.date_of_service,
          relay_coc_psd.month_date,
          relay_coc_psd.mnth_dt,
          relay_coc_psd.claim_status,
          relay_coc_psd.pharmacy_product_dollar
SEGMENTED BY hash(relay_coc_psd.date_of_service, relay_coc_psd.mnth_dt, relay_coc_psd.units, relay_coc_psd.run_date, relay_coc_psd.source_name, relay_coc_psd.pharmacy_product_dollar, relay_coc_psd.ndc_code, relay_coc_psd.month_date) ALL NODES;

CREATE PROJECTION sandbox.npa_demand_units_psd_b0 /*+basename(npa_demand_units_psd),createtype(A)*/ 
(
 ndc_code,
 ndc_name,
 channel,
 month_date,
 mnth_dt,
 EU_TRx,
 run_date
)
AS
 SELECT npa_demand_units_psd.ndc_code,
        npa_demand_units_psd.ndc_name,
        npa_demand_units_psd.channel,
        npa_demand_units_psd.month_date,
        npa_demand_units_psd.mnth_dt,
        npa_demand_units_psd.EU_TRx,
        npa_demand_units_psd.run_date
 FROM sandbox.npa_demand_units_psd
 ORDER BY npa_demand_units_psd.ndc_code,
          npa_demand_units_psd.ndc_name,
          npa_demand_units_psd.channel,
          npa_demand_units_psd.month_date,
          npa_demand_units_psd.mnth_dt,
          npa_demand_units_psd.EU_TRx,
          npa_demand_units_psd.run_date
SEGMENTED BY hash(npa_demand_units_psd.month_date, npa_demand_units_psd.mnth_dt, npa_demand_units_psd.run_date, npa_demand_units_psd.EU_TRx, npa_demand_units_psd.ndc_code, npa_demand_units_psd.channel, npa_demand_units_psd.ndc_name) ALL NODES;

CREATE PROJECTION sandbox.copay_metrics_psd_b0 /*+basename(copay_metrics_psd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 basket_name,
 month_date,
 mnth_dt,
 CRx_Covered_Units,
 CRx_EVoucher_Units,
 CRx_NonCovered_Units,
 CRx_DC_Units,
 CRx_DC_Dollars,
 CRx_PA_Units,
 CRx_DC_CoC_Units,
 CRx_Other_Units,
 CRx_Covered_Dollars,
 CRx_NonCovered_Dollars
)
AS
 SELECT copay_metrics_psd.source_name,
        copay_metrics_psd.ndc_code,
        copay_metrics_psd.basket_name,
        copay_metrics_psd.month_date,
        copay_metrics_psd.mnth_dt,
        copay_metrics_psd.CRx_Covered_Units,
        copay_metrics_psd.CRx_EVoucher_Units,
        copay_metrics_psd.CRx_NonCovered_Units,
        copay_metrics_psd.CRx_DC_Units,
        copay_metrics_psd.CRx_DC_Dollars,
        copay_metrics_psd.CRx_PA_Units,
        copay_metrics_psd.CRx_DC_CoC_Units,
        copay_metrics_psd.CRx_Other_Units,
        copay_metrics_psd.CRx_Covered_Dollars,
        copay_metrics_psd.CRx_NonCovered_Dollars
 FROM sandbox.copay_metrics_psd
 ORDER BY copay_metrics_psd.basket_name
SEGMENTED BY hash(copay_metrics_psd.source_name, copay_metrics_psd.ndc_code, copay_metrics_psd.basket_name, copay_metrics_psd.month_date, copay_metrics_psd.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.relay_evoucher_metrics_psd_b0 /*+basename(relay_evoucher_metrics_psd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 month_date,
 mnth_dt,
 Relay_EVoucher_Units_Paid,
 Relay_EVoucher_Dollars_Paid,
 Relay_EVoucher_Units_Reversed,
 Relay_EVoucher_Dollars_Reversed,
 Relay_EVoucher_Units,
 Relay_EVoucher_Dollars
)
AS
 SELECT relay_evoucher_metrics_psd.source_name,
        relay_evoucher_metrics_psd.ndc_code,
        relay_evoucher_metrics_psd.ndc_name,
        relay_evoucher_metrics_psd.month_date,
        relay_evoucher_metrics_psd.mnth_dt,
        relay_evoucher_metrics_psd.Relay_EVoucher_Units_Paid,
        relay_evoucher_metrics_psd.Relay_EVoucher_Dollars_Paid,
        relay_evoucher_metrics_psd.Relay_EVoucher_Units_Reversed,
        relay_evoucher_metrics_psd.Relay_EVoucher_Dollars_Reversed,
        relay_evoucher_metrics_psd.Relay_EVoucher_Units,
        relay_evoucher_metrics_psd.Relay_EVoucher_Dollars
 FROM sandbox.relay_evoucher_metrics_psd
 ORDER BY relay_evoucher_metrics_psd.source_name,
          relay_evoucher_metrics_psd.ndc_code,
          relay_evoucher_metrics_psd.ndc_name,
          relay_evoucher_metrics_psd.month_date,
          relay_evoucher_metrics_psd.mnth_dt
SEGMENTED BY hash(relay_evoucher_metrics_psd.source_name, relay_evoucher_metrics_psd.ndc_code, relay_evoucher_metrics_psd.ndc_name, relay_evoucher_metrics_psd.month_date, relay_evoucher_metrics_psd.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.relay_denial_conversion_metrics_psd_b0 /*+basename(relay_denial_conversion_metrics_psd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 month_date,
 mnth_dt,
 Relay_Denial_Conversion_Units_Paid,
 Relay_Denial_Conversion_Dollars_Paid,
 Relay_Denial_Conversion_Units_Reversal,
 Relay_Denial_Conversion_Dollars_Reversal,
 Relay_Denial_Conversion_Units,
 Relay_Denial_Conversion_Dollars
)
AS
 SELECT relay_denial_conversion_metrics_psd.source_name,
        relay_denial_conversion_metrics_psd.ndc_code,
        relay_denial_conversion_metrics_psd.ndc_name,
        relay_denial_conversion_metrics_psd.month_date,
        relay_denial_conversion_metrics_psd.mnth_dt,
        relay_denial_conversion_metrics_psd.Relay_Denial_Conversion_Units_Paid,
        relay_denial_conversion_metrics_psd.Relay_Denial_Conversion_Dollars_Paid,
        relay_denial_conversion_metrics_psd.Relay_Denial_Conversion_Units_Reversal,
        relay_denial_conversion_metrics_psd.Relay_Denial_Conversion_Dollars_Reversal,
        relay_denial_conversion_metrics_psd.Relay_Denial_Conversion_Units,
        relay_denial_conversion_metrics_psd.Relay_Denial_Conversion_Dollars
 FROM sandbox.relay_denial_conversion_metrics_psd
 ORDER BY relay_denial_conversion_metrics_psd.source_name,
          relay_denial_conversion_metrics_psd.ndc_code,
          relay_denial_conversion_metrics_psd.ndc_name,
          relay_denial_conversion_metrics_psd.month_date,
          relay_denial_conversion_metrics_psd.mnth_dt
SEGMENTED BY hash(relay_denial_conversion_metrics_psd.source_name, relay_denial_conversion_metrics_psd.ndc_code, relay_denial_conversion_metrics_psd.ndc_name, relay_denial_conversion_metrics_psd.month_date, relay_denial_conversion_metrics_psd.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.relay_coc_metrics_psd_b0 /*+basename(relay_coc_metrics_psd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 month_date,
 mnth_dt,
 Relay_CoC_Units_Paid,
 Relay_CoC_Dollars_Paid,
 Relay_CoC_Units_Reversed,
 Relay_CoC_Dollars_Reversed,
 Relay_CoC_Units,
 Relay_CoC_Dollars
)
AS
 SELECT relay_coc_metrics_psd.source_name,
        relay_coc_metrics_psd.ndc_code,
        relay_coc_metrics_psd.ndc_name,
        relay_coc_metrics_psd.month_date,
        relay_coc_metrics_psd.mnth_dt,
        relay_coc_metrics_psd.Relay_CoC_Units_Paid,
        relay_coc_metrics_psd.Relay_CoC_Dollars_Paid,
        relay_coc_metrics_psd.Relay_CoC_Units_Reversed,
        relay_coc_metrics_psd.Relay_CoC_Dollars_Reversed,
        relay_coc_metrics_psd.Relay_CoC_Units,
        relay_coc_metrics_psd.Relay_CoC_Dollars
 FROM sandbox.relay_coc_metrics_psd
 ORDER BY relay_coc_metrics_psd.source_name,
          relay_coc_metrics_psd.ndc_code,
          relay_coc_metrics_psd.ndc_name,
          relay_coc_metrics_psd.month_date,
          relay_coc_metrics_psd.mnth_dt
SEGMENTED BY hash(relay_coc_metrics_psd.source_name, relay_coc_metrics_psd.ndc_code, relay_coc_metrics_psd.ndc_name, relay_coc_metrics_psd.month_date, relay_coc_metrics_psd.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.npa_metrics_psd_b0 /*+basename(npa_metrics_psd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 month_date,
 mnth_dt,
 EU_TRx
)
AS
 SELECT npa_metrics_psd.source_name,
        npa_metrics_psd.ndc_code,
        npa_metrics_psd.ndc_name,
        npa_metrics_psd.month_date,
        npa_metrics_psd.mnth_dt,
        npa_metrics_psd.EU_TRx
 FROM sandbox.npa_metrics_psd
 ORDER BY npa_metrics_psd.ndc_code,
          npa_metrics_psd.ndc_name,
          npa_metrics_psd.month_date,
          npa_metrics_psd.mnth_dt
SEGMENTED BY hash(npa_metrics_psd.ndc_code, npa_metrics_psd.ndc_name, npa_metrics_psd.month_date, npa_metrics_psd.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.base_metrics_psd_b0 /*+basename(base_metrics_psd),createtype(A)*/ 
(
 ndc_code,
 ndc_name,
 month_date,
 mnth_dt,
 EU_TRx,
 CRx_Covered_Units,
 CRx_EVoucher_Units,
 CRx_NonCovered_Units,
 CRx_DC_Units,
 CRx_DC_Dollars,
 CRx_PA_Units,
 CRx_DC_CoC_Units,
 CRx_Other_Units,
 CRx_Covered_Dollars,
 CRx_NonCovered_Dollars,
 Relay_EVoucher_Units_Paid,
 Relay_EVoucher_Dollars_Paid,
 Relay_EVoucher_Units_Reversed,
 Relay_EVoucher_Dollars_Reversed,
 Relay_EVoucher_Units,
 Relay_EVoucher_Dollars,
 Relay_Denial_Conversion_Units_Paid,
 Relay_Denial_Conversion_Dollars_Paid,
 Relay_Denial_Conversion_Units_Reversal,
 Relay_Denial_Conversion_Dollars_Reversal,
 Relay_Denial_Conversion_Units,
 Relay_Denial_Conversion_Dollars,
 Relay_CoC_Units_Paid,
 Relay_CoC_Dollars_Paid,
 Relay_CoC_Units_Reversed,
 Relay_CoC_Dollars_Reversed,
 Relay_CoC_Units,
 Relay_CoC_Dollars
)
AS
 SELECT base_metrics_psd.ndc_code,
        base_metrics_psd.ndc_name,
        base_metrics_psd.month_date,
        base_metrics_psd.mnth_dt,
        base_metrics_psd.EU_TRx,
        base_metrics_psd.CRx_Covered_Units,
        base_metrics_psd.CRx_EVoucher_Units,
        base_metrics_psd.CRx_NonCovered_Units,
        base_metrics_psd.CRx_DC_Units,
        base_metrics_psd.CRx_DC_Dollars,
        base_metrics_psd.CRx_PA_Units,
        base_metrics_psd.CRx_DC_CoC_Units,
        base_metrics_psd.CRx_Other_Units,
        base_metrics_psd.CRx_Covered_Dollars,
        base_metrics_psd.CRx_NonCovered_Dollars,
        base_metrics_psd.Relay_EVoucher_Units_Paid,
        base_metrics_psd.Relay_EVoucher_Dollars_Paid,
        base_metrics_psd.Relay_EVoucher_Units_Reversed,
        base_metrics_psd.Relay_EVoucher_Dollars_Reversed,
        base_metrics_psd.Relay_EVoucher_Units,
        base_metrics_psd.Relay_EVoucher_Dollars,
        base_metrics_psd.Relay_Denial_Conversion_Units_Paid,
        base_metrics_psd.Relay_Denial_Conversion_Dollars_Paid,
        base_metrics_psd.Relay_Denial_Conversion_Units_Reversal,
        base_metrics_psd.Relay_Denial_Conversion_Dollars_Reversal,
        base_metrics_psd.Relay_Denial_Conversion_Units,
        base_metrics_psd.Relay_Denial_Conversion_Dollars,
        base_metrics_psd.Relay_CoC_Units_Paid,
        base_metrics_psd.Relay_CoC_Dollars_Paid,
        base_metrics_psd.Relay_CoC_Units_Reversed,
        base_metrics_psd.Relay_CoC_Dollars_Reversed,
        base_metrics_psd.Relay_CoC_Units,
        base_metrics_psd.Relay_CoC_Dollars
 FROM sandbox.base_metrics_psd
 ORDER BY base_metrics_psd.ndc_code,
          base_metrics_psd.ndc_name,
          base_metrics_psd.month_date,
          base_metrics_psd.mnth_dt
SEGMENTED BY hash(base_metrics_psd.ndc_code, base_metrics_psd.ndc_name, base_metrics_psd.month_date, base_metrics_psd.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.view1_psd_b0 /*+basename(view1_psd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 Demand_units,
 Covered_Coupon_Units,
 Non_Covered_Coupon_Units,
 run_date
)
AS
 SELECT view1_psd.product_name,
        view1_psd.month_year,
        view1_psd.mnth_dt,
        view1_psd.Demand_units,
        view1_psd.Covered_Coupon_Units,
        view1_psd.Full_WAC_Buy_Down_Units AS Non_Covered_Coupon_Units,
        view1_psd.run_date
 FROM sandbox.view1_psd
 ORDER BY view1_psd.product_name,
          view1_psd.month_year,
          view1_psd.mnth_dt,
          view1_psd.Demand_units,
          view1_psd.Covered_Coupon_Units,
          view1_psd.Full_WAC_Buy_Down_Units,
          view1_psd.run_date
SEGMENTED BY hash(view1_psd.product_name, view1_psd.mnth_dt, view1_psd.Covered_Coupon_Units, view1_psd.Full_WAC_Buy_Down_Units, view1_psd.run_date, view1_psd.Demand_units, view1_psd.month_year) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSFR_Utilization_TN_Rpt20220218_b0 /*+basename(Austedo_PSFR_Utilization_TN_Rpt20220218),createtype(L)*/ 
(
 PSRF_ID,
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSFR_Utilization_TN_Rpt20220218.PSRF_ID,
        Austedo_PSFR_Utilization_TN_Rpt20220218.PrescriberName,
        Austedo_PSFR_Utilization_TN_Rpt20220218.PrescriberCity,
        Austedo_PSFR_Utilization_TN_Rpt20220218.PrescriberState,
        Austedo_PSFR_Utilization_TN_Rpt20220218.PrescriberZip,
        Austedo_PSFR_Utilization_TN_Rpt20220218.PrescriberNPI,
        Austedo_PSFR_Utilization_TN_Rpt20220218."Current Week PSRFs",
        Austedo_PSFR_Utilization_TN_Rpt20220218."Current Month PSRFs",
        Austedo_PSFR_Utilization_TN_Rpt20220218.HCP_Signature_Yes,
        Austedo_PSFR_Utilization_TN_Rpt20220218.HCP_Signature_No,
        Austedo_PSFR_Utilization_TN_Rpt20220218.Patient_Auth_Yes,
        Austedo_PSFR_Utilization_TN_Rpt20220218.Patient_Auth_No,
        Austedo_PSFR_Utilization_TN_Rpt20220218."YTD PSRFs"
 FROM sandbox.Austedo_PSFR_Utilization_TN_Rpt20220218
 ORDER BY Austedo_PSFR_Utilization_TN_Rpt20220218.PSRF_ID,
          Austedo_PSFR_Utilization_TN_Rpt20220218.PrescriberName,
          Austedo_PSFR_Utilization_TN_Rpt20220218.PrescriberCity,
          Austedo_PSFR_Utilization_TN_Rpt20220218.PrescriberState,
          Austedo_PSFR_Utilization_TN_Rpt20220218.PrescriberZip,
          Austedo_PSFR_Utilization_TN_Rpt20220218.PrescriberNPI,
          Austedo_PSFR_Utilization_TN_Rpt20220218."Current Week PSRFs",
          Austedo_PSFR_Utilization_TN_Rpt20220218."Current Month PSRFs"
SEGMENTED BY hash(Austedo_PSFR_Utilization_TN_Rpt20220218."Current Week PSRFs", Austedo_PSFR_Utilization_TN_Rpt20220218."Current Month PSRFs", Austedo_PSFR_Utilization_TN_Rpt20220218.HCP_Signature_Yes, Austedo_PSFR_Utilization_TN_Rpt20220218.HCP_Signature_No, Austedo_PSFR_Utilization_TN_Rpt20220218.Patient_Auth_Yes, Austedo_PSFR_Utilization_TN_Rpt20220218.Patient_Auth_No, Austedo_PSFR_Utilization_TN_Rpt20220218."YTD PSRFs", Austedo_PSFR_Utilization_TN_Rpt20220218.PSRF_ID) ALL NODES;

CREATE PROJECTION sandbox.TRIAL_CARD_LTC_Facility_Profile_Full_b0 /*+basename(TRIAL_CARD_LTC_Facility_Profile_Full),createtype(L)*/ 
(
 "Activity Date",
 "Internal Contact ID",
 "Current or Final Disposition",
 "Facility ID",
 "Display Name",
 Geography,
 "Group",
 "Decile Group",
 Decile,
 "Confirm Facility/Network Name",
 "Name Verified",
 "Facility Street Address",
 "Facility City",
 "Facility State",
 "Facility ZIP Code",
 "Address Verified",
 "Address Change",
 "Facility Phone Number",
 "Facility Phone Number Change",
 "Facility Office Fax Number",
 "Facility Email Address",
 "Network Office Key Decisions",
 "Certified Beds",
 "Q1. Did # Beds change?",
 "Q1. How many beds?",
 "Q1a. Percent of Long-term Care Beds",
 "Q1a. Dont' KNow/Refused",
 "Q2. Staffing/ Key Points of Contact",
 "Q2a. Director Of Nursing First Name",
 "Q2a. Director of Nursing Last Name",
 "Q2a. Director of Nursing Email",
 "Q2a Director of Nursing Phone",
 "Q2a. Director Of Nursing Best Time to Contact",
 "Q2b. Assistant Director of Nursing First Name",
 "Q2b. Assistant Director of Nursing Last Name",
 "Q2b. Assistant Director of Nursing Email",
 "Q2b Assistant Director of Nursing Phone",
 "Q2b. Assistant Director Of Nursing Best Time to Contact",
 "Q2c. Consultant Pharmacist First Name",
 "Q2c. Consultant Pharmacist Last Name",
 "Q2c. Consultant Pharmacist Email",
 "Q2c Consultant Pharmacist Phone",
 "Q2c. Consultant Pharmacist Best Time to Contact",
 "Q2d. Medical Director First Name",
 "Q2d. Medical Director Last Name",
 "Q2d. Medical Director Email",
 "Q2d Medical Director Phone",
 "Q2d. Medical Director Best Time to Contact",
 "Q2e. Administrator First Name",
 "Q2e. Administrator Last Name",
 "Q2e. Administrator Email",
 "Q2e Administrator Phone",
 "Q2e. Administrator Best Time to Contact",
 "Q2f. Social Worker First Name",
 "Q2f. Social Worker Last Name",
 "Q2f. Social Worker Email",
 "Q2f Social Worker Phone",
 "Q2f. Social Worker Best Time to Contact",
 "Q2g. Office Manager First Name",
 "Q2g. Office Manager Last Name",
 "Q2g. Office Manager Email",
 "Q2g Office Manager Phone",
 "Q2g. Office Manager Best Time to Contact",
 "Q3. Psychiatric Provider First Name",
 "Q3. Psychiatric Provider Last Name",
 "Q3. Psychiatric Provider Email",
 "Q3. Psychiatric Provider Phone",
 "Q3. Psychiatric Provider Best Time to Contact",
 "NT-Q1. Regional Nurse Consultant First Name",
 "NT-Q1. Regional Nurse Consultant Last Name",
 "NT-Q1. Regional Nurse Consultant Email",
 "NT-Q1. Regional Nurse Consultant Phone",
 "NT-Q1. Regional Nurse Consultant Best Time to Contact",
 "NT-Q2. Regional Administrator First Name",
 "NT-Q2. Regional Administrator Last Name",
 "UB. - Other Point of Contact First Name",
 "UB. - Other Point of Contact Last Name",
 "UB. - Other Point of Contact Email",
 "UB. - Other Point of Contact Email Phone",
 "UB. - Other Point of Contact Best Time to Contact",
 "UB. - Questions for me today?",
 "UB. - If Yes, Questions",
 "B- Speak to Clinical Staff Member",
 "QP1. How does staff interact",
 "QP1. Network/Local",
 "QP2. Does staff participate in educational programs",
 "QP2. Network/Local",
 "QP2a. Programs in-person or virtual",
 "QP2a. Network/Local",
 "QP2b. Staff participation in virtual edu programs in 2020",
 "QP2b. Network/Local",
 "QP2c. Preference regarding in-person or virtual programs",
 "QP2c.Preference regarding in-person or virtual programs Yes",
 "Qp2c. Network/Local",
 "QP2d. Current COVID-19 Policies?",
 "Rep. Access",
 "QP2d. Network/Local",
 "QP2e. Branded in-service presentations allowed",
 "QP2e. Network/Local",
 "QP3 Best way to engage staff",
 "QP3. Network/Local",
 "Q4. Most valuable info from pharmaceutical companies",
 "Q4. Most valuable info from pharmaceutical companies Other",
 "Q5. Who assesses patients/performs testing Name",
 "Q5. Who assesses patients/performs testing Title",
 "Q5. Who assesses patients/performs testing Email",
 "Q5. Who assesses patients/performs testing Phone",
 "Q5. Who assesses patients/performs testing Best time to contact",
 "Q5. Who assesses patients/performs testing Don't know",
 "Q6. VMAT2 inhibitors being used",
 "Q7. providers prescribing AUSTEDO",
 "Q8. In-house or contracted pharmacy",
 "Q9. Name and address of pharmacy Name",
 "Pharmacy Name Change",
 "Q9. Name and address of pharmacy Address",
 "Q9. Name and address of pharmacy City",
 "Q9. Name and address of pharmacy State",
 "Q9. Name and address of pharmacy Phone",
 "Q9. Name and address of pharmacy Fax",
 "Q9. Name and address of pharmacy Don't know",
 "Q9a. Pharmacy Email",
 "Q9a. Pharmacy Web",
 "Q9-Oth. Name and address of Other pharmacy Name",
 "Q9-Oth. Name and address of Other pharmacy Address",
 "Q9-Oth. Name and address of Other pharmacy City",
 "Q9-Oth. Name and address of Other pharmacy State",
 "Q9-Oth. Name and address of Other pharmacy Phone number",
 "Q9-Oth. Name and address of Other pharmacy Fax number",
 "Q10. Prior Authorizations",
 "B - Other Point of Contact First Name",
 "B - Other Point of Contact Last Name",
 "B - Other Point of Contact Email",
 "B - Other Point of Contact Phone",
 "B - Other Point of Contact Best Time to Contact",
 "B - Email Address",
 "B - Questions for me today?",
 "B - If Yes, Questions",
 "B- Transferred to Safety Message",
 "Call Date 1",
 "Call Disposition Attempt 1",
 "Call Date 2",
 "Call Disposition Attempt 2",
 "Call Date 3",
 "Call Disposition Attempt 3",
 "Archer Rep",
 "Completed By",
 "Archer Lead Score",
 Subject,
 "In- Network?",
 "Activity ID"
)
AS
 SELECT TRIAL_CARD_LTC_Facility_Profile_Full."Activity Date",
        TRIAL_CARD_LTC_Facility_Profile_Full."Internal Contact ID",
        TRIAL_CARD_LTC_Facility_Profile_Full."Current or Final Disposition",
        TRIAL_CARD_LTC_Facility_Profile_Full."Facility ID",
        TRIAL_CARD_LTC_Facility_Profile_Full."Display Name",
        TRIAL_CARD_LTC_Facility_Profile_Full.Geography,
        TRIAL_CARD_LTC_Facility_Profile_Full."Group",
        TRIAL_CARD_LTC_Facility_Profile_Full."Decile Group",
        TRIAL_CARD_LTC_Facility_Profile_Full.Decile,
        TRIAL_CARD_LTC_Facility_Profile_Full."Confirm Facility/Network Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Name Verified",
        TRIAL_CARD_LTC_Facility_Profile_Full."Facility Street Address",
        TRIAL_CARD_LTC_Facility_Profile_Full."Facility City",
        TRIAL_CARD_LTC_Facility_Profile_Full."Facility State",
        TRIAL_CARD_LTC_Facility_Profile_Full."Facility ZIP Code",
        TRIAL_CARD_LTC_Facility_Profile_Full."Address Verified",
        TRIAL_CARD_LTC_Facility_Profile_Full."Address Change",
        TRIAL_CARD_LTC_Facility_Profile_Full."Facility Phone Number",
        TRIAL_CARD_LTC_Facility_Profile_Full."Facility Phone Number Change",
        TRIAL_CARD_LTC_Facility_Profile_Full."Facility Office Fax Number",
        TRIAL_CARD_LTC_Facility_Profile_Full."Facility Email Address",
        TRIAL_CARD_LTC_Facility_Profile_Full."Network Office Key Decisions",
        TRIAL_CARD_LTC_Facility_Profile_Full."Certified Beds",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q1. Did # Beds change?",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q1. How many beds?",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q1a. Percent of Long-term Care Beds",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q1a. Dont' KNow/Refused",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2. Staffing/ Key Points of Contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2a. Director Of Nursing First Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2a. Director of Nursing Last Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2a. Director of Nursing Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2a Director of Nursing Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2a. Director Of Nursing Best Time to Contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2b. Assistant Director of Nursing First Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2b. Assistant Director of Nursing Last Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2b. Assistant Director of Nursing Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2b Assistant Director of Nursing Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2b. Assistant Director Of Nursing Best Time to Contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2c. Consultant Pharmacist First Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2c. Consultant Pharmacist Last Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2c. Consultant Pharmacist Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2c Consultant Pharmacist Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2c. Consultant Pharmacist Best Time to Contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2d. Medical Director First Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2d. Medical Director Last Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2d. Medical Director Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2d Medical Director Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2d. Medical Director Best Time to Contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2e. Administrator First Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2e. Administrator Last Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2e. Administrator Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2e Administrator Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2e. Administrator Best Time to Contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2f. Social Worker First Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2f. Social Worker Last Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2f. Social Worker Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2f Social Worker Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2f. Social Worker Best Time to Contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2g. Office Manager First Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2g. Office Manager Last Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2g. Office Manager Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2g Office Manager Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q2g. Office Manager Best Time to Contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q3. Psychiatric Provider First Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q3. Psychiatric Provider Last Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q3. Psychiatric Provider Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q3. Psychiatric Provider Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q3. Psychiatric Provider Best Time to Contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."NT-Q1. Regional Nurse Consultant First Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."NT-Q1. Regional Nurse Consultant Last Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."NT-Q1. Regional Nurse Consultant Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."NT-Q1. Regional Nurse Consultant Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."NT-Q1. Regional Nurse Consultant Best Time to Contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."NT-Q2. Regional Administrator First Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."NT-Q2. Regional Administrator Last Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."UB. - Other Point of Contact First Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."UB. - Other Point of Contact Last Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."UB. - Other Point of Contact Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."UB. - Other Point of Contact Email Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."UB. - Other Point of Contact Best Time to Contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."UB. - Questions for me today?",
        TRIAL_CARD_LTC_Facility_Profile_Full."UB. - If Yes, Questions",
        TRIAL_CARD_LTC_Facility_Profile_Full."B- Speak to Clinical Staff Member",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP1. How does staff interact",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP1. Network/Local",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP2. Does staff participate in educational programs",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP2. Network/Local",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP2a. Programs in-person or virtual",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP2a. Network/Local",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP2b. Staff participation in virtual edu programs in 2020",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP2b. Network/Local",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP2c. Preference regarding in-person or virtual programs",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP2c.Preference regarding in-person or virtual programs Yes",
        TRIAL_CARD_LTC_Facility_Profile_Full."Qp2c. Network/Local",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP2d. Current COVID-19 Policies?",
        TRIAL_CARD_LTC_Facility_Profile_Full."Rep. Access",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP2d. Network/Local",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP2e. Branded in-service presentations allowed",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP2e. Network/Local",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP3 Best way to engage staff",
        TRIAL_CARD_LTC_Facility_Profile_Full."QP3. Network/Local",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q4. Most valuable info from pharmaceutical companies",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q4. Most valuable info from pharmaceutical companies Other",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q5. Who assesses patients/performs testing Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q5. Who assesses patients/performs testing Title",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q5. Who assesses patients/performs testing Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q5. Who assesses patients/performs testing Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q5. Who assesses patients/performs testing Best time to contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q5. Who assesses patients/performs testing Don't know",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q6. VMAT2 inhibitors being used",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q7. providers prescribing AUSTEDO",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q8. In-house or contracted pharmacy",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9. Name and address of pharmacy Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Pharmacy Name Change",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9. Name and address of pharmacy Address",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9. Name and address of pharmacy City",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9. Name and address of pharmacy State",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9. Name and address of pharmacy Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9. Name and address of pharmacy Fax",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9. Name and address of pharmacy Don't know",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9a. Pharmacy Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9a. Pharmacy Web",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9-Oth. Name and address of Other pharmacy Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9-Oth. Name and address of Other pharmacy Address",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9-Oth. Name and address of Other pharmacy City",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9-Oth. Name and address of Other pharmacy State",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9-Oth. Name and address of Other pharmacy Phone number",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q9-Oth. Name and address of Other pharmacy Fax number",
        TRIAL_CARD_LTC_Facility_Profile_Full."Q10. Prior Authorizations",
        TRIAL_CARD_LTC_Facility_Profile_Full."B - Other Point of Contact First Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."B - Other Point of Contact Last Name",
        TRIAL_CARD_LTC_Facility_Profile_Full."B - Other Point of Contact Email",
        TRIAL_CARD_LTC_Facility_Profile_Full."B - Other Point of Contact Phone",
        TRIAL_CARD_LTC_Facility_Profile_Full."B - Other Point of Contact Best Time to Contact",
        TRIAL_CARD_LTC_Facility_Profile_Full."B - Email Address",
        TRIAL_CARD_LTC_Facility_Profile_Full."B - Questions for me today?",
        TRIAL_CARD_LTC_Facility_Profile_Full."B - If Yes, Questions",
        TRIAL_CARD_LTC_Facility_Profile_Full."B- Transferred to Safety Message",
        TRIAL_CARD_LTC_Facility_Profile_Full."Call Date 1",
        TRIAL_CARD_LTC_Facility_Profile_Full."Call Disposition Attempt 1",
        TRIAL_CARD_LTC_Facility_Profile_Full."Call Date 2",
        TRIAL_CARD_LTC_Facility_Profile_Full."Call Disposition Attempt 2",
        TRIAL_CARD_LTC_Facility_Profile_Full."Call Date 3",
        TRIAL_CARD_LTC_Facility_Profile_Full."Call Disposition Attempt 3",
        TRIAL_CARD_LTC_Facility_Profile_Full."Archer Rep",
        TRIAL_CARD_LTC_Facility_Profile_Full."Completed By",
        TRIAL_CARD_LTC_Facility_Profile_Full."Archer Lead Score",
        TRIAL_CARD_LTC_Facility_Profile_Full.Subject,
        TRIAL_CARD_LTC_Facility_Profile_Full."In- Network?",
        TRIAL_CARD_LTC_Facility_Profile_Full."Activity ID"
 FROM sandbox.TRIAL_CARD_LTC_Facility_Profile_Full
 ORDER BY TRIAL_CARD_LTC_Facility_Profile_Full."Activity Date",
          TRIAL_CARD_LTC_Facility_Profile_Full."Internal Contact ID",
          TRIAL_CARD_LTC_Facility_Profile_Full."Current or Final Disposition",
          TRIAL_CARD_LTC_Facility_Profile_Full."Facility ID",
          TRIAL_CARD_LTC_Facility_Profile_Full."Display Name",
          TRIAL_CARD_LTC_Facility_Profile_Full.Geography,
          TRIAL_CARD_LTC_Facility_Profile_Full."Group",
          TRIAL_CARD_LTC_Facility_Profile_Full."Decile Group"
SEGMENTED BY hash(TRIAL_CARD_LTC_Facility_Profile_Full."Activity Date", TRIAL_CARD_LTC_Facility_Profile_Full."Internal Contact ID", TRIAL_CARD_LTC_Facility_Profile_Full."Decile Group", TRIAL_CARD_LTC_Facility_Profile_Full.Decile, TRIAL_CARD_LTC_Facility_Profile_Full."Facility State", TRIAL_CARD_LTC_Facility_Profile_Full."Certified Beds", TRIAL_CARD_LTC_Facility_Profile_Full."Q9. Name and address of pharmacy State", TRIAL_CARD_LTC_Facility_Profile_Full."Q9-Oth. Name and address of Other pharmacy State") ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_040822_super /*+basename(Austedo_PSRF_Utilization_Rpt_040822),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT "Austedo_PSRF_Utilization_Rpt_00 ".PrescriberName,
        "Austedo_PSRF_Utilization_Rpt_00 ".PrescriberCity,
        "Austedo_PSRF_Utilization_Rpt_00 ".PrescriberState,
        "Austedo_PSRF_Utilization_Rpt_00 ".PrescriberZip,
        "Austedo_PSRF_Utilization_Rpt_00 ".PrescriberNPI,
        "Austedo_PSRF_Utilization_Rpt_00 "."Current Week PSRFs",
        "Austedo_PSRF_Utilization_Rpt_00 "."Current Month PSRFs",
        "Austedo_PSRF_Utilization_Rpt_00 ".HCP_Signature_Yes,
        "Austedo_PSRF_Utilization_Rpt_00 ".HCP_Signature_No,
        "Austedo_PSRF_Utilization_Rpt_00 ".Patient_Auth_Yes,
        "Austedo_PSRF_Utilization_Rpt_00 ".Patient_Auth_No,
        "Austedo_PSRF_Utilization_Rpt_00 "."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_040822 "Austedo_PSRF_Utilization_Rpt_00 "
 ORDER BY "Austedo_PSRF_Utilization_Rpt_00 ".PrescriberName,
          "Austedo_PSRF_Utilization_Rpt_00 ".PrescriberCity,
          "Austedo_PSRF_Utilization_Rpt_00 ".PrescriberState,
          "Austedo_PSRF_Utilization_Rpt_00 ".PrescriberZip,
          "Austedo_PSRF_Utilization_Rpt_00 ".PrescriberNPI,
          "Austedo_PSRF_Utilization_Rpt_00 "."Current Week PSRFs",
          "Austedo_PSRF_Utilization_Rpt_00 "."Current Month PSRFs",
          "Austedo_PSRF_Utilization_Rpt_00 ".HCP_Signature_Yes
SEGMENTED BY hash("Austedo_PSRF_Utilization_Rpt_00 "."Current Week PSRFs", "Austedo_PSRF_Utilization_Rpt_00 "."Current Month PSRFs", "Austedo_PSRF_Utilization_Rpt_00 ".HCP_Signature_Yes, "Austedo_PSRF_Utilization_Rpt_00 ".HCP_Signature_No, "Austedo_PSRF_Utilization_Rpt_00 ".Patient_Auth_Yes, "Austedo_PSRF_Utilization_Rpt_00 ".Patient_Auth_No, "Austedo_PSRF_Utilization_Rpt_00 "."YTD PSRFs", "Austedo_PSRF_Utilization_Rpt_00 ".PrescriberZip) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_042922_super /*+basename(Austedo_PSRF_Utilization_Rpt_042922),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_042922 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00.PrescriberState, Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_04292022_b0 /*+basename(Austedo_PSRF_Utilization_Rpt_04292022),createtype(A)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_04292022.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_04292022.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_04292022.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_04292022.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_04292022.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_04292022."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_04292022."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_04292022.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_04292022.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_04292022.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_04292022.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_04292022."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_04292022
 ORDER BY Austedo_PSRF_Utilization_Rpt_04292022.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_04292022.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_04292022.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_04292022.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_04292022.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_04292022."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_04292022."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_04292022.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_04292022.PrescriberState, Austedo_PSRF_Utilization_Rpt_04292022."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_04292022."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_04292022.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_04292022.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_04292022.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_04292022.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_04292022."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox."Q2_2022_TS Dup Zips_b0" /*+basename(Q2_2022_TS Dup Zips),createtype(L)*/ 
(
 "zip code"
)
AS
 SELECT "Q2_2022_TS Dup Zips"."zip code"
 FROM sandbox."Q2_2022_TS Dup Zips"
 ORDER BY "Q2_2022_TS Dup Zips"."zip code"
SEGMENTED BY hash("Q2_2022_TS Dup Zips"."zip code") ALL NODES;

CREATE PROJECTION sandbox."TS_Q2-2022Call Plan_04282022_b0" /*+basename(TS_Q2-2022Call Plan_04282022),createtype(L)*/ 
(
 VEEVA_ACCOUNT_ID,
 TVCM_ID,
 IMS_ID,
 FIRST_NAME,
 LAST_NAME,
 SPECIALTY,
 TERRITORY_ID,
 ADDRESS_1,
 CITY,
 STATE,
 ZIP,
 PRODUCT_NAME,
 COMMITTED_P1,
 COMMITTED_P2,
 COMMITTED_P3,
 CALL_PLAN_TARGET
)
AS
 SELECT "TS_Q2-2022Call Plan_04282022".VEEVA_ACCOUNT_ID,
        "TS_Q2-2022Call Plan_04282022".TVCM_ID,
        "TS_Q2-2022Call Plan_04282022".IMS_ID,
        "TS_Q2-2022Call Plan_04282022".FIRST_NAME,
        "TS_Q2-2022Call Plan_04282022".LAST_NAME,
        "TS_Q2-2022Call Plan_04282022".SPECIALTY,
        "TS_Q2-2022Call Plan_04282022".TERRITORY_ID,
        "TS_Q2-2022Call Plan_04282022".ADDRESS_1,
        "TS_Q2-2022Call Plan_04282022".CITY,
        "TS_Q2-2022Call Plan_04282022".STATE,
        "TS_Q2-2022Call Plan_04282022".ZIP,
        "TS_Q2-2022Call Plan_04282022".PRODUCT_NAME,
        "TS_Q2-2022Call Plan_04282022".COMMITTED_P1,
        "TS_Q2-2022Call Plan_04282022".COMMITTED_P2,
        "TS_Q2-2022Call Plan_04282022".COMMITTED_P3,
        "TS_Q2-2022Call Plan_04282022".CALL_PLAN_TARGET
 FROM sandbox."TS_Q2-2022Call Plan_04282022"
 ORDER BY "TS_Q2-2022Call Plan_04282022".VEEVA_ACCOUNT_ID,
          "TS_Q2-2022Call Plan_04282022".TVCM_ID,
          "TS_Q2-2022Call Plan_04282022".IMS_ID,
          "TS_Q2-2022Call Plan_04282022".FIRST_NAME,
          "TS_Q2-2022Call Plan_04282022".LAST_NAME,
          "TS_Q2-2022Call Plan_04282022".SPECIALTY,
          "TS_Q2-2022Call Plan_04282022".TERRITORY_ID,
          "TS_Q2-2022Call Plan_04282022".ADDRESS_1
SEGMENTED BY hash("TS_Q2-2022Call Plan_04282022".ZIP, "TS_Q2-2022Call Plan_04282022".COMMITTED_P1, "TS_Q2-2022Call Plan_04282022".COMMITTED_P2, "TS_Q2-2022Call Plan_04282022".COMMITTED_P3, "TS_Q2-2022Call Plan_04282022".VEEVA_ACCOUNT_ID, "TS_Q2-2022Call Plan_04282022".TVCM_ID, "TS_Q2-2022Call Plan_04282022".IMS_ID, "TS_Q2-2022Call Plan_04282022".FIRST_NAME) ALL NODES;

CREATE PROJECTION sandbox.pres_rx_antiPsychMrkt_b0 /*+basename(pres_rx_antiPsychMrkt),createtype(A)*/ 
(
 ims_id,
 payer_plan_number,
 ims_client_number,
 report_frequency,
 ims_product_group,
 basket_id,
 data_date,
 date,
 sales_category,
 tvcmid,
 prescriber_first_name,
 prescriber_last_name,
 basket_name,
 basket_type,
 rollup_week,
 rollup_month,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 unnormalized_nrx_count,
 unnormalized_trx_count,
 market_name,
 payer_name,
 plan_name,
 pbm_name,
 model,
 payment_method,
 ims_specialty,
 ims_rx_type,
 ims_supplemental_data,
 ims_zip_other,
 ims_report_number_cnt,
 cnt_file_id,
 cnt_record_id,
 ims_report_number_qty,
 qty_file_id,
 qty_record_id,
 rollup_flag,
 indication,
 pbm_parent_name
)
AS
 SELECT pres_rx_antiPsychMrkt.ims_id,
        pres_rx_antiPsychMrkt.payer_plan_number,
        pres_rx_antiPsychMrkt.ims_client_number,
        pres_rx_antiPsychMrkt.report_frequency,
        pres_rx_antiPsychMrkt.ims_product_group,
        pres_rx_antiPsychMrkt.basket_id,
        pres_rx_antiPsychMrkt.data_date,
        pres_rx_antiPsychMrkt.date,
        pres_rx_antiPsychMrkt.sales_category,
        pres_rx_antiPsychMrkt.tvcmid,
        pres_rx_antiPsychMrkt.prescriber_first_name,
        pres_rx_antiPsychMrkt.prescriber_last_name,
        pres_rx_antiPsychMrkt.basket_name,
        pres_rx_antiPsychMrkt.basket_type,
        pres_rx_antiPsychMrkt.rollup_week,
        pres_rx_antiPsychMrkt.rollup_month,
        pres_rx_antiPsychMrkt.nrx_count,
        pres_rx_antiPsychMrkt.trx_count,
        pres_rx_antiPsychMrkt.nrx_quantity,
        pres_rx_antiPsychMrkt.trx_quantity,
        pres_rx_antiPsychMrkt.unnormalized_nrx_count,
        pres_rx_antiPsychMrkt.unnormalized_trx_count,
        pres_rx_antiPsychMrkt.market_name,
        pres_rx_antiPsychMrkt.payer_name,
        pres_rx_antiPsychMrkt.plan_name,
        pres_rx_antiPsychMrkt.pbm_name,
        pres_rx_antiPsychMrkt.model,
        pres_rx_antiPsychMrkt.payment_method,
        pres_rx_antiPsychMrkt.ims_specialty,
        pres_rx_antiPsychMrkt.ims_rx_type,
        pres_rx_antiPsychMrkt.ims_supplemental_data,
        pres_rx_antiPsychMrkt.ims_zip_other,
        pres_rx_antiPsychMrkt.ims_report_number_cnt,
        pres_rx_antiPsychMrkt.cnt_file_id,
        pres_rx_antiPsychMrkt.cnt_record_id,
        pres_rx_antiPsychMrkt.ims_report_number_qty,
        pres_rx_antiPsychMrkt.qty_file_id,
        pres_rx_antiPsychMrkt.qty_record_id,
        pres_rx_antiPsychMrkt.rollup_flag,
        pres_rx_antiPsychMrkt.indication,
        pres_rx_antiPsychMrkt.pbm_parent_name
 FROM sandbox.pres_rx_antiPsychMrkt
 ORDER BY pres_rx_antiPsychMrkt.rollup_flag,
          pres_rx_antiPsychMrkt.ims_rx_type,
          pres_rx_antiPsychMrkt.report_frequency,
          pres_rx_antiPsychMrkt.basket_type,
          pres_rx_antiPsychMrkt.ims_client_number,
          pres_rx_antiPsychMrkt.indication,
          pres_rx_antiPsychMrkt.ims_product_group,
          pres_rx_antiPsychMrkt.basket_id,
          pres_rx_antiPsychMrkt.ims_specialty,
          pres_rx_antiPsychMrkt.ims_zip_other,
          pres_rx_antiPsychMrkt.ims_report_number_qty,
          pres_rx_antiPsychMrkt.ims_report_number_cnt,
          pres_rx_antiPsychMrkt.tvcmid,
          pres_rx_antiPsychMrkt.payment_method,
          pres_rx_antiPsychMrkt.payer_plan_number,
          pres_rx_antiPsychMrkt.rollup_month,
          pres_rx_antiPsychMrkt.rollup_week,
          pres_rx_antiPsychMrkt.nrx_quantity,
          pres_rx_antiPsychMrkt.trx_quantity,
          pres_rx_antiPsychMrkt.nrx_count,
          pres_rx_antiPsychMrkt.trx_count,
          pres_rx_antiPsychMrkt.sales_category,
          pres_rx_antiPsychMrkt.ims_id
SEGMENTED BY hash(pres_rx_antiPsychMrkt.ims_id) ALL NODES;

CREATE PROJECTION sandbox."TSQ22022_ Revised 05172022_b0" /*+basename(TSQ22022_ Revised 05172022),createtype(L)*/ 
(
 VEEVA_ACCOUNT_ID,
 TVCM_ID,
 IMS_ID,
 FIRST_NAME,
 LAST_NAME,
 SPECIALTY,
 TERRITORY_ID,
 ADDRESS_1,
 CITY,
 STATE,
 ZIP,
 PRODUCT_NAME,
 COMMITTED_P1,
 COMMITTED_P2,
 COMMITTED_P3,
 CALL_PLAN_TARGET
)
AS
 SELECT "TSQ22022_ Revised 05172022".VEEVA_ACCOUNT_ID,
        "TSQ22022_ Revised 05172022".TVCM_ID,
        "TSQ22022_ Revised 05172022".IMS_ID,
        "TSQ22022_ Revised 05172022".FIRST_NAME,
        "TSQ22022_ Revised 05172022".LAST_NAME,
        "TSQ22022_ Revised 05172022".SPECIALTY,
        "TSQ22022_ Revised 05172022".TERRITORY_ID,
        "TSQ22022_ Revised 05172022".ADDRESS_1,
        "TSQ22022_ Revised 05172022".CITY,
        "TSQ22022_ Revised 05172022".STATE,
        "TSQ22022_ Revised 05172022".ZIP,
        "TSQ22022_ Revised 05172022".PRODUCT_NAME,
        "TSQ22022_ Revised 05172022".COMMITTED_P1,
        "TSQ22022_ Revised 05172022".COMMITTED_P2,
        "TSQ22022_ Revised 05172022".COMMITTED_P3,
        "TSQ22022_ Revised 05172022".CALL_PLAN_TARGET
 FROM sandbox."TSQ22022_ Revised 05172022"
 ORDER BY "TSQ22022_ Revised 05172022".VEEVA_ACCOUNT_ID,
          "TSQ22022_ Revised 05172022".TVCM_ID,
          "TSQ22022_ Revised 05172022".IMS_ID,
          "TSQ22022_ Revised 05172022".FIRST_NAME,
          "TSQ22022_ Revised 05172022".LAST_NAME,
          "TSQ22022_ Revised 05172022".SPECIALTY,
          "TSQ22022_ Revised 05172022".TERRITORY_ID,
          "TSQ22022_ Revised 05172022".ADDRESS_1
SEGMENTED BY hash("TSQ22022_ Revised 05172022".TVCM_ID, "TSQ22022_ Revised 05172022".IMS_ID, "TSQ22022_ Revised 05172022".ZIP, "TSQ22022_ Revised 05172022".COMMITTED_P1, "TSQ22022_ Revised 05172022".COMMITTED_P2, "TSQ22022_ Revised 05172022".COMMITTED_P3, "TSQ22022_ Revised 05172022".VEEVA_ACCOUNT_ID, "TSQ22022_ Revised 05172022".FIRST_NAME) ALL NODES;

CREATE PROJECTION sandbox.tmp_hcp_universe_b0 /*+basename(tmp_hcp_universe),createtype(A)*/ 
(
 customer_id,
 sales_force_id,
 current_geography_id,
 product_id,
 target_status,
 week_ending,
 week_bucket
)
AS
 SELECT tmp_hcp_universe.customer_id,
        tmp_hcp_universe.sales_force_id,
        tmp_hcp_universe.current_geography_id,
        tmp_hcp_universe.product_id,
        tmp_hcp_universe.target_status,
        tmp_hcp_universe.week_ending,
        tmp_hcp_universe.week_bucket
 FROM sandbox.tmp_hcp_universe
 ORDER BY tmp_hcp_universe.week_ending
SEGMENTED BY hash(tmp_hcp_universe.customer_id, tmp_hcp_universe.sales_force_id, tmp_hcp_universe.current_geography_id, tmp_hcp_universe.product_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_hcp_dimentions_b0 /*+basename(tmp_hcp_dimentions),createtype(A)*/ 
(
 customer_id,
 sales_force_id,
 territory_id,
 brand_id,
 target_status,
 partner_target_status_flag,
 week_ending,
 week_bucket,
 brand_name,
 market_id,
 market_name,
 decile,
 specialty
)
AS
 SELECT tmp_hcp_dimentions.customer_id,
        tmp_hcp_dimentions.sales_force_id,
        tmp_hcp_dimentions.territory_id,
        tmp_hcp_dimentions.brand_id,
        tmp_hcp_dimentions.target_status,
        tmp_hcp_dimentions.partner_target_status_flag,
        tmp_hcp_dimentions.week_ending,
        tmp_hcp_dimentions.week_bucket,
        tmp_hcp_dimentions.brand_name,
        tmp_hcp_dimentions.market_id,
        tmp_hcp_dimentions.market_name,
        tmp_hcp_dimentions.decile,
        tmp_hcp_dimentions.specialty
 FROM sandbox.tmp_hcp_dimentions
 ORDER BY tmp_hcp_dimentions.customer_id,
          tmp_hcp_dimentions.sales_force_id,
          tmp_hcp_dimentions.territory_id,
          tmp_hcp_dimentions.brand_id,
          tmp_hcp_dimentions.target_status,
          tmp_hcp_dimentions.partner_target_status_flag,
          tmp_hcp_dimentions.week_ending,
          tmp_hcp_dimentions.week_bucket,
          tmp_hcp_dimentions.brand_name,
          tmp_hcp_dimentions.market_id,
          tmp_hcp_dimentions.market_name,
          tmp_hcp_dimentions.decile,
          tmp_hcp_dimentions.specialty
SEGMENTED BY hash(tmp_hcp_dimentions.customer_id) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt052722_super /*+basename(Austedo_PSRF_Utilization_Rpt052722),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt052722 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00.PrescriberState, Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.tmp_ho_hcp_universe_b0 /*+basename(tmp_ho_hcp_universe),createtype(A)*/ 
(
 customer_id,
 product_id,
 target_status,
 week_ending,
 week_bucket
)
AS
 SELECT tmp_ho_hcp_universe.customer_id,
        tmp_ho_hcp_universe.product_id,
        tmp_ho_hcp_universe.target_status,
        tmp_ho_hcp_universe.week_ending,
        tmp_ho_hcp_universe.week_bucket
 FROM sandbox.tmp_ho_hcp_universe
 ORDER BY tmp_ho_hcp_universe.week_ending
SEGMENTED BY hash(tmp_ho_hcp_universe.product_id, tmp_ho_hcp_universe.target_status, tmp_ho_hcp_universe.week_ending, tmp_ho_hcp_universe.week_bucket, tmp_ho_hcp_universe.customer_id) ALL NODES;

CREATE PROJECTION sandbox.TH_CALL_ACTVITY_00_b0 /*+basename(TH_CALL_ACTVITY_00),createtype(L)*/ 
(
 sales_force_id,
 call_id,
 veeva_account_id,
 ims_id,
 ims_outlet_id,
 customer_type,
 first_name,
 last_name,
 call_type,
 legacy_call_type,
 ceph_id,
 dea_num,
 rep_id,
 rep_first_name,
 rep_last_name,
 territory_number,
 zip_on_call,
 call_date,
 submit_date,
 attendees,
 attendee_type,
 area_number,
 region_number,
 tvcmid,
 call_recordtype,
 call_duration,
 call_datetime,
 call_timezone,
 how_executed,
 remote_meeting_id,
 parent_call_id,
 is_parent_call,
 t21s10_austedo_indication,
 Outcomes_from_Visit,
 Visit_Trigger,
 Visit_Trigger_Date,
 call_name,
 veeva_address_id,
 account_name,
 address,
 city,
 state,
 zip_code,
 npi
)
AS
 SELECT TH_CALL_ACTVITY_00.sales_force_id,
        TH_CALL_ACTVITY_00.call_id,
        TH_CALL_ACTVITY_00.veeva_account_id,
        TH_CALL_ACTVITY_00.ims_id,
        TH_CALL_ACTVITY_00.ims_outlet_id,
        TH_CALL_ACTVITY_00.customer_type,
        TH_CALL_ACTVITY_00.first_name,
        TH_CALL_ACTVITY_00.last_name,
        TH_CALL_ACTVITY_00.call_type,
        TH_CALL_ACTVITY_00.legacy_call_type,
        TH_CALL_ACTVITY_00.ceph_id,
        TH_CALL_ACTVITY_00.dea_num,
        TH_CALL_ACTVITY_00.rep_id,
        TH_CALL_ACTVITY_00.rep_first_name,
        TH_CALL_ACTVITY_00.rep_last_name,
        TH_CALL_ACTVITY_00.territory_number,
        TH_CALL_ACTVITY_00.zip_on_call,
        TH_CALL_ACTVITY_00.call_date,
        TH_CALL_ACTVITY_00.submit_date,
        TH_CALL_ACTVITY_00.attendees,
        TH_CALL_ACTVITY_00.attendee_type,
        TH_CALL_ACTVITY_00.area_number,
        TH_CALL_ACTVITY_00.region_number,
        TH_CALL_ACTVITY_00.tvcmid,
        TH_CALL_ACTVITY_00.call_recordtype,
        TH_CALL_ACTVITY_00.call_duration,
        TH_CALL_ACTVITY_00.call_datetime,
        TH_CALL_ACTVITY_00.call_timezone,
        TH_CALL_ACTVITY_00.how_executed,
        TH_CALL_ACTVITY_00.remote_meeting_id,
        TH_CALL_ACTVITY_00.parent_call_id,
        TH_CALL_ACTVITY_00.is_parent_call,
        TH_CALL_ACTVITY_00.t21s10_austedo_indication,
        TH_CALL_ACTVITY_00.Outcomes_from_Visit,
        TH_CALL_ACTVITY_00.Visit_Trigger,
        TH_CALL_ACTVITY_00.Visit_Trigger_Date,
        TH_CALL_ACTVITY_00.call_name,
        TH_CALL_ACTVITY_00.veeva_address_id,
        TH_CALL_ACTVITY_00.account_name,
        TH_CALL_ACTVITY_00.address,
        TH_CALL_ACTVITY_00.city,
        TH_CALL_ACTVITY_00.state,
        TH_CALL_ACTVITY_00.zip_code,
        TH_CALL_ACTVITY_00.npi
 FROM sandbox.TH_CALL_ACTVITY_00
 ORDER BY TH_CALL_ACTVITY_00.sales_force_id,
          TH_CALL_ACTVITY_00.call_id,
          TH_CALL_ACTVITY_00.veeva_account_id,
          TH_CALL_ACTVITY_00.ims_id,
          TH_CALL_ACTVITY_00.ims_outlet_id,
          TH_CALL_ACTVITY_00.customer_type,
          TH_CALL_ACTVITY_00.first_name,
          TH_CALL_ACTVITY_00.last_name
SEGMENTED BY hash(TH_CALL_ACTVITY_00.call_date, TH_CALL_ACTVITY_00.submit_date, TH_CALL_ACTVITY_00.attendees, TH_CALL_ACTVITY_00.call_duration, TH_CALL_ACTVITY_00.call_datetime, TH_CALL_ACTVITY_00.Visit_Trigger_Date, TH_CALL_ACTVITY_00.zip_code, TH_CALL_ACTVITY_00.zip_on_call) ALL NODES;

CREATE PROJECTION sandbox.ddd_md_b0 /*+basename(ddd_md),createtype(A)*/ 
(
 onc_account_demo_id,
 alt_seq_num,
 outlet_name,
 outlet_code,
 subcategory_code,
 outlet_zip,
 ims_client_num,
 ims_report_num,
 report_frequency,
 ims_product_code,
 basket_id,
 basket_name,
 data_date,
 date,
 rollup_week,
 rollup_month,
 comp_month,
 quantity,
 dollars,
 file_id,
 record_id,
 sales_force_id,
 rollup_445_month,
 tvcmid,
 ims_facility_number,
 ims_prescriber_number,
 facility_tvcmid,
 prescriber_tvcmid,
 outlet_tvcmid,
 normalized_quantity
)
AS
 SELECT ddd_md.onc_account_demo_id,
        ddd_md.alt_seq_num,
        ddd_md.outlet_name,
        ddd_md.outlet_code,
        ddd_md.subcategory_code,
        ddd_md.outlet_zip,
        ddd_md.ims_client_num,
        ddd_md.ims_report_num,
        ddd_md.report_frequency,
        ddd_md.ims_product_code,
        ddd_md.basket_id,
        ddd_md.basket_name,
        ddd_md.data_date,
        ddd_md.date,
        ddd_md.rollup_week,
        ddd_md.rollup_month,
        ddd_md.comp_month,
        ddd_md.quantity,
        ddd_md.dollars,
        ddd_md.file_id,
        ddd_md.record_id,
        ddd_md.sales_force_id,
        ddd_md.rollup_445_month,
        ddd_md.tvcmid,
        ddd_md.ims_facility_number,
        ddd_md.ims_prescriber_number,
        ddd_md.facility_tvcmid,
        ddd_md.prescriber_tvcmid,
        ddd_md.outlet_tvcmid,
        ddd_md.normalized_quantity
 FROM sandbox.ddd_md
 ORDER BY ddd_md.onc_account_demo_id,
          ddd_md.alt_seq_num,
          ddd_md.outlet_name,
          ddd_md.outlet_code,
          ddd_md.subcategory_code,
          ddd_md.outlet_zip,
          ddd_md.ims_client_num,
          ddd_md.ims_report_num
SEGMENTED BY hash(ddd_md.onc_account_demo_id, ddd_md.subcategory_code, ddd_md.outlet_zip, ddd_md.ims_client_num, ddd_md.ims_report_num, ddd_md.basket_id, ddd_md.data_date, ddd_md.date) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_may2022_b0 /*+basename(ic_rx_may2022),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_may2022.ic_data_month,
        ic_rx_may2022.basket_name,
        ic_rx_may2022.sales_force_id,
        ic_rx_may2022.area_number,
        ic_rx_may2022.region_number,
        ic_rx_may2022.territory_number,
        ic_rx_may2022.ims_id,
        ic_rx_may2022.tvcmid,
        ic_rx_may2022.outlet_code,
        ic_rx_may2022.va_station_number,
        ic_rx_may2022.dnc_flag,
        ic_rx_may2022.dnp_flag,
        ic_rx_may2022.rollup_month,
        ic_rx_may2022.month_bucket,
        ic_rx_may2022.nrx_count,
        ic_rx_may2022.trx_count,
        ic_rx_may2022.nrx_quantity,
        ic_rx_may2022.trx_quantity,
        ic_rx_may2022.include_in_nation_rollup,
        ic_rx_may2022.include_in_area_rollup,
        ic_rx_may2022.include_in_region_rollup,
        ic_rx_may2022.join_key,
        ic_rx_may2022.row_source,
        ic_rx_may2022.row_create_date,
        ic_rx_may2022.indication,
        ic_rx_may2022.outlet_dea,
        ic_rx_may2022.payer_plan_number,
        ic_rx_may2022.payment_method
 FROM sandbox.ic_rx_may2022
 ORDER BY ic_rx_may2022.ic_data_month,
          ic_rx_may2022.basket_name,
          ic_rx_may2022.sales_force_id,
          ic_rx_may2022.area_number,
          ic_rx_may2022.region_number,
          ic_rx_may2022.territory_number,
          ic_rx_may2022.ims_id,
          ic_rx_may2022.tvcmid
SEGMENTED BY hash(ic_rx_may2022.ic_data_month, ic_rx_may2022.tvcmid, ic_rx_may2022.outlet_code, ic_rx_may2022.dnc_flag, ic_rx_may2022.dnp_flag, ic_rx_may2022.rollup_month, ic_rx_may2022.month_bucket, ic_rx_may2022.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_may2022_b0 /*+basename(ic_demo_may2022),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_may2022.ic_data_month,
        ic_demo_may2022.sales_force_id,
        ic_demo_may2022.area_number,
        ic_demo_may2022.region_number,
        ic_demo_may2022.territory_number,
        ic_demo_may2022.ims_id,
        ic_demo_may2022.tvcmid,
        ic_demo_may2022.outlet_code,
        ic_demo_may2022.va_station_number,
        ic_demo_may2022.specialty,
        ic_demo_may2022.last_name,
        ic_demo_may2022.first_name,
        ic_demo_may2022.mid_name,
        ic_demo_may2022.address_1,
        ic_demo_may2022.address_2,
        ic_demo_may2022.address_3,
        ic_demo_may2022.city,
        ic_demo_may2022.state,
        ic_demo_may2022.zip,
        ic_demo_may2022.address_source,
        ic_demo_may2022.pdrp_flag,
        ic_demo_may2022.pdrp_date,
        ic_demo_may2022.np_pa_flag,
        ic_demo_may2022.no_spend,
        ic_demo_may2022.ama_no_contact_flag,
        ic_demo_may2022.join_key,
        ic_demo_may2022.row_source,
        ic_demo_may2022.row_create_date,
        ic_demo_may2022.outlet_dea,
        ic_demo_may2022.secondary_specialty
 FROM sandbox.ic_demo_may2022
 ORDER BY ic_demo_may2022.ic_data_month,
          ic_demo_may2022.sales_force_id,
          ic_demo_may2022.area_number,
          ic_demo_may2022.region_number,
          ic_demo_may2022.territory_number,
          ic_demo_may2022.ims_id,
          ic_demo_may2022.tvcmid,
          ic_demo_may2022.outlet_code
SEGMENTED BY hash(ic_demo_may2022.ic_data_month, ic_demo_may2022.tvcmid, ic_demo_may2022.outlet_code, ic_demo_may2022.mid_name, ic_demo_may2022.state, ic_demo_may2022.zip, ic_demo_may2022.pdrp_flag, ic_demo_may2022.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.Genoa_Roster_Current2_b0 /*+basename(Genoa_Roster_Current2),createtype(L)*/ 
(
 Pharmacy_Status,
 Genoa_Site__,
 Street_Address_1,
 Street_Address_2,
 City,
 State,
 ZIP_Code,
 Main_Phone,
 Fax,
 DEA,
 DEA_Expiration,
 NPI,
 NCPDP,
 State_Issuing_License,
 Opening_Date,
 Location_Notes,
 Note_Effective_Date,
 Pharmacy_Contact
)
AS
 SELECT Genoa_Roster_Current2.Pharmacy_Status,
        Genoa_Roster_Current2.Genoa_Site__,
        Genoa_Roster_Current2.Street_Address_1,
        Genoa_Roster_Current2.Street_Address_2,
        Genoa_Roster_Current2.City,
        Genoa_Roster_Current2.State,
        Genoa_Roster_Current2.ZIP_Code,
        Genoa_Roster_Current2.Main_Phone,
        Genoa_Roster_Current2.Fax,
        Genoa_Roster_Current2.DEA,
        Genoa_Roster_Current2.DEA_Expiration,
        Genoa_Roster_Current2.NPI,
        Genoa_Roster_Current2.NCPDP,
        Genoa_Roster_Current2.State_Issuing_License,
        Genoa_Roster_Current2.Opening_Date,
        Genoa_Roster_Current2.Location_Notes,
        Genoa_Roster_Current2.Note_Effective_Date,
        Genoa_Roster_Current2.Pharmacy_Contact
 FROM sandbox.Genoa_Roster_Current2
 ORDER BY Genoa_Roster_Current2.Pharmacy_Status,
          Genoa_Roster_Current2.Genoa_Site__,
          Genoa_Roster_Current2.Street_Address_1,
          Genoa_Roster_Current2.Street_Address_2,
          Genoa_Roster_Current2.City,
          Genoa_Roster_Current2.State,
          Genoa_Roster_Current2.ZIP_Code,
          Genoa_Roster_Current2.Main_Phone
SEGMENTED BY hash(Genoa_Roster_Current2.Pharmacy_Status, Genoa_Roster_Current2.Genoa_Site__, Genoa_Roster_Current2.State, Genoa_Roster_Current2.DEA_Expiration, Genoa_Roster_Current2.NCPDP, Genoa_Roster_Current2.State_Issuing_License, Genoa_Roster_Current2.Opening_Date, Genoa_Roster_Current2.Location_Notes) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_00_b0 /*+basename(Austedo_PSRF_Utilization_Rpt_00),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00.PrescriberState, Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.suggestion_report_b0 /*+basename(suggestion_report),createtype(A)*/ 
(
 territory_number,
 ownerid,
 account_vod__c,
 posted_date_vod__c,
 expiration_date_vod__c,
 reason_vod__c,
 product,
 rule,
 activity_execution_type_vod__c,
 dismiss1,
 dismiss2,
 dismiss3,
 dismiss4,
 sent_email_vod__c,
 days_since_last_call,
 first_call_date,
 days_since_suggestion,
 rep_name
)
AS
 SELECT suggestion_report.territory_number,
        suggestion_report.ownerid,
        suggestion_report.account_vod__c,
        suggestion_report.posted_date_vod__c,
        suggestion_report.expiration_date_vod__c,
        suggestion_report.reason_vod__c,
        suggestion_report.product,
        suggestion_report.rule,
        suggestion_report.activity_execution_type_vod__c,
        suggestion_report.dismiss1,
        suggestion_report.dismiss2,
        suggestion_report.dismiss3,
        suggestion_report.dismiss4,
        suggestion_report.sent_email_vod__c,
        suggestion_report.days_since_last_call,
        suggestion_report.first_call_date,
        suggestion_report.days_since_suggestion,
        suggestion_report.rep_name
 FROM sandbox.suggestion_report
 ORDER BY suggestion_report.territory_number,
          suggestion_report.ownerid,
          suggestion_report.account_vod__c,
          suggestion_report.posted_date_vod__c,
          suggestion_report.expiration_date_vod__c,
          suggestion_report.reason_vod__c,
          suggestion_report.product,
          suggestion_report.rule
SEGMENTED BY hash(suggestion_report.ownerid) ALL NODES;

CREATE PROJECTION sandbox.psrf_util_detailed_report_b0 /*+basename(psrf_util_detailed_report),createtype(L)*/ 
(
 DATA_Source,
 Patient_ID,
 HCP_NPI,
 Product,
 PSRF_Date,
 HCP_Signature_DATE,
 Patient_Authorization_Date,
 Script_triaged_to_Phmcy_Date,
 Ship_Date,
 Therapy_Start_Date,
 PAP,
 Prescriber_Name,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 Field_1,
 Field_2,
 Field_3,
 Field_4,
 Field_5
)
AS
 SELECT psrf_util_detailed_report.DATA_Source,
        psrf_util_detailed_report.Patient_ID,
        psrf_util_detailed_report.HCP_NPI,
        psrf_util_detailed_report.Product,
        psrf_util_detailed_report.PSRF_Date,
        psrf_util_detailed_report.HCP_Signature_DATE,
        psrf_util_detailed_report.Patient_Authorization_Date,
        psrf_util_detailed_report.Script_triaged_to_Phmcy_Date,
        psrf_util_detailed_report.Ship_Date,
        psrf_util_detailed_report.Therapy_Start_Date,
        psrf_util_detailed_report.PAP,
        psrf_util_detailed_report.Prescriber_Name,
        psrf_util_detailed_report.PrescriberCity,
        psrf_util_detailed_report.PrescriberState,
        psrf_util_detailed_report.PrescriberZip,
        psrf_util_detailed_report.Field_1,
        psrf_util_detailed_report.Field_2,
        psrf_util_detailed_report.Field_3,
        psrf_util_detailed_report.Field_4,
        psrf_util_detailed_report.Field_5
 FROM sandbox.psrf_util_detailed_report
 ORDER BY psrf_util_detailed_report.DATA_Source,
          psrf_util_detailed_report.Patient_ID,
          psrf_util_detailed_report.HCP_NPI,
          psrf_util_detailed_report.Product,
          psrf_util_detailed_report.PSRF_Date,
          psrf_util_detailed_report.HCP_Signature_DATE,
          psrf_util_detailed_report.Patient_Authorization_Date,
          psrf_util_detailed_report.Script_triaged_to_Phmcy_Date
SEGMENTED BY hash(psrf_util_detailed_report.PAP, psrf_util_detailed_report.PrescriberZip, psrf_util_detailed_report.DATA_Source, psrf_util_detailed_report.HCP_NPI, psrf_util_detailed_report.PrescriberState, psrf_util_detailed_report.Patient_ID, psrf_util_detailed_report.Product, psrf_util_detailed_report.PrescriberCity) ALL NODES;

CREATE PROJECTION sandbox.customer_attributes_b0 /*+basename(customer_attributes),createtype(P)*/ 
(
 customer_id,
 tvcmid,
 sales_force_id,
 product_id,
 attribute_type,
 attribute_value,
 attribute_effective_start_date,
 attribute_effective_end_date
)
AS
 SELECT customer_attributes.customer_id,
        customer_attributes.tvcmid,
        customer_attributes.sales_force_id,
        customer_attributes.product_id,
        customer_attributes.attribute_type,
        customer_attributes.attribute_value,
        customer_attributes.attribute_effective_start_date,
        customer_attributes.attribute_effective_end_date
 FROM sandbox.customer_attributes
 ORDER BY customer_attributes.sales_force_id,
          customer_attributes.customer_id,
          customer_attributes.tvcmid
SEGMENTED BY hash(customer_attributes.tvcmid, customer_attributes.sales_force_id, customer_attributes.product_id, customer_attributes.attribute_effective_start_date, customer_attributes.attribute_effective_end_date, customer_attributes.customer_id, customer_attributes.attribute_type, customer_attributes.attribute_value) ALL NODES;

CREATE PROJECTION sandbox.payer_mapping_super /*+basename(payer_mapping),createtype(P)*/ 
(
 payer_plan_id,
 pbm_id,
 pbm_name,
 payer_id,
 payer_name,
 plan_id,
 plan_name,
 model_id,
 method_of_payment
)
AS
 SELECT payer_mapping.payer_plan_id,
        payer_mapping.pbm_id,
        payer_mapping.pbm_name,
        payer_mapping.payer_id,
        payer_mapping.payer_name,
        payer_mapping.plan_id,
        payer_mapping.plan_name,
        payer_mapping.model_id,
        payer_mapping.method_of_payment
 FROM sandbox.payer_mapping
 ORDER BY payer_mapping.payer_plan_id
UNSEGMENTED ALL NODES;

CREATE PROJECTION sandbox.activity_plan_super /*+basename(activity_plan),createtype(P)*/ 
(
 customer_id,
 tvcmid,
 product_id,
 sales_force_id,
 territory_id,
 time_period,
 planned_p1_calls,
 planned_p2_calls,
 planned_p3_calls,
 planned_samples,
 target_status_flag
)
AS
 SELECT activity_plan.customer_id,
        activity_plan.tvcmid,
        activity_plan.product_id,
        activity_plan.sales_force_id,
        activity_plan.territory_id,
        activity_plan.time_period,
        activity_plan.planned_p1_calls,
        activity_plan.planned_p2_calls,
        activity_plan.planned_p3_calls,
        activity_plan.planned_samples,
        activity_plan.target_status_flag
 FROM sandbox.activity_plan
 ORDER BY activity_plan.product_id
UNSEGMENTED ALL NODES;

CREATE PROJECTION sandbox.reporting_rollup_month_super /*+basename(reporting_rollup_month),createtype(P)*/ 
(
 rollup_month,
 sales_month_bucket,
 activity_month_bucket
)
AS
 SELECT reporting_rollup_month.rollup_month,
        reporting_rollup_month.sales_month_bucket,
        reporting_rollup_month.activity_month_bucket
 FROM sandbox.reporting_rollup_month
 ORDER BY reporting_rollup_month.rollup_month
UNSEGMENTED ALL NODES;

CREATE PROJECTION sandbox.monthly_prescriber_sales_summary_b0 /*+basename(monthly_prescriber_sales_summary),createtype(P)*/ 
(
 sales_force_id,
 customer_id,
 tvcmid,
 ims_id,
 period_type,
 period,
 month_ending,
 month_bucket,
 market_id,
 brand_id,
 payer_id,
 payer_plan_id,
 method_of_payment,
 hcp_restriction_flag,
 segment,
 decile,
 hcp_payer_vol_rank,
 hcp_plan_vol_rank,
 product_vol_trx_count,
 prev_prod_vol_trx_count,
 product_vol_nrx_count,
 prev_prod_vol_nrx_count,
 market_vol_trx_count,
 prev_market_vol_trx_count,
 market_vol_nrx_count,
 prev_market_vol_nrx_count,
 samples,
 details_p1,
 details_p2,
 details_p3
)
AS
 SELECT monthly_prescriber_sales_summary.sales_force_id,
        monthly_prescriber_sales_summary.customer_id,
        monthly_prescriber_sales_summary.tvcmid,
        monthly_prescriber_sales_summary.ims_id,
        monthly_prescriber_sales_summary.period_type,
        monthly_prescriber_sales_summary.period,
        monthly_prescriber_sales_summary.month_ending,
        monthly_prescriber_sales_summary.month_bucket,
        monthly_prescriber_sales_summary.market_id,
        monthly_prescriber_sales_summary.brand_id,
        monthly_prescriber_sales_summary.payer_id,
        monthly_prescriber_sales_summary.payer_plan_id,
        monthly_prescriber_sales_summary.method_of_payment,
        monthly_prescriber_sales_summary.hcp_restriction_flag,
        monthly_prescriber_sales_summary.segment,
        monthly_prescriber_sales_summary.decile,
        monthly_prescriber_sales_summary.hcp_payer_vol_rank,
        monthly_prescriber_sales_summary.hcp_plan_vol_rank,
        monthly_prescriber_sales_summary.product_vol_trx_count,
        monthly_prescriber_sales_summary.prev_prod_vol_trx_count,
        monthly_prescriber_sales_summary.product_vol_nrx_count,
        monthly_prescriber_sales_summary.prev_prod_vol_nrx_count,
        monthly_prescriber_sales_summary.market_vol_trx_count,
        monthly_prescriber_sales_summary.prev_market_vol_trx_count,
        monthly_prescriber_sales_summary.market_vol_nrx_count,
        monthly_prescriber_sales_summary.prev_market_vol_nrx_count,
        monthly_prescriber_sales_summary.samples,
        monthly_prescriber_sales_summary.details_p1,
        monthly_prescriber_sales_summary.details_p2,
        monthly_prescriber_sales_summary.details_p3
 FROM sandbox.monthly_prescriber_sales_summary
 ORDER BY monthly_prescriber_sales_summary.sales_force_id,
          monthly_prescriber_sales_summary.customer_id,
          monthly_prescriber_sales_summary.tvcmid,
          monthly_prescriber_sales_summary.ims_id,
          monthly_prescriber_sales_summary.period_type,
          monthly_prescriber_sales_summary.period,
          monthly_prescriber_sales_summary.month_bucket,
          monthly_prescriber_sales_summary.market_id,
          monthly_prescriber_sales_summary.brand_id,
          monthly_prescriber_sales_summary.payer_id,
          monthly_prescriber_sales_summary.payer_plan_id,
          monthly_prescriber_sales_summary.method_of_payment,
          monthly_prescriber_sales_summary.hcp_restriction_flag
SEGMENTED BY hash(monthly_prescriber_sales_summary.sales_force_id, monthly_prescriber_sales_summary.customer_id, monthly_prescriber_sales_summary.tvcmid, monthly_prescriber_sales_summary.ims_id, monthly_prescriber_sales_summary.month_ending, monthly_prescriber_sales_summary.month_bucket, monthly_prescriber_sales_summary.market_id, monthly_prescriber_sales_summary.brand_id, monthly_prescriber_sales_summary.payer_plan_id, monthly_prescriber_sales_summary.method_of_payment) ALL NODES;

CREATE PROJECTION sandbox.tp_psrf_for_datamart_v1_b0 /*+basename(tp_psrf_for_datamart_v1),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT tp_psrf_for_datamart_v1.sales_force_id,
        tp_psrf_for_datamart_v1.area_number,
        tp_psrf_for_datamart_v1.region_number,
        tp_psrf_for_datamart_v1.territory_number,
        tp_psrf_for_datamart_v1.area_name,
        tp_psrf_for_datamart_v1.region_name,
        tp_psrf_for_datamart_v1.territory_name,
        tp_psrf_for_datamart_v1.PrescriberName,
        tp_psrf_for_datamart_v1.psrf_city,
        tp_psrf_for_datamart_v1.psrf_state,
        tp_psrf_for_datamart_v1.psrf_zip,
        tp_psrf_for_datamart_v1.psrf_npi,
        tp_psrf_for_datamart_v1.demo_first_name,
        tp_psrf_for_datamart_v1.demo_last_name,
        tp_psrf_for_datamart_v1.demo_city,
        tp_psrf_for_datamart_v1.demo_state,
        tp_psrf_for_datamart_v1.demo_zip,
        tp_psrf_for_datamart_v1.demo_npi,
        tp_psrf_for_datamart_v1.Current_Week_PSRFs,
        tp_psrf_for_datamart_v1.Current_Month_PSRFs,
        tp_psrf_for_datamart_v1.HCP_Signature_Yes,
        tp_psrf_for_datamart_v1.HCP_Signature_No,
        tp_psrf_for_datamart_v1.Patient_Auth_Yes,
        tp_psrf_for_datamart_v1.Patient_Auth_No,
        tp_psrf_for_datamart_v1.YTD_PSRFs,
        tp_psrf_for_datamart_v1.file_id,
        tp_psrf_for_datamart_v1.row_source
 FROM sandbox.tp_psrf_for_datamart_v1
 ORDER BY tp_psrf_for_datamart_v1.sales_force_id,
          tp_psrf_for_datamart_v1.area_number,
          tp_psrf_for_datamart_v1.region_number,
          tp_psrf_for_datamart_v1.territory_number,
          tp_psrf_for_datamart_v1.area_name,
          tp_psrf_for_datamart_v1.region_name,
          tp_psrf_for_datamart_v1.territory_name,
          tp_psrf_for_datamart_v1.PrescriberName,
          tp_psrf_for_datamart_v1.psrf_city,
          tp_psrf_for_datamart_v1.psrf_state,
          tp_psrf_for_datamart_v1.psrf_zip,
          tp_psrf_for_datamart_v1.psrf_npi,
          tp_psrf_for_datamart_v1.demo_first_name,
          tp_psrf_for_datamart_v1.demo_last_name,
          tp_psrf_for_datamart_v1.demo_city,
          tp_psrf_for_datamart_v1.demo_state,
          tp_psrf_for_datamart_v1.demo_zip,
          tp_psrf_for_datamart_v1.demo_npi,
          tp_psrf_for_datamart_v1.Current_Week_PSRFs,
          tp_psrf_for_datamart_v1.Current_Month_PSRFs,
          tp_psrf_for_datamart_v1.HCP_Signature_Yes,
          tp_psrf_for_datamart_v1.HCP_Signature_No,
          tp_psrf_for_datamart_v1.Patient_Auth_Yes,
          tp_psrf_for_datamart_v1.Patient_Auth_No,
          tp_psrf_for_datamart_v1.YTD_PSRFs,
          tp_psrf_for_datamart_v1.file_id
SEGMENTED BY hash(tp_psrf_for_datamart_v1.territory_number) ALL NODES;

CREATE PROJECTION sandbox.tp_psrf_for_datamart_v2_b0 /*+basename(tp_psrf_for_datamart_v2),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT tp_psrf_for_datamart_v2.sales_force_id,
        tp_psrf_for_datamart_v2.area_number,
        tp_psrf_for_datamart_v2.region_number,
        tp_psrf_for_datamart_v2.territory_number,
        tp_psrf_for_datamart_v2.area_name,
        tp_psrf_for_datamart_v2.region_name,
        tp_psrf_for_datamart_v2.territory_name,
        tp_psrf_for_datamart_v2.PrescriberName,
        tp_psrf_for_datamart_v2.psrf_city,
        tp_psrf_for_datamart_v2.psrf_state,
        tp_psrf_for_datamart_v2.psrf_zip,
        tp_psrf_for_datamart_v2.psrf_npi,
        tp_psrf_for_datamart_v2.demo_first_name,
        tp_psrf_for_datamart_v2.demo_last_name,
        tp_psrf_for_datamart_v2.demo_city,
        tp_psrf_for_datamart_v2.demo_state,
        tp_psrf_for_datamart_v2.demo_zip,
        tp_psrf_for_datamart_v2.demo_npi,
        tp_psrf_for_datamart_v2.Current_Week_PSRFs,
        tp_psrf_for_datamart_v2.Current_Month_PSRFs,
        tp_psrf_for_datamart_v2.HCP_Signature_Yes,
        tp_psrf_for_datamart_v2.HCP_Signature_No,
        tp_psrf_for_datamart_v2.Patient_Auth_Yes,
        tp_psrf_for_datamart_v2.Patient_Auth_No,
        tp_psrf_for_datamart_v2.YTD_PSRFs,
        tp_psrf_for_datamart_v2.file_id,
        tp_psrf_for_datamart_v2.row_source
 FROM sandbox.tp_psrf_for_datamart_v2
 ORDER BY tp_psrf_for_datamart_v2.sales_force_id,
          tp_psrf_for_datamart_v2.area_number,
          tp_psrf_for_datamart_v2.region_number,
          tp_psrf_for_datamart_v2.territory_number,
          tp_psrf_for_datamart_v2.area_name,
          tp_psrf_for_datamart_v2.region_name,
          tp_psrf_for_datamart_v2.territory_name,
          tp_psrf_for_datamart_v2.PrescriberName,
          tp_psrf_for_datamart_v2.psrf_city,
          tp_psrf_for_datamart_v2.psrf_state,
          tp_psrf_for_datamart_v2.psrf_zip,
          tp_psrf_for_datamart_v2.psrf_npi,
          tp_psrf_for_datamart_v2.demo_first_name,
          tp_psrf_for_datamart_v2.demo_last_name,
          tp_psrf_for_datamart_v2.demo_city,
          tp_psrf_for_datamart_v2.demo_state,
          tp_psrf_for_datamart_v2.demo_zip,
          tp_psrf_for_datamart_v2.demo_npi,
          tp_psrf_for_datamart_v2.Current_Week_PSRFs,
          tp_psrf_for_datamart_v2.Current_Month_PSRFs,
          tp_psrf_for_datamart_v2.HCP_Signature_Yes,
          tp_psrf_for_datamart_v2.HCP_Signature_No,
          tp_psrf_for_datamart_v2.Patient_Auth_Yes,
          tp_psrf_for_datamart_v2.Patient_Auth_No,
          tp_psrf_for_datamart_v2.YTD_PSRFs,
          tp_psrf_for_datamart_v2.file_id
SEGMENTED BY hash(tp_psrf_for_datamart_v2.sales_force_id, tp_psrf_for_datamart_v2.area_number, tp_psrf_for_datamart_v2.region_number, tp_psrf_for_datamart_v2.territory_number, tp_psrf_for_datamart_v2.area_name, tp_psrf_for_datamart_v2.region_name, tp_psrf_for_datamart_v2.territory_name, tp_psrf_for_datamart_v2.PrescriberName, tp_psrf_for_datamart_v2.psrf_city, tp_psrf_for_datamart_v2.psrf_state, tp_psrf_for_datamart_v2.psrf_zip, tp_psrf_for_datamart_v2.psrf_npi, tp_psrf_for_datamart_v2.demo_first_name, tp_psrf_for_datamart_v2.demo_last_name, tp_psrf_for_datamart_v2.demo_city, tp_psrf_for_datamart_v2.demo_state, tp_psrf_for_datamart_v2.demo_zip, tp_psrf_for_datamart_v2.demo_npi, tp_psrf_for_datamart_v2.Current_Week_PSRFs, tp_psrf_for_datamart_v2.Current_Month_PSRFs, tp_psrf_for_datamart_v2.HCP_Signature_Yes, tp_psrf_for_datamart_v2.HCP_Signature_No, tp_psrf_for_datamart_v2.Patient_Auth_Yes, tp_psrf_for_datamart_v2.Patient_Auth_No, tp_psrf_for_datamart_v2.YTD_PSRFs, tp_psrf_for_datamart_v2.file_id) ALL NODES;

CREATE PROJECTION sandbox.tp_psrf_for_datamart_v3_b0 /*+basename(tp_psrf_for_datamart_v3),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT tp_psrf_for_datamart_v3.sales_force_id,
        tp_psrf_for_datamart_v3.area_number,
        tp_psrf_for_datamart_v3.region_number,
        tp_psrf_for_datamart_v3.territory_number,
        tp_psrf_for_datamart_v3.area_name,
        tp_psrf_for_datamart_v3.region_name,
        tp_psrf_for_datamart_v3.territory_name,
        tp_psrf_for_datamart_v3.PrescriberName,
        tp_psrf_for_datamart_v3.psrf_city,
        tp_psrf_for_datamart_v3.psrf_state,
        tp_psrf_for_datamart_v3.psrf_zip,
        tp_psrf_for_datamart_v3.psrf_npi,
        tp_psrf_for_datamart_v3.demo_first_name,
        tp_psrf_for_datamart_v3.demo_last_name,
        tp_psrf_for_datamart_v3.demo_city,
        tp_psrf_for_datamart_v3.demo_state,
        tp_psrf_for_datamart_v3.demo_zip,
        tp_psrf_for_datamart_v3.demo_npi,
        tp_psrf_for_datamart_v3.Current_Week_PSRFs,
        tp_psrf_for_datamart_v3.Current_Month_PSRFs,
        tp_psrf_for_datamart_v3.HCP_Signature_Yes,
        tp_psrf_for_datamart_v3.HCP_Signature_No,
        tp_psrf_for_datamart_v3.Patient_Auth_Yes,
        tp_psrf_for_datamart_v3.Patient_Auth_No,
        tp_psrf_for_datamart_v3.YTD_PSRFs,
        tp_psrf_for_datamart_v3.file_id,
        tp_psrf_for_datamart_v3.row_source
 FROM sandbox.tp_psrf_for_datamart_v3
 ORDER BY tp_psrf_for_datamart_v3.sales_force_id,
          tp_psrf_for_datamart_v3.area_number,
          tp_psrf_for_datamart_v3.region_number,
          tp_psrf_for_datamart_v3.territory_number,
          tp_psrf_for_datamart_v3.area_name,
          tp_psrf_for_datamart_v3.region_name,
          tp_psrf_for_datamart_v3.territory_name,
          tp_psrf_for_datamart_v3.PrescriberName,
          tp_psrf_for_datamart_v3.psrf_city,
          tp_psrf_for_datamart_v3.psrf_state,
          tp_psrf_for_datamart_v3.psrf_zip,
          tp_psrf_for_datamart_v3.psrf_npi,
          tp_psrf_for_datamart_v3.demo_first_name,
          tp_psrf_for_datamart_v3.demo_last_name,
          tp_psrf_for_datamart_v3.demo_city,
          tp_psrf_for_datamart_v3.demo_state,
          tp_psrf_for_datamart_v3.demo_zip,
          tp_psrf_for_datamart_v3.demo_npi,
          tp_psrf_for_datamart_v3.Current_Week_PSRFs,
          tp_psrf_for_datamart_v3.Current_Month_PSRFs,
          tp_psrf_for_datamart_v3.HCP_Signature_Yes,
          tp_psrf_for_datamart_v3.HCP_Signature_No,
          tp_psrf_for_datamart_v3.Patient_Auth_Yes,
          tp_psrf_for_datamart_v3.Patient_Auth_No,
          tp_psrf_for_datamart_v3.YTD_PSRFs,
          tp_psrf_for_datamart_v3.file_id
SEGMENTED BY hash(tp_psrf_for_datamart_v3.sales_force_id, tp_psrf_for_datamart_v3.area_number, tp_psrf_for_datamart_v3.region_number, tp_psrf_for_datamart_v3.territory_number, tp_psrf_for_datamart_v3.area_name, tp_psrf_for_datamart_v3.region_name, tp_psrf_for_datamart_v3.territory_name, tp_psrf_for_datamart_v3.PrescriberName, tp_psrf_for_datamart_v3.psrf_city, tp_psrf_for_datamart_v3.psrf_state, tp_psrf_for_datamart_v3.psrf_zip, tp_psrf_for_datamart_v3.psrf_npi, tp_psrf_for_datamart_v3.demo_first_name, tp_psrf_for_datamart_v3.demo_last_name, tp_psrf_for_datamart_v3.demo_city, tp_psrf_for_datamart_v3.demo_state, tp_psrf_for_datamart_v3.demo_zip, tp_psrf_for_datamart_v3.demo_npi, tp_psrf_for_datamart_v3.Current_Week_PSRFs, tp_psrf_for_datamart_v3.Current_Month_PSRFs, tp_psrf_for_datamart_v3.HCP_Signature_Yes, tp_psrf_for_datamart_v3.HCP_Signature_No, tp_psrf_for_datamart_v3.Patient_Auth_Yes, tp_psrf_for_datamart_v3.Patient_Auth_No, tp_psrf_for_datamart_v3.YTD_PSRFs, tp_psrf_for_datamart_v3.file_id) ALL NODES;

CREATE PROJECTION sandbox.tn_psrf_for_datamart_v1_b0 /*+basename(tn_psrf_for_datamart_v1),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT tn_psrf_for_datamart_v1.sales_force_id,
        tn_psrf_for_datamart_v1.area_number,
        tn_psrf_for_datamart_v1.region_number,
        tn_psrf_for_datamart_v1.territory_number,
        tn_psrf_for_datamart_v1.area_name,
        tn_psrf_for_datamart_v1.region_name,
        tn_psrf_for_datamart_v1.territory_name,
        tn_psrf_for_datamart_v1.PrescriberName,
        tn_psrf_for_datamart_v1.psrf_city,
        tn_psrf_for_datamart_v1.psrf_state,
        tn_psrf_for_datamart_v1.psrf_zip,
        tn_psrf_for_datamart_v1.psrf_npi,
        tn_psrf_for_datamart_v1.demo_first_name,
        tn_psrf_for_datamart_v1.demo_last_name,
        tn_psrf_for_datamart_v1.demo_city,
        tn_psrf_for_datamart_v1.demo_state,
        tn_psrf_for_datamart_v1.demo_zip,
        tn_psrf_for_datamart_v1.demo_npi,
        tn_psrf_for_datamart_v1.Current_Week_PSRFs,
        tn_psrf_for_datamart_v1.Current_Month_PSRFs,
        tn_psrf_for_datamart_v1.HCP_Signature_Yes,
        tn_psrf_for_datamart_v1.HCP_Signature_No,
        tn_psrf_for_datamart_v1.Patient_Auth_Yes,
        tn_psrf_for_datamart_v1.Patient_Auth_No,
        tn_psrf_for_datamart_v1.YTD_PSRFs,
        tn_psrf_for_datamart_v1.file_id,
        tn_psrf_for_datamart_v1.row_source
 FROM sandbox.tn_psrf_for_datamart_v1
 ORDER BY tn_psrf_for_datamart_v1.sales_force_id,
          tn_psrf_for_datamart_v1.area_number,
          tn_psrf_for_datamart_v1.region_number,
          tn_psrf_for_datamart_v1.territory_number,
          tn_psrf_for_datamart_v1.area_name,
          tn_psrf_for_datamart_v1.region_name,
          tn_psrf_for_datamart_v1.territory_name,
          tn_psrf_for_datamart_v1.PrescriberName,
          tn_psrf_for_datamart_v1.psrf_city,
          tn_psrf_for_datamart_v1.psrf_state,
          tn_psrf_for_datamart_v1.psrf_zip,
          tn_psrf_for_datamart_v1.psrf_npi,
          tn_psrf_for_datamart_v1.demo_first_name,
          tn_psrf_for_datamart_v1.demo_last_name,
          tn_psrf_for_datamart_v1.demo_city,
          tn_psrf_for_datamart_v1.demo_state,
          tn_psrf_for_datamart_v1.demo_zip,
          tn_psrf_for_datamart_v1.demo_npi,
          tn_psrf_for_datamart_v1.Current_Week_PSRFs,
          tn_psrf_for_datamart_v1.Current_Month_PSRFs,
          tn_psrf_for_datamart_v1.HCP_Signature_Yes,
          tn_psrf_for_datamart_v1.HCP_Signature_No,
          tn_psrf_for_datamart_v1.Patient_Auth_Yes,
          tn_psrf_for_datamart_v1.Patient_Auth_No,
          tn_psrf_for_datamart_v1.YTD_PSRFs,
          tn_psrf_for_datamart_v1.file_id
SEGMENTED BY hash(tn_psrf_for_datamart_v1.territory_number) ALL NODES;

CREATE PROJECTION sandbox.tn_psrf_for_datamart_v2_b0 /*+basename(tn_psrf_for_datamart_v2),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT tn_psrf_for_datamart_v2.sales_force_id,
        tn_psrf_for_datamart_v2.area_number,
        tn_psrf_for_datamart_v2.region_number,
        tn_psrf_for_datamart_v2.territory_number,
        tn_psrf_for_datamart_v2.area_name,
        tn_psrf_for_datamart_v2.region_name,
        tn_psrf_for_datamart_v2.territory_name,
        tn_psrf_for_datamart_v2.PrescriberName,
        tn_psrf_for_datamart_v2.psrf_city,
        tn_psrf_for_datamart_v2.psrf_state,
        tn_psrf_for_datamart_v2.psrf_zip,
        tn_psrf_for_datamart_v2.psrf_npi,
        tn_psrf_for_datamart_v2.demo_first_name,
        tn_psrf_for_datamart_v2.demo_last_name,
        tn_psrf_for_datamart_v2.demo_city,
        tn_psrf_for_datamart_v2.demo_state,
        tn_psrf_for_datamart_v2.demo_zip,
        tn_psrf_for_datamart_v2.demo_npi,
        tn_psrf_for_datamart_v2.Current_Week_PSRFs,
        tn_psrf_for_datamart_v2.Current_Month_PSRFs,
        tn_psrf_for_datamart_v2.HCP_Signature_Yes,
        tn_psrf_for_datamart_v2.HCP_Signature_No,
        tn_psrf_for_datamart_v2.Patient_Auth_Yes,
        tn_psrf_for_datamart_v2.Patient_Auth_No,
        tn_psrf_for_datamart_v2.YTD_PSRFs,
        tn_psrf_for_datamart_v2.file_id,
        tn_psrf_for_datamart_v2.row_source
 FROM sandbox.tn_psrf_for_datamart_v2
 ORDER BY tn_psrf_for_datamart_v2.sales_force_id,
          tn_psrf_for_datamart_v2.area_number,
          tn_psrf_for_datamart_v2.region_number,
          tn_psrf_for_datamart_v2.territory_number,
          tn_psrf_for_datamart_v2.area_name,
          tn_psrf_for_datamart_v2.region_name,
          tn_psrf_for_datamart_v2.territory_name,
          tn_psrf_for_datamart_v2.PrescriberName,
          tn_psrf_for_datamart_v2.psrf_city,
          tn_psrf_for_datamart_v2.psrf_state,
          tn_psrf_for_datamart_v2.psrf_zip,
          tn_psrf_for_datamart_v2.psrf_npi,
          tn_psrf_for_datamart_v2.demo_first_name,
          tn_psrf_for_datamart_v2.demo_last_name,
          tn_psrf_for_datamart_v2.demo_city,
          tn_psrf_for_datamart_v2.demo_state,
          tn_psrf_for_datamart_v2.demo_zip,
          tn_psrf_for_datamart_v2.demo_npi,
          tn_psrf_for_datamart_v2.Current_Week_PSRFs,
          tn_psrf_for_datamart_v2.Current_Month_PSRFs,
          tn_psrf_for_datamart_v2.HCP_Signature_Yes,
          tn_psrf_for_datamart_v2.HCP_Signature_No,
          tn_psrf_for_datamart_v2.Patient_Auth_Yes,
          tn_psrf_for_datamart_v2.Patient_Auth_No,
          tn_psrf_for_datamart_v2.YTD_PSRFs,
          tn_psrf_for_datamart_v2.file_id
SEGMENTED BY hash(tn_psrf_for_datamart_v2.sales_force_id, tn_psrf_for_datamart_v2.area_number, tn_psrf_for_datamart_v2.region_number, tn_psrf_for_datamart_v2.territory_number, tn_psrf_for_datamart_v2.area_name, tn_psrf_for_datamart_v2.region_name, tn_psrf_for_datamart_v2.territory_name, tn_psrf_for_datamart_v2.PrescriberName, tn_psrf_for_datamart_v2.psrf_city, tn_psrf_for_datamart_v2.psrf_state, tn_psrf_for_datamart_v2.psrf_zip, tn_psrf_for_datamart_v2.psrf_npi, tn_psrf_for_datamart_v2.demo_first_name, tn_psrf_for_datamart_v2.demo_last_name, tn_psrf_for_datamart_v2.demo_city, tn_psrf_for_datamart_v2.demo_state, tn_psrf_for_datamart_v2.demo_zip, tn_psrf_for_datamart_v2.demo_npi, tn_psrf_for_datamart_v2.Current_Week_PSRFs, tn_psrf_for_datamart_v2.Current_Month_PSRFs, tn_psrf_for_datamart_v2.HCP_Signature_Yes, tn_psrf_for_datamart_v2.HCP_Signature_No, tn_psrf_for_datamart_v2.Patient_Auth_Yes, tn_psrf_for_datamart_v2.Patient_Auth_No, tn_psrf_for_datamart_v2.YTD_PSRFs, tn_psrf_for_datamart_v2.file_id) ALL NODES;

CREATE PROJECTION sandbox.tn_psrf_for_datamart_v3_b0 /*+basename(tn_psrf_for_datamart_v3),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT tn_psrf_for_datamart_v3.sales_force_id,
        tn_psrf_for_datamart_v3.area_number,
        tn_psrf_for_datamart_v3.region_number,
        tn_psrf_for_datamart_v3.territory_number,
        tn_psrf_for_datamart_v3.area_name,
        tn_psrf_for_datamart_v3.region_name,
        tn_psrf_for_datamart_v3.territory_name,
        tn_psrf_for_datamart_v3.PrescriberName,
        tn_psrf_for_datamart_v3.psrf_city,
        tn_psrf_for_datamart_v3.psrf_state,
        tn_psrf_for_datamart_v3.psrf_zip,
        tn_psrf_for_datamart_v3.psrf_npi,
        tn_psrf_for_datamart_v3.demo_first_name,
        tn_psrf_for_datamart_v3.demo_last_name,
        tn_psrf_for_datamart_v3.demo_city,
        tn_psrf_for_datamart_v3.demo_state,
        tn_psrf_for_datamart_v3.demo_zip,
        tn_psrf_for_datamart_v3.demo_npi,
        tn_psrf_for_datamart_v3.Current_Week_PSRFs,
        tn_psrf_for_datamart_v3.Current_Month_PSRFs,
        tn_psrf_for_datamart_v3.HCP_Signature_Yes,
        tn_psrf_for_datamart_v3.HCP_Signature_No,
        tn_psrf_for_datamart_v3.Patient_Auth_Yes,
        tn_psrf_for_datamart_v3.Patient_Auth_No,
        tn_psrf_for_datamart_v3.YTD_PSRFs,
        tn_psrf_for_datamart_v3.file_id,
        tn_psrf_for_datamart_v3.row_source
 FROM sandbox.tn_psrf_for_datamart_v3
 ORDER BY tn_psrf_for_datamart_v3.sales_force_id,
          tn_psrf_for_datamart_v3.area_number,
          tn_psrf_for_datamart_v3.region_number,
          tn_psrf_for_datamart_v3.territory_number,
          tn_psrf_for_datamart_v3.area_name,
          tn_psrf_for_datamart_v3.region_name,
          tn_psrf_for_datamart_v3.territory_name,
          tn_psrf_for_datamart_v3.PrescriberName,
          tn_psrf_for_datamart_v3.psrf_city,
          tn_psrf_for_datamart_v3.psrf_state,
          tn_psrf_for_datamart_v3.psrf_zip,
          tn_psrf_for_datamart_v3.psrf_npi,
          tn_psrf_for_datamart_v3.demo_first_name,
          tn_psrf_for_datamart_v3.demo_last_name,
          tn_psrf_for_datamart_v3.demo_city,
          tn_psrf_for_datamart_v3.demo_state,
          tn_psrf_for_datamart_v3.demo_zip,
          tn_psrf_for_datamart_v3.demo_npi,
          tn_psrf_for_datamart_v3.Current_Week_PSRFs,
          tn_psrf_for_datamart_v3.Current_Month_PSRFs,
          tn_psrf_for_datamart_v3.HCP_Signature_Yes,
          tn_psrf_for_datamart_v3.HCP_Signature_No,
          tn_psrf_for_datamart_v3.Patient_Auth_Yes,
          tn_psrf_for_datamart_v3.Patient_Auth_No,
          tn_psrf_for_datamart_v3.YTD_PSRFs,
          tn_psrf_for_datamart_v3.file_id
SEGMENTED BY hash(tn_psrf_for_datamart_v3.sales_force_id, tn_psrf_for_datamart_v3.area_number, tn_psrf_for_datamart_v3.region_number, tn_psrf_for_datamart_v3.territory_number, tn_psrf_for_datamart_v3.area_name, tn_psrf_for_datamart_v3.region_name, tn_psrf_for_datamart_v3.territory_name, tn_psrf_for_datamart_v3.PrescriberName, tn_psrf_for_datamart_v3.psrf_city, tn_psrf_for_datamart_v3.psrf_state, tn_psrf_for_datamart_v3.psrf_zip, tn_psrf_for_datamart_v3.psrf_npi, tn_psrf_for_datamart_v3.demo_first_name, tn_psrf_for_datamart_v3.demo_last_name, tn_psrf_for_datamart_v3.demo_city, tn_psrf_for_datamart_v3.demo_state, tn_psrf_for_datamart_v3.demo_zip, tn_psrf_for_datamart_v3.demo_npi, tn_psrf_for_datamart_v3.Current_Week_PSRFs, tn_psrf_for_datamart_v3.Current_Month_PSRFs, tn_psrf_for_datamart_v3.HCP_Signature_Yes, tn_psrf_for_datamart_v3.HCP_Signature_No, tn_psrf_for_datamart_v3.Patient_Auth_Yes, tn_psrf_for_datamart_v3.Patient_Auth_No, tn_psrf_for_datamart_v3.YTD_PSRFs, tn_psrf_for_datamart_v3.file_id) ALL NODES;

CREATE PROJECTION sandbox.ts_psrf_for_datamart_v1_b0 /*+basename(ts_psrf_for_datamart_v1),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT ts_psrf_for_datamart_v1.sales_force_id,
        ts_psrf_for_datamart_v1.area_number,
        ts_psrf_for_datamart_v1.region_number,
        ts_psrf_for_datamart_v1.territory_number,
        ts_psrf_for_datamart_v1.area_name,
        ts_psrf_for_datamart_v1.region_name,
        ts_psrf_for_datamart_v1.territory_name,
        ts_psrf_for_datamart_v1.PrescriberName,
        ts_psrf_for_datamart_v1.psrf_city,
        ts_psrf_for_datamart_v1.psrf_state,
        ts_psrf_for_datamart_v1.psrf_zip,
        ts_psrf_for_datamart_v1.psrf_npi,
        ts_psrf_for_datamart_v1.demo_first_name,
        ts_psrf_for_datamart_v1.demo_last_name,
        ts_psrf_for_datamart_v1.demo_city,
        ts_psrf_for_datamart_v1.demo_state,
        ts_psrf_for_datamart_v1.demo_zip,
        ts_psrf_for_datamart_v1.demo_npi,
        ts_psrf_for_datamart_v1.Current_Week_PSRFs,
        ts_psrf_for_datamart_v1.Current_Month_PSRFs,
        ts_psrf_for_datamart_v1.HCP_Signature_Yes,
        ts_psrf_for_datamart_v1.HCP_Signature_No,
        ts_psrf_for_datamart_v1.Patient_Auth_Yes,
        ts_psrf_for_datamart_v1.Patient_Auth_No,
        ts_psrf_for_datamart_v1.YTD_PSRFs,
        ts_psrf_for_datamart_v1.file_id,
        ts_psrf_for_datamart_v1.row_source
 FROM sandbox.ts_psrf_for_datamart_v1
 ORDER BY ts_psrf_for_datamart_v1.sales_force_id,
          ts_psrf_for_datamart_v1.area_number,
          ts_psrf_for_datamart_v1.region_number,
          ts_psrf_for_datamart_v1.territory_number,
          ts_psrf_for_datamart_v1.area_name,
          ts_psrf_for_datamart_v1.region_name,
          ts_psrf_for_datamart_v1.territory_name,
          ts_psrf_for_datamart_v1.PrescriberName,
          ts_psrf_for_datamart_v1.psrf_city,
          ts_psrf_for_datamart_v1.psrf_state,
          ts_psrf_for_datamart_v1.psrf_zip,
          ts_psrf_for_datamart_v1.psrf_npi,
          ts_psrf_for_datamart_v1.demo_first_name,
          ts_psrf_for_datamart_v1.demo_last_name,
          ts_psrf_for_datamart_v1.demo_city,
          ts_psrf_for_datamart_v1.demo_state,
          ts_psrf_for_datamart_v1.demo_zip,
          ts_psrf_for_datamart_v1.demo_npi,
          ts_psrf_for_datamart_v1.Current_Week_PSRFs,
          ts_psrf_for_datamart_v1.Current_Month_PSRFs,
          ts_psrf_for_datamart_v1.HCP_Signature_Yes,
          ts_psrf_for_datamart_v1.HCP_Signature_No,
          ts_psrf_for_datamart_v1.Patient_Auth_Yes,
          ts_psrf_for_datamart_v1.Patient_Auth_No,
          ts_psrf_for_datamart_v1.YTD_PSRFs,
          ts_psrf_for_datamart_v1.file_id
SEGMENTED BY hash(ts_psrf_for_datamart_v1.territory_number) ALL NODES;

CREATE PROJECTION sandbox.ts_psrf_for_datamart_v2_b0 /*+basename(ts_psrf_for_datamart_v2),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT ts_psrf_for_datamart_v2.sales_force_id,
        ts_psrf_for_datamart_v2.area_number,
        ts_psrf_for_datamart_v2.region_number,
        ts_psrf_for_datamart_v2.territory_number,
        ts_psrf_for_datamart_v2.area_name,
        ts_psrf_for_datamart_v2.region_name,
        ts_psrf_for_datamart_v2.territory_name,
        ts_psrf_for_datamart_v2.PrescriberName,
        ts_psrf_for_datamart_v2.psrf_city,
        ts_psrf_for_datamart_v2.psrf_state,
        ts_psrf_for_datamart_v2.psrf_zip,
        ts_psrf_for_datamart_v2.psrf_npi,
        ts_psrf_for_datamart_v2.demo_first_name,
        ts_psrf_for_datamart_v2.demo_last_name,
        ts_psrf_for_datamart_v2.demo_city,
        ts_psrf_for_datamart_v2.demo_state,
        ts_psrf_for_datamart_v2.demo_zip,
        ts_psrf_for_datamart_v2.demo_npi,
        ts_psrf_for_datamart_v2.Current_Week_PSRFs,
        ts_psrf_for_datamart_v2.Current_Month_PSRFs,
        ts_psrf_for_datamart_v2.HCP_Signature_Yes,
        ts_psrf_for_datamart_v2.HCP_Signature_No,
        ts_psrf_for_datamart_v2.Patient_Auth_Yes,
        ts_psrf_for_datamart_v2.Patient_Auth_No,
        ts_psrf_for_datamart_v2.YTD_PSRFs,
        ts_psrf_for_datamart_v2.file_id,
        ts_psrf_for_datamart_v2.row_source
 FROM sandbox.ts_psrf_for_datamart_v2
 ORDER BY ts_psrf_for_datamart_v2.sales_force_id,
          ts_psrf_for_datamart_v2.area_number,
          ts_psrf_for_datamart_v2.region_number,
          ts_psrf_for_datamart_v2.territory_number,
          ts_psrf_for_datamart_v2.area_name,
          ts_psrf_for_datamart_v2.region_name,
          ts_psrf_for_datamart_v2.territory_name,
          ts_psrf_for_datamart_v2.PrescriberName,
          ts_psrf_for_datamart_v2.psrf_city,
          ts_psrf_for_datamart_v2.psrf_state,
          ts_psrf_for_datamart_v2.psrf_zip,
          ts_psrf_for_datamart_v2.psrf_npi,
          ts_psrf_for_datamart_v2.demo_first_name,
          ts_psrf_for_datamart_v2.demo_last_name,
          ts_psrf_for_datamart_v2.demo_city,
          ts_psrf_for_datamart_v2.demo_state,
          ts_psrf_for_datamart_v2.demo_zip,
          ts_psrf_for_datamart_v2.demo_npi,
          ts_psrf_for_datamart_v2.Current_Week_PSRFs,
          ts_psrf_for_datamart_v2.Current_Month_PSRFs,
          ts_psrf_for_datamart_v2.HCP_Signature_Yes,
          ts_psrf_for_datamart_v2.HCP_Signature_No,
          ts_psrf_for_datamart_v2.Patient_Auth_Yes,
          ts_psrf_for_datamart_v2.Patient_Auth_No,
          ts_psrf_for_datamart_v2.YTD_PSRFs,
          ts_psrf_for_datamart_v2.file_id
SEGMENTED BY hash(ts_psrf_for_datamart_v2.sales_force_id, ts_psrf_for_datamart_v2.area_number, ts_psrf_for_datamart_v2.region_number, ts_psrf_for_datamart_v2.territory_number, ts_psrf_for_datamart_v2.area_name, ts_psrf_for_datamart_v2.region_name, ts_psrf_for_datamart_v2.territory_name, ts_psrf_for_datamart_v2.PrescriberName, ts_psrf_for_datamart_v2.psrf_city, ts_psrf_for_datamart_v2.psrf_state, ts_psrf_for_datamart_v2.psrf_zip, ts_psrf_for_datamart_v2.psrf_npi, ts_psrf_for_datamart_v2.demo_first_name, ts_psrf_for_datamart_v2.demo_last_name, ts_psrf_for_datamart_v2.demo_city, ts_psrf_for_datamart_v2.demo_state, ts_psrf_for_datamart_v2.demo_zip, ts_psrf_for_datamart_v2.demo_npi, ts_psrf_for_datamart_v2.Current_Week_PSRFs, ts_psrf_for_datamart_v2.Current_Month_PSRFs, ts_psrf_for_datamart_v2.HCP_Signature_Yes, ts_psrf_for_datamart_v2.HCP_Signature_No, ts_psrf_for_datamart_v2.Patient_Auth_Yes, ts_psrf_for_datamart_v2.Patient_Auth_No, ts_psrf_for_datamart_v2.YTD_PSRFs, ts_psrf_for_datamart_v2.file_id) ALL NODES;

CREATE PROJECTION sandbox.ts_psrf_for_datamart_v3_b0 /*+basename(ts_psrf_for_datamart_v3),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT ts_psrf_for_datamart_v3.sales_force_id,
        ts_psrf_for_datamart_v3.area_number,
        ts_psrf_for_datamart_v3.region_number,
        ts_psrf_for_datamart_v3.territory_number,
        ts_psrf_for_datamart_v3.area_name,
        ts_psrf_for_datamart_v3.region_name,
        ts_psrf_for_datamart_v3.territory_name,
        ts_psrf_for_datamart_v3.PrescriberName,
        ts_psrf_for_datamart_v3.psrf_city,
        ts_psrf_for_datamart_v3.psrf_state,
        ts_psrf_for_datamart_v3.psrf_zip,
        ts_psrf_for_datamart_v3.psrf_npi,
        ts_psrf_for_datamart_v3.demo_first_name,
        ts_psrf_for_datamart_v3.demo_last_name,
        ts_psrf_for_datamart_v3.demo_city,
        ts_psrf_for_datamart_v3.demo_state,
        ts_psrf_for_datamart_v3.demo_zip,
        ts_psrf_for_datamart_v3.demo_npi,
        ts_psrf_for_datamart_v3.Current_Week_PSRFs,
        ts_psrf_for_datamart_v3.Current_Month_PSRFs,
        ts_psrf_for_datamart_v3.HCP_Signature_Yes,
        ts_psrf_for_datamart_v3.HCP_Signature_No,
        ts_psrf_for_datamart_v3.Patient_Auth_Yes,
        ts_psrf_for_datamart_v3.Patient_Auth_No,
        ts_psrf_for_datamart_v3.YTD_PSRFs,
        ts_psrf_for_datamart_v3.file_id,
        ts_psrf_for_datamart_v3.row_source
 FROM sandbox.ts_psrf_for_datamart_v3
 ORDER BY ts_psrf_for_datamart_v3.sales_force_id,
          ts_psrf_for_datamart_v3.area_number,
          ts_psrf_for_datamart_v3.region_number,
          ts_psrf_for_datamart_v3.territory_number,
          ts_psrf_for_datamart_v3.area_name,
          ts_psrf_for_datamart_v3.region_name,
          ts_psrf_for_datamart_v3.territory_name,
          ts_psrf_for_datamart_v3.PrescriberName,
          ts_psrf_for_datamart_v3.psrf_city,
          ts_psrf_for_datamart_v3.psrf_state,
          ts_psrf_for_datamart_v3.psrf_zip,
          ts_psrf_for_datamart_v3.psrf_npi,
          ts_psrf_for_datamart_v3.demo_first_name,
          ts_psrf_for_datamart_v3.demo_last_name,
          ts_psrf_for_datamart_v3.demo_city,
          ts_psrf_for_datamart_v3.demo_state,
          ts_psrf_for_datamart_v3.demo_zip,
          ts_psrf_for_datamart_v3.demo_npi,
          ts_psrf_for_datamart_v3.Current_Week_PSRFs,
          ts_psrf_for_datamart_v3.Current_Month_PSRFs,
          ts_psrf_for_datamart_v3.HCP_Signature_Yes,
          ts_psrf_for_datamart_v3.HCP_Signature_No,
          ts_psrf_for_datamart_v3.Patient_Auth_Yes,
          ts_psrf_for_datamart_v3.Patient_Auth_No,
          ts_psrf_for_datamart_v3.YTD_PSRFs,
          ts_psrf_for_datamart_v3.file_id
SEGMENTED BY hash(ts_psrf_for_datamart_v3.sales_force_id, ts_psrf_for_datamart_v3.area_number, ts_psrf_for_datamart_v3.region_number, ts_psrf_for_datamart_v3.territory_number, ts_psrf_for_datamart_v3.area_name, ts_psrf_for_datamart_v3.region_name, ts_psrf_for_datamart_v3.territory_name, ts_psrf_for_datamart_v3.PrescriberName, ts_psrf_for_datamart_v3.psrf_city, ts_psrf_for_datamart_v3.psrf_state, ts_psrf_for_datamart_v3.psrf_zip, ts_psrf_for_datamart_v3.psrf_npi, ts_psrf_for_datamart_v3.demo_first_name, ts_psrf_for_datamart_v3.demo_last_name, ts_psrf_for_datamart_v3.demo_city, ts_psrf_for_datamart_v3.demo_state, ts_psrf_for_datamart_v3.demo_zip, ts_psrf_for_datamart_v3.demo_npi, ts_psrf_for_datamart_v3.Current_Week_PSRFs, ts_psrf_for_datamart_v3.Current_Month_PSRFs, ts_psrf_for_datamart_v3.HCP_Signature_Yes, ts_psrf_for_datamart_v3.HCP_Signature_No, ts_psrf_for_datamart_v3.Patient_Auth_Yes, ts_psrf_for_datamart_v3.Patient_Auth_No, ts_psrf_for_datamart_v3.YTD_PSRFs, ts_psrf_for_datamart_v3.file_id) ALL NODES;

CREATE PROJECTION sandbox.oncology_sales_deciles_b0 /*+basename(oncology_sales_deciles),createtype(A)*/ 
(
 account_demo_id,
 outlet_name,
 outlet_zip,
 decile_name,
 basket_id,
 basket_name,
 decile_reported_dollars_6_mo,
 decile_reported_dollars_12_mo,
 reported_dollars_6_mo,
 reported_dollars_12_mo,
 reported_dollars_24_mo,
 tvcmid
)
AS
 SELECT oncology_sales_deciles.account_demo_id,
        oncology_sales_deciles.outlet_name,
        oncology_sales_deciles.outlet_zip,
        oncology_sales_deciles.decile_name,
        oncology_sales_deciles.basket_id,
        oncology_sales_deciles.basket_name,
        oncology_sales_deciles.decile_reported_dollars_6_mo,
        oncology_sales_deciles.decile_reported_dollars_12_mo,
        oncology_sales_deciles.reported_dollars_6_mo,
        oncology_sales_deciles.reported_dollars_12_mo,
        oncology_sales_deciles.reported_dollars_24_mo,
        oncology_sales_deciles.tvcmid
 FROM sandbox.oncology_sales_deciles
 ORDER BY oncology_sales_deciles.account_demo_id
SEGMENTED BY hash(oncology_sales_deciles.basket_id) ALL NODES;

CREATE PROJECTION sandbox.ic_ms_market_decile_201601_b0 /*+basename(ic_ms_market_decile_201601),createtype(L)*/ 
(
 ims_id,
 category,
 decile_name,
 trx_cnt_01_06,
 trx_cnt_01_12
)
AS
 SELECT ic_ms_market_decile_201601.ims_id,
        ic_ms_market_decile_201601.category,
        ic_ms_market_decile_201601.decile_name,
        ic_ms_market_decile_201601.trx_cnt_01_06,
        ic_ms_market_decile_201601.trx_cnt_01_12
 FROM sandbox.ic_ms_market_decile_201601
 ORDER BY ic_ms_market_decile_201601.ims_id,
          ic_ms_market_decile_201601.category,
          ic_ms_market_decile_201601.decile_name,
          ic_ms_market_decile_201601.trx_cnt_01_06,
          ic_ms_market_decile_201601.trx_cnt_01_12
SEGMENTED BY hash(ic_ms_market_decile_201601.trx_cnt_01_06, ic_ms_market_decile_201601.trx_cnt_01_12, ic_ms_market_decile_201601.ims_id, ic_ms_market_decile_201601.decile_name, ic_ms_market_decile_201601.category) ALL NODES;

CREATE PROJECTION sandbox.ic_ms_market_decile_201701_b0 /*+basename(ic_ms_market_decile_201701),createtype(A)*/ 
(
 ims_id,
 category,
 decile_name,
 trx_cnt_01_06,
 trx_cnt_01_12
)
AS
 SELECT ic_ms_market_decile_201701.ims_id,
        ic_ms_market_decile_201701.category,
        ic_ms_market_decile_201701.decile_name,
        ic_ms_market_decile_201701.trx_cnt_01_06,
        ic_ms_market_decile_201701.trx_cnt_01_12
 FROM sandbox.ic_ms_market_decile_201701
 ORDER BY ic_ms_market_decile_201701.ims_id,
          ic_ms_market_decile_201701.category,
          ic_ms_market_decile_201701.decile_name,
          ic_ms_market_decile_201701.trx_cnt_01_06,
          ic_ms_market_decile_201701.trx_cnt_01_12
SEGMENTED BY hash(ic_ms_market_decile_201701.trx_cnt_01_06, ic_ms_market_decile_201701.trx_cnt_01_12, ic_ms_market_decile_201701.ims_id, ic_ms_market_decile_201701.decile_name, ic_ms_market_decile_201701.category) ALL NODES;

CREATE PROJECTION sandbox.STG_LAAD_DIAGNOSIS_CODE_b0 /*+basename(STG_LAAD_DIAGNOSIS_CODE),createtype(L)*/ 
(
 DIAGNOSIS_CODE,
 DIAGNOSIS_DESCRIPTION
)
AS
 SELECT STG_LAAD_DIAGNOSIS_CODE.DIAGNOSIS_CODE,
        STG_LAAD_DIAGNOSIS_CODE.DIAGNOSIS_DESCRIPTION
 FROM sandbox.STG_LAAD_DIAGNOSIS_CODE
 ORDER BY STG_LAAD_DIAGNOSIS_CODE.DIAGNOSIS_CODE,
          STG_LAAD_DIAGNOSIS_CODE.DIAGNOSIS_DESCRIPTION
SEGMENTED BY hash(STG_LAAD_DIAGNOSIS_CODE.DIAGNOSIS_CODE, STG_LAAD_DIAGNOSIS_CODE.DIAGNOSIS_DESCRIPTION) ALL NODES;

CREATE PROJECTION sandbox.STG_LAAD_PATIENT_b0 /*+basename(STG_LAAD_PATIENT),createtype(L)*/ 
(
 PATIENT_ID,
 PATIENT_BIRTH_YEAR,
 PATIENT_GENDER
)
AS
 SELECT STG_LAAD_PATIENT.PATIENT_ID,
        STG_LAAD_PATIENT.PATIENT_BIRTH_YEAR,
        STG_LAAD_PATIENT.PATIENT_GENDER
 FROM sandbox.STG_LAAD_PATIENT
 ORDER BY STG_LAAD_PATIENT.PATIENT_ID,
          STG_LAAD_PATIENT.PATIENT_BIRTH_YEAR,
          STG_LAAD_PATIENT.PATIENT_GENDER
SEGMENTED BY hash(STG_LAAD_PATIENT.PATIENT_BIRTH_YEAR, STG_LAAD_PATIENT.PATIENT_GENDER, STG_LAAD_PATIENT.PATIENT_ID) ALL NODES;

CREATE PROJECTION sandbox.STG_LAAD_PLAN_b0 /*+basename(STG_LAAD_PLAN),createtype(L)*/ 
(
 PLAN_ID,
 PAYER_NAME,
 PLAN_NAME,
 PBM_NAME,
 METHOD_OF_PAYMENT,
 MODEL_TYPE
)
AS
 SELECT STG_LAAD_PLAN.PLAN_ID,
        STG_LAAD_PLAN.PAYER_NAME,
        STG_LAAD_PLAN.PLAN_NAME,
        STG_LAAD_PLAN.PBM_NAME,
        STG_LAAD_PLAN.METHOD_OF_PAYMENT,
        STG_LAAD_PLAN.MODEL_TYPE
 FROM sandbox.STG_LAAD_PLAN
 ORDER BY STG_LAAD_PLAN.PLAN_ID,
          STG_LAAD_PLAN.PAYER_NAME,
          STG_LAAD_PLAN.PLAN_NAME,
          STG_LAAD_PLAN.PBM_NAME,
          STG_LAAD_PLAN.METHOD_OF_PAYMENT,
          STG_LAAD_PLAN.MODEL_TYPE
SEGMENTED BY hash(STG_LAAD_PLAN.PLAN_ID, STG_LAAD_PLAN.PAYER_NAME, STG_LAAD_PLAN.PLAN_NAME, STG_LAAD_PLAN.PBM_NAME, STG_LAAD_PLAN.METHOD_OF_PAYMENT, STG_LAAD_PLAN.MODEL_TYPE) ALL NODES;

CREATE PROJECTION sandbox.STG_LAAD_PRESCRIBER_b0 /*+basename(STG_LAAD_PRESCRIBER),createtype(L)*/ 
(
 PRESCRIBER_ID,
 FIRST_NAME,
 LAST_NAME,
 ADDRESS,
 CITY,
 STATE,
 ZIP,
 SPECIALTY_CODE,
 SPECIALTY_DESC,
 ME_NUM,
 NPI
)
AS
 SELECT STG_LAAD_PRESCRIBER.PRESCRIBER_ID,
        STG_LAAD_PRESCRIBER.FIRST_NAME,
        STG_LAAD_PRESCRIBER.LAST_NAME,
        STG_LAAD_PRESCRIBER.ADDRESS,
        STG_LAAD_PRESCRIBER.CITY,
        STG_LAAD_PRESCRIBER.STATE,
        STG_LAAD_PRESCRIBER.ZIP,
        STG_LAAD_PRESCRIBER.SPECIALTY_CODE,
        STG_LAAD_PRESCRIBER.SPECIALTY_DESC,
        STG_LAAD_PRESCRIBER.ME_NUM,
        STG_LAAD_PRESCRIBER.NPI
 FROM sandbox.STG_LAAD_PRESCRIBER
 ORDER BY STG_LAAD_PRESCRIBER.PRESCRIBER_ID,
          STG_LAAD_PRESCRIBER.FIRST_NAME,
          STG_LAAD_PRESCRIBER.LAST_NAME,
          STG_LAAD_PRESCRIBER.ADDRESS,
          STG_LAAD_PRESCRIBER.CITY,
          STG_LAAD_PRESCRIBER.STATE,
          STG_LAAD_PRESCRIBER.ZIP,
          STG_LAAD_PRESCRIBER.SPECIALTY_CODE,
          STG_LAAD_PRESCRIBER.SPECIALTY_DESC,
          STG_LAAD_PRESCRIBER.ME_NUM,
          STG_LAAD_PRESCRIBER.NPI
SEGMENTED BY hash(STG_LAAD_PRESCRIBER.STATE, STG_LAAD_PRESCRIBER.ZIP, STG_LAAD_PRESCRIBER.PRESCRIBER_ID, STG_LAAD_PRESCRIBER.SPECIALTY_CODE, STG_LAAD_PRESCRIBER.ME_NUM, STG_LAAD_PRESCRIBER.NPI, STG_LAAD_PRESCRIBER.FIRST_NAME, STG_LAAD_PRESCRIBER.LAST_NAME, STG_LAAD_PRESCRIBER.ADDRESS, STG_LAAD_PRESCRIBER.CITY, STG_LAAD_PRESCRIBER.SPECIALTY_DESC) ALL NODES;

CREATE PROJECTION sandbox.STG_LAAD_PROCEDURE_b0 /*+basename(STG_LAAD_PROCEDURE),createtype(L)*/ 
(
 CLAIM_ID,
 CLAIM_SERVICE_NUMBER,
 PATIENT_ID,
 SERVICE_DATE,
 PROCEDURE_CODE,
 RENDERING_PRESCRIBER_ID,
 REFERRING_PRESCRIBER_ID
)
AS
 SELECT STG_LAAD_PROCEDURE.CLAIM_ID,
        STG_LAAD_PROCEDURE.CLAIM_SERVICE_NUMBER,
        STG_LAAD_PROCEDURE.PATIENT_ID,
        STG_LAAD_PROCEDURE.SERVICE_DATE,
        STG_LAAD_PROCEDURE.PROCEDURE_CODE,
        STG_LAAD_PROCEDURE.RENDERING_PRESCRIBER_ID,
        STG_LAAD_PROCEDURE.REFERRING_PRESCRIBER_ID
 FROM sandbox.STG_LAAD_PROCEDURE
 ORDER BY STG_LAAD_PROCEDURE.CLAIM_ID,
          STG_LAAD_PROCEDURE.CLAIM_SERVICE_NUMBER,
          STG_LAAD_PROCEDURE.PATIENT_ID,
          STG_LAAD_PROCEDURE.SERVICE_DATE,
          STG_LAAD_PROCEDURE.PROCEDURE_CODE,
          STG_LAAD_PROCEDURE.RENDERING_PRESCRIBER_ID,
          STG_LAAD_PROCEDURE.REFERRING_PRESCRIBER_ID
SEGMENTED BY hash(STG_LAAD_PROCEDURE.SERVICE_DATE, STG_LAAD_PROCEDURE.CLAIM_ID, STG_LAAD_PROCEDURE.CLAIM_SERVICE_NUMBER, STG_LAAD_PROCEDURE.PATIENT_ID, STG_LAAD_PROCEDURE.RENDERING_PRESCRIBER_ID, STG_LAAD_PROCEDURE.REFERRING_PRESCRIBER_ID, STG_LAAD_PROCEDURE.PROCEDURE_CODE) ALL NODES;

CREATE PROJECTION sandbox.STG_LAAD_PROCEDURE_CODE_b0 /*+basename(STG_LAAD_PROCEDURE_CODE),createtype(L)*/ 
(
 PROCEDURE_CODE,
 PROCEDURE_DESCRIPTION
)
AS
 SELECT STG_LAAD_PROCEDURE_CODE.PROCEDURE_CODE,
        STG_LAAD_PROCEDURE_CODE.PROCEDURE_DESCRIPTION
 FROM sandbox.STG_LAAD_PROCEDURE_CODE
 ORDER BY STG_LAAD_PROCEDURE_CODE.PROCEDURE_CODE,
          STG_LAAD_PROCEDURE_CODE.PROCEDURE_DESCRIPTION
SEGMENTED BY hash(STG_LAAD_PROCEDURE_CODE.PROCEDURE_CODE, STG_LAAD_PROCEDURE_CODE.PROCEDURE_DESCRIPTION) ALL NODES;

CREATE PROJECTION sandbox.STG_LAAD_PRODUCT_b0 /*+basename(STG_LAAD_PRODUCT),createtype(L)*/ 
(
 NATL_DRUG_CODE,
 BRAND_NAME,
 GENERIC_NAME,
 BRAND_GENERIC_FLAG,
 DRUG_FORM,
 DRUG_STRENGTH,
 PACKAGE_SIZE,
 MANUFACTURER,
 USC_CODE,
 USC_DESCRIPTION
)
AS
 SELECT STG_LAAD_PRODUCT.NATL_DRUG_CODE,
        STG_LAAD_PRODUCT.BRAND_NAME,
        STG_LAAD_PRODUCT.GENERIC_NAME,
        STG_LAAD_PRODUCT.BRAND_GENERIC_FLAG,
        STG_LAAD_PRODUCT.DRUG_FORM,
        STG_LAAD_PRODUCT.DRUG_STRENGTH,
        STG_LAAD_PRODUCT.PACKAGE_SIZE,
        STG_LAAD_PRODUCT.MANUFACTURER,
        STG_LAAD_PRODUCT.USC_CODE,
        STG_LAAD_PRODUCT.USC_DESCRIPTION
 FROM sandbox.STG_LAAD_PRODUCT
 ORDER BY STG_LAAD_PRODUCT.NATL_DRUG_CODE,
          STG_LAAD_PRODUCT.BRAND_NAME,
          STG_LAAD_PRODUCT.GENERIC_NAME,
          STG_LAAD_PRODUCT.BRAND_GENERIC_FLAG,
          STG_LAAD_PRODUCT.DRUG_FORM,
          STG_LAAD_PRODUCT.DRUG_STRENGTH,
          STG_LAAD_PRODUCT.PACKAGE_SIZE,
          STG_LAAD_PRODUCT.MANUFACTURER,
          STG_LAAD_PRODUCT.USC_CODE,
          STG_LAAD_PRODUCT.USC_DESCRIPTION
SEGMENTED BY hash(STG_LAAD_PRODUCT.BRAND_GENERIC_FLAG, STG_LAAD_PRODUCT.PACKAGE_SIZE, STG_LAAD_PRODUCT.USC_CODE, STG_LAAD_PRODUCT.NATL_DRUG_CODE, STG_LAAD_PRODUCT.USC_DESCRIPTION, STG_LAAD_PRODUCT.BRAND_NAME, STG_LAAD_PRODUCT.GENERIC_NAME, STG_LAAD_PRODUCT.DRUG_FORM, STG_LAAD_PRODUCT.DRUG_STRENGTH, STG_LAAD_PRODUCT.MANUFACTURER) ALL NODES;

CREATE PROJECTION sandbox.tmp_file_id_test_b0 /*+basename(tmp_file_id_test),createtype(A)*/ 
(
 file_id
)
AS
 SELECT tmp_file_id_test.file_id
 FROM sandbox.tmp_file_id_test
 ORDER BY tmp_file_id_test.file_id
SEGMENTED BY hash(tmp_file_id_test.file_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_ims_data_w_test_b0 /*+basename(tmp_ims_data_w_test),createtype(A)*/ 
(
 sales_force_id,
 ims_id,
 me_num,
 specialty,
 specialty_source,
 last_name,
 first_name,
 middle_name,
 address,
 city,
 state,
 zip,
 data_date,
 row_num
)
AS
 SELECT tmp_ims_data_w_test.sales_force_id,
        tmp_ims_data_w_test.ims_id,
        tmp_ims_data_w_test.me_num,
        tmp_ims_data_w_test.specialty,
        tmp_ims_data_w_test.specialty_source,
        tmp_ims_data_w_test.last_name,
        tmp_ims_data_w_test.first_name,
        tmp_ims_data_w_test.middle_name,
        tmp_ims_data_w_test.address,
        tmp_ims_data_w_test.city,
        tmp_ims_data_w_test.state,
        tmp_ims_data_w_test.zip,
        tmp_ims_data_w_test.data_date,
        tmp_ims_data_w_test.row_num
 FROM sandbox.tmp_ims_data_w_test
 ORDER BY tmp_ims_data_w_test.sales_force_id,
          tmp_ims_data_w_test.ims_id
SEGMENTED BY hash(tmp_ims_data_w_test.sales_force_id, tmp_ims_data_w_test.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_ims_data_m_test_b0 /*+basename(tmp_ims_data_m_test),createtype(A)*/ 
(
 sales_force_id,
 ims_id,
 me_num,
 specialty,
 specialty_source,
 last_name,
 first_name,
 middle_name,
 address,
 city,
 state,
 zip,
 data_date,
 row_num
)
AS
 SELECT tmp_ims_data_m_test.sales_force_id,
        tmp_ims_data_m_test.ims_id,
        tmp_ims_data_m_test.me_num,
        tmp_ims_data_m_test.specialty,
        tmp_ims_data_m_test.specialty_source,
        tmp_ims_data_m_test.last_name,
        tmp_ims_data_m_test.first_name,
        tmp_ims_data_m_test.middle_name,
        tmp_ims_data_m_test.address,
        tmp_ims_data_m_test.city,
        tmp_ims_data_m_test.state,
        tmp_ims_data_m_test.zip,
        tmp_ims_data_m_test.data_date,
        tmp_ims_data_m_test.row_num
 FROM sandbox.tmp_ims_data_m_test
 ORDER BY tmp_ims_data_m_test.sales_force_id,
          tmp_ims_data_m_test.ims_id
SEGMENTED BY hash(tmp_ims_data_m_test.sales_force_id, tmp_ims_data_m_test.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_ims_data_final_test_b0 /*+basename(tmp_ims_data_final_test),createtype(A)*/ 
(
 sales_force_id,
 ims_id,
 me_num,
 specialty,
 last_name,
 first_name,
 middle_name,
 address,
 city,
 state,
 zip
)
AS
 SELECT tmp_ims_data_final_test.sales_force_id,
        tmp_ims_data_final_test.ims_id,
        tmp_ims_data_final_test.me_num,
        tmp_ims_data_final_test.specialty,
        tmp_ims_data_final_test.last_name,
        tmp_ims_data_final_test.first_name,
        tmp_ims_data_final_test.middle_name,
        tmp_ims_data_final_test.address,
        tmp_ims_data_final_test.city,
        tmp_ims_data_final_test.state,
        tmp_ims_data_final_test.zip
 FROM sandbox.tmp_ims_data_final_test
 ORDER BY tmp_ims_data_final_test.sales_force_id,
          tmp_ims_data_final_test.ims_id,
          tmp_ims_data_final_test.me_num,
          tmp_ims_data_final_test.specialty,
          tmp_ims_data_final_test.last_name,
          tmp_ims_data_final_test.first_name,
          tmp_ims_data_final_test.middle_name,
          tmp_ims_data_final_test.address,
          tmp_ims_data_final_test.city,
          tmp_ims_data_final_test.state,
          tmp_ims_data_final_test.zip
SEGMENTED BY hash(tmp_ims_data_final_test.sales_force_id, tmp_ims_data_final_test.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_tn_align_test_b0 /*+basename(tmp_tn_align_test),createtype(A)*/ 
(
 veeva_account_id,
 ims_id,
 veeva_address_id,
 address_line1,
 address_line2,
 address_line3,
 city,
 state,
 zip,
 phone,
 territory_number,
 territory_type,
 address_source,
 sfa_create_date,
 sfa_align_date,
 last_call_date,
 last_call_this_sales_force,
 rnk
)
AS
 SELECT tmp_tn_align_test.veeva_account_id,
        tmp_tn_align_test.ims_id,
        tmp_tn_align_test.veeva_address_id,
        tmp_tn_align_test.address_line1,
        tmp_tn_align_test.address_line2,
        tmp_tn_align_test.address_line3,
        tmp_tn_align_test.city,
        tmp_tn_align_test.state,
        tmp_tn_align_test.zip,
        tmp_tn_align_test.phone,
        tmp_tn_align_test.territory_number,
        tmp_tn_align_test.territory_type,
        tmp_tn_align_test.address_source,
        tmp_tn_align_test.sfa_create_date,
        tmp_tn_align_test.sfa_align_date,
        tmp_tn_align_test.last_call_date,
        tmp_tn_align_test.last_call_this_sales_force,
        tmp_tn_align_test.rnk
 FROM sandbox.tmp_tn_align_test
 ORDER BY tmp_tn_align_test.ims_id
SEGMENTED BY hash(tmp_tn_align_test.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_tn_calls_test_b0 /*+basename(tmp_tn_calls_test),createtype(A)*/ 
(
 sales_force_id,
 ims_id,
 veeva_account_id,
 org,
 address_line1,
 address_line2,
 address_line3,
 city,
 state,
 zip,
 veeva_address_id,
 phone,
 territory_number,
 address_source,
 rnk
)
AS
 SELECT tmp_tn_calls_test.sales_force_id,
        tmp_tn_calls_test.ims_id,
        tmp_tn_calls_test.veeva_account_id,
        tmp_tn_calls_test.org,
        tmp_tn_calls_test.address_line1,
        tmp_tn_calls_test.address_line2,
        tmp_tn_calls_test.address_line3,
        tmp_tn_calls_test.city,
        tmp_tn_calls_test.state,
        tmp_tn_calls_test.zip,
        tmp_tn_calls_test.veeva_address_id,
        tmp_tn_calls_test.phone,
        tmp_tn_calls_test.territory_number,
        tmp_tn_calls_test.address_source,
        tmp_tn_calls_test.rnk
 FROM sandbox.tmp_tn_calls_test
 ORDER BY tmp_tn_calls_test.ims_id
SEGMENTED BY hash(tmp_tn_calls_test.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_tp_align_test_b0 /*+basename(tmp_tp_align_test),createtype(A)*/ 
(
 veeva_account_id,
 ims_id,
 veeva_address_id,
 address_line1,
 address_line2,
 address_line3,
 city,
 state,
 zip,
 phone,
 territory_number,
 territory_type,
 address_source,
 sfa_create_date,
 sfa_align_date,
 last_call_date,
 last_call_this_sales_force,
 rnk
)
AS
 SELECT tmp_tp_align_test.veeva_account_id,
        tmp_tp_align_test.ims_id,
        tmp_tp_align_test.veeva_address_id,
        tmp_tp_align_test.address_line1,
        tmp_tp_align_test.address_line2,
        tmp_tp_align_test.address_line3,
        tmp_tp_align_test.city,
        tmp_tp_align_test.state,
        tmp_tp_align_test.zip,
        tmp_tp_align_test.phone,
        tmp_tp_align_test.territory_number,
        tmp_tp_align_test.territory_type,
        tmp_tp_align_test.address_source,
        tmp_tp_align_test.sfa_create_date,
        tmp_tp_align_test.sfa_align_date,
        tmp_tp_align_test.last_call_date,
        tmp_tp_align_test.last_call_this_sales_force,
        tmp_tp_align_test.rnk
 FROM sandbox.tmp_tp_align_test
 ORDER BY tmp_tp_align_test.ims_id
SEGMENTED BY hash(tmp_tp_align_test.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_tp_calls_test_b0 /*+basename(tmp_tp_calls_test),createtype(A)*/ 
(
 sales_force_id,
 ims_id,
 veeva_account_id,
 org,
 address_line1,
 address_line2,
 address_line3,
 city,
 state,
 zip,
 veeva_address_id,
 phone,
 territory_number,
 address_source,
 rnk
)
AS
 SELECT tmp_tp_calls_test.sales_force_id,
        tmp_tp_calls_test.ims_id,
        tmp_tp_calls_test.veeva_account_id,
        tmp_tp_calls_test.org,
        tmp_tp_calls_test.address_line1,
        tmp_tp_calls_test.address_line2,
        tmp_tp_calls_test.address_line3,
        tmp_tp_calls_test.city,
        tmp_tp_calls_test.state,
        tmp_tp_calls_test.zip,
        tmp_tp_calls_test.veeva_address_id,
        tmp_tp_calls_test.phone,
        tmp_tp_calls_test.territory_number,
        tmp_tp_calls_test.address_source,
        tmp_tp_calls_test.rnk
 FROM sandbox.tmp_tp_calls_test
 ORDER BY tmp_tp_calls_test.ims_id
SEGMENTED BY hash(tmp_tp_calls_test.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_tr_align_test_b0 /*+basename(tmp_tr_align_test),createtype(A)*/ 
(
 veeva_account_id,
 ims_id,
 veeva_address_id,
 address_line1,
 address_line2,
 address_line3,
 city,
 state,
 zip,
 phone,
 territory_number,
 territory_type,
 address_source,
 sfa_create_date,
 sfa_align_date,
 last_call_date,
 last_call_this_sales_force,
 rnk
)
AS
 SELECT tmp_tr_align_test.veeva_account_id,
        tmp_tr_align_test.ims_id,
        tmp_tr_align_test.veeva_address_id,
        tmp_tr_align_test.address_line1,
        tmp_tr_align_test.address_line2,
        tmp_tr_align_test.address_line3,
        tmp_tr_align_test.city,
        tmp_tr_align_test.state,
        tmp_tr_align_test.zip,
        tmp_tr_align_test.phone,
        tmp_tr_align_test.territory_number,
        tmp_tr_align_test.territory_type,
        tmp_tr_align_test.address_source,
        tmp_tr_align_test.sfa_create_date,
        tmp_tr_align_test.sfa_align_date,
        tmp_tr_align_test.last_call_date,
        tmp_tr_align_test.last_call_this_sales_force,
        tmp_tr_align_test.rnk
 FROM sandbox.tmp_tr_align_test
 ORDER BY tmp_tr_align_test.ims_id
SEGMENTED BY hash(tmp_tr_align_test.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_tr_calls_test_b0 /*+basename(tmp_tr_calls_test),createtype(A)*/ 
(
 sales_force_id,
 ims_id,
 veeva_account_id,
 org,
 address_line1,
 address_line2,
 address_line3,
 city,
 state,
 zip,
 veeva_address_id,
 phone,
 territory_number,
 address_source,
 rnk
)
AS
 SELECT tmp_tr_calls_test.sales_force_id,
        tmp_tr_calls_test.ims_id,
        tmp_tr_calls_test.veeva_account_id,
        tmp_tr_calls_test.org,
        tmp_tr_calls_test.address_line1,
        tmp_tr_calls_test.address_line2,
        tmp_tr_calls_test.address_line3,
        tmp_tr_calls_test.city,
        tmp_tr_calls_test.state,
        tmp_tr_calls_test.zip,
        tmp_tr_calls_test.veeva_address_id,
        tmp_tr_calls_test.phone,
        tmp_tr_calls_test.territory_number,
        tmp_tr_calls_test.address_source,
        tmp_tr_calls_test.rnk
 FROM sandbox.tmp_tr_calls_test
 ORDER BY tmp_tr_calls_test.ims_id
SEGMENTED BY hash(tmp_tr_calls_test.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_tw_calls_test_b0 /*+basename(tmp_tw_calls_test),createtype(A)*/ 
(
 sales_force_id,
 ims_id,
 veeva_account_id,
 org,
 address_line1,
 address_line2,
 address_line3,
 city,
 state,
 zip,
 veeva_address_id,
 phone,
 territory_number,
 address_source,
 rnk
)
AS
 SELECT tmp_tw_calls_test.sales_force_id,
        tmp_tw_calls_test.ims_id,
        tmp_tw_calls_test.veeva_account_id,
        tmp_tw_calls_test.org,
        tmp_tw_calls_test.address_line1,
        tmp_tw_calls_test.address_line2,
        tmp_tw_calls_test.address_line3,
        tmp_tw_calls_test.city,
        tmp_tw_calls_test.state,
        tmp_tw_calls_test.zip,
        tmp_tw_calls_test.veeva_address_id,
        tmp_tw_calls_test.phone,
        tmp_tw_calls_test.territory_number,
        tmp_tw_calls_test.address_source,
        tmp_tw_calls_test.rnk
 FROM sandbox.tmp_tw_calls_test
 ORDER BY tmp_tw_calls_test.ims_id
SEGMENTED BY hash(tmp_tw_calls_test.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_territory_test_b0 /*+basename(tmp_territory_test),createtype(A)*/ 
(
 sales_force_id,
 ims_id,
 veeva_account_id,
 specialty,
 first_name,
 middle_name,
 last_name,
 ptr_veeva_address_id,
 ptr_address_1,
 ptr_city,
 ptr_state,
 ptr_zip,
 ptr_phone,
 ptr_territory_num,
 ptr_territory_type,
 ptr_address_source,
 ptr_mailable,
 dea_num,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 email,
 degree,
 npi,
 tvcmid,
 ptr_address_2,
 ptr_address_3,
 territory_number,
 territory_type
)
AS
 SELECT tmp_territory_test.sales_force_id,
        tmp_territory_test.ims_id,
        tmp_territory_test.veeva_account_id,
        tmp_territory_test.specialty,
        tmp_territory_test.first_name,
        tmp_territory_test.middle_name,
        tmp_territory_test.last_name,
        tmp_territory_test.ptr_veeva_address_id,
        tmp_territory_test.ptr_address_1,
        tmp_territory_test.ptr_city,
        tmp_territory_test.ptr_state,
        tmp_territory_test.ptr_zip,
        tmp_territory_test.ptr_phone,
        tmp_territory_test.ptr_territory_num,
        tmp_territory_test.ptr_territory_type,
        tmp_territory_test.ptr_address_source,
        tmp_territory_test.ptr_mailable,
        tmp_territory_test.dea_num,
        tmp_territory_test.pdrp_flag,
        tmp_territory_test.pdrp_date,
        tmp_territory_test.np_pa_flag,
        tmp_territory_test.no_spend,
        tmp_territory_test.ama_no_contact_flag,
        tmp_territory_test.email,
        tmp_territory_test.degree,
        tmp_territory_test.npi,
        tmp_territory_test.tvcmid,
        tmp_territory_test.ptr_address_2,
        tmp_territory_test.ptr_address_3,
        tmp_territory_test.territory_number,
        tmp_territory_test.territory_type
 FROM sandbox.tmp_territory_test
 ORDER BY tmp_territory_test.sales_force_id,
          tmp_territory_test.ims_id,
          tmp_territory_test.veeva_account_id,
          tmp_territory_test.specialty,
          tmp_territory_test.first_name,
          tmp_territory_test.middle_name,
          tmp_territory_test.last_name,
          tmp_territory_test.ptr_veeva_address_id,
          tmp_territory_test.ptr_address_1,
          tmp_territory_test.ptr_city,
          tmp_territory_test.ptr_state,
          tmp_territory_test.ptr_zip,
          tmp_territory_test.ptr_phone,
          tmp_territory_test.ptr_territory_num,
          tmp_territory_test.ptr_territory_type,
          tmp_territory_test.ptr_address_source,
          tmp_territory_test.ptr_mailable,
          tmp_territory_test.dea_num,
          tmp_territory_test.pdrp_flag,
          tmp_territory_test.pdrp_date,
          tmp_territory_test.np_pa_flag,
          tmp_territory_test.no_spend,
          tmp_territory_test.ama_no_contact_flag,
          tmp_territory_test.email,
          tmp_territory_test.degree,
          tmp_territory_test.npi,
          tmp_territory_test.tvcmid,
          tmp_territory_test.ptr_address_2,
          tmp_territory_test.ptr_address_3,
          tmp_territory_test.territory_number,
          tmp_territory_test.territory_type
SEGMENTED BY hash(tmp_territory_test.ptr_state, tmp_territory_test.ptr_zip, tmp_territory_test.ptr_mailable, tmp_territory_test.pdrp_flag, tmp_territory_test.pdrp_date, tmp_territory_test.np_pa_flag, tmp_territory_test.no_spend, tmp_territory_test.ama_no_contact_flag, tmp_territory_test.tvcmid, tmp_territory_test.ims_id, tmp_territory_test.dea_num, tmp_territory_test.degree, tmp_territory_test.npi, tmp_territory_test.ptr_territory_num, tmp_territory_test.sales_force_id, tmp_territory_test.veeva_account_id, tmp_territory_test.ptr_veeva_address_id, tmp_territory_test.ptr_territory_type, tmp_territory_test.ptr_address_source, tmp_territory_test.ptr_phone, tmp_territory_test.first_name, tmp_territory_test.middle_name, tmp_territory_test.last_name, tmp_territory_test.ptr_city, tmp_territory_test.ptr_address_1, tmp_territory_test.email, tmp_territory_test.ptr_address_2, tmp_territory_test.ptr_address_3, tmp_territory_test.specialty) ALL NODES;

CREATE PROJECTION sandbox.tmp_veeva_id_test_b0 /*+basename(tmp_veeva_id_test),createtype(A)*/ 
(
 tvcmid,
 veeva_account_id
)
AS
 SELECT tmp_veeva_id_test.tvcmid,
        tmp_veeva_id_test.veeva_account_id
 FROM sandbox.tmp_veeva_id_test
 ORDER BY tmp_veeva_id_test.tvcmid
SEGMENTED BY hash(tmp_veeva_id_test.tvcmid) ALL NODES;

CREATE PROJECTION sandbox.tmp_dup_tvcmid_b0 /*+basename(tmp_dup_tvcmid),createtype(A)*/ 
(
 tvcmid,
 sales_force_id,
 count
)
AS
 SELECT tmp_dup_tvcmid.tvcmid,
        tmp_dup_tvcmid.sales_force_id,
        tmp_dup_tvcmid.count
 FROM sandbox.tmp_dup_tvcmid
 ORDER BY tmp_dup_tvcmid.tvcmid,
          tmp_dup_tvcmid.sales_force_id
SEGMENTED BY hash(tmp_dup_tvcmid.tvcmid, tmp_dup_tvcmid.sales_force_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_dup_outlet_b0 /*+basename(tmp_dup_outlet),createtype(A)*/ 
(
 tvcmid,
 outlet_code,
 ims_facility_number,
 ims_prescriber_number,
 sales_force_id
)
AS
 SELECT tmp_dup_outlet.tvcmid,
        tmp_dup_outlet.outlet_code,
        tmp_dup_outlet.ims_facility_number,
        tmp_dup_outlet.ims_prescriber_number,
        tmp_dup_outlet.sales_force_id
 FROM sandbox.tmp_dup_outlet
 ORDER BY tmp_dup_outlet.tvcmid,
          tmp_dup_outlet.outlet_code,
          tmp_dup_outlet.ims_facility_number,
          tmp_dup_outlet.ims_prescriber_number,
          tmp_dup_outlet.sales_force_id
SEGMENTED BY hash(tmp_dup_outlet.tvcmid, tmp_dup_outlet.ims_prescriber_number, tmp_dup_outlet.sales_force_id, tmp_dup_outlet.outlet_code, tmp_dup_outlet.ims_facility_number) ALL NODES;

CREATE PROJECTION sandbox.tmp_ddd_qty_b0 /*+basename(tmp_ddd_qty),createtype(A)*/ 
(
 tvcmid,
 outlet_code,
 ims_facility_number,
 ims_prescriber_number,
 sales_force_id,
 quantity
)
AS
 SELECT tmp_ddd_qty.tvcmid,
        tmp_ddd_qty.outlet_code,
        tmp_ddd_qty.ims_facility_number,
        tmp_ddd_qty.ims_prescriber_number,
        tmp_ddd_qty.sales_force_id,
        tmp_ddd_qty.quantity
 FROM sandbox.tmp_ddd_qty
 ORDER BY tmp_ddd_qty.tvcmid,
          tmp_ddd_qty.outlet_code,
          tmp_ddd_qty.ims_facility_number,
          tmp_ddd_qty.ims_prescriber_number,
          tmp_ddd_qty.sales_force_id
SEGMENTED BY hash(tmp_ddd_qty.tvcmid, tmp_ddd_qty.outlet_code, tmp_ddd_qty.ims_facility_number, tmp_ddd_qty.ims_prescriber_number, tmp_ddd_qty.sales_force_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_ddd_md_qty_b0 /*+basename(tmp_ddd_md_qty),createtype(A)*/ 
(
 tvcmid,
 outlet_code,
 ims_prescriber_number,
 ims_facility_number,
 sales_force_id,
 quantity
)
AS
 SELECT tmp_ddd_md_qty.tvcmid,
        tmp_ddd_md_qty.outlet_code,
        tmp_ddd_md_qty.ims_prescriber_number,
        tmp_ddd_md_qty.ims_facility_number,
        tmp_ddd_md_qty.sales_force_id,
        tmp_ddd_md_qty.quantity
 FROM sandbox.tmp_ddd_md_qty
 ORDER BY tmp_ddd_md_qty.tvcmid,
          tmp_ddd_md_qty.outlet_code,
          tmp_ddd_md_qty.ims_facility_number,
          tmp_ddd_md_qty.ims_prescriber_number,
          tmp_ddd_md_qty.sales_force_id
SEGMENTED BY hash(tmp_ddd_md_qty.tvcmid, tmp_ddd_md_qty.outlet_code, tmp_ddd_md_qty.ims_facility_number, tmp_ddd_md_qty.ims_prescriber_number, tmp_ddd_md_qty.sales_force_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_tvcmid_combine_b0 /*+basename(tmp_tvcmid_combine),createtype(A)*/ 
(
 outlet_code,
 ims_prescriber_number,
 ims_facility_number,
 sales_force_id,
 tvcmid,
 quantity
)
AS
 SELECT tmp_tvcmid_combine.outlet_code,
        tmp_tvcmid_combine.ims_prescriber_number,
        tmp_tvcmid_combine.ims_facility_number,
        tmp_tvcmid_combine.sales_force_id,
        tmp_tvcmid_combine.tvcmid,
        tmp_tvcmid_combine.quantity
 FROM sandbox.tmp_tvcmid_combine
 ORDER BY tmp_tvcmid_combine.outlet_code,
          tmp_tvcmid_combine.tvcmid,
          tmp_tvcmid_combine.ims_prescriber_number,
          tmp_tvcmid_combine.ims_facility_number,
          tmp_tvcmid_combine.sales_force_id
SEGMENTED BY hash(tmp_tvcmid_combine.tvcmid, tmp_tvcmid_combine.outlet_code, tmp_tvcmid_combine.ims_facility_number, tmp_tvcmid_combine.ims_prescriber_number, tmp_tvcmid_combine.sales_force_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_tvcmid_combine_final_b0 /*+basename(tmp_tvcmid_combine_final),createtype(A)*/ 
(
 outlet_code,
 ims_prescriber_number,
 ims_facility_number,
 sales_force_id,
 tvcmid
)
AS
 SELECT tmp_tvcmid_combine_final.outlet_code,
        tmp_tvcmid_combine_final.ims_prescriber_number,
        tmp_tvcmid_combine_final.ims_facility_number,
        tmp_tvcmid_combine_final.sales_force_id,
        tmp_tvcmid_combine_final.tvcmid
 FROM sandbox.tmp_tvcmid_combine_final
 ORDER BY tmp_tvcmid_combine_final.tvcmid
SEGMENTED BY hash(tmp_tvcmid_combine_final.tvcmid) ALL NODES;

CREATE PROJECTION sandbox.tmp_remaining_dup_tvcmid_no_sales_b0 /*+basename(tmp_remaining_dup_tvcmid_no_sales),createtype(A)*/ 
(
 tvcmid,
 sales_force_id
)
AS
 SELECT tmp_remaining_dup_tvcmid_no_sales.tvcmid,
        tmp_remaining_dup_tvcmid_no_sales.sales_force_id
 FROM sandbox.tmp_remaining_dup_tvcmid_no_sales
 ORDER BY tmp_remaining_dup_tvcmid_no_sales.tvcmid,
          tmp_remaining_dup_tvcmid_no_sales.sales_force_id
SEGMENTED BY hash(tmp_remaining_dup_tvcmid_no_sales.tvcmid, tmp_remaining_dup_tvcmid_no_sales.sales_force_id) ALL NODES;

CREATE PROJECTION sandbox.tmp_no_sales_data_b0 /*+basename(tmp_no_sales_data),createtype(A)*/ 
(
 account_demo_id,
 outlet_code,
 ims_facility_number,
 ims_prescriber_number,
 category_code,
 subcategory_code,
 alignment_zip,
 outlet_name,
 outlet_address,
 outlet_city,
 outlet_state,
 outlet_zip,
 facility_name,
 facility_address1,
 facility_address2,
 facility_address3,
 facility_address4,
 facility_city,
 facility_state,
 facility_zip,
 prescriber_name,
 prescriber_address1,
 prescriber_address2,
 prescriber_address3,
 prescriber_address4,
 prescriber_city,
 prescriber_state,
 prescriber_zip,
 account_status,
 tvcmid,
 sales_force_id,
 outlet_tvcmid,
 facility_tvcmid,
 prescriber_tvcmid,
 tvcmid_assignment_rule,
 row_num
)
AS
 SELECT tmp_no_sales_data.account_demo_id,
        tmp_no_sales_data.outlet_code,
        tmp_no_sales_data.ims_facility_number,
        tmp_no_sales_data.ims_prescriber_number,
        tmp_no_sales_data.category_code,
        tmp_no_sales_data.subcategory_code,
        tmp_no_sales_data.alignment_zip,
        tmp_no_sales_data.outlet_name,
        tmp_no_sales_data.outlet_address,
        tmp_no_sales_data.outlet_city,
        tmp_no_sales_data.outlet_state,
        tmp_no_sales_data.outlet_zip,
        tmp_no_sales_data.facility_name,
        tmp_no_sales_data.facility_address1,
        tmp_no_sales_data.facility_address2,
        tmp_no_sales_data.facility_address3,
        tmp_no_sales_data.facility_address4,
        tmp_no_sales_data.facility_city,
        tmp_no_sales_data.facility_state,
        tmp_no_sales_data.facility_zip,
        tmp_no_sales_data.prescriber_name,
        tmp_no_sales_data.prescriber_address1,
        tmp_no_sales_data.prescriber_address2,
        tmp_no_sales_data.prescriber_address3,
        tmp_no_sales_data.prescriber_address4,
        tmp_no_sales_data.prescriber_city,
        tmp_no_sales_data.prescriber_state,
        tmp_no_sales_data.prescriber_zip,
        tmp_no_sales_data.account_status,
        tmp_no_sales_data.tvcmid,
        tmp_no_sales_data.sales_force_id,
        tmp_no_sales_data.outlet_tvcmid,
        tmp_no_sales_data.facility_tvcmid,
        tmp_no_sales_data.prescriber_tvcmid,
        tmp_no_sales_data.tvcmid_assignment_rule,
        tmp_no_sales_data.row_num
 FROM sandbox.tmp_no_sales_data
 ORDER BY tmp_no_sales_data.tvcmid,
          tmp_no_sales_data.outlet_code,
          tmp_no_sales_data.row_num
SEGMENTED BY hash(tmp_no_sales_data.tvcmid) ALL NODES;

CREATE PROJECTION sandbox.tmp_roster_b0 /*+basename(tmp_roster),createtype(A)*/ 
(
 employee_id,
 territory_num,
 territory_name,
 team,
 hire_dt_rnk,
 sales_force_id,
 full_name,
 last_name,
 first_name,
 middle_name,
 person_title,
 name_suffix,
 address_line1,
 address_line2,
 city,
 state,
 zip,
 bus_address_line1,
 bus_address_line2,
 bus_city,
 bus_state,
 bus_zip,
 ship_address_line1,
 ship_address_line2,
 ship_city,
 ship_state,
 ship_zip,
 business_phone,
 home_phone,
 cell_phone,
 fax,
 voice_mail_ext,
 email,
 hire_date,
 title,
 stat_code,
 payroll_cost_ctr,
 rep_type,
 area_trainer,
 username,
 out_of_territory,
 parent_territory_num
)
AS
 SELECT tmp_roster.employee_id,
        tmp_roster.territory_num,
        tmp_roster.territory_name,
        tmp_roster.team,
        tmp_roster.hire_dt_rnk,
        tmp_roster.sales_force_id,
        tmp_roster.full_name,
        tmp_roster.last_name,
        tmp_roster.first_name,
        tmp_roster.middle_name,
        tmp_roster.person_title,
        tmp_roster.name_suffix,
        tmp_roster.address_line1,
        tmp_roster.address_line2,
        tmp_roster.city,
        tmp_roster.state,
        tmp_roster.zip,
        tmp_roster.bus_address_line1,
        tmp_roster.bus_address_line2,
        tmp_roster.bus_city,
        tmp_roster.bus_state,
        tmp_roster.bus_zip,
        tmp_roster.ship_address_line1,
        tmp_roster.ship_address_line2,
        tmp_roster.ship_city,
        tmp_roster.ship_state,
        tmp_roster.ship_zip,
        tmp_roster.business_phone,
        tmp_roster.home_phone,
        tmp_roster.cell_phone,
        tmp_roster.fax,
        tmp_roster.voice_mail_ext,
        tmp_roster.email,
        tmp_roster.hire_date,
        tmp_roster.title,
        tmp_roster.stat_code,
        tmp_roster.payroll_cost_ctr,
        tmp_roster.rep_type,
        tmp_roster.area_trainer,
        tmp_roster.username,
        tmp_roster.out_of_territory,
        tmp_roster.parent_territory_num
 FROM sandbox.tmp_roster
 ORDER BY tmp_roster.territory_num,
          tmp_roster.hire_date,
          tmp_roster.hire_dt_rnk
SEGMENTED BY hash(tmp_roster.territory_num) ALL NODES;

CREATE PROJECTION sandbox.tmp_roster2_b0 /*+basename(tmp_roster2),createtype(A)*/ 
(
 employee_id,
 orig_hire_dt,
 rehire_dt
)
AS
 SELECT tmp_roster2.employee_id,
        tmp_roster2.orig_hire_dt,
        tmp_roster2.rehire_dt
 FROM sandbox.tmp_roster2
 ORDER BY tmp_roster2.employee_id,
          tmp_roster2.orig_hire_dt,
          tmp_roster2.rehire_dt
SEGMENTED BY hash(tmp_roster2.employee_id, tmp_roster2.orig_hire_dt, tmp_roster2.rehire_dt) ALL NODES;

CREATE PROJECTION sandbox.qc_table_stats_b0 /*+basename(qc_table_stats),createtype(L)*/ 
(
 log_date,
 table_schema,
 table_name,
 row_count,
 used_bytes,
 null_tvcmid_count,
 null_basket_id_count,
 unique_file_ids,
 max_file_id
)
AS
 SELECT qc_table_stats.log_date,
        qc_table_stats.table_schema,
        qc_table_stats.table_name,
        qc_table_stats.row_count,
        qc_table_stats.used_bytes,
        qc_table_stats.null_tvcmid_count,
        qc_table_stats.null_basket_id_count,
        qc_table_stats.unique_file_ids,
        qc_table_stats.max_file_id
 FROM sandbox.qc_table_stats
 ORDER BY qc_table_stats.table_schema,
          qc_table_stats.table_name
SEGMENTED BY hash(qc_table_stats.log_date, qc_table_stats.table_schema, qc_table_stats.table_name) ALL NODES;

CREATE PROJECTION sandbox.compliance_speaker_list_b0 /*+basename(compliance_speaker_list),createtype(L)*/ 
(
 tvcmid,
 npi,
 Last_Name,
 First_Name,
 Middle_Initial,
 Address,
 City,
 State,
 Zip,
 speaker_affiliation
)
AS
 SELECT compliance_speaker_list.tvcmid,
        compliance_speaker_list.npi,
        compliance_speaker_list.Last_Name,
        compliance_speaker_list.First_Name,
        compliance_speaker_list.Middle_Initial,
        compliance_speaker_list.Address,
        compliance_speaker_list.City,
        compliance_speaker_list.State,
        compliance_speaker_list.Zip,
        compliance_speaker_list.speaker_affiliation
 FROM sandbox.compliance_speaker_list
 ORDER BY compliance_speaker_list.tvcmid,
          compliance_speaker_list.npi,
          compliance_speaker_list.Last_Name,
          compliance_speaker_list.First_Name,
          compliance_speaker_list.Middle_Initial,
          compliance_speaker_list.Address,
          compliance_speaker_list.City,
          compliance_speaker_list.State,
          compliance_speaker_list.Zip,
          compliance_speaker_list.speaker_affiliation
SEGMENTED BY hash(compliance_speaker_list.tvcmid, compliance_speaker_list.Middle_Initial, compliance_speaker_list.Zip, compliance_speaker_list.npi, compliance_speaker_list.Last_Name, compliance_speaker_list.First_Name, compliance_speaker_list.City, compliance_speaker_list.State, compliance_speaker_list.Address, compliance_speaker_list.speaker_affiliation) ALL NODES;

CREATE PROJECTION sandbox.tmp_mil_roster_b0 /*+basename(tmp_mil_roster),createtype(A)*/ 
(
 SALES_FORCE_ID,
 REP_TYPE,
 TERRITORY_NUM,
 LAST_NAME,
 FIRST_NAME,
 SHIP_ADDRESS_LINE1,
 SHIP_ADDRESS_LINE2,
 SHIP_CITY,
 SHIP_STATE,
 SHIP_ZIP,
 PHONE,
 EMAIL,
 DISTRICT,
 REGION
)
AS
 SELECT tmp_mil_roster.SALES_FORCE_ID,
        tmp_mil_roster.REP_TYPE,
        tmp_mil_roster.TERRITORY_NUM,
        tmp_mil_roster.LAST_NAME,
        tmp_mil_roster.FIRST_NAME,
        tmp_mil_roster.SHIP_ADDRESS_LINE1,
        tmp_mil_roster.SHIP_ADDRESS_LINE2,
        tmp_mil_roster.SHIP_CITY,
        tmp_mil_roster.SHIP_STATE,
        tmp_mil_roster.SHIP_ZIP,
        tmp_mil_roster.PHONE,
        tmp_mil_roster.EMAIL,
        tmp_mil_roster.DISTRICT,
        tmp_mil_roster.REGION
 FROM sandbox.tmp_mil_roster
 ORDER BY tmp_mil_roster.LAST_NAME
SEGMENTED BY hash(tmp_mil_roster.SALES_FORCE_ID, tmp_mil_roster.REP_TYPE, tmp_mil_roster.TERRITORY_NUM, tmp_mil_roster.LAST_NAME, tmp_mil_roster.FIRST_NAME, tmp_mil_roster.SHIP_ADDRESS_LINE1, tmp_mil_roster.SHIP_ADDRESS_LINE2, tmp_mil_roster.SHIP_CITY, tmp_mil_roster.SHIP_STATE, tmp_mil_roster.SHIP_ZIP, tmp_mil_roster.PHONE, tmp_mil_roster.EMAIL, tmp_mil_roster.DISTRICT, tmp_mil_roster.REGION) ALL NODES;

CREATE PROJECTION sandbox.data_feed_metadata_bkp_b0 /*+basename(data_feed_metadata_bkp),createtype(A)*/ 
(
 feed_id,
 short_name,
 subject_area,
 source_name,
 description,
 frequency,
 incremental,
 process_cleanse,
 process_intg,
 source_id
)
AS
 SELECT data_feed_metadata_bkp.feed_id,
        data_feed_metadata_bkp.short_name,
        data_feed_metadata_bkp.subject_area,
        data_feed_metadata_bkp.source_name,
        data_feed_metadata_bkp.description,
        data_feed_metadata_bkp.frequency,
        data_feed_metadata_bkp.incremental,
        data_feed_metadata_bkp.process_cleanse,
        data_feed_metadata_bkp.process_intg,
        data_feed_metadata_bkp.source_id
 FROM sandbox.data_feed_metadata_bkp
 ORDER BY data_feed_metadata_bkp.feed_id,
          data_feed_metadata_bkp.short_name,
          data_feed_metadata_bkp.subject_area,
          data_feed_metadata_bkp.source_name,
          data_feed_metadata_bkp.description,
          data_feed_metadata_bkp.frequency,
          data_feed_metadata_bkp.incremental,
          data_feed_metadata_bkp.process_cleanse,
          data_feed_metadata_bkp.process_intg
SEGMENTED BY hash(data_feed_metadata_bkp.feed_id, data_feed_metadata_bkp.incremental, data_feed_metadata_bkp.process_cleanse, data_feed_metadata_bkp.process_intg, data_feed_metadata_bkp.short_name, data_feed_metadata_bkp.subject_area, data_feed_metadata_bkp.source_name, data_feed_metadata_bkp.description, data_feed_metadata_bkp.frequency) ALL NODES;

CREATE PROJECTION sandbox.scd_prescriber_combined_demographics_b0 /*+basename(scd_prescriber_combined_demographics),createtype(L)*/ 
(
 scd_status,
 scd_effective_date,
 scd_expiration_date,
 sales_force_id,
 ims_id,
 npi,
 tvcmid,
 veeva_account_id,
 specialty,
 first_name,
 middle_name,
 last_name,
 ptr_veeva_address_id,
 ptr_address_1,
 ptr_address_2,
 ptr_address_3,
 ptr_city,
 ptr_state,
 ptr_zip,
 ptr_phone,
 ptr_territory_num,
 ptr_territory_type,
 ptr_address_source,
 ptr_mailable,
 dea_num,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 email,
 degree,
 address_id,
 address_latitude,
 address_longitude,
 row_source
)
AS
 SELECT scd_prescriber_combined_demographics.scd_status,
        scd_prescriber_combined_demographics.scd_effective_date,
        scd_prescriber_combined_demographics.scd_expiration_date,
        scd_prescriber_combined_demographics.sales_force_id,
        scd_prescriber_combined_demographics.ims_id,
        scd_prescriber_combined_demographics.npi,
        scd_prescriber_combined_demographics.tvcmid,
        scd_prescriber_combined_demographics.veeva_account_id,
        scd_prescriber_combined_demographics.specialty,
        scd_prescriber_combined_demographics.first_name,
        scd_prescriber_combined_demographics.middle_name,
        scd_prescriber_combined_demographics.last_name,
        scd_prescriber_combined_demographics.ptr_veeva_address_id,
        scd_prescriber_combined_demographics.ptr_address_1,
        scd_prescriber_combined_demographics.ptr_address_2,
        scd_prescriber_combined_demographics.ptr_address_3,
        scd_prescriber_combined_demographics.ptr_city,
        scd_prescriber_combined_demographics.ptr_state,
        scd_prescriber_combined_demographics.ptr_zip,
        scd_prescriber_combined_demographics.ptr_phone,
        scd_prescriber_combined_demographics.ptr_territory_num,
        scd_prescriber_combined_demographics.ptr_territory_type,
        scd_prescriber_combined_demographics.ptr_address_source,
        scd_prescriber_combined_demographics.ptr_mailable,
        scd_prescriber_combined_demographics.dea_num,
        scd_prescriber_combined_demographics.pdrp_flag,
        scd_prescriber_combined_demographics.pdrp_date,
        scd_prescriber_combined_demographics.np_pa_flag,
        scd_prescriber_combined_demographics.no_spend,
        scd_prescriber_combined_demographics.ama_no_contact_flag,
        scd_prescriber_combined_demographics.email,
        scd_prescriber_combined_demographics.degree,
        scd_prescriber_combined_demographics.address_id,
        scd_prescriber_combined_demographics.address_latitude,
        scd_prescriber_combined_demographics.address_longitude,
        scd_prescriber_combined_demographics.row_source
 FROM sandbox.scd_prescriber_combined_demographics
 ORDER BY scd_prescriber_combined_demographics.sales_force_id,
          scd_prescriber_combined_demographics.ims_id,
          scd_prescriber_combined_demographics.npi,
          scd_prescriber_combined_demographics.tvcmid,
          scd_prescriber_combined_demographics.veeva_account_id,
          scd_prescriber_combined_demographics.specialty,
          scd_prescriber_combined_demographics.first_name,
          scd_prescriber_combined_demographics.middle_name,
          scd_prescriber_combined_demographics.last_name,
          scd_prescriber_combined_demographics.ptr_veeva_address_id,
          scd_prescriber_combined_demographics.ptr_address_1,
          scd_prescriber_combined_demographics.ptr_address_2,
          scd_prescriber_combined_demographics.ptr_address_3,
          scd_prescriber_combined_demographics.ptr_city,
          scd_prescriber_combined_demographics.ptr_state,
          scd_prescriber_combined_demographics.ptr_zip,
          scd_prescriber_combined_demographics.ptr_phone,
          scd_prescriber_combined_demographics.ptr_territory_num,
          scd_prescriber_combined_demographics.ptr_territory_type,
          scd_prescriber_combined_demographics.ptr_address_source,
          scd_prescriber_combined_demographics.ptr_mailable,
          scd_prescriber_combined_demographics.dea_num,
          scd_prescriber_combined_demographics.pdrp_flag,
          scd_prescriber_combined_demographics.pdrp_date,
          scd_prescriber_combined_demographics.np_pa_flag,
          scd_prescriber_combined_demographics.no_spend,
          scd_prescriber_combined_demographics.ama_no_contact_flag,
          scd_prescriber_combined_demographics.email,
          scd_prescriber_combined_demographics.degree,
          scd_prescriber_combined_demographics.address_id,
          scd_prescriber_combined_demographics.address_latitude,
          scd_prescriber_combined_demographics.address_longitude,
          scd_prescriber_combined_demographics.row_source
SEGMENTED BY hash(scd_prescriber_combined_demographics.tvcmid, scd_prescriber_combined_demographics.ptr_state, scd_prescriber_combined_demographics.ptr_zip, scd_prescriber_combined_demographics.ptr_mailable, scd_prescriber_combined_demographics.pdrp_flag, scd_prescriber_combined_demographics.pdrp_date, scd_prescriber_combined_demographics.np_pa_flag, scd_prescriber_combined_demographics.no_spend, scd_prescriber_combined_demographics.ama_no_contact_flag, scd_prescriber_combined_demographics.address_id, scd_prescriber_combined_demographics.ims_id, scd_prescriber_combined_demographics.npi, scd_prescriber_combined_demographics.dea_num, scd_prescriber_combined_demographics.ptr_territory_num, scd_prescriber_combined_demographics.sales_force_id, scd_prescriber_combined_demographics.veeva_account_id, scd_prescriber_combined_demographics.ptr_veeva_address_id, scd_prescriber_combined_demographics.address_latitude, scd_prescriber_combined_demographics.address_longitude, scd_prescriber_combined_demographics.ptr_territory_type, scd_prescriber_combined_demographics.ptr_phone, scd_prescriber_combined_demographics.first_name, scd_prescriber_combined_demographics.middle_name, scd_prescriber_combined_demographics.last_name, scd_prescriber_combined_demographics.ptr_city, scd_prescriber_combined_demographics.ptr_address_source, scd_prescriber_combined_demographics.ptr_address_1, scd_prescriber_combined_demographics.ptr_address_2, scd_prescriber_combined_demographics.ptr_address_3, scd_prescriber_combined_demographics.email, scd_prescriber_combined_demographics.degree, scd_prescriber_combined_demographics.row_source) ALL NODES;

CREATE PROJECTION sandbox.ic_copay_b0 /*+basename(ic_copay),createtype(L)*/ 
(
 ic_data_month,
 basket_name,
 ims_id,
 tvcmid,
 fill_date,
 txn_id,
 rollup_month,
 month_bucket,
 days_supply,
 quantity,
 join_key,
 row_source,
 benefit_amount
)
AS
 SELECT ic_copay.ic_data_month,
        ic_copay.basket_name,
        ic_copay.ims_id,
        ic_copay.tvcmid,
        ic_copay.fill_date,
        ic_copay.txn_id,
        ic_copay.rollup_month,
        ic_copay.month_bucket,
        ic_copay.days_supply,
        ic_copay.quantity,
        ic_copay.join_key,
        ic_copay.row_source,
        ic_copay.benefit_amount
 FROM sandbox.ic_copay
 ORDER BY ic_copay.ims_id,
          ic_copay.tvcmid,
          ic_copay.txn_id
SEGMENTED BY hash(ic_copay.ic_data_month, ic_copay.tvcmid, ic_copay.fill_date, ic_copay.rollup_month, ic_copay.month_bucket, ic_copay.days_supply, ic_copay.quantity, ic_copay.ims_id, ic_copay.join_key, ic_copay.txn_id, ic_copay.row_source, ic_copay.basket_name) ALL NODES;

CREATE PROJECTION sandbox.ftf_ims_monthly_market_obm_b0 /*+basename(ftf_ims_monthly_market_obm),createtype(A)*/ 
(
 "PLAN ID",
 "PLAN NAME",
 "PAYER ID",
 "PAYER NAME",
 "MARKET NAME",
 "PRODUCT NAME",
 zip,
 DATE,
 TRX,
 NRX
)
AS
 SELECT ftf_ims_monthly_market_obm."PLAN ID",
        ftf_ims_monthly_market_obm."PLAN NAME",
        ftf_ims_monthly_market_obm."PAYER ID",
        ftf_ims_monthly_market_obm."PAYER NAME",
        ftf_ims_monthly_market_obm."MARKET NAME",
        ftf_ims_monthly_market_obm."PRODUCT NAME",
        ftf_ims_monthly_market_obm.zip,
        ftf_ims_monthly_market_obm.DATE,
        ftf_ims_monthly_market_obm.TRX,
        ftf_ims_monthly_market_obm.NRX
 FROM sandbox.ftf_ims_monthly_market_obm
 ORDER BY ftf_ims_monthly_market_obm."PLAN ID",
          ftf_ims_monthly_market_obm."PLAN NAME",
          ftf_ims_monthly_market_obm."PAYER ID",
          ftf_ims_monthly_market_obm."PAYER NAME",
          ftf_ims_monthly_market_obm."MARKET NAME",
          ftf_ims_monthly_market_obm."PRODUCT NAME",
          ftf_ims_monthly_market_obm.zip,
          ftf_ims_monthly_market_obm.DATE,
          ftf_ims_monthly_market_obm.TRX,
          ftf_ims_monthly_market_obm.NRX
SEGMENTED BY hash(ftf_ims_monthly_market_obm."PLAN ID", ftf_ims_monthly_market_obm."PLAN NAME", ftf_ims_monthly_market_obm."PAYER ID", ftf_ims_monthly_market_obm."PAYER NAME", ftf_ims_monthly_market_obm."MARKET NAME", ftf_ims_monthly_market_obm."PRODUCT NAME", ftf_ims_monthly_market_obm.zip, ftf_ims_monthly_market_obm.DATE, ftf_ims_monthly_market_obm.TRX, ftf_ims_monthly_market_obm.NRX) ALL NODES;

CREATE PROJECTION sandbox.HeadacheCenter_b0 /*+basename(HeadacheCenter),createtype(L)*/ 
(
 IMS_ID,
 TVCMID,
 First_Name,
 Middle_Name,
 Last_Name,
 Cred,
 Location,
 Address_1,
 Address_2,
 City,
 State_Code,
 Zip_Code,
 Zip_Extension,
 Telephone,
 Alternative_Telephone
)
AS
 SELECT HeadacheCenter.IMS_ID,
        HeadacheCenter.TVCMID,
        HeadacheCenter.First_Name,
        HeadacheCenter.Middle_Name,
        HeadacheCenter.Last_Name,
        HeadacheCenter.Cred,
        HeadacheCenter.Location,
        HeadacheCenter.Address_1,
        HeadacheCenter.Address_2,
        HeadacheCenter.City,
        HeadacheCenter.State_Code,
        HeadacheCenter.Zip_Code,
        HeadacheCenter.Zip_Extension,
        HeadacheCenter.Telephone,
        HeadacheCenter.Alternative_Telephone
 FROM sandbox.HeadacheCenter
 ORDER BY HeadacheCenter.IMS_ID,
          HeadacheCenter.TVCMID,
          HeadacheCenter.First_Name,
          HeadacheCenter.Middle_Name,
          HeadacheCenter.Last_Name,
          HeadacheCenter.Cred,
          HeadacheCenter.Location,
          HeadacheCenter.Address_1
SEGMENTED BY hash(HeadacheCenter.TVCMID, HeadacheCenter.IMS_ID, HeadacheCenter.First_Name, HeadacheCenter.Middle_Name, HeadacheCenter.Last_Name, HeadacheCenter.City, HeadacheCenter.State_Code, HeadacheCenter.Zip_Code) ALL NODES;

CREATE PROJECTION sandbox.TJR_DRM45_b0 /*+basename(TJR_DRM45),createtype(L)*/ 
(
 AUDIT_CODE,
 CLIENT_GROUP_DESCRIPTION,
 CLIENT_NBR,
 FILE_CODE,
 PRODUCT_GROUP_NBR,
 PRODUCT_GROUP_NAME,
 PRODUCT_CODE,
 PACK_CODE,
 PROD_DESC,
 WHOLESALE_PRICE,
 MFR_DESC,
 MFR_CODE,
 SPEC_REPACK_IND,
 USC_CODE
)
AS
 SELECT TJR_DRM45.AUDIT_CODE,
        TJR_DRM45.CLIENT_GROUP_DESCRIPTION,
        TJR_DRM45.CLIENT_NBR,
        TJR_DRM45.FILE_CODE,
        TJR_DRM45.PRODUCT_GROUP_NBR,
        TJR_DRM45.PRODUCT_GROUP_NAME,
        TJR_DRM45.PRODUCT_CODE,
        TJR_DRM45.PACK_CODE,
        TJR_DRM45.PROD_DESC,
        TJR_DRM45.WHOLESALE_PRICE,
        TJR_DRM45.MFR_DESC,
        TJR_DRM45.MFR_CODE,
        TJR_DRM45.SPEC_REPACK_IND,
        TJR_DRM45.USC_CODE
 FROM sandbox.TJR_DRM45
 ORDER BY TJR_DRM45.AUDIT_CODE,
          TJR_DRM45.CLIENT_GROUP_DESCRIPTION,
          TJR_DRM45.CLIENT_NBR,
          TJR_DRM45.FILE_CODE,
          TJR_DRM45.PRODUCT_GROUP_NBR,
          TJR_DRM45.PRODUCT_GROUP_NAME,
          TJR_DRM45.PRODUCT_CODE,
          TJR_DRM45.PACK_CODE
SEGMENTED BY hash(TJR_DRM45.CLIENT_NBR, TJR_DRM45.FILE_CODE, TJR_DRM45.PRODUCT_GROUP_NBR, TJR_DRM45.PRODUCT_CODE, TJR_DRM45.PACK_CODE, TJR_DRM45.MFR_CODE, TJR_DRM45.SPEC_REPACK_IND, TJR_DRM45.AUDIT_CODE) ALL NODES;

CREATE PROJECTION sandbox.tjr_ftf_iqvia_plan_xref_b0 /*+basename(tjr_ftf_iqvia_plan_xref),createtype(L)*/ 
(
 health_plan_id,
 health_plan_name,
 ajovy_restrictions,
 aimovig_restrictions,
 emgality_restrictions,
 provider_id,
 provider_name,
 parent_name,
 payment_type,
 health_plan_type,
 masterbridge_key_payer,
 iqvia_plan_code,
 iqvia_plan_name,
 iqvia_payer_name,
 masterbridge_payer_name,
 formulary_mgmt_pbm,
 claims_processing_pbm,
 pref_tier
)
AS
 SELECT tjr_ftf_iqvia_plan_xref.health_plan_id,
        tjr_ftf_iqvia_plan_xref.health_plan_name,
        tjr_ftf_iqvia_plan_xref.ajovy_restrictions,
        tjr_ftf_iqvia_plan_xref.aimovig_restrictions,
        tjr_ftf_iqvia_plan_xref.emgality_restrictions,
        tjr_ftf_iqvia_plan_xref.provider_id,
        tjr_ftf_iqvia_plan_xref.provider_name,
        tjr_ftf_iqvia_plan_xref.parent_name,
        tjr_ftf_iqvia_plan_xref.payment_type,
        tjr_ftf_iqvia_plan_xref.health_plan_type,
        tjr_ftf_iqvia_plan_xref.masterbridge_key_payer,
        tjr_ftf_iqvia_plan_xref.iqvia_plan_code,
        tjr_ftf_iqvia_plan_xref.iqvia_plan_name,
        tjr_ftf_iqvia_plan_xref.iqvia_payer_name,
        tjr_ftf_iqvia_plan_xref.masterbridge_payer_name,
        tjr_ftf_iqvia_plan_xref.formulary_mgmt_pbm,
        tjr_ftf_iqvia_plan_xref.claims_processing_pbm,
        tjr_ftf_iqvia_plan_xref.pref_tier
 FROM sandbox.tjr_ftf_iqvia_plan_xref
 ORDER BY tjr_ftf_iqvia_plan_xref.health_plan_id,
          tjr_ftf_iqvia_plan_xref.health_plan_name,
          tjr_ftf_iqvia_plan_xref.ajovy_restrictions,
          tjr_ftf_iqvia_plan_xref.aimovig_restrictions,
          tjr_ftf_iqvia_plan_xref.emgality_restrictions,
          tjr_ftf_iqvia_plan_xref.provider_id,
          tjr_ftf_iqvia_plan_xref.provider_name,
          tjr_ftf_iqvia_plan_xref.parent_name
SEGMENTED BY hash(tjr_ftf_iqvia_plan_xref.health_plan_id, tjr_ftf_iqvia_plan_xref.provider_id, tjr_ftf_iqvia_plan_xref.pref_tier, tjr_ftf_iqvia_plan_xref.iqvia_plan_code, tjr_ftf_iqvia_plan_xref.health_plan_name, tjr_ftf_iqvia_plan_xref.iqvia_plan_name, tjr_ftf_iqvia_plan_xref.iqvia_payer_name, tjr_ftf_iqvia_plan_xref.masterbridge_payer_name) ALL NODES;

CREATE PROJECTION sandbox.mb_ic_rx_tp_b0 /*+basename(mb_ic_rx_tp),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT mb_ic_rx_tp.ic_data_month,
        mb_ic_rx_tp.basket_name,
        mb_ic_rx_tp.sales_force_id,
        mb_ic_rx_tp.area_number,
        mb_ic_rx_tp.region_number,
        mb_ic_rx_tp.territory_number,
        mb_ic_rx_tp.ims_id,
        mb_ic_rx_tp.tvcmid,
        mb_ic_rx_tp.outlet_code,
        mb_ic_rx_tp.va_station_number,
        mb_ic_rx_tp.dnc_flag,
        mb_ic_rx_tp.dnp_flag,
        mb_ic_rx_tp.rollup_month,
        mb_ic_rx_tp.month_bucket,
        mb_ic_rx_tp.nrx_count,
        mb_ic_rx_tp.trx_count,
        mb_ic_rx_tp.nrx_quantity,
        mb_ic_rx_tp.trx_quantity,
        mb_ic_rx_tp.include_in_nation_rollup,
        mb_ic_rx_tp.include_in_area_rollup,
        mb_ic_rx_tp.include_in_region_rollup,
        mb_ic_rx_tp.join_key,
        mb_ic_rx_tp.row_source,
        mb_ic_rx_tp.row_create_date,
        mb_ic_rx_tp.indication,
        mb_ic_rx_tp.outlet_dea,
        mb_ic_rx_tp.payer_plan_number,
        mb_ic_rx_tp.payment_method
 FROM sandbox.mb_ic_rx_tp
 ORDER BY mb_ic_rx_tp.area_number,
          mb_ic_rx_tp.region_number,
          mb_ic_rx_tp.territory_number,
          mb_ic_rx_tp.ims_id,
          mb_ic_rx_tp.tvcmid
SEGMENTED BY hash(mb_ic_rx_tp.ic_data_month, mb_ic_rx_tp.tvcmid, mb_ic_rx_tp.outlet_code, mb_ic_rx_tp.dnc_flag, mb_ic_rx_tp.dnp_flag, mb_ic_rx_tp.rollup_month, mb_ic_rx_tp.month_bucket, mb_ic_rx_tp.nrx_count, mb_ic_rx_tp.trx_count, mb_ic_rx_tp.nrx_quantity, mb_ic_rx_tp.trx_quantity, mb_ic_rx_tp.include_in_nation_rollup, mb_ic_rx_tp.include_in_area_rollup, mb_ic_rx_tp.include_in_region_rollup, mb_ic_rx_tp.row_create_date, mb_ic_rx_tp.ims_id, mb_ic_rx_tp.va_station_number, mb_ic_rx_tp.join_key, mb_ic_rx_tp.area_number, mb_ic_rx_tp.region_number, mb_ic_rx_tp.territory_number, mb_ic_rx_tp.sales_force_id, mb_ic_rx_tp.row_source, mb_ic_rx_tp.basket_name) ALL NODES;

CREATE PROJECTION sandbox."MA Missing STATE_b0" /*+basename(MA Missing STATE),createtype(L)*/ 
(
 Zip,
 State,
 Territory_1_ID,
 Territory_Name,
 Area_Name,
 Region_Name,
 Mirror_Flag,
 Territory_2_ID
)
AS
 SELECT "MA Missing STATE".Zip,
        "MA Missing STATE".State,
        "MA Missing STATE".Territory_1_ID,
        "MA Missing STATE".Territory_Name,
        "MA Missing STATE".Area_Name,
        "MA Missing STATE".Region_Name,
        "MA Missing STATE".Mirror_Flag,
        "MA Missing STATE".Territory_2_ID
 FROM sandbox."MA Missing STATE"
 ORDER BY "MA Missing STATE".Zip,
          "MA Missing STATE".State,
          "MA Missing STATE".Territory_1_ID,
          "MA Missing STATE".Territory_Name,
          "MA Missing STATE".Area_Name,
          "MA Missing STATE".Region_Name,
          "MA Missing STATE".Mirror_Flag,
          "MA Missing STATE".Territory_2_ID
SEGMENTED BY hash("MA Missing STATE".Zip, "MA Missing STATE".State, "MA Missing STATE".Region_Name, "MA Missing STATE".Mirror_Flag, "MA Missing STATE".Territory_2_ID, "MA Missing STATE".Territory_1_ID, "MA Missing STATE".Area_Name, "MA Missing STATE".Territory_Name) ALL NODES;

CREATE PROJECTION sandbox.sent_email_template_id_b0 /*+basename(sent_email_template_id),createtype(A)*/ 
(
 Sent_Email_vod__c,
 Approved_Email_Template_vod__c
)
AS
 SELECT sent_email_template_id.Sent_Email_vod__c,
        sent_email_template_id.Approved_Email_Template_vod__c
 FROM sandbox.sent_email_template_id
 ORDER BY sent_email_template_id.Sent_Email_vod__c,
          sent_email_template_id.Approved_Email_Template_vod__c
SEGMENTED BY hash(sent_email_template_id.Sent_Email_vod__c, sent_email_template_id.Approved_Email_Template_vod__c) ALL NODES;

CREATE PROJECTION sandbox.veeva_sent_email_07102020_b0 /*+basename(veeva_sent_email_07102020),createtype(A)*/ 
(
 Id,
 CreatedDate,
 CreatedById,
 LastModifiedDate,
 LastModifiedById,
 OwnerId,
 RecordTypeId,
 IsDeleted,
 SystemModstamp,
 Name,
 Account_vod__c,
 Activity_Tracking_Mode_vod__c,
 EM_Attendee_vod__c,
 Bcc_vod__c,
 Call2_vod__c,
 Capture_Datetime_vod__c,
 Clicked_vod__c,
 Content_Type_vod__c,
 Detail_Group_vod__c,
 Approved_Document_Views_vod__c,
 Entity_Reference_Id_vod__c,
 Event_vod__c,
 Event_Attendee_vod__c,
 Event_Attendee_Mobile_Id_vod__c,
 Event_Mobile_Id_vod__c,
 Events_Management_Subtype_vod__c,
 EM_Event_Speaker_vod__c,
 EM_Event_Team_Member_vod__c,
 Sender_Email_vod__c,
 Key_Message_vod__c,
 Last_Click_Date_vod__c,
 Last_Device_vod__c,
 Last_Activity_Date_vod__c,
 Last_Open_Date_vod__c,
 MC_Capture_Datetime_vod__c,
 Medical_Event_vod__c,
 Medical_Inquiry_vod__c,
 Mobile_ID_vod__c,
 Opened_vod__c,
 Parent_Email_vod__c,
 Product_vod__c,
 Product_Display_vod__c,
 Receipt_Entity_Type_vod__c,
 Receipt_Record_Id_vod__c,
 Related_Transaction_ID_vod__c,
 Scheduled_Send_Datetime_vod__c,
 Email_Sent_Date_vod__c,
 Status_vod__c,
 Failure_Msg_vod__c,
 Suggestion_vod__c,
 Territory_vod__c,
 Account_Email_vod__c,
 Click_Count_vod__c,
 Open_Count_vod__c,
 User_vod__c,
 Valid_Consent_Exists_vod__c,
 VExternal_Id_vod__c,
 record_id,
 file_id,
 Approved_Email_Template_vod__c
)
AS
 SELECT veeva_sent_email_07102020.Id,
        veeva_sent_email_07102020.CreatedDate,
        veeva_sent_email_07102020.CreatedById,
        veeva_sent_email_07102020.LastModifiedDate,
        veeva_sent_email_07102020.LastModifiedById,
        veeva_sent_email_07102020.OwnerId,
        veeva_sent_email_07102020.RecordTypeId,
        veeva_sent_email_07102020.IsDeleted,
        veeva_sent_email_07102020.SystemModstamp,
        veeva_sent_email_07102020.Name,
        veeva_sent_email_07102020.Account_vod__c,
        veeva_sent_email_07102020.Activity_Tracking_Mode_vod__c,
        veeva_sent_email_07102020.EM_Attendee_vod__c,
        veeva_sent_email_07102020.Bcc_vod__c,
        veeva_sent_email_07102020.Call2_vod__c,
        veeva_sent_email_07102020.Capture_Datetime_vod__c,
        veeva_sent_email_07102020.Clicked_vod__c,
        veeva_sent_email_07102020.Content_Type_vod__c,
        veeva_sent_email_07102020.Detail_Group_vod__c,
        veeva_sent_email_07102020.Approved_Document_Views_vod__c,
        veeva_sent_email_07102020.Entity_Reference_Id_vod__c,
        veeva_sent_email_07102020.Event_vod__c,
        veeva_sent_email_07102020.Event_Attendee_vod__c,
        veeva_sent_email_07102020.Event_Attendee_Mobile_Id_vod__c,
        veeva_sent_email_07102020.Event_Mobile_Id_vod__c,
        veeva_sent_email_07102020.Events_Management_Subtype_vod__c,
        veeva_sent_email_07102020.EM_Event_Speaker_vod__c,
        veeva_sent_email_07102020.EM_Event_Team_Member_vod__c,
        veeva_sent_email_07102020.Sender_Email_vod__c,
        veeva_sent_email_07102020.Key_Message_vod__c,
        veeva_sent_email_07102020.Last_Click_Date_vod__c,
        veeva_sent_email_07102020.Last_Device_vod__c,
        veeva_sent_email_07102020.Last_Activity_Date_vod__c,
        veeva_sent_email_07102020.Last_Open_Date_vod__c,
        veeva_sent_email_07102020.MC_Capture_Datetime_vod__c,
        veeva_sent_email_07102020.Medical_Event_vod__c,
        veeva_sent_email_07102020.Medical_Inquiry_vod__c,
        veeva_sent_email_07102020.Mobile_ID_vod__c,
        veeva_sent_email_07102020.Opened_vod__c,
        veeva_sent_email_07102020.Parent_Email_vod__c,
        veeva_sent_email_07102020.Product_vod__c,
        veeva_sent_email_07102020.Product_Display_vod__c,
        veeva_sent_email_07102020.Receipt_Entity_Type_vod__c,
        veeva_sent_email_07102020.Receipt_Record_Id_vod__c,
        veeva_sent_email_07102020.Related_Transaction_ID_vod__c,
        veeva_sent_email_07102020.Scheduled_Send_Datetime_vod__c,
        veeva_sent_email_07102020.Email_Sent_Date_vod__c,
        veeva_sent_email_07102020.Status_vod__c,
        veeva_sent_email_07102020.Failure_Msg_vod__c,
        veeva_sent_email_07102020.Suggestion_vod__c,
        veeva_sent_email_07102020.Territory_vod__c,
        veeva_sent_email_07102020.Account_Email_vod__c,
        veeva_sent_email_07102020.Click_Count_vod__c,
        veeva_sent_email_07102020.Open_Count_vod__c,
        veeva_sent_email_07102020.User_vod__c,
        veeva_sent_email_07102020.Valid_Consent_Exists_vod__c,
        veeva_sent_email_07102020.VExternal_Id_vod__c,
        veeva_sent_email_07102020.record_id,
        veeva_sent_email_07102020.file_id,
        veeva_sent_email_07102020.Approved_Email_Template_vod__c
 FROM sandbox.veeva_sent_email_07102020
 ORDER BY veeva_sent_email_07102020.Id,
          veeva_sent_email_07102020.CreatedDate,
          veeva_sent_email_07102020.CreatedById,
          veeva_sent_email_07102020.LastModifiedDate,
          veeva_sent_email_07102020.LastModifiedById,
          veeva_sent_email_07102020.OwnerId,
          veeva_sent_email_07102020.RecordTypeId,
          veeva_sent_email_07102020.IsDeleted
SEGMENTED BY hash(veeva_sent_email_07102020.record_id) ALL NODES;

CREATE PROJECTION sandbox.concur_hcp_delta_07212020_b0 /*+basename(concur_hcp_delta_07212020),createtype(A)*/ 
(
 cust_id,
 organization_name,
 contact_type,
 first_name,
 middle_name,
 last_name,
 suffix,
 npi,
 address_line_1,
 address_line_2,
 city,
 state,
 zipcode,
 sln,
 sln_state,
 dea,
 affiliation,
 credential,
 healthcare_professional_status_code,
 create_date
)
AS
 SELECT concur_hcp_delta_07212020.cust_id,
        concur_hcp_delta_07212020.organization_name,
        concur_hcp_delta_07212020.contact_type,
        concur_hcp_delta_07212020.first_name,
        concur_hcp_delta_07212020.middle_name,
        concur_hcp_delta_07212020.last_name,
        concur_hcp_delta_07212020.suffix,
        concur_hcp_delta_07212020.npi,
        concur_hcp_delta_07212020.address_line_1,
        concur_hcp_delta_07212020.address_line_2,
        concur_hcp_delta_07212020.city,
        concur_hcp_delta_07212020.state,
        concur_hcp_delta_07212020.zipcode,
        concur_hcp_delta_07212020.sln,
        concur_hcp_delta_07212020.sln_state,
        concur_hcp_delta_07212020.dea,
        concur_hcp_delta_07212020.affiliation,
        concur_hcp_delta_07212020.credential,
        concur_hcp_delta_07212020.healthcare_professional_status_code,
        concur_hcp_delta_07212020.create_date
 FROM sandbox.concur_hcp_delta_07212020
 ORDER BY concur_hcp_delta_07212020.cust_id
SEGMENTED BY hash(concur_hcp_delta_07212020.cust_id, concur_hcp_delta_07212020.first_name, concur_hcp_delta_07212020.middle_name, concur_hcp_delta_07212020.last_name, concur_hcp_delta_07212020.suffix, concur_hcp_delta_07212020.npi, concur_hcp_delta_07212020.address_line_1, concur_hcp_delta_07212020.address_line_2, concur_hcp_delta_07212020.city, concur_hcp_delta_07212020.state, concur_hcp_delta_07212020.zipcode, concur_hcp_delta_07212020.sln, concur_hcp_delta_07212020.sln_state, concur_hcp_delta_07212020.dea, concur_hcp_delta_07212020.credential, concur_hcp_delta_07212020.healthcare_professional_status_code) ALL NODES;

CREATE PROJECTION sandbox.rs_wkly_geo_summ_b0 /*+basename(rs_wkly_geo_summ),createtype(A)*/ 
(
 sales_force_id,
 geography_level,
 geography_id,
 geography,
 rep_name,
 user_id,
 time_period,
 period_type,
 period,
 market_id,
 market_name,
 brand_id,
 brand_name,
 teva_product_flag,
 target_status_flag,
 method_of_payment,
 specialty,
 segment,
 market_volume_indicator,
 product_vol_trx_count,
 product_vol_new_pres_trx_count,
 market_vol_trx_count,
 prev_prod_vol_trx_count,
 prev_market_vol_trx_count,
 product_vol_nrx_count,
 product_vol_new_pres_nrx_count,
 market_vol_nrx_count,
 prev_prod_vol_nrx_count,
 prev_market_vol_nrx_count,
 prescribers_count,
 new_prescribers_count
)
AS
 SELECT rs_wkly_geo_summ.sales_force_id,
        rs_wkly_geo_summ.geography_level,
        rs_wkly_geo_summ.geography_id,
        rs_wkly_geo_summ.geography,
        rs_wkly_geo_summ.rep_name,
        rs_wkly_geo_summ.user_id,
        rs_wkly_geo_summ.time_period,
        rs_wkly_geo_summ.period_type,
        rs_wkly_geo_summ.period,
        rs_wkly_geo_summ.market_id,
        rs_wkly_geo_summ.market_name,
        rs_wkly_geo_summ.brand_id,
        rs_wkly_geo_summ.brand_name,
        rs_wkly_geo_summ.teva_product_flag,
        rs_wkly_geo_summ.target_status_flag,
        rs_wkly_geo_summ.method_of_payment,
        rs_wkly_geo_summ.specialty,
        rs_wkly_geo_summ.segment,
        rs_wkly_geo_summ.market_volume_indicator,
        rs_wkly_geo_summ.product_vol_trx_count,
        rs_wkly_geo_summ.product_vol_new_pres_trx_count,
        rs_wkly_geo_summ.market_vol_trx_count,
        rs_wkly_geo_summ.prev_prod_vol_trx_count,
        rs_wkly_geo_summ.prev_market_vol_trx_count,
        rs_wkly_geo_summ.product_vol_nrx_count,
        rs_wkly_geo_summ.product_vol_new_pres_nrx_count,
        rs_wkly_geo_summ.market_vol_nrx_count,
        rs_wkly_geo_summ.prev_prod_vol_nrx_count,
        rs_wkly_geo_summ.prev_market_vol_nrx_count,
        rs_wkly_geo_summ.prescribers_count,
        rs_wkly_geo_summ.new_prescribers_count
 FROM sandbox.rs_wkly_geo_summ
 ORDER BY rs_wkly_geo_summ.sales_force_id,
          rs_wkly_geo_summ.geography_level,
          rs_wkly_geo_summ.geography_id,
          rs_wkly_geo_summ.geography,
          rs_wkly_geo_summ.rep_name,
          rs_wkly_geo_summ.user_id,
          rs_wkly_geo_summ.time_period,
          rs_wkly_geo_summ.period_type
SEGMENTED BY hash(rs_wkly_geo_summ.sales_force_id, rs_wkly_geo_summ.market_id, rs_wkly_geo_summ.brand_id, rs_wkly_geo_summ.teva_product_flag, rs_wkly_geo_summ.target_status_flag, rs_wkly_geo_summ.market_volume_indicator, rs_wkly_geo_summ.prescribers_count, rs_wkly_geo_summ.new_prescribers_count) ALL NODES;

CREATE PROJECTION sandbox."SYNEOS MISSING IMSIDs_b0" /*+basename(SYNEOS MISSING IMSIDs),createtype(L)*/ 
(
 "Digihaler_rx_20210215 (JAN)"
)
AS
 SELECT "SYNEOS MISSING IMSIDs"."Digihaler_rx_20210215 (JAN)"
 FROM sandbox."SYNEOS MISSING IMSIDs"
 ORDER BY "SYNEOS MISSING IMSIDs"."Digihaler_rx_20210215 (JAN)"
SEGMENTED BY hash("SYNEOS MISSING IMSIDs"."Digihaler_rx_20210215 (JAN)") ALL NODES;

CREATE PROJECTION sandbox.tmp_teva_transform_lock_b0 /*+basename(tmp_teva_transform_lock),createtype(A)*/ 
(
 transform_lock_id,
 transform_name,
 transform_lock_time
)
AS
 SELECT tmp_teva_transform_lock.transform_lock_id,
        tmp_teva_transform_lock.transform_name,
        tmp_teva_transform_lock.transform_lock_time
 FROM sandbox.tmp_teva_transform_lock
 ORDER BY tmp_teva_transform_lock.transform_name
SEGMENTED BY hash(tmp_teva_transform_lock.transform_name) ALL NODES;

CREATE PROJECTION sandbox.datamart_activity_hub_b0 /*+basename(datamart_activity_hub),createtype(A)*/ 
(
 activity_id,
 federation_id,
 contact,
 source_name,
 "datetime",
 trackback_id,
 previous_activity,
 level_name,
 activity_role_name,
 type_name,
 native_type,
 details,
 line_item_id,
 brand_name,
 activity,
 line_item_datetime,
 line_item_previous_line_item,
 line_item_trackback_id,
 line_item_details,
 line_item_type_name,
 line_item_native_type,
 basket_id,
 web_url
)
AS
 SELECT datamart_activity_hub.activity_id,
        datamart_activity_hub.federation_id,
        datamart_activity_hub.contact,
        datamart_activity_hub.source_name,
        datamart_activity_hub."datetime",
        datamart_activity_hub.trackback_id,
        datamart_activity_hub.previous_activity,
        datamart_activity_hub.level_name,
        datamart_activity_hub.activity_role_name,
        datamart_activity_hub.type_name,
        datamart_activity_hub.native_type,
        datamart_activity_hub.details,
        datamart_activity_hub.line_item_id,
        datamart_activity_hub.brand_name,
        datamart_activity_hub.activity,
        datamart_activity_hub.line_item_datetime,
        datamart_activity_hub.line_item_previous_line_item,
        datamart_activity_hub.line_item_trackback_id,
        datamart_activity_hub.line_item_details,
        datamart_activity_hub.line_item_type_name,
        datamart_activity_hub.line_item_native_type,
        datamart_activity_hub.basket_id,
        datamart_activity_hub.web_url
 FROM sandbox.datamart_activity_hub
 ORDER BY datamart_activity_hub.activity_id
SEGMENTED BY hash(datamart_activity_hub.activity_id) ALL NODES;

CREATE PROJECTION sandbox.ajovy_cust_level_flags_b0 /*+basename(ajovy_cust_level_flags),createtype(A)*/ 
(
 tvcmid,
 basket_name,
 sales_force_id,
 territory_number,
 flag_type,
 flag_value,
 flag_effective_start_date,
 flag_effective_end_date
)
AS
 SELECT ajovy_cust_level_flags.tvcmid,
        ajovy_cust_level_flags.basket_name,
        ajovy_cust_level_flags.sales_force_id,
        ajovy_cust_level_flags.territory_number,
        ajovy_cust_level_flags.flag_type,
        ajovy_cust_level_flags.flag_value,
        ajovy_cust_level_flags.flag_effective_start_date,
        ajovy_cust_level_flags.flag_effective_end_date
 FROM sandbox.ajovy_cust_level_flags
 ORDER BY ajovy_cust_level_flags.tvcmid,
          ajovy_cust_level_flags.basket_name,
          ajovy_cust_level_flags.sales_force_id,
          ajovy_cust_level_flags.territory_number,
          ajovy_cust_level_flags.flag_type,
          ajovy_cust_level_flags.flag_value,
          ajovy_cust_level_flags.flag_effective_start_date,
          ajovy_cust_level_flags.flag_effective_end_date
SEGMENTED BY hash(ajovy_cust_level_flags.tvcmid, ajovy_cust_level_flags.sales_force_id, ajovy_cust_level_flags.territory_number, ajovy_cust_level_flags.flag_effective_start_date, ajovy_cust_level_flags.flag_effective_end_date, ajovy_cust_level_flags.flag_type, ajovy_cust_level_flags.flag_value, ajovy_cust_level_flags.basket_name) ALL NODES;

CREATE PROJECTION sandbox.health_plan_geography_b0 /*+basename(health_plan_geography),createtype(L)*/ 
(
 health_plan_id,
 Country_fips_id,
 country_id,
 country_name,
 state_id,
 state_name,
 country_lives
)
AS
 SELECT health_plan_geography.health_plan_id,
        health_plan_geography.Country_fips_id,
        health_plan_geography.country_id,
        health_plan_geography.country_name,
        health_plan_geography.state_id,
        health_plan_geography.state_name,
        health_plan_geography.country_lives
 FROM sandbox.health_plan_geography
 ORDER BY health_plan_geography.health_plan_id,
          health_plan_geography.Country_fips_id,
          health_plan_geography.country_id,
          health_plan_geography.country_name,
          health_plan_geography.state_id,
          health_plan_geography.state_name,
          health_plan_geography.country_lives
SEGMENTED BY hash(health_plan_geography.country_id, health_plan_geography.state_id, health_plan_geography.state_name, health_plan_geography.country_lives, health_plan_geography.health_plan_id, health_plan_geography.Country_fips_id, health_plan_geography.country_name) ALL NODES;

CREATE PROJECTION sandbox.mb_sfa_call_b0 /*+basename(mb_sfa_call),createtype(A)*/ 
(
 sales_force_id,
 call_id,
 veeva_account_id,
 ims_id,
 ims_outlet_id,
 customer_type,
 first_name,
 last_name,
 call_type,
 legacy_call_type,
 ceph_id,
 dea_num,
 rep_id,
 rep_first_name,
 rep_last_name,
 territory_number,
 zip_on_call,
 call_date,
 submit_date,
 attendees,
 attendee_type,
 area_number,
 region_number,
 tvcmid,
 call_recordtype,
 call_duration,
 call_datetime,
 call_timezone,
 how_executed,
 remote_meeting_id
)
AS
 SELECT mb_sfa_call.sales_force_id,
        mb_sfa_call.call_id,
        mb_sfa_call.veeva_account_id,
        mb_sfa_call.ims_id,
        mb_sfa_call.ims_outlet_id,
        mb_sfa_call.customer_type,
        mb_sfa_call.first_name,
        mb_sfa_call.last_name,
        mb_sfa_call.call_type,
        mb_sfa_call.legacy_call_type,
        mb_sfa_call.ceph_id,
        mb_sfa_call.dea_num,
        mb_sfa_call.rep_id,
        mb_sfa_call.rep_first_name,
        mb_sfa_call.rep_last_name,
        mb_sfa_call.territory_number,
        mb_sfa_call.zip_on_call,
        mb_sfa_call.call_date,
        mb_sfa_call.submit_date,
        mb_sfa_call.attendees,
        mb_sfa_call.attendee_type,
        mb_sfa_call.area_number,
        mb_sfa_call.region_number,
        mb_sfa_call.tvcmid,
        mb_sfa_call.call_recordtype,
        mb_sfa_call.call_duration,
        mb_sfa_call.call_datetime,
        mb_sfa_call.call_timezone,
        mb_sfa_call.how_executed,
        mb_sfa_call.remote_meeting_id
 FROM sandbox.mb_sfa_call
 ORDER BY mb_sfa_call.sales_force_id,
          mb_sfa_call.call_id,
          mb_sfa_call.veeva_account_id,
          mb_sfa_call.ims_id,
          mb_sfa_call.ims_outlet_id,
          mb_sfa_call.customer_type,
          mb_sfa_call.first_name,
          mb_sfa_call.last_name
SEGMENTED BY hash(mb_sfa_call.sales_force_id, mb_sfa_call.territory_number, mb_sfa_call.call_date, mb_sfa_call.submit_date, mb_sfa_call.attendees, mb_sfa_call.area_number, mb_sfa_call.region_number, mb_sfa_call.tvcmid) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSR_Enrolllmonts_b0 /*+basename(Austedo_PSR_Enrolllmonts),createtype(L)*/ 
(
 "Basket Name",
 "Referral Date",
 "Prescribing Physician NPI",
 "First Ship Date"
)
AS
 SELECT Austedo_PSR_Enrolllmonts."Basket Name",
        Austedo_PSR_Enrolllmonts."Referral Date",
        Austedo_PSR_Enrolllmonts."Prescribing Physician NPI",
        Austedo_PSR_Enrolllmonts."First Ship Date"
 FROM sandbox.Austedo_PSR_Enrolllmonts
 ORDER BY Austedo_PSR_Enrolllmonts."Basket Name",
          Austedo_PSR_Enrolllmonts."Referral Date",
          Austedo_PSR_Enrolllmonts."Prescribing Physician NPI",
          Austedo_PSR_Enrolllmonts."First Ship Date"
SEGMENTED BY hash(Austedo_PSR_Enrolllmonts."Referral Date", Austedo_PSR_Enrolllmonts."Prescribing Physician NPI", Austedo_PSR_Enrolllmonts."First Ship Date", Austedo_PSR_Enrolllmonts."Basket Name") ALL NODES;

CREATE PROJECTION sandbox."AUSTEDO ASSTRx_PSRs_b0" /*+basename(AUSTEDO ASSTRx_PSRs),createtype(L)*/ 
(
 "Basket Name",
 "Referral Date",
 "Prescribing Physician NPI",
 "First Ship Date"
)
AS
 SELECT "AUSTEDO ASSTRx_PSRs"."Basket Name",
        "AUSTEDO ASSTRx_PSRs"."Referral Date",
        "AUSTEDO ASSTRx_PSRs"."Prescribing Physician NPI",
        "AUSTEDO ASSTRx_PSRs"."First Ship Date"
 FROM sandbox."AUSTEDO ASSTRx_PSRs"
 ORDER BY "AUSTEDO ASSTRx_PSRs"."Basket Name",
          "AUSTEDO ASSTRx_PSRs"."Referral Date",
          "AUSTEDO ASSTRx_PSRs"."Prescribing Physician NPI",
          "AUSTEDO ASSTRx_PSRs"."First Ship Date"
SEGMENTED BY hash("AUSTEDO ASSTRx_PSRs"."Referral Date", "AUSTEDO ASSTRx_PSRs"."Prescribing Physician NPI", "AUSTEDO ASSTRx_PSRs"."First Ship Date", "AUSTEDO ASSTRx_PSRs"."Basket Name") ALL NODES;

CREATE PROJECTION sandbox.ic_rx_oct2021_b0 /*+basename(ic_rx_oct2021),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_oct2021.ic_data_month,
        ic_rx_oct2021.basket_name,
        ic_rx_oct2021.sales_force_id,
        ic_rx_oct2021.area_number,
        ic_rx_oct2021.region_number,
        ic_rx_oct2021.territory_number,
        ic_rx_oct2021.ims_id,
        ic_rx_oct2021.tvcmid,
        ic_rx_oct2021.outlet_code,
        ic_rx_oct2021.va_station_number,
        ic_rx_oct2021.dnc_flag,
        ic_rx_oct2021.dnp_flag,
        ic_rx_oct2021.rollup_month,
        ic_rx_oct2021.month_bucket,
        ic_rx_oct2021.nrx_count,
        ic_rx_oct2021.trx_count,
        ic_rx_oct2021.nrx_quantity,
        ic_rx_oct2021.trx_quantity,
        ic_rx_oct2021.include_in_nation_rollup,
        ic_rx_oct2021.include_in_area_rollup,
        ic_rx_oct2021.include_in_region_rollup,
        ic_rx_oct2021.join_key,
        ic_rx_oct2021.row_source,
        ic_rx_oct2021.row_create_date,
        ic_rx_oct2021.indication,
        ic_rx_oct2021.outlet_dea,
        ic_rx_oct2021.payer_plan_number,
        ic_rx_oct2021.payment_method
 FROM sandbox.ic_rx_oct2021
 ORDER BY ic_rx_oct2021.ic_data_month,
          ic_rx_oct2021.basket_name,
          ic_rx_oct2021.sales_force_id,
          ic_rx_oct2021.area_number,
          ic_rx_oct2021.region_number,
          ic_rx_oct2021.territory_number,
          ic_rx_oct2021.ims_id,
          ic_rx_oct2021.tvcmid
SEGMENTED BY hash(ic_rx_oct2021.ic_data_month, ic_rx_oct2021.tvcmid, ic_rx_oct2021.outlet_code, ic_rx_oct2021.dnc_flag, ic_rx_oct2021.dnp_flag, ic_rx_oct2021.rollup_month, ic_rx_oct2021.month_bucket, ic_rx_oct2021.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_oct2021_b0 /*+basename(ic_demo_oct2021),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_oct2021.ic_data_month,
        ic_demo_oct2021.sales_force_id,
        ic_demo_oct2021.area_number,
        ic_demo_oct2021.region_number,
        ic_demo_oct2021.territory_number,
        ic_demo_oct2021.ims_id,
        ic_demo_oct2021.tvcmid,
        ic_demo_oct2021.outlet_code,
        ic_demo_oct2021.va_station_number,
        ic_demo_oct2021.specialty,
        ic_demo_oct2021.last_name,
        ic_demo_oct2021.first_name,
        ic_demo_oct2021.mid_name,
        ic_demo_oct2021.address_1,
        ic_demo_oct2021.address_2,
        ic_demo_oct2021.address_3,
        ic_demo_oct2021.city,
        ic_demo_oct2021.state,
        ic_demo_oct2021.zip,
        ic_demo_oct2021.address_source,
        ic_demo_oct2021.pdrp_flag,
        ic_demo_oct2021.pdrp_date,
        ic_demo_oct2021.np_pa_flag,
        ic_demo_oct2021.no_spend,
        ic_demo_oct2021.ama_no_contact_flag,
        ic_demo_oct2021.join_key,
        ic_demo_oct2021.row_source,
        ic_demo_oct2021.row_create_date,
        ic_demo_oct2021.outlet_dea,
        ic_demo_oct2021.secondary_specialty
 FROM sandbox.ic_demo_oct2021
 ORDER BY ic_demo_oct2021.ic_data_month,
          ic_demo_oct2021.sales_force_id,
          ic_demo_oct2021.area_number,
          ic_demo_oct2021.region_number,
          ic_demo_oct2021.territory_number,
          ic_demo_oct2021.ims_id,
          ic_demo_oct2021.tvcmid,
          ic_demo_oct2021.outlet_code
SEGMENTED BY hash(ic_demo_oct2021.ic_data_month, ic_demo_oct2021.tvcmid, ic_demo_oct2021.outlet_code, ic_demo_oct2021.mid_name, ic_demo_oct2021.state, ic_demo_oct2021.zip, ic_demo_oct2021.pdrp_flag, ic_demo_oct2021.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.AJOVY_GEO_REVERSE_SEP_OCT2021_b0 /*+basename(AJOVY_GEO_REVERSE_SEP_OCT2021),createtype(L)*/ 
(
 market_name,
 brand_id,
 brand_name,
 teva_product_flag,
 time_period,
 period_type,
 period,
 pbm_id,
 pbm_name,
 payer_id,
 payer_name,
 plan_id,
 plan_name,
 payer_plan_id,
 method_of_payment,
 final_key_controlling_account,
 key_parent_account,
 ajovy_formulary_status,
 aimovig_formulary_status,
 emgality_formulary_status,
 plan_payment_type,
 market_volume_indicator,
 Sum_product_vol_trx_count,
 Sum_market_vol_trx_count,
 Sum_product_vol_nrx_count,
 Sum_market_vol_nrx_count,
 Sum_lives_covered
)
AS
 SELECT AJOVY_GEO_REVERSE_SEP_OCT2021.market_name,
        AJOVY_GEO_REVERSE_SEP_OCT2021.brand_id,
        AJOVY_GEO_REVERSE_SEP_OCT2021.brand_name,
        AJOVY_GEO_REVERSE_SEP_OCT2021.teva_product_flag,
        AJOVY_GEO_REVERSE_SEP_OCT2021.time_period,
        AJOVY_GEO_REVERSE_SEP_OCT2021.period_type,
        AJOVY_GEO_REVERSE_SEP_OCT2021.period,
        AJOVY_GEO_REVERSE_SEP_OCT2021.pbm_id,
        AJOVY_GEO_REVERSE_SEP_OCT2021.pbm_name,
        AJOVY_GEO_REVERSE_SEP_OCT2021.payer_id,
        AJOVY_GEO_REVERSE_SEP_OCT2021.payer_name,
        AJOVY_GEO_REVERSE_SEP_OCT2021.plan_id,
        AJOVY_GEO_REVERSE_SEP_OCT2021.plan_name,
        AJOVY_GEO_REVERSE_SEP_OCT2021.payer_plan_id,
        AJOVY_GEO_REVERSE_SEP_OCT2021.method_of_payment,
        AJOVY_GEO_REVERSE_SEP_OCT2021.final_key_controlling_account,
        AJOVY_GEO_REVERSE_SEP_OCT2021.key_parent_account,
        AJOVY_GEO_REVERSE_SEP_OCT2021.ajovy_formulary_status,
        AJOVY_GEO_REVERSE_SEP_OCT2021.aimovig_formulary_status,
        AJOVY_GEO_REVERSE_SEP_OCT2021.emgality_formulary_status,
        AJOVY_GEO_REVERSE_SEP_OCT2021.plan_payment_type,
        AJOVY_GEO_REVERSE_SEP_OCT2021.market_volume_indicator,
        AJOVY_GEO_REVERSE_SEP_OCT2021.Sum_product_vol_trx_count,
        AJOVY_GEO_REVERSE_SEP_OCT2021.Sum_market_vol_trx_count,
        AJOVY_GEO_REVERSE_SEP_OCT2021.Sum_product_vol_nrx_count,
        AJOVY_GEO_REVERSE_SEP_OCT2021.Sum_market_vol_nrx_count,
        AJOVY_GEO_REVERSE_SEP_OCT2021.Sum_lives_covered
 FROM sandbox.AJOVY_GEO_REVERSE_SEP_OCT2021
 ORDER BY AJOVY_GEO_REVERSE_SEP_OCT2021.market_name,
          AJOVY_GEO_REVERSE_SEP_OCT2021.brand_id,
          AJOVY_GEO_REVERSE_SEP_OCT2021.brand_name,
          AJOVY_GEO_REVERSE_SEP_OCT2021.teva_product_flag,
          AJOVY_GEO_REVERSE_SEP_OCT2021.time_period,
          AJOVY_GEO_REVERSE_SEP_OCT2021.period_type,
          AJOVY_GEO_REVERSE_SEP_OCT2021.period,
          AJOVY_GEO_REVERSE_SEP_OCT2021.pbm_id
SEGMENTED BY hash(AJOVY_GEO_REVERSE_SEP_OCT2021.brand_id, AJOVY_GEO_REVERSE_SEP_OCT2021.period, AJOVY_GEO_REVERSE_SEP_OCT2021.pbm_id, AJOVY_GEO_REVERSE_SEP_OCT2021.payer_id, AJOVY_GEO_REVERSE_SEP_OCT2021.plan_id, AJOVY_GEO_REVERSE_SEP_OCT2021.payer_plan_id, AJOVY_GEO_REVERSE_SEP_OCT2021.market_volume_indicator, AJOVY_GEO_REVERSE_SEP_OCT2021.Sum_lives_covered) ALL NODES;

CREATE PROJECTION sandbox.email_bounces_b0 /*+basename(email_bounces),createtype(L)*/ 
(
 ClientID,
 SendID,
 SubscriberKey,
 EmailAddress,
 EmailName,
 SubscriberID,
 ListID,
 EventDate,
 EventType,
 BounceCategory,
 SMTPCode,
 BounceReason,
 BatchID,
 TriggeredSendExternalKey
)
AS
 SELECT email_bounces.ClientID,
        email_bounces.SendID,
        email_bounces.SubscriberKey,
        email_bounces.EmailAddress,
        email_bounces.EmailName,
        email_bounces.SubscriberID,
        email_bounces.ListID,
        email_bounces.EventDate,
        email_bounces.EventType,
        email_bounces.BounceCategory,
        email_bounces.SMTPCode,
        email_bounces.BounceReason,
        email_bounces.BatchID,
        email_bounces.TriggeredSendExternalKey
 FROM sandbox.email_bounces
 ORDER BY email_bounces.ClientID,
          email_bounces.SendID,
          email_bounces.SubscriberKey,
          email_bounces.EmailAddress,
          email_bounces.EmailName,
          email_bounces.SubscriberID,
          email_bounces.ListID,
          email_bounces.EventDate
SEGMENTED BY hash(email_bounces.EventDate, email_bounces.ClientID, email_bounces.SendID, email_bounces.SubscriberKey, email_bounces.EmailAddress, email_bounces.EmailName, email_bounces.SubscriberID, email_bounces.ListID) ALL NODES;

CREATE PROJECTION sandbox.email_clicks_b0 /*+basename(email_clicks),createtype(L)*/ 
(
 ClientID,
 SendID,
 SubscriberKey,
 EmailAddress,
 EmailName,
 SubscriberID,
 ListID,
 EventDate,
 EventType,
 SendURLID,
 URLID,
 URL,
 Alias,
 BatchID,
 TriggeredSendExternalKey
)
AS
 SELECT email_clicks.ClientID,
        email_clicks.SendID,
        email_clicks.SubscriberKey,
        email_clicks.EmailAddress,
        email_clicks.EmailName,
        email_clicks.SubscriberID,
        email_clicks.ListID,
        email_clicks.EventDate,
        email_clicks.EventType,
        email_clicks.SendURLID,
        email_clicks.URLID,
        email_clicks.URL,
        email_clicks.Alias,
        email_clicks.BatchID,
        email_clicks.TriggeredSendExternalKey
 FROM sandbox.email_clicks
 ORDER BY email_clicks.ClientID,
          email_clicks.SendID,
          email_clicks.SubscriberKey,
          email_clicks.EmailAddress,
          email_clicks.EmailName,
          email_clicks.SubscriberID,
          email_clicks.ListID,
          email_clicks.EventDate
SEGMENTED BY hash(email_clicks.EventDate, email_clicks.ClientID, email_clicks.SendID, email_clicks.SubscriberKey, email_clicks.EmailAddress, email_clicks.SubscriberID, email_clicks.ListID, email_clicks.EventType) ALL NODES;

CREATE PROJECTION sandbox.email_not_sent_b0 /*+basename(email_not_sent),createtype(L)*/ 
(
 ClientID,
 SendID,
 SubscriberKey,
 EmailAddress,
 EmailName,
 SubscriberID,
 ListID,
 EventDate,
 EventType,
 BatchID,
 TriggeredSendExternalKey,
 Reason
)
AS
 SELECT email_not_sent.ClientID,
        email_not_sent.SendID,
        email_not_sent.SubscriberKey,
        email_not_sent.EmailAddress,
        email_not_sent.EmailName,
        email_not_sent.SubscriberID,
        email_not_sent.ListID,
        email_not_sent.EventDate,
        email_not_sent.EventType,
        email_not_sent.BatchID,
        email_not_sent.TriggeredSendExternalKey,
        email_not_sent.Reason
 FROM sandbox.email_not_sent
 ORDER BY email_not_sent.ClientID,
          email_not_sent.SendID,
          email_not_sent.SubscriberKey,
          email_not_sent.EmailAddress,
          email_not_sent.EmailName,
          email_not_sent.SubscriberID,
          email_not_sent.ListID,
          email_not_sent.EventDate
SEGMENTED BY hash(email_not_sent.EventDate, email_not_sent.ClientID, email_not_sent.SendID, email_not_sent.SubscriberKey, email_not_sent.EmailAddress, email_not_sent.EmailName, email_not_sent.SubscriberID, email_not_sent.ListID) ALL NODES;

CREATE PROJECTION sandbox.email_open_b0 /*+basename(email_open),createtype(L)*/ 
(
 ClientID,
 SendID,
 SubscriberKey,
 EmailAddress,
 EmailName,
 SubscriberID,
 ListID,
 EventDate,
 EventType,
 BatchID,
 TriggeredSendExternalKey
)
AS
 SELECT email_open.ClientID,
        email_open.SendID,
        email_open.SubscriberKey,
        email_open.EmailAddress,
        email_open.EmailName,
        email_open.SubscriberID,
        email_open.ListID,
        email_open.EventDate,
        email_open.EventType,
        email_open.BatchID,
        email_open.TriggeredSendExternalKey
 FROM sandbox.email_open
 ORDER BY email_open.ClientID,
          email_open.SendID,
          email_open.SubscriberKey,
          email_open.EmailAddress,
          email_open.EmailName,
          email_open.SubscriberID,
          email_open.ListID,
          email_open.EventDate
SEGMENTED BY hash(email_open.EventDate, email_open.ClientID, email_open.SendID, email_open.SubscriberKey, email_open.EmailAddress, email_open.EmailName, email_open.SubscriberID, email_open.ListID) ALL NODES;

CREATE PROJECTION sandbox.email_send_jobs_b0 /*+basename(email_send_jobs),createtype(L)*/ 
(
 ClientID,
 SendID,
 FromName,
 FromEmail,
 SchedTime,
 SentTime,
 Subject,
 EmailName,
 TriggeredSendExternalKey,
 SendDefinitionExternalKey,
 JobStatus,
 PreviewURL,
 IsMultipart,
 Additional
)
AS
 SELECT email_send_jobs.ClientID,
        email_send_jobs.SendID,
        email_send_jobs.FromName,
        email_send_jobs.FromEmail,
        email_send_jobs.SchedTime,
        email_send_jobs.SentTime,
        email_send_jobs.Subject,
        email_send_jobs.EmailName,
        email_send_jobs.TriggeredSendExternalKey,
        email_send_jobs.SendDefinitionExternalKey,
        email_send_jobs.JobStatus,
        email_send_jobs.PreviewURL,
        email_send_jobs.IsMultipart,
        email_send_jobs.Additional
 FROM sandbox.email_send_jobs
 ORDER BY email_send_jobs.ClientID,
          email_send_jobs.SendID,
          email_send_jobs.FromName,
          email_send_jobs.FromEmail,
          email_send_jobs.SchedTime,
          email_send_jobs.SentTime,
          email_send_jobs.Subject,
          email_send_jobs.EmailName
SEGMENTED BY hash(email_send_jobs.SchedTime, email_send_jobs.SentTime, email_send_jobs.ClientID, email_send_jobs.SendID, email_send_jobs.FromName, email_send_jobs.FromEmail, email_send_jobs.TriggeredSendExternalKey, email_send_jobs.SendDefinitionExternalKey) ALL NODES;

CREATE PROJECTION sandbox.email_sent_b0 /*+basename(email_sent),createtype(L)*/ 
(
 ClientID,
 SendID,
 EmailName,
 SubscriberKey,
 EmailAddress,
 SubscriberID,
 ListID,
 EventDate,
 EventType,
 BatchID,
 TriggeredSendExternalKey
)
AS
 SELECT email_sent.ClientID,
        email_sent.SendID,
        email_sent.EmailName,
        email_sent.SubscriberKey,
        email_sent.EmailAddress,
        email_sent.SubscriberID,
        email_sent.ListID,
        email_sent.EventDate,
        email_sent.EventType,
        email_sent.BatchID,
        email_sent.TriggeredSendExternalKey
 FROM sandbox.email_sent
 ORDER BY email_sent.ClientID,
          email_sent.SendID,
          email_sent.EmailName,
          email_sent.SubscriberKey,
          email_sent.EmailAddress,
          email_sent.SubscriberID,
          email_sent.ListID,
          email_sent.EventDate
SEGMENTED BY hash(email_sent.EventDate, email_sent.ClientID, email_sent.SendID, email_sent.EmailName, email_sent.SubscriberKey, email_sent.EmailAddress, email_sent.SubscriberID, email_sent.ListID) ALL NODES;

CREATE PROJECTION sandbox.shared_solutions_b0 /*+basename(shared_solutions),createtype(L)*/ 
(
 Year,
 Month,
 HD_TD,
 Total_PSRF_submitted,
 PSRF_with_Patient_Authorization,
 Patient_authorizations_obtained_on_PSRF,
 Patient_authorizations_obtained_on_follow_up,
 PSRF_triaged_to_pharmacy,
 Patients_converted,
 Total_nurse_calls_completed,
 Total_nurse_calls_due
)
AS
 SELECT shared_solutions.Year,
        shared_solutions.Month,
        shared_solutions.HD_TD,
        shared_solutions.Total_PSRF_submitted,
        shared_solutions.PSRF_with_Patient_Authorization,
        shared_solutions.Patient_authorizations_obtained_on_PSRF,
        shared_solutions.Patient_authorizations_obtained_on_follow_up,
        shared_solutions.PSRF_triaged_to_pharmacy,
        shared_solutions.Patients_converted,
        shared_solutions.Total_nurse_calls_completed,
        shared_solutions.Total_nurse_calls_due
 FROM sandbox.shared_solutions
 ORDER BY shared_solutions.Year,
          shared_solutions.Month,
          shared_solutions.HD_TD,
          shared_solutions.Total_PSRF_submitted,
          shared_solutions.PSRF_with_Patient_Authorization,
          shared_solutions.Patient_authorizations_obtained_on_PSRF,
          shared_solutions.Patient_authorizations_obtained_on_follow_up,
          shared_solutions.PSRF_triaged_to_pharmacy
SEGMENTED BY hash(shared_solutions.Year, shared_solutions.Total_PSRF_submitted, shared_solutions.PSRF_with_Patient_Authorization, shared_solutions.Patient_authorizations_obtained_on_PSRF, shared_solutions.Patient_authorizations_obtained_on_follow_up, shared_solutions.PSRF_triaged_to_pharmacy, shared_solutions.Patients_converted, shared_solutions.Total_nurse_calls_completed) ALL NODES;

CREATE PROJECTION sandbox."TR Demographics QA TOK_b0" /*+basename(TR Demographics QA TOK),createtype(L)*/ 
(
 onc_account_demo_id,
 outlet_name,
 outlet_code,
 outlet_zip
)
AS
 SELECT "TR Demographics QA TOK".onc_account_demo_id,
        "TR Demographics QA TOK".outlet_name,
        "TR Demographics QA TOK".outlet_code,
        "TR Demographics QA TOK".outlet_zip
 FROM sandbox."TR Demographics QA TOK"
 ORDER BY "TR Demographics QA TOK".onc_account_demo_id,
          "TR Demographics QA TOK".outlet_name,
          "TR Demographics QA TOK".outlet_code,
          "TR Demographics QA TOK".outlet_zip
SEGMENTED BY hash("TR Demographics QA TOK".onc_account_demo_id, "TR Demographics QA TOK".outlet_code, "TR Demographics QA TOK".outlet_zip, "TR Demographics QA TOK".outlet_name) ALL NODES;

CREATE PROJECTION sandbox.copay_bkp_209248_209819_b0 /*+basename(copay_bkp_209248_209819),createtype(A)*/ 
(
 redemption_type,
 physician_tvcmid,
 pharmacy_tvcmid,
 basket_id,
 basket_name,
 asi_txn_id,
 orig_asi_txn_id,
 rx_num,
 fill_date,
 date_written,
 days_supply,
 ndc_code,
 daw,
 new_refill,
 quantity,
 refills,
 other_coverage_code,
 program_number,
 copay_card_number,
 sex,
 age_at_redemption,
 pharmacy_process_date,
 pharmacy_chain_number,
 nabp,
 pharmacy_chain,
 pharmacy_name,
 pharmacy_address,
 pharmacy_address2,
 pharmacy_city,
 pharmacy_state,
 pharmacy_zip,
 pharmacy_phone,
 pharmacy_npi_num,
 principle_physician_dea,
 physician_npi,
 physician_ims_id,
 physician_veeva_id,
 physician_name,
 physician_address1,
 physician_address2,
 physician_city,
 physician_state,
 physician_zip,
 rebate_amount,
 member_cash_expense,
 submitted_cost,
 pharmacy_fee,
 total_amount_due,
 calc_awp,
 create_date,
 occ_payment_type,
 counted_copay,
 auth_refills,
 admin_hcp_npi,
 admin_hcp_name,
 admin_hcp_address,
 admin_hcp_address2,
 admin_hcp_city,
 admin_hcp_state,
 admin_hcp_zip,
 claim_type,
 administration_flag,
 soc_name,
 soc_phone,
 soc_fax,
 soc_address,
 soc_city,
 soc_state,
 soc_zip,
 soc_id,
 soc_npi,
 payer_name,
 cpt_code,
 trans_type,
 previous_payer_id,
 member_id,
 benefit_amount,
 patient_expense,
 submission_method,
 report_frequency,
 source_name,
 file_id,
 record_id,
 patient_type,
 primary_bin,
 primary_bin_description,
 reject_code
)
AS
 SELECT copay_bkp_209248_209819.redemption_type,
        copay_bkp_209248_209819.physician_tvcmid,
        copay_bkp_209248_209819.pharmacy_tvcmid,
        copay_bkp_209248_209819.basket_id,
        copay_bkp_209248_209819.basket_name,
        copay_bkp_209248_209819.asi_txn_id,
        copay_bkp_209248_209819.orig_asi_txn_id,
        copay_bkp_209248_209819.rx_num,
        copay_bkp_209248_209819.fill_date,
        copay_bkp_209248_209819.date_written,
        copay_bkp_209248_209819.days_supply,
        copay_bkp_209248_209819.ndc_code,
        copay_bkp_209248_209819.daw,
        copay_bkp_209248_209819.new_refill,
        copay_bkp_209248_209819.quantity,
        copay_bkp_209248_209819.refills,
        copay_bkp_209248_209819.other_coverage_code,
        copay_bkp_209248_209819.program_number,
        copay_bkp_209248_209819.copay_card_number,
        copay_bkp_209248_209819.sex,
        copay_bkp_209248_209819.age_at_redemption,
        copay_bkp_209248_209819.pharmacy_process_date,
        copay_bkp_209248_209819.pharmacy_chain_number,
        copay_bkp_209248_209819.nabp,
        copay_bkp_209248_209819.pharmacy_chain,
        copay_bkp_209248_209819.pharmacy_name,
        copay_bkp_209248_209819.pharmacy_address,
        copay_bkp_209248_209819.pharmacy_address2,
        copay_bkp_209248_209819.pharmacy_city,
        copay_bkp_209248_209819.pharmacy_state,
        copay_bkp_209248_209819.pharmacy_zip,
        copay_bkp_209248_209819.pharmacy_phone,
        copay_bkp_209248_209819.pharmacy_npi_num,
        copay_bkp_209248_209819.principle_physician_dea,
        copay_bkp_209248_209819.physician_npi,
        copay_bkp_209248_209819.physician_ims_id,
        copay_bkp_209248_209819.physician_veeva_id,
        copay_bkp_209248_209819.physician_name,
        copay_bkp_209248_209819.physician_address1,
        copay_bkp_209248_209819.physician_address2,
        copay_bkp_209248_209819.physician_city,
        copay_bkp_209248_209819.physician_state,
        copay_bkp_209248_209819.physician_zip,
        copay_bkp_209248_209819.rebate_amount,
        copay_bkp_209248_209819.member_cash_expense,
        copay_bkp_209248_209819.submitted_cost,
        copay_bkp_209248_209819.pharmacy_fee,
        copay_bkp_209248_209819.total_amount_due,
        copay_bkp_209248_209819.calc_awp,
        copay_bkp_209248_209819.create_date,
        copay_bkp_209248_209819.occ_payment_type,
        copay_bkp_209248_209819.counted_copay,
        copay_bkp_209248_209819.auth_refills,
        copay_bkp_209248_209819.admin_hcp_npi,
        copay_bkp_209248_209819.admin_hcp_name,
        copay_bkp_209248_209819.admin_hcp_address,
        copay_bkp_209248_209819.admin_hcp_address2,
        copay_bkp_209248_209819.admin_hcp_city,
        copay_bkp_209248_209819.admin_hcp_state,
        copay_bkp_209248_209819.admin_hcp_zip,
        copay_bkp_209248_209819.claim_type,
        copay_bkp_209248_209819.administration_flag,
        copay_bkp_209248_209819.soc_name,
        copay_bkp_209248_209819.soc_phone,
        copay_bkp_209248_209819.soc_fax,
        copay_bkp_209248_209819.soc_address,
        copay_bkp_209248_209819.soc_city,
        copay_bkp_209248_209819.soc_state,
        copay_bkp_209248_209819.soc_zip,
        copay_bkp_209248_209819.soc_id,
        copay_bkp_209248_209819.soc_npi,
        copay_bkp_209248_209819.payer_name,
        copay_bkp_209248_209819.cpt_code,
        copay_bkp_209248_209819.trans_type,
        copay_bkp_209248_209819.previous_payer_id,
        copay_bkp_209248_209819.member_id,
        copay_bkp_209248_209819.benefit_amount,
        copay_bkp_209248_209819.patient_expense,
        copay_bkp_209248_209819.submission_method,
        copay_bkp_209248_209819.report_frequency,
        copay_bkp_209248_209819.source_name,
        copay_bkp_209248_209819.file_id,
        copay_bkp_209248_209819.record_id,
        copay_bkp_209248_209819.patient_type,
        copay_bkp_209248_209819.primary_bin,
        copay_bkp_209248_209819.primary_bin_description,
        copay_bkp_209248_209819.reject_code
 FROM sandbox.copay_bkp_209248_209819
 ORDER BY copay_bkp_209248_209819.source_name,
          copay_bkp_209248_209819.asi_txn_id
SEGMENTED BY hash(copay_bkp_209248_209819.physician_npi) ALL NODES;

CREATE PROJECTION sandbox.channel_claims_b0 /*+basename(channel_claims),createtype(L)*/ 
(
 channel_name,
 sub_channel_name,
 claim_type,
 claims_year,
 claim_prcnt
)
AS
 SELECT channel_claims.channel_name,
        channel_claims.sub_channel_name,
        channel_claims.claim_type,
        channel_claims.claims_year,
        channel_claims.claim_prcnt
 FROM sandbox.channel_claims
 ORDER BY channel_claims.channel_name,
          channel_claims.sub_channel_name,
          channel_claims.claim_type,
          channel_claims.claims_year,
          channel_claims.claim_prcnt
SEGMENTED BY hash(channel_claims.channel_name, channel_claims.sub_channel_name, channel_claims.claim_type, channel_claims.claims_year, channel_claims.claim_prcnt) ALL NODES;

CREATE PROJECTION sandbox.dmart_pres_rx_01142022_b0 /*+basename(dmart_pres_rx_01142022),createtype(A)*/ 
(
 ims_id,
 payer_plan_number,
 ims_client_number,
 report_frequency,
 ims_product_group,
 basket_id,
 data_date,
 date,
 sales_category,
 tvcmid,
 prescriber_first_name,
 prescriber_last_name,
 basket_name,
 basket_type,
 rollup_week,
 rollup_month,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 unnormalized_nrx_count,
 unnormalized_trx_count,
 market_name,
 payer_name,
 plan_name,
 pbm_name,
 model,
 payment_method,
 ims_specialty,
 ims_rx_type,
 ims_supplemental_data,
 ims_zip_other,
 ims_report_number_cnt,
 cnt_file_id,
 cnt_record_id,
 ims_report_number_qty,
 qty_file_id,
 qty_record_id,
 rollup_flag,
 indication,
 pbm_parent_name
)
AS
 SELECT dmart_pres_rx_01142022.ims_id,
        dmart_pres_rx_01142022.payer_plan_number,
        dmart_pres_rx_01142022.ims_client_number,
        dmart_pres_rx_01142022.report_frequency,
        dmart_pres_rx_01142022.ims_product_group,
        dmart_pres_rx_01142022.basket_id,
        dmart_pres_rx_01142022.data_date,
        dmart_pres_rx_01142022.date,
        dmart_pres_rx_01142022.sales_category,
        dmart_pres_rx_01142022.tvcmid,
        dmart_pres_rx_01142022.prescriber_first_name,
        dmart_pres_rx_01142022.prescriber_last_name,
        dmart_pres_rx_01142022.basket_name,
        dmart_pres_rx_01142022.basket_type,
        dmart_pres_rx_01142022.rollup_week,
        dmart_pres_rx_01142022.rollup_month,
        dmart_pres_rx_01142022.nrx_count,
        dmart_pres_rx_01142022.trx_count,
        dmart_pres_rx_01142022.nrx_quantity,
        dmart_pres_rx_01142022.trx_quantity,
        dmart_pres_rx_01142022.unnormalized_nrx_count,
        dmart_pres_rx_01142022.unnormalized_trx_count,
        dmart_pres_rx_01142022.market_name,
        dmart_pres_rx_01142022.payer_name,
        dmart_pres_rx_01142022.plan_name,
        dmart_pres_rx_01142022.pbm_name,
        dmart_pres_rx_01142022.model,
        dmart_pres_rx_01142022.payment_method,
        dmart_pres_rx_01142022.ims_specialty,
        dmart_pres_rx_01142022.ims_rx_type,
        dmart_pres_rx_01142022.ims_supplemental_data,
        dmart_pres_rx_01142022.ims_zip_other,
        dmart_pres_rx_01142022.ims_report_number_cnt,
        dmart_pres_rx_01142022.cnt_file_id,
        dmart_pres_rx_01142022.cnt_record_id,
        dmart_pres_rx_01142022.ims_report_number_qty,
        dmart_pres_rx_01142022.qty_file_id,
        dmart_pres_rx_01142022.qty_record_id,
        dmart_pres_rx_01142022.rollup_flag,
        dmart_pres_rx_01142022.indication,
        dmart_pres_rx_01142022.pbm_parent_name
 FROM sandbox.dmart_pres_rx_01142022
 ORDER BY dmart_pres_rx_01142022.rollup_flag,
          dmart_pres_rx_01142022.ims_rx_type,
          dmart_pres_rx_01142022.report_frequency,
          dmart_pres_rx_01142022.basket_type,
          dmart_pres_rx_01142022.ims_client_number,
          dmart_pres_rx_01142022.indication,
          dmart_pres_rx_01142022.market_name,
          dmart_pres_rx_01142022.ims_product_group,
          dmart_pres_rx_01142022.basket_id,
          dmart_pres_rx_01142022.ims_specialty,
          dmart_pres_rx_01142022.ims_zip_other,
          dmart_pres_rx_01142022.ims_report_number_qty,
          dmart_pres_rx_01142022.ims_report_number_cnt,
          dmart_pres_rx_01142022.tvcmid,
          dmart_pres_rx_01142022.payment_method,
          dmart_pres_rx_01142022.payer_plan_number,
          dmart_pres_rx_01142022.rollup_month,
          dmart_pres_rx_01142022.rollup_week,
          dmart_pres_rx_01142022.nrx_quantity,
          dmart_pres_rx_01142022.trx_quantity,
          dmart_pres_rx_01142022.nrx_count,
          dmart_pres_rx_01142022.trx_count,
          dmart_pres_rx_01142022.sales_category,
          dmart_pres_rx_01142022.ims_id
SEGMENTED BY hash(dmart_pres_rx_01142022.ims_id) ALL NODES;

CREATE PROJECTION sandbox."Austedo TD avg dose Nov 2021_b0" /*+basename(Austedo TD avg dose Nov 2021),createtype(L)*/ 
(
 TVCM_ID,
 IMS_ID,
 PRODUCT_NAME,
 Data_Type,
 Avg_TD_Daily_Dose_New_Patient,
 Avg_TD_Daily_Dose_Cont_Patient,
 Data_Ending_Month
)
AS
 SELECT "Austedo TD avg dose Nov 2021".TVCM_ID,
        "Austedo TD avg dose Nov 2021".IMS_ID,
        "Austedo TD avg dose Nov 2021".PRODUCT_NAME,
        "Austedo TD avg dose Nov 2021".Data_Type,
        "Austedo TD avg dose Nov 2021".Avg_TD_Daily_Dose_New_Patient,
        "Austedo TD avg dose Nov 2021".Avg_TD_Daily_Dose_Cont_Patient,
        "Austedo TD avg dose Nov 2021".Data_Ending_Month
 FROM sandbox."Austedo TD avg dose Nov 2021"
 ORDER BY "Austedo TD avg dose Nov 2021".TVCM_ID,
          "Austedo TD avg dose Nov 2021".IMS_ID,
          "Austedo TD avg dose Nov 2021".PRODUCT_NAME,
          "Austedo TD avg dose Nov 2021".Data_Type,
          "Austedo TD avg dose Nov 2021".Avg_TD_Daily_Dose_New_Patient,
          "Austedo TD avg dose Nov 2021".Avg_TD_Daily_Dose_Cont_Patient,
          "Austedo TD avg dose Nov 2021".Data_Ending_Month
SEGMENTED BY hash("Austedo TD avg dose Nov 2021".TVCM_ID, "Austedo TD avg dose Nov 2021".Avg_TD_Daily_Dose_New_Patient, "Austedo TD avg dose Nov 2021".Avg_TD_Daily_Dose_Cont_Patient, "Austedo TD avg dose Nov 2021".Data_Ending_Month, "Austedo TD avg dose Nov 2021".IMS_ID, "Austedo TD avg dose Nov 2021".PRODUCT_NAME, "Austedo TD avg dose Nov 2021".Data_Type) ALL NODES;

CREATE PROJECTION sandbox.austedo_titration_20220207_b0 /*+basename(austedo_titration_20220207),createtype(L)*/ 
(
 TVCM_ID,
 IMS_ID,
 PRODUCT_NAME,
 Data_Type,
 Avg_TD_Daily_Dose_New_Patient,
 Avg_TD_Daily_Dose_Cont_Patient,
 Data_Ending_Month
)
AS
 SELECT austedo_titration_20220207.TVCM_ID,
        austedo_titration_20220207.IMS_ID,
        austedo_titration_20220207.PRODUCT_NAME,
        austedo_titration_20220207.Data_Type,
        austedo_titration_20220207.Avg_TD_Daily_Dose_New_Patient,
        austedo_titration_20220207.Avg_TD_Daily_Dose_Cont_Patient,
        austedo_titration_20220207.Data_Ending_Month
 FROM sandbox.austedo_titration_20220207
 ORDER BY austedo_titration_20220207.TVCM_ID,
          austedo_titration_20220207.IMS_ID,
          austedo_titration_20220207.PRODUCT_NAME,
          austedo_titration_20220207.Data_Type,
          austedo_titration_20220207.Avg_TD_Daily_Dose_New_Patient,
          austedo_titration_20220207.Avg_TD_Daily_Dose_Cont_Patient,
          austedo_titration_20220207.Data_Ending_Month
SEGMENTED BY hash(austedo_titration_20220207.TVCM_ID, austedo_titration_20220207.Avg_TD_Daily_Dose_New_Patient, austedo_titration_20220207.Avg_TD_Daily_Dose_Cont_Patient, austedo_titration_20220207.Data_Ending_Month, austedo_titration_20220207.IMS_ID, austedo_titration_20220207.PRODUCT_NAME, austedo_titration_20220207.Data_Type) ALL NODES;

CREATE PROJECTION sandbox.pres_rx_anpsych_weekly_b0 /*+basename(pres_rx_anpsych_weekly),createtype(A)*/ 
(
 ims_id,
 payer_plan_number,
 ims_client_number,
 report_frequency,
 ims_product_group,
 basket_id,
 data_date,
 date,
 sales_category,
 tvcmid,
 prescriber_first_name,
 prescriber_last_name,
 basket_name,
 basket_type,
 rollup_week,
 rollup_month,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 unnormalized_nrx_count,
 unnormalized_trx_count,
 market_name,
 payer_name,
 plan_name,
 pbm_name,
 model,
 payment_method,
 ims_specialty,
 ims_rx_type,
 ims_supplemental_data,
 ims_zip_other,
 ims_report_number_cnt,
 cnt_file_id,
 cnt_record_id,
 ims_report_number_qty,
 qty_file_id,
 qty_record_id,
 rollup_flag,
 indication,
 pbm_parent_name
)
AS
 SELECT pres_rx_anpsych_weekly.ims_id,
        pres_rx_anpsych_weekly.payer_plan_number,
        pres_rx_anpsych_weekly.ims_client_number,
        pres_rx_anpsych_weekly.report_frequency,
        pres_rx_anpsych_weekly.ims_product_group,
        pres_rx_anpsych_weekly.basket_id,
        pres_rx_anpsych_weekly.data_date,
        pres_rx_anpsych_weekly.date,
        pres_rx_anpsych_weekly.sales_category,
        pres_rx_anpsych_weekly.tvcmid,
        pres_rx_anpsych_weekly.prescriber_first_name,
        pres_rx_anpsych_weekly.prescriber_last_name,
        pres_rx_anpsych_weekly.basket_name,
        pres_rx_anpsych_weekly.basket_type,
        pres_rx_anpsych_weekly.rollup_week,
        pres_rx_anpsych_weekly.rollup_month,
        pres_rx_anpsych_weekly.nrx_count,
        pres_rx_anpsych_weekly.trx_count,
        pres_rx_anpsych_weekly.nrx_quantity,
        pres_rx_anpsych_weekly.trx_quantity,
        pres_rx_anpsych_weekly.unnormalized_nrx_count,
        pres_rx_anpsych_weekly.unnormalized_trx_count,
        pres_rx_anpsych_weekly.market_name,
        pres_rx_anpsych_weekly.payer_name,
        pres_rx_anpsych_weekly.plan_name,
        pres_rx_anpsych_weekly.pbm_name,
        pres_rx_anpsych_weekly.model,
        pres_rx_anpsych_weekly.payment_method,
        pres_rx_anpsych_weekly.ims_specialty,
        pres_rx_anpsych_weekly.ims_rx_type,
        pres_rx_anpsych_weekly.ims_supplemental_data,
        pres_rx_anpsych_weekly.ims_zip_other,
        pres_rx_anpsych_weekly.ims_report_number_cnt,
        pres_rx_anpsych_weekly.cnt_file_id,
        pres_rx_anpsych_weekly.cnt_record_id,
        pres_rx_anpsych_weekly.ims_report_number_qty,
        pres_rx_anpsych_weekly.qty_file_id,
        pres_rx_anpsych_weekly.qty_record_id,
        pres_rx_anpsych_weekly.rollup_flag,
        pres_rx_anpsych_weekly.indication,
        pres_rx_anpsych_weekly.pbm_parent_name
 FROM sandbox.pres_rx_anpsych_weekly
 ORDER BY pres_rx_anpsych_weekly.rollup_flag,
          pres_rx_anpsych_weekly.ims_rx_type,
          pres_rx_anpsych_weekly.report_frequency,
          pres_rx_anpsych_weekly.basket_type,
          pres_rx_anpsych_weekly.ims_client_number,
          pres_rx_anpsych_weekly.indication,
          pres_rx_anpsych_weekly.market_name,
          pres_rx_anpsych_weekly.ims_product_group,
          pres_rx_anpsych_weekly.basket_id,
          pres_rx_anpsych_weekly.ims_specialty,
          pres_rx_anpsych_weekly.ims_zip_other,
          pres_rx_anpsych_weekly.ims_report_number_qty,
          pres_rx_anpsych_weekly.ims_report_number_cnt,
          pres_rx_anpsych_weekly.tvcmid,
          pres_rx_anpsych_weekly.payment_method,
          pres_rx_anpsych_weekly.payer_plan_number,
          pres_rx_anpsych_weekly.rollup_month,
          pres_rx_anpsych_weekly.rollup_week,
          pres_rx_anpsych_weekly.nrx_quantity,
          pres_rx_anpsych_weekly.trx_quantity,
          pres_rx_anpsych_weekly.nrx_count,
          pres_rx_anpsych_weekly.trx_count,
          pres_rx_anpsych_weekly.sales_category,
          pres_rx_anpsych_weekly.ims_id
SEGMENTED BY hash(pres_rx_anpsych_weekly.ims_id) ALL NODES;

CREATE PROJECTION sandbox.NPA_DEMAND_UNITS_bkp_21022022_b0 /*+basename(NPA_DEMAND_UNITS_bkp_21022022),createtype(A)*/ 
(
 Product,
 Channel,
 NDC_Details,
 EUTRx_May_2018,
 EUTRx_Jun_2018,
 EUTRx_Jul_2018,
 EUTRx_Aug_2018,
 EUTRx_Sep_2018,
 EUTRx_Oct_2018,
 EUTRx_Nov_2018,
 EUTRx_Dec_2018,
 EUTRx_Jan_2019,
 EUTRx_Feb_2019,
 EUTRx_Mar_2019,
 EUTRx_Apr_2019,
 EUTRx_May_2019,
 EUTRx_Jun_2019,
 EUTRx_Jul_2019,
 EUTRx_Aug_2019,
 EUTRx_Sep_2019,
 EUTRx_Oct_2019,
 EUTRx_Nov_2019,
 EUTRx_Dec_2019,
 EUTRx_Jan_2020,
 EUTRx_Feb_2020,
 EUTRx_Mar_2020,
 EUTRx_Apr_2020,
 EUTRx_May_2020,
 EUTRx_Jun_2020,
 EUTRx_Jul_2020,
 EUTRx_Aug_2020,
 EUTRx_Sep_2020,
 EUTRx_Oct_2020,
 EUTRx_Nov_2020,
 EUTRx_Dec_2020,
 EUTRx_Jan_2021,
 EUTRx_Feb_2021,
 EUTRx_Mar_2021,
 EUTRx_Apr_2021,
 EUTRx_May_2021,
 EUTRx_Jun_2021,
 EUTRx_Jul_2021,
 EUTRx_Aug_2021,
 EUTRx_Sep_2021,
 EUTRx_Oct_2021,
 EUTRx_Nov_2021,
 EUTRx_Dec_2021,
 TRx_May_2018,
 TRx_Jun_2018,
 TRx_Jul_2018,
 TRx_Aug_2018,
 TRx_Sep_2018,
 TRx_Oct_2018,
 TRx_Nov_2018,
 TRx_Dec_2018,
 TRx_Jan_2019,
 TRx_Feb_2019,
 TRx_Mar_2019,
 TRx_Apr_2019,
 TRx_May_2019,
 TRx_Jun_2019,
 TRx_Jul_2019,
 TRx_Aug_2019,
 TRx_Sep_2019,
 TRx_Oct_2019,
 TRx_Nov_2019,
 TRx_Dec_2019,
 TRx_Jan_2020,
 TRx_Feb_2020,
 TRx_Mar_2020,
 TRx_Apr_2020,
 TRx_May_2020,
 TRx_Jun_2020,
 TRx_Jul_2020,
 TRx_Aug_2020,
 TRx_Sep_2020,
 TRx_Oct_2020,
 TRx_Nov_2020,
 TRx_Dec_2020,
 TRx_Jan_2021,
 TRx_Feb_2021,
 TRx_Mar_2021,
 TRx_Apr_2021,
 TRx_May_2021,
 TRx_Jun_2021,
 TRx_Jul_2021,
 TRx_Aug_2021,
 TRx_Sep_2021,
 TRx_Oct_2021,
 TRx_Nov_2021,
 TRx_Dec_2021
)
AS
 SELECT NPA_DEMAND_UNITS_bkp_21022022.Product,
        NPA_DEMAND_UNITS_bkp_21022022.Channel,
        NPA_DEMAND_UNITS_bkp_21022022.NDC_Details,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_May_2018,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jun_2018,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jul_2018,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Aug_2018,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Sep_2018,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Oct_2018,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Nov_2018,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Dec_2018,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jan_2019,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Feb_2019,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Mar_2019,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Apr_2019,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_May_2019,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jun_2019,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jul_2019,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Aug_2019,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Sep_2019,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Oct_2019,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Nov_2019,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Dec_2019,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jan_2020,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Feb_2020,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Mar_2020,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Apr_2020,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_May_2020,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jun_2020,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jul_2020,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Aug_2020,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Sep_2020,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Oct_2020,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Nov_2020,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Dec_2020,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jan_2021,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Feb_2021,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Mar_2021,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Apr_2021,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_May_2021,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jun_2021,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jul_2021,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Aug_2021,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Sep_2021,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Oct_2021,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Nov_2021,
        NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Dec_2021,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_May_2018,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Jun_2018,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Jul_2018,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Aug_2018,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Sep_2018,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Oct_2018,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Nov_2018,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Dec_2018,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Jan_2019,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Feb_2019,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Mar_2019,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Apr_2019,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_May_2019,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Jun_2019,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Jul_2019,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Aug_2019,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Sep_2019,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Oct_2019,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Nov_2019,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Dec_2019,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Jan_2020,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Feb_2020,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Mar_2020,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Apr_2020,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_May_2020,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Jun_2020,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Jul_2020,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Aug_2020,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Sep_2020,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Oct_2020,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Nov_2020,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Dec_2020,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Jan_2021,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Feb_2021,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Mar_2021,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Apr_2021,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_May_2021,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Jun_2021,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Jul_2021,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Aug_2021,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Sep_2021,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Oct_2021,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Nov_2021,
        NPA_DEMAND_UNITS_bkp_21022022.TRx_Dec_2021
 FROM sandbox.NPA_DEMAND_UNITS_bkp_21022022
 ORDER BY NPA_DEMAND_UNITS_bkp_21022022.Product,
          NPA_DEMAND_UNITS_bkp_21022022.Channel,
          NPA_DEMAND_UNITS_bkp_21022022.NDC_Details,
          NPA_DEMAND_UNITS_bkp_21022022.EUTRx_May_2018,
          NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jun_2018,
          NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jul_2018,
          NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Aug_2018,
          NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Sep_2018
SEGMENTED BY hash(NPA_DEMAND_UNITS_bkp_21022022.EUTRx_May_2018, NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jun_2018, NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Jul_2018, NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Aug_2018, NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Sep_2018, NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Oct_2018, NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Nov_2018, NPA_DEMAND_UNITS_bkp_21022022.EUTRx_Dec_2018) ALL NODES;

CREATE PROJECTION sandbox.AUsted_PSRF_Utilization_Rpt_TN02182022_b0 /*+basename(AUsted_PSRF_Utilization_Rpt_TN02182022),createtype(L)*/ 
(
 PSRF_ID,
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT AUsted_PSRF_Utilization_Rpt_TN02182022.PSRF_ID,
        AUsted_PSRF_Utilization_Rpt_TN02182022.PrescriberName,
        AUsted_PSRF_Utilization_Rpt_TN02182022.PrescriberCity,
        AUsted_PSRF_Utilization_Rpt_TN02182022.PrescriberState,
        AUsted_PSRF_Utilization_Rpt_TN02182022.PrescriberZip,
        AUsted_PSRF_Utilization_Rpt_TN02182022.PrescriberNPI,
        AUsted_PSRF_Utilization_Rpt_TN02182022."Current Week PSRFs",
        AUsted_PSRF_Utilization_Rpt_TN02182022."Current Month PSRFs",
        AUsted_PSRF_Utilization_Rpt_TN02182022.HCP_Signature_Yes,
        AUsted_PSRF_Utilization_Rpt_TN02182022.HCP_Signature_No,
        AUsted_PSRF_Utilization_Rpt_TN02182022.Patient_Auth_Yes,
        AUsted_PSRF_Utilization_Rpt_TN02182022.Patient_Auth_No,
        AUsted_PSRF_Utilization_Rpt_TN02182022."YTD PSRFs"
 FROM sandbox.AUsted_PSRF_Utilization_Rpt_TN02182022
 ORDER BY AUsted_PSRF_Utilization_Rpt_TN02182022.PSRF_ID,
          AUsted_PSRF_Utilization_Rpt_TN02182022.PrescriberName,
          AUsted_PSRF_Utilization_Rpt_TN02182022.PrescriberCity,
          AUsted_PSRF_Utilization_Rpt_TN02182022.PrescriberState,
          AUsted_PSRF_Utilization_Rpt_TN02182022.PrescriberZip,
          AUsted_PSRF_Utilization_Rpt_TN02182022.PrescriberNPI,
          AUsted_PSRF_Utilization_Rpt_TN02182022."Current Week PSRFs",
          AUsted_PSRF_Utilization_Rpt_TN02182022."Current Month PSRFs"
SEGMENTED BY hash(AUsted_PSRF_Utilization_Rpt_TN02182022.PSRF_ID, AUsted_PSRF_Utilization_Rpt_TN02182022."Current Week PSRFs", AUsted_PSRF_Utilization_Rpt_TN02182022."Current Month PSRFs", AUsted_PSRF_Utilization_Rpt_TN02182022.HCP_Signature_Yes, AUsted_PSRF_Utilization_Rpt_TN02182022.HCP_Signature_No, AUsted_PSRF_Utilization_Rpt_TN02182022.Patient_Auth_Yes, AUsted_PSRF_Utilization_Rpt_TN02182022.Patient_Auth_No, AUsted_PSRF_Utilization_Rpt_TN02182022."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_031122_super /*+basename(Austedo_PSRF_Utilization_Rpt_031122),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_031122 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs", Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI) ALL NODES;

CREATE PROJECTION sandbox.dt_sfa_affl_04052022_b0 /*+basename(dt_sfa_affl_04052022),createtype(A)*/ 
(
 affiliated_from_id,
 affiliated_from_account_type,
 affiliated_from_ims_id,
 affiliated_from_ims_outlet_cd,
 affiliated_from_acct_demo_id,
 affiliated_from_bp_code,
 affiliated_from_tvcmid,
 affiliated_to_id,
 affiliated_to_account_type,
 affiliated_to_ims_id,
 affiliated_to_ims_outlet_code,
 affiliated_to_acct_demo_id,
 affiliated_to_bp_code,
 affiliated_to_tvcmid,
 role,
 affiliated_last_modified_date,
 sales_force_id,
 territory_number,
 employee_full_name,
 employee_id
)
AS
 SELECT dt_sfa_affl_04052022.affiliated_from_id,
        dt_sfa_affl_04052022.affiliated_from_account_type,
        dt_sfa_affl_04052022.affiliated_from_ims_id,
        dt_sfa_affl_04052022.affiliated_from_ims_outlet_cd,
        dt_sfa_affl_04052022.affiliated_from_acct_demo_id,
        dt_sfa_affl_04052022.affiliated_from_bp_code,
        dt_sfa_affl_04052022.affiliated_from_tvcmid,
        dt_sfa_affl_04052022.affiliated_to_id,
        dt_sfa_affl_04052022.affiliated_to_account_type,
        dt_sfa_affl_04052022.affiliated_to_ims_id,
        dt_sfa_affl_04052022.affiliated_to_ims_outlet_code,
        dt_sfa_affl_04052022.affiliated_to_acct_demo_id,
        dt_sfa_affl_04052022.affiliated_to_bp_code,
        dt_sfa_affl_04052022.affiliated_to_tvcmid,
        dt_sfa_affl_04052022.role,
        dt_sfa_affl_04052022.affiliated_last_modified_date,
        dt_sfa_affl_04052022.sales_force_id,
        dt_sfa_affl_04052022.territory_number,
        dt_sfa_affl_04052022.employee_full_name,
        dt_sfa_affl_04052022.employee_id
 FROM sandbox.dt_sfa_affl_04052022
 ORDER BY dt_sfa_affl_04052022.affiliated_to_id
SEGMENTED BY hash(dt_sfa_affl_04052022.affiliated_from_id) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_feb2022_b0 /*+basename(ic_rx_feb2022),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_feb2022.ic_data_month,
        ic_rx_feb2022.basket_name,
        ic_rx_feb2022.sales_force_id,
        ic_rx_feb2022.area_number,
        ic_rx_feb2022.region_number,
        ic_rx_feb2022.territory_number,
        ic_rx_feb2022.ims_id,
        ic_rx_feb2022.tvcmid,
        ic_rx_feb2022.outlet_code,
        ic_rx_feb2022.va_station_number,
        ic_rx_feb2022.dnc_flag,
        ic_rx_feb2022.dnp_flag,
        ic_rx_feb2022.rollup_month,
        ic_rx_feb2022.month_bucket,
        ic_rx_feb2022.nrx_count,
        ic_rx_feb2022.trx_count,
        ic_rx_feb2022.nrx_quantity,
        ic_rx_feb2022.trx_quantity,
        ic_rx_feb2022.include_in_nation_rollup,
        ic_rx_feb2022.include_in_area_rollup,
        ic_rx_feb2022.include_in_region_rollup,
        ic_rx_feb2022.join_key,
        ic_rx_feb2022.row_source,
        ic_rx_feb2022.row_create_date,
        ic_rx_feb2022.indication,
        ic_rx_feb2022.outlet_dea,
        ic_rx_feb2022.payer_plan_number,
        ic_rx_feb2022.payment_method
 FROM sandbox.ic_rx_feb2022
 ORDER BY ic_rx_feb2022.ic_data_month,
          ic_rx_feb2022.basket_name,
          ic_rx_feb2022.sales_force_id,
          ic_rx_feb2022.area_number,
          ic_rx_feb2022.region_number,
          ic_rx_feb2022.territory_number,
          ic_rx_feb2022.ims_id,
          ic_rx_feb2022.tvcmid
SEGMENTED BY hash(ic_rx_feb2022.ic_data_month, ic_rx_feb2022.tvcmid, ic_rx_feb2022.outlet_code, ic_rx_feb2022.dnc_flag, ic_rx_feb2022.dnp_flag, ic_rx_feb2022.rollup_month, ic_rx_feb2022.month_bucket, ic_rx_feb2022.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_feb2022_b0 /*+basename(ic_demo_feb2022),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_feb2022.ic_data_month,
        ic_demo_feb2022.sales_force_id,
        ic_demo_feb2022.area_number,
        ic_demo_feb2022.region_number,
        ic_demo_feb2022.territory_number,
        ic_demo_feb2022.ims_id,
        ic_demo_feb2022.tvcmid,
        ic_demo_feb2022.outlet_code,
        ic_demo_feb2022.va_station_number,
        ic_demo_feb2022.specialty,
        ic_demo_feb2022.last_name,
        ic_demo_feb2022.first_name,
        ic_demo_feb2022.mid_name,
        ic_demo_feb2022.address_1,
        ic_demo_feb2022.address_2,
        ic_demo_feb2022.address_3,
        ic_demo_feb2022.city,
        ic_demo_feb2022.state,
        ic_demo_feb2022.zip,
        ic_demo_feb2022.address_source,
        ic_demo_feb2022.pdrp_flag,
        ic_demo_feb2022.pdrp_date,
        ic_demo_feb2022.np_pa_flag,
        ic_demo_feb2022.no_spend,
        ic_demo_feb2022.ama_no_contact_flag,
        ic_demo_feb2022.join_key,
        ic_demo_feb2022.row_source,
        ic_demo_feb2022.row_create_date,
        ic_demo_feb2022.outlet_dea,
        ic_demo_feb2022.secondary_specialty
 FROM sandbox.ic_demo_feb2022
 ORDER BY ic_demo_feb2022.ic_data_month,
          ic_demo_feb2022.sales_force_id,
          ic_demo_feb2022.area_number,
          ic_demo_feb2022.region_number,
          ic_demo_feb2022.territory_number,
          ic_demo_feb2022.ims_id,
          ic_demo_feb2022.tvcmid,
          ic_demo_feb2022.outlet_code
SEGMENTED BY hash(ic_demo_feb2022.ic_data_month, ic_demo_feb2022.tvcmid, ic_demo_feb2022.outlet_code, ic_demo_feb2022.mid_name, ic_demo_feb2022.state, ic_demo_feb2022.zip, ic_demo_feb2022.pdrp_flag, ic_demo_feb2022.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_042222_super /*+basename(Austedo_PSRF_Utilization_Rpt_042222),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_042222 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00.PrescriberState, Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.veeva_suggestions_austedo_b0 /*+basename(veeva_suggestions_austedo),createtype(A)*/ 
(
 account_priority_score_vod__c,
 account_vod__c,
 display_dismiss_vod__c,
 display_mark_as_complete_vod__c,
 display_score_vod__c,
 email_template_id_vod__c,
 email_template_vault_id_vod__c,
 email_template_vod__c,
 expiration_date_vod__c,
 marked_as_complete_vod__c,
 mark_complete_count_vod__c,
 name,
 ownerid,
 posted_date,
 priority_vod__c,
 reason_vod__c,
 record_type_name_vod__c,
 suppress_reason_vod__c,
 title_vod__c,
 business_rule_name,
 product,
 days_since_last_call,
 calls_per_mth,
 austedo_decile,
 avg_new_dose,
 avg_cont_dose,
 ss_flag,
 austedo_rx,
 hcp_name,
 rep_name,
 batch_num
)
AS
 SELECT veeva_suggestions_austedo.account_priority_score_vod__c,
        veeva_suggestions_austedo.account_vod__c,
        veeva_suggestions_austedo.display_dismiss_vod__c,
        veeva_suggestions_austedo.display_mark_as_complete_vod__c,
        veeva_suggestions_austedo.display_score_vod__c,
        veeva_suggestions_austedo.email_template_id_vod__c,
        veeva_suggestions_austedo.email_template_vault_id_vod__c,
        veeva_suggestions_austedo.email_template_vod__c,
        veeva_suggestions_austedo.expiration_date_vod__c,
        veeva_suggestions_austedo.marked_as_complete_vod__c,
        veeva_suggestions_austedo.mark_complete_count_vod__c,
        veeva_suggestions_austedo.name,
        veeva_suggestions_austedo.ownerid,
        veeva_suggestions_austedo.posted_date,
        veeva_suggestions_austedo.priority_vod__c,
        veeva_suggestions_austedo.reason_vod__c,
        veeva_suggestions_austedo.record_type_name_vod__c,
        veeva_suggestions_austedo.suppress_reason_vod__c,
        veeva_suggestions_austedo.title_vod__c,
        veeva_suggestions_austedo.business_rule_name,
        veeva_suggestions_austedo.product,
        veeva_suggestions_austedo.days_since_last_call,
        veeva_suggestions_austedo.calls_per_mth,
        veeva_suggestions_austedo.austedo_decile,
        veeva_suggestions_austedo.avg_new_dose,
        veeva_suggestions_austedo.avg_cont_dose,
        veeva_suggestions_austedo.ss_flag,
        veeva_suggestions_austedo.austedo_rx,
        veeva_suggestions_austedo.hcp_name,
        veeva_suggestions_austedo.rep_name,
        veeva_suggestions_austedo.batch_num
 FROM sandbox.veeva_suggestions_austedo
 ORDER BY veeva_suggestions_austedo.account_priority_score_vod__c,
          veeva_suggestions_austedo.account_vod__c,
          veeva_suggestions_austedo.display_dismiss_vod__c,
          veeva_suggestions_austedo.display_mark_as_complete_vod__c,
          veeva_suggestions_austedo.display_score_vod__c,
          veeva_suggestions_austedo.email_template_id_vod__c,
          veeva_suggestions_austedo.email_template_vault_id_vod__c,
          veeva_suggestions_austedo.email_template_vod__c
SEGMENTED BY hash(veeva_suggestions_austedo.account_priority_score_vod__c, veeva_suggestions_austedo.expiration_date_vod__c, veeva_suggestions_austedo.mark_complete_count_vod__c, veeva_suggestions_austedo.posted_date, veeva_suggestions_austedo.days_since_last_call, veeva_suggestions_austedo.calls_per_mth, veeva_suggestions_austedo.avg_new_dose, veeva_suggestions_austedo.avg_cont_dose) ALL NODES;

CREATE PROJECTION sandbox.veeva_sugg_aust_v2_b0 /*+basename(veeva_sugg_aust_v2),createtype(A)*/ 
(
 account_priority_score_vod__c,
 account_vod__c,
 display_dismiss_vod__c,
 display_mark_as_complete_vod__c,
 display_score_vod__c,
 email_template_id_vod__c,
 email_template_vault_id_vod__c,
 email_template_vod__c,
 expiration_date_vod__c,
 marked_as_complete_vod__c,
 mark_complete_count_vod__c,
 name,
 ownerid,
 posted_date,
 priority_vod__c,
 reason_vod__c,
 record_type_name_vod__c,
 suppress_reason_vod__c,
 title_vod__c,
 business_rule_name,
 product,
 days_since_last_call,
 calls_per_mth,
 austedo_decile,
 avg_new_dose,
 avg_cont_dose,
 ss_flag,
 austedo_rx,
 hcp_name,
 rep_name,
 batch_num
)
AS
 SELECT veeva_sugg_aust_v2.account_priority_score_vod__c,
        veeva_sugg_aust_v2.account_vod__c,
        veeva_sugg_aust_v2.display_dismiss_vod__c,
        veeva_sugg_aust_v2.display_mark_as_complete_vod__c,
        veeva_sugg_aust_v2.display_score_vod__c,
        veeva_sugg_aust_v2.email_template_id_vod__c,
        veeva_sugg_aust_v2.email_template_vault_id_vod__c,
        veeva_sugg_aust_v2.email_template_vod__c,
        veeva_sugg_aust_v2.expiration_date_vod__c,
        veeva_sugg_aust_v2.marked_as_complete_vod__c,
        veeva_sugg_aust_v2.mark_complete_count_vod__c,
        veeva_sugg_aust_v2.name,
        veeva_sugg_aust_v2.ownerid,
        veeva_sugg_aust_v2.posted_date,
        veeva_sugg_aust_v2.priority_vod__c,
        veeva_sugg_aust_v2.reason_vod__c,
        veeva_sugg_aust_v2.record_type_name_vod__c,
        veeva_sugg_aust_v2.suppress_reason_vod__c,
        veeva_sugg_aust_v2.title_vod__c,
        veeva_sugg_aust_v2.business_rule_name,
        veeva_sugg_aust_v2.product,
        veeva_sugg_aust_v2.days_since_last_call,
        veeva_sugg_aust_v2.calls_per_mth,
        veeva_sugg_aust_v2.austedo_decile,
        veeva_sugg_aust_v2.avg_new_dose,
        veeva_sugg_aust_v2.avg_cont_dose,
        veeva_sugg_aust_v2.ss_flag,
        veeva_sugg_aust_v2.austedo_rx,
        veeva_sugg_aust_v2.hcp_name,
        veeva_sugg_aust_v2.rep_name,
        veeva_sugg_aust_v2.batch_num
 FROM sandbox.veeva_sugg_aust_v2
 ORDER BY veeva_sugg_aust_v2.account_priority_score_vod__c,
          veeva_sugg_aust_v2.account_vod__c,
          veeva_sugg_aust_v2.display_dismiss_vod__c,
          veeva_sugg_aust_v2.display_mark_as_complete_vod__c,
          veeva_sugg_aust_v2.display_score_vod__c,
          veeva_sugg_aust_v2.email_template_id_vod__c,
          veeva_sugg_aust_v2.email_template_vault_id_vod__c,
          veeva_sugg_aust_v2.email_template_vod__c,
          veeva_sugg_aust_v2.expiration_date_vod__c,
          veeva_sugg_aust_v2.marked_as_complete_vod__c,
          veeva_sugg_aust_v2.mark_complete_count_vod__c,
          veeva_sugg_aust_v2.name,
          veeva_sugg_aust_v2.ownerid,
          veeva_sugg_aust_v2.posted_date,
          veeva_sugg_aust_v2.priority_vod__c,
          veeva_sugg_aust_v2.reason_vod__c,
          veeva_sugg_aust_v2.record_type_name_vod__c,
          veeva_sugg_aust_v2.suppress_reason_vod__c,
          veeva_sugg_aust_v2.title_vod__c,
          veeva_sugg_aust_v2.business_rule_name,
          veeva_sugg_aust_v2.product,
          veeva_sugg_aust_v2.days_since_last_call,
          veeva_sugg_aust_v2.calls_per_mth,
          veeva_sugg_aust_v2.austedo_decile,
          veeva_sugg_aust_v2.avg_new_dose,
          veeva_sugg_aust_v2.avg_cont_dose,
          veeva_sugg_aust_v2.ss_flag,
          veeva_sugg_aust_v2.austedo_rx,
          veeva_sugg_aust_v2.hcp_name,
          veeva_sugg_aust_v2.rep_name,
          veeva_sugg_aust_v2.batch_num
SEGMENTED BY hash(veeva_sugg_aust_v2.account_priority_score_vod__c, veeva_sugg_aust_v2.expiration_date_vod__c, veeva_sugg_aust_v2.mark_complete_count_vod__c, veeva_sugg_aust_v2.posted_date, veeva_sugg_aust_v2.days_since_last_call, veeva_sugg_aust_v2.calls_per_mth, veeva_sugg_aust_v2.avg_new_dose, veeva_sugg_aust_v2.avg_cont_dose) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_mar2022_b0 /*+basename(ic_rx_mar2022),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_mar2022.ic_data_month,
        ic_rx_mar2022.basket_name,
        ic_rx_mar2022.sales_force_id,
        ic_rx_mar2022.area_number,
        ic_rx_mar2022.region_number,
        ic_rx_mar2022.territory_number,
        ic_rx_mar2022.ims_id,
        ic_rx_mar2022.tvcmid,
        ic_rx_mar2022.outlet_code,
        ic_rx_mar2022.va_station_number,
        ic_rx_mar2022.dnc_flag,
        ic_rx_mar2022.dnp_flag,
        ic_rx_mar2022.rollup_month,
        ic_rx_mar2022.month_bucket,
        ic_rx_mar2022.nrx_count,
        ic_rx_mar2022.trx_count,
        ic_rx_mar2022.nrx_quantity,
        ic_rx_mar2022.trx_quantity,
        ic_rx_mar2022.include_in_nation_rollup,
        ic_rx_mar2022.include_in_area_rollup,
        ic_rx_mar2022.include_in_region_rollup,
        ic_rx_mar2022.join_key,
        ic_rx_mar2022.row_source,
        ic_rx_mar2022.row_create_date,
        ic_rx_mar2022.indication,
        ic_rx_mar2022.outlet_dea,
        ic_rx_mar2022.payer_plan_number,
        ic_rx_mar2022.payment_method
 FROM sandbox.ic_rx_mar2022
 ORDER BY ic_rx_mar2022.ic_data_month,
          ic_rx_mar2022.basket_name,
          ic_rx_mar2022.sales_force_id,
          ic_rx_mar2022.area_number,
          ic_rx_mar2022.region_number,
          ic_rx_mar2022.territory_number,
          ic_rx_mar2022.ims_id,
          ic_rx_mar2022.tvcmid
SEGMENTED BY hash(ic_rx_mar2022.ic_data_month, ic_rx_mar2022.tvcmid, ic_rx_mar2022.outlet_code, ic_rx_mar2022.dnc_flag, ic_rx_mar2022.dnp_flag, ic_rx_mar2022.rollup_month, ic_rx_mar2022.month_bucket, ic_rx_mar2022.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_mar2022_b0 /*+basename(ic_demo_mar2022),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_mar2022.ic_data_month,
        ic_demo_mar2022.sales_force_id,
        ic_demo_mar2022.area_number,
        ic_demo_mar2022.region_number,
        ic_demo_mar2022.territory_number,
        ic_demo_mar2022.ims_id,
        ic_demo_mar2022.tvcmid,
        ic_demo_mar2022.outlet_code,
        ic_demo_mar2022.va_station_number,
        ic_demo_mar2022.specialty,
        ic_demo_mar2022.last_name,
        ic_demo_mar2022.first_name,
        ic_demo_mar2022.mid_name,
        ic_demo_mar2022.address_1,
        ic_demo_mar2022.address_2,
        ic_demo_mar2022.address_3,
        ic_demo_mar2022.city,
        ic_demo_mar2022.state,
        ic_demo_mar2022.zip,
        ic_demo_mar2022.address_source,
        ic_demo_mar2022.pdrp_flag,
        ic_demo_mar2022.pdrp_date,
        ic_demo_mar2022.np_pa_flag,
        ic_demo_mar2022.no_spend,
        ic_demo_mar2022.ama_no_contact_flag,
        ic_demo_mar2022.join_key,
        ic_demo_mar2022.row_source,
        ic_demo_mar2022.row_create_date,
        ic_demo_mar2022.outlet_dea,
        ic_demo_mar2022.secondary_specialty
 FROM sandbox.ic_demo_mar2022
 ORDER BY ic_demo_mar2022.ic_data_month,
          ic_demo_mar2022.sales_force_id,
          ic_demo_mar2022.area_number,
          ic_demo_mar2022.region_number,
          ic_demo_mar2022.territory_number,
          ic_demo_mar2022.ims_id,
          ic_demo_mar2022.tvcmid,
          ic_demo_mar2022.outlet_code
SEGMENTED BY hash(ic_demo_mar2022.ic_data_month, ic_demo_mar2022.tvcmid, ic_demo_mar2022.outlet_code, ic_demo_mar2022.mid_name, ic_demo_mar2022.state, ic_demo_mar2022.zip, ic_demo_mar2022.pdrp_flag, ic_demo_mar2022.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_06032022_super /*+basename(Austedo_PSRF_Utilization_Rpt_06032022),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_06032022 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00.PrescriberState, Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.ic_rx_apr2022_b0 /*+basename(ic_rx_apr2022),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_apr2022.ic_data_month,
        ic_rx_apr2022.basket_name,
        ic_rx_apr2022.sales_force_id,
        ic_rx_apr2022.area_number,
        ic_rx_apr2022.region_number,
        ic_rx_apr2022.territory_number,
        ic_rx_apr2022.ims_id,
        ic_rx_apr2022.tvcmid,
        ic_rx_apr2022.outlet_code,
        ic_rx_apr2022.va_station_number,
        ic_rx_apr2022.dnc_flag,
        ic_rx_apr2022.dnp_flag,
        ic_rx_apr2022.rollup_month,
        ic_rx_apr2022.month_bucket,
        ic_rx_apr2022.nrx_count,
        ic_rx_apr2022.trx_count,
        ic_rx_apr2022.nrx_quantity,
        ic_rx_apr2022.trx_quantity,
        ic_rx_apr2022.include_in_nation_rollup,
        ic_rx_apr2022.include_in_area_rollup,
        ic_rx_apr2022.include_in_region_rollup,
        ic_rx_apr2022.join_key,
        ic_rx_apr2022.row_source,
        ic_rx_apr2022.row_create_date,
        ic_rx_apr2022.indication,
        ic_rx_apr2022.outlet_dea,
        ic_rx_apr2022.payer_plan_number,
        ic_rx_apr2022.payment_method
 FROM sandbox.ic_rx_apr2022
 ORDER BY ic_rx_apr2022.ic_data_month,
          ic_rx_apr2022.basket_name,
          ic_rx_apr2022.sales_force_id,
          ic_rx_apr2022.area_number,
          ic_rx_apr2022.region_number,
          ic_rx_apr2022.territory_number,
          ic_rx_apr2022.ims_id,
          ic_rx_apr2022.tvcmid
SEGMENTED BY hash(ic_rx_apr2022.ic_data_month, ic_rx_apr2022.tvcmid, ic_rx_apr2022.outlet_code, ic_rx_apr2022.dnc_flag, ic_rx_apr2022.dnp_flag, ic_rx_apr2022.rollup_month, ic_rx_apr2022.month_bucket, ic_rx_apr2022.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_apr2022_b0 /*+basename(ic_demo_apr2022),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_apr2022.ic_data_month,
        ic_demo_apr2022.sales_force_id,
        ic_demo_apr2022.area_number,
        ic_demo_apr2022.region_number,
        ic_demo_apr2022.territory_number,
        ic_demo_apr2022.ims_id,
        ic_demo_apr2022.tvcmid,
        ic_demo_apr2022.outlet_code,
        ic_demo_apr2022.va_station_number,
        ic_demo_apr2022.specialty,
        ic_demo_apr2022.last_name,
        ic_demo_apr2022.first_name,
        ic_demo_apr2022.mid_name,
        ic_demo_apr2022.address_1,
        ic_demo_apr2022.address_2,
        ic_demo_apr2022.address_3,
        ic_demo_apr2022.city,
        ic_demo_apr2022.state,
        ic_demo_apr2022.zip,
        ic_demo_apr2022.address_source,
        ic_demo_apr2022.pdrp_flag,
        ic_demo_apr2022.pdrp_date,
        ic_demo_apr2022.np_pa_flag,
        ic_demo_apr2022.no_spend,
        ic_demo_apr2022.ama_no_contact_flag,
        ic_demo_apr2022.join_key,
        ic_demo_apr2022.row_source,
        ic_demo_apr2022.row_create_date,
        ic_demo_apr2022.outlet_dea,
        ic_demo_apr2022.secondary_specialty
 FROM sandbox.ic_demo_apr2022
 ORDER BY ic_demo_apr2022.ic_data_month,
          ic_demo_apr2022.sales_force_id,
          ic_demo_apr2022.area_number,
          ic_demo_apr2022.region_number,
          ic_demo_apr2022.territory_number,
          ic_demo_apr2022.ims_id,
          ic_demo_apr2022.tvcmid,
          ic_demo_apr2022.outlet_code
SEGMENTED BY hash(ic_demo_apr2022.ic_data_month, ic_demo_apr2022.tvcmid, ic_demo_apr2022.outlet_code, ic_demo_apr2022.mid_name, ic_demo_apr2022.state, ic_demo_apr2022.zip, ic_demo_apr2022.pdrp_flag, ic_demo_apr2022.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox."TH CALL ACTIVY IDs_b0" /*+basename(TH CALL ACTIVY IDs),createtype(L)*/ 
(
 veeva_account_id,
 ims_id,
 ims_outlet_id,
 tvcmid
)
AS
 SELECT "TH CALL ACTIVY IDs".veeva_account_id,
        "TH CALL ACTIVY IDs".ims_id,
        "TH CALL ACTIVY IDs".ims_outlet_id,
        "TH CALL ACTIVY IDs".tvcmid
 FROM sandbox."TH CALL ACTIVY IDs"
 ORDER BY "TH CALL ACTIVY IDs".veeva_account_id,
          "TH CALL ACTIVY IDs".ims_id,
          "TH CALL ACTIVY IDs".ims_outlet_id,
          "TH CALL ACTIVY IDs".tvcmid
SEGMENTED BY hash("TH CALL ACTIVY IDs".veeva_account_id, "TH CALL ACTIVY IDs".ims_id, "TH CALL ACTIVY IDs".ims_outlet_id, "TH CALL ACTIVY IDs".tvcmid) ALL NODES;

CREATE PROJECTION sandbox."TH CALL ACTIVITY 01_b0" /*+basename(TH CALL ACTIVITY 01),createtype(L)*/ 
(
 veeva_account_id,
 ims_id,
 ims_outlet_id,
 tvcmid
)
AS
 SELECT "TH CALL ACTIVITY 01".veeva_account_id,
        "TH CALL ACTIVITY 01".ims_id,
        "TH CALL ACTIVITY 01".ims_outlet_id,
        "TH CALL ACTIVITY 01".tvcmid
 FROM sandbox."TH CALL ACTIVITY 01"
 ORDER BY "TH CALL ACTIVITY 01".veeva_account_id,
          "TH CALL ACTIVITY 01".ims_id,
          "TH CALL ACTIVITY 01".ims_outlet_id,
          "TH CALL ACTIVITY 01".tvcmid
SEGMENTED BY hash("TH CALL ACTIVITY 01".tvcmid, "TH CALL ACTIVITY 01".veeva_account_id, "TH CALL ACTIVITY 01".ims_id, "TH CALL ACTIVITY 01".ims_outlet_id) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_002_b0 /*+basename(Austedo_PSRF_Utilization_Rpt_002),createtype(L)*/ 
(
 PrescriberName,
 ptr_city,
 ptr_state,
 ptr_zip,
 PrescriberNPI1,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_002.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_002.ptr_city,
        Austedo_PSRF_Utilization_Rpt_002.ptr_state,
        Austedo_PSRF_Utilization_Rpt_002.ptr_zip,
        Austedo_PSRF_Utilization_Rpt_002.PrescriberNPI1,
        Austedo_PSRF_Utilization_Rpt_002."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_002."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_002.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_002.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_002.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_002.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_002."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_002
 ORDER BY Austedo_PSRF_Utilization_Rpt_002.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_002.ptr_city,
          Austedo_PSRF_Utilization_Rpt_002.ptr_state,
          Austedo_PSRF_Utilization_Rpt_002.ptr_zip,
          Austedo_PSRF_Utilization_Rpt_002.PrescriberNPI1,
          Austedo_PSRF_Utilization_Rpt_002."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_002."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_002.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_002.ptr_state, Austedo_PSRF_Utilization_Rpt_002."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_002."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_002.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_002.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_002.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_002.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_002."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt06242022_super /*+basename(Austedo_PSRF_Utilization_Rpt06242022),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt06242022 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00.PrescriberState, Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_07012022_super /*+basename(Austedo_PSRF_Utilization_Rpt_07012022),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_07012022 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00.PrescriberState, Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.Austedo_POCN_0712_b0 /*+basename(Austedo_POCN_0712),createtype(L)*/ 
(
 Vendor,
 NPI,
 "Tactic Subtype",
 Creative,
 "Activity Date",
 Counts
)
AS
 SELECT Austedo_POCN_0712.Vendor,
        Austedo_POCN_0712.NPI,
        Austedo_POCN_0712."Tactic Subtype",
        Austedo_POCN_0712.Creative,
        Austedo_POCN_0712."Activity Date",
        Austedo_POCN_0712.Counts
 FROM sandbox.Austedo_POCN_0712
 ORDER BY Austedo_POCN_0712.Vendor,
          Austedo_POCN_0712.NPI,
          Austedo_POCN_0712."Tactic Subtype",
          Austedo_POCN_0712.Creative,
          Austedo_POCN_0712."Activity Date",
          Austedo_POCN_0712.Counts
SEGMENTED BY hash(Austedo_POCN_0712."Activity Date", Austedo_POCN_0712.Counts, Austedo_POCN_0712.Vendor, Austedo_POCN_0712.NPI, Austedo_POCN_0712."Tactic Subtype", Austedo_POCN_0712.Creative) ALL NODES;

CREATE PROJECTION sandbox.vmat2_writers_24mons_b0 /*+basename(vmat2_writers_24mons),createtype(A)*/ 
(
 ims_id,
 austedo_Script_count,
 ingrezza_script_count
)
AS
 SELECT vmat2_writers_24mons.ims_id,
        vmat2_writers_24mons.austedo_Script_count,
        vmat2_writers_24mons.ingrezza_script_count
 FROM sandbox.vmat2_writers_24mons
 ORDER BY vmat2_writers_24mons.ims_id,
          vmat2_writers_24mons.austedo_Script_count,
          vmat2_writers_24mons.ingrezza_script_count
SEGMENTED BY hash(vmat2_writers_24mons.ims_id, vmat2_writers_24mons.austedo_Script_count, vmat2_writers_24mons.ingrezza_script_count) ALL NODES;

CREATE PROJECTION sandbox.license_audits_b0 /*+basename(license_audits),createtype(A)*/ 
(
 database_size_bytes,
 license_size_bytes,
 usage_percent,
 audit_start_timestamp,
 audit_end_timestamp,
 confidence_level_percent,
 error_tolerance_percent,
 used_sampling,
 confidence_interval_lower_bound_bytes,
 confidence_interval_upper_bound_bytes,
 sample_count,
 cell_count,
 audited_data
)
AS
 SELECT license_audits.database_size_bytes,
        license_audits.license_size_bytes,
        license_audits.usage_percent,
        license_audits.audit_start_timestamp,
        license_audits.audit_end_timestamp,
        license_audits.confidence_level_percent,
        license_audits.error_tolerance_percent,
        license_audits.used_sampling,
        license_audits.confidence_interval_lower_bound_bytes,
        license_audits.confidence_interval_upper_bound_bytes,
        license_audits.sample_count,
        license_audits.cell_count,
        license_audits.audited_data
 FROM sandbox.license_audits
 ORDER BY license_audits.database_size_bytes,
          license_audits.license_size_bytes,
          license_audits.usage_percent,
          license_audits.audit_start_timestamp,
          license_audits.audit_end_timestamp,
          license_audits.confidence_level_percent,
          license_audits.error_tolerance_percent,
          license_audits.used_sampling
SEGMENTED BY hash(license_audits.database_size_bytes, license_audits.usage_percent, license_audits.audit_start_timestamp, license_audits.audit_end_timestamp, license_audits.confidence_level_percent, license_audits.error_tolerance_percent, license_audits.used_sampling, license_audits.confidence_interval_lower_bound_bytes) ALL NODES;

CREATE PROJECTION sandbox.query_profiles_b0 /*+basename(query_profiles),createtype(A)*/ 
(
 session_id,
 transaction_id,
 statement_id,
 identifier,
 node_name,
 query,
 query_search_path,
 schema_name,
 table_name,
 query_duration_us,
 query_start_epoch,
 query_start,
 query_type,
 error_code,
 user_name,
 processed_row_count,
 reserved_extra_memory_b,
 is_executing
)
AS
 SELECT query_profiles.session_id,
        query_profiles.transaction_id,
        query_profiles.statement_id,
        query_profiles.identifier,
        query_profiles.node_name,
        query_profiles.query,
        query_profiles.query_search_path,
        query_profiles.schema_name,
        query_profiles.table_name,
        query_profiles.query_duration_us,
        query_profiles.query_start_epoch,
        query_profiles.query_start,
        query_profiles.query_type,
        query_profiles.error_code,
        query_profiles.user_name,
        query_profiles.processed_row_count,
        query_profiles.reserved_extra_memory_b,
        query_profiles.is_executing
 FROM sandbox.query_profiles
 ORDER BY query_profiles.session_id,
          query_profiles.transaction_id,
          query_profiles.statement_id,
          query_profiles.identifier,
          query_profiles.node_name,
          query_profiles.query,
          query_profiles.query_search_path,
          query_profiles.schema_name
SEGMENTED BY hash(query_profiles.transaction_id, query_profiles.statement_id, query_profiles.query_start_epoch, query_profiles.error_code, query_profiles.processed_row_count, query_profiles.reserved_extra_memory_b, query_profiles.is_executing, query_profiles.query_duration_us) ALL NODES;

CREATE PROJECTION sandbox.sessions_b0 /*+basename(sessions),createtype(A)*/ 
(
 node_name,
 user_name,
 client_hostname,
 client_pid,
 login_timestamp,
 session_id,
 idle_session_timeout,
 grace_period,
 client_label,
 transaction_start,
 transaction_id,
 transaction_description,
 statement_start,
 statement_id,
 last_statement_duration_us,
 runtime_priority,
 current_statement,
 last_statement,
 ssl_state,
 authentication_method,
 client_type,
 client_version,
 client_os,
 client_os_user_name,
 client_authentication_name,
 client_authentication,
 requested_protocol,
 effective_protocol,
 external_memory_kb,
 temp_table_impaired
)
AS
 SELECT sessions.node_name,
        sessions.user_name,
        sessions.client_hostname,
        sessions.client_pid,
        sessions.login_timestamp,
        sessions.session_id,
        sessions.idle_session_timeout,
        sessions.grace_period,
        sessions.client_label,
        sessions.transaction_start,
        sessions.transaction_id,
        sessions.transaction_description,
        sessions.statement_start,
        sessions.statement_id,
        sessions.last_statement_duration_us,
        sessions.runtime_priority,
        sessions.current_statement,
        sessions.last_statement,
        sessions.ssl_state,
        sessions.authentication_method,
        sessions.client_type,
        sessions.client_version,
        sessions.client_os,
        sessions.client_os_user_name,
        sessions.client_authentication_name,
        sessions.client_authentication,
        sessions.requested_protocol,
        sessions.effective_protocol,
        sessions.external_memory_kb,
        sessions.temp_table_impaired
 FROM sandbox.sessions
 ORDER BY sessions.node_name,
          sessions.user_name,
          sessions.client_hostname,
          sessions.client_pid,
          sessions.login_timestamp,
          sessions.session_id,
          sessions.idle_session_timeout,
          sessions.grace_period
SEGMENTED BY hash(sessions.client_pid, sessions.login_timestamp, sessions.idle_session_timeout, sessions.grace_period, sessions.transaction_start, sessions.transaction_id, sessions.statement_start, sessions.statement_id) ALL NODES;

CREATE PROJECTION sandbox.humira_dddmd_adhoc_mthly_quantity_b0 /*+basename(humira_dddmd_adhoc_mthly_quantity),createtype(L)*/ 
(
 client_num,
 report_num,
 filler,
 outlet_code,
 subcategory_code,
 asn_number,
 category_code,
 product_group,
 data_date,
 qty_mth01,
 qty_mth02,
 qty_mth03,
 qty_mth04,
 qty_mth05,
 qty_mth06,
 qty_mth07,
 qty_mth08,
 qty_mth09,
 qty_mth10,
 qty_mth11,
 qty_mth12,
 qty_mth13,
 qty_mth14,
 qty_mth15,
 qty_mth16,
 qty_mth17,
 qty_mth18,
 qty_mth19,
 qty_mth20,
 qty_mth21,
 qty_mth22,
 qty_mth23,
 qty_mth24,
 outlet_name,
 outlet_address,
 outlet_city,
 outlet_state,
 outlet_zip
)
AS
 SELECT humira_dddmd_adhoc_mthly_quantity.client_num,
        humira_dddmd_adhoc_mthly_quantity.report_num,
        humira_dddmd_adhoc_mthly_quantity.filler,
        humira_dddmd_adhoc_mthly_quantity.outlet_code,
        humira_dddmd_adhoc_mthly_quantity.subcategory_code,
        humira_dddmd_adhoc_mthly_quantity.asn_number,
        humira_dddmd_adhoc_mthly_quantity.category_code,
        humira_dddmd_adhoc_mthly_quantity.product_group,
        humira_dddmd_adhoc_mthly_quantity.data_date,
        humira_dddmd_adhoc_mthly_quantity.qty_mth01,
        humira_dddmd_adhoc_mthly_quantity.qty_mth02,
        humira_dddmd_adhoc_mthly_quantity.qty_mth03,
        humira_dddmd_adhoc_mthly_quantity.qty_mth04,
        humira_dddmd_adhoc_mthly_quantity.qty_mth05,
        humira_dddmd_adhoc_mthly_quantity.qty_mth06,
        humira_dddmd_adhoc_mthly_quantity.qty_mth07,
        humira_dddmd_adhoc_mthly_quantity.qty_mth08,
        humira_dddmd_adhoc_mthly_quantity.qty_mth09,
        humira_dddmd_adhoc_mthly_quantity.qty_mth10,
        humira_dddmd_adhoc_mthly_quantity.qty_mth11,
        humira_dddmd_adhoc_mthly_quantity.qty_mth12,
        humira_dddmd_adhoc_mthly_quantity.qty_mth13,
        humira_dddmd_adhoc_mthly_quantity.qty_mth14,
        humira_dddmd_adhoc_mthly_quantity.qty_mth15,
        humira_dddmd_adhoc_mthly_quantity.qty_mth16,
        humira_dddmd_adhoc_mthly_quantity.qty_mth17,
        humira_dddmd_adhoc_mthly_quantity.qty_mth18,
        humira_dddmd_adhoc_mthly_quantity.qty_mth19,
        humira_dddmd_adhoc_mthly_quantity.qty_mth20,
        humira_dddmd_adhoc_mthly_quantity.qty_mth21,
        humira_dddmd_adhoc_mthly_quantity.qty_mth22,
        humira_dddmd_adhoc_mthly_quantity.qty_mth23,
        humira_dddmd_adhoc_mthly_quantity.qty_mth24,
        humira_dddmd_adhoc_mthly_quantity.outlet_name,
        humira_dddmd_adhoc_mthly_quantity.outlet_address,
        humira_dddmd_adhoc_mthly_quantity.outlet_city,
        humira_dddmd_adhoc_mthly_quantity.outlet_state,
        humira_dddmd_adhoc_mthly_quantity.outlet_zip
 FROM sandbox.humira_dddmd_adhoc_mthly_quantity
 ORDER BY humira_dddmd_adhoc_mthly_quantity.client_num,
          humira_dddmd_adhoc_mthly_quantity.report_num,
          humira_dddmd_adhoc_mthly_quantity.filler,
          humira_dddmd_adhoc_mthly_quantity.outlet_code,
          humira_dddmd_adhoc_mthly_quantity.subcategory_code,
          humira_dddmd_adhoc_mthly_quantity.asn_number,
          humira_dddmd_adhoc_mthly_quantity.category_code,
          humira_dddmd_adhoc_mthly_quantity.product_group
SEGMENTED BY hash(humira_dddmd_adhoc_mthly_quantity.client_num, humira_dddmd_adhoc_mthly_quantity.report_num, humira_dddmd_adhoc_mthly_quantity.filler, humira_dddmd_adhoc_mthly_quantity.category_code, humira_dddmd_adhoc_mthly_quantity.qty_mth01, humira_dddmd_adhoc_mthly_quantity.qty_mth02, humira_dddmd_adhoc_mthly_quantity.qty_mth03, humira_dddmd_adhoc_mthly_quantity.qty_mth04) ALL NODES;

CREATE PROJECTION sandbox.humira_dddmd_adhoc_mthly_dollars_b0 /*+basename(humira_dddmd_adhoc_mthly_dollars),createtype(L)*/ 
(
 client_num,
 report_num,
 filler,
 outlet_code,
 subcategory_code,
 asn_number,
 category_code,
 product_group,
 data_date,
 dol_mth01,
 dol_mth02,
 dol_mth03,
 dol_mth04,
 dol_mth05,
 dol_mth06,
 dol_mth07,
 dol_mth08,
 dol_mth09,
 dol_mth10,
 dol_mth11,
 dol_mth12,
 dol_mth13,
 dol_mth14,
 dol_mth15,
 dol_mth16,
 dol_mth17,
 dol_mth18,
 dol_mth19,
 dol_mth20,
 dol_mth21,
 dol_mth22,
 dol_mth23,
 dol_mth24,
 outlet_name,
 outlet_address,
 outlet_city,
 outlet_state,
 outlet_zip
)
AS
 SELECT humira_dddmd_adhoc_mthly_dollars.client_num,
        humira_dddmd_adhoc_mthly_dollars.report_num,
        humira_dddmd_adhoc_mthly_dollars.filler,
        humira_dddmd_adhoc_mthly_dollars.outlet_code,
        humira_dddmd_adhoc_mthly_dollars.subcategory_code,
        humira_dddmd_adhoc_mthly_dollars.asn_number,
        humira_dddmd_adhoc_mthly_dollars.category_code,
        humira_dddmd_adhoc_mthly_dollars.product_group,
        humira_dddmd_adhoc_mthly_dollars.data_date,
        humira_dddmd_adhoc_mthly_dollars.dol_mth01,
        humira_dddmd_adhoc_mthly_dollars.dol_mth02,
        humira_dddmd_adhoc_mthly_dollars.dol_mth03,
        humira_dddmd_adhoc_mthly_dollars.dol_mth04,
        humira_dddmd_adhoc_mthly_dollars.dol_mth05,
        humira_dddmd_adhoc_mthly_dollars.dol_mth06,
        humira_dddmd_adhoc_mthly_dollars.dol_mth07,
        humira_dddmd_adhoc_mthly_dollars.dol_mth08,
        humira_dddmd_adhoc_mthly_dollars.dol_mth09,
        humira_dddmd_adhoc_mthly_dollars.dol_mth10,
        humira_dddmd_adhoc_mthly_dollars.dol_mth11,
        humira_dddmd_adhoc_mthly_dollars.dol_mth12,
        humira_dddmd_adhoc_mthly_dollars.dol_mth13,
        humira_dddmd_adhoc_mthly_dollars.dol_mth14,
        humira_dddmd_adhoc_mthly_dollars.dol_mth15,
        humira_dddmd_adhoc_mthly_dollars.dol_mth16,
        humira_dddmd_adhoc_mthly_dollars.dol_mth17,
        humira_dddmd_adhoc_mthly_dollars.dol_mth18,
        humira_dddmd_adhoc_mthly_dollars.dol_mth19,
        humira_dddmd_adhoc_mthly_dollars.dol_mth20,
        humira_dddmd_adhoc_mthly_dollars.dol_mth21,
        humira_dddmd_adhoc_mthly_dollars.dol_mth22,
        humira_dddmd_adhoc_mthly_dollars.dol_mth23,
        humira_dddmd_adhoc_mthly_dollars.dol_mth24,
        humira_dddmd_adhoc_mthly_dollars.outlet_name,
        humira_dddmd_adhoc_mthly_dollars.outlet_address,
        humira_dddmd_adhoc_mthly_dollars.outlet_city,
        humira_dddmd_adhoc_mthly_dollars.outlet_state,
        humira_dddmd_adhoc_mthly_dollars.outlet_zip
 FROM sandbox.humira_dddmd_adhoc_mthly_dollars
 ORDER BY humira_dddmd_adhoc_mthly_dollars.client_num,
          humira_dddmd_adhoc_mthly_dollars.report_num,
          humira_dddmd_adhoc_mthly_dollars.filler,
          humira_dddmd_adhoc_mthly_dollars.outlet_code,
          humira_dddmd_adhoc_mthly_dollars.subcategory_code,
          humira_dddmd_adhoc_mthly_dollars.asn_number,
          humira_dddmd_adhoc_mthly_dollars.category_code,
          humira_dddmd_adhoc_mthly_dollars.product_group
SEGMENTED BY hash(humira_dddmd_adhoc_mthly_dollars.client_num, humira_dddmd_adhoc_mthly_dollars.report_num, humira_dddmd_adhoc_mthly_dollars.filler, humira_dddmd_adhoc_mthly_dollars.category_code, humira_dddmd_adhoc_mthly_dollars.dol_mth01, humira_dddmd_adhoc_mthly_dollars.dol_mth02, humira_dddmd_adhoc_mthly_dollars.dol_mth03, humira_dddmd_adhoc_mthly_dollars.dol_mth04) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_b0 /*+basename(ic_rx),createtype(L)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx.ic_data_month,
        ic_rx.basket_name,
        ic_rx.sales_force_id,
        ic_rx.area_number,
        ic_rx.region_number,
        ic_rx.territory_number,
        ic_rx.ims_id,
        ic_rx.tvcmid,
        ic_rx.outlet_code,
        ic_rx.va_station_number,
        ic_rx.dnc_flag,
        ic_rx.dnp_flag,
        ic_rx.rollup_month,
        ic_rx.month_bucket,
        ic_rx.nrx_count,
        ic_rx.trx_count,
        ic_rx.nrx_quantity,
        ic_rx.trx_quantity,
        ic_rx.include_in_nation_rollup,
        ic_rx.include_in_area_rollup,
        ic_rx.include_in_region_rollup,
        ic_rx.join_key,
        ic_rx.row_source,
        ic_rx.row_create_date,
        ic_rx.indication,
        ic_rx.outlet_dea,
        ic_rx.payer_plan_number,
        ic_rx.payment_method
 FROM sandbox.ic_rx
 ORDER BY ic_rx.area_number,
          ic_rx.region_number,
          ic_rx.territory_number,
          ic_rx.ims_id,
          ic_rx.tvcmid
SEGMENTED BY hash(ic_rx.ic_data_month, ic_rx.tvcmid, ic_rx.outlet_code, ic_rx.dnc_flag, ic_rx.dnp_flag, ic_rx.rollup_month, ic_rx.month_bucket, ic_rx.nrx_count, ic_rx.trx_count, ic_rx.nrx_quantity, ic_rx.trx_quantity, ic_rx.include_in_nation_rollup, ic_rx.include_in_area_rollup, ic_rx.include_in_region_rollup, ic_rx.row_create_date, ic_rx.ims_id, ic_rx.va_station_number, ic_rx.join_key, ic_rx.area_number, ic_rx.region_number, ic_rx.territory_number, ic_rx.sales_force_id, ic_rx.row_source, ic_rx.basket_name) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_b0 /*+basename(ic_demo),createtype(L)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo.ic_data_month,
        ic_demo.sales_force_id,
        ic_demo.area_number,
        ic_demo.region_number,
        ic_demo.territory_number,
        ic_demo.ims_id,
        ic_demo.tvcmid,
        ic_demo.outlet_code,
        ic_demo.va_station_number,
        ic_demo.specialty,
        ic_demo.last_name,
        ic_demo.first_name,
        ic_demo.mid_name,
        ic_demo.address_1,
        ic_demo.address_2,
        ic_demo.address_3,
        ic_demo.city,
        ic_demo.state,
        ic_demo.zip,
        ic_demo.address_source,
        ic_demo.pdrp_flag,
        ic_demo.pdrp_date,
        ic_demo.np_pa_flag,
        ic_demo.no_spend,
        ic_demo.ama_no_contact_flag,
        ic_demo.join_key,
        ic_demo.row_source,
        ic_demo.row_create_date,
        ic_demo.outlet_dea,
        ic_demo.secondary_specialty
 FROM sandbox.ic_demo
 ORDER BY ic_demo.area_number,
          ic_demo.region_number,
          ic_demo.territory_number,
          ic_demo.ims_id,
          ic_demo.tvcmid
SEGMENTED BY hash(ic_demo.ic_data_month, ic_demo.tvcmid, ic_demo.outlet_code, ic_demo.mid_name, ic_demo.state, ic_demo.zip, ic_demo.pdrp_flag, ic_demo.pdrp_date, ic_demo.np_pa_flag, ic_demo.no_spend, ic_demo.ama_no_contact_flag, ic_demo.row_create_date, ic_demo.ims_id, ic_demo.va_station_number, ic_demo.specialty, ic_demo.join_key, ic_demo.area_number, ic_demo.region_number, ic_demo.territory_number, ic_demo.sales_force_id, ic_demo.first_name, ic_demo.city, ic_demo.address_source, ic_demo.last_name, ic_demo.address_1, ic_demo.address_2, ic_demo.address_3, ic_demo.row_source) ALL NODES;

CREATE PROJECTION sandbox.qims_td_target_univ_b0 /*+basename(qims_td_target_univ),createtype(L)*/ 
(
 PRESCRIBER_ID,
 ME_NBR,
 IMS_ID,
 NPI,
 PRIMARY_SPECIALTY,
 SECONDARY_SPECIALTY,
 PRIMARY_SPECIALTY_GROUP,
 SECONDARY_SPECIALTY_GROUP,
 GENDER_CD,
 FIRST_NAME,
 LAST_NAME,
 MID_NAME,
 ADDRESS_1,
 ADDRESS_2,
 CITY,
 STATE,
 ZIP,
 AMA_NO_CONTACT_INDICATOR,
 AMA_PDRP_IND,
 PROVIDER_TYP_DESC,
 TARGET_Y_N,
 ADOPTION_CATEGORY,
 CMHC_AFFILIATION_Y_N,
 INFLUENCER,
 INFLUENCER_MVT_DIS_LEADER,
 INFLUENCER_BHVR_HLTH_LEADER,
 PRIORITY_FLAG_Y_N,
 DIAGNOSED_TD_PAT_CNT,
 OVERALL_DIAGNOSED_TD_PAT_CNT,
 OVERALL_UNIQUE_DIAG_TD_PAT_CNT,
 PREDICTED_TD_PAT_CNT_HIGH,
 PREDICTED_TD_PAT_CNT_UNIQUE_HIGH,
 SUM_OF_SCORES_PREDICTED_PAT_CNT_HIGH,
 SUM_OF_SCORES_PREDICTED_PAT_CNT_UNIQUE_HIGH,
 TOTAL_OPPORTUNITY_HIGH,
 PREDICTED_TD_PAT_CNT_MEDIUM,
 PREDICTED_TD_PAT_CNT_UNIQUE_MEDIUM,
 SUM_OF_SCORES_PREDICTED_PAT_CNT_MEDIUM,
 SUM_OF_SCORES_PREDICTED_PAT_CNT_UNIQUE_MEDIUM,
 TOTAL_OPPORTUNITY_MEDIUM,
 TOTAL_OPPORTUNITY_DIAG_HIGH_MEDIUM,
 RANK,
 DECILE_PAT_CNT,
 DECILE_SUM_OF_SCORES,
 DECILE_SUM_OF_SCORES_UNIQUE,
 DECILE_OLD,
 APD_PAT_CNT,
 APD_PAT_CNT_TD_HIGH,
 APD_PAT_CNT_TD_MEDIUM,
 DIAGN_TD_MDD_BPD_SCZ_PAT_CNT,
 OVERALL_DIAG_TD_MDD_BPD_SCZ_PT,
 PREDICTED_TD_MDD_BPD_SCZ_PAT_CNT_HIGH,
 TOTAL_OPPORTUNITY_MDD_BPD_SCZ_HIGH,
 PREDICTED_TD_MDD_BPD_SCZ_PAT_CNT_MEDIUM,
 TOTAL_OPPORTUNITY_MDD_BPD_SCZ_MEDIUM,
 DIAGNOSED_TD_MDD_PAT_CNT,
 OVERALL_DIAGNOSED_TD_MDD_PAT,
 PREDICTED_TD_MDD_PAT_CNT_HIGH,
 TOTAL_OPPORTUNITY_MDD_HIGH,
 PREDICTED_TD_MDD_PAT_CNT_MEDIUM,
 TOTAL_OPPORTUNITY_MDD_MEDIUM,
 DIAGNOSED_TD_BPD_PAT_CNT,
 OVERALL_DIAGNOSED_TD_BPD_PAT_CNT,
 PREDICTED_TD_BPD_PAT_CNT_HIGH,
 TOTAL_OPPORTUNITY_BPD_HIGH,
 PREDICTED_TD_BPD_PAT_CNT_MEDIUM,
 TOTAL_OPPORTUNITY_BPD_MEDIUM,
 DIAGNOSED_TD_SCZ_PAT_CNT,
 OVERALL_DIAGNOSED_TD_SCZ_PAT_CNT,
 PREDICTED_TD_SCZ_PAT_CNT_HIGH,
 TOTAL_OPPORTUNITY_SCZ_HIGH,
 PREDICTED_TD_SCZ_PAT_CNT_MEDIUM,
 TOTAL_OPPORTUNITY_SCZ_MEDIUM,
 APD_CLM_CNT,
 APD_CLM_CNT_TD_HIGH,
 APD_CLM_CNT_TD_MEDIUM,
 DIAGNOSED_TD_CLM_CNT,
 METO_CLM_CNT,
 ARIPIPRAZOLE_CLM_CNT,
 ASENAPINE_CLM_CNT,
 BREXPIPRAZOLE_CLM_CNT,
 CARIPRAZINE_CLM_CNT,
 CHLORPROMAZINE_CLM_CNT,
 CLOZAPINE_CLM_CNT,
 DROPERIDOL_CLM_CNT,
 FLUPHENAZINE_CLM_CNT,
 HALOPERIDOL_CLM_CNT,
 ILOPERIDONE_CLM_CNT,
 LOXAPINE_CLM_CNT,
 LURASIDONE_CLM_CNT,
 MOLINDONE_CLM_CNT,
 OLANZAPINE_CLM_CNT,
 PALIPERIDONE_CLM_CNT,
 PERPHENAZINE_CLM_CNT,
 PIMAVANSERIN_CLM_CNT,
 PIMOZIDE_CLM_CNT,
 PROCHLORPERAZINE_CLM_CNT,
 QUETIAPINE_CLM_CNT,
 RISPERIDONE_CLM_CNT,
 THIORIDAZINE_CLM_CNT,
 THIOTHIXENE_CLM_CNT,
 TRIFLUOPERAZINE_CLM_CNT,
 ZIPRASIDONE_CLM_CNT,
 ABILIFY_LTC_TRX,
 ABILIFY_DISCMELT_LTC_TRX,
 ABILIFY_MAINTENA_LTC_TRX,
 ARIPIPRAZOLE_LTC_TRX,
 ARIPIPRAZOLE_ODT_LTC_TRX,
 ARISTADA_LTC_TRX,
 CHLORPROMAZINE_HCL_LTC_TRX,
 CLOZAPINE_LTC_TRX,
 CLOZAPINE_ODT_LTC_TRX,
 CLOZARIL_LTC_TRX,
 COMPRO_LTC_TRX,
 FANAPT_LTC_TRX,
 FANAPT_TITRATION_PACK_LTC_TRX,
 FAZACLO_LTC_TRX,
 FLUPHENAZINE_DECANOATE_LTC_TRX,
 FLUPHENAZINE_HCL_LTC_TRX,
 GEODON_LTC_TRX,
 HALDOL_LTC_TRX,
 HALDOL_DECANOATE_100_LTC_TRX,
 HALDOL_DECANOATE_50_LTC_TRX,
 HALOPERIDOL_LTC_TRX,
 HALOPERIDOL_DECANOATE_LTC_TRX,
 HALOPERIDOL_LACTATE_LTC_TRX,
 INVEGA_LTC_TRX,
 INVEGA_SUSTENNA_LTC_TRX,
 INVEGA_TRINZA_LTC_TRX,
 LATUDA_LTC_TRX,
 LOXAPINE_LTC_TRX,
 LOXAPINE_SUCCINATE_LTC_TRX,
 MOLINDONE_HYDROCHLOR_LTC_TRX,
 NUPLAZID_LTC_TRX,
 OLANZAPINE_LTC_TRX,
 OLANZAPINE_ODT_LTC_TRX,
 OLANZAPINE_FLUOXETINE_LTC_TRX,
 ORAP_LTC_TRX,
 PALIPERIDONE_ER_LTC_TRX,
 PERPHENAZINE_LTC_TRX,
 PERPHENAZINE_AMITRIPTY_LTC_TRX,
 PIMOZIDE_LTC_TRX,
 PROCHLORPERAZINE_LTC_TRX,
 PROCHLORPERAZINE_EDISY_LTC_TRX,
 PROCHLORPERAZINE_MALEA_LTC_TRX,
 QUETIAPINE_FUMARATE_LTC_TRX,
 QUETIAPINE_FUMARATE_ER_LTC_TRX,
 REXULTI_LTC_TRX,
 RISPERDAL_LTC_TRX,
 RISPERDAL_CONSTA_LTC_TRX,
 RISPERDAL_M_TAB_LTC_TRX,
 RISPERIDONE_LTC_TRX,
 RISPERIDONE_M_TAB_LTC_TRX,
 RISPERIDONE_ODT_LTC_TRX,
 SAPHRIS_LTC_TRX,
 SEROQUEL_LTC_TRX,
 SEROQUEL_XR_LTC_TRX,
 SYMBYAX_LTC_TRX,
 THIORIDAZINE_HCL_LTC_TRX,
 THIOTHIXENE_LTC_TRX,
 TRIFLUOPERAZINE_HCL_LTC_TRX,
 VERSACLOZ_LTC_TRX,
 VRAYLAR_LTC_TRX,
 ZIPRASIDONE_HCL_LTC_TRX,
 ZYPREXA_LTC_TRX,
 ZYPREXA_RELPREVV_LTC_TRX,
 ZYPREXA_ZYDIS_LTC_TRX,
 FACILITY_TYPE
)
AS
 SELECT qims_td_target_univ.PRESCRIBER_ID,
        qims_td_target_univ.ME_NBR,
        qims_td_target_univ.IMS_ID,
        qims_td_target_univ.NPI,
        qims_td_target_univ.PRIMARY_SPECIALTY,
        qims_td_target_univ.SECONDARY_SPECIALTY,
        qims_td_target_univ.PRIMARY_SPECIALTY_GROUP,
        qims_td_target_univ.SECONDARY_SPECIALTY_GROUP,
        qims_td_target_univ.GENDER_CD,
        qims_td_target_univ.FIRST_NAME,
        qims_td_target_univ.LAST_NAME,
        qims_td_target_univ.MID_NAME,
        qims_td_target_univ.ADDRESS_1,
        qims_td_target_univ.ADDRESS_2,
        qims_td_target_univ.CITY,
        qims_td_target_univ.STATE,
        qims_td_target_univ.ZIP,
        qims_td_target_univ.AMA_NO_CONTACT_INDICATOR,
        qims_td_target_univ.AMA_PDRP_IND,
        qims_td_target_univ.PROVIDER_TYP_DESC,
        qims_td_target_univ.TARGET_Y_N,
        qims_td_target_univ.ADOPTION_CATEGORY,
        qims_td_target_univ.CMHC_AFFILIATION_Y_N,
        qims_td_target_univ.INFLUENCER,
        qims_td_target_univ.INFLUENCER_MVT_DIS_LEADER,
        qims_td_target_univ.INFLUENCER_BHVR_HLTH_LEADER,
        qims_td_target_univ.PRIORITY_FLAG_Y_N,
        qims_td_target_univ.DIAGNOSED_TD_PAT_CNT,
        qims_td_target_univ.OVERALL_DIAGNOSED_TD_PAT_CNT,
        qims_td_target_univ.OVERALL_UNIQUE_DIAG_TD_PAT_CNT,
        qims_td_target_univ.PREDICTED_TD_PAT_CNT_HIGH,
        qims_td_target_univ.PREDICTED_TD_PAT_CNT_UNIQUE_HIGH,
        qims_td_target_univ.SUM_OF_SCORES_PREDICTED_PAT_CNT_HIGH,
        qims_td_target_univ.SUM_OF_SCORES_PREDICTED_PAT_CNT_UNIQUE_HIGH,
        qims_td_target_univ.TOTAL_OPPORTUNITY_HIGH,
        qims_td_target_univ.PREDICTED_TD_PAT_CNT_MEDIUM,
        qims_td_target_univ.PREDICTED_TD_PAT_CNT_UNIQUE_MEDIUM,
        qims_td_target_univ.SUM_OF_SCORES_PREDICTED_PAT_CNT_MEDIUM,
        qims_td_target_univ.SUM_OF_SCORES_PREDICTED_PAT_CNT_UNIQUE_MEDIUM,
        qims_td_target_univ.TOTAL_OPPORTUNITY_MEDIUM,
        qims_td_target_univ.TOTAL_OPPORTUNITY_DIAG_HIGH_MEDIUM,
        qims_td_target_univ.RANK,
        qims_td_target_univ.DECILE_PAT_CNT,
        qims_td_target_univ.DECILE_SUM_OF_SCORES,
        qims_td_target_univ.DECILE_SUM_OF_SCORES_UNIQUE,
        qims_td_target_univ.DECILE_OLD,
        qims_td_target_univ.APD_PAT_CNT,
        qims_td_target_univ.APD_PAT_CNT_TD_HIGH,
        qims_td_target_univ.APD_PAT_CNT_TD_MEDIUM,
        qims_td_target_univ.DIAGN_TD_MDD_BPD_SCZ_PAT_CNT,
        qims_td_target_univ.OVERALL_DIAG_TD_MDD_BPD_SCZ_PT,
        qims_td_target_univ.PREDICTED_TD_MDD_BPD_SCZ_PAT_CNT_HIGH,
        qims_td_target_univ.TOTAL_OPPORTUNITY_MDD_BPD_SCZ_HIGH,
        qims_td_target_univ.PREDICTED_TD_MDD_BPD_SCZ_PAT_CNT_MEDIUM,
        qims_td_target_univ.TOTAL_OPPORTUNITY_MDD_BPD_SCZ_MEDIUM,
        qims_td_target_univ.DIAGNOSED_TD_MDD_PAT_CNT,
        qims_td_target_univ.OVERALL_DIAGNOSED_TD_MDD_PAT,
        qims_td_target_univ.PREDICTED_TD_MDD_PAT_CNT_HIGH,
        qims_td_target_univ.TOTAL_OPPORTUNITY_MDD_HIGH,
        qims_td_target_univ.PREDICTED_TD_MDD_PAT_CNT_MEDIUM,
        qims_td_target_univ.TOTAL_OPPORTUNITY_MDD_MEDIUM,
        qims_td_target_univ.DIAGNOSED_TD_BPD_PAT_CNT,
        qims_td_target_univ.OVERALL_DIAGNOSED_TD_BPD_PAT_CNT,
        qims_td_target_univ.PREDICTED_TD_BPD_PAT_CNT_HIGH,
        qims_td_target_univ.TOTAL_OPPORTUNITY_BPD_HIGH,
        qims_td_target_univ.PREDICTED_TD_BPD_PAT_CNT_MEDIUM,
        qims_td_target_univ.TOTAL_OPPORTUNITY_BPD_MEDIUM,
        qims_td_target_univ.DIAGNOSED_TD_SCZ_PAT_CNT,
        qims_td_target_univ.OVERALL_DIAGNOSED_TD_SCZ_PAT_CNT,
        qims_td_target_univ.PREDICTED_TD_SCZ_PAT_CNT_HIGH,
        qims_td_target_univ.TOTAL_OPPORTUNITY_SCZ_HIGH,
        qims_td_target_univ.PREDICTED_TD_SCZ_PAT_CNT_MEDIUM,
        qims_td_target_univ.TOTAL_OPPORTUNITY_SCZ_MEDIUM,
        qims_td_target_univ.APD_CLM_CNT,
        qims_td_target_univ.APD_CLM_CNT_TD_HIGH,
        qims_td_target_univ.APD_CLM_CNT_TD_MEDIUM,
        qims_td_target_univ.DIAGNOSED_TD_CLM_CNT,
        qims_td_target_univ.METO_CLM_CNT,
        qims_td_target_univ.ARIPIPRAZOLE_CLM_CNT,
        qims_td_target_univ.ASENAPINE_CLM_CNT,
        qims_td_target_univ.BREXPIPRAZOLE_CLM_CNT,
        qims_td_target_univ.CARIPRAZINE_CLM_CNT,
        qims_td_target_univ.CHLORPROMAZINE_CLM_CNT,
        qims_td_target_univ.CLOZAPINE_CLM_CNT,
        qims_td_target_univ.DROPERIDOL_CLM_CNT,
        qims_td_target_univ.FLUPHENAZINE_CLM_CNT,
        qims_td_target_univ.HALOPERIDOL_CLM_CNT,
        qims_td_target_univ.ILOPERIDONE_CLM_CNT,
        qims_td_target_univ.LOXAPINE_CLM_CNT,
        qims_td_target_univ.LURASIDONE_CLM_CNT,
        qims_td_target_univ.MOLINDONE_CLM_CNT,
        qims_td_target_univ.OLANZAPINE_CLM_CNT,
        qims_td_target_univ.PALIPERIDONE_CLM_CNT,
        qims_td_target_univ.PERPHENAZINE_CLM_CNT,
        qims_td_target_univ.PIMAVANSERIN_CLM_CNT,
        qims_td_target_univ.PIMOZIDE_CLM_CNT,
        qims_td_target_univ.PROCHLORPERAZINE_CLM_CNT,
        qims_td_target_univ.QUETIAPINE_CLM_CNT,
        qims_td_target_univ.RISPERIDONE_CLM_CNT,
        qims_td_target_univ.THIORIDAZINE_CLM_CNT,
        qims_td_target_univ.THIOTHIXENE_CLM_CNT,
        qims_td_target_univ.TRIFLUOPERAZINE_CLM_CNT,
        qims_td_target_univ.ZIPRASIDONE_CLM_CNT,
        qims_td_target_univ.ABILIFY_LTC_TRX,
        qims_td_target_univ.ABILIFY_DISCMELT_LTC_TRX,
        qims_td_target_univ.ABILIFY_MAINTENA_LTC_TRX,
        qims_td_target_univ.ARIPIPRAZOLE_LTC_TRX,
        qims_td_target_univ.ARIPIPRAZOLE_ODT_LTC_TRX,
        qims_td_target_univ.ARISTADA_LTC_TRX,
        qims_td_target_univ.CHLORPROMAZINE_HCL_LTC_TRX,
        qims_td_target_univ.CLOZAPINE_LTC_TRX,
        qims_td_target_univ.CLOZAPINE_ODT_LTC_TRX,
        qims_td_target_univ.CLOZARIL_LTC_TRX,
        qims_td_target_univ.COMPRO_LTC_TRX,
        qims_td_target_univ.FANAPT_LTC_TRX,
        qims_td_target_univ.FANAPT_TITRATION_PACK_LTC_TRX,
        qims_td_target_univ.FAZACLO_LTC_TRX,
        qims_td_target_univ.FLUPHENAZINE_DECANOATE_LTC_TRX,
        qims_td_target_univ.FLUPHENAZINE_HCL_LTC_TRX,
        qims_td_target_univ.GEODON_LTC_TRX,
        qims_td_target_univ.HALDOL_LTC_TRX,
        qims_td_target_univ.HALDOL_DECANOATE_100_LTC_TRX,
        qims_td_target_univ.HALDOL_DECANOATE_50_LTC_TRX,
        qims_td_target_univ.HALOPERIDOL_LTC_TRX,
        qims_td_target_univ.HALOPERIDOL_DECANOATE_LTC_TRX,
        qims_td_target_univ.HALOPERIDOL_LACTATE_LTC_TRX,
        qims_td_target_univ.INVEGA_LTC_TRX,
        qims_td_target_univ.INVEGA_SUSTENNA_LTC_TRX,
        qims_td_target_univ.INVEGA_TRINZA_LTC_TRX,
        qims_td_target_univ.LATUDA_LTC_TRX,
        qims_td_target_univ.LOXAPINE_LTC_TRX,
        qims_td_target_univ.LOXAPINE_SUCCINATE_LTC_TRX,
        qims_td_target_univ.MOLINDONE_HYDROCHLOR_LTC_TRX,
        qims_td_target_univ.NUPLAZID_LTC_TRX,
        qims_td_target_univ.OLANZAPINE_LTC_TRX,
        qims_td_target_univ.OLANZAPINE_ODT_LTC_TRX,
        qims_td_target_univ.OLANZAPINE_FLUOXETINE_LTC_TRX,
        qims_td_target_univ.ORAP_LTC_TRX,
        qims_td_target_univ.PALIPERIDONE_ER_LTC_TRX,
        qims_td_target_univ.PERPHENAZINE_LTC_TRX,
        qims_td_target_univ.PERPHENAZINE_AMITRIPTY_LTC_TRX,
        qims_td_target_univ.PIMOZIDE_LTC_TRX,
        qims_td_target_univ.PROCHLORPERAZINE_LTC_TRX,
        qims_td_target_univ.PROCHLORPERAZINE_EDISY_LTC_TRX,
        qims_td_target_univ.PROCHLORPERAZINE_MALEA_LTC_TRX,
        qims_td_target_univ.QUETIAPINE_FUMARATE_LTC_TRX,
        qims_td_target_univ.QUETIAPINE_FUMARATE_ER_LTC_TRX,
        qims_td_target_univ.REXULTI_LTC_TRX,
        qims_td_target_univ.RISPERDAL_LTC_TRX,
        qims_td_target_univ.RISPERDAL_CONSTA_LTC_TRX,
        qims_td_target_univ.RISPERDAL_M_TAB_LTC_TRX,
        qims_td_target_univ.RISPERIDONE_LTC_TRX,
        qims_td_target_univ.RISPERIDONE_M_TAB_LTC_TRX,
        qims_td_target_univ.RISPERIDONE_ODT_LTC_TRX,
        qims_td_target_univ.SAPHRIS_LTC_TRX,
        qims_td_target_univ.SEROQUEL_LTC_TRX,
        qims_td_target_univ.SEROQUEL_XR_LTC_TRX,
        qims_td_target_univ.SYMBYAX_LTC_TRX,
        qims_td_target_univ.THIORIDAZINE_HCL_LTC_TRX,
        qims_td_target_univ.THIOTHIXENE_LTC_TRX,
        qims_td_target_univ.TRIFLUOPERAZINE_HCL_LTC_TRX,
        qims_td_target_univ.VERSACLOZ_LTC_TRX,
        qims_td_target_univ.VRAYLAR_LTC_TRX,
        qims_td_target_univ.ZIPRASIDONE_HCL_LTC_TRX,
        qims_td_target_univ.ZYPREXA_LTC_TRX,
        qims_td_target_univ.ZYPREXA_RELPREVV_LTC_TRX,
        qims_td_target_univ.ZYPREXA_ZYDIS_LTC_TRX,
        qims_td_target_univ.FACILITY_TYPE
 FROM sandbox.qims_td_target_univ
 ORDER BY qims_td_target_univ.PRESCRIBER_ID,
          qims_td_target_univ.ME_NBR,
          qims_td_target_univ.IMS_ID,
          qims_td_target_univ.NPI,
          qims_td_target_univ.PRIMARY_SPECIALTY,
          qims_td_target_univ.SECONDARY_SPECIALTY,
          qims_td_target_univ.PRIMARY_SPECIALTY_GROUP,
          qims_td_target_univ.SECONDARY_SPECIALTY_GROUP,
          qims_td_target_univ.GENDER_CD,
          qims_td_target_univ.FIRST_NAME,
          qims_td_target_univ.LAST_NAME,
          qims_td_target_univ.MID_NAME,
          qims_td_target_univ.ADDRESS_1,
          qims_td_target_univ.ADDRESS_2,
          qims_td_target_univ.CITY,
          qims_td_target_univ.STATE,
          qims_td_target_univ.ZIP,
          qims_td_target_univ.AMA_NO_CONTACT_INDICATOR,
          qims_td_target_univ.AMA_PDRP_IND,
          qims_td_target_univ.PROVIDER_TYP_DESC,
          qims_td_target_univ.TARGET_Y_N,
          qims_td_target_univ.ADOPTION_CATEGORY,
          qims_td_target_univ.CMHC_AFFILIATION_Y_N,
          qims_td_target_univ.INFLUENCER,
          qims_td_target_univ.INFLUENCER_MVT_DIS_LEADER,
          qims_td_target_univ.INFLUENCER_BHVR_HLTH_LEADER,
          qims_td_target_univ.PRIORITY_FLAG_Y_N,
          qims_td_target_univ.DIAGNOSED_TD_PAT_CNT,
          qims_td_target_univ.OVERALL_DIAGNOSED_TD_PAT_CNT,
          qims_td_target_univ.OVERALL_UNIQUE_DIAG_TD_PAT_CNT,
          qims_td_target_univ.PREDICTED_TD_PAT_CNT_HIGH,
          qims_td_target_univ.PREDICTED_TD_PAT_CNT_UNIQUE_HIGH,
          qims_td_target_univ.SUM_OF_SCORES_PREDICTED_PAT_CNT_HIGH,
          qims_td_target_univ.SUM_OF_SCORES_PREDICTED_PAT_CNT_UNIQUE_HIGH,
          qims_td_target_univ.TOTAL_OPPORTUNITY_HIGH,
          qims_td_target_univ.PREDICTED_TD_PAT_CNT_MEDIUM,
          qims_td_target_univ.PREDICTED_TD_PAT_CNT_UNIQUE_MEDIUM,
          qims_td_target_univ.SUM_OF_SCORES_PREDICTED_PAT_CNT_MEDIUM,
          qims_td_target_univ.SUM_OF_SCORES_PREDICTED_PAT_CNT_UNIQUE_MEDIUM,
          qims_td_target_univ.TOTAL_OPPORTUNITY_MEDIUM,
          qims_td_target_univ.TOTAL_OPPORTUNITY_DIAG_HIGH_MEDIUM,
          qims_td_target_univ.RANK,
          qims_td_target_univ.DECILE_PAT_CNT,
          qims_td_target_univ.DECILE_SUM_OF_SCORES,
          qims_td_target_univ.DECILE_SUM_OF_SCORES_UNIQUE,
          qims_td_target_univ.DECILE_OLD,
          qims_td_target_univ.APD_PAT_CNT,
          qims_td_target_univ.APD_PAT_CNT_TD_HIGH,
          qims_td_target_univ.APD_PAT_CNT_TD_MEDIUM,
          qims_td_target_univ.DIAGN_TD_MDD_BPD_SCZ_PAT_CNT,
          qims_td_target_univ.OVERALL_DIAG_TD_MDD_BPD_SCZ_PT,
          qims_td_target_univ.PREDICTED_TD_MDD_BPD_SCZ_PAT_CNT_HIGH,
          qims_td_target_univ.TOTAL_OPPORTUNITY_MDD_BPD_SCZ_HIGH,
          qims_td_target_univ.PREDICTED_TD_MDD_BPD_SCZ_PAT_CNT_MEDIUM,
          qims_td_target_univ.TOTAL_OPPORTUNITY_MDD_BPD_SCZ_MEDIUM,
          qims_td_target_univ.DIAGNOSED_TD_MDD_PAT_CNT,
          qims_td_target_univ.OVERALL_DIAGNOSED_TD_MDD_PAT,
          qims_td_target_univ.PREDICTED_TD_MDD_PAT_CNT_HIGH,
          qims_td_target_univ.TOTAL_OPPORTUNITY_MDD_HIGH,
          qims_td_target_univ.PREDICTED_TD_MDD_PAT_CNT_MEDIUM,
          qims_td_target_univ.TOTAL_OPPORTUNITY_MDD_MEDIUM,
          qims_td_target_univ.DIAGNOSED_TD_BPD_PAT_CNT,
          qims_td_target_univ.OVERALL_DIAGNOSED_TD_BPD_PAT_CNT,
          qims_td_target_univ.PREDICTED_TD_BPD_PAT_CNT_HIGH,
          qims_td_target_univ.TOTAL_OPPORTUNITY_BPD_HIGH,
          qims_td_target_univ.PREDICTED_TD_BPD_PAT_CNT_MEDIUM,
          qims_td_target_univ.TOTAL_OPPORTUNITY_BPD_MEDIUM,
          qims_td_target_univ.DIAGNOSED_TD_SCZ_PAT_CNT,
          qims_td_target_univ.OVERALL_DIAGNOSED_TD_SCZ_PAT_CNT,
          qims_td_target_univ.PREDICTED_TD_SCZ_PAT_CNT_HIGH,
          qims_td_target_univ.TOTAL_OPPORTUNITY_SCZ_HIGH,
          qims_td_target_univ.PREDICTED_TD_SCZ_PAT_CNT_MEDIUM,
          qims_td_target_univ.TOTAL_OPPORTUNITY_SCZ_MEDIUM,
          qims_td_target_univ.APD_CLM_CNT,
          qims_td_target_univ.APD_CLM_CNT_TD_HIGH,
          qims_td_target_univ.APD_CLM_CNT_TD_MEDIUM,
          qims_td_target_univ.DIAGNOSED_TD_CLM_CNT,
          qims_td_target_univ.METO_CLM_CNT,
          qims_td_target_univ.ARIPIPRAZOLE_CLM_CNT,
          qims_td_target_univ.ASENAPINE_CLM_CNT,
          qims_td_target_univ.BREXPIPRAZOLE_CLM_CNT,
          qims_td_target_univ.CARIPRAZINE_CLM_CNT,
          qims_td_target_univ.CHLORPROMAZINE_CLM_CNT,
          qims_td_target_univ.CLOZAPINE_CLM_CNT,
          qims_td_target_univ.DROPERIDOL_CLM_CNT,
          qims_td_target_univ.FLUPHENAZINE_CLM_CNT,
          qims_td_target_univ.HALOPERIDOL_CLM_CNT,
          qims_td_target_univ.ILOPERIDONE_CLM_CNT,
          qims_td_target_univ.LOXAPINE_CLM_CNT,
          qims_td_target_univ.LURASIDONE_CLM_CNT,
          qims_td_target_univ.MOLINDONE_CLM_CNT,
          qims_td_target_univ.OLANZAPINE_CLM_CNT,
          qims_td_target_univ.PALIPERIDONE_CLM_CNT,
          qims_td_target_univ.PERPHENAZINE_CLM_CNT,
          qims_td_target_univ.PIMAVANSERIN_CLM_CNT,
          qims_td_target_univ.PIMOZIDE_CLM_CNT,
          qims_td_target_univ.PROCHLORPERAZINE_CLM_CNT,
          qims_td_target_univ.QUETIAPINE_CLM_CNT,
          qims_td_target_univ.RISPERIDONE_CLM_CNT,
          qims_td_target_univ.THIORIDAZINE_CLM_CNT,
          qims_td_target_univ.THIOTHIXENE_CLM_CNT,
          qims_td_target_univ.TRIFLUOPERAZINE_CLM_CNT,
          qims_td_target_univ.ZIPRASIDONE_CLM_CNT,
          qims_td_target_univ.ABILIFY_LTC_TRX,
          qims_td_target_univ.ABILIFY_DISCMELT_LTC_TRX,
          qims_td_target_univ.ABILIFY_MAINTENA_LTC_TRX,
          qims_td_target_univ.ARIPIPRAZOLE_LTC_TRX,
          qims_td_target_univ.ARIPIPRAZOLE_ODT_LTC_TRX,
          qims_td_target_univ.ARISTADA_LTC_TRX,
          qims_td_target_univ.CHLORPROMAZINE_HCL_LTC_TRX,
          qims_td_target_univ.CLOZAPINE_LTC_TRX,
          qims_td_target_univ.CLOZAPINE_ODT_LTC_TRX,
          qims_td_target_univ.CLOZARIL_LTC_TRX,
          qims_td_target_univ.COMPRO_LTC_TRX,
          qims_td_target_univ.FANAPT_LTC_TRX,
          qims_td_target_univ.FANAPT_TITRATION_PACK_LTC_TRX,
          qims_td_target_univ.FAZACLO_LTC_TRX,
          qims_td_target_univ.FLUPHENAZINE_DECANOATE_LTC_TRX,
          qims_td_target_univ.FLUPHENAZINE_HCL_LTC_TRX,
          qims_td_target_univ.GEODON_LTC_TRX,
          qims_td_target_univ.HALDOL_LTC_TRX,
          qims_td_target_univ.HALDOL_DECANOATE_100_LTC_TRX,
          qims_td_target_univ.HALDOL_DECANOATE_50_LTC_TRX,
          qims_td_target_univ.HALOPERIDOL_LTC_TRX,
          qims_td_target_univ.HALOPERIDOL_DECANOATE_LTC_TRX,
          qims_td_target_univ.HALOPERIDOL_LACTATE_LTC_TRX,
          qims_td_target_univ.INVEGA_LTC_TRX,
          qims_td_target_univ.INVEGA_SUSTENNA_LTC_TRX,
          qims_td_target_univ.INVEGA_TRINZA_LTC_TRX,
          qims_td_target_univ.LATUDA_LTC_TRX,
          qims_td_target_univ.LOXAPINE_LTC_TRX,
          qims_td_target_univ.LOXAPINE_SUCCINATE_LTC_TRX,
          qims_td_target_univ.MOLINDONE_HYDROCHLOR_LTC_TRX,
          qims_td_target_univ.NUPLAZID_LTC_TRX,
          qims_td_target_univ.OLANZAPINE_LTC_TRX,
          qims_td_target_univ.OLANZAPINE_ODT_LTC_TRX,
          qims_td_target_univ.OLANZAPINE_FLUOXETINE_LTC_TRX,
          qims_td_target_univ.ORAP_LTC_TRX,
          qims_td_target_univ.PALIPERIDONE_ER_LTC_TRX,
          qims_td_target_univ.PERPHENAZINE_LTC_TRX,
          qims_td_target_univ.PERPHENAZINE_AMITRIPTY_LTC_TRX,
          qims_td_target_univ.PIMOZIDE_LTC_TRX,
          qims_td_target_univ.PROCHLORPERAZINE_LTC_TRX,
          qims_td_target_univ.PROCHLORPERAZINE_EDISY_LTC_TRX,
          qims_td_target_univ.PROCHLORPERAZINE_MALEA_LTC_TRX,
          qims_td_target_univ.QUETIAPINE_FUMARATE_LTC_TRX,
          qims_td_target_univ.QUETIAPINE_FUMARATE_ER_LTC_TRX,
          qims_td_target_univ.REXULTI_LTC_TRX,
          qims_td_target_univ.RISPERDAL_LTC_TRX,
          qims_td_target_univ.RISPERDAL_CONSTA_LTC_TRX,
          qims_td_target_univ.RISPERDAL_M_TAB_LTC_TRX,
          qims_td_target_univ.RISPERIDONE_LTC_TRX,
          qims_td_target_univ.RISPERIDONE_M_TAB_LTC_TRX,
          qims_td_target_univ.RISPERIDONE_ODT_LTC_TRX,
          qims_td_target_univ.SAPHRIS_LTC_TRX,
          qims_td_target_univ.SEROQUEL_LTC_TRX,
          qims_td_target_univ.SEROQUEL_XR_LTC_TRX,
          qims_td_target_univ.SYMBYAX_LTC_TRX,
          qims_td_target_univ.THIORIDAZINE_HCL_LTC_TRX,
          qims_td_target_univ.THIOTHIXENE_LTC_TRX,
          qims_td_target_univ.TRIFLUOPERAZINE_HCL_LTC_TRX,
          qims_td_target_univ.VERSACLOZ_LTC_TRX,
          qims_td_target_univ.VRAYLAR_LTC_TRX,
          qims_td_target_univ.ZIPRASIDONE_HCL_LTC_TRX,
          qims_td_target_univ.ZYPREXA_LTC_TRX,
          qims_td_target_univ.ZYPREXA_RELPREVV_LTC_TRX,
          qims_td_target_univ.ZYPREXA_ZYDIS_LTC_TRX,
          qims_td_target_univ.FACILITY_TYPE
SEGMENTED BY hash(qims_td_target_univ.IMS_ID, qims_td_target_univ.ZIP, qims_td_target_univ.AMA_NO_CONTACT_INDICATOR, qims_td_target_univ.DIAGNOSED_TD_PAT_CNT, qims_td_target_univ.OVERALL_DIAGNOSED_TD_PAT_CNT, qims_td_target_univ.OVERALL_UNIQUE_DIAG_TD_PAT_CNT, qims_td_target_univ.PREDICTED_TD_PAT_CNT_HIGH, qims_td_target_univ.PREDICTED_TD_PAT_CNT_UNIQUE_HIGH, qims_td_target_univ.SUM_OF_SCORES_PREDICTED_PAT_CNT_HIGH, qims_td_target_univ.SUM_OF_SCORES_PREDICTED_PAT_CNT_UNIQUE_HIGH, qims_td_target_univ.TOTAL_OPPORTUNITY_HIGH, qims_td_target_univ.PREDICTED_TD_PAT_CNT_MEDIUM, qims_td_target_univ.PREDICTED_TD_PAT_CNT_UNIQUE_MEDIUM, qims_td_target_univ.SUM_OF_SCORES_PREDICTED_PAT_CNT_MEDIUM, qims_td_target_univ.SUM_OF_SCORES_PREDICTED_PAT_CNT_UNIQUE_MEDIUM, qims_td_target_univ.TOTAL_OPPORTUNITY_MEDIUM, qims_td_target_univ.TOTAL_OPPORTUNITY_DIAG_HIGH_MEDIUM, qims_td_target_univ.RANK, qims_td_target_univ.DECILE_PAT_CNT, qims_td_target_univ.DECILE_SUM_OF_SCORES, qims_td_target_univ.DECILE_SUM_OF_SCORES_UNIQUE, qims_td_target_univ.DECILE_OLD, qims_td_target_univ.APD_PAT_CNT, qims_td_target_univ.APD_PAT_CNT_TD_HIGH, qims_td_target_univ.APD_PAT_CNT_TD_MEDIUM, qims_td_target_univ.DIAGN_TD_MDD_BPD_SCZ_PAT_CNT, qims_td_target_univ.OVERALL_DIAG_TD_MDD_BPD_SCZ_PT, qims_td_target_univ.PREDICTED_TD_MDD_BPD_SCZ_PAT_CNT_HIGH, qims_td_target_univ.TOTAL_OPPORTUNITY_MDD_BPD_SCZ_HIGH, qims_td_target_univ.PREDICTED_TD_MDD_BPD_SCZ_PAT_CNT_MEDIUM, qims_td_target_univ.TOTAL_OPPORTUNITY_MDD_BPD_SCZ_MEDIUM, qims_td_target_univ.DIAGNOSED_TD_MDD_PAT_CNT) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_factor_b0 /*+basename(ic_rx_factor),createtype(L)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 rollup_month,
 multiplier,
 approved_trx_count,
 total_trx_count
)
AS
 SELECT ic_rx_factor.ic_data_month,
        ic_rx_factor.basket_name,
        ic_rx_factor.sales_force_id,
        ic_rx_factor.rollup_month,
        ic_rx_factor.multiplier,
        ic_rx_factor.approved_trx_count,
        ic_rx_factor.total_trx_count
 FROM sandbox.ic_rx_factor
 ORDER BY ic_rx_factor.ic_data_month,
          ic_rx_factor.basket_name,
          ic_rx_factor.rollup_month
SEGMENTED BY hash(ic_rx_factor.ic_data_month, ic_rx_factor.basket_name, ic_rx_factor.rollup_month) ALL NODES;

CREATE PROJECTION sandbox.onc_sales_adjustment_load_b0 /*+basename(onc_sales_adjustment_load),createtype(L)*/ 
(
 adj_code,
 adj_time_period,
 tvcmid,
 basket_id,
 adj_factor
)
AS
 SELECT onc_sales_adjustment_load.adj_code,
        onc_sales_adjustment_load.adj_time_period,
        onc_sales_adjustment_load.tvcmid,
        onc_sales_adjustment_load.basket_id,
        onc_sales_adjustment_load.adj_factor
 FROM sandbox.onc_sales_adjustment_load
 ORDER BY onc_sales_adjustment_load.adj_code,
          onc_sales_adjustment_load.adj_time_period,
          onc_sales_adjustment_load.tvcmid,
          onc_sales_adjustment_load.basket_id,
          onc_sales_adjustment_load.adj_factor
SEGMENTED BY hash(onc_sales_adjustment_load.tvcmid, onc_sales_adjustment_load.basket_id, onc_sales_adjustment_load.adj_factor, onc_sales_adjustment_load.adj_code, onc_sales_adjustment_load.adj_time_period) ALL NODES;

CREATE PROJECTION sandbox.ic_ms_market_decile_201801_b0 /*+basename(ic_ms_market_decile_201801),createtype(A)*/ 
(
 ims_id,
 tvcmid,
 category,
 decile_name,
 trx_cnt_01_06,
 trx_cnt_01_12
)
AS
 SELECT ic_ms_market_decile_201801.ims_id,
        ic_ms_market_decile_201801.tvcmid,
        ic_ms_market_decile_201801.category,
        ic_ms_market_decile_201801.decile_name,
        ic_ms_market_decile_201801.trx_cnt_01_06,
        ic_ms_market_decile_201801.trx_cnt_01_12
 FROM sandbox.ic_ms_market_decile_201801
 ORDER BY ic_ms_market_decile_201801.ims_id
SEGMENTED BY hash(ic_ms_market_decile_201801.ims_id) ALL NODES;

CREATE PROJECTION sandbox.call_plan_decile_nr_b0 /*+basename(call_plan_decile_nr),createtype(L)*/ 
(
 hcp_id,
 market,
 decile_value,
 veeva_id
)
AS
 SELECT call_plan_decile_nr.hcp_id,
        call_plan_decile_nr.market,
        call_plan_decile_nr.decile_value,
        call_plan_decile_nr.veeva_id
 FROM sandbox.call_plan_decile_nr
 ORDER BY call_plan_decile_nr.hcp_id,
          call_plan_decile_nr.market,
          call_plan_decile_nr.decile_value
SEGMENTED BY hash(call_plan_decile_nr.hcp_id, call_plan_decile_nr.market, call_plan_decile_nr.decile_value) ALL NODES;

CREATE PROJECTION sandbox.a_mktdef_b0 /*+basename(a_mktdef),createtype(L)*/ 
(
 market_name,
 market_id,
 brand_form_strength,
 bfs_id,
 brand,
 teva_prod,
 prod_group,
 F8
)
AS
 SELECT a_mktdef.market_name,
        a_mktdef.market_id,
        a_mktdef.brand_form_strength,
        a_mktdef.bfs_id,
        a_mktdef.brand,
        a_mktdef.teva_prod,
        a_mktdef.prod_group,
        a_mktdef.F8
 FROM sandbox.a_mktdef
 ORDER BY a_mktdef.market_name,
          a_mktdef.market_id,
          a_mktdef.brand_form_strength,
          a_mktdef.bfs_id,
          a_mktdef.brand,
          a_mktdef.teva_prod,
          a_mktdef.prod_group,
          a_mktdef.F8
SEGMENTED BY hash(a_mktdef.market_id, a_mktdef.bfs_id, a_mktdef.brand, a_mktdef.teva_prod, a_mktdef.F8, a_mktdef.prod_group, a_mktdef.market_name, a_mktdef.brand_form_strength) ALL NODES;

CREATE PROJECTION sandbox.tjr_model_mop_xref_b0 /*+basename(tjr_model_mop_xref),createtype(L)*/ 
(
 model,
 model_name,
 industry_mop,
 iqvia_mop,
 current_teva_mop,
 proposed_teva_mop
)
AS
 SELECT tjr_model_mop_xref.model,
        tjr_model_mop_xref.model_name,
        tjr_model_mop_xref.industry_mop,
        tjr_model_mop_xref.iqvia_mop,
        tjr_model_mop_xref.current_teva_mop,
        tjr_model_mop_xref.proposed_teva_mop
 FROM sandbox.tjr_model_mop_xref
 ORDER BY tjr_model_mop_xref.model,
          tjr_model_mop_xref.model_name,
          tjr_model_mop_xref.industry_mop,
          tjr_model_mop_xref.iqvia_mop,
          tjr_model_mop_xref.current_teva_mop,
          tjr_model_mop_xref.proposed_teva_mop
SEGMENTED BY hash(tjr_model_mop_xref.model, tjr_model_mop_xref.model_name, tjr_model_mop_xref.industry_mop, tjr_model_mop_xref.iqvia_mop, tjr_model_mop_xref.current_teva_mop, tjr_model_mop_xref.proposed_teva_mop) ALL NODES;

CREATE PROJECTION sandbox.QVAR_HCPs_09272019_b0 /*+basename(QVAR_HCPs_09272019),createtype(L)*/ 
(
 IMSID,
 NPI
)
AS
 SELECT QVAR_HCPs_09272019.IMSID,
        QVAR_HCPs_09272019.NPI
 FROM sandbox.QVAR_HCPs_09272019
 ORDER BY QVAR_HCPs_09272019.IMSID,
          QVAR_HCPs_09272019.NPI
SEGMENTED BY hash(QVAR_HCPs_09272019.IMSID, QVAR_HCPs_09272019.NPI) ALL NODES;

CREATE PROJECTION sandbox.tables_to_keep_b0 /*+basename(tables_to_keep),createtype(L)*/ 
(
 table_name
)
AS
 SELECT tables_to_keep.table_name
 FROM sandbox.tables_to_keep
 ORDER BY tables_to_keep.table_name
SEGMENTED BY hash(tables_to_keep.table_name) ALL NODES;

CREATE PROJECTION sandbox.M_D_PRODUCTS_b0 /*+basename(M_D_PRODUCTS),createtype(L)*/ 
(
 MOVEMENT_DISORDER_PRODUCTS
)
AS
 SELECT M_D_PRODUCTS.MOVEMENT_DISORDER_PRODUCTS
 FROM sandbox.M_D_PRODUCTS
 ORDER BY M_D_PRODUCTS.MOVEMENT_DISORDER_PRODUCTS
SEGMENTED BY hash(M_D_PRODUCTS.MOVEMENT_DISORDER_PRODUCTS) ALL NODES;

CREATE PROJECTION sandbox.ONC_Basket_IDs_for_QA_b0 /*+basename(ONC_Basket_IDs_for_QA),createtype(L)*/ 
(
 BRAND,
 basket_id
)
AS
 SELECT ONC_Basket_IDs_for_QA.BRAND,
        ONC_Basket_IDs_for_QA.basket_id
 FROM sandbox.ONC_Basket_IDs_for_QA
 ORDER BY ONC_Basket_IDs_for_QA.BRAND,
          ONC_Basket_IDs_for_QA.basket_id
SEGMENTED BY hash(ONC_Basket_IDs_for_QA.basket_id, ONC_Basket_IDs_for_QA.BRAND) ALL NODES;

CREATE PROJECTION sandbox.customer_mb_b0 /*+basename(customer_mb),createtype(A)*/ 
(
 customer_id,
 tvcmid,
 ims_id,
 ims_outlet_code,
 ims_facility_number,
 federation_id,
 customer_type,
 prescriber_type,
 network_name,
 account_name,
 physician_first_name,
 physician_last_name,
 credential,
 subcat_group,
 subcat_code,
 pdrp_flag,
 pri_specialty_code,
 pri_specialty_desc,
 sec_specialty_code,
 sec_specialty_desc,
 cm_status_flag,
 gpo,
 dnp_flag,
 product_1_dnc_flag,
 product_2_dnc_flag,
 a_specialty_group,
 b_specialty_group,
 c_specialty_group,
 formulary_control
)
AS
 SELECT customer_mb.customer_id,
        customer_mb.tvcmid,
        customer_mb.ims_id,
        customer_mb.ims_outlet_code,
        customer_mb.ims_facility_number,
        customer_mb.federation_id,
        customer_mb.customer_type,
        customer_mb.prescriber_type,
        customer_mb.network_name,
        customer_mb.account_name,
        customer_mb.physician_first_name,
        customer_mb.physician_last_name,
        customer_mb.credential,
        customer_mb.subcat_group,
        customer_mb.subcat_code,
        customer_mb.pdrp_flag,
        customer_mb.pri_specialty_code,
        customer_mb.pri_specialty_desc,
        customer_mb.sec_specialty_code,
        customer_mb.sec_specialty_desc,
        customer_mb.cm_status_flag,
        customer_mb.gpo,
        customer_mb.dnp_flag,
        customer_mb.product_1_dnc_flag,
        customer_mb.product_2_dnc_flag,
        customer_mb.a_specialty_group,
        customer_mb.b_specialty_group,
        customer_mb.c_specialty_group,
        customer_mb.formulary_control
 FROM sandbox.customer_mb
 ORDER BY customer_mb.customer_id,
          customer_mb.tvcmid,
          customer_mb.ims_id,
          customer_mb.ims_outlet_code,
          customer_mb.ims_facility_number,
          customer_mb.federation_id,
          customer_mb.customer_type,
          customer_mb.prescriber_type
SEGMENTED BY hash(customer_mb.tvcmid, customer_mb.subcat_code, customer_mb.pdrp_flag, customer_mb.dnp_flag, customer_mb.product_1_dnc_flag, customer_mb.product_2_dnc_flag, customer_mb.ims_id, customer_mb.ims_outlet_code) ALL NODES;

CREATE PROJECTION sandbox.mb_ic_demo_tp_b0 /*+basename(mb_ic_demo_tp),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT mb_ic_demo_tp.ic_data_month,
        mb_ic_demo_tp.sales_force_id,
        mb_ic_demo_tp.area_number,
        mb_ic_demo_tp.region_number,
        mb_ic_demo_tp.territory_number,
        mb_ic_demo_tp.ims_id,
        mb_ic_demo_tp.tvcmid,
        mb_ic_demo_tp.outlet_code,
        mb_ic_demo_tp.va_station_number,
        mb_ic_demo_tp.specialty,
        mb_ic_demo_tp.last_name,
        mb_ic_demo_tp.first_name,
        mb_ic_demo_tp.mid_name,
        mb_ic_demo_tp.address_1,
        mb_ic_demo_tp.address_2,
        mb_ic_demo_tp.address_3,
        mb_ic_demo_tp.city,
        mb_ic_demo_tp.state,
        mb_ic_demo_tp.zip,
        mb_ic_demo_tp.address_source,
        mb_ic_demo_tp.pdrp_flag,
        mb_ic_demo_tp.pdrp_date,
        mb_ic_demo_tp.np_pa_flag,
        mb_ic_demo_tp.no_spend,
        mb_ic_demo_tp.ama_no_contact_flag,
        mb_ic_demo_tp.join_key,
        mb_ic_demo_tp.row_source,
        mb_ic_demo_tp.row_create_date,
        mb_ic_demo_tp.outlet_dea,
        mb_ic_demo_tp.secondary_specialty
 FROM sandbox.mb_ic_demo_tp
 ORDER BY mb_ic_demo_tp.ic_data_month,
          mb_ic_demo_tp.sales_force_id,
          mb_ic_demo_tp.area_number,
          mb_ic_demo_tp.region_number,
          mb_ic_demo_tp.territory_number,
          mb_ic_demo_tp.ims_id,
          mb_ic_demo_tp.tvcmid,
          mb_ic_demo_tp.outlet_code
SEGMENTED BY hash(mb_ic_demo_tp.ic_data_month, mb_ic_demo_tp.tvcmid, mb_ic_demo_tp.outlet_code, mb_ic_demo_tp.mid_name, mb_ic_demo_tp.state, mb_ic_demo_tp.zip, mb_ic_demo_tp.pdrp_flag, mb_ic_demo_tp.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.concur_hcp_prev_b0 /*+basename(concur_hcp_prev),createtype(A)*/ 
(
 cust_id,
 organization_name,
 contact_type,
 first_name,
 middle_name,
 last_name,
 suffix,
 npi,
 address_line_1,
 address_line_2,
 city,
 state,
 zipcode,
 sln,
 sln_state,
 dea,
 affiliation,
 credential,
 healthcare_professional_status_code
)
AS
 SELECT concur_hcp_prev.cust_id,
        concur_hcp_prev.organization_name,
        concur_hcp_prev.contact_type,
        concur_hcp_prev.first_name,
        concur_hcp_prev.middle_name,
        concur_hcp_prev.last_name,
        concur_hcp_prev.suffix,
        concur_hcp_prev.npi,
        concur_hcp_prev.address_line_1,
        concur_hcp_prev.address_line_2,
        concur_hcp_prev.city,
        concur_hcp_prev.state,
        concur_hcp_prev.zipcode,
        concur_hcp_prev.sln,
        concur_hcp_prev.sln_state,
        concur_hcp_prev.dea,
        concur_hcp_prev.affiliation,
        concur_hcp_prev.credential,
        concur_hcp_prev.healthcare_professional_status_code
 FROM sandbox.concur_hcp_prev
 ORDER BY concur_hcp_prev.cust_id,
          concur_hcp_prev.first_name,
          concur_hcp_prev.middle_name,
          concur_hcp_prev.last_name,
          concur_hcp_prev.suffix,
          concur_hcp_prev.npi,
          concur_hcp_prev.address_line_1,
          concur_hcp_prev.address_line_2,
          concur_hcp_prev.city,
          concur_hcp_prev.state,
          concur_hcp_prev.zipcode,
          concur_hcp_prev.sln,
          concur_hcp_prev.sln_state,
          concur_hcp_prev.dea,
          concur_hcp_prev.credential,
          concur_hcp_prev.healthcare_professional_status_code
SEGMENTED BY hash(concur_hcp_prev.cust_id, concur_hcp_prev.first_name, concur_hcp_prev.middle_name, concur_hcp_prev.last_name, concur_hcp_prev.suffix, concur_hcp_prev.npi, concur_hcp_prev.address_line_1, concur_hcp_prev.address_line_2, concur_hcp_prev.city, concur_hcp_prev.state, concur_hcp_prev.zipcode, concur_hcp_prev.sln, concur_hcp_prev.sln_state, concur_hcp_prev.dea, concur_hcp_prev.credential, concur_hcp_prev.healthcare_professional_status_code) ALL NODES;

CREATE PROJECTION sandbox.idl_best_address_2_b0 /*+basename(idl_best_address_2),createtype(A)*/ 
(
 cust_id,
 organization_name,
 contact_type,
 first_name,
 middle_name,
 last_name,
 suffix,
 npi,
 address_line_1,
 address_line_2,
 city,
 state,
 zipcode,
 sln,
 sln_state,
 dea,
 affiliation,
 credential,
 healthcare_professional_status_code,
 create_date
)
AS
 SELECT idl_best_address_2.cust_id,
        idl_best_address_2.organization_name,
        idl_best_address_2.contact_type,
        idl_best_address_2.first_name,
        idl_best_address_2.middle_name,
        idl_best_address_2.last_name,
        idl_best_address_2.suffix,
        idl_best_address_2.npi,
        idl_best_address_2.address_line_1,
        idl_best_address_2.address_line_2,
        idl_best_address_2.city,
        idl_best_address_2.state,
        idl_best_address_2.zipcode,
        idl_best_address_2.sln,
        idl_best_address_2.sln_state,
        idl_best_address_2.dea,
        idl_best_address_2.affiliation,
        idl_best_address_2.credential,
        idl_best_address_2.healthcare_professional_status_code,
        idl_best_address_2.create_date
 FROM sandbox.idl_best_address_2
 ORDER BY idl_best_address_2.cust_id,
          idl_best_address_2.first_name,
          idl_best_address_2.middle_name,
          idl_best_address_2.last_name,
          idl_best_address_2.suffix,
          idl_best_address_2.npi,
          idl_best_address_2.address_line_1,
          idl_best_address_2.address_line_2,
          idl_best_address_2.city,
          idl_best_address_2.state,
          idl_best_address_2.zipcode,
          idl_best_address_2.sln,
          idl_best_address_2.sln_state,
          idl_best_address_2.dea,
          idl_best_address_2.credential,
          idl_best_address_2.healthcare_professional_status_code
SEGMENTED BY hash(idl_best_address_2.cust_id, idl_best_address_2.first_name, idl_best_address_2.middle_name, idl_best_address_2.last_name, idl_best_address_2.suffix, idl_best_address_2.npi, idl_best_address_2.address_line_1, idl_best_address_2.address_line_2, idl_best_address_2.city, idl_best_address_2.state, idl_best_address_2.zipcode, idl_best_address_2.sln, idl_best_address_2.sln_state, idl_best_address_2.dea, idl_best_address_2.credential, idl_best_address_2.healthcare_professional_status_code) ALL NODES;

CREATE PROJECTION sandbox.idl_best_address_non2_b0 /*+basename(idl_best_address_non2),createtype(A)*/ 
(
 cust_id,
 organization_name,
 contact_type,
 first_name,
 middle_name,
 last_name,
 suffix,
 npi,
 address_line_1,
 address_line_2,
 city,
 state,
 zipcode,
 sln,
 sln_state,
 dea,
 affiliation,
 credential,
 healthcare_professional_status_code,
 create_date
)
AS
 SELECT idl_best_address_non2.cust_id,
        idl_best_address_non2.organization_name,
        idl_best_address_non2.contact_type,
        idl_best_address_non2.first_name,
        idl_best_address_non2.middle_name,
        idl_best_address_non2.last_name,
        idl_best_address_non2.suffix,
        idl_best_address_non2.npi,
        idl_best_address_non2.address_line_1,
        idl_best_address_non2.address_line_2,
        idl_best_address_non2.city,
        idl_best_address_non2.state,
        idl_best_address_non2.zipcode,
        idl_best_address_non2.sln,
        idl_best_address_non2.sln_state,
        idl_best_address_non2.dea,
        idl_best_address_non2.affiliation,
        idl_best_address_non2.credential,
        idl_best_address_non2.healthcare_professional_status_code,
        idl_best_address_non2.create_date
 FROM sandbox.idl_best_address_non2
 ORDER BY idl_best_address_non2.cust_id,
          idl_best_address_non2.first_name,
          idl_best_address_non2.middle_name,
          idl_best_address_non2.last_name,
          idl_best_address_non2.suffix,
          idl_best_address_non2.npi,
          idl_best_address_non2.address_line_1,
          idl_best_address_non2.address_line_2,
          idl_best_address_non2.city,
          idl_best_address_non2.state,
          idl_best_address_non2.zipcode,
          idl_best_address_non2.sln,
          idl_best_address_non2.sln_state,
          idl_best_address_non2.dea,
          idl_best_address_non2.credential,
          idl_best_address_non2.healthcare_professional_status_code
SEGMENTED BY hash(idl_best_address_non2.cust_id, idl_best_address_non2.first_name, idl_best_address_non2.middle_name, idl_best_address_non2.last_name, idl_best_address_non2.suffix, idl_best_address_non2.npi, idl_best_address_non2.address_line_1, idl_best_address_non2.address_line_2, idl_best_address_non2.city, idl_best_address_non2.state, idl_best_address_non2.zipcode, idl_best_address_non2.sln, idl_best_address_non2.sln_state, idl_best_address_non2.dea, idl_best_address_non2.credential, idl_best_address_non2.healthcare_professional_status_code) ALL NODES;

CREATE PROJECTION sandbox.prescriber_rx_adhoc_09252020_b0 /*+basename(prescriber_rx_adhoc_09252020),createtype(A)*/ 
(
 ims_id,
 payer_plan_number,
 ims_client_number,
 report_frequency,
 ims_product_group,
 basket_id,
 data_date,
 date,
 sales_category,
 tvcmid,
 prescriber_first_name,
 prescriber_last_name,
 basket_name,
 basket_type,
 rollup_week,
 rollup_month,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 unnormalized_nrx_count,
 unnormalized_trx_count,
 market_name,
 payer_name,
 plan_name,
 pbm_name,
 model,
 payment_method,
 ims_specialty,
 ims_rx_type,
 ims_supplemental_data,
 ims_zip_other,
 ims_report_number_cnt,
 cnt_file_id,
 cnt_record_id,
 ims_report_number_qty,
 qty_file_id,
 qty_record_id,
 rollup_flag,
 indication
)
AS
 SELECT prescriber_rx_adhoc_06282021.ims_id,
        prescriber_rx_adhoc_06282021.payer_plan_number,
        prescriber_rx_adhoc_06282021.ims_client_number,
        prescriber_rx_adhoc_06282021.report_frequency,
        prescriber_rx_adhoc_06282021.ims_product_group,
        prescriber_rx_adhoc_06282021.basket_id,
        prescriber_rx_adhoc_06282021.data_date,
        prescriber_rx_adhoc_06282021.date,
        prescriber_rx_adhoc_06282021.sales_category,
        prescriber_rx_adhoc_06282021.tvcmid,
        prescriber_rx_adhoc_06282021.prescriber_first_name,
        prescriber_rx_adhoc_06282021.prescriber_last_name,
        prescriber_rx_adhoc_06282021.basket_name,
        prescriber_rx_adhoc_06282021.basket_type,
        prescriber_rx_adhoc_06282021.rollup_week,
        prescriber_rx_adhoc_06282021.rollup_month,
        prescriber_rx_adhoc_06282021.nrx_count,
        prescriber_rx_adhoc_06282021.trx_count,
        prescriber_rx_adhoc_06282021.nrx_quantity,
        prescriber_rx_adhoc_06282021.trx_quantity,
        prescriber_rx_adhoc_06282021.unnormalized_nrx_count,
        prescriber_rx_adhoc_06282021.unnormalized_trx_count,
        prescriber_rx_adhoc_06282021.market_name,
        prescriber_rx_adhoc_06282021.payer_name,
        prescriber_rx_adhoc_06282021.plan_name,
        prescriber_rx_adhoc_06282021.pbm_name,
        prescriber_rx_adhoc_06282021.model,
        prescriber_rx_adhoc_06282021.payment_method,
        prescriber_rx_adhoc_06282021.ims_specialty,
        prescriber_rx_adhoc_06282021.ims_rx_type,
        prescriber_rx_adhoc_06282021.ims_supplemental_data,
        prescriber_rx_adhoc_06282021.ims_zip_other,
        prescriber_rx_adhoc_06282021.ims_report_number_cnt,
        prescriber_rx_adhoc_06282021.cnt_file_id,
        prescriber_rx_adhoc_06282021.cnt_record_id,
        prescriber_rx_adhoc_06282021.ims_report_number_qty,
        prescriber_rx_adhoc_06282021.qty_file_id,
        prescriber_rx_adhoc_06282021.qty_record_id,
        prescriber_rx_adhoc_06282021.rollup_flag,
        prescriber_rx_adhoc_06282021.indication
 FROM sandbox.prescriber_rx_adhoc_06282021
 ORDER BY prescriber_rx_adhoc_06282021.ims_id,
          prescriber_rx_adhoc_06282021.payer_plan_number,
          prescriber_rx_adhoc_06282021.ims_client_number,
          prescriber_rx_adhoc_06282021.report_frequency,
          prescriber_rx_adhoc_06282021.ims_product_group,
          prescriber_rx_adhoc_06282021.basket_id,
          prescriber_rx_adhoc_06282021.data_date,
          prescriber_rx_adhoc_06282021.date,
          prescriber_rx_adhoc_06282021.sales_category,
          prescriber_rx_adhoc_06282021.tvcmid,
          prescriber_rx_adhoc_06282021.prescriber_first_name,
          prescriber_rx_adhoc_06282021.prescriber_last_name,
          prescriber_rx_adhoc_06282021.basket_name,
          prescriber_rx_adhoc_06282021.basket_type,
          prescriber_rx_adhoc_06282021.rollup_week,
          prescriber_rx_adhoc_06282021.rollup_month,
          prescriber_rx_adhoc_06282021.nrx_count,
          prescriber_rx_adhoc_06282021.trx_count,
          prescriber_rx_adhoc_06282021.nrx_quantity,
          prescriber_rx_adhoc_06282021.trx_quantity,
          prescriber_rx_adhoc_06282021.unnormalized_nrx_count,
          prescriber_rx_adhoc_06282021.unnormalized_trx_count,
          prescriber_rx_adhoc_06282021.market_name,
          prescriber_rx_adhoc_06282021.payer_name,
          prescriber_rx_adhoc_06282021.plan_name,
          prescriber_rx_adhoc_06282021.pbm_name,
          prescriber_rx_adhoc_06282021.model,
          prescriber_rx_adhoc_06282021.payment_method,
          prescriber_rx_adhoc_06282021.ims_specialty,
          prescriber_rx_adhoc_06282021.ims_rx_type,
          prescriber_rx_adhoc_06282021.ims_supplemental_data,
          prescriber_rx_adhoc_06282021.ims_zip_other,
          prescriber_rx_adhoc_06282021.ims_report_number_cnt,
          prescriber_rx_adhoc_06282021.cnt_file_id,
          prescriber_rx_adhoc_06282021.cnt_record_id,
          prescriber_rx_adhoc_06282021.ims_report_number_qty,
          prescriber_rx_adhoc_06282021.qty_file_id,
          prescriber_rx_adhoc_06282021.qty_record_id,
          prescriber_rx_adhoc_06282021.rollup_flag,
          prescriber_rx_adhoc_06282021.indication
SEGMENTED BY hash(prescriber_rx_adhoc_06282021.ims_client_number, prescriber_rx_adhoc_06282021.basket_id, prescriber_rx_adhoc_06282021.data_date, prescriber_rx_adhoc_06282021.date, prescriber_rx_adhoc_06282021.sales_category, prescriber_rx_adhoc_06282021.tvcmid, prescriber_rx_adhoc_06282021.rollup_week, prescriber_rx_adhoc_06282021.rollup_month, prescriber_rx_adhoc_06282021.nrx_count, prescriber_rx_adhoc_06282021.trx_count, prescriber_rx_adhoc_06282021.nrx_quantity, prescriber_rx_adhoc_06282021.trx_quantity, prescriber_rx_adhoc_06282021.unnormalized_nrx_count, prescriber_rx_adhoc_06282021.unnormalized_trx_count, prescriber_rx_adhoc_06282021.ims_rx_type, prescriber_rx_adhoc_06282021.ims_report_number_cnt, prescriber_rx_adhoc_06282021.cnt_file_id, prescriber_rx_adhoc_06282021.cnt_record_id, prescriber_rx_adhoc_06282021.ims_report_number_qty, prescriber_rx_adhoc_06282021.qty_file_id, prescriber_rx_adhoc_06282021.qty_record_id, prescriber_rx_adhoc_06282021.rollup_flag, prescriber_rx_adhoc_06282021.ims_id, prescriber_rx_adhoc_06282021.payer_plan_number, prescriber_rx_adhoc_06282021.ims_product_group, prescriber_rx_adhoc_06282021.ims_specialty, prescriber_rx_adhoc_06282021.ims_zip_other, prescriber_rx_adhoc_06282021.report_frequency, prescriber_rx_adhoc_06282021.ims_supplemental_data, prescriber_rx_adhoc_06282021.indication, prescriber_rx_adhoc_06282021.prescriber_first_name, prescriber_rx_adhoc_06282021.prescriber_last_name) ALL NODES;

CREATE PROJECTION sandbox."IQVIA OPTUM OUTLETS11032020_b0" /*+basename(IQVIA OPTUM OUTLETS11032020),createtype(L)*/ 
(
 "Outlet #",
 Active,
 PRE,
 Name,
 "10/2/2020 12:00:00 AM"
)
AS
 SELECT "IQVIA OPTUM OUTLETS11032020"."Outlet #",
        "IQVIA OPTUM OUTLETS11032020".Active,
        "IQVIA OPTUM OUTLETS11032020".PRE,
        "IQVIA OPTUM OUTLETS11032020".Name,
        "IQVIA OPTUM OUTLETS11032020"."10/2/2020 12:00:00 AM"
 FROM sandbox."IQVIA OPTUM OUTLETS11032020"
 ORDER BY "IQVIA OPTUM OUTLETS11032020"."Outlet #",
          "IQVIA OPTUM OUTLETS11032020".Active,
          "IQVIA OPTUM OUTLETS11032020".PRE,
          "IQVIA OPTUM OUTLETS11032020".Name,
          "IQVIA OPTUM OUTLETS11032020"."10/2/2020 12:00:00 AM"
SEGMENTED BY hash("IQVIA OPTUM OUTLETS11032020"."Outlet #", "IQVIA OPTUM OUTLETS11032020".PRE, "IQVIA OPTUM OUTLETS11032020".Active, "IQVIA OPTUM OUTLETS11032020"."10/2/2020 12:00:00 AM", "IQVIA OPTUM OUTLETS11032020".Name) ALL NODES;

CREATE PROJECTION sandbox.RELIANCE_PRODUCT_MODEL_b0 /*+basename(RELIANCE_PRODUCT_MODEL),createtype(L)*/ 
(
 Market,
 "Source Name",
 "Product Name",
 "Product Description",
 "Manufacturer Name"
)
AS
 SELECT RELIANCE_PRODUCT_MODEL.Market,
        RELIANCE_PRODUCT_MODEL."Source Name",
        RELIANCE_PRODUCT_MODEL."Product Name",
        RELIANCE_PRODUCT_MODEL."Product Description",
        RELIANCE_PRODUCT_MODEL."Manufacturer Name"
 FROM sandbox.RELIANCE_PRODUCT_MODEL
 ORDER BY RELIANCE_PRODUCT_MODEL.Market,
          RELIANCE_PRODUCT_MODEL."Source Name",
          RELIANCE_PRODUCT_MODEL."Product Name",
          RELIANCE_PRODUCT_MODEL."Product Description",
          RELIANCE_PRODUCT_MODEL."Manufacturer Name"
SEGMENTED BY hash(RELIANCE_PRODUCT_MODEL.Market, RELIANCE_PRODUCT_MODEL."Source Name", RELIANCE_PRODUCT_MODEL."Manufacturer Name", RELIANCE_PRODUCT_MODEL."Product Name", RELIANCE_PRODUCT_MODEL."Product Description") ALL NODES;

CREATE PROJECTION sandbox.prescriber_rx_adhoc_12022020_b0 /*+basename(prescriber_rx_adhoc_12022020),createtype(A)*/ 
(
 ims_id,
 payer_plan_number,
 ims_client_number,
 report_frequency,
 ims_product_group,
 basket_id,
 data_date,
 date,
 sales_category,
 tvcmid,
 prescriber_first_name,
 prescriber_last_name,
 basket_name,
 basket_type,
 rollup_week,
 rollup_month,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 unnormalized_nrx_count,
 unnormalized_trx_count,
 market_name,
 payer_name,
 plan_name,
 pbm_name,
 model,
 payment_method,
 ims_specialty,
 ims_rx_type,
 ims_supplemental_data,
 ims_zip_other,
 ims_report_number_cnt,
 cnt_file_id,
 cnt_record_id,
 ims_report_number_qty,
 qty_file_id,
 qty_record_id,
 rollup_flag,
 indication
)
AS
 SELECT prescriber_rx_adhoc_12022020.ims_id,
        prescriber_rx_adhoc_12022020.payer_plan_number,
        prescriber_rx_adhoc_12022020.ims_client_number,
        prescriber_rx_adhoc_12022020.report_frequency,
        prescriber_rx_adhoc_12022020.ims_product_group,
        prescriber_rx_adhoc_12022020.basket_id,
        prescriber_rx_adhoc_12022020.data_date,
        prescriber_rx_adhoc_12022020.date,
        prescriber_rx_adhoc_12022020.sales_category,
        prescriber_rx_adhoc_12022020.tvcmid,
        prescriber_rx_adhoc_12022020.prescriber_first_name,
        prescriber_rx_adhoc_12022020.prescriber_last_name,
        prescriber_rx_adhoc_12022020.basket_name,
        prescriber_rx_adhoc_12022020.basket_type,
        prescriber_rx_adhoc_12022020.rollup_week,
        prescriber_rx_adhoc_12022020.rollup_month,
        prescriber_rx_adhoc_12022020.nrx_count,
        prescriber_rx_adhoc_12022020.trx_count,
        prescriber_rx_adhoc_12022020.nrx_quantity,
        prescriber_rx_adhoc_12022020.trx_quantity,
        prescriber_rx_adhoc_12022020.unnormalized_nrx_count,
        prescriber_rx_adhoc_12022020.unnormalized_trx_count,
        prescriber_rx_adhoc_12022020.market_name,
        prescriber_rx_adhoc_12022020.payer_name,
        prescriber_rx_adhoc_12022020.plan_name,
        prescriber_rx_adhoc_12022020.pbm_name,
        prescriber_rx_adhoc_12022020.model,
        prescriber_rx_adhoc_12022020.payment_method,
        prescriber_rx_adhoc_12022020.ims_specialty,
        prescriber_rx_adhoc_12022020.ims_rx_type,
        prescriber_rx_adhoc_12022020.ims_supplemental_data,
        prescriber_rx_adhoc_12022020.ims_zip_other,
        prescriber_rx_adhoc_12022020.ims_report_number_cnt,
        prescriber_rx_adhoc_12022020.cnt_file_id,
        prescriber_rx_adhoc_12022020.cnt_record_id,
        prescriber_rx_adhoc_12022020.ims_report_number_qty,
        prescriber_rx_adhoc_12022020.qty_file_id,
        prescriber_rx_adhoc_12022020.qty_record_id,
        prescriber_rx_adhoc_12022020.rollup_flag,
        prescriber_rx_adhoc_12022020.indication
 FROM sandbox.prescriber_rx_adhoc_12022020
 ORDER BY prescriber_rx_adhoc_12022020.ims_id,
          prescriber_rx_adhoc_12022020.payer_plan_number,
          prescriber_rx_adhoc_12022020.ims_client_number,
          prescriber_rx_adhoc_12022020.report_frequency,
          prescriber_rx_adhoc_12022020.ims_product_group,
          prescriber_rx_adhoc_12022020.basket_id,
          prescriber_rx_adhoc_12022020.data_date,
          prescriber_rx_adhoc_12022020.date,
          prescriber_rx_adhoc_12022020.sales_category,
          prescriber_rx_adhoc_12022020.tvcmid,
          prescriber_rx_adhoc_12022020.prescriber_first_name,
          prescriber_rx_adhoc_12022020.prescriber_last_name,
          prescriber_rx_adhoc_12022020.basket_name,
          prescriber_rx_adhoc_12022020.basket_type,
          prescriber_rx_adhoc_12022020.rollup_week,
          prescriber_rx_adhoc_12022020.rollup_month,
          prescriber_rx_adhoc_12022020.nrx_count,
          prescriber_rx_adhoc_12022020.trx_count,
          prescriber_rx_adhoc_12022020.nrx_quantity,
          prescriber_rx_adhoc_12022020.trx_quantity,
          prescriber_rx_adhoc_12022020.unnormalized_nrx_count,
          prescriber_rx_adhoc_12022020.unnormalized_trx_count,
          prescriber_rx_adhoc_12022020.market_name,
          prescriber_rx_adhoc_12022020.payer_name,
          prescriber_rx_adhoc_12022020.plan_name,
          prescriber_rx_adhoc_12022020.pbm_name,
          prescriber_rx_adhoc_12022020.model,
          prescriber_rx_adhoc_12022020.payment_method,
          prescriber_rx_adhoc_12022020.ims_specialty,
          prescriber_rx_adhoc_12022020.ims_rx_type,
          prescriber_rx_adhoc_12022020.ims_supplemental_data,
          prescriber_rx_adhoc_12022020.ims_zip_other,
          prescriber_rx_adhoc_12022020.ims_report_number_cnt,
          prescriber_rx_adhoc_12022020.cnt_file_id,
          prescriber_rx_adhoc_12022020.cnt_record_id,
          prescriber_rx_adhoc_12022020.ims_report_number_qty,
          prescriber_rx_adhoc_12022020.qty_file_id,
          prescriber_rx_adhoc_12022020.qty_record_id,
          prescriber_rx_adhoc_12022020.rollup_flag,
          prescriber_rx_adhoc_12022020.indication
SEGMENTED BY hash(prescriber_rx_adhoc_12022020.ims_client_number, prescriber_rx_adhoc_12022020.basket_id, prescriber_rx_adhoc_12022020.data_date, prescriber_rx_adhoc_12022020.date, prescriber_rx_adhoc_12022020.sales_category, prescriber_rx_adhoc_12022020.tvcmid, prescriber_rx_adhoc_12022020.rollup_week, prescriber_rx_adhoc_12022020.rollup_month, prescriber_rx_adhoc_12022020.nrx_count, prescriber_rx_adhoc_12022020.trx_count, prescriber_rx_adhoc_12022020.nrx_quantity, prescriber_rx_adhoc_12022020.trx_quantity, prescriber_rx_adhoc_12022020.unnormalized_nrx_count, prescriber_rx_adhoc_12022020.unnormalized_trx_count, prescriber_rx_adhoc_12022020.ims_rx_type, prescriber_rx_adhoc_12022020.ims_report_number_cnt, prescriber_rx_adhoc_12022020.cnt_file_id, prescriber_rx_adhoc_12022020.cnt_record_id, prescriber_rx_adhoc_12022020.ims_report_number_qty, prescriber_rx_adhoc_12022020.qty_file_id, prescriber_rx_adhoc_12022020.qty_record_id, prescriber_rx_adhoc_12022020.rollup_flag, prescriber_rx_adhoc_12022020.ims_id, prescriber_rx_adhoc_12022020.payer_plan_number, prescriber_rx_adhoc_12022020.ims_product_group, prescriber_rx_adhoc_12022020.ims_specialty, prescriber_rx_adhoc_12022020.ims_zip_other, prescriber_rx_adhoc_12022020.report_frequency, prescriber_rx_adhoc_12022020.ims_supplemental_data, prescriber_rx_adhoc_12022020.indication, prescriber_rx_adhoc_12022020.prescriber_first_name, prescriber_rx_adhoc_12022020.prescriber_last_name) ALL NODES;

CREATE PROJECTION sandbox.ref_rptng_mrkts_b0 /*+basename(ref_rptng_mrkts),createtype(A)*/ 
(
 basket_id,
 basket_name,
 basket_type,
 status,
 geo_summary_include,
 presc_summary_include,
 market_share_market_id,
 market_share_brand_id,
 rptg_decile_attribute_type,
 rptg_decile_attribute_prod_id,
 rptg_segment_attribute_type,
 rptg_segment_attribute_prod_id
)
AS
 SELECT ref_rptng_mrkts.basket_id,
        ref_rptng_mrkts.basket_name,
        ref_rptng_mrkts.basket_type,
        ref_rptng_mrkts.status,
        ref_rptng_mrkts.geo_summary_include,
        ref_rptng_mrkts.presc_summary_include,
        ref_rptng_mrkts.market_share_market_id,
        ref_rptng_mrkts.market_share_brand_id,
        ref_rptng_mrkts.rptg_decile_attribute_type,
        ref_rptng_mrkts.rptg_decile_attribute_prod_id,
        ref_rptng_mrkts.rptg_segment_attribute_type,
        ref_rptng_mrkts.rptg_segment_attribute_prod_id
 FROM sandbox.ref_rptng_mrkts
 ORDER BY ref_rptng_mrkts.basket_id,
          ref_rptng_mrkts.basket_name,
          ref_rptng_mrkts.basket_type,
          ref_rptng_mrkts.status,
          ref_rptng_mrkts.geo_summary_include,
          ref_rptng_mrkts.presc_summary_include,
          ref_rptng_mrkts.market_share_market_id,
          ref_rptng_mrkts.market_share_brand_id
SEGMENTED BY hash(ref_rptng_mrkts.basket_id, ref_rptng_mrkts.status, ref_rptng_mrkts.geo_summary_include, ref_rptng_mrkts.presc_summary_include, ref_rptng_mrkts.market_share_market_id, ref_rptng_mrkts.market_share_brand_id, ref_rptng_mrkts.rptg_decile_attribute_prod_id, ref_rptng_mrkts.rptg_segment_attribute_prod_id) ALL NODES;

CREATE PROJECTION sandbox."SYNEOS TERRs MISSING IMS IDs_b0" /*+basename(SYNEOS TERRs MISSING IMS IDs),createtype(L)*/ 
(
 "SYNEOS TERR",
 "Count of Missing IMS IDs"
)
AS
 SELECT "SYNEOS TERRs MISSING IMS IDs"."SYNEOS TERR",
        "SYNEOS TERRs MISSING IMS IDs"."Count of Missing IMS IDs"
 FROM sandbox."SYNEOS TERRs MISSING IMS IDs"
 ORDER BY "SYNEOS TERRs MISSING IMS IDs"."SYNEOS TERR",
          "SYNEOS TERRs MISSING IMS IDs"."Count of Missing IMS IDs"
SEGMENTED BY hash("SYNEOS TERRs MISSING IMS IDs"."Count of Missing IMS IDs", "SYNEOS TERRs MISSING IMS IDs"."SYNEOS TERR") ALL NODES;

CREATE PROJECTION sandbox.ic_rx_bkp_b0 /*+basename(ic_rx_bkp),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_bkp.ic_data_month,
        ic_rx_bkp.basket_name,
        ic_rx_bkp.sales_force_id,
        ic_rx_bkp.area_number,
        ic_rx_bkp.region_number,
        ic_rx_bkp.territory_number,
        ic_rx_bkp.ims_id,
        ic_rx_bkp.tvcmid,
        ic_rx_bkp.outlet_code,
        ic_rx_bkp.va_station_number,
        ic_rx_bkp.dnc_flag,
        ic_rx_bkp.dnp_flag,
        ic_rx_bkp.rollup_month,
        ic_rx_bkp.month_bucket,
        ic_rx_bkp.nrx_count,
        ic_rx_bkp.trx_count,
        ic_rx_bkp.nrx_quantity,
        ic_rx_bkp.trx_quantity,
        ic_rx_bkp.include_in_nation_rollup,
        ic_rx_bkp.include_in_area_rollup,
        ic_rx_bkp.include_in_region_rollup,
        ic_rx_bkp.join_key,
        ic_rx_bkp.row_source,
        ic_rx_bkp.row_create_date,
        ic_rx_bkp.indication,
        ic_rx_bkp.outlet_dea,
        ic_rx_bkp.payer_plan_number,
        ic_rx_bkp.payment_method
 FROM sandbox.ic_rx_bkp
 ORDER BY ic_rx_bkp.area_number,
          ic_rx_bkp.region_number,
          ic_rx_bkp.territory_number,
          ic_rx_bkp.ims_id,
          ic_rx_bkp.tvcmid
SEGMENTED BY hash(ic_rx_bkp.ic_data_month, ic_rx_bkp.tvcmid, ic_rx_bkp.outlet_code, ic_rx_bkp.dnc_flag, ic_rx_bkp.dnp_flag, ic_rx_bkp.rollup_month, ic_rx_bkp.month_bucket, ic_rx_bkp.nrx_count, ic_rx_bkp.trx_count, ic_rx_bkp.nrx_quantity, ic_rx_bkp.trx_quantity, ic_rx_bkp.include_in_nation_rollup, ic_rx_bkp.include_in_area_rollup, ic_rx_bkp.include_in_region_rollup, ic_rx_bkp.row_create_date, ic_rx_bkp.ims_id, ic_rx_bkp.va_station_number, ic_rx_bkp.join_key, ic_rx_bkp.area_number, ic_rx_bkp.region_number, ic_rx_bkp.territory_number, ic_rx_bkp.sales_force_id, ic_rx_bkp.row_source, ic_rx_bkp.basket_name) ALL NODES;

CREATE PROJECTION sandbox.rptng_approv_email_05022021_b0 /*+basename(rptng_approv_email_05022021),createtype(A)*/ 
(
 veeva_sent_email_id,
 sent_email_id,
 product,
 date_sent,
 status,
 failure_message,
 veeva_account_id,
 tvcmid,
 veeva_call_id,
 call_id,
 sender_email,
 territory,
 recipient_email,
 click_count,
 open_count,
 last_open_date,
 valid_consent,
 delivered,
 opened,
 dropped,
 clicked,
 downloaded,
 viewed,
 template_id,
 template_name,
 event_msg_vod__c,
 click_url_vod__c,
 subject
)
AS
 SELECT rptng_approv_email_05022021.veeva_sent_email_id,
        rptng_approv_email_05022021.sent_email_id,
        rptng_approv_email_05022021.product,
        rptng_approv_email_05022021.date_sent,
        rptng_approv_email_05022021.status,
        rptng_approv_email_05022021.failure_message,
        rptng_approv_email_05022021.veeva_account_id,
        rptng_approv_email_05022021.tvcmid,
        rptng_approv_email_05022021.veeva_call_id,
        rptng_approv_email_05022021.call_id,
        rptng_approv_email_05022021.sender_email,
        rptng_approv_email_05022021.territory,
        rptng_approv_email_05022021.recipient_email,
        rptng_approv_email_05022021.click_count,
        rptng_approv_email_05022021.open_count,
        rptng_approv_email_05022021.last_open_date,
        rptng_approv_email_05022021.valid_consent,
        rptng_approv_email_05022021.delivered,
        rptng_approv_email_05022021.opened,
        rptng_approv_email_05022021.dropped,
        rptng_approv_email_05022021.clicked,
        rptng_approv_email_05022021.downloaded,
        rptng_approv_email_05022021.viewed,
        rptng_approv_email_05022021.template_id,
        rptng_approv_email_05022021.template_name,
        rptng_approv_email_05022021.event_msg_vod__c,
        rptng_approv_email_05022021.click_url_vod__c,
        rptng_approv_email_05022021.subject
 FROM sandbox.rptng_approv_email_05022021
 ORDER BY rptng_approv_email_05022021.veeva_sent_email_id,
          rptng_approv_email_05022021.sent_email_id,
          rptng_approv_email_05022021.product,
          rptng_approv_email_05022021.date_sent,
          rptng_approv_email_05022021.status,
          rptng_approv_email_05022021.failure_message,
          rptng_approv_email_05022021.veeva_account_id,
          rptng_approv_email_05022021.tvcmid
SEGMENTED BY hash(rptng_approv_email_05022021.veeva_sent_email_id) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_mar2021_b0 /*+basename(ic_rx_mar2021),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_mar2021.ic_data_month,
        ic_rx_mar2021.basket_name,
        ic_rx_mar2021.sales_force_id,
        ic_rx_mar2021.area_number,
        ic_rx_mar2021.region_number,
        ic_rx_mar2021.territory_number,
        ic_rx_mar2021.ims_id,
        ic_rx_mar2021.tvcmid,
        ic_rx_mar2021.outlet_code,
        ic_rx_mar2021.va_station_number,
        ic_rx_mar2021.dnc_flag,
        ic_rx_mar2021.dnp_flag,
        ic_rx_mar2021.rollup_month,
        ic_rx_mar2021.month_bucket,
        ic_rx_mar2021.nrx_count,
        ic_rx_mar2021.trx_count,
        ic_rx_mar2021.nrx_quantity,
        ic_rx_mar2021.trx_quantity,
        ic_rx_mar2021.include_in_nation_rollup,
        ic_rx_mar2021.include_in_area_rollup,
        ic_rx_mar2021.include_in_region_rollup,
        ic_rx_mar2021.join_key,
        ic_rx_mar2021.row_source,
        ic_rx_mar2021.row_create_date,
        ic_rx_mar2021.indication,
        ic_rx_mar2021.outlet_dea,
        ic_rx_mar2021.payer_plan_number,
        ic_rx_mar2021.payment_method
 FROM sandbox.ic_rx_mar2021
 ORDER BY ic_rx_mar2021.ic_data_month,
          ic_rx_mar2021.basket_name,
          ic_rx_mar2021.sales_force_id,
          ic_rx_mar2021.area_number,
          ic_rx_mar2021.region_number,
          ic_rx_mar2021.territory_number,
          ic_rx_mar2021.ims_id,
          ic_rx_mar2021.tvcmid
SEGMENTED BY hash(ic_rx_mar2021.ic_data_month, ic_rx_mar2021.tvcmid, ic_rx_mar2021.outlet_code, ic_rx_mar2021.dnc_flag, ic_rx_mar2021.dnp_flag, ic_rx_mar2021.rollup_month, ic_rx_mar2021.month_bucket, ic_rx_mar2021.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_mar2021_b0 /*+basename(ic_demo_mar2021),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_mar2021.ic_data_month,
        ic_demo_mar2021.sales_force_id,
        ic_demo_mar2021.area_number,
        ic_demo_mar2021.region_number,
        ic_demo_mar2021.territory_number,
        ic_demo_mar2021.ims_id,
        ic_demo_mar2021.tvcmid,
        ic_demo_mar2021.outlet_code,
        ic_demo_mar2021.va_station_number,
        ic_demo_mar2021.specialty,
        ic_demo_mar2021.last_name,
        ic_demo_mar2021.first_name,
        ic_demo_mar2021.mid_name,
        ic_demo_mar2021.address_1,
        ic_demo_mar2021.address_2,
        ic_demo_mar2021.address_3,
        ic_demo_mar2021.city,
        ic_demo_mar2021.state,
        ic_demo_mar2021.zip,
        ic_demo_mar2021.address_source,
        ic_demo_mar2021.pdrp_flag,
        ic_demo_mar2021.pdrp_date,
        ic_demo_mar2021.np_pa_flag,
        ic_demo_mar2021.no_spend,
        ic_demo_mar2021.ama_no_contact_flag,
        ic_demo_mar2021.join_key,
        ic_demo_mar2021.row_source,
        ic_demo_mar2021.row_create_date,
        ic_demo_mar2021.outlet_dea,
        ic_demo_mar2021.secondary_specialty
 FROM sandbox.ic_demo_mar2021
 ORDER BY ic_demo_mar2021.ic_data_month,
          ic_demo_mar2021.sales_force_id,
          ic_demo_mar2021.area_number,
          ic_demo_mar2021.region_number,
          ic_demo_mar2021.territory_number,
          ic_demo_mar2021.ims_id,
          ic_demo_mar2021.tvcmid,
          ic_demo_mar2021.outlet_code
SEGMENTED BY hash(ic_demo_mar2021.ic_data_month, ic_demo_mar2021.tvcmid, ic_demo_mar2021.outlet_code, ic_demo_mar2021.mid_name, ic_demo_mar2021.state, ic_demo_mar2021.zip, ic_demo_mar2021.pdrp_flag, ic_demo_mar2021.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.payer_test1_b0 /*+basename(payer_test1),createtype(A)*/ 
(
 activity_id,
 federation_id,
 contact,
 source_name,
 "datetime",
 trackback_id,
 previous_activity,
 level_name,
 activity_role_name,
 type_name,
 native_type,
 details,
 line_item_id,
 brand_name,
 activity,
 line_item_datetime,
 line_item_previous_line_item,
 line_item_trackback_id,
 line_item_details,
 line_item_type_name,
 line_item_native_type,
 basket_id,
 web_url
)
AS
 SELECT payer_test1.activity_id,
        payer_test1.federation_id,
        payer_test1.contact,
        payer_test1.source_name,
        payer_test1."datetime",
        payer_test1.trackback_id,
        payer_test1.previous_activity,
        payer_test1.level_name,
        payer_test1.activity_role_name,
        payer_test1.type_name,
        payer_test1.native_type,
        payer_test1.details,
        payer_test1.line_item_id,
        payer_test1.brand_name,
        payer_test1.activity,
        payer_test1.line_item_datetime,
        payer_test1.line_item_previous_line_item,
        payer_test1.line_item_trackback_id,
        payer_test1.line_item_details,
        payer_test1.line_item_type_name,
        payer_test1.line_item_native_type,
        payer_test1.basket_id,
        payer_test1.web_url
 FROM sandbox.payer_test1
 ORDER BY payer_test1.activity_id
SEGMENTED BY hash(payer_test1.activity_id) ALL NODES;

CREATE PROJECTION sandbox.ftf_health_plan_geography_b0 /*+basename(ftf_health_plan_geography),createtype(A)*/ 
(
 health_plan_id,
 operating_state,
 lives_coverage,
 file_id,
 record_id
)
AS
 SELECT ftf_health_plan_geography.health_plan_id,
        ftf_health_plan_geography.operating_state,
        ftf_health_plan_geography.lives_coverage,
        ftf_health_plan_geography.file_id,
        ftf_health_plan_geography.record_id
 FROM sandbox.ftf_health_plan_geography
 ORDER BY ftf_health_plan_geography.health_plan_id,
          ftf_health_plan_geography.operating_state,
          ftf_health_plan_geography.lives_coverage,
          ftf_health_plan_geography.file_id,
          ftf_health_plan_geography.record_id
SEGMENTED BY hash(ftf_health_plan_geography.record_id) ALL NODES;

CREATE PROJECTION sandbox.ftf_restrictions_b0 /*+basename(ftf_restrictions),createtype(A)*/ 
(
 health_plan_id,
 drug_id,
 restriction_detail_id,
 restriction_code,
 formulary_entry_restriction_id,
 restriction_detail_text,
 restriction_addtnl_information_1,
 restriction_addtnl_information_2,
 record_id,
 file_id
)
AS
 SELECT ftf_restrictions.health_plan_id,
        ftf_restrictions.drug_id,
        ftf_restrictions.restriction_detail_id,
        ftf_restrictions.restriction_code,
        ftf_restrictions.formulary_entry_restriction_id,
        ftf_restrictions.restriction_detail_text,
        ftf_restrictions.restriction_addtnl_information_1,
        ftf_restrictions.restriction_addtnl_information_2,
        ftf_restrictions.record_id,
        ftf_restrictions.file_id
 FROM sandbox.ftf_restrictions
 ORDER BY ftf_restrictions.health_plan_id,
          ftf_restrictions.drug_id,
          ftf_restrictions.restriction_detail_id,
          ftf_restrictions.restriction_code,
          ftf_restrictions.formulary_entry_restriction_id,
          ftf_restrictions.restriction_detail_text,
          ftf_restrictions.restriction_addtnl_information_1,
          ftf_restrictions.restriction_addtnl_information_2,
          ftf_restrictions.record_id,
          ftf_restrictions.file_id
SEGMENTED BY hash(ftf_restrictions.record_id) ALL NODES;

CREATE PROJECTION sandbox.ims_plan_xref_b0 /*+basename(ims_plan_xref),createtype(A)*/ 
(
 payer_num,
 payer_name,
 plan_num,
 payer_plan_num,
 plan_name,
 model,
 city,
 hq_state,
 operating_state,
 months_with_data,
 file_id,
 record_id
)
AS
 SELECT ims_plan_xref.payer_num,
        ims_plan_xref.payer_name,
        ims_plan_xref.plan_num,
        ims_plan_xref.payer_plan_num,
        ims_plan_xref.plan_name,
        ims_plan_xref.model,
        ims_plan_xref.city,
        ims_plan_xref.hq_state,
        ims_plan_xref.operating_state,
        ims_plan_xref.months_with_data,
        ims_plan_xref.file_id,
        ims_plan_xref.record_id
 FROM sandbox.ims_plan_xref
 ORDER BY ims_plan_xref.payer_num,
          ims_plan_xref.payer_name,
          ims_plan_xref.plan_num,
          ims_plan_xref.payer_plan_num,
          ims_plan_xref.plan_name,
          ims_plan_xref.model,
          ims_plan_xref.city,
          ims_plan_xref.hq_state,
          ims_plan_xref.operating_state,
          ims_plan_xref.months_with_data,
          ims_plan_xref.file_id,
          ims_plan_xref.record_id
SEGMENTED BY hash(ims_plan_xref.record_id) ALL NODES;

CREATE PROJECTION sandbox.addr_b0 /*+basename(addr),createtype(A)*/ 
(
 tvcmid,
 address_id,
 address_type,
 address_type_name,
 address_line_1,
 address_line_2,
 county,
 city,
 state,
 state_name,
 country_code,
 country_name,
 zip5_postal_code,
 zip4_postal_extension_code,
 address_status,
 address_status_name,
 address_effective_date,
 msa_cbsa,
 fips_state_code,
 fips_state_description,
 fips_county_code,
 fips_county_description,
 deliverability_confidence,
 address_setting_type_code,
 address_setting_type_description,
 address_category_code,
 address_category_description,
 address_latitude,
 address_longitude,
 postal_barcode,
 single_address_indicator,
 practice_location_confidence_indicator,
 practice_location_rank,
 validation_message,
 created_by,
 created_date,
 updated_by,
 updated_date,
 file_id,
 record_id
)
AS
 SELECT addr.tvcmid,
        addr.address_id,
        addr.address_type,
        addr.address_type_name,
        addr.address_line_1,
        addr.address_line_2,
        addr.county,
        addr.city,
        addr.state,
        addr.state_name,
        addr.country_code,
        addr.country_name,
        addr.zip5_postal_code,
        addr.zip4_postal_extension_code,
        addr.address_status,
        addr.address_status_name,
        addr.address_effective_date,
        addr.msa_cbsa,
        addr.fips_state_code,
        addr.fips_state_description,
        addr.fips_county_code,
        addr.fips_county_description,
        addr.deliverability_confidence,
        addr.address_setting_type_code,
        addr.address_setting_type_description,
        addr.address_category_code,
        addr.address_category_description,
        addr.address_latitude,
        addr.address_longitude,
        addr.postal_barcode,
        addr.single_address_indicator,
        addr.practice_location_confidence_indicator,
        addr.practice_location_rank,
        addr.validation_message,
        addr.created_by,
        addr.created_date,
        addr.updated_by,
        addr.updated_date,
        addr.file_id,
        addr.record_id
 FROM sandbox.addr
 ORDER BY addr.tvcmid,
          addr.address_id,
          addr.address_type,
          addr.address_type_name,
          addr.address_line_1,
          addr.address_line_2,
          addr.county,
          addr.city,
          addr.state,
          addr.state_name,
          addr.country_code,
          addr.country_name,
          addr.zip5_postal_code,
          addr.zip4_postal_extension_code,
          addr.address_status,
          addr.address_status_name,
          addr.address_effective_date,
          addr.msa_cbsa,
          addr.fips_state_code,
          addr.fips_state_description,
          addr.fips_county_code,
          addr.fips_county_description,
          addr.deliverability_confidence,
          addr.address_setting_type_code,
          addr.address_setting_type_description,
          addr.address_category_code,
          addr.address_category_description,
          addr.address_latitude,
          addr.address_longitude,
          addr.postal_barcode,
          addr.single_address_indicator,
          addr.practice_location_confidence_indicator,
          addr.practice_location_rank,
          addr.validation_message,
          addr.created_by,
          addr.created_date,
          addr.updated_by,
          addr.updated_date,
          addr.record_id
SEGMENTED BY hash(addr.record_id) ALL NODES;

CREATE PROJECTION sandbox.iqvia_pbm_preprocessed_b0 /*+basename(iqvia_pbm_preprocessed),createtype(A)*/ 
(
 iqvia_plan_code,
 iqvia_pbm,
 xref_to,
 iqvia_plan_name,
 cycle_id,
 modified_time,
 modified_by
)
AS
 SELECT iqvia_pbm_preprocessed.iqvia_plan_code,
        iqvia_pbm_preprocessed.iqvia_pbm,
        iqvia_pbm_preprocessed.xref_to,
        iqvia_pbm_preprocessed.iqvia_plan_name,
        iqvia_pbm_preprocessed.cycle_id,
        iqvia_pbm_preprocessed.modified_time,
        iqvia_pbm_preprocessed.modified_by
 FROM sandbox.iqvia_pbm_preprocessed
 ORDER BY iqvia_pbm_preprocessed.iqvia_plan_code,
          iqvia_pbm_preprocessed.iqvia_pbm,
          iqvia_pbm_preprocessed.xref_to,
          iqvia_pbm_preprocessed.iqvia_plan_name,
          iqvia_pbm_preprocessed.cycle_id,
          iqvia_pbm_preprocessed.modified_time,
          iqvia_pbm_preprocessed.modified_by
SEGMENTED BY hash(iqvia_pbm_preprocessed.cycle_id, iqvia_pbm_preprocessed.modified_time, iqvia_pbm_preprocessed.modified_by, iqvia_pbm_preprocessed.iqvia_plan_code, iqvia_pbm_preprocessed.xref_to, iqvia_pbm_preprocessed.iqvia_pbm, iqvia_pbm_preprocessed.iqvia_plan_name) ALL NODES;

CREATE PROJECTION sandbox.ftf_health_plans_preprocessed_b0 /*+basename(ftf_health_plans_preprocessed),createtype(A)*/ 
(
 ftf_health_plan_fid,
 ftf_health_plan_name,
 ftf_provider_fid,
 ftf_provider_name,
 parent_id,
 ftf_parent_name,
 ftf_health_plan_type,
 pref_brand_tier,
 plan_lives,
 paytype,
 cycle_id,
 modified_time,
 modified_by
)
AS
 SELECT ftf_health_plans_preprocessed.ftf_health_plan_fid,
        ftf_health_plans_preprocessed.ftf_health_plan_name,
        ftf_health_plans_preprocessed.ftf_provider_fid,
        ftf_health_plans_preprocessed.ftf_provider_name,
        ftf_health_plans_preprocessed.parent_id,
        ftf_health_plans_preprocessed.ftf_parent_name,
        ftf_health_plans_preprocessed.ftf_health_plan_type,
        ftf_health_plans_preprocessed.pref_brand_tier,
        ftf_health_plans_preprocessed.plan_lives,
        ftf_health_plans_preprocessed.paytype,
        ftf_health_plans_preprocessed.cycle_id,
        ftf_health_plans_preprocessed.modified_time,
        ftf_health_plans_preprocessed.modified_by
 FROM sandbox.ftf_health_plans_preprocessed
 ORDER BY ftf_health_plans_preprocessed.ftf_health_plan_fid,
          ftf_health_plans_preprocessed.ftf_health_plan_name,
          ftf_health_plans_preprocessed.ftf_provider_fid,
          ftf_health_plans_preprocessed.ftf_provider_name,
          ftf_health_plans_preprocessed.parent_id,
          ftf_health_plans_preprocessed.ftf_parent_name,
          ftf_health_plans_preprocessed.ftf_health_plan_type,
          ftf_health_plans_preprocessed.pref_brand_tier
SEGMENTED BY hash(ftf_health_plans_preprocessed.ftf_health_plan_fid, ftf_health_plans_preprocessed.ftf_provider_fid, ftf_health_plans_preprocessed.parent_id, ftf_health_plans_preprocessed.plan_lives, ftf_health_plans_preprocessed.cycle_id, ftf_health_plans_preprocessed.modified_time, ftf_health_plans_preprocessed.modified_by, ftf_health_plans_preprocessed.pref_brand_tier) ALL NODES;

CREATE PROJECTION sandbox.ftf_formularies_preprocessed_b0 /*+basename(ftf_formularies_preprocessed),createtype(A)*/ 
(
 drug_seq,
 ftf_health_plan_fid,
 drug_id,
 tier_code,
 restrictions,
 reason_code,
 reason_code_description,
 pharmacy_status,
 check_blank_pharmstat,
 cycle_id,
 modified_time,
 modified_by
)
AS
 SELECT ftf_formularies_preprocessed.drug_seq,
        ftf_formularies_preprocessed.ftf_health_plan_fid,
        ftf_formularies_preprocessed.drug_id,
        ftf_formularies_preprocessed.tier_code,
        ftf_formularies_preprocessed.restrictions,
        ftf_formularies_preprocessed.reason_code,
        ftf_formularies_preprocessed.reason_code_description,
        ftf_formularies_preprocessed.pharmacy_status,
        ftf_formularies_preprocessed.check_blank_pharmstat,
        ftf_formularies_preprocessed.cycle_id,
        ftf_formularies_preprocessed.modified_time,
        ftf_formularies_preprocessed.modified_by
 FROM sandbox.ftf_formularies_preprocessed
 ORDER BY ftf_formularies_preprocessed.drug_seq,
          ftf_formularies_preprocessed.ftf_health_plan_fid
SEGMENTED BY hash(ftf_formularies_preprocessed.drug_seq, ftf_formularies_preprocessed.ftf_health_plan_fid, ftf_formularies_preprocessed.drug_id, ftf_formularies_preprocessed.tier_code, ftf_formularies_preprocessed.cycle_id, ftf_formularies_preprocessed.modified_time, ftf_formularies_preprocessed.modified_by, ftf_formularies_preprocessed.restrictions) ALL NODES;

CREATE PROJECTION sandbox.ftf_pbms_preprocessed_b0 /*+basename(ftf_pbms_preprocessed),createtype(A)*/ 
(
 ftf_health_plan_fid,
 pbm_id,
 pbm,
 pbm_function_id,
 pbm_function,
 cycle_id,
 modified_time,
 modified_by
)
AS
 SELECT ftf_pbms_preprocessed.ftf_health_plan_fid,
        ftf_pbms_preprocessed.pbm_id,
        ftf_pbms_preprocessed.pbm,
        ftf_pbms_preprocessed.pbm_function_id,
        ftf_pbms_preprocessed.pbm_function,
        ftf_pbms_preprocessed.cycle_id,
        ftf_pbms_preprocessed.modified_time,
        ftf_pbms_preprocessed.modified_by
 FROM sandbox.ftf_pbms_preprocessed
 ORDER BY ftf_pbms_preprocessed.ftf_health_plan_fid,
          ftf_pbms_preprocessed.pbm_id,
          ftf_pbms_preprocessed.pbm,
          ftf_pbms_preprocessed.pbm_function_id,
          ftf_pbms_preprocessed.pbm_function,
          ftf_pbms_preprocessed.cycle_id,
          ftf_pbms_preprocessed.modified_time,
          ftf_pbms_preprocessed.modified_by
SEGMENTED BY hash(ftf_pbms_preprocessed.ftf_health_plan_fid, ftf_pbms_preprocessed.pbm_id, ftf_pbms_preprocessed.pbm_function_id, ftf_pbms_preprocessed.cycle_id, ftf_pbms_preprocessed.modified_time, ftf_pbms_preprocessed.modified_by, ftf_pbms_preprocessed.pbm, ftf_pbms_preprocessed.pbm_function) ALL NODES;

CREATE PROJECTION sandbox.ftf_restrictions_preprocessed_v2_b0 /*+basename(ftf_restrictions_preprocessed_v2),createtype(A)*/ 
(
 ftf_health_plan_fid,
 drug_id,
 drug_seq,
 MAX,
 botox,
 step,
 pres_pa,
 pat_pa,
 med_rec,
 unspec,
 cycle_id,
 modified_time,
 modified_by
)
AS
 SELECT ftf_restrictions_preprocessed_v2.ftf_health_plan_fid,
        ftf_restrictions_preprocessed_v2.drug_id,
        ftf_restrictions_preprocessed_v2.drug_seq,
        ftf_restrictions_preprocessed_v2.MAX,
        ftf_restrictions_preprocessed_v2.botox,
        ftf_restrictions_preprocessed_v2.step,
        ftf_restrictions_preprocessed_v2.pres_pa,
        ftf_restrictions_preprocessed_v2.pat_pa,
        ftf_restrictions_preprocessed_v2.med_rec,
        ftf_restrictions_preprocessed_v2.unspec,
        ftf_restrictions_preprocessed_v2.cycle_id,
        ftf_restrictions_preprocessed_v2.modified_time,
        ftf_restrictions_preprocessed_v2.modified_by
 FROM sandbox.ftf_restrictions_preprocessed_v2
 ORDER BY ftf_restrictions_preprocessed_v2.ftf_health_plan_fid,
          ftf_restrictions_preprocessed_v2.drug_id,
          ftf_restrictions_preprocessed_v2.drug_seq
SEGMENTED BY hash(ftf_restrictions_preprocessed_v2.ftf_health_plan_fid, ftf_restrictions_preprocessed_v2.drug_id, ftf_restrictions_preprocessed_v2.drug_seq) ALL NODES;

CREATE PROJECTION sandbox.raw_ftf_formularies_b0 /*+basename(raw_ftf_formularies),createtype(A)*/ 
(
 health_plan_id,
 drug_id,
 tier_code,
 restrictions,
 reason_code,
 reason_code_description,
 pharmacy_status
)
AS
 SELECT raw_ftf_formularies.health_plan_id,
        raw_ftf_formularies.drug_id,
        raw_ftf_formularies.tier_code,
        raw_ftf_formularies.restrictions,
        raw_ftf_formularies.reason_code,
        raw_ftf_formularies.reason_code_description,
        raw_ftf_formularies.pharmacy_status
 FROM sandbox.raw_ftf_formularies
 ORDER BY raw_ftf_formularies.health_plan_id,
          raw_ftf_formularies.drug_id,
          raw_ftf_formularies.tier_code,
          raw_ftf_formularies.restrictions,
          raw_ftf_formularies.reason_code,
          raw_ftf_formularies.reason_code_description
SEGMENTED BY hash(raw_ftf_formularies.health_plan_id, raw_ftf_formularies.drug_id, raw_ftf_formularies.tier_code, raw_ftf_formularies.restrictions, raw_ftf_formularies.reason_code, raw_ftf_formularies.reason_code_description) ALL NODES;

CREATE PROJECTION sandbox.raw_ftf_health_plans_b0 /*+basename(raw_ftf_health_plans),createtype(A)*/ 
(
 formularyf_id,
 provider_id,
 provider,
 health_plan_id,
 health_plan,
 parent_id,
 parent,
 national_lives_count,
 plan_type_name,
 preferred_brand_tier
)
AS
 SELECT raw_ftf_health_plans.formularyf_id,
        raw_ftf_health_plans.provider_id,
        raw_ftf_health_plans.provider,
        raw_ftf_health_plans.health_plan_id,
        raw_ftf_health_plans.health_plan,
        raw_ftf_health_plans.parent_id,
        raw_ftf_health_plans.parent,
        raw_ftf_health_plans.national_lives_count,
        raw_ftf_health_plans.plan_type_name,
        raw_ftf_health_plans.preferred_brand_tier
 FROM sandbox.raw_ftf_health_plans
 ORDER BY raw_ftf_health_plans.formularyf_id,
          raw_ftf_health_plans.provider_id,
          raw_ftf_health_plans.provider,
          raw_ftf_health_plans.health_plan_id,
          raw_ftf_health_plans.health_plan,
          raw_ftf_health_plans.parent_id,
          raw_ftf_health_plans.parent,
          raw_ftf_health_plans.national_lives_count
SEGMENTED BY hash(raw_ftf_health_plans.formularyf_id, raw_ftf_health_plans.provider_id, raw_ftf_health_plans.health_plan_id, raw_ftf_health_plans.parent_id, raw_ftf_health_plans.national_lives_count, raw_ftf_health_plans.preferred_brand_tier, raw_ftf_health_plans.health_plan, raw_ftf_health_plans.provider) ALL NODES;

CREATE PROJECTION sandbox.raw_ftf_pbms_b0 /*+basename(raw_ftf_pbms),createtype(A)*/ 
(
 health_plan_id,
 pbm_id,
 pbm,
 pbm_function_id,
 pbm_function
)
AS
 SELECT raw_ftf_pbms.health_plan_id,
        raw_ftf_pbms.pbm_id,
        raw_ftf_pbms.pbm,
        raw_ftf_pbms.pbm_function_id,
        raw_ftf_pbms.pbm_function
 FROM sandbox.raw_ftf_pbms
 ORDER BY raw_ftf_pbms.health_plan_id,
          raw_ftf_pbms.pbm_id,
          raw_ftf_pbms.pbm,
          raw_ftf_pbms.pbm_function_id,
          raw_ftf_pbms.pbm_function
SEGMENTED BY hash(raw_ftf_pbms.health_plan_id, raw_ftf_pbms.pbm_id, raw_ftf_pbms.pbm_function_id, raw_ftf_pbms.pbm, raw_ftf_pbms.pbm_function) ALL NODES;

CREATE PROJECTION sandbox.raw_iqvia_plan_b0 /*+basename(raw_iqvia_plan),createtype(A)*/ 
(
 payer_num,
 payer_name,
 plan_num,
 payer_plan_num,
 plan_name,
 model,
 city,
 hq_state,
 operating_state,
 months_with_data
)
AS
 SELECT raw_iqvia_plan.payer_num,
        raw_iqvia_plan.payer_name,
        raw_iqvia_plan.plan_num,
        raw_iqvia_plan.payer_plan_num,
        raw_iqvia_plan.plan_name,
        raw_iqvia_plan.model,
        raw_iqvia_plan.city,
        raw_iqvia_plan.hq_state,
        raw_iqvia_plan.operating_state,
        raw_iqvia_plan.months_with_data
 FROM sandbox.raw_iqvia_plan
 ORDER BY raw_iqvia_plan.payer_num,
          raw_iqvia_plan.payer_name,
          raw_iqvia_plan.plan_num,
          raw_iqvia_plan.payer_plan_num,
          raw_iqvia_plan.plan_name,
          raw_iqvia_plan.model,
          raw_iqvia_plan.city,
          raw_iqvia_plan.hq_state
SEGMENTED BY hash(raw_iqvia_plan.payer_num, raw_iqvia_plan.plan_num, raw_iqvia_plan.hq_state, raw_iqvia_plan.operating_state, raw_iqvia_plan.months_with_data, raw_iqvia_plan.payer_plan_num, raw_iqvia_plan.model, raw_iqvia_plan.city) ALL NODES;

CREATE PROJECTION sandbox.raw_iqvia_pbm_b0 /*+basename(raw_iqvia_pbm),createtype(A)*/ 
(
 pbm_name,
 payer_plan_num,
 xref_to_payer_plan_num,
 ipd_id,
 ipd_type,
 plan_name,
 pbm_num,
 ims_processor_num
)
AS
 SELECT raw_iqvia_pbm.pbm_name,
        raw_iqvia_pbm.payer_plan_num,
        raw_iqvia_pbm.xref_to_payer_plan_num,
        raw_iqvia_pbm.ipd_id,
        raw_iqvia_pbm.ipd_type,
        raw_iqvia_pbm.plan_name,
        raw_iqvia_pbm.pbm_num,
        raw_iqvia_pbm.ims_processor_num
 FROM sandbox.raw_iqvia_pbm
 ORDER BY raw_iqvia_pbm.pbm_name,
          raw_iqvia_pbm.payer_plan_num,
          raw_iqvia_pbm.xref_to_payer_plan_num,
          raw_iqvia_pbm.ipd_id,
          raw_iqvia_pbm.ipd_type,
          raw_iqvia_pbm.plan_name,
          raw_iqvia_pbm.pbm_num,
          raw_iqvia_pbm.ims_processor_num
SEGMENTED BY hash(raw_iqvia_pbm.pbm_num, raw_iqvia_pbm.payer_plan_num, raw_iqvia_pbm.xref_to_payer_plan_num, raw_iqvia_pbm.ipd_id, raw_iqvia_pbm.ipd_type, raw_iqvia_pbm.ims_processor_num, raw_iqvia_pbm.pbm_name, raw_iqvia_pbm.plan_name) ALL NODES;

CREATE PROJECTION sandbox.raw_teva_ims_bridge_b0 /*+basename(raw_teva_ims_bridge),createtype(L)*/ 
(
 payer_name,
 code,
 name,
 state,
 comments,
 plan_id,
 plan_name,
 provider_name,
 plan_type_name
)
AS
 SELECT raw_teva_ims_bridge.payer_name,
        raw_teva_ims_bridge.code,
        raw_teva_ims_bridge.name,
        raw_teva_ims_bridge.state,
        raw_teva_ims_bridge.comments,
        raw_teva_ims_bridge.plan_id,
        raw_teva_ims_bridge.plan_name,
        raw_teva_ims_bridge.provider_name,
        raw_teva_ims_bridge.plan_type_name
 FROM sandbox.raw_teva_ims_bridge
 ORDER BY raw_teva_ims_bridge.payer_name,
          raw_teva_ims_bridge.code,
          raw_teva_ims_bridge.name,
          raw_teva_ims_bridge.state,
          raw_teva_ims_bridge.comments,
          raw_teva_ims_bridge.plan_id,
          raw_teva_ims_bridge.plan_name,
          raw_teva_ims_bridge.provider_name
SEGMENTED BY hash(raw_teva_ims_bridge.state, raw_teva_ims_bridge.code, raw_teva_ims_bridge.plan_id, raw_teva_ims_bridge.plan_type_name, raw_teva_ims_bridge.payer_name, raw_teva_ims_bridge.name, raw_teva_ims_bridge.comments, raw_teva_ims_bridge.plan_name) ALL NODES;

CREATE PROJECTION sandbox.raw_ftf_restrictions_b0 /*+basename(raw_ftf_restrictions),createtype(L)*/ 
(
 health_plan_id,
 drug_id,
 restriction_code,
 restriction_detail_id,
 restriction_detail_text,
 restriction_addtnl_information_1,
 restriction_addtnl_information_2,
 step_count,
 pa_form,
 indication,
 grouped_restriction_level
)
AS
 SELECT raw_ftf_restrictions.health_plan_id,
        raw_ftf_restrictions.drug_id,
        raw_ftf_restrictions.restriction_code,
        raw_ftf_restrictions.restriction_detail_id,
        raw_ftf_restrictions.restriction_detail_text,
        raw_ftf_restrictions.restriction_addtnl_information_1,
        raw_ftf_restrictions.restriction_addtnl_information_2,
        raw_ftf_restrictions.step_count,
        raw_ftf_restrictions.pa_form,
        raw_ftf_restrictions.indication,
        raw_ftf_restrictions.grouped_restriction_level
 FROM sandbox.raw_ftf_restrictions
 ORDER BY raw_ftf_restrictions.health_plan_id,
          raw_ftf_restrictions.drug_id,
          raw_ftf_restrictions.restriction_code,
          raw_ftf_restrictions.restriction_detail_id,
          raw_ftf_restrictions.restriction_detail_text,
          raw_ftf_restrictions.restriction_addtnl_information_1,
          raw_ftf_restrictions.restriction_addtnl_information_2,
          raw_ftf_restrictions.step_count
SEGMENTED BY hash(raw_ftf_restrictions.health_plan_id, raw_ftf_restrictions.drug_id, raw_ftf_restrictions.restriction_code, raw_ftf_restrictions.restriction_detail_id, raw_ftf_restrictions.step_count, raw_ftf_restrictions.indication, raw_ftf_restrictions.grouped_restriction_level, raw_ftf_restrictions.restriction_detail_text) ALL NODES;

CREATE PROJECTION sandbox.raw_ftf_health_plan_geography_b0 /*+basename(raw_ftf_health_plan_geography),createtype(L)*/ 
(
 health_plan_id,
 county_fips_id,
 county_id,
 county_name,
 state_id,
 state_name,
 county_lives
)
AS
 SELECT raw_ftf_health_plan_geography.health_plan_id,
        raw_ftf_health_plan_geography.county_fips_id,
        raw_ftf_health_plan_geography.county_id,
        raw_ftf_health_plan_geography.county_name,
        raw_ftf_health_plan_geography.state_id,
        raw_ftf_health_plan_geography.state_name,
        raw_ftf_health_plan_geography.county_lives
 FROM sandbox.raw_ftf_health_plan_geography
 ORDER BY raw_ftf_health_plan_geography.health_plan_id,
          raw_ftf_health_plan_geography.county_fips_id,
          raw_ftf_health_plan_geography.county_id,
          raw_ftf_health_plan_geography.county_name,
          raw_ftf_health_plan_geography.state_id,
          raw_ftf_health_plan_geography.state_name,
          raw_ftf_health_plan_geography.county_lives
SEGMENTED BY hash(raw_ftf_health_plan_geography.health_plan_id, raw_ftf_health_plan_geography.county_fips_id, raw_ftf_health_plan_geography.county_id, raw_ftf_health_plan_geography.state_id, raw_ftf_health_plan_geography.county_lives, raw_ftf_health_plan_geography.state_name, raw_ftf_health_plan_geography.county_name) ALL NODES;

CREATE PROJECTION sandbox.access_monitor_s121_b0 /*+basename(access_monitor_s121),createtype(L)*/ 
(
 client_id,
 client_physician_id,
 me_number,
 npi,
 valid_menum_flag,
 valid_npi_flag,
 am_no_see_rating,
 teams_no_see_rating,
 annual_call_freq_perc_25,
 annual_call_freq_perc_50,
 annual_call_freq_perc_75,
 teams_call_freq,
 industry_attainment,
 teams_attainment,
 attn_perc_25,
 attn_perc_50,
 attn_perc_75,
 teams_attn_perc,
 am_specialty_grouping,
 teams_spec,
 am_zip,
 teams_zip,
 reach_type,
 annual_f2f_call_freq_perc_25,
 annual_f2f_call_freq_perc_50,
 annual_f2f_call_freq_perc_75,
 teams_call_freq_f2f,
 annual_remote_call_freq_perc_25,
 annual_remote_call_freq_perc_50,
 annual_remote_call_freq_perc_75,
 teams_call_freq_remote
)
AS
 SELECT access_monitor_s121.client_id,
        access_monitor_s121.client_physician_id,
        access_monitor_s121.me_number,
        access_monitor_s121.npi,
        access_monitor_s121.valid_menum_flag,
        access_monitor_s121.valid_npi_flag,
        access_monitor_s121.am_no_see_rating,
        access_monitor_s121.teams_no_see_rating,
        access_monitor_s121.annual_call_freq_perc_25,
        access_monitor_s121.annual_call_freq_perc_50,
        access_monitor_s121.annual_call_freq_perc_75,
        access_monitor_s121.teams_call_freq,
        access_monitor_s121.industry_attainment,
        access_monitor_s121.teams_attainment,
        access_monitor_s121.attn_perc_25,
        access_monitor_s121.attn_perc_50,
        access_monitor_s121.attn_perc_75,
        access_monitor_s121.teams_attn_perc,
        access_monitor_s121.am_specialty_grouping,
        access_monitor_s121.teams_spec,
        access_monitor_s121.am_zip,
        access_monitor_s121.teams_zip,
        access_monitor_s121.reach_type,
        access_monitor_s121.annual_f2f_call_freq_perc_25,
        access_monitor_s121.annual_f2f_call_freq_perc_50,
        access_monitor_s121.annual_f2f_call_freq_perc_75,
        access_monitor_s121.teams_call_freq_f2f,
        access_monitor_s121.annual_remote_call_freq_perc_25,
        access_monitor_s121.annual_remote_call_freq_perc_50,
        access_monitor_s121.annual_remote_call_freq_perc_75,
        access_monitor_s121.teams_call_freq_remote
 FROM sandbox.access_monitor_s121
 ORDER BY access_monitor_s121.client_id,
          access_monitor_s121.client_physician_id,
          access_monitor_s121.me_number,
          access_monitor_s121.npi,
          access_monitor_s121.valid_menum_flag,
          access_monitor_s121.valid_npi_flag,
          access_monitor_s121.am_no_see_rating,
          access_monitor_s121.teams_no_see_rating
SEGMENTED BY hash(access_monitor_s121.client_id, access_monitor_s121.valid_menum_flag, access_monitor_s121.valid_npi_flag, access_monitor_s121.am_no_see_rating, access_monitor_s121.annual_call_freq_perc_25, access_monitor_s121.annual_call_freq_perc_50, access_monitor_s121.annual_call_freq_perc_75, access_monitor_s121.industry_attainment) ALL NODES;

CREATE PROJECTION sandbox.afm_cycle1_teva_hcp_report_b0 /*+basename(afm_cycle1_teva_hcp_report),createtype(L)*/ 
(
 npi,
 zs_spec_desc_md,
 specialty_name,
 specialty_group,
 pff_ctt_vol,
 pff_en,
 pff_en_quintile,
 pff_affinity,
 pr_ctt_vol,
 pr_en,
 pr_en_quintile,
 pr_affinity,
 pi_ctt_vol,
 pi_en,
 pi_en_quintile,
 pi_affinity,
 dph_ctt_vol,
 dph_en,
 dph_en_quintile,
 dph_affinity,
 dpl_ctt_vol,
 dpl_en,
 dpl_en_quintile,
 dpl_affinity,
 drt_ctt_vol,
 drt_en,
 drt_en_quintile,
 drt_affinity,
 top_channels,
 pp_access_rating,
 npp_access_rating,
 peer_offer_en,
 copay_offer_en,
 sample_offer_en,
 voucher_offer_en
)
AS
 SELECT afm_cycle1_teva_hcp_report.npi,
        afm_cycle1_teva_hcp_report.zs_spec_desc_md,
        afm_cycle1_teva_hcp_report.specialty_name,
        afm_cycle1_teva_hcp_report.specialty_group,
        afm_cycle1_teva_hcp_report.pff_ctt_vol,
        afm_cycle1_teva_hcp_report.pff_en,
        afm_cycle1_teva_hcp_report.pff_en_quintile,
        afm_cycle1_teva_hcp_report.pff_affinity,
        afm_cycle1_teva_hcp_report.pr_ctt_vol,
        afm_cycle1_teva_hcp_report.pr_en,
        afm_cycle1_teva_hcp_report.pr_en_quintile,
        afm_cycle1_teva_hcp_report.pr_affinity,
        afm_cycle1_teva_hcp_report.pi_ctt_vol,
        afm_cycle1_teva_hcp_report.pi_en,
        afm_cycle1_teva_hcp_report.pi_en_quintile,
        afm_cycle1_teva_hcp_report.pi_affinity,
        afm_cycle1_teva_hcp_report.dph_ctt_vol,
        afm_cycle1_teva_hcp_report.dph_en,
        afm_cycle1_teva_hcp_report.dph_en_quintile,
        afm_cycle1_teva_hcp_report.dph_affinity,
        afm_cycle1_teva_hcp_report.dpl_ctt_vol,
        afm_cycle1_teva_hcp_report.dpl_en,
        afm_cycle1_teva_hcp_report.dpl_en_quintile,
        afm_cycle1_teva_hcp_report.dpl_affinity,
        afm_cycle1_teva_hcp_report.drt_ctt_vol,
        afm_cycle1_teva_hcp_report.drt_en,
        afm_cycle1_teva_hcp_report.drt_en_quintile,
        afm_cycle1_teva_hcp_report.drt_affinity,
        afm_cycle1_teva_hcp_report.top_channels,
        afm_cycle1_teva_hcp_report.pp_access_rating,
        afm_cycle1_teva_hcp_report.npp_access_rating,
        afm_cycle1_teva_hcp_report.peer_offer_en,
        afm_cycle1_teva_hcp_report.copay_offer_en,
        afm_cycle1_teva_hcp_report.sample_offer_en,
        afm_cycle1_teva_hcp_report.voucher_offer_en
 FROM sandbox.afm_cycle1_teva_hcp_report
 ORDER BY afm_cycle1_teva_hcp_report.npi,
          afm_cycle1_teva_hcp_report.zs_spec_desc_md,
          afm_cycle1_teva_hcp_report.specialty_name,
          afm_cycle1_teva_hcp_report.specialty_group,
          afm_cycle1_teva_hcp_report.pff_ctt_vol,
          afm_cycle1_teva_hcp_report.pff_en,
          afm_cycle1_teva_hcp_report.pff_en_quintile,
          afm_cycle1_teva_hcp_report.pff_affinity
SEGMENTED BY hash(afm_cycle1_teva_hcp_report.npi, afm_cycle1_teva_hcp_report.pff_en, afm_cycle1_teva_hcp_report.pr_en, afm_cycle1_teva_hcp_report.pi_en, afm_cycle1_teva_hcp_report.dph_en, afm_cycle1_teva_hcp_report.dpl_en, afm_cycle1_teva_hcp_report.drt_en, afm_cycle1_teva_hcp_report.pff_ctt_vol) ALL NODES;

CREATE PROJECTION sandbox.sample_table_b0 /*+basename(sample_table),createtype(L)*/ 
(
 a
)
AS
 SELECT sample_table.a
 FROM sandbox.sample_table
 ORDER BY sample_table.a
SEGMENTED BY hash(sample_table.a) ALL NODES;

CREATE PROJECTION sandbox.presr_rx_resp_07172021_b0 /*+basename(presr_rx_resp_07172021),createtype(A)*/ 
(
 ims_id,
 payer_plan_number,
 ims_client_number,
 report_frequency,
 ims_product_group,
 basket_id,
 data_date,
 date,
 sales_category,
 tvcmid,
 prescriber_first_name,
 prescriber_last_name,
 basket_name,
 basket_type,
 rollup_week,
 rollup_month,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 unnormalized_nrx_count,
 unnormalized_trx_count,
 market_name,
 payer_name,
 plan_name,
 pbm_name,
 model,
 payment_method,
 ims_specialty,
 ims_rx_type,
 ims_supplemental_data,
 ims_zip_other,
 ims_report_number_cnt,
 cnt_file_id,
 cnt_record_id,
 ims_report_number_qty,
 qty_file_id,
 qty_record_id,
 rollup_flag,
 indication,
 pbm_parent_name
)
AS
 SELECT presr_rx_resp_07172021.ims_id,
        presr_rx_resp_07172021.payer_plan_number,
        presr_rx_resp_07172021.ims_client_number,
        presr_rx_resp_07172021.report_frequency,
        presr_rx_resp_07172021.ims_product_group,
        presr_rx_resp_07172021.basket_id,
        presr_rx_resp_07172021.data_date,
        presr_rx_resp_07172021.date,
        presr_rx_resp_07172021.sales_category,
        presr_rx_resp_07172021.tvcmid,
        presr_rx_resp_07172021.prescriber_first_name,
        presr_rx_resp_07172021.prescriber_last_name,
        presr_rx_resp_07172021.basket_name,
        presr_rx_resp_07172021.basket_type,
        presr_rx_resp_07172021.rollup_week,
        presr_rx_resp_07172021.rollup_month,
        presr_rx_resp_07172021.nrx_count,
        presr_rx_resp_07172021.trx_count,
        presr_rx_resp_07172021.nrx_quantity,
        presr_rx_resp_07172021.trx_quantity,
        presr_rx_resp_07172021.unnormalized_nrx_count,
        presr_rx_resp_07172021.unnormalized_trx_count,
        presr_rx_resp_07172021.market_name,
        presr_rx_resp_07172021.payer_name,
        presr_rx_resp_07172021.plan_name,
        presr_rx_resp_07172021.pbm_name,
        presr_rx_resp_07172021.model,
        presr_rx_resp_07172021.payment_method,
        presr_rx_resp_07172021.ims_specialty,
        presr_rx_resp_07172021.ims_rx_type,
        presr_rx_resp_07172021.ims_supplemental_data,
        presr_rx_resp_07172021.ims_zip_other,
        presr_rx_resp_07172021.ims_report_number_cnt,
        presr_rx_resp_07172021.cnt_file_id,
        presr_rx_resp_07172021.cnt_record_id,
        presr_rx_resp_07172021.ims_report_number_qty,
        presr_rx_resp_07172021.qty_file_id,
        presr_rx_resp_07172021.qty_record_id,
        presr_rx_resp_07172021.rollup_flag,
        presr_rx_resp_07172021.indication,
        presr_rx_resp_07172021.pbm_parent_name
 FROM sandbox.presr_rx_resp_07172021
 ORDER BY presr_rx_resp_07172021.rollup_flag,
          presr_rx_resp_07172021.ims_rx_type,
          presr_rx_resp_07172021.report_frequency,
          presr_rx_resp_07172021.basket_type,
          presr_rx_resp_07172021.ims_client_number,
          presr_rx_resp_07172021.indication,
          presr_rx_resp_07172021.market_name,
          presr_rx_resp_07172021.ims_product_group,
          presr_rx_resp_07172021.basket_id,
          presr_rx_resp_07172021.ims_specialty,
          presr_rx_resp_07172021.ims_zip_other,
          presr_rx_resp_07172021.ims_report_number_qty,
          presr_rx_resp_07172021.ims_report_number_cnt,
          presr_rx_resp_07172021.tvcmid,
          presr_rx_resp_07172021.payment_method,
          presr_rx_resp_07172021.payer_plan_number,
          presr_rx_resp_07172021.rollup_month,
          presr_rx_resp_07172021.rollup_week,
          presr_rx_resp_07172021.nrx_quantity,
          presr_rx_resp_07172021.trx_quantity,
          presr_rx_resp_07172021.nrx_count,
          presr_rx_resp_07172021.trx_count,
          presr_rx_resp_07172021.sales_category,
          presr_rx_resp_07172021.ims_id
SEGMENTED BY hash(presr_rx_resp_07172021.ims_id) ALL NODES;

CREATE PROJECTION sandbox.sample_table1_b0 /*+basename(sample_table1),createtype(L)*/ 
(
 a
)
AS
 SELECT sample_table1.a
 FROM sandbox.sample_table1
 ORDER BY sample_table1.a
SEGMENTED BY hash(sample_table1.a) ALL NODES;

CREATE PROJECTION sandbox.has_pa_mapping_b0 /*+basename(has_pa_mapping),createtype(L)*/ 
(
 has_pa,
 pa_regex,
 notes,
 file_id,
 record_id
)
AS
 SELECT has_pa_mapping.has_pa,
        has_pa_mapping.pa_regex,
        has_pa_mapping.notes,
        has_pa_mapping.file_id,
        has_pa_mapping.record_id
 FROM sandbox.has_pa_mapping
 ORDER BY has_pa_mapping.has_pa,
          has_pa_mapping.pa_regex,
          has_pa_mapping.notes,
          has_pa_mapping.file_id,
          has_pa_mapping.record_id
SEGMENTED BY hash(has_pa_mapping.has_pa, has_pa_mapping.file_id, has_pa_mapping.record_id, has_pa_mapping.pa_regex, has_pa_mapping.notes) ALL NODES;

CREATE PROJECTION sandbox.calc_pbm_key_pbm_mapping_b0 /*+basename(calc_pbm_key_pbm_mapping),createtype(L)*/ 
(
 calculated_pbm,
 key_pbm,
 added_by,
 file_id,
 record_id
)
AS
 SELECT calc_pbm_key_pbm_mapping.calculated_pbm,
        calc_pbm_key_pbm_mapping.key_pbm,
        calc_pbm_key_pbm_mapping.added_by,
        calc_pbm_key_pbm_mapping.file_id,
        calc_pbm_key_pbm_mapping.record_id
 FROM sandbox.calc_pbm_key_pbm_mapping
 ORDER BY calc_pbm_key_pbm_mapping.calculated_pbm,
          calc_pbm_key_pbm_mapping.key_pbm,
          calc_pbm_key_pbm_mapping.added_by,
          calc_pbm_key_pbm_mapping.file_id,
          calc_pbm_key_pbm_mapping.record_id
SEGMENTED BY hash(calc_pbm_key_pbm_mapping.file_id, calc_pbm_key_pbm_mapping.record_id, calc_pbm_key_pbm_mapping.calculated_pbm, calc_pbm_key_pbm_mapping.key_pbm, calc_pbm_key_pbm_mapping.added_by) ALL NODES;

CREATE PROJECTION sandbox.calculated_pbm_config_b0 /*+basename(calculated_pbm_config),createtype(L)*/ 
(
 ftf_formulary_management_pbm_regex,
 ftf_formulary_influencer_pbm_regex,
 ftf_claims_processing_pbm_regex,
 calculated_pbm_column,
 file_id,
 record_id
)
AS
 SELECT calculated_pbm_config.ftf_formulary_management_pbm_regex,
        calculated_pbm_config.ftf_formulary_influencer_pbm_regex,
        calculated_pbm_config.ftf_claims_processing_pbm_regex,
        calculated_pbm_config.calculated_pbm_column,
        calculated_pbm_config.file_id,
        calculated_pbm_config.record_id
 FROM sandbox.calculated_pbm_config
 ORDER BY calculated_pbm_config.ftf_formulary_management_pbm_regex,
          calculated_pbm_config.ftf_formulary_influencer_pbm_regex,
          calculated_pbm_config.ftf_claims_processing_pbm_regex,
          calculated_pbm_config.calculated_pbm_column,
          calculated_pbm_config.file_id,
          calculated_pbm_config.record_id
SEGMENTED BY hash(calculated_pbm_config.file_id, calculated_pbm_config.record_id, calculated_pbm_config.ftf_formulary_management_pbm_regex, calculated_pbm_config.ftf_formulary_influencer_pbm_regex, calculated_pbm_config.ftf_claims_processing_pbm_regex, calculated_pbm_config.calculated_pbm_column) ALL NODES;

CREATE PROJECTION sandbox.key_controller_list_b0 /*+basename(key_controller_list),createtype(L)*/ 
(
 ftf_health_plan_fid,
 ftf_health_plan_name,
 key_controlling_account,
 key_controlling_plan_formulary,
 key_controlling_parent,
 payer_pbm,
 file_id,
 record_id
)
AS
 SELECT key_controller_list.ftf_health_plan_fid,
        key_controller_list.ftf_health_plan_name,
        key_controller_list.key_controlling_account,
        key_controller_list.key_controlling_plan_formulary,
        key_controller_list.key_controlling_parent,
        key_controller_list.payer_pbm,
        key_controller_list.file_id,
        key_controller_list.record_id
 FROM sandbox.key_controller_list
 ORDER BY key_controller_list.ftf_health_plan_fid,
          key_controller_list.ftf_health_plan_name,
          key_controller_list.key_controlling_account,
          key_controller_list.key_controlling_plan_formulary,
          key_controller_list.key_controlling_parent,
          key_controller_list.payer_pbm,
          key_controller_list.file_id,
          key_controller_list.record_id
SEGMENTED BY hash(key_controller_list.ftf_health_plan_fid, key_controller_list.file_id, key_controller_list.record_id, key_controller_list.key_controlling_account, key_controller_list.key_controlling_plan_formulary, key_controller_list.key_controlling_parent, key_controller_list.payer_pbm, key_controller_list.ftf_health_plan_name) ALL NODES;

CREATE PROJECTION sandbox.has_st_mapping_d1_b0 /*+basename(has_st_mapping_d1),createtype(L)*/ 
(
 has_st,
 st_regex,
 notes,
 file_id,
 record_id
)
AS
 SELECT has_st_mapping_d1.has_st,
        has_st_mapping_d1.st_regex,
        has_st_mapping_d1.notes,
        has_st_mapping_d1.file_id,
        has_st_mapping_d1.record_id
 FROM sandbox.has_st_mapping_d1
 ORDER BY has_st_mapping_d1.has_st,
          has_st_mapping_d1.st_regex,
          has_st_mapping_d1.notes,
          has_st_mapping_d1.file_id,
          has_st_mapping_d1.record_id
SEGMENTED BY hash(has_st_mapping_d1.has_st, has_st_mapping_d1.file_id, has_st_mapping_d1.record_id, has_st_mapping_d1.st_regex, has_st_mapping_d1.notes) ALL NODES;

CREATE PROJECTION sandbox.provider_override_default_b0 /*+basename(provider_override_default),createtype(L)*/ 
(
 provider_id,
 paytype_regex,
 provider_name,
 fill_in_iqvia_payer_name_if_no_bridge,
 override_best_iqvia_payer,
 fill_in_iqvia_pbm_if_no_bridge,
 override_best_iqvia_pbm,
 file_id,
 record_id
)
AS
 SELECT provider_override_default.provider_id,
        provider_override_default.paytype_regex,
        provider_override_default.provider_name,
        provider_override_default.fill_in_iqvia_payer_name_if_no_bridge,
        provider_override_default.override_best_iqvia_payer,
        provider_override_default.fill_in_iqvia_pbm_if_no_bridge,
        provider_override_default.override_best_iqvia_pbm,
        provider_override_default.file_id,
        provider_override_default.record_id
 FROM sandbox.provider_override_default
 ORDER BY provider_override_default.provider_id,
          provider_override_default.paytype_regex,
          provider_override_default.provider_name,
          provider_override_default.fill_in_iqvia_payer_name_if_no_bridge,
          provider_override_default.override_best_iqvia_payer,
          provider_override_default.fill_in_iqvia_pbm_if_no_bridge,
          provider_override_default.override_best_iqvia_pbm,
          provider_override_default.file_id
SEGMENTED BY hash(provider_override_default.file_id, provider_override_default.record_id, provider_override_default.provider_id, provider_override_default.paytype_regex, provider_override_default.provider_name, provider_override_default.fill_in_iqvia_payer_name_if_no_bridge, provider_override_default.override_best_iqvia_payer, provider_override_default.fill_in_iqvia_pbm_if_no_bridge) ALL NODES;

CREATE PROJECTION sandbox.delete_bridge_ftf_plan_types_b0 /*+basename(delete_bridge_ftf_plan_types),createtype(L)*/ 
(
 ftf_health_plan_name_regex,
 iqvia_payer_name_regex,
 iqvia_plan_name_regex,
 delete_flag,
 file_id,
 record_id
)
AS
 SELECT delete_bridge_ftf_plan_types.ftf_health_plan_name_regex,
        delete_bridge_ftf_plan_types.iqvia_payer_name_regex,
        delete_bridge_ftf_plan_types.iqvia_plan_name_regex,
        delete_bridge_ftf_plan_types.delete_flag,
        delete_bridge_ftf_plan_types.file_id,
        delete_bridge_ftf_plan_types.record_id
 FROM sandbox.delete_bridge_ftf_plan_types
 ORDER BY delete_bridge_ftf_plan_types.ftf_health_plan_name_regex,
          delete_bridge_ftf_plan_types.iqvia_payer_name_regex,
          delete_bridge_ftf_plan_types.iqvia_plan_name_regex,
          delete_bridge_ftf_plan_types.delete_flag,
          delete_bridge_ftf_plan_types.file_id,
          delete_bridge_ftf_plan_types.record_id
SEGMENTED BY hash(delete_bridge_ftf_plan_types.file_id, delete_bridge_ftf_plan_types.record_id, delete_bridge_ftf_plan_types.iqvia_payer_name_regex, delete_bridge_ftf_plan_types.delete_flag, delete_bridge_ftf_plan_types.ftf_health_plan_name_regex, delete_bridge_ftf_plan_types.iqvia_plan_name_regex) ALL NODES;

CREATE PROJECTION sandbox.override_bridge_ftf_plan_types_b0 /*+basename(override_bridge_ftf_plan_types),createtype(L)*/ 
(
 ftf_health_plan_name_regex,
 iqvia_payer_name_regex,
 iqvia_plan_name_regex,
 override_ftf_health_plan_type,
 override_precedence,
 file_id,
 record_id
)
AS
 SELECT override_bridge_ftf_plan_types.ftf_health_plan_name_regex,
        override_bridge_ftf_plan_types.iqvia_payer_name_regex,
        override_bridge_ftf_plan_types.iqvia_plan_name_regex,
        override_bridge_ftf_plan_types.override_ftf_health_plan_type,
        override_bridge_ftf_plan_types.override_precedence,
        override_bridge_ftf_plan_types.file_id,
        override_bridge_ftf_plan_types.record_id
 FROM sandbox.override_bridge_ftf_plan_types
 ORDER BY override_bridge_ftf_plan_types.ftf_health_plan_name_regex,
          override_bridge_ftf_plan_types.iqvia_payer_name_regex,
          override_bridge_ftf_plan_types.iqvia_plan_name_regex,
          override_bridge_ftf_plan_types.override_ftf_health_plan_type,
          override_bridge_ftf_plan_types.override_precedence,
          override_bridge_ftf_plan_types.file_id,
          override_bridge_ftf_plan_types.record_id
SEGMENTED BY hash(override_bridge_ftf_plan_types.override_precedence, override_bridge_ftf_plan_types.file_id, override_bridge_ftf_plan_types.record_id, override_bridge_ftf_plan_types.iqvia_payer_name_regex, override_bridge_ftf_plan_types.override_ftf_health_plan_type, override_bridge_ftf_plan_types.ftf_health_plan_name_regex, override_bridge_ftf_plan_types.iqvia_plan_name_regex) ALL NODES;

CREATE PROJECTION sandbox.unspecified_rec_restriction_b0 /*+basename(unspecified_rec_restriction),createtype(L)*/ 
(
 code,
 unspecified_restriction_flag,
 restriction_detail_id,
 notes,
 file_id,
 record_id
)
AS
 SELECT unspecified_rec_restriction.code,
        unspecified_rec_restriction.unspecified_restriction_flag,
        unspecified_rec_restriction.restriction_detail_id,
        unspecified_rec_restriction.notes,
        unspecified_rec_restriction.file_id,
        unspecified_rec_restriction.record_id
 FROM sandbox.unspecified_rec_restriction
 ORDER BY unspecified_rec_restriction.code,
          unspecified_rec_restriction.unspecified_restriction_flag,
          unspecified_rec_restriction.restriction_detail_id,
          unspecified_rec_restriction.notes,
          unspecified_rec_restriction.file_id,
          unspecified_rec_restriction.record_id
SEGMENTED BY hash(unspecified_rec_restriction.code, unspecified_rec_restriction.file_id, unspecified_rec_restriction.record_id, unspecified_rec_restriction.restriction_detail_id, unspecified_rec_restriction.unspecified_restriction_flag, unspecified_rec_restriction.notes) ALL NODES;

CREATE PROJECTION sandbox.medical_rec_restriction_b0 /*+basename(medical_rec_restriction),createtype(L)*/ 
(
 code,
 medical_records_submission_required_flag,
 restriction_detail_id,
 notes,
 file_id,
 record_id
)
AS
 SELECT medical_rec_restriction.code,
        medical_rec_restriction.medical_records_submission_required_flag,
        medical_rec_restriction.restriction_detail_id,
        medical_rec_restriction.notes,
        medical_rec_restriction.file_id,
        medical_rec_restriction.record_id
 FROM sandbox.medical_rec_restriction
 ORDER BY medical_rec_restriction.code,
          medical_rec_restriction.medical_records_submission_required_flag,
          medical_rec_restriction.restriction_detail_id,
          medical_rec_restriction.notes,
          medical_rec_restriction.file_id,
          medical_rec_restriction.record_id
SEGMENTED BY hash(medical_rec_restriction.code, medical_rec_restriction.file_id, medical_rec_restriction.record_id, medical_rec_restriction.restriction_detail_id, medical_rec_restriction.medical_records_submission_required_flag, medical_rec_restriction.notes) ALL NODES;

CREATE PROJECTION sandbox.step_restriction_b0 /*+basename(step_restriction),createtype(L)*/ 
(
 code,
 step_category,
 restriction_group,
 notes,
 file_id,
 record_id
)
AS
 SELECT step_restriction.code,
        step_restriction.step_category,
        step_restriction.restriction_group,
        step_restriction.notes,
        step_restriction.file_id,
        step_restriction.record_id
 FROM sandbox.step_restriction
 ORDER BY step_restriction.code,
          step_restriction.step_category,
          step_restriction.restriction_group,
          step_restriction.notes,
          step_restriction.file_id,
          step_restriction.record_id
SEGMENTED BY hash(step_restriction.code, step_restriction.file_id, step_restriction.record_id, step_restriction.step_category, step_restriction.restriction_group, step_restriction.notes) ALL NODES;

CREATE PROJECTION sandbox.botox_step_restriction_b0 /*+basename(botox_step_restriction),createtype(L)*/ 
(
 code,
 botox_step_flag,
 restriction_group,
 notes,
 file_id,
 record_id
)
AS
 SELECT botox_step_restriction.code,
        botox_step_restriction.botox_step_flag,
        botox_step_restriction.restriction_group,
        botox_step_restriction.notes,
        botox_step_restriction.file_id,
        botox_step_restriction.record_id
 FROM sandbox.botox_step_restriction
 ORDER BY botox_step_restriction.code,
          botox_step_restriction.botox_step_flag,
          botox_step_restriction.restriction_group,
          botox_step_restriction.notes,
          botox_step_restriction.file_id,
          botox_step_restriction.record_id
SEGMENTED BY hash(botox_step_restriction.code, botox_step_restriction.file_id, botox_step_restriction.record_id, botox_step_restriction.botox_step_flag, botox_step_restriction.restriction_group, botox_step_restriction.notes) ALL NODES;

CREATE PROJECTION sandbox.drug_assignments_b0 /*+basename(drug_assignments),createtype(L)*/ 
(
 drug_id,
 drug_seq,
 product,
 file_id,
 record_id
)
AS
 SELECT drug_assignments.drug_id,
        drug_assignments.drug_seq,
        drug_assignments.product,
        drug_assignments.file_id,
        drug_assignments.record_id
 FROM sandbox.drug_assignments
 ORDER BY drug_assignments.drug_id,
          drug_assignments.drug_seq,
          drug_assignments.product,
          drug_assignments.file_id,
          drug_assignments.record_id
SEGMENTED BY hash(drug_assignments.drug_id, drug_assignments.drug_seq, drug_assignments.file_id, drug_assignments.record_id, drug_assignments.product) ALL NODES;

CREATE PROJECTION sandbox.ftf_pbm_functions_b0 /*+basename(ftf_pbm_functions),createtype(L)*/ 
(
 pbm_function_id,
 pbm_function,
 notes,
 used,
 file_id,
 record_id
)
AS
 SELECT ftf_pbm_functions.pbm_function_id,
        ftf_pbm_functions.pbm_function,
        ftf_pbm_functions.notes,
        ftf_pbm_functions.used,
        ftf_pbm_functions.file_id,
        ftf_pbm_functions.record_id
 FROM sandbox.ftf_pbm_functions
 ORDER BY ftf_pbm_functions.pbm_function_id,
          ftf_pbm_functions.pbm_function,
          ftf_pbm_functions.notes,
          ftf_pbm_functions.used,
          ftf_pbm_functions.file_id,
          ftf_pbm_functions.record_id
SEGMENTED BY hash(ftf_pbm_functions.pbm_function_id, ftf_pbm_functions.used, ftf_pbm_functions.file_id, ftf_pbm_functions.record_id, ftf_pbm_functions.pbm_function, ftf_pbm_functions.notes) ALL NODES;

CREATE PROJECTION sandbox.ftf_override_plan_b0 /*+basename(ftf_override_plan),createtype(L)*/ 
(
 ftf_health_planid,
 paytype_index,
 notes,
 file_id,
 record_id
)
AS
 SELECT ftf_override_plan.ftf_health_planid,
        ftf_override_plan.paytype_index,
        ftf_override_plan.notes,
        ftf_override_plan.file_id,
        ftf_override_plan.record_id
 FROM sandbox.ftf_override_plan
 ORDER BY ftf_override_plan.ftf_health_planid,
          ftf_override_plan.paytype_index,
          ftf_override_plan.notes,
          ftf_override_plan.file_id,
          ftf_override_plan.record_id
SEGMENTED BY hash(ftf_override_plan.file_id, ftf_override_plan.record_id, ftf_override_plan.ftf_health_planid, ftf_override_plan.paytype_index, ftf_override_plan.notes) ALL NODES;

CREATE PROJECTION sandbox.ftf_override_provider_b0 /*+basename(ftf_override_provider),createtype(L)*/ 
(
 provider_id,
 paytype_index,
 notes,
 file_id,
 record_id
)
AS
 SELECT ftf_override_provider.provider_id,
        ftf_override_provider.paytype_index,
        ftf_override_provider.notes,
        ftf_override_provider.file_id,
        ftf_override_provider.record_id
 FROM sandbox.ftf_override_provider
 ORDER BY ftf_override_provider.provider_id,
          ftf_override_provider.paytype_index,
          ftf_override_provider.notes,
          ftf_override_provider.file_id,
          ftf_override_provider.record_id
SEGMENTED BY hash(ftf_override_provider.file_id, ftf_override_provider.record_id, ftf_override_provider.provider_id, ftf_override_provider.paytype_index, ftf_override_provider.notes) ALL NODES;

CREATE PROJECTION sandbox.ftf_paytype_paytypeindex_b0 /*+basename(ftf_paytype_paytypeindex),createtype(L)*/ 
(
 paytype_index,
 paytype,
 file_id,
 record_id
)
AS
 SELECT ftf_paytype_paytypeindex.paytype_index,
        ftf_paytype_paytypeindex.paytype,
        ftf_paytype_paytypeindex.file_id,
        ftf_paytype_paytypeindex.record_id
 FROM sandbox.ftf_paytype_paytypeindex
 ORDER BY ftf_paytype_paytypeindex.paytype_index,
          ftf_paytype_paytypeindex.paytype,
          ftf_paytype_paytypeindex.file_id,
          ftf_paytype_paytypeindex.record_id
SEGMENTED BY hash(ftf_paytype_paytypeindex.file_id, ftf_paytype_paytypeindex.record_id, ftf_paytype_paytypeindex.paytype_index, ftf_paytype_paytypeindex.paytype) ALL NODES;

CREATE PROJECTION sandbox.ftf_plans_paytypeindex_b0 /*+basename(ftf_plans_paytypeindex),createtype(L)*/ 
(
 ftf_health_plantype,
 paytype_index,
 file_id,
 record_id
)
AS
 SELECT ftf_plans_paytypeindex.ftf_health_plantype,
        ftf_plans_paytypeindex.paytype_index,
        ftf_plans_paytypeindex.file_id,
        ftf_plans_paytypeindex.record_id
 FROM sandbox.ftf_plans_paytypeindex
 ORDER BY ftf_plans_paytypeindex.ftf_health_plantype,
          ftf_plans_paytypeindex.paytype_index,
          ftf_plans_paytypeindex.file_id,
          ftf_plans_paytypeindex.record_id
SEGMENTED BY hash(ftf_plans_paytypeindex.paytype_index, ftf_plans_paytypeindex.file_id, ftf_plans_paytypeindex.record_id, ftf_plans_paytypeindex.ftf_health_plantype) ALL NODES;

CREATE PROJECTION sandbox.iqvia_plans_discard_b0 /*+basename(iqvia_plans_discard),createtype(L)*/ 
(
 payer_id,
 notes,
 file_id,
 record_id
)
AS
 SELECT iqvia_plans_discard.payer_id,
        iqvia_plans_discard.notes,
        iqvia_plans_discard.file_id,
        iqvia_plans_discard.record_id
 FROM sandbox.iqvia_plans_discard
 ORDER BY iqvia_plans_discard.payer_id,
          iqvia_plans_discard.notes,
          iqvia_plans_discard.file_id,
          iqvia_plans_discard.record_id
SEGMENTED BY hash(iqvia_plans_discard.file_id, iqvia_plans_discard.record_id, iqvia_plans_discard.payer_id, iqvia_plans_discard.notes) ALL NODES;

CREATE PROJECTION sandbox.model_paytype_map_b0 /*+basename(model_paytype_map),createtype(L)*/ 
(
 model,
 paytype,
 notes,
 file_id,
 record_id
)
AS
 SELECT model_paytype_map.model,
        model_paytype_map.paytype,
        model_paytype_map.notes,
        model_paytype_map.file_id,
        model_paytype_map.record_id
 FROM sandbox.model_paytype_map
 ORDER BY model_paytype_map.model,
          model_paytype_map.paytype,
          model_paytype_map.notes,
          model_paytype_map.file_id,
          model_paytype_map.record_id
SEGMENTED BY hash(model_paytype_map.file_id, model_paytype_map.record_id, model_paytype_map.model, model_paytype_map.paytype, model_paytype_map.notes) ALL NODES;

CREATE PROJECTION sandbox.iqvia_paytypeindex_b0 /*+basename(iqvia_paytypeindex),createtype(L)*/ 
(
 paytype_index,
 paytype,
 file_id,
 record_id
)
AS
 SELECT iqvia_paytypeindex.paytype_index,
        iqvia_paytypeindex.paytype,
        iqvia_paytypeindex.file_id,
        iqvia_paytypeindex.record_id
 FROM sandbox.iqvia_paytypeindex
 ORDER BY iqvia_paytypeindex.paytype_index,
          iqvia_paytypeindex.paytype,
          iqvia_paytypeindex.file_id,
          iqvia_paytypeindex.record_id
SEGMENTED BY hash(iqvia_paytypeindex.file_id, iqvia_paytypeindex.record_id, iqvia_paytypeindex.paytype_index, iqvia_paytypeindex.paytype) ALL NODES;

CREATE PROJECTION sandbox.iqvia_payer_paytype_override_b0 /*+basename(iqvia_payer_paytype_override),createtype(L)*/ 
(
 iqvia_payer_name,
 iqvia_plan_name_regex,
 paytype,
 file_id,
 record_id
)
AS
 SELECT iqvia_payer_paytype_override.iqvia_payer_name,
        iqvia_payer_paytype_override.iqvia_plan_name_regex,
        iqvia_payer_paytype_override.paytype,
        iqvia_payer_paytype_override.file_id,
        iqvia_payer_paytype_override.record_id
 FROM sandbox.iqvia_payer_paytype_override
 ORDER BY iqvia_payer_paytype_override.iqvia_payer_name,
          iqvia_payer_paytype_override.iqvia_plan_name_regex,
          iqvia_payer_paytype_override.paytype,
          iqvia_payer_paytype_override.file_id,
          iqvia_payer_paytype_override.record_id
SEGMENTED BY hash(iqvia_payer_paytype_override.file_id, iqvia_payer_paytype_override.record_id, iqvia_payer_paytype_override.paytype, iqvia_payer_paytype_override.iqvia_payer_name, iqvia_payer_paytype_override.iqvia_plan_name_regex) ALL NODES;

CREATE PROJECTION sandbox.patient_pa_restriction_b0 /*+basename(patient_pa_restriction),createtype(L)*/ 
(
 code,
 patient_prior_authorization_category,
 restriction_detail_id,
 notes,
 file_id,
 record_id
)
AS
 SELECT patient_pa_restriction.code,
        patient_pa_restriction.patient_prior_authorization_category,
        patient_pa_restriction.restriction_detail_id,
        patient_pa_restriction.notes,
        patient_pa_restriction.file_id,
        patient_pa_restriction.record_id
 FROM sandbox.patient_pa_restriction
 ORDER BY patient_pa_restriction.code,
          patient_pa_restriction.patient_prior_authorization_category,
          patient_pa_restriction.restriction_detail_id,
          patient_pa_restriction.notes,
          patient_pa_restriction.file_id,
          patient_pa_restriction.record_id
SEGMENTED BY hash(patient_pa_restriction.code, patient_pa_restriction.file_id, patient_pa_restriction.record_id, patient_pa_restriction.patient_prior_authorization_category, patient_pa_restriction.restriction_detail_id, patient_pa_restriction.notes) ALL NODES;

CREATE PROJECTION sandbox.pa_restriction_b0 /*+basename(pa_restriction),createtype(L)*/ 
(
 code,
 prescriber_prior_authorization_category,
 restriction_detail_id,
 notes,
 file_id,
 record_id
)
AS
 SELECT pa_restriction.code,
        pa_restriction.prescriber_prior_authorization_category,
        pa_restriction.restriction_detail_id,
        pa_restriction.notes,
        pa_restriction.file_id,
        pa_restriction.record_id
 FROM sandbox.pa_restriction
 ORDER BY pa_restriction.code,
          pa_restriction.prescriber_prior_authorization_category,
          pa_restriction.restriction_detail_id,
          pa_restriction.notes,
          pa_restriction.file_id,
          pa_restriction.record_id
SEGMENTED BY hash(pa_restriction.code, pa_restriction.file_id, pa_restriction.record_id, pa_restriction.prescriber_prior_authorization_category, pa_restriction.restriction_detail_id, pa_restriction.notes) ALL NODES;

CREATE PROJECTION sandbox.a_payer_Migrane_Market_b0 /*+basename(a_payer_Migrane_Market),createtype(A)*/ 
(
 ims_id,
 sorg_lvl,
 sorg,
 payment_method,
 pbm_name,
 payer_name,
 plan_name,
 mkt_id,
 prod_grp,
 teva_prod,
 SubGroup,
 trx_c1,
 trx_p1,
 trx_c3,
 trx_p3
)
AS
 SELECT a_payer_Migrane_Market.ims_id,
        a_payer_Migrane_Market.sorg_lvl,
        a_payer_Migrane_Market.sorg,
        a_payer_Migrane_Market.payment_method,
        a_payer_Migrane_Market.pbm_name,
        a_payer_Migrane_Market.payer_name,
        a_payer_Migrane_Market.plan_name,
        a_payer_Migrane_Market.mkt_id,
        a_payer_Migrane_Market.prod_grp,
        a_payer_Migrane_Market.teva_prod,
        a_payer_Migrane_Market.SubGroup,
        a_payer_Migrane_Market.trx_c1,
        a_payer_Migrane_Market.trx_p1,
        a_payer_Migrane_Market.trx_c3,
        a_payer_Migrane_Market.trx_p3
 FROM sandbox.a_payer_Migrane_Market
 ORDER BY a_payer_Migrane_Market.ims_id,
          a_payer_Migrane_Market.sorg_lvl,
          a_payer_Migrane_Market.sorg,
          a_payer_Migrane_Market.payment_method,
          a_payer_Migrane_Market.pbm_name,
          a_payer_Migrane_Market.payer_name,
          a_payer_Migrane_Market.plan_name,
          a_payer_Migrane_Market.mkt_id,
          a_payer_Migrane_Market.prod_grp,
          a_payer_Migrane_Market.teva_prod,
          a_payer_Migrane_Market.SubGroup
SEGMENTED BY hash(a_payer_Migrane_Market.ims_id) ALL NODES;

CREATE PROJECTION sandbox.iqvia_plan_preprocessed_b0 /*+basename(iqvia_plan_preprocessed),createtype(A)*/ 
(
 iqvia_payer_id,
 iqvia_payer_name,
 iqvia_plan_id,
 iqvia_plan_code,
 iqvia_plan_name,
 model,
 iqvia_pbm,
 paytype,
 paytype_index,
 cycle_id,
 modified_time,
 modified_by
)
AS
 SELECT iqvia_plan_preprocessed.iqvia_payer_id,
        iqvia_plan_preprocessed.iqvia_payer_name,
        iqvia_plan_preprocessed.iqvia_plan_id,
        iqvia_plan_preprocessed.iqvia_plan_code,
        iqvia_plan_preprocessed.iqvia_plan_name,
        iqvia_plan_preprocessed.model,
        iqvia_plan_preprocessed.iqvia_pbm,
        iqvia_plan_preprocessed.paytype,
        iqvia_plan_preprocessed.paytype_index,
        iqvia_plan_preprocessed.cycle_id,
        iqvia_plan_preprocessed.modified_time,
        iqvia_plan_preprocessed.modified_by
 FROM sandbox.iqvia_plan_preprocessed
 ORDER BY iqvia_plan_preprocessed.iqvia_payer_name,
          iqvia_plan_preprocessed.iqvia_plan_name
SEGMENTED BY hash(iqvia_plan_preprocessed.iqvia_payer_name) ALL NODES;

CREATE PROJECTION sandbox.a_prodgrp_a_b0 /*+basename(a_prodgrp_a),createtype(L)*/ 
(
 mkt_name,
 mkt_id,
 mkt_rpt_flag,
 bfs_name,
 bfs_id,
 brand,
 teva_prod,
 mkt_basket,
 prod_grp
)
AS
 SELECT a_prodgrp_a.mkt_name,
        a_prodgrp_a.mkt_id,
        a_prodgrp_a.mkt_rpt_flag,
        a_prodgrp_a.bfs_name,
        a_prodgrp_a.bfs_id,
        a_prodgrp_a.brand,
        a_prodgrp_a.teva_prod,
        a_prodgrp_a.mkt_basket,
        a_prodgrp_a.prod_grp
 FROM sandbox.a_prodgrp_a
 ORDER BY a_prodgrp_a.mkt_name,
          a_prodgrp_a.mkt_id,
          a_prodgrp_a.mkt_rpt_flag,
          a_prodgrp_a.bfs_name,
          a_prodgrp_a.bfs_id,
          a_prodgrp_a.brand,
          a_prodgrp_a.teva_prod,
          a_prodgrp_a.mkt_basket
SEGMENTED BY hash(a_prodgrp_a.mkt_id, a_prodgrp_a.mkt_rpt_flag, a_prodgrp_a.bfs_id, a_prodgrp_a.teva_prod, a_prodgrp_a.mkt_basket, a_prodgrp_a.brand, a_prodgrp_a.prod_grp, a_prodgrp_a.mkt_name) ALL NODES;

CREATE PROJECTION sandbox.a_prodgrp_b0 /*+basename(a_prodgrp),createtype(L)*/ 
(
 mkt_name,
 mkt_id,
 mkt_rpt_flag,
 bfs_name,
 bfs_id,
 brand,
 teva_prod,
 mkt_basket,
 prod_grp
)
AS
 SELECT a_prodgrp.mkt_name,
        a_prodgrp.mkt_id,
        a_prodgrp.mkt_rpt_flag,
        a_prodgrp.bfs_name,
        a_prodgrp.bfs_id,
        a_prodgrp.brand,
        a_prodgrp.teva_prod,
        a_prodgrp.mkt_basket,
        a_prodgrp.prod_grp
 FROM sandbox.a_prodgrp
 ORDER BY a_prodgrp.mkt_name,
          a_prodgrp.mkt_id,
          a_prodgrp.mkt_rpt_flag,
          a_prodgrp.bfs_name,
          a_prodgrp.bfs_id,
          a_prodgrp.brand,
          a_prodgrp.teva_prod,
          a_prodgrp.mkt_basket
SEGMENTED BY hash(a_prodgrp.mkt_id, a_prodgrp.mkt_rpt_flag, a_prodgrp.bfs_id, a_prodgrp.teva_prod, a_prodgrp.mkt_basket, a_prodgrp.brand, a_prodgrp.prod_grp, a_prodgrp.mkt_name) ALL NODES;

CREATE PROJECTION sandbox.a_roster_denorm_b0 /*+basename(a_roster_denorm),createtype(L)*/ 
(
 sales_force_id,
 terr,
 terr_name,
 reg,
 reg_name,
 area,
 area_name,
 nation,
 nation_name
)
AS
 SELECT a_roster_denorm.sales_force_id,
        a_roster_denorm.terr,
        a_roster_denorm.terr_name,
        a_roster_denorm.reg,
        a_roster_denorm.reg_name,
        a_roster_denorm.area,
        a_roster_denorm.area_name,
        a_roster_denorm.nation,
        a_roster_denorm.nation_name
 FROM sandbox.a_roster_denorm
 ORDER BY a_roster_denorm.sales_force_id,
          a_roster_denorm.terr,
          a_roster_denorm.terr_name,
          a_roster_denorm.reg,
          a_roster_denorm.reg_name,
          a_roster_denorm.area,
          a_roster_denorm.area_name,
          a_roster_denorm.nation
SEGMENTED BY hash(a_roster_denorm.sales_force_id, a_roster_denorm.terr, a_roster_denorm.reg, a_roster_denorm.area, a_roster_denorm.nation, a_roster_denorm.nation_name, a_roster_denorm.terr_name, a_roster_denorm.reg_name) ALL NODES;

CREATE PROJECTION sandbox.a_roster_norm_b0 /*+basename(a_roster_norm),createtype(L)*/ 
(
 sales_force_id,
 sorg_lvl,
 sorg,
 sorg_name,
 terr,
 terr_name,
 reg,
 reg_name,
 area,
 area_name,
 nation,
 nation_name
)
AS
 SELECT a_roster_norm.sales_force_id,
        a_roster_norm.sorg_lvl,
        a_roster_norm.sorg,
        a_roster_norm.sorg_name,
        a_roster_norm.terr,
        a_roster_norm.terr_name,
        a_roster_norm.reg,
        a_roster_norm.reg_name,
        a_roster_norm.area,
        a_roster_norm.area_name,
        a_roster_norm.nation,
        a_roster_norm.nation_name
 FROM sandbox.a_roster_norm
 ORDER BY a_roster_norm.sales_force_id,
          a_roster_norm.sorg_lvl,
          a_roster_norm.sorg,
          a_roster_norm.sorg_name,
          a_roster_norm.terr,
          a_roster_norm.terr_name,
          a_roster_norm.reg,
          a_roster_norm.reg_name
SEGMENTED BY hash(a_roster_norm.sales_force_id, a_roster_norm.sorg_lvl, a_roster_norm.sorg, a_roster_norm.terr, a_roster_norm.reg, a_roster_norm.area, a_roster_norm.nation, a_roster_norm.nation_name) ALL NODES;

CREATE PROJECTION sandbox.a_align_payer_rollup_b0 /*+basename(a_align_payer_rollup),createtype(A)*/ 
(
 ims_id,
 sorg_lvl,
 sorg
)
AS
 SELECT a_align_payer_rollup.ims_id,
        a_align_payer_rollup.sorg_lvl,
        a_align_payer_rollup.sorg
 FROM sandbox.a_align_payer_rollup
 ORDER BY a_align_payer_rollup.ims_id,
          a_align_payer_rollup.sorg_lvl,
          a_align_payer_rollup.sorg
SEGMENTED BY hash(a_align_payer_rollup.ims_id, a_align_payer_rollup.sorg_lvl, a_align_payer_rollup.sorg) ALL NODES;

CREATE PROJECTION sandbox.a_payer_rollup_temp_b0 /*+basename(a_payer_rollup_temp),createtype(A)*/ 
(
 ims_id,
 sorg_lvl,
 sorg,
 payment_method,
 pbm_name,
 payer_name,
 plan_name,
 mkt_id,
 prod_grp,
 teva_prod,
 SubGroup,
 trx_c1,
 trx_p1,
 trx_c3,
 trx_p3
)
AS
 SELECT a_payer_rollup_temp.ims_id,
        a_payer_rollup_temp.sorg_lvl,
        a_payer_rollup_temp.sorg,
        a_payer_rollup_temp.payment_method,
        a_payer_rollup_temp.pbm_name,
        a_payer_rollup_temp.payer_name,
        a_payer_rollup_temp.plan_name,
        a_payer_rollup_temp.mkt_id,
        a_payer_rollup_temp.prod_grp,
        a_payer_rollup_temp.teva_prod,
        a_payer_rollup_temp.SubGroup,
        a_payer_rollup_temp.trx_c1,
        a_payer_rollup_temp.trx_p1,
        a_payer_rollup_temp.trx_c3,
        a_payer_rollup_temp.trx_p3
 FROM sandbox.a_payer_rollup_temp
 ORDER BY a_payer_rollup_temp.ims_id,
          a_payer_rollup_temp.sorg_lvl,
          a_payer_rollup_temp.sorg,
          a_payer_rollup_temp.payment_method,
          a_payer_rollup_temp.pbm_name,
          a_payer_rollup_temp.payer_name,
          a_payer_rollup_temp.plan_name,
          a_payer_rollup_temp.mkt_id,
          a_payer_rollup_temp.prod_grp,
          a_payer_rollup_temp.teva_prod,
          a_payer_rollup_temp.SubGroup
SEGMENTED BY hash(a_payer_rollup_temp.ims_id) ALL NODES;

CREATE PROJECTION sandbox.a_payer_rollup_b0 /*+basename(a_payer_rollup),createtype(A)*/ 
(
 ims_id,
 sorg_lvl,
 sorg,
 payment_method,
 pbm_name,
 payer_name,
 plan_name,
 mkt_id,
 prod_grp,
 teva_prod,
 SubGroup,
 trx_c1,
 trx_p1,
 trx_c3,
 trx_p3
)
AS
 SELECT a_payer_rollup.ims_id,
        a_payer_rollup.sorg_lvl,
        a_payer_rollup.sorg,
        a_payer_rollup.payment_method,
        a_payer_rollup.pbm_name,
        a_payer_rollup.payer_name,
        a_payer_rollup.plan_name,
        a_payer_rollup.mkt_id,
        a_payer_rollup.prod_grp,
        a_payer_rollup.teva_prod,
        a_payer_rollup.SubGroup,
        a_payer_rollup.trx_c1,
        a_payer_rollup.trx_p1,
        a_payer_rollup.trx_c3,
        a_payer_rollup.trx_p3
 FROM sandbox.a_payer_rollup
 ORDER BY a_payer_rollup.ims_id,
          a_payer_rollup.sorg_lvl,
          a_payer_rollup.sorg,
          a_payer_rollup.payment_method,
          a_payer_rollup.pbm_name,
          a_payer_rollup.payer_name,
          a_payer_rollup.plan_name,
          a_payer_rollup.mkt_id,
          a_payer_rollup.prod_grp,
          a_payer_rollup.teva_prod,
          a_payer_rollup.SubGroup
SEGMENTED BY hash(a_payer_rollup.ims_id) ALL NODES;

CREATE PROJECTION sandbox.a_tmp_a_b0 /*+basename(a_tmp_a),createtype(A)*/ 
(
 sorg_lvl,
 sorg,
 payment_method,
 pbm_name,
 payer_name,
 plan_name,
 mkttrx_c3,
 mkttrx_p3,
 mkttrx_A_c3,
 mkttrx_A_p3
)
AS
 SELECT a_tmp_a.sorg_lvl,
        a_tmp_a.sorg,
        a_tmp_a.payment_method,
        a_tmp_a.pbm_name,
        a_tmp_a.payer_name,
        a_tmp_a.plan_name,
        a_tmp_a.mkttrx_c3,
        a_tmp_a.mkttrx_p3,
        a_tmp_a.mkttrx_A_c3,
        a_tmp_a.mkttrx_A_p3
 FROM sandbox.a_tmp_a
 ORDER BY a_tmp_a.sorg_lvl,
          a_tmp_a.sorg,
          a_tmp_a.payment_method,
          a_tmp_a.pbm_name,
          a_tmp_a.payer_name,
          a_tmp_a.plan_name
SEGMENTED BY hash(a_tmp_a.sorg_lvl, a_tmp_a.sorg, a_tmp_a.payment_method, a_tmp_a.pbm_name, a_tmp_a.payer_name, a_tmp_a.plan_name) ALL NODES;

CREATE PROJECTION sandbox.a_tmp_b_b0 /*+basename(a_tmp_b),createtype(A)*/ 
(
 sorg_lvl,
 sorg,
 payment_method,
 pbm_name,
 payer_name,
 plan_name,
 mkttrx_c3,
 mkttrx_p3,
 mkttrx_A_c3,
 mkttrx_A_p3,
 Total,
 RunningTotal
)
AS
 SELECT a_tmp_b.sorg_lvl,
        a_tmp_b.sorg,
        a_tmp_b.payment_method,
        a_tmp_b.pbm_name,
        a_tmp_b.payer_name,
        a_tmp_b.plan_name,
        a_tmp_b.mkttrx_c3,
        a_tmp_b.mkttrx_p3,
        a_tmp_b.mkttrx_A_c3,
        a_tmp_b.mkttrx_A_p3,
        a_tmp_b.Total,
        a_tmp_b.RunningTotal
 FROM sandbox.a_tmp_b
 ORDER BY a_tmp_b.sorg,
          a_tmp_b.mkttrx_c3
SEGMENTED BY hash(a_tmp_b.sorg) ALL NODES;

CREATE PROJECTION sandbox.a_top_plans_rollup_b0 /*+basename(a_top_plans_rollup),createtype(A)*/ 
(
 sorg_lvl,
 sorg,
 payment_method,
 pbm_name,
 payer_name,
 plan_name,
 mkttrx_c3,
 mkttrx_p3,
 mkttrx_A_c3,
 mkttrx_A_p3,
 Total,
 RunningTotal
)
AS
 SELECT a_top_plans_rollup.sorg_lvl,
        a_top_plans_rollup.sorg,
        a_top_plans_rollup.payment_method,
        a_top_plans_rollup.pbm_name,
        a_top_plans_rollup.payer_name,
        a_top_plans_rollup.plan_name,
        a_top_plans_rollup.mkttrx_c3,
        a_top_plans_rollup.mkttrx_p3,
        a_top_plans_rollup.mkttrx_A_c3,
        a_top_plans_rollup.mkttrx_A_p3,
        a_top_plans_rollup.Total,
        a_top_plans_rollup.RunningTotal
 FROM sandbox.a_top_plans_rollup
 ORDER BY a_top_plans_rollup.sorg,
          a_top_plans_rollup.mkttrx_c3
SEGMENTED BY hash(a_top_plans_rollup.sorg) ALL NODES;

CREATE PROJECTION sandbox.a_plans_by_geo_b0 /*+basename(a_plans_by_geo),createtype(A)*/ 
(
 sorg_lvl,
 sorg,
 payment_method,
 pbm_name,
 payer_name,
 plan_name,
 mkt_id,
 prod_grp,
 teva_prod,
 mkttrx_c3,
 Total,
 mkttrx_p3,
 mkttrx_A_c3,
 mkttrx_A_p3,
 trx_c1,
 trx_p1,
 trx_c3,
 trx_p3
)
AS
 SELECT a_plans_by_geo.sorg_lvl,
        a_plans_by_geo.sorg,
        a_plans_by_geo.payment_method,
        a_plans_by_geo.pbm_name,
        a_plans_by_geo.payer_name,
        a_plans_by_geo.plan_name,
        a_plans_by_geo.mkt_id,
        a_plans_by_geo.prod_grp,
        a_plans_by_geo.teva_prod,
        a_plans_by_geo.mkttrx_c3,
        a_plans_by_geo.Total,
        a_plans_by_geo.mkttrx_p3,
        a_plans_by_geo.mkttrx_A_c3,
        a_plans_by_geo.mkttrx_A_p3,
        a_plans_by_geo.trx_c1,
        a_plans_by_geo.trx_p1,
        a_plans_by_geo.trx_c3,
        a_plans_by_geo.trx_p3
 FROM sandbox.a_plans_by_geo
 ORDER BY a_plans_by_geo.sorg_lvl,
          a_plans_by_geo.sorg,
          a_plans_by_geo.payment_method,
          a_plans_by_geo.pbm_name,
          a_plans_by_geo.payer_name,
          a_plans_by_geo.plan_name,
          a_plans_by_geo.mkt_id,
          a_plans_by_geo.prod_grp,
          a_plans_by_geo.teva_prod,
          a_plans_by_geo.mkttrx_c3,
          a_plans_by_geo.Total,
          a_plans_by_geo.mkttrx_p3,
          a_plans_by_geo.mkttrx_A_c3,
          a_plans_by_geo.mkttrx_A_p3
SEGMENTED BY hash(a_plans_by_geo.sorg) ALL NODES;

CREATE PROJECTION sandbox.parent_call_id_xref_b0 /*+basename(parent_call_id_xref),createtype(A)*/ 
(
 id,
 parent_call_vod__c
)
AS
 SELECT parent_call_id_xref.id,
        parent_call_id_xref.parent_call_vod__c
 FROM sandbox.parent_call_id_xref
 ORDER BY parent_call_id_xref.id
SEGMENTED BY hash(parent_call_id_xref.id) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_adhoc_b0 /*+basename(ic_rx_adhoc),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_adhoc.ic_data_month,
        ic_rx_adhoc.basket_name,
        ic_rx_adhoc.sales_force_id,
        ic_rx_adhoc.area_number,
        ic_rx_adhoc.region_number,
        ic_rx_adhoc.territory_number,
        ic_rx_adhoc.ims_id,
        ic_rx_adhoc.tvcmid,
        ic_rx_adhoc.outlet_code,
        ic_rx_adhoc.va_station_number,
        ic_rx_adhoc.dnc_flag,
        ic_rx_adhoc.dnp_flag,
        ic_rx_adhoc.rollup_month,
        ic_rx_adhoc.month_bucket,
        ic_rx_adhoc.nrx_count,
        ic_rx_adhoc.trx_count,
        ic_rx_adhoc.nrx_quantity,
        ic_rx_adhoc.trx_quantity,
        ic_rx_adhoc.include_in_nation_rollup,
        ic_rx_adhoc.include_in_area_rollup,
        ic_rx_adhoc.include_in_region_rollup,
        ic_rx_adhoc.join_key,
        ic_rx_adhoc.row_source,
        ic_rx_adhoc.row_create_date,
        ic_rx_adhoc.indication,
        ic_rx_adhoc.outlet_dea,
        ic_rx_adhoc.payer_plan_number,
        ic_rx_adhoc.payment_method
 FROM sandbox.ic_rx_adhoc
 ORDER BY ic_rx_adhoc.ic_data_month,
          ic_rx_adhoc.basket_name,
          ic_rx_adhoc.sales_force_id,
          ic_rx_adhoc.area_number,
          ic_rx_adhoc.region_number,
          ic_rx_adhoc.territory_number,
          ic_rx_adhoc.ims_id,
          ic_rx_adhoc.tvcmid
SEGMENTED BY hash(ic_rx_adhoc.ic_data_month, ic_rx_adhoc.tvcmid, ic_rx_adhoc.outlet_code, ic_rx_adhoc.dnc_flag, ic_rx_adhoc.dnp_flag, ic_rx_adhoc.rollup_month, ic_rx_adhoc.month_bucket, ic_rx_adhoc.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_target_adhoc_b0 /*+basename(ic_target_adhoc),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 row_create_date
)
AS
 SELECT ic_target_adhoc.ic_data_month,
        ic_target_adhoc.basket_name,
        ic_target_adhoc.sales_force_id,
        ic_target_adhoc.area_number,
        ic_target_adhoc.region_number,
        ic_target_adhoc.territory_number,
        ic_target_adhoc.ims_id,
        ic_target_adhoc.tvcmid,
        ic_target_adhoc.row_create_date
 FROM sandbox.ic_target_adhoc
 ORDER BY ic_target_adhoc.ic_data_month,
          ic_target_adhoc.basket_name,
          ic_target_adhoc.sales_force_id,
          ic_target_adhoc.area_number,
          ic_target_adhoc.region_number,
          ic_target_adhoc.territory_number,
          ic_target_adhoc.ims_id,
          ic_target_adhoc.tvcmid
SEGMENTED BY hash(ic_target_adhoc.ic_data_month, ic_target_adhoc.tvcmid, ic_target_adhoc.row_create_date, ic_target_adhoc.ims_id, ic_target_adhoc.area_number, ic_target_adhoc.region_number, ic_target_adhoc.territory_number, ic_target_adhoc.sales_force_id) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_adhoc_b0 /*+basename(ic_demo_adhoc),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_adhoc.ic_data_month,
        ic_demo_adhoc.sales_force_id,
        ic_demo_adhoc.area_number,
        ic_demo_adhoc.region_number,
        ic_demo_adhoc.territory_number,
        ic_demo_adhoc.ims_id,
        ic_demo_adhoc.tvcmid,
        ic_demo_adhoc.outlet_code,
        ic_demo_adhoc.va_station_number,
        ic_demo_adhoc.specialty,
        ic_demo_adhoc.last_name,
        ic_demo_adhoc.first_name,
        ic_demo_adhoc.mid_name,
        ic_demo_adhoc.address_1,
        ic_demo_adhoc.address_2,
        ic_demo_adhoc.address_3,
        ic_demo_adhoc.city,
        ic_demo_adhoc.state,
        ic_demo_adhoc.zip,
        ic_demo_adhoc.address_source,
        ic_demo_adhoc.pdrp_flag,
        ic_demo_adhoc.pdrp_date,
        ic_demo_adhoc.np_pa_flag,
        ic_demo_adhoc.no_spend,
        ic_demo_adhoc.ama_no_contact_flag,
        ic_demo_adhoc.join_key,
        ic_demo_adhoc.row_source,
        ic_demo_adhoc.row_create_date,
        ic_demo_adhoc.outlet_dea,
        ic_demo_adhoc.secondary_specialty
 FROM sandbox.ic_demo_adhoc
 ORDER BY ic_demo_adhoc.ic_data_month,
          ic_demo_adhoc.sales_force_id,
          ic_demo_adhoc.area_number,
          ic_demo_adhoc.region_number,
          ic_demo_adhoc.territory_number,
          ic_demo_adhoc.ims_id,
          ic_demo_adhoc.tvcmid,
          ic_demo_adhoc.outlet_code
SEGMENTED BY hash(ic_demo_adhoc.ic_data_month, ic_demo_adhoc.tvcmid, ic_demo_adhoc.outlet_code, ic_demo_adhoc.mid_name, ic_demo_adhoc.state, ic_demo_adhoc.zip, ic_demo_adhoc.pdrp_flag, ic_demo_adhoc.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_factor_adhoc_b0 /*+basename(ic_rx_factor_adhoc),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 rollup_month,
 multiplier,
 approved_trx_count,
 total_trx_count
)
AS
 SELECT ic_rx_factor_adhoc.ic_data_month,
        ic_rx_factor_adhoc.basket_name,
        ic_rx_factor_adhoc.sales_force_id,
        ic_rx_factor_adhoc.rollup_month,
        ic_rx_factor_adhoc.multiplier,
        ic_rx_factor_adhoc.approved_trx_count,
        ic_rx_factor_adhoc.total_trx_count
 FROM sandbox.ic_rx_factor_adhoc
 ORDER BY ic_rx_factor_adhoc.ic_data_month,
          ic_rx_factor_adhoc.basket_name,
          ic_rx_factor_adhoc.sales_force_id,
          ic_rx_factor_adhoc.rollup_month,
          ic_rx_factor_adhoc.multiplier,
          ic_rx_factor_adhoc.approved_trx_count,
          ic_rx_factor_adhoc.total_trx_count
SEGMENTED BY hash(ic_rx_factor_adhoc.ic_data_month, ic_rx_factor_adhoc.rollup_month, ic_rx_factor_adhoc.multiplier, ic_rx_factor_adhoc.approved_trx_count, ic_rx_factor_adhoc.total_trx_count, ic_rx_factor_adhoc.sales_force_id, ic_rx_factor_adhoc.basket_name) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_jul2021_b0 /*+basename(ic_rx_jul2021),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_jul2021.ic_data_month,
        ic_rx_jul2021.basket_name,
        ic_rx_jul2021.sales_force_id,
        ic_rx_jul2021.area_number,
        ic_rx_jul2021.region_number,
        ic_rx_jul2021.territory_number,
        ic_rx_jul2021.ims_id,
        ic_rx_jul2021.tvcmid,
        ic_rx_jul2021.outlet_code,
        ic_rx_jul2021.va_station_number,
        ic_rx_jul2021.dnc_flag,
        ic_rx_jul2021.dnp_flag,
        ic_rx_jul2021.rollup_month,
        ic_rx_jul2021.month_bucket,
        ic_rx_jul2021.nrx_count,
        ic_rx_jul2021.trx_count,
        ic_rx_jul2021.nrx_quantity,
        ic_rx_jul2021.trx_quantity,
        ic_rx_jul2021.include_in_nation_rollup,
        ic_rx_jul2021.include_in_area_rollup,
        ic_rx_jul2021.include_in_region_rollup,
        ic_rx_jul2021.join_key,
        ic_rx_jul2021.row_source,
        ic_rx_jul2021.row_create_date,
        ic_rx_jul2021.indication,
        ic_rx_jul2021.outlet_dea,
        ic_rx_jul2021.payer_plan_number,
        ic_rx_jul2021.payment_method
 FROM sandbox.ic_rx_jul2021
 ORDER BY ic_rx_jul2021.ic_data_month,
          ic_rx_jul2021.basket_name,
          ic_rx_jul2021.sales_force_id,
          ic_rx_jul2021.area_number,
          ic_rx_jul2021.region_number,
          ic_rx_jul2021.territory_number,
          ic_rx_jul2021.ims_id,
          ic_rx_jul2021.tvcmid
SEGMENTED BY hash(ic_rx_jul2021.ic_data_month, ic_rx_jul2021.tvcmid, ic_rx_jul2021.outlet_code, ic_rx_jul2021.dnc_flag, ic_rx_jul2021.dnp_flag, ic_rx_jul2021.rollup_month, ic_rx_jul2021.month_bucket, ic_rx_jul2021.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_jul2021_b0 /*+basename(ic_demo_jul2021),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_jul2021.ic_data_month,
        ic_demo_jul2021.sales_force_id,
        ic_demo_jul2021.area_number,
        ic_demo_jul2021.region_number,
        ic_demo_jul2021.territory_number,
        ic_demo_jul2021.ims_id,
        ic_demo_jul2021.tvcmid,
        ic_demo_jul2021.outlet_code,
        ic_demo_jul2021.va_station_number,
        ic_demo_jul2021.specialty,
        ic_demo_jul2021.last_name,
        ic_demo_jul2021.first_name,
        ic_demo_jul2021.mid_name,
        ic_demo_jul2021.address_1,
        ic_demo_jul2021.address_2,
        ic_demo_jul2021.address_3,
        ic_demo_jul2021.city,
        ic_demo_jul2021.state,
        ic_demo_jul2021.zip,
        ic_demo_jul2021.address_source,
        ic_demo_jul2021.pdrp_flag,
        ic_demo_jul2021.pdrp_date,
        ic_demo_jul2021.np_pa_flag,
        ic_demo_jul2021.no_spend,
        ic_demo_jul2021.ama_no_contact_flag,
        ic_demo_jul2021.join_key,
        ic_demo_jul2021.row_source,
        ic_demo_jul2021.row_create_date,
        ic_demo_jul2021.outlet_dea,
        ic_demo_jul2021.secondary_specialty
 FROM sandbox.ic_demo_jul2021
 ORDER BY ic_demo_jul2021.ic_data_month,
          ic_demo_jul2021.sales_force_id,
          ic_demo_jul2021.area_number,
          ic_demo_jul2021.region_number,
          ic_demo_jul2021.territory_number,
          ic_demo_jul2021.ims_id,
          ic_demo_jul2021.tvcmid,
          ic_demo_jul2021.outlet_code
SEGMENTED BY hash(ic_demo_jul2021.ic_data_month, ic_demo_jul2021.tvcmid, ic_demo_jul2021.outlet_code, ic_demo_jul2021.mid_name, ic_demo_jul2021.state, ic_demo_jul2021.zip, ic_demo_jul2021.pdrp_flag, ic_demo_jul2021.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_aug2021_b0 /*+basename(ic_rx_aug2021),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_aug2021.ic_data_month,
        ic_rx_aug2021.basket_name,
        ic_rx_aug2021.sales_force_id,
        ic_rx_aug2021.area_number,
        ic_rx_aug2021.region_number,
        ic_rx_aug2021.territory_number,
        ic_rx_aug2021.ims_id,
        ic_rx_aug2021.tvcmid,
        ic_rx_aug2021.outlet_code,
        ic_rx_aug2021.va_station_number,
        ic_rx_aug2021.dnc_flag,
        ic_rx_aug2021.dnp_flag,
        ic_rx_aug2021.rollup_month,
        ic_rx_aug2021.month_bucket,
        ic_rx_aug2021.nrx_count,
        ic_rx_aug2021.trx_count,
        ic_rx_aug2021.nrx_quantity,
        ic_rx_aug2021.trx_quantity,
        ic_rx_aug2021.include_in_nation_rollup,
        ic_rx_aug2021.include_in_area_rollup,
        ic_rx_aug2021.include_in_region_rollup,
        ic_rx_aug2021.join_key,
        ic_rx_aug2021.row_source,
        ic_rx_aug2021.row_create_date,
        ic_rx_aug2021.indication,
        ic_rx_aug2021.outlet_dea,
        ic_rx_aug2021.payer_plan_number,
        ic_rx_aug2021.payment_method
 FROM sandbox.ic_rx_aug2021
 ORDER BY ic_rx_aug2021.ic_data_month,
          ic_rx_aug2021.basket_name,
          ic_rx_aug2021.sales_force_id,
          ic_rx_aug2021.area_number,
          ic_rx_aug2021.region_number,
          ic_rx_aug2021.territory_number,
          ic_rx_aug2021.ims_id,
          ic_rx_aug2021.tvcmid
SEGMENTED BY hash(ic_rx_aug2021.ic_data_month, ic_rx_aug2021.tvcmid, ic_rx_aug2021.outlet_code, ic_rx_aug2021.dnc_flag, ic_rx_aug2021.dnp_flag, ic_rx_aug2021.rollup_month, ic_rx_aug2021.month_bucket, ic_rx_aug2021.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_aug2021_b0 /*+basename(ic_demo_aug2021),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_aug2021.ic_data_month,
        ic_demo_aug2021.sales_force_id,
        ic_demo_aug2021.area_number,
        ic_demo_aug2021.region_number,
        ic_demo_aug2021.territory_number,
        ic_demo_aug2021.ims_id,
        ic_demo_aug2021.tvcmid,
        ic_demo_aug2021.outlet_code,
        ic_demo_aug2021.va_station_number,
        ic_demo_aug2021.specialty,
        ic_demo_aug2021.last_name,
        ic_demo_aug2021.first_name,
        ic_demo_aug2021.mid_name,
        ic_demo_aug2021.address_1,
        ic_demo_aug2021.address_2,
        ic_demo_aug2021.address_3,
        ic_demo_aug2021.city,
        ic_demo_aug2021.state,
        ic_demo_aug2021.zip,
        ic_demo_aug2021.address_source,
        ic_demo_aug2021.pdrp_flag,
        ic_demo_aug2021.pdrp_date,
        ic_demo_aug2021.np_pa_flag,
        ic_demo_aug2021.no_spend,
        ic_demo_aug2021.ama_no_contact_flag,
        ic_demo_aug2021.join_key,
        ic_demo_aug2021.row_source,
        ic_demo_aug2021.row_create_date,
        ic_demo_aug2021.outlet_dea,
        ic_demo_aug2021.secondary_specialty
 FROM sandbox.ic_demo_aug2021
 ORDER BY ic_demo_aug2021.ic_data_month,
          ic_demo_aug2021.sales_force_id,
          ic_demo_aug2021.area_number,
          ic_demo_aug2021.region_number,
          ic_demo_aug2021.territory_number,
          ic_demo_aug2021.ims_id,
          ic_demo_aug2021.tvcmid,
          ic_demo_aug2021.outlet_code
SEGMENTED BY hash(ic_demo_aug2021.ic_data_month, ic_demo_aug2021.tvcmid, ic_demo_aug2021.outlet_code, ic_demo_aug2021.mid_name, ic_demo_aug2021.state, ic_demo_aug2021.zip, ic_demo_aug2021.pdrp_flag, ic_demo_aug2021.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.suggestions_targets_b0 /*+basename(suggestions_targets),createtype(A)*/ 
(
 veeva_account_id,
 tvcmid,
 territory_number,
 employee_id,
 product
)
AS
 SELECT suggestions_targets.veeva_account_id,
        suggestions_targets.tvcmid,
        suggestions_targets.territory_number,
        suggestions_targets.employee_id,
        suggestions_targets.product
 FROM sandbox.suggestions_targets
 ORDER BY suggestions_targets.veeva_account_id,
          suggestions_targets.tvcmid,
          suggestions_targets.territory_number,
          suggestions_targets.employee_id,
          suggestions_targets.product
SEGMENTED BY hash(suggestions_targets.territory_number) ALL NODES;

CREATE PROJECTION sandbox.relay_health_dc_b0 /*+basename(relay_health_dc),createtype(L)*/ 
(
 DRUG_TRADE_NAME,
 NDC,
 PAID_OR_REVERSED,
 STATE,
 QUANTITY,
 DAYS_SUPPLY,
 FILL_NUMBER,
 FILL_TYPE,
 DATE_OF_SERVICE,
 DATE_PROCESSED,
 PATIENT_PAY_AMT,
 DENIAL_VOUCHER_AMOUNT,
 TOTAL_ADMIN_FEES,
 TOTAL_DUE,
 TRANSACTION_ID
)
AS
 SELECT relay_health_dc.DRUG_TRADE_NAME,
        relay_health_dc.NDC,
        relay_health_dc.PAID_OR_REVERSED,
        relay_health_dc.STATE,
        relay_health_dc.QUANTITY,
        relay_health_dc.DAYS_SUPPLY,
        relay_health_dc.FILL_NUMBER,
        relay_health_dc.FILL_TYPE,
        relay_health_dc.DATE_OF_SERVICE,
        relay_health_dc.DATE_PROCESSED,
        relay_health_dc.PATIENT_PAY_AMT,
        relay_health_dc.DENIAL_VOUCHER_AMOUNT,
        relay_health_dc.TOTAL_ADMIN_FEES,
        relay_health_dc.TOTAL_DUE,
        relay_health_dc.TRANSACTION_ID
 FROM sandbox.relay_health_dc
 ORDER BY relay_health_dc.DRUG_TRADE_NAME,
          relay_health_dc.NDC,
          relay_health_dc.PAID_OR_REVERSED,
          relay_health_dc.STATE,
          relay_health_dc.QUANTITY,
          relay_health_dc.DAYS_SUPPLY,
          relay_health_dc.FILL_NUMBER,
          relay_health_dc.FILL_TYPE
SEGMENTED BY hash(relay_health_dc.FILL_NUMBER, relay_health_dc.DATE_OF_SERVICE, relay_health_dc.DATE_PROCESSED, relay_health_dc.QUANTITY, relay_health_dc.PATIENT_PAY_AMT, relay_health_dc.DENIAL_VOUCHER_AMOUNT, relay_health_dc.TOTAL_ADMIN_FEES, relay_health_dc.TOTAL_DUE) ALL NODES;

CREATE PROJECTION sandbox.RELAY_HEALTH_EVOUCHER_b0 /*+basename(RELAY_HEALTH_EVOUCHER),createtype(L)*/ 
(
 RPT_BRAND_NAME,
 NDC,
 FDB_LABEL_NAME,
 REPORT_MONTH,
 FILL_NUMBER,
 FILL_TYPE,
 CLAIM_STATUS,
 PHARMACY_STATE_NAME,
 EVOUCHER_STATUS_DESC,
 COPAY_RANGE_DISPLAY_ORDER,
 COPAY_RANGE,
 DAYS_SUPPLY,
 QTY_DISPENSED,
 ORIGINAL_COPAY,
 EVOUCHER_AMOUNT,
 NEW_COPAY,
 PATIENT_STATUS,
 PHARMACY_STATE_TYPE,
 PATIENT_AGE_RANGE,
 STARTER_BENEFIT_IND,
 PPE_TRAN_ID,
 PHARMACY_ZIPSEC,
 BRD_ISSUE_FLAG
)
AS
 SELECT RELAY_HEALTH_EVOUCHER.RPT_BRAND_NAME,
        RELAY_HEALTH_EVOUCHER.NDC,
        RELAY_HEALTH_EVOUCHER.FDB_LABEL_NAME,
        RELAY_HEALTH_EVOUCHER.REPORT_MONTH,
        RELAY_HEALTH_EVOUCHER.FILL_NUMBER,
        RELAY_HEALTH_EVOUCHER.FILL_TYPE,
        RELAY_HEALTH_EVOUCHER.CLAIM_STATUS,
        RELAY_HEALTH_EVOUCHER.PHARMACY_STATE_NAME,
        RELAY_HEALTH_EVOUCHER.EVOUCHER_STATUS_DESC,
        RELAY_HEALTH_EVOUCHER.COPAY_RANGE_DISPLAY_ORDER,
        RELAY_HEALTH_EVOUCHER.COPAY_RANGE,
        RELAY_HEALTH_EVOUCHER.DAYS_SUPPLY,
        RELAY_HEALTH_EVOUCHER.QTY_DISPENSED,
        RELAY_HEALTH_EVOUCHER.ORIGINAL_COPAY,
        RELAY_HEALTH_EVOUCHER.EVOUCHER_AMOUNT,
        RELAY_HEALTH_EVOUCHER.NEW_COPAY,
        RELAY_HEALTH_EVOUCHER.PATIENT_STATUS,
        RELAY_HEALTH_EVOUCHER.PHARMACY_STATE_TYPE,
        RELAY_HEALTH_EVOUCHER.PATIENT_AGE_RANGE,
        RELAY_HEALTH_EVOUCHER.STARTER_BENEFIT_IND,
        RELAY_HEALTH_EVOUCHER.PPE_TRAN_ID,
        RELAY_HEALTH_EVOUCHER.PHARMACY_ZIPSEC,
        RELAY_HEALTH_EVOUCHER.BRD_ISSUE_FLAG
 FROM sandbox.RELAY_HEALTH_EVOUCHER
 ORDER BY RELAY_HEALTH_EVOUCHER.RPT_BRAND_NAME,
          RELAY_HEALTH_EVOUCHER.NDC,
          RELAY_HEALTH_EVOUCHER.FDB_LABEL_NAME,
          RELAY_HEALTH_EVOUCHER.REPORT_MONTH,
          RELAY_HEALTH_EVOUCHER.FILL_NUMBER,
          RELAY_HEALTH_EVOUCHER.FILL_TYPE,
          RELAY_HEALTH_EVOUCHER.CLAIM_STATUS,
          RELAY_HEALTH_EVOUCHER.PHARMACY_STATE_NAME
SEGMENTED BY hash(RELAY_HEALTH_EVOUCHER.REPORT_MONTH, RELAY_HEALTH_EVOUCHER.FILL_NUMBER, RELAY_HEALTH_EVOUCHER.COPAY_RANGE_DISPLAY_ORDER, RELAY_HEALTH_EVOUCHER.DAYS_SUPPLY, RELAY_HEALTH_EVOUCHER.QTY_DISPENSED, RELAY_HEALTH_EVOUCHER.ORIGINAL_COPAY, RELAY_HEALTH_EVOUCHER.EVOUCHER_AMOUNT, RELAY_HEALTH_EVOUCHER.NEW_COPAY) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_sep2021_b0 /*+basename(ic_rx_sep2021),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_sep2021.ic_data_month,
        ic_rx_sep2021.basket_name,
        ic_rx_sep2021.sales_force_id,
        ic_rx_sep2021.area_number,
        ic_rx_sep2021.region_number,
        ic_rx_sep2021.territory_number,
        ic_rx_sep2021.ims_id,
        ic_rx_sep2021.tvcmid,
        ic_rx_sep2021.outlet_code,
        ic_rx_sep2021.va_station_number,
        ic_rx_sep2021.dnc_flag,
        ic_rx_sep2021.dnp_flag,
        ic_rx_sep2021.rollup_month,
        ic_rx_sep2021.month_bucket,
        ic_rx_sep2021.nrx_count,
        ic_rx_sep2021.trx_count,
        ic_rx_sep2021.nrx_quantity,
        ic_rx_sep2021.trx_quantity,
        ic_rx_sep2021.include_in_nation_rollup,
        ic_rx_sep2021.include_in_area_rollup,
        ic_rx_sep2021.include_in_region_rollup,
        ic_rx_sep2021.join_key,
        ic_rx_sep2021.row_source,
        ic_rx_sep2021.row_create_date,
        ic_rx_sep2021.indication,
        ic_rx_sep2021.outlet_dea,
        ic_rx_sep2021.payer_plan_number,
        ic_rx_sep2021.payment_method
 FROM sandbox.ic_rx_sep2021
 ORDER BY ic_rx_sep2021.ic_data_month,
          ic_rx_sep2021.basket_name,
          ic_rx_sep2021.sales_force_id,
          ic_rx_sep2021.area_number,
          ic_rx_sep2021.region_number,
          ic_rx_sep2021.territory_number,
          ic_rx_sep2021.ims_id,
          ic_rx_sep2021.tvcmid
SEGMENTED BY hash(ic_rx_sep2021.ic_data_month, ic_rx_sep2021.tvcmid, ic_rx_sep2021.outlet_code, ic_rx_sep2021.dnc_flag, ic_rx_sep2021.dnp_flag, ic_rx_sep2021.rollup_month, ic_rx_sep2021.month_bucket, ic_rx_sep2021.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_sep2021_b0 /*+basename(ic_demo_sep2021),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_sep2021.ic_data_month,
        ic_demo_sep2021.sales_force_id,
        ic_demo_sep2021.area_number,
        ic_demo_sep2021.region_number,
        ic_demo_sep2021.territory_number,
        ic_demo_sep2021.ims_id,
        ic_demo_sep2021.tvcmid,
        ic_demo_sep2021.outlet_code,
        ic_demo_sep2021.va_station_number,
        ic_demo_sep2021.specialty,
        ic_demo_sep2021.last_name,
        ic_demo_sep2021.first_name,
        ic_demo_sep2021.mid_name,
        ic_demo_sep2021.address_1,
        ic_demo_sep2021.address_2,
        ic_demo_sep2021.address_3,
        ic_demo_sep2021.city,
        ic_demo_sep2021.state,
        ic_demo_sep2021.zip,
        ic_demo_sep2021.address_source,
        ic_demo_sep2021.pdrp_flag,
        ic_demo_sep2021.pdrp_date,
        ic_demo_sep2021.np_pa_flag,
        ic_demo_sep2021.no_spend,
        ic_demo_sep2021.ama_no_contact_flag,
        ic_demo_sep2021.join_key,
        ic_demo_sep2021.row_source,
        ic_demo_sep2021.row_create_date,
        ic_demo_sep2021.outlet_dea,
        ic_demo_sep2021.secondary_specialty
 FROM sandbox.ic_demo_sep2021
 ORDER BY ic_demo_sep2021.ic_data_month,
          ic_demo_sep2021.sales_force_id,
          ic_demo_sep2021.area_number,
          ic_demo_sep2021.region_number,
          ic_demo_sep2021.territory_number,
          ic_demo_sep2021.ims_id,
          ic_demo_sep2021.tvcmid,
          ic_demo_sep2021.outlet_code
SEGMENTED BY hash(ic_demo_sep2021.ic_data_month, ic_demo_sep2021.tvcmid, ic_demo_sep2021.outlet_code, ic_demo_sep2021.mid_name, ic_demo_sep2021.state, ic_demo_sep2021.zip, ic_demo_sep2021.pdrp_flag, ic_demo_sep2021.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.view2_psd_b0 /*+basename(view2_psd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 EVoucher_Card,
 CRx_Copay_Covered,
 Crx_PA_NDC_Block,
 Denail_Conversion_CofC,
 run_date
)
AS
 SELECT view2_psd.product_name,
        view2_psd.month_year,
        view2_psd.mnth_dt,
        view2_psd.EVoucher_Card,
        view2_psd.CRx_Copay_Covered,
        view2_psd.Crx_PA_NDC_Block,
        view2_psd.Denail_Conversion_CofC,
        view2_psd.run_date
 FROM sandbox.view2_psd
 ORDER BY view2_psd.product_name,
          view2_psd.month_year,
          view2_psd.mnth_dt,
          view2_psd.EVoucher_Card,
          view2_psd.CRx_Copay_Covered,
          view2_psd.Crx_PA_NDC_Block,
          view2_psd.Denail_Conversion_CofC,
          view2_psd.run_date
SEGMENTED BY hash(view2_psd.product_name, view2_psd.mnth_dt, view2_psd.EVoucher_Card, view2_psd.CRx_Copay_Covered, view2_psd.Crx_PA_NDC_Block, view2_psd.Denail_Conversion_CofC, view2_psd.run_date, view2_psd.month_year) ALL NODES;

CREATE PROJECTION sandbox.view3_psd_b0 /*+basename(view3_psd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 Product_Not_Covered,
 PA_or_Step,
 CRx_Other,
 Percent_Demand,
 run_date
)
AS
 SELECT view3_psd.product_name,
        view3_psd.month_year,
        view3_psd.mnth_dt,
        view3_psd.Product_Not_Covered,
        view3_psd.PA_or_Step,
        view3_psd.CRx_Other,
        view3_psd.Percent_Demand,
        view3_psd.run_date
 FROM sandbox.view3_psd
 ORDER BY view3_psd.product_name,
          view3_psd.month_year,
          view3_psd.mnth_dt,
          view3_psd.Product_Not_Covered,
          view3_psd.PA_or_Step,
          view3_psd.CRx_Other,
          view3_psd.Percent_Demand,
          view3_psd.run_date
SEGMENTED BY hash(view3_psd.product_name, view3_psd.mnth_dt, view3_psd.PA_or_Step, view3_psd.CRx_Other, view3_psd.run_date, view3_psd.Product_Not_Covered, view3_psd.Percent_Demand, view3_psd.month_year) ALL NODES;

CREATE PROJECTION sandbox.view4_1_psd_b0 /*+basename(view4_1_psd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 PFS_Covered,
 AI_Covered,
 Percent_PFS_Covered,
 Percent_AI_Covered,
 run_date
)
AS
 SELECT view4_1_psd.product_name,
        view4_1_psd.month_year,
        view4_1_psd.mnth_dt,
        view4_1_psd.PFS_Covered,
        view4_1_psd.AI_Covered,
        view4_1_psd.Percent_PFS_Covered,
        view4_1_psd.Percent_AI_Covered,
        view4_1_psd.run_date
 FROM sandbox.view4_1_psd
 ORDER BY view4_1_psd.product_name,
          view4_1_psd.month_year,
          view4_1_psd.mnth_dt
SEGMENTED BY hash(view4_1_psd.product_name, view4_1_psd.mnth_dt, view4_1_psd.PFS_Covered, view4_1_psd.AI_Covered, view4_1_psd.run_date, view4_1_psd.Percent_PFS_Covered, view4_1_psd.Percent_AI_Covered, view4_1_psd.month_year) ALL NODES;

CREATE PROJECTION sandbox.view4_2_psd_b0 /*+basename(view4_2_psd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 PFS_Full_WAC_Buy_Down,
 AI_Full_WAC_Buy_Down,
 Percent_PFS_Full_WAC_Buy_Down,
 Percent_AI_Full_WAC_Buy_Down,
 run_date
)
AS
 SELECT view4_2_psd.product_name,
        view4_2_psd.month_year,
        view4_2_psd.mnth_dt,
        view4_2_psd.PFS_Full_WAC_Buy_Down,
        view4_2_psd.AI_Full_WAC_Buy_Down,
        view4_2_psd.Percent_PFS_Full_WAC_Buy_Down,
        view4_2_psd.Percent_AI_Full_WAC_Buy_Down,
        view4_2_psd.run_date
 FROM sandbox.view4_2_psd
 ORDER BY view4_2_psd.product_name,
          view4_2_psd.month_year,
          view4_2_psd.mnth_dt
SEGMENTED BY hash(view4_2_psd.product_name, view4_2_psd.mnth_dt, view4_2_psd.PFS_Full_WAC_Buy_Down, view4_2_psd.AI_Full_WAC_Buy_Down, view4_2_psd.run_date, view4_2_psd.Percent_PFS_Full_WAC_Buy_Down, view4_2_psd.Percent_AI_Full_WAC_Buy_Down, view4_2_psd.month_year) ALL NODES;

CREATE PROJECTION sandbox.view5_psd_b0 /*+basename(view5_psd),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 Average_Buy_Down_Covered_Units,
 Average_Full_WAC_BuyDown_Units,
 run_date
)
AS
 SELECT view5_psd.product_name,
        view5_psd.month_year,
        view5_psd.mnth_dt,
        view5_psd.Average_Buy_Down_Covered_Units,
        view5_psd.Average_Full_WAC_BuyDown_Units,
        view5_psd.run_date
 FROM sandbox.view5_psd
 ORDER BY view5_psd.product_name,
          view5_psd.month_year,
          view5_psd.mnth_dt,
          view5_psd.Average_Buy_Down_Covered_Units,
          view5_psd.Average_Full_WAC_BuyDown_Units,
          view5_psd.run_date
SEGMENTED BY hash(view5_psd.product_name, view5_psd.mnth_dt, view5_psd.run_date, view5_psd.Average_Buy_Down_Covered_Units, view5_psd.Average_Full_WAC_BuyDown_Units, view5_psd.month_year) ALL NODES;

CREATE PROJECTION sandbox.speaker_program_attendee_b0 /*+basename(speaker_program_attendee),createtype(L)*/ 
(
 Master_ID,
 Participant_Name,
 Program_ID,
 Program_Topic,
 Program_Product,
 Program_Start_Date,
 Role,
 Did_Attend,
 Participant_Address,
 Participant_City,
 Participant_State
)
AS
 SELECT speaker_program_attendee.Master_ID,
        speaker_program_attendee.Participant_Name,
        speaker_program_attendee.Program_ID,
        speaker_program_attendee.Program_Topic,
        speaker_program_attendee.Program_Product,
        speaker_program_attendee.Program_Start_Date,
        speaker_program_attendee.Role,
        speaker_program_attendee.Did_Attend,
        speaker_program_attendee.Participant_Address,
        speaker_program_attendee.Participant_City,
        speaker_program_attendee.Participant_State
 FROM sandbox.speaker_program_attendee
 ORDER BY speaker_program_attendee.Master_ID,
          speaker_program_attendee.Participant_Name,
          speaker_program_attendee.Program_ID,
          speaker_program_attendee.Program_Topic,
          speaker_program_attendee.Program_Product,
          speaker_program_attendee.Program_Start_Date,
          speaker_program_attendee.Role,
          speaker_program_attendee.Did_Attend
SEGMENTED BY hash(speaker_program_attendee.Program_Start_Date, speaker_program_attendee.Master_ID, speaker_program_attendee.Participant_Name, speaker_program_attendee.Program_ID, speaker_program_attendee.Program_Product, speaker_program_attendee.Role, speaker_program_attendee.Did_Attend, speaker_program_attendee.Participant_Address) ALL NODES;

CREATE PROJECTION sandbox.speaker_program_non_reportable_b0 /*+basename(speaker_program_non_reportable),createtype(L)*/ 
(
 Program_Code,
 Program_Date,
 Product,
 Non_Reportable_HCP
)
AS
 SELECT speaker_program_non_reportable.Program_Code,
        speaker_program_non_reportable.Program_Date,
        speaker_program_non_reportable.Product,
        speaker_program_non_reportable.Non_Reportable_HCP
 FROM sandbox.speaker_program_non_reportable
 ORDER BY speaker_program_non_reportable.Program_Code,
          speaker_program_non_reportable.Program_Date,
          speaker_program_non_reportable.Product,
          speaker_program_non_reportable.Non_Reportable_HCP
SEGMENTED BY hash(speaker_program_non_reportable.Program_Date, speaker_program_non_reportable.Program_Code, speaker_program_non_reportable.Product, speaker_program_non_reportable.Non_Reportable_HCP) ALL NODES;

CREATE PROJECTION sandbox.speaker_program_data_b0 /*+basename(speaker_program_data),createtype(L)*/ 
(
 Client,
 Brand,
 Project,
 Service_Type,
 Program_Type,
 Meeting_Code,
 Meeting_Topic,
 Bf_Ln_Dn,
 Meeting_Status,
 Meeting_Status_2,
 Financial_Status,
 Meeting_Review_Status,
 Meeting_Date,
 Request_Date,
 Speaker_PT_wo_Honoraria,
 Honoraria,
 A_V,
 F_B,
 Venue_PT,
 Unmet_Chgs,
 Other_PT,
 Actual_PT,
 Actual_MF,
 Actual_PT_MF,
 Adl_Cmtd_PT,
 Adl_Cmtd_MF,
 Adl_Cmtd_PT_MF,
 Total_Cmtd_PT,
 Total_Cmtd_MF,
 Total_Spend,
 Venue_Name,
 Venue_PP_Id,
 Venue_Zip,
 Venue_State,
 Venue_City,
 Meeting_Year,
 Meeting_Qtr,
 Meeting_Month,
 Request_Month,
 Lead_Time_Days,
 Lead_Time_Grouped,
 New_Lead_Time_Grouped,
 Lead_Time_Weeks,
 Cancellation_Reason,
 Cancellation_Date,
 Meeting_Date_and_Time,
 Est_Participants,
 Host_Name,
 Territory,
 Num_of_Speakers,
 Meeting_ID,
 Total_RSVP_Role_Attendee_RSVP_Status_Yes,
 Total_Attendance_Participant_Role_Attendee,
 Att_Specialty_Allergy,
 Attendance_grtr_0,
 Centris_Meeting_Status,
 Placeholder_Profiles,
 Non_Profiled,
 Is_placeholder_Counts_NonProfiled_Counts,
 Product,
 Budget_Name,
 Budget,
 LocationType,
 Type_of_Speaker_Used,
 ClientEventType,
 Speaker_1,
 Speaker_1_status,
 Speaker_1_Master_ID,
 Speaker_1_Tier,
 Speaker_2,
 Speaker_2_status,
 Speaker_2_Master_ID,
 Speaker_2_Tier,
 Speaker_3,
 Speaker_3_status,
 Speaker_3_Master_ID,
 Speaker_3_Tier,
 Speaker_4,
 Speaker_4_status,
 Speaker_4_Master_ID,
 Speaker_4_Tier,
 Date_Changes,
 Speaker_Changes,
 Venue_Changes,
 Meetings_with_Changes,
 Setup_Complete_Date,
 Speaker_1_pp_id,
 Speaker_2_pp_id,
 Speaker_3_pp_id,
 Speaker_4_pp_id,
 Business_Days_to_SUC,
 Area,
 Region,
 Total_Honoraria_Centris_Estimate,
 Cancellation_Date_Time,
 Programs_Submitted,
 Cancelled,
 Display
)
AS
 SELECT speaker_program_data.Client,
        speaker_program_data.Brand,
        speaker_program_data.Project,
        speaker_program_data.Service_Type,
        speaker_program_data.Program_Type,
        speaker_program_data.Meeting_Code,
        speaker_program_data.Meeting_Topic,
        speaker_program_data.Bf_Ln_Dn,
        speaker_program_data.Meeting_Status,
        speaker_program_data.Meeting_Status_2,
        speaker_program_data.Financial_Status,
        speaker_program_data.Meeting_Review_Status,
        speaker_program_data.Meeting_Date,
        speaker_program_data.Request_Date,
        speaker_program_data.Speaker_PT_wo_Honoraria,
        speaker_program_data.Honoraria,
        speaker_program_data.A_V,
        speaker_program_data.F_B,
        speaker_program_data.Venue_PT,
        speaker_program_data.Unmet_Chgs,
        speaker_program_data.Other_PT,
        speaker_program_data.Actual_PT,
        speaker_program_data.Actual_MF,
        speaker_program_data.Actual_PT_MF,
        speaker_program_data.Adl_Cmtd_PT,
        speaker_program_data.Adl_Cmtd_MF,
        speaker_program_data.Adl_Cmtd_PT_MF,
        speaker_program_data.Total_Cmtd_PT,
        speaker_program_data.Total_Cmtd_MF,
        speaker_program_data.Total_Spend,
        speaker_program_data.Venue_Name,
        speaker_program_data.Venue_PP_Id,
        speaker_program_data.Venue_Zip,
        speaker_program_data.Venue_State,
        speaker_program_data.Venue_City,
        speaker_program_data.Meeting_Year,
        speaker_program_data.Meeting_Qtr,
        speaker_program_data.Meeting_Month,
        speaker_program_data.Request_Month,
        speaker_program_data.Lead_Time_Days,
        speaker_program_data.Lead_Time_Grouped,
        speaker_program_data.New_Lead_Time_Grouped,
        speaker_program_data.Lead_Time_Weeks,
        speaker_program_data.Cancellation_Reason,
        speaker_program_data.Cancellation_Date,
        speaker_program_data.Meeting_Date_and_Time,
        speaker_program_data.Est_Participants,
        speaker_program_data.Host_Name,
        speaker_program_data.Territory,
        speaker_program_data.Num_of_Speakers,
        speaker_program_data.Meeting_ID,
        speaker_program_data.Total_RSVP_Role_Attendee_RSVP_Status_Yes,
        speaker_program_data.Total_Attendance_Participant_Role_Attendee,
        speaker_program_data.Att_Specialty_Allergy,
        speaker_program_data.Attendance_grtr_0,
        speaker_program_data.Centris_Meeting_Status,
        speaker_program_data.Placeholder_Profiles,
        speaker_program_data.Non_Profiled,
        speaker_program_data.Is_placeholder_Counts_NonProfiled_Counts,
        speaker_program_data.Product,
        speaker_program_data.Budget_Name,
        speaker_program_data.Budget,
        speaker_program_data.LocationType,
        speaker_program_data.Type_of_Speaker_Used,
        speaker_program_data.ClientEventType,
        speaker_program_data.Speaker_1,
        speaker_program_data.Speaker_1_status,
        speaker_program_data.Speaker_1_Master_ID,
        speaker_program_data.Speaker_1_Tier,
        speaker_program_data.Speaker_2,
        speaker_program_data.Speaker_2_status,
        speaker_program_data.Speaker_2_Master_ID,
        speaker_program_data.Speaker_2_Tier,
        speaker_program_data.Speaker_3,
        speaker_program_data.Speaker_3_status,
        speaker_program_data.Speaker_3_Master_ID,
        speaker_program_data.Speaker_3_Tier,
        speaker_program_data.Speaker_4,
        speaker_program_data.Speaker_4_status,
        speaker_program_data.Speaker_4_Master_ID,
        speaker_program_data.Speaker_4_Tier,
        speaker_program_data.Date_Changes,
        speaker_program_data.Speaker_Changes,
        speaker_program_data.Venue_Changes,
        speaker_program_data.Meetings_with_Changes,
        speaker_program_data.Setup_Complete_Date,
        speaker_program_data.Speaker_1_pp_id,
        speaker_program_data.Speaker_2_pp_id,
        speaker_program_data.Speaker_3_pp_id,
        speaker_program_data.Speaker_4_pp_id,
        speaker_program_data.Business_Days_to_SUC,
        speaker_program_data.Area,
        speaker_program_data.Region,
        speaker_program_data.Total_Honoraria_Centris_Estimate,
        speaker_program_data.Cancellation_Date_Time,
        speaker_program_data.Programs_Submitted,
        speaker_program_data.Cancelled,
        speaker_program_data.Display
 FROM sandbox.speaker_program_data
 ORDER BY speaker_program_data.Client,
          speaker_program_data.Brand,
          speaker_program_data.Project,
          speaker_program_data.Service_Type,
          speaker_program_data.Program_Type,
          speaker_program_data.Meeting_Code,
          speaker_program_data.Meeting_Topic,
          speaker_program_data.Bf_Ln_Dn
SEGMENTED BY hash(speaker_program_data.Meeting_Date, speaker_program_data.Request_Date, speaker_program_data.Cancellation_Date, speaker_program_data.Meeting_Date_and_Time, speaker_program_data.Est_Participants, speaker_program_data.Num_of_Speakers, speaker_program_data.Total_RSVP_Role_Attendee_RSVP_Status_Yes, speaker_program_data.Total_Attendance_Participant_Role_Attendee) ALL NODES;

CREATE PROJECTION sandbox.sob_b0 /*+basename(sob),createtype(L)*/ 
(
 MONTHID,
 AGE,
 GENDER,
 PAYTYPE,
 SPECIALTY,
 CHANNEL,
 INDICATION,
 SOB,
 ARISTADA_INITIO_FLAG,
 PRIOR_PRODUCT,
 INDEX_PRODUCT,
 PATIENT_COUNT
)
AS
 SELECT sob.MONTHID,
        sob.AGE,
        sob.GENDER,
        sob.PAYTYPE,
        sob.SPECIALTY,
        sob.CHANNEL,
        sob.INDICATION,
        sob.SOB,
        sob.ARISTADA_INITIO_FLAG,
        sob.PRIOR_PRODUCT,
        sob.INDEX_PRODUCT,
        sob.PATIENT_COUNT
 FROM sandbox.sob
 ORDER BY sob.MONTHID,
          sob.AGE,
          sob.GENDER,
          sob.PAYTYPE,
          sob.SPECIALTY,
          sob.CHANNEL,
          sob.INDICATION,
          sob.SOB
SEGMENTED BY hash(sob.PATIENT_COUNT, sob.MONTHID, sob.AGE, sob.GENDER, sob.PAYTYPE, sob.SPECIALTY, sob.CHANNEL, sob.INDICATION) ALL NODES;

CREATE PROJECTION sandbox.view1_psd_new_b0 /*+basename(view1_psd_new),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 Demand_units,
 Covered_Coupon_Units,
 Full_Buy_Down_Units
)
AS
 SELECT view1_psd_new.product_name,
        view1_psd_new.month_year,
        view1_psd_new.mnth_dt,
        view1_psd_new.Demand_units,
        view1_psd_new.Covered_Coupon_Units,
        view1_psd_new.Full_Buy_Down_Units
 FROM sandbox.view1_psd_new
 ORDER BY view1_psd_new.product_name,
          view1_psd_new.month_year,
          view1_psd_new.mnth_dt,
          view1_psd_new.Demand_units,
          view1_psd_new.Covered_Coupon_Units,
          view1_psd_new.Full_Buy_Down_Units
SEGMENTED BY hash(view1_psd_new.product_name, view1_psd_new.mnth_dt, view1_psd_new.Covered_Coupon_Units, view1_psd_new.Full_Buy_Down_Units, view1_psd_new.Demand_units, view1_psd_new.month_year) ALL NODES;

CREATE PROJECTION sandbox.view1_psd_old_b0 /*+basename(view1_psd_old),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 Demand_units,
 Covered_Coupon_Units,
 Full_WAC_Buy_Down_Units
)
AS
 SELECT view1_psd_old.product_name,
        view1_psd_old.month_year,
        view1_psd_old.mnth_dt,
        view1_psd_old.Demand_units,
        view1_psd_old.Covered_Coupon_Units,
        view1_psd_old.Full_WAC_Buy_Down_Units
 FROM sandbox.view1_psd_old
 ORDER BY view1_psd_old.product_name,
          view1_psd_old.month_year,
          view1_psd_old.mnth_dt,
          view1_psd_old.Demand_units,
          view1_psd_old.Covered_Coupon_Units,
          view1_psd_old.Full_WAC_Buy_Down_Units
SEGMENTED BY hash(view1_psd_old.product_name, view1_psd_old.mnth_dt, view1_psd_old.Covered_Coupon_Units, view1_psd_old.Full_WAC_Buy_Down_Units, view1_psd_old.Demand_units, view1_psd_old.month_year) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_nov2021_b0 /*+basename(ic_rx_nov2021),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_nov2021.ic_data_month,
        ic_rx_nov2021.basket_name,
        ic_rx_nov2021.sales_force_id,
        ic_rx_nov2021.area_number,
        ic_rx_nov2021.region_number,
        ic_rx_nov2021.territory_number,
        ic_rx_nov2021.ims_id,
        ic_rx_nov2021.tvcmid,
        ic_rx_nov2021.outlet_code,
        ic_rx_nov2021.va_station_number,
        ic_rx_nov2021.dnc_flag,
        ic_rx_nov2021.dnp_flag,
        ic_rx_nov2021.rollup_month,
        ic_rx_nov2021.month_bucket,
        ic_rx_nov2021.nrx_count,
        ic_rx_nov2021.trx_count,
        ic_rx_nov2021.nrx_quantity,
        ic_rx_nov2021.trx_quantity,
        ic_rx_nov2021.include_in_nation_rollup,
        ic_rx_nov2021.include_in_area_rollup,
        ic_rx_nov2021.include_in_region_rollup,
        ic_rx_nov2021.join_key,
        ic_rx_nov2021.row_source,
        ic_rx_nov2021.row_create_date,
        ic_rx_nov2021.indication,
        ic_rx_nov2021.outlet_dea,
        ic_rx_nov2021.payer_plan_number,
        ic_rx_nov2021.payment_method
 FROM sandbox.ic_rx_nov2021
 ORDER BY ic_rx_nov2021.ic_data_month,
          ic_rx_nov2021.basket_name,
          ic_rx_nov2021.sales_force_id,
          ic_rx_nov2021.area_number,
          ic_rx_nov2021.region_number,
          ic_rx_nov2021.territory_number,
          ic_rx_nov2021.ims_id,
          ic_rx_nov2021.tvcmid
SEGMENTED BY hash(ic_rx_nov2021.ic_data_month, ic_rx_nov2021.tvcmid, ic_rx_nov2021.outlet_code, ic_rx_nov2021.dnc_flag, ic_rx_nov2021.dnp_flag, ic_rx_nov2021.rollup_month, ic_rx_nov2021.month_bucket, ic_rx_nov2021.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_nov2021_b0 /*+basename(ic_demo_nov2021),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_nov2021.ic_data_month,
        ic_demo_nov2021.sales_force_id,
        ic_demo_nov2021.area_number,
        ic_demo_nov2021.region_number,
        ic_demo_nov2021.territory_number,
        ic_demo_nov2021.ims_id,
        ic_demo_nov2021.tvcmid,
        ic_demo_nov2021.outlet_code,
        ic_demo_nov2021.va_station_number,
        ic_demo_nov2021.specialty,
        ic_demo_nov2021.last_name,
        ic_demo_nov2021.first_name,
        ic_demo_nov2021.mid_name,
        ic_demo_nov2021.address_1,
        ic_demo_nov2021.address_2,
        ic_demo_nov2021.address_3,
        ic_demo_nov2021.city,
        ic_demo_nov2021.state,
        ic_demo_nov2021.zip,
        ic_demo_nov2021.address_source,
        ic_demo_nov2021.pdrp_flag,
        ic_demo_nov2021.pdrp_date,
        ic_demo_nov2021.np_pa_flag,
        ic_demo_nov2021.no_spend,
        ic_demo_nov2021.ama_no_contact_flag,
        ic_demo_nov2021.join_key,
        ic_demo_nov2021.row_source,
        ic_demo_nov2021.row_create_date,
        ic_demo_nov2021.outlet_dea,
        ic_demo_nov2021.secondary_specialty
 FROM sandbox.ic_demo_nov2021
 ORDER BY ic_demo_nov2021.ic_data_month,
          ic_demo_nov2021.sales_force_id,
          ic_demo_nov2021.area_number,
          ic_demo_nov2021.region_number,
          ic_demo_nov2021.territory_number,
          ic_demo_nov2021.ims_id,
          ic_demo_nov2021.tvcmid,
          ic_demo_nov2021.outlet_code
SEGMENTED BY hash(ic_demo_nov2021.ic_data_month, ic_demo_nov2021.tvcmid, ic_demo_nov2021.outlet_code, ic_demo_nov2021.mid_name, ic_demo_nov2021.state, ic_demo_nov2021.zip, ic_demo_nov2021.pdrp_flag, ic_demo_nov2021.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.activity_line_level_v3_b0 /*+basename(activity_line_level_v3),createtype(L)*/ 
(
 activityid,
 level,
 basket_name
)
AS
 SELECT activity_line_level_v3.activityid,
        activity_line_level_v3.level,
        activity_line_level_v3.basket_name
 FROM sandbox.activity_line_level_v3
 ORDER BY activity_line_level_v3.activityid,
          activity_line_level_v3.level
SEGMENTED BY hash(activity_line_level_v3.activityid, activity_line_level_v3.level) ALL NODES;

CREATE PROJECTION sandbox.relay_health_evoucher_nov_b0 /*+basename(relay_health_evoucher_nov),createtype(A)*/ 
(
 RPT_BRAND_NAME,
 NDC,
 FDB_LABEL_NAME,
 REPORT_MONTH,
 FILL_NUMBER,
 FILL_TYPE,
 CLAIM_STATUS,
 PHARMACY_STATE_NAME,
 EVOUCHER_STATUS_DESC,
 COPAY_RANGE_DISPLAY_ORDER,
 COPAY_RANGE,
 DAYS_SUPPLY,
 QTY_DISPENSED,
 ORIGINAL_COPAY,
 EVOUCHER_AMOUNT,
 NEW_COPAY,
 PATIENT_STATUS,
 PHARMACY_STATE_TYPE,
 PATIENT_AGE_RANGE,
 STARTER_BENEFIT_IND,
 PPE_TRAN_ID,
 PHARMACY_ZIPSEC,
 BRD_ISSUE_FLAG
)
AS
 SELECT relay_health_evoucher_nov.RPT_BRAND_NAME,
        relay_health_evoucher_nov.NDC,
        relay_health_evoucher_nov.FDB_LABEL_NAME,
        relay_health_evoucher_nov.REPORT_MONTH,
        relay_health_evoucher_nov.FILL_NUMBER,
        relay_health_evoucher_nov.FILL_TYPE,
        relay_health_evoucher_nov.CLAIM_STATUS,
        relay_health_evoucher_nov.PHARMACY_STATE_NAME,
        relay_health_evoucher_nov.EVOUCHER_STATUS_DESC,
        relay_health_evoucher_nov.COPAY_RANGE_DISPLAY_ORDER,
        relay_health_evoucher_nov.COPAY_RANGE,
        relay_health_evoucher_nov.DAYS_SUPPLY,
        relay_health_evoucher_nov.QTY_DISPENSED,
        relay_health_evoucher_nov.ORIGINAL_COPAY,
        relay_health_evoucher_nov.EVOUCHER_AMOUNT,
        relay_health_evoucher_nov.NEW_COPAY,
        relay_health_evoucher_nov.PATIENT_STATUS,
        relay_health_evoucher_nov.PHARMACY_STATE_TYPE,
        relay_health_evoucher_nov.PATIENT_AGE_RANGE,
        relay_health_evoucher_nov.STARTER_BENEFIT_IND,
        relay_health_evoucher_nov.PPE_TRAN_ID,
        relay_health_evoucher_nov.PHARMACY_ZIPSEC,
        relay_health_evoucher_nov.BRD_ISSUE_FLAG
 FROM sandbox.relay_health_evoucher_nov
 ORDER BY relay_health_evoucher_nov.RPT_BRAND_NAME,
          relay_health_evoucher_nov.NDC,
          relay_health_evoucher_nov.FDB_LABEL_NAME,
          relay_health_evoucher_nov.REPORT_MONTH,
          relay_health_evoucher_nov.FILL_NUMBER,
          relay_health_evoucher_nov.FILL_TYPE,
          relay_health_evoucher_nov.CLAIM_STATUS,
          relay_health_evoucher_nov.PHARMACY_STATE_NAME
SEGMENTED BY hash(relay_health_evoucher_nov.REPORT_MONTH, relay_health_evoucher_nov.FILL_NUMBER, relay_health_evoucher_nov.COPAY_RANGE_DISPLAY_ORDER, relay_health_evoucher_nov.DAYS_SUPPLY, relay_health_evoucher_nov.QTY_DISPENSED, relay_health_evoucher_nov.ORIGINAL_COPAY, relay_health_evoucher_nov.EVOUCHER_AMOUNT, relay_health_evoucher_nov.NEW_COPAY) ALL NODES;

CREATE PROJECTION sandbox.relay_health_dc_nov_b0 /*+basename(relay_health_dc_nov),createtype(A)*/ 
(
 DRUG_TRADE_NAME,
 NDC,
 PAID_OR_REVERSED,
 STATE,
 QUANTITY,
 DAYS_SUPPLY,
 FILL_NUMBER,
 FILL_TYPE,
 DATE_OF_SERVICE,
 DATE_PROCESSED,
 PATIENT_PAY_AMT,
 DENIAL_VOUCHER_AMOUNT,
 TOTAL_ADMIN_FEES,
 TOTAL_DUE,
 TRANSACTION_ID
)
AS
 SELECT relay_health_dc_nov.DRUG_TRADE_NAME,
        relay_health_dc_nov.NDC,
        relay_health_dc_nov.PAID_OR_REVERSED,
        relay_health_dc_nov.STATE,
        relay_health_dc_nov.QUANTITY,
        relay_health_dc_nov.DAYS_SUPPLY,
        relay_health_dc_nov.FILL_NUMBER,
        relay_health_dc_nov.FILL_TYPE,
        relay_health_dc_nov.DATE_OF_SERVICE,
        relay_health_dc_nov.DATE_PROCESSED,
        relay_health_dc_nov.PATIENT_PAY_AMT,
        relay_health_dc_nov.DENIAL_VOUCHER_AMOUNT,
        relay_health_dc_nov.TOTAL_ADMIN_FEES,
        relay_health_dc_nov.TOTAL_DUE,
        relay_health_dc_nov.TRANSACTION_ID
 FROM sandbox.relay_health_dc_nov
 ORDER BY relay_health_dc_nov.DRUG_TRADE_NAME,
          relay_health_dc_nov.NDC,
          relay_health_dc_nov.PAID_OR_REVERSED,
          relay_health_dc_nov.STATE,
          relay_health_dc_nov.QUANTITY,
          relay_health_dc_nov.DAYS_SUPPLY,
          relay_health_dc_nov.FILL_NUMBER,
          relay_health_dc_nov.FILL_TYPE
SEGMENTED BY hash(relay_health_dc_nov.FILL_NUMBER, relay_health_dc_nov.DATE_OF_SERVICE, relay_health_dc_nov.DATE_PROCESSED, relay_health_dc_nov.QUANTITY, relay_health_dc_nov.PATIENT_PAY_AMT, relay_health_dc_nov.DENIAL_VOUCHER_AMOUNT, relay_health_dc_nov.TOTAL_ADMIN_FEES, relay_health_dc_nov.TOTAL_DUE) ALL NODES;

CREATE PROJECTION sandbox.relay_health_coc_nov_b0 /*+basename(relay_health_coc_nov),createtype(A)*/ 
(
 DRUG_TRADE_NAME,
 NDC,
 PAID_OR_REVERSED,
 STATE,
 QUANTITY,
 FILL_NUMBER,
 FILL_TYPE,
 PAS_SUBMITTED,
 DATE_OF_SERVICE,
 PROCESSED_DATE,
 PATIENT_PAY_DOLLAR,
 PHARMACY_PRODUCT_DOLLAR,
 ADMIN_FEES_DOLLAR,
 MANUFACTURER_DOLLAR_AMOUNT,
 TRANSACTION_ID
)
AS
 SELECT relay_health_coc_nov.DRUG_TRADE_NAME,
        relay_health_coc_nov.NDC,
        relay_health_coc_nov.PAID_OR_REVERSED,
        relay_health_coc_nov.STATE,
        relay_health_coc_nov.QUANTITY,
        relay_health_coc_nov.FILL_NUMBER,
        relay_health_coc_nov.FILL_TYPE,
        relay_health_coc_nov.PAS_SUBMITTED,
        relay_health_coc_nov.DATE_OF_SERVICE,
        relay_health_coc_nov.PROCESSED_DATE,
        relay_health_coc_nov.PATIENT_PAY_DOLLAR,
        relay_health_coc_nov.PHARMACY_PRODUCT_DOLLAR,
        relay_health_coc_nov.ADMIN_FEES_DOLLAR,
        relay_health_coc_nov.MANUFACTURER_DOLLAR_AMOUNT,
        relay_health_coc_nov.TRANSACTION_ID
 FROM sandbox.relay_health_coc_nov
 ORDER BY relay_health_coc_nov.DRUG_TRADE_NAME,
          relay_health_coc_nov.NDC,
          relay_health_coc_nov.PAID_OR_REVERSED,
          relay_health_coc_nov.STATE,
          relay_health_coc_nov.QUANTITY,
          relay_health_coc_nov.FILL_NUMBER,
          relay_health_coc_nov.FILL_TYPE,
          relay_health_coc_nov.PAS_SUBMITTED
SEGMENTED BY hash(relay_health_coc_nov.FILL_NUMBER, relay_health_coc_nov.PAS_SUBMITTED, relay_health_coc_nov.DATE_OF_SERVICE, relay_health_coc_nov.PROCESSED_DATE, relay_health_coc_nov.QUANTITY, relay_health_coc_nov.PATIENT_PAY_DOLLAR, relay_health_coc_nov.PHARMACY_PRODUCT_DOLLAR, relay_health_coc_nov.ADMIN_FEES_DOLLAR) ALL NODES;

CREATE PROJECTION sandbox.relay_evoucher_metrics_psd_nov_b0 /*+basename(relay_evoucher_metrics_psd_nov),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 claim_status,
 month_date,
 mnth_dt,
 Relay_EVoucher_Units,
 Relay_Spend_EVoucher_Paid
)
AS
 SELECT relay_evoucher_metrics_psd_nov.source_name,
        relay_evoucher_metrics_psd_nov.ndc_code,
        relay_evoucher_metrics_psd_nov.ndc_name,
        relay_evoucher_metrics_psd_nov.claim_status,
        relay_evoucher_metrics_psd_nov.month_date,
        relay_evoucher_metrics_psd_nov.mnth_dt,
        relay_evoucher_metrics_psd_nov.Relay_EVoucher_Units,
        relay_evoucher_metrics_psd_nov.Relay_Spend_EVoucher_Paid
 FROM sandbox.relay_evoucher_metrics_psd_nov
 ORDER BY relay_evoucher_metrics_psd_nov.source_name,
          relay_evoucher_metrics_psd_nov.ndc_code,
          relay_evoucher_metrics_psd_nov.ndc_name,
          relay_evoucher_metrics_psd_nov.claim_status,
          relay_evoucher_metrics_psd_nov.month_date,
          relay_evoucher_metrics_psd_nov.mnth_dt
SEGMENTED BY hash(relay_evoucher_metrics_psd_nov.source_name, relay_evoucher_metrics_psd_nov.ndc_code, relay_evoucher_metrics_psd_nov.ndc_name, relay_evoucher_metrics_psd_nov.claim_status, relay_evoucher_metrics_psd_nov.month_date, relay_evoucher_metrics_psd_nov.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.copay_master_psd_nov_b0 /*+basename(copay_master_psd_nov),createtype(A)*/ 
(
 source_name,
 ndc_code,
 basket_name,
 quantity,
 MEMBER_CASH_EXPENSE,
 other_coverage_code,
 fill_date,
 month_date,
 mnth_dt,
 reject_code,
 benefit_amount,
 units,
 run_date
)
AS
 SELECT copay_master_psd_nov.source_name,
        copay_master_psd_nov.ndc_code,
        copay_master_psd_nov.basket_name,
        copay_master_psd_nov.quantity,
        copay_master_psd_nov.MEMBER_CASH_EXPENSE,
        copay_master_psd_nov.other_coverage_code,
        copay_master_psd_nov.fill_date,
        copay_master_psd_nov.month_date,
        copay_master_psd_nov.mnth_dt,
        copay_master_psd_nov.reject_code,
        copay_master_psd_nov.benefit_amount,
        copay_master_psd_nov.units,
        copay_master_psd_nov.run_date
 FROM sandbox.copay_master_psd_nov
 ORDER BY copay_master_psd_nov.source_name
SEGMENTED BY hash(copay_master_psd_nov.quantity, copay_master_psd_nov.MEMBER_CASH_EXPENSE, copay_master_psd_nov.fill_date, copay_master_psd_nov.mnth_dt, copay_master_psd_nov.benefit_amount, copay_master_psd_nov.units, copay_master_psd_nov.run_date, copay_master_psd_nov.other_coverage_code) ALL NODES;

CREATE PROJECTION sandbox.relay_evoucher_psd_nov_b0 /*+basename(relay_evoucher_psd_nov),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 report_month,
 month_date,
 mnth_dt,
 claim_status,
 evoucher_status_desc,
 eVoucher_Amount,
 units,
 run_date
)
AS
 SELECT relay_evoucher_psd_nov.source_name,
        relay_evoucher_psd_nov.ndc_code,
        relay_evoucher_psd_nov.ndc_name,
        relay_evoucher_psd_nov.report_month,
        relay_evoucher_psd_nov.month_date,
        relay_evoucher_psd_nov.mnth_dt,
        relay_evoucher_psd_nov.claim_status,
        relay_evoucher_psd_nov.evoucher_status_desc,
        relay_evoucher_psd_nov.eVoucher_Amount,
        relay_evoucher_psd_nov.units,
        relay_evoucher_psd_nov.run_date
 FROM sandbox.relay_evoucher_psd_nov
 ORDER BY relay_evoucher_psd_nov.source_name,
          relay_evoucher_psd_nov.ndc_code,
          relay_evoucher_psd_nov.ndc_name,
          relay_evoucher_psd_nov.report_month,
          relay_evoucher_psd_nov.month_date,
          relay_evoucher_psd_nov.mnth_dt,
          relay_evoucher_psd_nov.claim_status,
          relay_evoucher_psd_nov.evoucher_status_desc
SEGMENTED BY hash(relay_evoucher_psd_nov.report_month, relay_evoucher_psd_nov.mnth_dt, relay_evoucher_psd_nov.units, relay_evoucher_psd_nov.run_date, relay_evoucher_psd_nov.source_name, relay_evoucher_psd_nov.eVoucher_Amount, relay_evoucher_psd_nov.month_date, relay_evoucher_psd_nov.ndc_code) ALL NODES;

CREATE PROJECTION sandbox.relay_denial_conversion_psd_nov_b0 /*+basename(relay_denial_conversion_psd_nov),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 date_of_service,
 month_date,
 mnth_dt,
 claim_status,
 denial_voucher_amount,
 units,
 run_date
)
AS
 SELECT relay_denial_conversion_psd_nov.source_name,
        relay_denial_conversion_psd_nov.ndc_code,
        relay_denial_conversion_psd_nov.ndc_name,
        relay_denial_conversion_psd_nov.date_of_service,
        relay_denial_conversion_psd_nov.month_date,
        relay_denial_conversion_psd_nov.mnth_dt,
        relay_denial_conversion_psd_nov.claim_status,
        relay_denial_conversion_psd_nov.denial_voucher_amount,
        relay_denial_conversion_psd_nov.units,
        relay_denial_conversion_psd_nov.run_date
 FROM sandbox.relay_denial_conversion_psd_nov
 ORDER BY relay_denial_conversion_psd_nov.source_name,
          relay_denial_conversion_psd_nov.ndc_code,
          relay_denial_conversion_psd_nov.ndc_name,
          relay_denial_conversion_psd_nov.date_of_service,
          relay_denial_conversion_psd_nov.month_date,
          relay_denial_conversion_psd_nov.mnth_dt,
          relay_denial_conversion_psd_nov.claim_status,
          relay_denial_conversion_psd_nov.denial_voucher_amount
SEGMENTED BY hash(relay_denial_conversion_psd_nov.date_of_service, relay_denial_conversion_psd_nov.mnth_dt, relay_denial_conversion_psd_nov.units, relay_denial_conversion_psd_nov.run_date, relay_denial_conversion_psd_nov.denial_voucher_amount, relay_denial_conversion_psd_nov.source_name, relay_denial_conversion_psd_nov.month_date, relay_denial_conversion_psd_nov.ndc_code) ALL NODES;

CREATE PROJECTION sandbox.relay_coc_metrics_psd_nov_b0 /*+basename(relay_coc_metrics_psd_nov),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 claim_status,
 month_date,
 mnth_dt,
 Relay_CoC_Units_Paid,
 Relay_CoC_Dollars_Paid,
 Relay_CoC_Units_Reversed,
 Relay_CoC_Dollars_Reversed,
 Relay_CoC_Units,
 Relay_CoC_Dollars
)
AS
 SELECT relay_coc_metrics_psd_nov.source_name,
        relay_coc_metrics_psd_nov.ndc_code,
        relay_coc_metrics_psd_nov.ndc_name,
        relay_coc_metrics_psd_nov.claim_status,
        relay_coc_metrics_psd_nov.month_date,
        relay_coc_metrics_psd_nov.mnth_dt,
        relay_coc_metrics_psd_nov.Relay_CoC_Units_Paid,
        relay_coc_metrics_psd_nov.Relay_CoC_Dollars_Paid,
        relay_coc_metrics_psd_nov.Relay_CoC_Units_Reversed,
        relay_coc_metrics_psd_nov.Relay_CoC_Dollars_Reversed,
        relay_coc_metrics_psd_nov.Relay_CoC_Units,
        relay_coc_metrics_psd_nov.Relay_CoC_Dollars
 FROM sandbox.relay_coc_metrics_psd_nov
 ORDER BY relay_coc_metrics_psd_nov.source_name,
          relay_coc_metrics_psd_nov.ndc_code,
          relay_coc_metrics_psd_nov.ndc_name,
          relay_coc_metrics_psd_nov.claim_status,
          relay_coc_metrics_psd_nov.month_date,
          relay_coc_metrics_psd_nov.mnth_dt
SEGMENTED BY hash(relay_coc_metrics_psd_nov.source_name, relay_coc_metrics_psd_nov.ndc_code, relay_coc_metrics_psd_nov.ndc_name, relay_coc_metrics_psd_nov.claim_status, relay_coc_metrics_psd_nov.month_date, relay_coc_metrics_psd_nov.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.relay_evoucher_metrics_psd_updtd_new_b0 /*+basename(relay_evoucher_metrics_psd_updtd_new),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 month_date,
 mnth_dt,
 Relay_EVoucher_Units_Paid,
 Relay_EVoucher_Dollars_Paid,
 Relay_EVoucher_Units_Reversed,
 Relay_EVoucher_Dollars_Reversed,
 Relay_EVoucher_Units,
 Relay_EVoucher_Dollars
)
AS
 SELECT relay_evoucher_metrics_psd_updtd_new.source_name,
        relay_evoucher_metrics_psd_updtd_new.ndc_code,
        relay_evoucher_metrics_psd_updtd_new.ndc_name,
        relay_evoucher_metrics_psd_updtd_new.month_date,
        relay_evoucher_metrics_psd_updtd_new.mnth_dt,
        relay_evoucher_metrics_psd_updtd_new.Relay_EVoucher_Units_Paid,
        relay_evoucher_metrics_psd_updtd_new.Relay_EVoucher_Dollars_Paid,
        relay_evoucher_metrics_psd_updtd_new.Relay_EVoucher_Units_Reversed,
        relay_evoucher_metrics_psd_updtd_new.Relay_EVoucher_Dollars_Reversed,
        relay_evoucher_metrics_psd_updtd_new.Relay_EVoucher_Units,
        relay_evoucher_metrics_psd_updtd_new.Relay_EVoucher_Dollars
 FROM sandbox.relay_evoucher_metrics_psd_updtd_new
 ORDER BY relay_evoucher_metrics_psd_updtd_new.source_name,
          relay_evoucher_metrics_psd_updtd_new.ndc_code,
          relay_evoucher_metrics_psd_updtd_new.ndc_name,
          relay_evoucher_metrics_psd_updtd_new.month_date,
          relay_evoucher_metrics_psd_updtd_new.mnth_dt
SEGMENTED BY hash(relay_evoucher_metrics_psd_updtd_new.source_name, relay_evoucher_metrics_psd_updtd_new.ndc_code, relay_evoucher_metrics_psd_updtd_new.ndc_name, relay_evoucher_metrics_psd_updtd_new.month_date, relay_evoucher_metrics_psd_updtd_new.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.relay_evoucher_metrics_psd_updtd_b0 /*+basename(relay_evoucher_metrics_psd_updtd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 month_date,
 mnth_dt,
 Relay_EVoucher_Units_Paid,
 Relay_EVoucher_Dollars_Paid,
 Relay_EVoucher_Units_Reversed,
 Relay_EVoucher_Dollars_Reversed,
 Relay_EVoucher_Units,
 Relay_EVoucher_Dollars
)
AS
 SELECT relay_evoucher_metrics_psd_updtd.source_name,
        relay_evoucher_metrics_psd_updtd.ndc_code,
        relay_evoucher_metrics_psd_updtd.ndc_name,
        relay_evoucher_metrics_psd_updtd.month_date,
        relay_evoucher_metrics_psd_updtd.mnth_dt,
        relay_evoucher_metrics_psd_updtd.Relay_EVoucher_Units_Paid,
        relay_evoucher_metrics_psd_updtd.Relay_EVoucher_Dollars_Paid,
        relay_evoucher_metrics_psd_updtd.Relay_EVoucher_Units_Reversed,
        relay_evoucher_metrics_psd_updtd.Relay_EVoucher_Dollars_Reversed,
        relay_evoucher_metrics_psd_updtd.Relay_EVoucher_Units,
        relay_evoucher_metrics_psd_updtd.Relay_EVoucher_Dollars
 FROM sandbox.relay_evoucher_metrics_psd_updtd
 ORDER BY relay_evoucher_metrics_psd_updtd.source_name,
          relay_evoucher_metrics_psd_updtd.ndc_code,
          relay_evoucher_metrics_psd_updtd.ndc_name,
          relay_evoucher_metrics_psd_updtd.month_date,
          relay_evoucher_metrics_psd_updtd.mnth_dt
SEGMENTED BY hash(relay_evoucher_metrics_psd_updtd.source_name, relay_evoucher_metrics_psd_updtd.ndc_code, relay_evoucher_metrics_psd_updtd.ndc_name, relay_evoucher_metrics_psd_updtd.month_date, relay_evoucher_metrics_psd_updtd.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.relay_denial_conversion_metrics_psd_updtd_b0 /*+basename(relay_denial_conversion_metrics_psd_updtd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 month_date,
 mnth_dt,
 Relay_Denial_Conversion_Units_Paid,
 Relay_Denial_Conversion_Dollars_Paid,
 Relay_Denial_Conversion_Units_Reversal,
 Relay_Denial_Conversion_Dollars_Reversal,
 Relay_Denial_Conversion_Units,
 Relay_Denial_Conversion_Dollars
)
AS
 SELECT relay_denial_conversion_metrics_psd_updtd.source_name,
        relay_denial_conversion_metrics_psd_updtd.ndc_code,
        relay_denial_conversion_metrics_psd_updtd.ndc_name,
        relay_denial_conversion_metrics_psd_updtd.month_date,
        relay_denial_conversion_metrics_psd_updtd.mnth_dt,
        relay_denial_conversion_metrics_psd_updtd.Relay_Denial_Conversion_Units_Paid,
        relay_denial_conversion_metrics_psd_updtd.Relay_Denial_Conversion_Dollars_Paid,
        relay_denial_conversion_metrics_psd_updtd.Relay_Denial_Conversion_Units_Reversal,
        relay_denial_conversion_metrics_psd_updtd.Relay_Denial_Conversion_Dollars_Reversal,
        relay_denial_conversion_metrics_psd_updtd.Relay_Denial_Conversion_Units,
        relay_denial_conversion_metrics_psd_updtd.Relay_Denial_Conversion_Dollars
 FROM sandbox.relay_denial_conversion_metrics_psd_updtd
 ORDER BY relay_denial_conversion_metrics_psd_updtd.source_name,
          relay_denial_conversion_metrics_psd_updtd.ndc_code,
          relay_denial_conversion_metrics_psd_updtd.ndc_name,
          relay_denial_conversion_metrics_psd_updtd.month_date,
          relay_denial_conversion_metrics_psd_updtd.mnth_dt
SEGMENTED BY hash(relay_denial_conversion_metrics_psd_updtd.source_name, relay_denial_conversion_metrics_psd_updtd.ndc_code, relay_denial_conversion_metrics_psd_updtd.ndc_name, relay_denial_conversion_metrics_psd_updtd.month_date, relay_denial_conversion_metrics_psd_updtd.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.ddd_md_anpsych_weekly_b0 /*+basename(ddd_md_anpsych_weekly),createtype(A)*/ 
(
 onc_account_demo_id,
 alt_seq_num,
 outlet_name,
 outlet_code,
 subcategory_code,
 outlet_zip,
 ims_client_num,
 ims_report_num,
 report_frequency,
 ims_product_code,
 basket_id,
 basket_name,
 data_date,
 date,
 rollup_week,
 rollup_month,
 comp_month,
 quantity,
 dollars,
 file_id,
 record_id,
 sales_force_id,
 rollup_445_month,
 tvcmid,
 ims_facility_number,
 ims_prescriber_number,
 facility_tvcmid,
 prescriber_tvcmid,
 outlet_tvcmid,
 normalized_quantity
)
AS
 SELECT ddd_md_anpsych_weekly.onc_account_demo_id,
        ddd_md_anpsych_weekly.alt_seq_num,
        ddd_md_anpsych_weekly.outlet_name,
        ddd_md_anpsych_weekly.outlet_code,
        ddd_md_anpsych_weekly.subcategory_code,
        ddd_md_anpsych_weekly.outlet_zip,
        ddd_md_anpsych_weekly.ims_client_num,
        ddd_md_anpsych_weekly.ims_report_num,
        ddd_md_anpsych_weekly.report_frequency,
        ddd_md_anpsych_weekly.ims_product_code,
        ddd_md_anpsych_weekly.basket_id,
        ddd_md_anpsych_weekly.basket_name,
        ddd_md_anpsych_weekly.data_date,
        ddd_md_anpsych_weekly.date,
        ddd_md_anpsych_weekly.rollup_week,
        ddd_md_anpsych_weekly.rollup_month,
        ddd_md_anpsych_weekly.comp_month,
        ddd_md_anpsych_weekly.quantity,
        ddd_md_anpsych_weekly.dollars,
        ddd_md_anpsych_weekly.file_id,
        ddd_md_anpsych_weekly.record_id,
        ddd_md_anpsych_weekly.sales_force_id,
        ddd_md_anpsych_weekly.rollup_445_month,
        ddd_md_anpsych_weekly.tvcmid,
        ddd_md_anpsych_weekly.ims_facility_number,
        ddd_md_anpsych_weekly.ims_prescriber_number,
        ddd_md_anpsych_weekly.facility_tvcmid,
        ddd_md_anpsych_weekly.prescriber_tvcmid,
        ddd_md_anpsych_weekly.outlet_tvcmid,
        ddd_md_anpsych_weekly.normalized_quantity
 FROM sandbox.ddd_md_anpsych_weekly
 ORDER BY ddd_md_anpsych_weekly.onc_account_demo_id,
          ddd_md_anpsych_weekly.alt_seq_num,
          ddd_md_anpsych_weekly.outlet_name,
          ddd_md_anpsych_weekly.outlet_code,
          ddd_md_anpsych_weekly.subcategory_code,
          ddd_md_anpsych_weekly.outlet_zip,
          ddd_md_anpsych_weekly.ims_client_num,
          ddd_md_anpsych_weekly.ims_report_num,
          ddd_md_anpsych_weekly.ims_product_code,
          ddd_md_anpsych_weekly.basket_id,
          ddd_md_anpsych_weekly.basket_name,
          ddd_md_anpsych_weekly.data_date,
          ddd_md_anpsych_weekly.date,
          ddd_md_anpsych_weekly.rollup_week,
          ddd_md_anpsych_weekly.rollup_month,
          ddd_md_anpsych_weekly.comp_month,
          ddd_md_anpsych_weekly.quantity,
          ddd_md_anpsych_weekly.dollars,
          ddd_md_anpsych_weekly.file_id,
          ddd_md_anpsych_weekly.record_id
SEGMENTED BY hash(ddd_md_anpsych_weekly.record_id) ALL NODES;

CREATE PROJECTION sandbox.austedo_titration_b0 /*+basename(austedo_titration),createtype(L)*/ 
(
 TVCM_ID,
 IMS_ID,
 PRODUCT_NAME,
 Data_Type,
 Avg_TD_Daily_Dose_New_Patient,
 Avg_TD_Daily_Dose_Cont_Patient,
 Data_Ending_Month
)
AS
 SELECT austedo_titration.TVCM_ID,
        austedo_titration.IMS_ID,
        austedo_titration.PRODUCT_NAME,
        austedo_titration.Data_Type,
        austedo_titration.Avg_TD_Daily_Dose_New_Patient,
        austedo_titration.Avg_TD_Daily_Dose_Cont_Patient,
        austedo_titration.Data_Ending_Month
 FROM sandbox.austedo_titration
 ORDER BY austedo_titration.TVCM_ID,
          austedo_titration.IMS_ID,
          austedo_titration.PRODUCT_NAME,
          austedo_titration.Data_Type,
          austedo_titration.Avg_TD_Daily_Dose_New_Patient,
          austedo_titration.Avg_TD_Daily_Dose_Cont_Patient,
          austedo_titration.Data_Ending_Month
SEGMENTED BY hash(austedo_titration.TVCM_ID, austedo_titration.Avg_TD_Daily_Dose_New_Patient, austedo_titration.Avg_TD_Daily_Dose_Cont_Patient, austedo_titration.Data_Ending_Month, austedo_titration.IMS_ID, austedo_titration.PRODUCT_NAME, austedo_titration.Data_Type) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_dec2021_b0 /*+basename(ic_rx_dec2021),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_dec2021.ic_data_month,
        ic_rx_dec2021.basket_name,
        ic_rx_dec2021.sales_force_id,
        ic_rx_dec2021.area_number,
        ic_rx_dec2021.region_number,
        ic_rx_dec2021.territory_number,
        ic_rx_dec2021.ims_id,
        ic_rx_dec2021.tvcmid,
        ic_rx_dec2021.outlet_code,
        ic_rx_dec2021.va_station_number,
        ic_rx_dec2021.dnc_flag,
        ic_rx_dec2021.dnp_flag,
        ic_rx_dec2021.rollup_month,
        ic_rx_dec2021.month_bucket,
        ic_rx_dec2021.nrx_count,
        ic_rx_dec2021.trx_count,
        ic_rx_dec2021.nrx_quantity,
        ic_rx_dec2021.trx_quantity,
        ic_rx_dec2021.include_in_nation_rollup,
        ic_rx_dec2021.include_in_area_rollup,
        ic_rx_dec2021.include_in_region_rollup,
        ic_rx_dec2021.join_key,
        ic_rx_dec2021.row_source,
        ic_rx_dec2021.row_create_date,
        ic_rx_dec2021.indication,
        ic_rx_dec2021.outlet_dea,
        ic_rx_dec2021.payer_plan_number,
        ic_rx_dec2021.payment_method
 FROM sandbox.ic_rx_dec2021
 ORDER BY ic_rx_dec2021.ic_data_month,
          ic_rx_dec2021.basket_name,
          ic_rx_dec2021.sales_force_id,
          ic_rx_dec2021.area_number,
          ic_rx_dec2021.region_number,
          ic_rx_dec2021.territory_number,
          ic_rx_dec2021.ims_id,
          ic_rx_dec2021.tvcmid
SEGMENTED BY hash(ic_rx_dec2021.ic_data_month, ic_rx_dec2021.tvcmid, ic_rx_dec2021.outlet_code, ic_rx_dec2021.dnc_flag, ic_rx_dec2021.dnp_flag, ic_rx_dec2021.rollup_month, ic_rx_dec2021.month_bucket, ic_rx_dec2021.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_dec2021_b0 /*+basename(ic_demo_dec2021),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_dec2021.ic_data_month,
        ic_demo_dec2021.sales_force_id,
        ic_demo_dec2021.area_number,
        ic_demo_dec2021.region_number,
        ic_demo_dec2021.territory_number,
        ic_demo_dec2021.ims_id,
        ic_demo_dec2021.tvcmid,
        ic_demo_dec2021.outlet_code,
        ic_demo_dec2021.va_station_number,
        ic_demo_dec2021.specialty,
        ic_demo_dec2021.last_name,
        ic_demo_dec2021.first_name,
        ic_demo_dec2021.mid_name,
        ic_demo_dec2021.address_1,
        ic_demo_dec2021.address_2,
        ic_demo_dec2021.address_3,
        ic_demo_dec2021.city,
        ic_demo_dec2021.state,
        ic_demo_dec2021.zip,
        ic_demo_dec2021.address_source,
        ic_demo_dec2021.pdrp_flag,
        ic_demo_dec2021.pdrp_date,
        ic_demo_dec2021.np_pa_flag,
        ic_demo_dec2021.no_spend,
        ic_demo_dec2021.ama_no_contact_flag,
        ic_demo_dec2021.join_key,
        ic_demo_dec2021.row_source,
        ic_demo_dec2021.row_create_date,
        ic_demo_dec2021.outlet_dea,
        ic_demo_dec2021.secondary_specialty
 FROM sandbox.ic_demo_dec2021
 ORDER BY ic_demo_dec2021.ic_data_month,
          ic_demo_dec2021.sales_force_id,
          ic_demo_dec2021.area_number,
          ic_demo_dec2021.region_number,
          ic_demo_dec2021.territory_number,
          ic_demo_dec2021.ims_id,
          ic_demo_dec2021.tvcmid,
          ic_demo_dec2021.outlet_code
SEGMENTED BY hash(ic_demo_dec2021.ic_data_month, ic_demo_dec2021.tvcmid, ic_demo_dec2021.outlet_code, ic_demo_dec2021.mid_name, ic_demo_dec2021.state, ic_demo_dec2021.zip, ic_demo_dec2021.pdrp_flag, ic_demo_dec2021.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_021822_b0 /*+basename(Austedo_PSRF_Utilization_Rpt_021822),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_021822.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_021822.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_021822.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_021822.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_021822.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_021822."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_021822."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_021822.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_021822.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_021822.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_021822.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_021822."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_021822
 ORDER BY Austedo_PSRF_Utilization_Rpt_021822.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_021822.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_021822.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_021822.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_021822.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_021822."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_021822."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_021822.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_021822.PrescriberZip, Austedo_PSRF_Utilization_Rpt_021822."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_021822."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_021822.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_021822.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_021822.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_021822.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_021822."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_030422_super /*+basename(Austedo_PSRF_Utilization_Rpt_030422),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_030422 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs", Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI) ALL NODES;

CREATE PROJECTION sandbox.veeva_suggestions_digihaler_b0 /*+basename(veeva_suggestions_digihaler),createtype(A)*/ 
(
 account_priority_score_vod__c,
 account_vod__c,
 display_dismiss_vod__c,
 display_mark_as_complete_vod__c,
 display_score_vod__c,
 email_template_id_vod__c,
 email_template_vault_id_vod__c,
 email_template_vod__c,
 expiration_date_vod__c,
 marked_as_complete_vod__c,
 mark_complete_count_vod__c,
 name,
 ownerid,
 posted_date,
 priority_vod__c,
 reason_vod__c,
 record_type_name_vod__c,
 suppress_reason_vod__c,
 title_vod__c,
 business_rule_name,
 product,
 combined_owner_account_key,
 days_since_last_call
)
AS
 SELECT veeva_suggestions_digihaler.account_priority_score_vod__c,
        veeva_suggestions_digihaler.account_vod__c,
        veeva_suggestions_digihaler.display_dismiss_vod__c,
        veeva_suggestions_digihaler.display_mark_as_complete_vod__c,
        veeva_suggestions_digihaler.display_score_vod__c,
        veeva_suggestions_digihaler.email_template_id_vod__c,
        veeva_suggestions_digihaler.email_template_vault_id_vod__c,
        veeva_suggestions_digihaler.email_template_vod__c,
        veeva_suggestions_digihaler.expiration_date_vod__c,
        veeva_suggestions_digihaler.marked_as_complete_vod__c,
        veeva_suggestions_digihaler.mark_complete_count_vod__c,
        veeva_suggestions_digihaler.name,
        veeva_suggestions_digihaler.ownerid,
        veeva_suggestions_digihaler.posted_date,
        veeva_suggestions_digihaler.priority_vod__c,
        veeva_suggestions_digihaler.reason_vod__c,
        veeva_suggestions_digihaler.record_type_name_vod__c,
        veeva_suggestions_digihaler.suppress_reason_vod__c,
        veeva_suggestions_digihaler.title_vod__c,
        veeva_suggestions_digihaler.business_rule_name,
        veeva_suggestions_digihaler.product,
        veeva_suggestions_digihaler.combined_owner_account_key,
        veeva_suggestions_digihaler.days_since_last_call
 FROM sandbox.veeva_suggestions_digihaler
 ORDER BY veeva_suggestions_digihaler.account_priority_score_vod__c,
          veeva_suggestions_digihaler.account_vod__c,
          veeva_suggestions_digihaler.display_dismiss_vod__c,
          veeva_suggestions_digihaler.display_mark_as_complete_vod__c,
          veeva_suggestions_digihaler.display_score_vod__c,
          veeva_suggestions_digihaler.email_template_id_vod__c,
          veeva_suggestions_digihaler.email_template_vault_id_vod__c,
          veeva_suggestions_digihaler.email_template_vod__c
SEGMENTED BY hash(veeva_suggestions_digihaler.account_priority_score_vod__c, veeva_suggestions_digihaler.expiration_date_vod__c, veeva_suggestions_digihaler.mark_complete_count_vod__c, veeva_suggestions_digihaler.posted_date, veeva_suggestions_digihaler.days_since_last_call, veeva_suggestions_digihaler.display_dismiss_vod__c, veeva_suggestions_digihaler.display_mark_as_complete_vod__c, veeva_suggestions_digihaler.display_score_vod__c) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_tp_tmp_b0 /*+basename(ic_rx_tp_tmp),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_tp_tmp.ic_data_month,
        ic_rx_tp_tmp.basket_name,
        ic_rx_tp_tmp.sales_force_id,
        ic_rx_tp_tmp.area_number,
        ic_rx_tp_tmp.region_number,
        ic_rx_tp_tmp.territory_number,
        ic_rx_tp_tmp.ims_id,
        ic_rx_tp_tmp.tvcmid,
        ic_rx_tp_tmp.outlet_code,
        ic_rx_tp_tmp.va_station_number,
        ic_rx_tp_tmp.dnc_flag,
        ic_rx_tp_tmp.dnp_flag,
        ic_rx_tp_tmp.rollup_month,
        ic_rx_tp_tmp.month_bucket,
        ic_rx_tp_tmp.nrx_count,
        ic_rx_tp_tmp.trx_count,
        ic_rx_tp_tmp.nrx_quantity,
        ic_rx_tp_tmp.trx_quantity,
        ic_rx_tp_tmp.include_in_nation_rollup,
        ic_rx_tp_tmp.include_in_area_rollup,
        ic_rx_tp_tmp.include_in_region_rollup,
        ic_rx_tp_tmp.join_key,
        ic_rx_tp_tmp.row_source,
        ic_rx_tp_tmp.row_create_date,
        ic_rx_tp_tmp.indication,
        ic_rx_tp_tmp.outlet_dea,
        ic_rx_tp_tmp.payer_plan_number,
        ic_rx_tp_tmp.payment_method
 FROM sandbox.ic_rx_tp_tmp
 ORDER BY ic_rx_tp_tmp.area_number,
          ic_rx_tp_tmp.region_number,
          ic_rx_tp_tmp.territory_number,
          ic_rx_tp_tmp.ims_id,
          ic_rx_tp_tmp.tvcmid
SEGMENTED BY hash(ic_rx_tp_tmp.ic_data_month, ic_rx_tp_tmp.tvcmid, ic_rx_tp_tmp.outlet_code, ic_rx_tp_tmp.dnc_flag, ic_rx_tp_tmp.dnp_flag, ic_rx_tp_tmp.rollup_month, ic_rx_tp_tmp.month_bucket, ic_rx_tp_tmp.nrx_count, ic_rx_tp_tmp.trx_count, ic_rx_tp_tmp.nrx_quantity, ic_rx_tp_tmp.trx_quantity, ic_rx_tp_tmp.include_in_nation_rollup, ic_rx_tp_tmp.include_in_area_rollup, ic_rx_tp_tmp.include_in_region_rollup, ic_rx_tp_tmp.row_create_date, ic_rx_tp_tmp.ims_id, ic_rx_tp_tmp.va_station_number, ic_rx_tp_tmp.join_key, ic_rx_tp_tmp.area_number, ic_rx_tp_tmp.region_number, ic_rx_tp_tmp.territory_number, ic_rx_tp_tmp.sales_force_id, ic_rx_tp_tmp.row_source, ic_rx_tp_tmp.basket_name) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_tp_tmp_b0 /*+basename(ic_demo_tp_tmp),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_tp_tmp.ic_data_month,
        ic_demo_tp_tmp.sales_force_id,
        ic_demo_tp_tmp.area_number,
        ic_demo_tp_tmp.region_number,
        ic_demo_tp_tmp.territory_number,
        ic_demo_tp_tmp.ims_id,
        ic_demo_tp_tmp.tvcmid,
        ic_demo_tp_tmp.outlet_code,
        ic_demo_tp_tmp.va_station_number,
        ic_demo_tp_tmp.specialty,
        ic_demo_tp_tmp.last_name,
        ic_demo_tp_tmp.first_name,
        ic_demo_tp_tmp.mid_name,
        ic_demo_tp_tmp.address_1,
        ic_demo_tp_tmp.address_2,
        ic_demo_tp_tmp.address_3,
        ic_demo_tp_tmp.city,
        ic_demo_tp_tmp.state,
        ic_demo_tp_tmp.zip,
        ic_demo_tp_tmp.address_source,
        ic_demo_tp_tmp.pdrp_flag,
        ic_demo_tp_tmp.pdrp_date,
        ic_demo_tp_tmp.np_pa_flag,
        ic_demo_tp_tmp.no_spend,
        ic_demo_tp_tmp.ama_no_contact_flag,
        ic_demo_tp_tmp.join_key,
        ic_demo_tp_tmp.row_source,
        ic_demo_tp_tmp.row_create_date,
        ic_demo_tp_tmp.outlet_dea,
        ic_demo_tp_tmp.secondary_specialty
 FROM sandbox.ic_demo_tp_tmp
 ORDER BY ic_demo_tp_tmp.area_number,
          ic_demo_tp_tmp.region_number,
          ic_demo_tp_tmp.territory_number,
          ic_demo_tp_tmp.ims_id,
          ic_demo_tp_tmp.tvcmid
SEGMENTED BY hash(ic_demo_tp_tmp.ic_data_month, ic_demo_tp_tmp.tvcmid, ic_demo_tp_tmp.outlet_code, ic_demo_tp_tmp.mid_name, ic_demo_tp_tmp.state, ic_demo_tp_tmp.zip, ic_demo_tp_tmp.pdrp_flag, ic_demo_tp_tmp.pdrp_date, ic_demo_tp_tmp.np_pa_flag, ic_demo_tp_tmp.no_spend, ic_demo_tp_tmp.ama_no_contact_flag, ic_demo_tp_tmp.row_create_date, ic_demo_tp_tmp.ims_id, ic_demo_tp_tmp.va_station_number, ic_demo_tp_tmp.specialty, ic_demo_tp_tmp.join_key, ic_demo_tp_tmp.area_number, ic_demo_tp_tmp.region_number, ic_demo_tp_tmp.territory_number, ic_demo_tp_tmp.sales_force_id, ic_demo_tp_tmp.first_name, ic_demo_tp_tmp.city, ic_demo_tp_tmp.address_source, ic_demo_tp_tmp.last_name, ic_demo_tp_tmp.address_1, ic_demo_tp_tmp.address_2, ic_demo_tp_tmp.address_3, ic_demo_tp_tmp.row_source) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt03182022_super /*+basename(Austedo_PSRF_Utilization_Rpt03182022),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt03182022 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs", Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_032522_super /*+basename(Austedo_PSRF_Utilization_Rpt_032522),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_032522 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs", Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI) ALL NODES;

CREATE PROJECTION sandbox.sfa_affl_b0 /*+basename(sfa_affl),createtype(A)*/ 
(
 affiliated_from_id,
 affiliated_from_account_type,
 affiliated_from_ims_id,
 affiliated_from_ims_outlet_cd,
 affiliated_from_acct_demo_id,
 affiliated_from_bp_code,
 affiliated_from_tvcmid,
 affiliated_to_id,
 affiliated_to_account_type,
 affiliated_to_ims_id,
 affiliated_to_ims_outlet_code,
 affiliated_to_acct_demo_id,
 affiliated_to_bp_code,
 affiliated_to_tvcmid,
 role,
 lastmodifieddate,
 sales_force_id,
 territory_number,
 employee_full_name,
 employee_id
)
AS
 SELECT sfa_affl.affiliated_from_id,
        sfa_affl.affiliated_from_account_type,
        sfa_affl.affiliated_from_ims_id,
        sfa_affl.affiliated_from_ims_outlet_cd,
        sfa_affl.affiliated_from_acct_demo_id,
        sfa_affl.affiliated_from_bp_code,
        sfa_affl.affiliated_from_tvcmid,
        sfa_affl.affiliated_to_id,
        sfa_affl.affiliated_to_account_type,
        sfa_affl.affiliated_to_ims_id,
        sfa_affl.affiliated_to_ims_outlet_code,
        sfa_affl.affiliated_to_acct_demo_id,
        sfa_affl.affiliated_to_bp_code,
        sfa_affl.affiliated_to_tvcmid,
        sfa_affl.role,
        sfa_affl.lastmodifieddate,
        sfa_affl.sales_force_id,
        sfa_affl.territory_number,
        sfa_affl.employee_full_name,
        sfa_affl.employee_id
 FROM sandbox.sfa_affl
 ORDER BY sfa_affl.affiliated_from_id,
          sfa_affl.affiliated_from_account_type,
          sfa_affl.affiliated_from_ims_id,
          sfa_affl.affiliated_from_ims_outlet_cd,
          sfa_affl.affiliated_from_acct_demo_id,
          sfa_affl.affiliated_from_bp_code,
          sfa_affl.affiliated_from_tvcmid,
          sfa_affl.affiliated_to_id,
          sfa_affl.affiliated_to_account_type,
          sfa_affl.affiliated_to_ims_id,
          sfa_affl.affiliated_to_ims_outlet_code,
          sfa_affl.affiliated_to_acct_demo_id,
          sfa_affl.affiliated_to_bp_code,
          sfa_affl.affiliated_to_tvcmid,
          sfa_affl.role,
          sfa_affl.lastmodifieddate,
          sfa_affl.sales_force_id,
          sfa_affl.territory_number,
          sfa_affl.employee_full_name,
          sfa_affl.employee_id
SEGMENTED BY hash(sfa_affl.affiliated_from_id) ALL NODES;

CREATE PROJECTION sandbox.TRIAL_CARD_LTC_HCP_DETAIL_b0 /*+basename(TRIAL_CARD_LTC_HCP_DETAIL),createtype(L)*/ 
(
 "Activity Date",
 "Internal Contact ID",
 "Current or Final Disposition",
 "Facility ID",
 "Display Name",
 Geography,
 "Group",
 "Decile Group",
 Decile,
 "HD - Person Detailed First Name",
 "HD - Person Detailed Last Name",
 "HD - Person Detailed Title",
 "HD - Resident's receiving anitpsychotic treatment?",
 "HD - Familiar with tardive dyskinesia?",
 "HD - Resident's in care that suffer from TD?",
 "HD - Seen similar wide-ranging effects in residents with TD?",
 "HD - Process for indentifying and diagnosing TD",
 "HD - Protocols for managing TD?",
 "HD - Key elements of TD management?",
 "HD - Continue Discussion?",
 "HD - Suggested contact First Name",
 "HD - Suggested contact Last Name",
 "HD - Suggested contact Title",
 "HD - Suggested contact Phone",
 "HD - Suggested contact Email",
 "HD - Familiar with Austedo?",
 "HD - Questions on clinical studies?",
 "HD - Questions on Safety Info?",
 "HD - Interested in future in-service Presentations?",
 "HD - In-service contact First Name",
 "HD - In-service contact Last Name",
 "HD - In-service contact Title",
 "HD - In-service contact Phone",
 "HD - In-service contact Email",
 "HD - In-service contact Preferred Day of the Week",
 "FD - Follow up Materials?",
 "HD - Facility Name",
 "HD - Attn",
 "HD - Street Address",
 "HD - City",
 "HD - State",
 "HD - Postal code",
 "Call Date 1",
 "Call Disposition Attempt 1",
 "Call Date 2",
 "Call Disposition Attempt 2",
 "Call Date 3",
 "Call Disposition Attempt 3",
 "Archer Rep",
 "Completed By",
 "Archer Lead Score",
 Subject,
 "Activity Type",
 "Activity ID"
)
AS
 SELECT TRIAL_CARD_LTC_HCP_DETAIL."Activity Date",
        TRIAL_CARD_LTC_HCP_DETAIL."Internal Contact ID",
        TRIAL_CARD_LTC_HCP_DETAIL."Current or Final Disposition",
        TRIAL_CARD_LTC_HCP_DETAIL."Facility ID",
        TRIAL_CARD_LTC_HCP_DETAIL."Display Name",
        TRIAL_CARD_LTC_HCP_DETAIL.Geography,
        TRIAL_CARD_LTC_HCP_DETAIL."Group",
        TRIAL_CARD_LTC_HCP_DETAIL."Decile Group",
        TRIAL_CARD_LTC_HCP_DETAIL.Decile,
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Person Detailed First Name",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Person Detailed Last Name",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Person Detailed Title",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Resident's receiving anitpsychotic treatment?",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Familiar with tardive dyskinesia?",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Resident's in care that suffer from TD?",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Seen similar wide-ranging effects in residents with TD?",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Process for indentifying and diagnosing TD",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Protocols for managing TD?",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Key elements of TD management?",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Continue Discussion?",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Suggested contact First Name",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Suggested contact Last Name",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Suggested contact Title",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Suggested contact Phone",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Suggested contact Email",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Familiar with Austedo?",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Questions on clinical studies?",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Questions on Safety Info?",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Interested in future in-service Presentations?",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - In-service contact First Name",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - In-service contact Last Name",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - In-service contact Title",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - In-service contact Phone",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - In-service contact Email",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - In-service contact Preferred Day of the Week",
        TRIAL_CARD_LTC_HCP_DETAIL."FD - Follow up Materials?",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Facility Name",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Attn",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Street Address",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - City",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - State",
        TRIAL_CARD_LTC_HCP_DETAIL."HD - Postal code",
        TRIAL_CARD_LTC_HCP_DETAIL."Call Date 1",
        TRIAL_CARD_LTC_HCP_DETAIL."Call Disposition Attempt 1",
        TRIAL_CARD_LTC_HCP_DETAIL."Call Date 2",
        TRIAL_CARD_LTC_HCP_DETAIL."Call Disposition Attempt 2",
        TRIAL_CARD_LTC_HCP_DETAIL."Call Date 3",
        TRIAL_CARD_LTC_HCP_DETAIL."Call Disposition Attempt 3",
        TRIAL_CARD_LTC_HCP_DETAIL."Archer Rep",
        TRIAL_CARD_LTC_HCP_DETAIL."Completed By",
        TRIAL_CARD_LTC_HCP_DETAIL."Archer Lead Score",
        TRIAL_CARD_LTC_HCP_DETAIL.Subject,
        TRIAL_CARD_LTC_HCP_DETAIL."Activity Type",
        TRIAL_CARD_LTC_HCP_DETAIL."Activity ID"
 FROM sandbox.TRIAL_CARD_LTC_HCP_DETAIL
 ORDER BY TRIAL_CARD_LTC_HCP_DETAIL."Activity Date",
          TRIAL_CARD_LTC_HCP_DETAIL."Internal Contact ID",
          TRIAL_CARD_LTC_HCP_DETAIL."Current or Final Disposition",
          TRIAL_CARD_LTC_HCP_DETAIL."Facility ID",
          TRIAL_CARD_LTC_HCP_DETAIL."Display Name",
          TRIAL_CARD_LTC_HCP_DETAIL.Geography,
          TRIAL_CARD_LTC_HCP_DETAIL."Group",
          TRIAL_CARD_LTC_HCP_DETAIL."Decile Group"
SEGMENTED BY hash(TRIAL_CARD_LTC_HCP_DETAIL."Activity Date", TRIAL_CARD_LTC_HCP_DETAIL."Internal Contact ID", TRIAL_CARD_LTC_HCP_DETAIL."Decile Group", TRIAL_CARD_LTC_HCP_DETAIL.Decile, TRIAL_CARD_LTC_HCP_DETAIL."HD - Suggested contact Phone", TRIAL_CARD_LTC_HCP_DETAIL."HD - In-service contact Phone", TRIAL_CARD_LTC_HCP_DETAIL."HD - State", TRIAL_CARD_LTC_HCP_DETAIL."Archer Lead Score") ALL NODES;

CREATE PROJECTION sandbox."Austedo_PSRF_Utilization _Null_TERR_b0" /*+basename(Austedo_PSRF_Utilization _Null_TERR),createtype(L)*/ 
(
 territory_name,
 PrescriberName,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT "Austedo_PSRF_Utilization _Null_TERR".territory_name,
        "Austedo_PSRF_Utilization _Null_TERR".PrescriberName,
        "Austedo_PSRF_Utilization _Null_TERR".PrescriberNPI,
        "Austedo_PSRF_Utilization _Null_TERR"."Current Week PSRFs",
        "Austedo_PSRF_Utilization _Null_TERR"."Current Month PSRFs",
        "Austedo_PSRF_Utilization _Null_TERR".HCP_Signature_Yes,
        "Austedo_PSRF_Utilization _Null_TERR".HCP_Signature_No,
        "Austedo_PSRF_Utilization _Null_TERR".Patient_Auth_Yes,
        "Austedo_PSRF_Utilization _Null_TERR".Patient_Auth_No,
        "Austedo_PSRF_Utilization _Null_TERR"."YTD PSRFs"
 FROM sandbox."Austedo_PSRF_Utilization _Null_TERR"
 ORDER BY "Austedo_PSRF_Utilization _Null_TERR".territory_name,
          "Austedo_PSRF_Utilization _Null_TERR".PrescriberName,
          "Austedo_PSRF_Utilization _Null_TERR".PrescriberNPI,
          "Austedo_PSRF_Utilization _Null_TERR"."Current Week PSRFs",
          "Austedo_PSRF_Utilization _Null_TERR"."Current Month PSRFs",
          "Austedo_PSRF_Utilization _Null_TERR".HCP_Signature_Yes,
          "Austedo_PSRF_Utilization _Null_TERR".HCP_Signature_No,
          "Austedo_PSRF_Utilization _Null_TERR".Patient_Auth_Yes
SEGMENTED BY hash("Austedo_PSRF_Utilization _Null_TERR".PrescriberNPI, "Austedo_PSRF_Utilization _Null_TERR"."Current Week PSRFs", "Austedo_PSRF_Utilization _Null_TERR"."Current Month PSRFs", "Austedo_PSRF_Utilization _Null_TERR".HCP_Signature_Yes, "Austedo_PSRF_Utilization _Null_TERR".HCP_Signature_No, "Austedo_PSRF_Utilization _Null_TERR".Patient_Auth_Yes, "Austedo_PSRF_Utilization _Null_TERR".Patient_Auth_No, "Austedo_PSRF_Utilization _Null_TERR"."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.veeva_sugg_aust_b0 /*+basename(veeva_sugg_aust),createtype(A)*/ 
(
 account_priority_score_vod__c,
 account_vod__c,
 display_dismiss_vod__c,
 display_mark_as_complete_vod__c,
 display_score_vod__c,
 email_template_id_vod__c,
 email_template_vault_id_vod__c,
 email_template_vod__c,
 expiration_date_vod__c,
 marked_as_complete_vod__c,
 mark_complete_count_vod__c,
 name,
 ownerid,
 posted_date,
 priority_vod__c,
 reason_vod__c,
 record_type_name_vod__c,
 suppress_reason_vod__c,
 title_vod__c,
 business_rule_name,
 product,
 days_since_last_call,
 calls_per_mth,
 austedo_decile,
 avg_new_dose,
 avg_cont_dose,
 ss_flag,
 austedo_rx,
 hcp_name,
 rep_name,
 batch_num
)
AS
 SELECT veeva_sugg_aust.account_priority_score_vod__c,
        veeva_sugg_aust.account_vod__c,
        veeva_sugg_aust.display_dismiss_vod__c,
        veeva_sugg_aust.display_mark_as_complete_vod__c,
        veeva_sugg_aust.display_score_vod__c,
        veeva_sugg_aust.email_template_id_vod__c,
        veeva_sugg_aust.email_template_vault_id_vod__c,
        veeva_sugg_aust.email_template_vod__c,
        veeva_sugg_aust.expiration_date_vod__c,
        veeva_sugg_aust.marked_as_complete_vod__c,
        veeva_sugg_aust.mark_complete_count_vod__c,
        veeva_sugg_aust.name,
        veeva_sugg_aust.ownerid,
        veeva_sugg_aust.posted_date,
        veeva_sugg_aust.priority_vod__c,
        veeva_sugg_aust.reason_vod__c,
        veeva_sugg_aust.record_type_name_vod__c,
        veeva_sugg_aust.suppress_reason_vod__c,
        veeva_sugg_aust.title_vod__c,
        veeva_sugg_aust.business_rule_name,
        veeva_sugg_aust.product,
        veeva_sugg_aust.days_since_last_call,
        veeva_sugg_aust.calls_per_mth,
        veeva_sugg_aust.austedo_decile,
        veeva_sugg_aust.avg_new_dose,
        veeva_sugg_aust.avg_cont_dose,
        veeva_sugg_aust.ss_flag,
        veeva_sugg_aust.austedo_rx,
        veeva_sugg_aust.hcp_name,
        veeva_sugg_aust.rep_name,
        veeva_sugg_aust.batch_num
 FROM sandbox.veeva_sugg_aust
 ORDER BY veeva_sugg_aust.account_priority_score_vod__c,
          veeva_sugg_aust.account_vod__c,
          veeva_sugg_aust.display_dismiss_vod__c,
          veeva_sugg_aust.display_mark_as_complete_vod__c,
          veeva_sugg_aust.display_score_vod__c,
          veeva_sugg_aust.email_template_id_vod__c,
          veeva_sugg_aust.email_template_vault_id_vod__c,
          veeva_sugg_aust.email_template_vod__c
SEGMENTED BY hash(veeva_sugg_aust.account_priority_score_vod__c, veeva_sugg_aust.expiration_date_vod__c, veeva_sugg_aust.mark_complete_count_vod__c, veeva_sugg_aust.posted_date, veeva_sugg_aust.days_since_last_call, veeva_sugg_aust.calls_per_mth, veeva_sugg_aust.avg_new_dose, veeva_sugg_aust.avg_cont_dose) ALL NODES;

CREATE PROJECTION sandbox.Austedo_TargetUniverse_H2022_b0 /*+basename(Austedo_TargetUniverse_H2022),createtype(L)*/ 
(
 ims_id,
 Source,
 Quintile,
 "ZS Quintile to use"
)
AS
 SELECT Austedo_TargetUniverse_H2022.ims_id,
        Austedo_TargetUniverse_H2022.Source,
        Austedo_TargetUniverse_H2022.Quintile,
        Austedo_TargetUniverse_H2022."ZS Quintile to use"
 FROM sandbox.Austedo_TargetUniverse_H2022
 ORDER BY Austedo_TargetUniverse_H2022.ims_id,
          Austedo_TargetUniverse_H2022.Source,
          Austedo_TargetUniverse_H2022.Quintile,
          Austedo_TargetUniverse_H2022."ZS Quintile to use"
SEGMENTED BY hash(Austedo_TargetUniverse_H2022.ims_id, Austedo_TargetUniverse_H2022.Quintile, Austedo_TargetUniverse_H2022."ZS Quintile to use", Austedo_TargetUniverse_H2022.Source) ALL NODES;

CREATE PROJECTION sandbox.AJOVY_NPP_Segment_b0 /*+basename(AJOVY_NPP_Segment),createtype(L)*/ 
(
 TVCMID,
 IMS_ID,
 NPI,
 Basket_name,
 Segment
)
AS
 SELECT AJOVY_NPP_Segment.TVCMID,
        AJOVY_NPP_Segment.IMS_ID,
        AJOVY_NPP_Segment.NPI,
        AJOVY_NPP_Segment.Basket_name,
        AJOVY_NPP_Segment.Segment
 FROM sandbox.AJOVY_NPP_Segment
 ORDER BY AJOVY_NPP_Segment.TVCMID
SEGMENTED BY hash(AJOVY_NPP_Segment.TVCMID) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_052022_super /*+basename(Austedo_PSRF_Utilization_Rpt_052022),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_052022 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00.PrescriberState, Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.datamart_activity_hub_v4_b0 /*+basename(datamart_activity_hub_v4),createtype(A)*/ 
(
 activity_id,
 federation_id,
 contact,
 source_name,
 "datetime",
 trackback_id,
 previous_activity,
 level_name,
 activity_role_name,
 type_name,
 native_type,
 details,
 line_item_id,
 brand_name,
 activity,
 line_item_datetime,
 line_item_previous_line_item,
 line_item_trackback_id,
 line_item_details,
 line_item_type_name,
 line_item_native_type,
 basket_id,
 web_url
)
AS
 SELECT datamart_activity_hub_v4.activity_id,
        datamart_activity_hub_v4.federation_id,
        datamart_activity_hub_v4.contact,
        datamart_activity_hub_v4.source_name,
        datamart_activity_hub_v4."datetime",
        datamart_activity_hub_v4.trackback_id,
        datamart_activity_hub_v4.previous_activity,
        datamart_activity_hub_v4.level_name,
        datamart_activity_hub_v4.activity_role_name,
        datamart_activity_hub_v4.type_name,
        datamart_activity_hub_v4.native_type,
        datamart_activity_hub_v4.details,
        datamart_activity_hub_v4.line_item_id,
        datamart_activity_hub_v4.brand_name,
        datamart_activity_hub_v4.activity,
        datamart_activity_hub_v4.line_item_datetime,
        datamart_activity_hub_v4.line_item_previous_line_item,
        datamart_activity_hub_v4.line_item_trackback_id,
        datamart_activity_hub_v4.line_item_details,
        datamart_activity_hub_v4.line_item_type_name,
        datamart_activity_hub_v4.line_item_native_type,
        datamart_activity_hub_v4.basket_id,
        datamart_activity_hub_v4.web_url
 FROM sandbox.datamart_activity_hub_v4
 ORDER BY datamart_activity_hub_v4.activity_id
SEGMENTED BY hash(datamart_activity_hub_v4.activity_id) ALL NODES;

CREATE PROJECTION sandbox.act_hub_all_b0 /*+basename(act_hub_all),createtype(A)*/ 
(
 npi,
 activity_id,
 federation_id,
 contact,
 source_name,
 "datetime",
 trackback_id,
 previous_activity,
 level_name,
 activity_role_name,
 type_name,
 native_type,
 details,
 line_item_id,
 brand_name,
 activity,
 line_item_datetime,
 line_item_previous_line_item,
 line_item_trackback_id,
 line_item_details,
 line_item_type_name,
 line_item_native_type,
 basket_id,
 web_url
)
AS
 SELECT act_hub_all.npi,
        act_hub_all.activity_id,
        act_hub_all.federation_id,
        act_hub_all.contact,
        act_hub_all.source_name,
        act_hub_all."datetime",
        act_hub_all.trackback_id,
        act_hub_all.previous_activity,
        act_hub_all.level_name,
        act_hub_all.activity_role_name,
        act_hub_all.type_name,
        act_hub_all.native_type,
        act_hub_all.details,
        act_hub_all.line_item_id,
        act_hub_all.brand_name,
        act_hub_all.activity,
        act_hub_all.line_item_datetime,
        act_hub_all.line_item_previous_line_item,
        act_hub_all.line_item_trackback_id,
        act_hub_all.line_item_details,
        act_hub_all.line_item_type_name,
        act_hub_all.line_item_native_type,
        act_hub_all.basket_id,
        act_hub_all.web_url
 FROM sandbox.act_hub_all
 ORDER BY act_hub_all.npi,
          act_hub_all.activity_id,
          act_hub_all.federation_id,
          act_hub_all.contact,
          act_hub_all.source_name,
          act_hub_all."datetime",
          act_hub_all.trackback_id,
          act_hub_all.previous_activity
SEGMENTED BY hash(act_hub_all.federation_id) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_052022b_super /*+basename(Austedo_PSRF_Utilization_Rpt_052022b),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_052022b Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00.PrescriberState, Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.outlets_missing_tvcmid_b0 /*+basename(outlets_missing_tvcmid),createtype(L)*/ 
(
 TVCMID,
 OUTLET_CODE,
 OUTLET_NAME,
 OUTLET_ZIP,
 SUBCATEGORY_CODE
)
AS
 SELECT outlets_missing_tvcmid.TVCMID,
        outlets_missing_tvcmid.OUTLET_CODE,
        outlets_missing_tvcmid.OUTLET_NAME,
        outlets_missing_tvcmid.OUTLET_ZIP,
        outlets_missing_tvcmid.SUBCATEGORY_CODE
 FROM sandbox.outlets_missing_tvcmid
 ORDER BY outlets_missing_tvcmid.TVCMID,
          outlets_missing_tvcmid.OUTLET_CODE,
          outlets_missing_tvcmid.OUTLET_NAME,
          outlets_missing_tvcmid.OUTLET_ZIP,
          outlets_missing_tvcmid.SUBCATEGORY_CODE
SEGMENTED BY hash(outlets_missing_tvcmid.TVCMID, outlets_missing_tvcmid.OUTLET_CODE, outlets_missing_tvcmid.OUTLET_ZIP, outlets_missing_tvcmid.SUBCATEGORY_CODE, outlets_missing_tvcmid.OUTLET_NAME) ALL NODES;

CREATE PROJECTION sandbox.TH_Call_Activity_00_b0 /*+basename(TH_Call_Activity_00),createtype(L)*/ 
(
 sales_force_id,
 call_id,
 veeva_account_id,
 ims_id,
 ims_outlet_id,
 customer_type,
 first_name,
 last_name,
 call_type,
 legacy_call_type,
 ceph_id,
 dea_num,
 rep_id,
 rep_first_name,
 rep_last_name,
 territory_number,
 zip_on_call,
 call_date,
 submit_date,
 attendees,
 attendee_type,
 area_number,
 region_number,
 tvcmid,
 call_recordtype,
 call_duration,
 call_datetime,
 call_timezone,
 how_executed,
 remote_meeting_id,
 parent_call_id,
 is_parent_call,
 t21s10_austedo_indication,
 Outcomes_from_Visit,
 Visit_Trigger,
 Visit_Trigger_Date,
 call_name,
 veeva_address_id,
 account_name,
 address,
 city,
 state,
 zip_code,
 npi
)
AS
 SELECT TH_Call_Activity_00.sales_force_id,
        TH_Call_Activity_00.call_id,
        TH_Call_Activity_00.veeva_account_id,
        TH_Call_Activity_00.ims_id,
        TH_Call_Activity_00.ims_outlet_id,
        TH_Call_Activity_00.customer_type,
        TH_Call_Activity_00.first_name,
        TH_Call_Activity_00.last_name,
        TH_Call_Activity_00.call_type,
        TH_Call_Activity_00.legacy_call_type,
        TH_Call_Activity_00.ceph_id,
        TH_Call_Activity_00.dea_num,
        TH_Call_Activity_00.rep_id,
        TH_Call_Activity_00.rep_first_name,
        TH_Call_Activity_00.rep_last_name,
        TH_Call_Activity_00.territory_number,
        TH_Call_Activity_00.zip_on_call,
        TH_Call_Activity_00.call_date,
        TH_Call_Activity_00.submit_date,
        TH_Call_Activity_00.attendees,
        TH_Call_Activity_00.attendee_type,
        TH_Call_Activity_00.area_number,
        TH_Call_Activity_00.region_number,
        TH_Call_Activity_00.tvcmid,
        TH_Call_Activity_00.call_recordtype,
        TH_Call_Activity_00.call_duration,
        TH_Call_Activity_00.call_datetime,
        TH_Call_Activity_00.call_timezone,
        TH_Call_Activity_00.how_executed,
        TH_Call_Activity_00.remote_meeting_id,
        TH_Call_Activity_00.parent_call_id,
        TH_Call_Activity_00.is_parent_call,
        TH_Call_Activity_00.t21s10_austedo_indication,
        TH_Call_Activity_00.Outcomes_from_Visit,
        TH_Call_Activity_00.Visit_Trigger,
        TH_Call_Activity_00.Visit_Trigger_Date,
        TH_Call_Activity_00.call_name,
        TH_Call_Activity_00.veeva_address_id,
        TH_Call_Activity_00.account_name,
        TH_Call_Activity_00.address,
        TH_Call_Activity_00.city,
        TH_Call_Activity_00.state,
        TH_Call_Activity_00.zip_code,
        TH_Call_Activity_00.npi
 FROM sandbox.TH_Call_Activity_00
 ORDER BY TH_Call_Activity_00.sales_force_id,
          TH_Call_Activity_00.call_id,
          TH_Call_Activity_00.veeva_account_id,
          TH_Call_Activity_00.ims_id,
          TH_Call_Activity_00.ims_outlet_id,
          TH_Call_Activity_00.customer_type,
          TH_Call_Activity_00.first_name,
          TH_Call_Activity_00.last_name
SEGMENTED BY hash(TH_Call_Activity_00.call_date, TH_Call_Activity_00.submit_date, TH_Call_Activity_00.attendees, TH_Call_Activity_00.call_duration, TH_Call_Activity_00.call_datetime, TH_Call_Activity_00.Visit_Trigger_Date, TH_Call_Activity_00.state, TH_Call_Activity_00.zip_on_call) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt06102022_super /*+basename(Austedo_PSRF_Utilization_Rpt06102022),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt06102022 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00.PrescriberState, Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.pres_comb_frozen_TR_Q32022_b0 /*+basename(pres_comb_frozen_TR_Q32022),createtype(A)*/ 
(
 start_date,
 end_date,
 sales_force_id,
 ims_id,
 npi,
 tvcmid,
 veeva_account_id,
 specialty,
 first_name,
 middle_name,
 last_name,
 ptr_veeva_address_id,
 ptr_address_1,
 ptr_address_2,
 ptr_address_3,
 ptr_city,
 ptr_state,
 ptr_zip,
 ptr_phone,
 ptr_territory_num,
 ptr_territory_type,
 ptr_address_source,
 ptr_mailable,
 dea_num,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 email,
 degree,
 address_id,
 address_latitude,
 address_longitude,
 row_source,
 freeze_reason,
 freeze_date,
 secondary_specialty
)
AS
 SELECT pres_comb_frozen_TR_Q32022.start_date,
        pres_comb_frozen_TR_Q32022.end_date,
        pres_comb_frozen_TR_Q32022.sales_force_id,
        pres_comb_frozen_TR_Q32022.ims_id,
        pres_comb_frozen_TR_Q32022.npi,
        pres_comb_frozen_TR_Q32022.tvcmid,
        pres_comb_frozen_TR_Q32022.veeva_account_id,
        pres_comb_frozen_TR_Q32022.specialty,
        pres_comb_frozen_TR_Q32022.first_name,
        pres_comb_frozen_TR_Q32022.middle_name,
        pres_comb_frozen_TR_Q32022.last_name,
        pres_comb_frozen_TR_Q32022.ptr_veeva_address_id,
        pres_comb_frozen_TR_Q32022.ptr_address_1,
        pres_comb_frozen_TR_Q32022.ptr_address_2,
        pres_comb_frozen_TR_Q32022.ptr_address_3,
        pres_comb_frozen_TR_Q32022.ptr_city,
        pres_comb_frozen_TR_Q32022.ptr_state,
        pres_comb_frozen_TR_Q32022.ptr_zip,
        pres_comb_frozen_TR_Q32022.ptr_phone,
        pres_comb_frozen_TR_Q32022.ptr_territory_num,
        pres_comb_frozen_TR_Q32022.ptr_territory_type,
        pres_comb_frozen_TR_Q32022.ptr_address_source,
        pres_comb_frozen_TR_Q32022.ptr_mailable,
        pres_comb_frozen_TR_Q32022.dea_num,
        pres_comb_frozen_TR_Q32022.pdrp_flag,
        pres_comb_frozen_TR_Q32022.pdrp_date,
        pres_comb_frozen_TR_Q32022.np_pa_flag,
        pres_comb_frozen_TR_Q32022.no_spend,
        pres_comb_frozen_TR_Q32022.ama_no_contact_flag,
        pres_comb_frozen_TR_Q32022.email,
        pres_comb_frozen_TR_Q32022.degree,
        pres_comb_frozen_TR_Q32022.address_id,
        pres_comb_frozen_TR_Q32022.address_latitude,
        pres_comb_frozen_TR_Q32022.address_longitude,
        pres_comb_frozen_TR_Q32022.row_source,
        pres_comb_frozen_TR_Q32022.freeze_reason,
        pres_comb_frozen_TR_Q32022.freeze_date,
        pres_comb_frozen_TR_Q32022.secondary_specialty
 FROM sandbox.pres_comb_frozen_TR_Q32022
 ORDER BY pres_comb_frozen_TR_Q32022.ims_id,
          pres_comb_frozen_TR_Q32022.npi,
          pres_comb_frozen_TR_Q32022.tvcmid,
          pres_comb_frozen_TR_Q32022.veeva_account_id,
          pres_comb_frozen_TR_Q32022.specialty,
          pres_comb_frozen_TR_Q32022.first_name,
          pres_comb_frozen_TR_Q32022.middle_name,
          pres_comb_frozen_TR_Q32022.last_name,
          pres_comb_frozen_TR_Q32022.ptr_veeva_address_id,
          pres_comb_frozen_TR_Q32022.ptr_address_1,
          pres_comb_frozen_TR_Q32022.ptr_address_2,
          pres_comb_frozen_TR_Q32022.ptr_address_3,
          pres_comb_frozen_TR_Q32022.ptr_city,
          pres_comb_frozen_TR_Q32022.ptr_state,
          pres_comb_frozen_TR_Q32022.ptr_zip,
          pres_comb_frozen_TR_Q32022.ptr_phone,
          pres_comb_frozen_TR_Q32022.ptr_territory_num,
          pres_comb_frozen_TR_Q32022.ptr_territory_type,
          pres_comb_frozen_TR_Q32022.ptr_address_source,
          pres_comb_frozen_TR_Q32022.ptr_mailable,
          pres_comb_frozen_TR_Q32022.dea_num,
          pres_comb_frozen_TR_Q32022.pdrp_flag,
          pres_comb_frozen_TR_Q32022.pdrp_date,
          pres_comb_frozen_TR_Q32022.np_pa_flag,
          pres_comb_frozen_TR_Q32022.no_spend,
          pres_comb_frozen_TR_Q32022.ama_no_contact_flag,
          pres_comb_frozen_TR_Q32022.email,
          pres_comb_frozen_TR_Q32022.degree,
          pres_comb_frozen_TR_Q32022.address_id,
          pres_comb_frozen_TR_Q32022.address_latitude,
          pres_comb_frozen_TR_Q32022.address_longitude,
          pres_comb_frozen_TR_Q32022.row_source
SEGMENTED BY hash(pres_comb_frozen_TR_Q32022.tvcmid, pres_comb_frozen_TR_Q32022.ptr_state, pres_comb_frozen_TR_Q32022.ptr_zip, pres_comb_frozen_TR_Q32022.ptr_mailable, pres_comb_frozen_TR_Q32022.pdrp_flag, pres_comb_frozen_TR_Q32022.pdrp_date, pres_comb_frozen_TR_Q32022.np_pa_flag, pres_comb_frozen_TR_Q32022.no_spend, pres_comb_frozen_TR_Q32022.ama_no_contact_flag, pres_comb_frozen_TR_Q32022.address_id, pres_comb_frozen_TR_Q32022.ims_id, pres_comb_frozen_TR_Q32022.npi, pres_comb_frozen_TR_Q32022.dea_num, pres_comb_frozen_TR_Q32022.ptr_territory_num, pres_comb_frozen_TR_Q32022.sales_force_id, pres_comb_frozen_TR_Q32022.veeva_account_id, pres_comb_frozen_TR_Q32022.ptr_veeva_address_id, pres_comb_frozen_TR_Q32022.address_latitude, pres_comb_frozen_TR_Q32022.address_longitude, pres_comb_frozen_TR_Q32022.ptr_territory_type, pres_comb_frozen_TR_Q32022.ptr_phone, pres_comb_frozen_TR_Q32022.first_name, pres_comb_frozen_TR_Q32022.middle_name, pres_comb_frozen_TR_Q32022.last_name, pres_comb_frozen_TR_Q32022.ptr_city, pres_comb_frozen_TR_Q32022.ptr_address_source, pres_comb_frozen_TR_Q32022.ptr_address_1, pres_comb_frozen_TR_Q32022.ptr_address_2, pres_comb_frozen_TR_Q32022.ptr_address_3, pres_comb_frozen_TR_Q32022.email, pres_comb_frozen_TR_Q32022.degree, pres_comb_frozen_TR_Q32022.row_source) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt06242022_2_super /*+basename(Austedo_PSRF_Utilization_Rpt06242022_2),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt06242022_2 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00.PrescriberState, Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_02_b0 /*+basename(Austedo_PSRF_Utilization_Rpt_02),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 PrescriberNPI1,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_02.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_02.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_02.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_02.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_02.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_02.PrescriberNPI1,
        Austedo_PSRF_Utilization_Rpt_02."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_02."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_02.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_02.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_02.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_02.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_02."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_02
 ORDER BY Austedo_PSRF_Utilization_Rpt_02.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_02.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_02.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_02.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_02.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_02.PrescriberNPI1,
          Austedo_PSRF_Utilization_Rpt_02."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_02."Current Month PSRFs"
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_02.PrescriberState, Austedo_PSRF_Utilization_Rpt_02.PrescriberNPI1, Austedo_PSRF_Utilization_Rpt_02."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_02."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_02.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_02.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_02.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_02.Patient_Auth_No) ALL NODES;

CREATE PROJECTION sandbox.Genoa_Roster_Current_b0 /*+basename(Genoa_Roster_Current),createtype(L)*/ 
(
 Pharmacy_Status,
 Genoa_Site__,
 Street_Address_1,
 Street_Address_2,
 City,
 State,
 ZIP_Code,
 Main_Phone,
 Fax,
 DEA,
 DEA_Expiration,
 NPI,
 NCPDP,
 State_Issuing_License,
 Opening_Date,
 Location_Notes,
 Note_Effective_Date,
 Pharmacy_Contact
)
AS
 SELECT Genoa_Roster_Current.Pharmacy_Status,
        Genoa_Roster_Current.Genoa_Site__,
        Genoa_Roster_Current.Street_Address_1,
        Genoa_Roster_Current.Street_Address_2,
        Genoa_Roster_Current.City,
        Genoa_Roster_Current.State,
        Genoa_Roster_Current.ZIP_Code,
        Genoa_Roster_Current.Main_Phone,
        Genoa_Roster_Current.Fax,
        Genoa_Roster_Current.DEA,
        Genoa_Roster_Current.DEA_Expiration,
        Genoa_Roster_Current.NPI,
        Genoa_Roster_Current.NCPDP,
        Genoa_Roster_Current.State_Issuing_License,
        Genoa_Roster_Current.Opening_Date,
        Genoa_Roster_Current.Location_Notes,
        Genoa_Roster_Current.Note_Effective_Date,
        Genoa_Roster_Current.Pharmacy_Contact
 FROM sandbox.Genoa_Roster_Current
 ORDER BY Genoa_Roster_Current.Pharmacy_Status,
          Genoa_Roster_Current.Genoa_Site__,
          Genoa_Roster_Current.Street_Address_1,
          Genoa_Roster_Current.Street_Address_2,
          Genoa_Roster_Current.City,
          Genoa_Roster_Current.State,
          Genoa_Roster_Current.ZIP_Code,
          Genoa_Roster_Current.Main_Phone
SEGMENTED BY hash(Genoa_Roster_Current.Pharmacy_Status, Genoa_Roster_Current.Genoa_Site__, Genoa_Roster_Current.State, Genoa_Roster_Current.DEA_Expiration, Genoa_Roster_Current.NCPDP, Genoa_Roster_Current.State_Issuing_License, Genoa_Roster_Current.Opening_Date, Genoa_Roster_Current.Location_Notes) ALL NODES;

CREATE PROJECTION sandbox.ddd_exc_or_b0 /*+basename(ddd_exc_or),createtype(L)*/ 
(
 outlet_code,
 outlet_name,
 sub_cat
)
AS
 SELECT ddd_exc_or.outlet_code,
        ddd_exc_or.outlet_name,
        ddd_exc_or.sub_cat
 FROM sandbox.ddd_exc_or
 ORDER BY ddd_exc_or.outlet_code,
          ddd_exc_or.outlet_name,
          ddd_exc_or.sub_cat
SEGMENTED BY hash(ddd_exc_or.outlet_code, ddd_exc_or.outlet_name, ddd_exc_or.sub_cat) ALL NODES;

CREATE PROJECTION sandbox.Question_Response_07222022_b0 /*+basename(Question_Response_07222022),createtype(L)*/ 
(
 Id,
 IsDeleted,
 Name,
 RecordTypeId,
 CreatedDate,
 CreatedById,
 LastModifiedDate,
 LastModifiedById,
 SystemModstamp,
 MayEdit,
 IsLocked,
 Survey_Target_vod__c,
 Answer_Choice_vod__c,
 Date_vod__c,
 Datetime_vod__c,
 External_ID_vod__c,
 Mobile_ID_vod__c,
 Number_vod__c,
 Order_vod__c,
 Question_Text_vod__c,
 Required_vod__c,
 Response_Hash_vod__c,
 Response_vod__c,
 Score_vod__c,
 Survey_Question_vod__c,
 Text_vod__c,
 Type_vod__c,
 Decimal_vod__c,
 Confidential_TVA__c,
 Condition_vod__c,
 Inactive_Condition_vod__c,
 Source_ID_vod__c
)
AS
 SELECT Question_Response_07222022.Id,
        Question_Response_07222022.IsDeleted,
        Question_Response_07222022.Name,
        Question_Response_07222022.RecordTypeId,
        Question_Response_07222022.CreatedDate,
        Question_Response_07222022.CreatedById,
        Question_Response_07222022.LastModifiedDate,
        Question_Response_07222022.LastModifiedById,
        Question_Response_07222022.SystemModstamp,
        Question_Response_07222022.MayEdit,
        Question_Response_07222022.IsLocked,
        Question_Response_07222022.Survey_Target_vod__c,
        Question_Response_07222022.Answer_Choice_vod__c,
        Question_Response_07222022.Date_vod__c,
        Question_Response_07222022.Datetime_vod__c,
        Question_Response_07222022.External_ID_vod__c,
        Question_Response_07222022.Mobile_ID_vod__c,
        Question_Response_07222022.Number_vod__c,
        Question_Response_07222022.Order_vod__c,
        Question_Response_07222022.Question_Text_vod__c,
        Question_Response_07222022.Required_vod__c,
        Question_Response_07222022.Response_Hash_vod__c,
        Question_Response_07222022.Response_vod__c,
        Question_Response_07222022.Score_vod__c,
        Question_Response_07222022.Survey_Question_vod__c,
        Question_Response_07222022.Text_vod__c,
        Question_Response_07222022.Type_vod__c,
        Question_Response_07222022.Decimal_vod__c,
        Question_Response_07222022.Confidential_TVA__c,
        Question_Response_07222022.Condition_vod__c,
        Question_Response_07222022.Inactive_Condition_vod__c,
        Question_Response_07222022.Source_ID_vod__c
 FROM sandbox.Question_Response_07222022
 ORDER BY Question_Response_07222022.Id,
          Question_Response_07222022.IsDeleted,
          Question_Response_07222022.Name,
          Question_Response_07222022.RecordTypeId,
          Question_Response_07222022.CreatedDate,
          Question_Response_07222022.CreatedById,
          Question_Response_07222022.LastModifiedDate,
          Question_Response_07222022.LastModifiedById
SEGMENTED BY hash(Question_Response_07222022.CreatedDate, Question_Response_07222022.LastModifiedDate, Question_Response_07222022.SystemModstamp, Question_Response_07222022.Number_vod__c, Question_Response_07222022.Order_vod__c, Question_Response_07222022.Score_vod__c, Question_Response_07222022.Decimal_vod__c, Question_Response_07222022.Date_vod__c) ALL NODES;

CREATE PROJECTION sandbox.npa_demand_units_b0 /*+basename(npa_demand_units),createtype(L)*/ 
(
 Product,
 Channel,
 NDC_Details,
 EUTRx_May_2018,
 EUTRx_Jun_2018,
 EUTRx_Jul_2018,
 EUTRx_Aug_2018,
 EUTRx_Sep_2018,
 EUTRx_Oct_2018,
 EUTRx_Nov_2018,
 EUTRx_Dec_2018,
 EUTRx_Jan_2019,
 EUTRx_Feb_2019,
 EUTRx_Mar_2019,
 EUTRx_Apr_2019,
 EUTRx_May_2019,
 EUTRx_Jun_2019,
 EUTRx_Jul_2019,
 EUTRx_Aug_2019,
 EUTRx_Sep_2019,
 EUTRx_Oct_2019,
 EUTRx_Nov_2019,
 EUTRx_Dec_2019,
 EUTRx_Jan_2020,
 EUTRx_Feb_2020,
 EUTRx_Mar_2020,
 EUTRx_Apr_2020,
 EUTRx_May_2020,
 EUTRx_Jun_2020,
 EUTRx_Jul_2020,
 EUTRx_Aug_2020,
 EUTRx_Sep_2020,
 EUTRx_Oct_2020,
 EUTRx_Nov_2020,
 EUTRx_Dec_2020,
 EUTRx_Jan_2021,
 EUTRx_Feb_2021,
 EUTRx_Mar_2021,
 EUTRx_Apr_2021,
 EUTRx_May_2021,
 EUTRx_Jun_2021,
 EUTRx_Jul_2021,
 EUTRx_Aug_2021,
 EUTRx_Sep_2021,
 EUTRx_Oct_2021,
 EUTRx_Nov_2021,
 EUTRx_Dec_2021,
 EUTRx_Jan_2022,
 EUTRx_Feb_2022,
 EUTRx_Mar_2022,
 EUTRx_Apr_2022,
 EUTRx_May_2022,
 EUTRx_Jun_2022
)
AS
 SELECT npa_demand_units.Product,
        npa_demand_units.Channel,
        npa_demand_units.NDC_Details,
        npa_demand_units.EUTRx_May_2018,
        npa_demand_units.EUTRx_Jun_2018,
        npa_demand_units.EUTRx_Jul_2018,
        npa_demand_units.EUTRx_Aug_2018,
        npa_demand_units.EUTRx_Sep_2018,
        npa_demand_units.EUTRx_Oct_2018,
        npa_demand_units.EUTRx_Nov_2018,
        npa_demand_units.EUTRx_Dec_2018,
        npa_demand_units.EUTRx_Jan_2019,
        npa_demand_units.EUTRx_Feb_2019,
        npa_demand_units.EUTRx_Mar_2019,
        npa_demand_units.EUTRx_Apr_2019,
        npa_demand_units.EUTRx_May_2019,
        npa_demand_units.EUTRx_Jun_2019,
        npa_demand_units.EUTRx_Jul_2019,
        npa_demand_units.EUTRx_Aug_2019,
        npa_demand_units.EUTRx_Sep_2019,
        npa_demand_units.EUTRx_Oct_2019,
        npa_demand_units.EUTRx_Nov_2019,
        npa_demand_units.EUTRx_Dec_2019,
        npa_demand_units.EUTRx_Jan_2020,
        npa_demand_units.EUTRx_Feb_2020,
        npa_demand_units.EUTRx_Mar_2020,
        npa_demand_units.EUTRx_Apr_2020,
        npa_demand_units.EUTRx_May_2020,
        npa_demand_units.EUTRx_Jun_2020,
        npa_demand_units.EUTRx_Jul_2020,
        npa_demand_units.EUTRx_Aug_2020,
        npa_demand_units.EUTRx_Sep_2020,
        npa_demand_units.EUTRx_Oct_2020,
        npa_demand_units.EUTRx_Nov_2020,
        npa_demand_units.EUTRx_Dec_2020,
        npa_demand_units.EUTRx_Jan_2021,
        npa_demand_units.EUTRx_Feb_2021,
        npa_demand_units.EUTRx_Mar_2021,
        npa_demand_units.EUTRx_Apr_2021,
        npa_demand_units.EUTRx_May_2021,
        npa_demand_units.EUTRx_Jun_2021,
        npa_demand_units.EUTRx_Jul_2021,
        npa_demand_units.EUTRx_Aug_2021,
        npa_demand_units.EUTRx_Sep_2021,
        npa_demand_units.EUTRx_Oct_2021,
        npa_demand_units.EUTRx_Nov_2021,
        npa_demand_units.EUTRx_Dec_2021,
        npa_demand_units.EUTRx_Jan_2022,
        npa_demand_units.EUTRx_Feb_2022,
        npa_demand_units.EUTRx_Mar_2022,
        npa_demand_units.EUTRx_Apr_2022,
        npa_demand_units.EUTRx_May_2022,
        npa_demand_units.EUTRx_Jun_2022
 FROM sandbox.npa_demand_units
 ORDER BY npa_demand_units.Product,
          npa_demand_units.Channel,
          npa_demand_units.NDC_Details,
          npa_demand_units.EUTRx_May_2018,
          npa_demand_units.EUTRx_Jun_2018,
          npa_demand_units.EUTRx_Jul_2018,
          npa_demand_units.EUTRx_Aug_2018,
          npa_demand_units.EUTRx_Sep_2018
SEGMENTED BY hash(npa_demand_units.EUTRx_May_2018, npa_demand_units.EUTRx_Jun_2018, npa_demand_units.EUTRx_Jul_2018, npa_demand_units.EUTRx_Aug_2018, npa_demand_units.EUTRx_Sep_2018, npa_demand_units.EUTRx_Oct_2018, npa_demand_units.EUTRx_Nov_2018, npa_demand_units.EUTRx_Dec_2018) ALL NODES;

CREATE PROJECTION sandbox.psrf_for_datamart_v1_b0 /*+basename(psrf_for_datamart_v1),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT psrf_for_datamart_v1.sales_force_id,
        psrf_for_datamart_v1.area_number,
        psrf_for_datamart_v1.region_number,
        psrf_for_datamart_v1.territory_number,
        psrf_for_datamart_v1.area_name,
        psrf_for_datamart_v1.region_name,
        psrf_for_datamart_v1.territory_name,
        psrf_for_datamart_v1.PrescriberName,
        psrf_for_datamart_v1.psrf_city,
        psrf_for_datamart_v1.psrf_state,
        psrf_for_datamart_v1.psrf_zip,
        psrf_for_datamart_v1.psrf_npi,
        psrf_for_datamart_v1.demo_first_name,
        psrf_for_datamart_v1.demo_last_name,
        psrf_for_datamart_v1.demo_city,
        psrf_for_datamart_v1.demo_state,
        psrf_for_datamart_v1.demo_zip,
        psrf_for_datamart_v1.demo_npi,
        psrf_for_datamart_v1.Current_Week_PSRFs,
        psrf_for_datamart_v1.Current_Month_PSRFs,
        psrf_for_datamart_v1.HCP_Signature_Yes,
        psrf_for_datamart_v1.HCP_Signature_No,
        psrf_for_datamart_v1.Patient_Auth_Yes,
        psrf_for_datamart_v1.Patient_Auth_No,
        psrf_for_datamart_v1.YTD_PSRFs,
        psrf_for_datamart_v1.file_id,
        psrf_for_datamart_v1.row_source
 FROM sandbox.psrf_for_datamart_v1
 ORDER BY psrf_for_datamart_v1.sales_force_id,
          psrf_for_datamart_v1.area_number,
          psrf_for_datamart_v1.region_number,
          psrf_for_datamart_v1.territory_number,
          psrf_for_datamart_v1.area_name,
          psrf_for_datamart_v1.region_name,
          psrf_for_datamart_v1.territory_name,
          psrf_for_datamart_v1.PrescriberName,
          psrf_for_datamart_v1.psrf_city,
          psrf_for_datamart_v1.psrf_state,
          psrf_for_datamart_v1.psrf_zip,
          psrf_for_datamart_v1.psrf_npi,
          psrf_for_datamart_v1.demo_first_name,
          psrf_for_datamart_v1.demo_last_name,
          psrf_for_datamart_v1.demo_city,
          psrf_for_datamart_v1.demo_state,
          psrf_for_datamart_v1.demo_zip,
          psrf_for_datamart_v1.demo_npi,
          psrf_for_datamart_v1.Current_Week_PSRFs,
          psrf_for_datamart_v1.Current_Month_PSRFs,
          psrf_for_datamart_v1.HCP_Signature_Yes,
          psrf_for_datamart_v1.HCP_Signature_No,
          psrf_for_datamart_v1.Patient_Auth_Yes,
          psrf_for_datamart_v1.Patient_Auth_No,
          psrf_for_datamart_v1.YTD_PSRFs,
          psrf_for_datamart_v1.file_id
SEGMENTED BY hash(psrf_for_datamart_v1.territory_number) ALL NODES;

CREATE PROJECTION sandbox.psrf_for_datamart_v2_b0 /*+basename(psrf_for_datamart_v2),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT psrf_for_datamart_v2.sales_force_id,
        psrf_for_datamart_v2.area_number,
        psrf_for_datamart_v2.region_number,
        psrf_for_datamart_v2.territory_number,
        psrf_for_datamart_v2.area_name,
        psrf_for_datamart_v2.region_name,
        psrf_for_datamart_v2.territory_name,
        psrf_for_datamart_v2.PrescriberName,
        psrf_for_datamart_v2.psrf_city,
        psrf_for_datamart_v2.psrf_state,
        psrf_for_datamart_v2.psrf_zip,
        psrf_for_datamart_v2.psrf_npi,
        psrf_for_datamart_v2.demo_first_name,
        psrf_for_datamart_v2.demo_last_name,
        psrf_for_datamart_v2.demo_city,
        psrf_for_datamart_v2.demo_state,
        psrf_for_datamart_v2.demo_zip,
        psrf_for_datamart_v2.demo_npi,
        psrf_for_datamart_v2.Current_Week_PSRFs,
        psrf_for_datamart_v2.Current_Month_PSRFs,
        psrf_for_datamart_v2.HCP_Signature_Yes,
        psrf_for_datamart_v2.HCP_Signature_No,
        psrf_for_datamart_v2.Patient_Auth_Yes,
        psrf_for_datamart_v2.Patient_Auth_No,
        psrf_for_datamart_v2.YTD_PSRFs,
        psrf_for_datamart_v2.file_id,
        psrf_for_datamart_v2.row_source
 FROM sandbox.psrf_for_datamart_v2
 ORDER BY psrf_for_datamart_v2.sales_force_id,
          psrf_for_datamart_v2.area_number,
          psrf_for_datamart_v2.region_number,
          psrf_for_datamart_v2.territory_number,
          psrf_for_datamart_v2.area_name,
          psrf_for_datamart_v2.region_name,
          psrf_for_datamart_v2.territory_name,
          psrf_for_datamart_v2.PrescriberName,
          psrf_for_datamart_v2.psrf_city,
          psrf_for_datamart_v2.psrf_state,
          psrf_for_datamart_v2.psrf_zip,
          psrf_for_datamart_v2.psrf_npi,
          psrf_for_datamart_v2.demo_first_name,
          psrf_for_datamart_v2.demo_last_name,
          psrf_for_datamart_v2.demo_city,
          psrf_for_datamart_v2.demo_state,
          psrf_for_datamart_v2.demo_zip,
          psrf_for_datamart_v2.demo_npi,
          psrf_for_datamart_v2.Current_Week_PSRFs,
          psrf_for_datamart_v2.Current_Month_PSRFs,
          psrf_for_datamart_v2.HCP_Signature_Yes,
          psrf_for_datamart_v2.HCP_Signature_No,
          psrf_for_datamart_v2.Patient_Auth_Yes,
          psrf_for_datamart_v2.Patient_Auth_No,
          psrf_for_datamart_v2.YTD_PSRFs,
          psrf_for_datamart_v2.file_id
SEGMENTED BY hash(psrf_for_datamart_v2.sales_force_id, psrf_for_datamart_v2.area_number, psrf_for_datamart_v2.region_number, psrf_for_datamart_v2.territory_number, psrf_for_datamart_v2.area_name, psrf_for_datamart_v2.region_name, psrf_for_datamart_v2.territory_name, psrf_for_datamart_v2.PrescriberName, psrf_for_datamart_v2.psrf_city, psrf_for_datamart_v2.psrf_state, psrf_for_datamart_v2.psrf_zip, psrf_for_datamart_v2.psrf_npi, psrf_for_datamart_v2.demo_first_name, psrf_for_datamart_v2.demo_last_name, psrf_for_datamart_v2.demo_city, psrf_for_datamart_v2.demo_state, psrf_for_datamart_v2.demo_zip, psrf_for_datamart_v2.demo_npi, psrf_for_datamart_v2.Current_Week_PSRFs, psrf_for_datamart_v2.Current_Month_PSRFs, psrf_for_datamart_v2.HCP_Signature_Yes, psrf_for_datamart_v2.HCP_Signature_No, psrf_for_datamart_v2.Patient_Auth_Yes, psrf_for_datamart_v2.Patient_Auth_No, psrf_for_datamart_v2.YTD_PSRFs, psrf_for_datamart_v2.file_id) ALL NODES;

CREATE PROJECTION sandbox.psrf_for_datamart_v1_v2_b0 /*+basename(psrf_for_datamart_v1_v2),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT psrf_for_datamart_v1_v2.sales_force_id,
        psrf_for_datamart_v1_v2.area_number,
        psrf_for_datamart_v1_v2.region_number,
        psrf_for_datamart_v1_v2.territory_number,
        psrf_for_datamart_v1_v2.area_name,
        psrf_for_datamart_v1_v2.region_name,
        psrf_for_datamart_v1_v2.territory_name,
        psrf_for_datamart_v1_v2.PrescriberName,
        psrf_for_datamart_v1_v2.psrf_city,
        psrf_for_datamart_v1_v2.psrf_state,
        psrf_for_datamart_v1_v2.psrf_zip,
        psrf_for_datamart_v1_v2.psrf_npi,
        psrf_for_datamart_v1_v2.demo_first_name,
        psrf_for_datamart_v1_v2.demo_last_name,
        psrf_for_datamart_v1_v2.demo_city,
        psrf_for_datamart_v1_v2.demo_state,
        psrf_for_datamart_v1_v2.demo_zip,
        psrf_for_datamart_v1_v2.demo_npi,
        psrf_for_datamart_v1_v2.Current_Week_PSRFs,
        psrf_for_datamart_v1_v2.Current_Month_PSRFs,
        psrf_for_datamart_v1_v2.HCP_Signature_Yes,
        psrf_for_datamart_v1_v2.HCP_Signature_No,
        psrf_for_datamart_v1_v2.Patient_Auth_Yes,
        psrf_for_datamart_v1_v2.Patient_Auth_No,
        psrf_for_datamart_v1_v2.YTD_PSRFs,
        psrf_for_datamart_v1_v2.file_id,
        psrf_for_datamart_v1_v2.row_source
 FROM sandbox.psrf_for_datamart_v1_v2
 ORDER BY psrf_for_datamart_v1_v2.sales_force_id,
          psrf_for_datamart_v1_v2.area_number,
          psrf_for_datamart_v1_v2.region_number,
          psrf_for_datamart_v1_v2.territory_number,
          psrf_for_datamart_v1_v2.area_name,
          psrf_for_datamart_v1_v2.region_name,
          psrf_for_datamart_v1_v2.territory_name,
          psrf_for_datamart_v1_v2.PrescriberName,
          psrf_for_datamart_v1_v2.psrf_city,
          psrf_for_datamart_v1_v2.psrf_state,
          psrf_for_datamart_v1_v2.psrf_zip,
          psrf_for_datamart_v1_v2.psrf_npi,
          psrf_for_datamart_v1_v2.demo_first_name,
          psrf_for_datamart_v1_v2.demo_last_name,
          psrf_for_datamart_v1_v2.demo_city,
          psrf_for_datamart_v1_v2.demo_state,
          psrf_for_datamart_v1_v2.demo_zip,
          psrf_for_datamart_v1_v2.demo_npi,
          psrf_for_datamart_v1_v2.Current_Week_PSRFs,
          psrf_for_datamart_v1_v2.Current_Month_PSRFs,
          psrf_for_datamart_v1_v2.HCP_Signature_Yes,
          psrf_for_datamart_v1_v2.HCP_Signature_No,
          psrf_for_datamart_v1_v2.Patient_Auth_Yes,
          psrf_for_datamart_v1_v2.Patient_Auth_No,
          psrf_for_datamart_v1_v2.YTD_PSRFs,
          psrf_for_datamart_v1_v2.file_id,
          psrf_for_datamart_v1_v2.row_source
SEGMENTED BY hash(psrf_for_datamart_v1_v2.sales_force_id, psrf_for_datamart_v1_v2.area_number, psrf_for_datamart_v1_v2.region_number, psrf_for_datamart_v1_v2.territory_number, psrf_for_datamart_v1_v2.area_name, psrf_for_datamart_v1_v2.region_name, psrf_for_datamart_v1_v2.territory_name, psrf_for_datamart_v1_v2.PrescriberName, psrf_for_datamart_v1_v2.psrf_city, psrf_for_datamart_v1_v2.psrf_state, psrf_for_datamart_v1_v2.psrf_zip, psrf_for_datamart_v1_v2.psrf_npi, psrf_for_datamart_v1_v2.demo_first_name, psrf_for_datamart_v1_v2.demo_last_name, psrf_for_datamart_v1_v2.demo_city, psrf_for_datamart_v1_v2.demo_state, psrf_for_datamart_v1_v2.demo_zip, psrf_for_datamart_v1_v2.demo_npi, psrf_for_datamart_v1_v2.Current_Week_PSRFs, psrf_for_datamart_v1_v2.Current_Month_PSRFs, psrf_for_datamart_v1_v2.HCP_Signature_Yes, psrf_for_datamart_v1_v2.HCP_Signature_No, psrf_for_datamart_v1_v2.Patient_Auth_Yes, psrf_for_datamart_v1_v2.Patient_Auth_No, psrf_for_datamart_v1_v2.YTD_PSRFs, psrf_for_datamart_v1_v2.file_id, psrf_for_datamart_v1_v2.row_source) ALL NODES;

CREATE PROJECTION sandbox.psrf_for_datamart_v3_b0 /*+basename(psrf_for_datamart_v3),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT psrf_for_datamart_v3.sales_force_id,
        psrf_for_datamart_v3.area_number,
        psrf_for_datamart_v3.region_number,
        psrf_for_datamart_v3.territory_number,
        psrf_for_datamart_v3.area_name,
        psrf_for_datamart_v3.region_name,
        psrf_for_datamart_v3.territory_name,
        psrf_for_datamart_v3.PrescriberName,
        psrf_for_datamart_v3.psrf_city,
        psrf_for_datamart_v3.psrf_state,
        psrf_for_datamart_v3.psrf_zip,
        psrf_for_datamart_v3.psrf_npi,
        psrf_for_datamart_v3.demo_first_name,
        psrf_for_datamart_v3.demo_last_name,
        psrf_for_datamart_v3.demo_city,
        psrf_for_datamart_v3.demo_state,
        psrf_for_datamart_v3.demo_zip,
        psrf_for_datamart_v3.demo_npi,
        psrf_for_datamart_v3.Current_Week_PSRFs,
        psrf_for_datamart_v3.Current_Month_PSRFs,
        psrf_for_datamart_v3.HCP_Signature_Yes,
        psrf_for_datamart_v3.HCP_Signature_No,
        psrf_for_datamart_v3.Patient_Auth_Yes,
        psrf_for_datamart_v3.Patient_Auth_No,
        psrf_for_datamart_v3.YTD_PSRFs,
        psrf_for_datamart_v3.file_id,
        psrf_for_datamart_v3.row_source
 FROM sandbox.psrf_for_datamart_v3
 ORDER BY psrf_for_datamart_v3.sales_force_id,
          psrf_for_datamart_v3.area_number,
          psrf_for_datamart_v3.region_number,
          psrf_for_datamart_v3.territory_number,
          psrf_for_datamart_v3.area_name,
          psrf_for_datamart_v3.region_name,
          psrf_for_datamart_v3.territory_name,
          psrf_for_datamart_v3.PrescriberName,
          psrf_for_datamart_v3.psrf_city,
          psrf_for_datamart_v3.psrf_state,
          psrf_for_datamart_v3.psrf_zip,
          psrf_for_datamart_v3.psrf_npi,
          psrf_for_datamart_v3.demo_first_name,
          psrf_for_datamart_v3.demo_last_name,
          psrf_for_datamart_v3.demo_city,
          psrf_for_datamart_v3.demo_state,
          psrf_for_datamart_v3.demo_zip,
          psrf_for_datamart_v3.demo_npi,
          psrf_for_datamart_v3.Current_Week_PSRFs,
          psrf_for_datamart_v3.Current_Month_PSRFs,
          psrf_for_datamart_v3.HCP_Signature_Yes,
          psrf_for_datamart_v3.HCP_Signature_No,
          psrf_for_datamart_v3.Patient_Auth_Yes,
          psrf_for_datamart_v3.Patient_Auth_No,
          psrf_for_datamart_v3.YTD_PSRFs,
          psrf_for_datamart_v3.file_id
SEGMENTED BY hash(psrf_for_datamart_v3.sales_force_id, psrf_for_datamart_v3.area_number, psrf_for_datamart_v3.region_number, psrf_for_datamart_v3.territory_number, psrf_for_datamart_v3.area_name, psrf_for_datamart_v3.region_name, psrf_for_datamart_v3.territory_name, psrf_for_datamart_v3.PrescriberName, psrf_for_datamart_v3.psrf_city, psrf_for_datamart_v3.psrf_state, psrf_for_datamart_v3.psrf_zip, psrf_for_datamart_v3.psrf_npi, psrf_for_datamart_v3.demo_first_name, psrf_for_datamart_v3.demo_last_name, psrf_for_datamart_v3.demo_city, psrf_for_datamart_v3.demo_state, psrf_for_datamart_v3.demo_zip, psrf_for_datamart_v3.demo_npi, psrf_for_datamart_v3.Current_Week_PSRFs, psrf_for_datamart_v3.Current_Month_PSRFs, psrf_for_datamart_v3.HCP_Signature_Yes, psrf_for_datamart_v3.HCP_Signature_No, psrf_for_datamart_v3.Patient_Auth_Yes, psrf_for_datamart_v3.Patient_Auth_No, psrf_for_datamart_v3.YTD_PSRFs, psrf_for_datamart_v3.file_id) ALL NODES;

CREATE PROJECTION sandbox.psrf_for_datamart_v1_v2_v3_b0 /*+basename(psrf_for_datamart_v1_v2_v3),createtype(A)*/ 
(
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 area_name,
 region_name,
 territory_name,
 PrescriberName,
 psrf_city,
 psrf_state,
 psrf_zip,
 psrf_npi,
 demo_first_name,
 demo_last_name,
 demo_city,
 demo_state,
 demo_zip,
 demo_npi,
 Current_Week_PSRFs,
 Current_Month_PSRFs,
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 YTD_PSRFs,
 file_id,
 row_source
)
AS
 SELECT psrf_for_datamart_v1_v2_v3.sales_force_id,
        psrf_for_datamart_v1_v2_v3.area_number,
        psrf_for_datamart_v1_v2_v3.region_number,
        psrf_for_datamart_v1_v2_v3.territory_number,
        psrf_for_datamart_v1_v2_v3.area_name,
        psrf_for_datamart_v1_v2_v3.region_name,
        psrf_for_datamart_v1_v2_v3.territory_name,
        psrf_for_datamart_v1_v2_v3.PrescriberName,
        psrf_for_datamart_v1_v2_v3.psrf_city,
        psrf_for_datamart_v1_v2_v3.psrf_state,
        psrf_for_datamart_v1_v2_v3.psrf_zip,
        psrf_for_datamart_v1_v2_v3.psrf_npi,
        psrf_for_datamart_v1_v2_v3.demo_first_name,
        psrf_for_datamart_v1_v2_v3.demo_last_name,
        psrf_for_datamart_v1_v2_v3.demo_city,
        psrf_for_datamart_v1_v2_v3.demo_state,
        psrf_for_datamart_v1_v2_v3.demo_zip,
        psrf_for_datamart_v1_v2_v3.demo_npi,
        psrf_for_datamart_v1_v2_v3.Current_Week_PSRFs,
        psrf_for_datamart_v1_v2_v3.Current_Month_PSRFs,
        psrf_for_datamart_v1_v2_v3.HCP_Signature_Yes,
        psrf_for_datamart_v1_v2_v3.HCP_Signature_No,
        psrf_for_datamart_v1_v2_v3.Patient_Auth_Yes,
        psrf_for_datamart_v1_v2_v3.Patient_Auth_No,
        psrf_for_datamart_v1_v2_v3.YTD_PSRFs,
        psrf_for_datamart_v1_v2_v3.file_id,
        psrf_for_datamart_v1_v2_v3.row_source
 FROM sandbox.psrf_for_datamart_v1_v2_v3
 ORDER BY psrf_for_datamart_v1_v2_v3.sales_force_id,
          psrf_for_datamart_v1_v2_v3.area_number,
          psrf_for_datamart_v1_v2_v3.region_number,
          psrf_for_datamart_v1_v2_v3.territory_number,
          psrf_for_datamart_v1_v2_v3.area_name,
          psrf_for_datamart_v1_v2_v3.region_name,
          psrf_for_datamart_v1_v2_v3.territory_name,
          psrf_for_datamart_v1_v2_v3.PrescriberName,
          psrf_for_datamart_v1_v2_v3.psrf_city,
          psrf_for_datamart_v1_v2_v3.psrf_state,
          psrf_for_datamart_v1_v2_v3.psrf_zip,
          psrf_for_datamart_v1_v2_v3.psrf_npi,
          psrf_for_datamart_v1_v2_v3.demo_first_name,
          psrf_for_datamart_v1_v2_v3.demo_last_name,
          psrf_for_datamart_v1_v2_v3.demo_city,
          psrf_for_datamart_v1_v2_v3.demo_state,
          psrf_for_datamart_v1_v2_v3.demo_zip,
          psrf_for_datamart_v1_v2_v3.demo_npi,
          psrf_for_datamart_v1_v2_v3.Current_Week_PSRFs,
          psrf_for_datamart_v1_v2_v3.Current_Month_PSRFs,
          psrf_for_datamart_v1_v2_v3.HCP_Signature_Yes,
          psrf_for_datamart_v1_v2_v3.HCP_Signature_No,
          psrf_for_datamart_v1_v2_v3.Patient_Auth_Yes,
          psrf_for_datamart_v1_v2_v3.Patient_Auth_No,
          psrf_for_datamart_v1_v2_v3.YTD_PSRFs,
          psrf_for_datamart_v1_v2_v3.file_id,
          psrf_for_datamart_v1_v2_v3.row_source
SEGMENTED BY hash(psrf_for_datamart_v1_v2_v3.sales_force_id, psrf_for_datamart_v1_v2_v3.area_number, psrf_for_datamart_v1_v2_v3.region_number, psrf_for_datamart_v1_v2_v3.territory_number, psrf_for_datamart_v1_v2_v3.area_name, psrf_for_datamart_v1_v2_v3.region_name, psrf_for_datamart_v1_v2_v3.territory_name, psrf_for_datamart_v1_v2_v3.PrescriberName, psrf_for_datamart_v1_v2_v3.psrf_city, psrf_for_datamart_v1_v2_v3.psrf_state, psrf_for_datamart_v1_v2_v3.psrf_zip, psrf_for_datamart_v1_v2_v3.psrf_npi, psrf_for_datamart_v1_v2_v3.demo_first_name, psrf_for_datamart_v1_v2_v3.demo_last_name, psrf_for_datamart_v1_v2_v3.demo_city, psrf_for_datamart_v1_v2_v3.demo_state, psrf_for_datamart_v1_v2_v3.demo_zip, psrf_for_datamart_v1_v2_v3.demo_npi, psrf_for_datamart_v1_v2_v3.Current_Week_PSRFs, psrf_for_datamart_v1_v2_v3.Current_Month_PSRFs, psrf_for_datamart_v1_v2_v3.HCP_Signature_Yes, psrf_for_datamart_v1_v2_v3.HCP_Signature_No, psrf_for_datamart_v1_v2_v3.Patient_Auth_Yes, psrf_for_datamart_v1_v2_v3.Patient_Auth_No, psrf_for_datamart_v1_v2_v3.YTD_PSRFs, psrf_for_datamart_v1_v2_v3.file_id, psrf_for_datamart_v1_v2_v3.row_source) ALL NODES;

CREATE PROJECTION sandbox.archer_target_data_b0 /*+basename(archer_target_data),createtype(L)*/ 
(
 territory,
 geography,
 region,
 tvcmid,
 ims_id,
 npi,
 decile,
 vmat2_12_mth,
 pdrp_flag,
 last_name,
 first_name,
 specialty,
 address,
 city,
 state,
 zip
)
AS
 SELECT archer_target_data.territory,
        archer_target_data.geography,
        archer_target_data.region,
        archer_target_data.tvcmid,
        archer_target_data.ims_id,
        archer_target_data.npi,
        archer_target_data.decile,
        archer_target_data.vmat2_12_mth,
        archer_target_data.pdrp_flag,
        archer_target_data.last_name,
        archer_target_data.first_name,
        archer_target_data.specialty,
        archer_target_data.address,
        archer_target_data.city,
        archer_target_data.state,
        archer_target_data.zip
 FROM sandbox.archer_target_data
 ORDER BY archer_target_data.territory,
          archer_target_data.geography,
          archer_target_data.region,
          archer_target_data.tvcmid,
          archer_target_data.ims_id,
          archer_target_data.npi,
          archer_target_data.decile,
          archer_target_data.vmat2_12_mth
SEGMENTED BY hash(archer_target_data.tvcmid, archer_target_data.decile, archer_target_data.pdrp_flag, archer_target_data.state, archer_target_data.zip, archer_target_data.territory, archer_target_data.region, archer_target_data.ims_id) ALL NODES;

CREATE PROJECTION sandbox.archer_zip_terr_b0 /*+basename(archer_zip_terr),createtype(L)*/ 
(
 zip_code,
 city,
 state_code,
 territory_number,
 territory_name,
 area_name,
 region_name,
 mirror_flag,
 sales_force_id,
 region_number,
 area_number
)
AS
 SELECT archer_zip_terr.zip_code,
        archer_zip_terr.city,
        archer_zip_terr.state_code,
        archer_zip_terr.territory_number,
        archer_zip_terr.territory_name,
        archer_zip_terr.area_name,
        archer_zip_terr.region_name,
        archer_zip_terr.mirror_flag,
        archer_zip_terr.sales_force_id,
        archer_zip_terr.region_number,
        archer_zip_terr.area_number
 FROM sandbox.archer_zip_terr
 ORDER BY archer_zip_terr.zip_code,
          archer_zip_terr.city,
          archer_zip_terr.state_code,
          archer_zip_terr.territory_number,
          archer_zip_terr.territory_name,
          archer_zip_terr.area_name,
          archer_zip_terr.region_name,
          archer_zip_terr.mirror_flag
SEGMENTED BY hash(archer_zip_terr.zip_code, archer_zip_terr.state_code, archer_zip_terr.mirror_flag, archer_zip_terr.sales_force_id, archer_zip_terr.region_number, archer_zip_terr.area_number, archer_zip_terr.territory_number, archer_zip_terr.city) ALL NODES;

CREATE PROJECTION sandbox."digital-affinity_b0" /*+basename(digital-affinity),createtype(L)*/ 
(
 vid__v,
 id,
 entity_type,
 id_type
)
AS
 SELECT "digital-affinity".vid__v,
        "digital-affinity".id,
        "digital-affinity".entity_type,
        "digital-affinity".id_type
 FROM sandbox."digital-affinity"
 ORDER BY "digital-affinity".vid__v,
          "digital-affinity".id,
          "digital-affinity".entity_type,
          "digital-affinity".id_type
SEGMENTED BY hash("digital-affinity".vid__v, "digital-affinity".id, "digital-affinity".entity_type, "digital-affinity".id_type) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_Feb21_b0 /*+basename(ic_rx_Feb21),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_Feb21.ic_data_month,
        ic_rx_Feb21.basket_name,
        ic_rx_Feb21.sales_force_id,
        ic_rx_Feb21.area_number,
        ic_rx_Feb21.region_number,
        ic_rx_Feb21.territory_number,
        ic_rx_Feb21.ims_id,
        ic_rx_Feb21.tvcmid,
        ic_rx_Feb21.outlet_code,
        ic_rx_Feb21.va_station_number,
        ic_rx_Feb21.dnc_flag,
        ic_rx_Feb21.dnp_flag,
        ic_rx_Feb21.rollup_month,
        ic_rx_Feb21.month_bucket,
        ic_rx_Feb21.nrx_count,
        ic_rx_Feb21.trx_count,
        ic_rx_Feb21.nrx_quantity,
        ic_rx_Feb21.trx_quantity,
        ic_rx_Feb21.include_in_nation_rollup,
        ic_rx_Feb21.include_in_area_rollup,
        ic_rx_Feb21.include_in_region_rollup,
        ic_rx_Feb21.join_key,
        ic_rx_Feb21.row_source,
        ic_rx_Feb21.row_create_date,
        ic_rx_Feb21.indication,
        ic_rx_Feb21.outlet_dea,
        ic_rx_Feb21.payer_plan_number,
        ic_rx_Feb21.payment_method
 FROM sandbox.ic_rx_Feb21
 ORDER BY ic_rx_Feb21.area_number,
          ic_rx_Feb21.region_number,
          ic_rx_Feb21.territory_number,
          ic_rx_Feb21.ims_id,
          ic_rx_Feb21.tvcmid
SEGMENTED BY hash(ic_rx_Feb21.ic_data_month, ic_rx_Feb21.tvcmid, ic_rx_Feb21.outlet_code, ic_rx_Feb21.dnc_flag, ic_rx_Feb21.dnp_flag, ic_rx_Feb21.rollup_month, ic_rx_Feb21.month_bucket, ic_rx_Feb21.nrx_count, ic_rx_Feb21.trx_count, ic_rx_Feb21.nrx_quantity, ic_rx_Feb21.trx_quantity, ic_rx_Feb21.include_in_nation_rollup, ic_rx_Feb21.include_in_area_rollup, ic_rx_Feb21.include_in_region_rollup, ic_rx_Feb21.row_create_date, ic_rx_Feb21.ims_id, ic_rx_Feb21.va_station_number, ic_rx_Feb21.join_key, ic_rx_Feb21.area_number, ic_rx_Feb21.region_number, ic_rx_Feb21.territory_number, ic_rx_Feb21.sales_force_id, ic_rx_Feb21.row_source, ic_rx_Feb21.basket_name) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_Feb21_b0 /*+basename(ic_demo_Feb21),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_Feb21.ic_data_month,
        ic_demo_Feb21.sales_force_id,
        ic_demo_Feb21.area_number,
        ic_demo_Feb21.region_number,
        ic_demo_Feb21.territory_number,
        ic_demo_Feb21.ims_id,
        ic_demo_Feb21.tvcmid,
        ic_demo_Feb21.outlet_code,
        ic_demo_Feb21.va_station_number,
        ic_demo_Feb21.specialty,
        ic_demo_Feb21.last_name,
        ic_demo_Feb21.first_name,
        ic_demo_Feb21.mid_name,
        ic_demo_Feb21.address_1,
        ic_demo_Feb21.address_2,
        ic_demo_Feb21.address_3,
        ic_demo_Feb21.city,
        ic_demo_Feb21.state,
        ic_demo_Feb21.zip,
        ic_demo_Feb21.address_source,
        ic_demo_Feb21.pdrp_flag,
        ic_demo_Feb21.pdrp_date,
        ic_demo_Feb21.np_pa_flag,
        ic_demo_Feb21.no_spend,
        ic_demo_Feb21.ama_no_contact_flag,
        ic_demo_Feb21.join_key,
        ic_demo_Feb21.row_source,
        ic_demo_Feb21.row_create_date,
        ic_demo_Feb21.outlet_dea,
        ic_demo_Feb21.secondary_specialty
 FROM sandbox.ic_demo_Feb21
 ORDER BY ic_demo_Feb21.area_number,
          ic_demo_Feb21.region_number,
          ic_demo_Feb21.territory_number,
          ic_demo_Feb21.ims_id,
          ic_demo_Feb21.tvcmid
SEGMENTED BY hash(ic_demo_Feb21.ic_data_month, ic_demo_Feb21.tvcmid, ic_demo_Feb21.outlet_code, ic_demo_Feb21.mid_name, ic_demo_Feb21.state, ic_demo_Feb21.zip, ic_demo_Feb21.pdrp_flag, ic_demo_Feb21.pdrp_date, ic_demo_Feb21.np_pa_flag, ic_demo_Feb21.no_spend, ic_demo_Feb21.ama_no_contact_flag, ic_demo_Feb21.row_create_date, ic_demo_Feb21.ims_id, ic_demo_Feb21.va_station_number, ic_demo_Feb21.specialty, ic_demo_Feb21.join_key, ic_demo_Feb21.area_number, ic_demo_Feb21.region_number, ic_demo_Feb21.territory_number, ic_demo_Feb21.sales_force_id, ic_demo_Feb21.first_name, ic_demo_Feb21.city, ic_demo_Feb21.address_source, ic_demo_Feb21.last_name, ic_demo_Feb21.address_1, ic_demo_Feb21.address_2, ic_demo_Feb21.address_3, ic_demo_Feb21.row_source) ALL NODES;

CREATE PROJECTION sandbox.act_hub_CSD1015_b0 /*+basename(act_hub_CSD1015),createtype(A)*/ 
(
 npi,
 activity_id,
 federation_id,
 contact,
 source_name,
 "datetime",
 trackback_id,
 previous_activity,
 level_name,
 activity_role_name,
 type_name,
 native_type,
 details,
 line_item_id,
 brand_name,
 activity,
 line_item_datetime,
 line_item_previous_line_item,
 line_item_trackback_id,
 line_item_details,
 line_item_type_name,
 line_item_native_type,
 basket_id,
 web_url
)
AS
 SELECT act_hub_CSD1015.npi,
        act_hub_CSD1015.activity_id,
        act_hub_CSD1015.federation_id,
        act_hub_CSD1015.contact,
        act_hub_CSD1015.source_name,
        act_hub_CSD1015."datetime",
        act_hub_CSD1015.trackback_id,
        act_hub_CSD1015.previous_activity,
        act_hub_CSD1015.level_name,
        act_hub_CSD1015.activity_role_name,
        act_hub_CSD1015.type_name,
        act_hub_CSD1015.native_type,
        act_hub_CSD1015.details,
        act_hub_CSD1015.line_item_id,
        act_hub_CSD1015.brand_name,
        act_hub_CSD1015.activity,
        act_hub_CSD1015.line_item_datetime,
        act_hub_CSD1015.line_item_previous_line_item,
        act_hub_CSD1015.line_item_trackback_id,
        act_hub_CSD1015.line_item_details,
        act_hub_CSD1015.line_item_type_name,
        act_hub_CSD1015.line_item_native_type,
        act_hub_CSD1015.basket_id,
        act_hub_CSD1015.web_url
 FROM sandbox.act_hub_CSD1015
 ORDER BY act_hub_CSD1015.activity_id
SEGMENTED BY hash(act_hub_CSD1015.activity_id) ALL NODES;

CREATE PROJECTION sandbox.mb_to_monthly_account_summary_b0 /*+basename(mb_to_monthly_account_summary),createtype(A)*/ 
(
 sales_force_id,
 nation_id,
 nation,
 area_id,
 area,
 region_id,
 region,
 territory_id,
 territory,
 rep_name,
 user_id,
 time_period,
 period_type,
 period,
 market_id,
 market_name,
 brand_id,
 brand_name,
 teva_product_flag,
 customer_id,
 tvcmid,
 network_name,
 account_name,
 channel,
 address,
 city,
 state,
 zip,
 formulary_control,
 gpo,
 target,
 new_account,
 market_volume_indicator,
 product_vol_dollars,
 product_vol_mg,
 product_vol_mcg,
 market_vol_dollars,
 market_vol_mg,
 market_vol_mcg,
 prev_prod_vol_dollars,
 prev_prod_vol_mg,
 prev_prod_vol_mcg,
 prev_market_vol_dollars,
 prev_market_vol_mg,
 prev_market_vol_mcg
)
AS
 SELECT mb_to_monthly_account_summary.sales_force_id,
        mb_to_monthly_account_summary.nation_id,
        mb_to_monthly_account_summary.nation,
        mb_to_monthly_account_summary.area_id,
        mb_to_monthly_account_summary.area,
        mb_to_monthly_account_summary.region_id,
        mb_to_monthly_account_summary.region,
        mb_to_monthly_account_summary.territory_id,
        mb_to_monthly_account_summary.territory,
        mb_to_monthly_account_summary.rep_name,
        mb_to_monthly_account_summary.user_id,
        mb_to_monthly_account_summary.time_period,
        mb_to_monthly_account_summary.period_type,
        mb_to_monthly_account_summary.period,
        mb_to_monthly_account_summary.market_id,
        mb_to_monthly_account_summary.market_name,
        mb_to_monthly_account_summary.brand_id,
        mb_to_monthly_account_summary.brand_name,
        mb_to_monthly_account_summary.teva_product_flag,
        mb_to_monthly_account_summary.customer_id,
        mb_to_monthly_account_summary.tvcmid,
        mb_to_monthly_account_summary.network_name,
        mb_to_monthly_account_summary.account_name,
        mb_to_monthly_account_summary.channel,
        mb_to_monthly_account_summary.address,
        mb_to_monthly_account_summary.city,
        mb_to_monthly_account_summary.state,
        mb_to_monthly_account_summary.zip,
        mb_to_monthly_account_summary.formulary_control,
        mb_to_monthly_account_summary.gpo,
        mb_to_monthly_account_summary.target,
        mb_to_monthly_account_summary.new_account,
        mb_to_monthly_account_summary.market_volume_indicator,
        mb_to_monthly_account_summary.product_vol_dollars,
        mb_to_monthly_account_summary.product_vol_mg,
        mb_to_monthly_account_summary.product_vol_mcg,
        mb_to_monthly_account_summary.market_vol_dollars,
        mb_to_monthly_account_summary.market_vol_mg,
        mb_to_monthly_account_summary.market_vol_mcg,
        mb_to_monthly_account_summary.prev_prod_vol_dollars,
        mb_to_monthly_account_summary.prev_prod_vol_mg,
        mb_to_monthly_account_summary.prev_prod_vol_mcg,
        mb_to_monthly_account_summary.prev_market_vol_dollars,
        mb_to_monthly_account_summary.prev_market_vol_mg,
        mb_to_monthly_account_summary.prev_market_vol_mcg
 FROM sandbox.mb_to_monthly_account_summary
 ORDER BY mb_to_monthly_account_summary.sales_force_id,
          mb_to_monthly_account_summary.nation_id,
          mb_to_monthly_account_summary.nation,
          mb_to_monthly_account_summary.area_id,
          mb_to_monthly_account_summary.area,
          mb_to_monthly_account_summary.region_id,
          mb_to_monthly_account_summary.region,
          mb_to_monthly_account_summary.territory_id
SEGMENTED BY hash(mb_to_monthly_account_summary.sales_force_id, mb_to_monthly_account_summary.market_id, mb_to_monthly_account_summary.brand_id, mb_to_monthly_account_summary.teva_product_flag, mb_to_monthly_account_summary.tvcmid, mb_to_monthly_account_summary.state, mb_to_monthly_account_summary.zip, mb_to_monthly_account_summary.new_account) ALL NODES;

CREATE PROJECTION sandbox.act_hub_CSD1015_nonAustedo_b0 /*+basename(act_hub_CSD1015_nonAustedo),createtype(A)*/ 
(
 npi,
 activity_id,
 federation_id,
 contact,
 source_name,
 "datetime",
 trackback_id,
 previous_activity,
 level_name,
 activity_role_name,
 type_name,
 native_type,
 details,
 line_item_id,
 brand_name,
 activity,
 line_item_datetime,
 line_item_previous_line_item,
 line_item_trackback_id,
 line_item_details,
 line_item_type_name,
 line_item_native_type,
 basket_id,
 web_url
)
AS
 SELECT act_hub_CSD1015_nonAustedo.npi,
        act_hub_CSD1015_nonAustedo.activity_id,
        act_hub_CSD1015_nonAustedo.federation_id,
        act_hub_CSD1015_nonAustedo.contact,
        act_hub_CSD1015_nonAustedo.source_name,
        act_hub_CSD1015_nonAustedo."datetime",
        act_hub_CSD1015_nonAustedo.trackback_id,
        act_hub_CSD1015_nonAustedo.previous_activity,
        act_hub_CSD1015_nonAustedo.level_name,
        act_hub_CSD1015_nonAustedo.activity_role_name,
        act_hub_CSD1015_nonAustedo.type_name,
        act_hub_CSD1015_nonAustedo.native_type,
        act_hub_CSD1015_nonAustedo.details,
        act_hub_CSD1015_nonAustedo.line_item_id,
        act_hub_CSD1015_nonAustedo.brand_name,
        act_hub_CSD1015_nonAustedo.activity,
        act_hub_CSD1015_nonAustedo.line_item_datetime,
        act_hub_CSD1015_nonAustedo.line_item_previous_line_item,
        act_hub_CSD1015_nonAustedo.line_item_trackback_id,
        act_hub_CSD1015_nonAustedo.line_item_details,
        act_hub_CSD1015_nonAustedo.line_item_type_name,
        act_hub_CSD1015_nonAustedo.line_item_native_type,
        act_hub_CSD1015_nonAustedo.basket_id,
        act_hub_CSD1015_nonAustedo.web_url
 FROM sandbox.act_hub_CSD1015_nonAustedo
 ORDER BY act_hub_CSD1015_nonAustedo.activity_id
SEGMENTED BY hash(act_hub_CSD1015_nonAustedo.activity_id) ALL NODES;

CREATE PROJECTION sandbox.zip_states_b0 /*+basename(zip_states),createtype(L)*/ 
(
 ZIP_CODE,
 STATE
)
AS
 SELECT zip_states.ZIP_CODE,
        zip_states.STATE
 FROM sandbox.zip_states
 ORDER BY zip_states.ZIP_CODE,
          zip_states.STATE
SEGMENTED BY hash(zip_states.ZIP_CODE, zip_states.STATE) ALL NODES;

CREATE PROJECTION sandbox.fcr_summ_0622_b0 /*+basename(fcr_summ_0622),createtype(A)*/ 
(
 rsm_name,
 rsm_title,
 region_number,
 rsm_email,
 sales_rep_name,
 sales_rep_title,
 territory_number,
 sales_rep_email,
 fcr_date
)
AS
 SELECT fcr_summ_0622.rsm_name,
        fcr_summ_0622.rsm_title,
        fcr_summ_0622.region_number,
        fcr_summ_0622.rsm_email,
        fcr_summ_0622.sales_rep_name,
        fcr_summ_0622.sales_rep_title,
        fcr_summ_0622.territory_number,
        fcr_summ_0622.sales_rep_email,
        fcr_summ_0622.fcr_date
 FROM sandbox.fcr_summ_0622
 ORDER BY fcr_summ_0622.rsm_name,
          fcr_summ_0622.rsm_title,
          fcr_summ_0622.region_number,
          fcr_summ_0622.rsm_email,
          fcr_summ_0622.sales_rep_name,
          fcr_summ_0622.sales_rep_title,
          fcr_summ_0622.territory_number,
          fcr_summ_0622.sales_rep_email
SEGMENTED BY hash(fcr_summ_0622.fcr_date, fcr_summ_0622.region_number, fcr_summ_0622.territory_number, fcr_summ_0622.rsm_title, fcr_summ_0622.sales_rep_title, fcr_summ_0622.rsm_name, fcr_summ_0622.sales_rep_name, fcr_summ_0622.rsm_email) ALL NODES;

CREATE PROJECTION sandbox.payer_test_b0 /*+basename(payer_test),createtype(A)*/ 
(
 IMS_ID,
 TVCMID,
 First_Name,
 Middle_Name,
 Last_Name,
 Cred,
 Location,
 Address_1,
 Address_2,
 City,
 State_Code,
 Zip_Code,
 Zip_Extension,
 Telephone,
 Alternative_Telephone
)
AS
 SELECT payer_test.IMS_ID,
        payer_test.TVCMID,
        payer_test.First_Name,
        payer_test.Middle_Name,
        payer_test.Last_Name,
        payer_test.Cred,
        payer_test.Location,
        payer_test.Address_1,
        payer_test.Address_2,
        payer_test.City,
        payer_test.State_Code,
        payer_test.Zip_Code,
        payer_test.Zip_Extension,
        payer_test.Telephone,
        payer_test.Alternative_Telephone
 FROM sandbox.payer_test
 ORDER BY payer_test.IMS_ID,
          payer_test.TVCMID,
          payer_test.First_Name,
          payer_test.Middle_Name,
          payer_test.Last_Name,
          payer_test.Cred,
          payer_test.Location,
          payer_test.Address_1
SEGMENTED BY hash(payer_test.TVCMID, payer_test.IMS_ID, payer_test.First_Name, payer_test.Middle_Name, payer_test.Last_Name, payer_test.City, payer_test.State_Code, payer_test.Zip_Code) ALL NODES;

CREATE PROJECTION sandbox.ftf_restrictions_v2_b0 /*+basename(ftf_restrictions_v2),createtype(A)*/ 
(
 health_plan_id,
 drug_id,
 restriction_code,
 restriction_detail_id,
 restriction_detail_text,
 restriction_addtnl_information_1,
 restriction_addtnl_information_2,
 step_count,
 pa_form,
 indication,
 grouped_restriction_level,
 record_id,
 file_id
)
AS
 SELECT ftf_restrictions_v2.health_plan_id,
        ftf_restrictions_v2.drug_id,
        ftf_restrictions_v2.restriction_code,
        ftf_restrictions_v2.restriction_detail_id,
        ftf_restrictions_v2.restriction_detail_text,
        ftf_restrictions_v2.restriction_addtnl_information_1,
        ftf_restrictions_v2.restriction_addtnl_information_2,
        ftf_restrictions_v2.step_count,
        ftf_restrictions_v2.pa_form,
        ftf_restrictions_v2.indication,
        ftf_restrictions_v2.grouped_restriction_level,
        ftf_restrictions_v2.record_id,
        ftf_restrictions_v2.file_id
 FROM sandbox.ftf_restrictions_v2
 ORDER BY ftf_restrictions_v2.health_plan_id,
          ftf_restrictions_v2.drug_id,
          ftf_restrictions_v2.restriction_code,
          ftf_restrictions_v2.restriction_detail_id,
          ftf_restrictions_v2.restriction_detail_text,
          ftf_restrictions_v2.restriction_addtnl_information_1,
          ftf_restrictions_v2.restriction_addtnl_information_2,
          ftf_restrictions_v2.step_count
SEGMENTED BY hash(ftf_restrictions_v2.record_id) ALL NODES;

CREATE PROJECTION sandbox.veeva_suggestions_b0 /*+basename(veeva_suggestions),createtype(L)*/ 
(
 account_priority_score_vod__c,
 account_vod__c,
 display_dismiss_vod__c,
 display_mark_as_complete_vod__c,
 display_score_vod__c,
 email_template_id_vod__c,
 email_template_vault_id_vod__c,
 email_template_vod__c,
 expiration_date_vod__c,
 marked_as_complete_vod__c,
 mark_complete_count_vod__c,
 name,
 ownerid,
 posted_date,
 priority_vod__c,
 reason_vod__c,
 record_type_name_vod__c,
 suppress_reason_vod__c,
 title_vod__c,
 business_rule_name,
 product,
 combined_owner_account_key,
 days_since_last_call
)
AS
 SELECT veeva_suggestions.account_priority_score_vod__c,
        veeva_suggestions.account_vod__c,
        veeva_suggestions.display_dismiss_vod__c,
        veeva_suggestions.display_mark_as_complete_vod__c,
        veeva_suggestions.display_score_vod__c,
        veeva_suggestions.email_template_id_vod__c,
        veeva_suggestions.email_template_vault_id_vod__c,
        veeva_suggestions.email_template_vod__c,
        veeva_suggestions.expiration_date_vod__c,
        veeva_suggestions.marked_as_complete_vod__c,
        veeva_suggestions.mark_complete_count_vod__c,
        veeva_suggestions.name,
        veeva_suggestions.ownerid,
        veeva_suggestions.posted_date,
        veeva_suggestions.priority_vod__c,
        veeva_suggestions.reason_vod__c,
        veeva_suggestions.record_type_name_vod__c,
        veeva_suggestions.suppress_reason_vod__c,
        veeva_suggestions.title_vod__c,
        veeva_suggestions.business_rule_name,
        veeva_suggestions.product,
        veeva_suggestions.combined_owner_account_key,
        veeva_suggestions.days_since_last_call
 FROM sandbox.veeva_suggestions
 ORDER BY veeva_suggestions.account_priority_score_vod__c,
          veeva_suggestions.account_vod__c,
          veeva_suggestions.display_dismiss_vod__c,
          veeva_suggestions.display_mark_as_complete_vod__c,
          veeva_suggestions.display_score_vod__c,
          veeva_suggestions.email_template_id_vod__c,
          veeva_suggestions.email_template_vault_id_vod__c,
          veeva_suggestions.email_template_vod__c
SEGMENTED BY hash(veeva_suggestions.account_priority_score_vod__c, veeva_suggestions.expiration_date_vod__c, veeva_suggestions.mark_complete_count_vod__c, veeva_suggestions.posted_date, veeva_suggestions.days_since_last_call, veeva_suggestions.display_dismiss_vod__c, veeva_suggestions.display_mark_as_complete_vod__c, veeva_suggestions.display_score_vod__c) ALL NODES;

CREATE PROJECTION sandbox.fcr_summary_0714_b0 /*+basename(fcr_summary_0714),createtype(A)*/ 
(
 rsm_name,
 rsm_title,
 region_number,
 rsm_email,
 sales_rep_name,
 sales_rep_title,
 territory_number,
 sales_rep_email,
 fcr_date
)
AS
 SELECT fcr_summary_0714.rsm_name,
        fcr_summary_0714.rsm_title,
        fcr_summary_0714.region_number,
        fcr_summary_0714.rsm_email,
        fcr_summary_0714.sales_rep_name,
        fcr_summary_0714.sales_rep_title,
        fcr_summary_0714.territory_number,
        fcr_summary_0714.sales_rep_email,
        fcr_summary_0714.fcr_date
 FROM sandbox.fcr_summary_0714
 ORDER BY fcr_summary_0714.rsm_name,
          fcr_summary_0714.rsm_title,
          fcr_summary_0714.region_number,
          fcr_summary_0714.rsm_email,
          fcr_summary_0714.sales_rep_name,
          fcr_summary_0714.sales_rep_title,
          fcr_summary_0714.territory_number,
          fcr_summary_0714.sales_rep_email
SEGMENTED BY hash(fcr_summary_0714.fcr_date, fcr_summary_0714.region_number, fcr_summary_0714.rsm_title, fcr_summary_0714.sales_rep_title, fcr_summary_0714.territory_number, fcr_summary_0714.rsm_email, fcr_summary_0714.sales_rep_email, fcr_summary_0714.rsm_name) ALL NODES;

CREATE PROJECTION sandbox."MediCal HCPs_b0" /*+basename(MediCal HCPs),createtype(L)*/ 
(
 Region_ID,
 Region_Name,
 Territory_ID,
 Territory_Name,
 IMS_ID,
 First_Name,
 Last_Name,
 Specialty_Name,
 Specialty_Group,
 ACUTE_MIGRAINE,
 PREVENT_MIGRAINE,
 "ANTI-CGRP",
 AJOVY
)
AS
 SELECT "MediCal HCPs".Region_ID,
        "MediCal HCPs".Region_Name,
        "MediCal HCPs".Territory_ID,
        "MediCal HCPs".Territory_Name,
        "MediCal HCPs".IMS_ID,
        "MediCal HCPs".First_Name,
        "MediCal HCPs".Last_Name,
        "MediCal HCPs".Specialty_Name,
        "MediCal HCPs".Specialty_Group,
        "MediCal HCPs".ACUTE_MIGRAINE,
        "MediCal HCPs".PREVENT_MIGRAINE,
        "MediCal HCPs"."ANTI-CGRP",
        "MediCal HCPs".AJOVY
 FROM sandbox."MediCal HCPs"
 ORDER BY "MediCal HCPs".Region_ID,
          "MediCal HCPs".Region_Name,
          "MediCal HCPs".Territory_ID,
          "MediCal HCPs".Territory_Name,
          "MediCal HCPs".IMS_ID,
          "MediCal HCPs".First_Name,
          "MediCal HCPs".Last_Name,
          "MediCal HCPs".Specialty_Name
SEGMENTED BY hash("MediCal HCPs".ACUTE_MIGRAINE, "MediCal HCPs".PREVENT_MIGRAINE, "MediCal HCPs"."ANTI-CGRP", "MediCal HCPs".AJOVY, "MediCal HCPs".Region_ID, "MediCal HCPs".Territory_ID, "MediCal HCPs".Territory_Name, "MediCal HCPs".IMS_ID) ALL NODES;

CREATE PROJECTION sandbox.presr_rx_for_June_ic_07192021_b0 /*+basename(presr_rx_for_June_ic_07192021),createtype(A)*/ 
(
 ims_id,
 payer_plan_number,
 ims_client_number,
 report_frequency,
 ims_product_group,
 basket_id,
 data_date,
 date,
 sales_category,
 tvcmid,
 prescriber_first_name,
 prescriber_last_name,
 basket_name,
 basket_type,
 rollup_week,
 rollup_month,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 unnormalized_nrx_count,
 unnormalized_trx_count,
 market_name,
 payer_name,
 plan_name,
 pbm_name,
 model,
 payment_method,
 ims_specialty,
 ims_rx_type,
 ims_supplemental_data,
 ims_zip_other,
 ims_report_number_cnt,
 cnt_file_id,
 cnt_record_id,
 ims_report_number_qty,
 qty_file_id,
 qty_record_id,
 rollup_flag,
 indication,
 pbm_parent_name
)
AS
 SELECT presr_rx_for_June_ic_07192021.ims_id,
        presr_rx_for_June_ic_07192021.payer_plan_number,
        presr_rx_for_June_ic_07192021.ims_client_number,
        presr_rx_for_June_ic_07192021.report_frequency,
        presr_rx_for_June_ic_07192021.ims_product_group,
        presr_rx_for_June_ic_07192021.basket_id,
        presr_rx_for_June_ic_07192021.data_date,
        presr_rx_for_June_ic_07192021.date,
        presr_rx_for_June_ic_07192021.sales_category,
        presr_rx_for_June_ic_07192021.tvcmid,
        presr_rx_for_June_ic_07192021.prescriber_first_name,
        presr_rx_for_June_ic_07192021.prescriber_last_name,
        presr_rx_for_June_ic_07192021.basket_name,
        presr_rx_for_June_ic_07192021.basket_type,
        presr_rx_for_June_ic_07192021.rollup_week,
        presr_rx_for_June_ic_07192021.rollup_month,
        presr_rx_for_June_ic_07192021.nrx_count,
        presr_rx_for_June_ic_07192021.trx_count,
        presr_rx_for_June_ic_07192021.nrx_quantity,
        presr_rx_for_June_ic_07192021.trx_quantity,
        presr_rx_for_June_ic_07192021.unnormalized_nrx_count,
        presr_rx_for_June_ic_07192021.unnormalized_trx_count,
        presr_rx_for_June_ic_07192021.market_name,
        presr_rx_for_June_ic_07192021.payer_name,
        presr_rx_for_June_ic_07192021.plan_name,
        presr_rx_for_June_ic_07192021.pbm_name,
        presr_rx_for_June_ic_07192021.model,
        presr_rx_for_June_ic_07192021.payment_method,
        presr_rx_for_June_ic_07192021.ims_specialty,
        presr_rx_for_June_ic_07192021.ims_rx_type,
        presr_rx_for_June_ic_07192021.ims_supplemental_data,
        presr_rx_for_June_ic_07192021.ims_zip_other,
        presr_rx_for_June_ic_07192021.ims_report_number_cnt,
        presr_rx_for_June_ic_07192021.cnt_file_id,
        presr_rx_for_June_ic_07192021.cnt_record_id,
        presr_rx_for_June_ic_07192021.ims_report_number_qty,
        presr_rx_for_June_ic_07192021.qty_file_id,
        presr_rx_for_June_ic_07192021.qty_record_id,
        presr_rx_for_June_ic_07192021.rollup_flag,
        presr_rx_for_June_ic_07192021.indication,
        presr_rx_for_June_ic_07192021.pbm_parent_name
 FROM sandbox.presr_rx_for_June_ic_07192021
 ORDER BY presr_rx_for_June_ic_07192021.rollup_flag,
          presr_rx_for_June_ic_07192021.ims_rx_type,
          presr_rx_for_June_ic_07192021.report_frequency,
          presr_rx_for_June_ic_07192021.basket_type,
          presr_rx_for_June_ic_07192021.ims_client_number,
          presr_rx_for_June_ic_07192021.indication,
          presr_rx_for_June_ic_07192021.market_name,
          presr_rx_for_June_ic_07192021.ims_product_group,
          presr_rx_for_June_ic_07192021.basket_id,
          presr_rx_for_June_ic_07192021.ims_specialty,
          presr_rx_for_June_ic_07192021.ims_zip_other,
          presr_rx_for_June_ic_07192021.ims_report_number_qty,
          presr_rx_for_June_ic_07192021.ims_report_number_cnt,
          presr_rx_for_June_ic_07192021.tvcmid,
          presr_rx_for_June_ic_07192021.payment_method,
          presr_rx_for_June_ic_07192021.payer_plan_number,
          presr_rx_for_June_ic_07192021.rollup_month,
          presr_rx_for_June_ic_07192021.rollup_week,
          presr_rx_for_June_ic_07192021.nrx_quantity,
          presr_rx_for_June_ic_07192021.trx_quantity,
          presr_rx_for_June_ic_07192021.nrx_count,
          presr_rx_for_June_ic_07192021.trx_count,
          presr_rx_for_June_ic_07192021.sales_category,
          presr_rx_for_June_ic_07192021.ims_id
SEGMENTED BY hash(presr_rx_for_June_ic_07192021.ims_id) ALL NODES;

CREATE PROJECTION sandbox.PSS_ARX_HCP_LIST_b0 /*+basename(PSS_ARX_HCP_LIST),createtype(L)*/ 
(
 "Prescribing Physician FN",
 "Prescribing Physician LN",
 "Prescribing Physician NPI"
)
AS
 SELECT PSS_ARX_HCP_LIST."Prescribing Physician FN",
        PSS_ARX_HCP_LIST."Prescribing Physician LN",
        PSS_ARX_HCP_LIST."Prescribing Physician NPI"
 FROM sandbox.PSS_ARX_HCP_LIST
 ORDER BY PSS_ARX_HCP_LIST."Prescribing Physician FN",
          PSS_ARX_HCP_LIST."Prescribing Physician LN",
          PSS_ARX_HCP_LIST."Prescribing Physician NPI"
SEGMENTED BY hash(PSS_ARX_HCP_LIST."Prescribing Physician NPI", PSS_ARX_HCP_LIST."Prescribing Physician FN", PSS_ARX_HCP_LIST."Prescribing Physician LN") ALL NODES;

CREATE PROJECTION sandbox."AcMonitor Missing IDs_b0" /*+basename(AcMonitor Missing IDs),createtype(L)*/ 
(
 IMSID
)
AS
 SELECT "AcMonitor Missing IDs".IMSID
 FROM sandbox."AcMonitor Missing IDs"
 ORDER BY "AcMonitor Missing IDs".IMSID
SEGMENTED BY hash("AcMonitor Missing IDs".IMSID) ALL NODES;

CREATE PROJECTION sandbox.raw_ftf_restrictions_v2_b0 /*+basename(raw_ftf_restrictions_v2),createtype(L)*/ 
(
 health_plan_id,
 drug_id,
 restriction_code,
 restriction_details_id,
 restriction_details_text,
 restriction_details_information_1,
 restriction_details_information_2,
 step_count,
 pa_form,
 indication,
 grouped_restriction_level
)
AS
 SELECT raw_ftf_restrictions_v2.health_plan_id,
        raw_ftf_restrictions_v2.drug_id,
        raw_ftf_restrictions_v2.restriction_code,
        raw_ftf_restrictions_v2.restriction_details_id,
        raw_ftf_restrictions_v2.restriction_details_text,
        raw_ftf_restrictions_v2.restriction_details_information_1,
        raw_ftf_restrictions_v2.restriction_details_information_2,
        raw_ftf_restrictions_v2.step_count,
        raw_ftf_restrictions_v2.pa_form,
        raw_ftf_restrictions_v2.indication,
        raw_ftf_restrictions_v2.grouped_restriction_level
 FROM sandbox.raw_ftf_restrictions_v2
 ORDER BY raw_ftf_restrictions_v2.health_plan_id,
          raw_ftf_restrictions_v2.drug_id,
          raw_ftf_restrictions_v2.restriction_code,
          raw_ftf_restrictions_v2.restriction_details_id,
          raw_ftf_restrictions_v2.restriction_details_text,
          raw_ftf_restrictions_v2.restriction_details_information_1,
          raw_ftf_restrictions_v2.restriction_details_information_2,
          raw_ftf_restrictions_v2.step_count
SEGMENTED BY hash(raw_ftf_restrictions_v2.health_plan_id, raw_ftf_restrictions_v2.drug_id, raw_ftf_restrictions_v2.restriction_details_id, raw_ftf_restrictions_v2.restriction_code, raw_ftf_restrictions_v2.step_count, raw_ftf_restrictions_v2.indication, raw_ftf_restrictions_v2.grouped_restriction_level, raw_ftf_restrictions_v2.restriction_details_text) ALL NODES;

CREATE PROJECTION sandbox.raw_iqvia_pbm_v2_b0 /*+basename(raw_iqvia_pbm_v2),createtype(L)*/ 
(
 pbm_name,
 payer_plan_id,
 xref_to_payer_plan_id,
 ipd_id,
 ipd_type,
 plan_name,
 pbm_id,
 ims_processor_number
)
AS
 SELECT raw_iqvia_pbm_v2.pbm_name,
        raw_iqvia_pbm_v2.payer_plan_id,
        raw_iqvia_pbm_v2.xref_to_payer_plan_id,
        raw_iqvia_pbm_v2.ipd_id,
        raw_iqvia_pbm_v2.ipd_type,
        raw_iqvia_pbm_v2.plan_name,
        raw_iqvia_pbm_v2.pbm_id,
        raw_iqvia_pbm_v2.ims_processor_number
 FROM sandbox.raw_iqvia_pbm_v2
 ORDER BY raw_iqvia_pbm_v2.pbm_name,
          raw_iqvia_pbm_v2.payer_plan_id,
          raw_iqvia_pbm_v2.xref_to_payer_plan_id,
          raw_iqvia_pbm_v2.ipd_id,
          raw_iqvia_pbm_v2.ipd_type,
          raw_iqvia_pbm_v2.plan_name,
          raw_iqvia_pbm_v2.pbm_id,
          raw_iqvia_pbm_v2.ims_processor_number
SEGMENTED BY hash(raw_iqvia_pbm_v2.payer_plan_id, raw_iqvia_pbm_v2.xref_to_payer_plan_id, raw_iqvia_pbm_v2.ipd_id, raw_iqvia_pbm_v2.ipd_type, raw_iqvia_pbm_v2.pbm_id, raw_iqvia_pbm_v2.ims_processor_number, raw_iqvia_pbm_v2.pbm_name, raw_iqvia_pbm_v2.plan_name) ALL NODES;

CREATE PROJECTION sandbox.raw_iqvia_plan_v2_b0 /*+basename(raw_iqvia_plan_v2),createtype(L)*/ 
(
 payer_id,
 payer_name,
 plan_id,
 payer_plan_id,
 plan_name,
 model,
 city,
 hq_state,
 operating_state,
 months_with_data
)
AS
 SELECT raw_iqvia_plan_v2.payer_id,
        raw_iqvia_plan_v2.payer_name,
        raw_iqvia_plan_v2.plan_id,
        raw_iqvia_plan_v2.payer_plan_id,
        raw_iqvia_plan_v2.plan_name,
        raw_iqvia_plan_v2.model,
        raw_iqvia_plan_v2.city,
        raw_iqvia_plan_v2.hq_state,
        raw_iqvia_plan_v2.operating_state,
        raw_iqvia_plan_v2.months_with_data
 FROM sandbox.raw_iqvia_plan_v2
 ORDER BY raw_iqvia_plan_v2.payer_id,
          raw_iqvia_plan_v2.payer_name,
          raw_iqvia_plan_v2.plan_id,
          raw_iqvia_plan_v2.payer_plan_id,
          raw_iqvia_plan_v2.plan_name,
          raw_iqvia_plan_v2.model,
          raw_iqvia_plan_v2.city,
          raw_iqvia_plan_v2.hq_state
SEGMENTED BY hash(raw_iqvia_plan_v2.payer_id, raw_iqvia_plan_v2.plan_id, raw_iqvia_plan_v2.hq_state, raw_iqvia_plan_v2.operating_state, raw_iqvia_plan_v2.months_with_data, raw_iqvia_plan_v2.payer_plan_id, raw_iqvia_plan_v2.model, raw_iqvia_plan_v2.city) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_jun2021_b0 /*+basename(ic_rx_jun2021),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_jun2021.ic_data_month,
        ic_rx_jun2021.basket_name,
        ic_rx_jun2021.sales_force_id,
        ic_rx_jun2021.area_number,
        ic_rx_jun2021.region_number,
        ic_rx_jun2021.territory_number,
        ic_rx_jun2021.ims_id,
        ic_rx_jun2021.tvcmid,
        ic_rx_jun2021.outlet_code,
        ic_rx_jun2021.va_station_number,
        ic_rx_jun2021.dnc_flag,
        ic_rx_jun2021.dnp_flag,
        ic_rx_jun2021.rollup_month,
        ic_rx_jun2021.month_bucket,
        ic_rx_jun2021.nrx_count,
        ic_rx_jun2021.trx_count,
        ic_rx_jun2021.nrx_quantity,
        ic_rx_jun2021.trx_quantity,
        ic_rx_jun2021.include_in_nation_rollup,
        ic_rx_jun2021.include_in_area_rollup,
        ic_rx_jun2021.include_in_region_rollup,
        ic_rx_jun2021.join_key,
        ic_rx_jun2021.row_source,
        ic_rx_jun2021.row_create_date,
        ic_rx_jun2021.indication,
        ic_rx_jun2021.outlet_dea,
        ic_rx_jun2021.payer_plan_number,
        ic_rx_jun2021.payment_method
 FROM sandbox.ic_rx_jun2021
 ORDER BY ic_rx_jun2021.ic_data_month,
          ic_rx_jun2021.basket_name,
          ic_rx_jun2021.sales_force_id,
          ic_rx_jun2021.area_number,
          ic_rx_jun2021.region_number,
          ic_rx_jun2021.territory_number,
          ic_rx_jun2021.ims_id,
          ic_rx_jun2021.tvcmid
SEGMENTED BY hash(ic_rx_jun2021.ic_data_month, ic_rx_jun2021.tvcmid, ic_rx_jun2021.outlet_code, ic_rx_jun2021.dnc_flag, ic_rx_jun2021.dnp_flag, ic_rx_jun2021.rollup_month, ic_rx_jun2021.month_bucket, ic_rx_jun2021.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_jun2021_b0 /*+basename(ic_demo_jun2021),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_jun2021.ic_data_month,
        ic_demo_jun2021.sales_force_id,
        ic_demo_jun2021.area_number,
        ic_demo_jun2021.region_number,
        ic_demo_jun2021.territory_number,
        ic_demo_jun2021.ims_id,
        ic_demo_jun2021.tvcmid,
        ic_demo_jun2021.outlet_code,
        ic_demo_jun2021.va_station_number,
        ic_demo_jun2021.specialty,
        ic_demo_jun2021.last_name,
        ic_demo_jun2021.first_name,
        ic_demo_jun2021.mid_name,
        ic_demo_jun2021.address_1,
        ic_demo_jun2021.address_2,
        ic_demo_jun2021.address_3,
        ic_demo_jun2021.city,
        ic_demo_jun2021.state,
        ic_demo_jun2021.zip,
        ic_demo_jun2021.address_source,
        ic_demo_jun2021.pdrp_flag,
        ic_demo_jun2021.pdrp_date,
        ic_demo_jun2021.np_pa_flag,
        ic_demo_jun2021.no_spend,
        ic_demo_jun2021.ama_no_contact_flag,
        ic_demo_jun2021.join_key,
        ic_demo_jun2021.row_source,
        ic_demo_jun2021.row_create_date,
        ic_demo_jun2021.outlet_dea,
        ic_demo_jun2021.secondary_specialty
 FROM sandbox.ic_demo_jun2021
 ORDER BY ic_demo_jun2021.ic_data_month,
          ic_demo_jun2021.sales_force_id,
          ic_demo_jun2021.area_number,
          ic_demo_jun2021.region_number,
          ic_demo_jun2021.territory_number,
          ic_demo_jun2021.ims_id,
          ic_demo_jun2021.tvcmid,
          ic_demo_jun2021.outlet_code
SEGMENTED BY hash(ic_demo_jun2021.ic_data_month, ic_demo_jun2021.tvcmid, ic_demo_jun2021.outlet_code, ic_demo_jun2021.mid_name, ic_demo_jun2021.state, ic_demo_jun2021.zip, ic_demo_jun2021.pdrp_flag, ic_demo_jun2021.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.hcp_target_list_csd_1145_new_b0 /*+basename(hcp_target_list_csd_1145_new),createtype(L)*/ 
(
 IMS_ID,
 NPI,
 First_Name,
 Last_Name,
 Address_1,
 Address_2,
 City,
 State,
 Zip,
 Specialty_Group,
 Target_Valuation_Decile,
 Bright_Spots_Segment_2021,
 DMD_SEQ,
 DMD_ID,
 DMD_EMAIL,
 EXPIRATION_DATE,
 SOURCE,
 FEDID,
 Marketing_Cloud_ID,
 Encrypted_Federation_ID,
 Encrypted_Product_ID,
 primary_specialty_code
)
AS
 SELECT hcp_target_list_csd_1145_new.IMS_ID,
        hcp_target_list_csd_1145_new.NPI,
        hcp_target_list_csd_1145_new.First_Name,
        hcp_target_list_csd_1145_new.Last_Name,
        hcp_target_list_csd_1145_new.Address_1,
        hcp_target_list_csd_1145_new.Address_2,
        hcp_target_list_csd_1145_new.City,
        hcp_target_list_csd_1145_new.State,
        hcp_target_list_csd_1145_new.Zip,
        hcp_target_list_csd_1145_new.Specialty_Group,
        hcp_target_list_csd_1145_new.Target_Valuation_Decile,
        hcp_target_list_csd_1145_new.Bright_Spots_Segment_2021,
        hcp_target_list_csd_1145_new.DMD_SEQ,
        hcp_target_list_csd_1145_new.DMD_ID,
        hcp_target_list_csd_1145_new.DMD_EMAIL,
        hcp_target_list_csd_1145_new.EXPIRATION_DATE,
        hcp_target_list_csd_1145_new.SOURCE,
        hcp_target_list_csd_1145_new.FEDID,
        hcp_target_list_csd_1145_new.Marketing_Cloud_ID,
        hcp_target_list_csd_1145_new.Encrypted_Federation_ID,
        hcp_target_list_csd_1145_new.Encrypted_Product_ID,
        hcp_target_list_csd_1145_new.primary_specialty_code
 FROM sandbox.hcp_target_list_csd_1145_new
 ORDER BY hcp_target_list_csd_1145_new.IMS_ID,
          hcp_target_list_csd_1145_new.NPI,
          hcp_target_list_csd_1145_new.First_Name,
          hcp_target_list_csd_1145_new.Last_Name,
          hcp_target_list_csd_1145_new.Address_1,
          hcp_target_list_csd_1145_new.Address_2,
          hcp_target_list_csd_1145_new.City,
          hcp_target_list_csd_1145_new.State
SEGMENTED BY hash(hcp_target_list_csd_1145_new.EXPIRATION_DATE, hcp_target_list_csd_1145_new.State, hcp_target_list_csd_1145_new.Zip, hcp_target_list_csd_1145_new.IMS_ID, hcp_target_list_csd_1145_new.NPI, hcp_target_list_csd_1145_new.First_Name, hcp_target_list_csd_1145_new.Last_Name, hcp_target_list_csd_1145_new.Specialty_Group) ALL NODES;

CREATE PROJECTION sandbox.hcp_target_list_csd_1145_updtd_b0 /*+basename(hcp_target_list_csd_1145_updtd),createtype(A)*/ 
(
 IMS_ID,
 NPI,
 First_Name,
 Last_Name,
 Address_1,
 Address_2,
 City,
 State,
 Zip,
 Specialty_Group,
 Target_Valuation_Decile,
 Bright_Spots_Segment_2021,
 DMD_SEQ,
 DMD_ID,
 DMD_EMAIL,
 EXPIRATION_DATE,
 SOURCE,
 FEDID,
 Marketing_Cloud_ID,
 Encrypted_Federation_ID,
 Encrypted_Product_ID,
 primary_specialty_code,
 phone
)
AS
 SELECT hcp_target_list_csd_1145_updtd.IMS_ID,
        hcp_target_list_csd_1145_updtd.NPI,
        hcp_target_list_csd_1145_updtd.First_Name,
        hcp_target_list_csd_1145_updtd.Last_Name,
        hcp_target_list_csd_1145_updtd.Address_1,
        hcp_target_list_csd_1145_updtd.Address_2,
        hcp_target_list_csd_1145_updtd.City,
        hcp_target_list_csd_1145_updtd.State,
        hcp_target_list_csd_1145_updtd.Zip,
        hcp_target_list_csd_1145_updtd.Specialty_Group,
        hcp_target_list_csd_1145_updtd.Target_Valuation_Decile,
        hcp_target_list_csd_1145_updtd.Bright_Spots_Segment_2021,
        hcp_target_list_csd_1145_updtd.DMD_SEQ,
        hcp_target_list_csd_1145_updtd.DMD_ID,
        hcp_target_list_csd_1145_updtd.DMD_EMAIL,
        hcp_target_list_csd_1145_updtd.EXPIRATION_DATE,
        hcp_target_list_csd_1145_updtd.SOURCE,
        hcp_target_list_csd_1145_updtd.FEDID,
        hcp_target_list_csd_1145_updtd.Marketing_Cloud_ID,
        hcp_target_list_csd_1145_updtd.Encrypted_Federation_ID,
        hcp_target_list_csd_1145_updtd.Encrypted_Product_ID,
        hcp_target_list_csd_1145_updtd.primary_specialty_code,
        hcp_target_list_csd_1145_updtd.phone
 FROM sandbox.hcp_target_list_csd_1145_updtd
 ORDER BY hcp_target_list_csd_1145_updtd.IMS_ID,
          hcp_target_list_csd_1145_updtd.NPI,
          hcp_target_list_csd_1145_updtd.First_Name,
          hcp_target_list_csd_1145_updtd.Last_Name,
          hcp_target_list_csd_1145_updtd.Address_1,
          hcp_target_list_csd_1145_updtd.Address_2,
          hcp_target_list_csd_1145_updtd.City,
          hcp_target_list_csd_1145_updtd.State
SEGMENTED BY hash(hcp_target_list_csd_1145_updtd.IMS_ID, hcp_target_list_csd_1145_updtd.NPI) ALL NODES;

CREATE PROJECTION sandbox.fcr_summary_b0 /*+basename(fcr_summary),createtype(A)*/ 
(
 rsm_name,
 rsm_title,
 region_number,
 rsm_email,
 sales_rep_name,
 sales_rep_title,
 territory_number,
 sales_rep_email,
 fcr_date,
 report_status_vod__c
)
AS
 SELECT fcr_summary.rsm_name,
        fcr_summary.rsm_title,
        fcr_summary.region_number,
        fcr_summary.rsm_email,
        fcr_summary.sales_rep_name,
        fcr_summary.sales_rep_title,
        fcr_summary.territory_number,
        fcr_summary.sales_rep_email,
        fcr_summary.fcr_date,
        fcr_summary.report_status_vod__c
 FROM sandbox.fcr_summary
 ORDER BY fcr_summary.rsm_name,
          fcr_summary.rsm_title,
          fcr_summary.region_number,
          fcr_summary.rsm_email,
          fcr_summary.sales_rep_name,
          fcr_summary.sales_rep_title,
          fcr_summary.territory_number,
          fcr_summary.sales_rep_email
SEGMENTED BY hash(fcr_summary.fcr_date, fcr_summary.report_status_vod__c, fcr_summary.rsm_title, fcr_summary.region_number, fcr_summary.sales_rep_title, fcr_summary.territory_number, fcr_summary.rsm_email, fcr_summary.sales_rep_email) ALL NODES;

CREATE PROJECTION sandbox.sfa_call_bkp_0908_b0 /*+basename(sfa_call_bkp_0908),createtype(A)*/ 
(
 sales_force_id,
 call_id,
 veeva_account_id,
 ims_id,
 ims_outlet_id,
 customer_type,
 first_name,
 last_name,
 call_type,
 legacy_call_type,
 ceph_id,
 dea_num,
 rep_id,
 rep_first_name,
 rep_last_name,
 territory_number,
 zip_on_call,
 call_date,
 submit_date,
 attendees,
 attendee_type,
 area_number,
 region_number,
 tvcmid,
 call_recordtype,
 call_duration,
 call_datetime,
 call_timezone,
 how_executed,
 remote_meeting_id
)
AS
 SELECT sfa_call_bkp_0908.sales_force_id,
        sfa_call_bkp_0908.call_id,
        sfa_call_bkp_0908.veeva_account_id,
        sfa_call_bkp_0908.ims_id,
        sfa_call_bkp_0908.ims_outlet_id,
        sfa_call_bkp_0908.customer_type,
        sfa_call_bkp_0908.first_name,
        sfa_call_bkp_0908.last_name,
        sfa_call_bkp_0908.call_type,
        sfa_call_bkp_0908.legacy_call_type,
        sfa_call_bkp_0908.ceph_id,
        sfa_call_bkp_0908.dea_num,
        sfa_call_bkp_0908.rep_id,
        sfa_call_bkp_0908.rep_first_name,
        sfa_call_bkp_0908.rep_last_name,
        sfa_call_bkp_0908.territory_number,
        sfa_call_bkp_0908.zip_on_call,
        sfa_call_bkp_0908.call_date,
        sfa_call_bkp_0908.submit_date,
        sfa_call_bkp_0908.attendees,
        sfa_call_bkp_0908.attendee_type,
        sfa_call_bkp_0908.area_number,
        sfa_call_bkp_0908.region_number,
        sfa_call_bkp_0908.tvcmid,
        sfa_call_bkp_0908.call_recordtype,
        sfa_call_bkp_0908.call_duration,
        sfa_call_bkp_0908.call_datetime,
        sfa_call_bkp_0908.call_timezone,
        sfa_call_bkp_0908.how_executed,
        sfa_call_bkp_0908.remote_meeting_id
 FROM sandbox.sfa_call_bkp_0908
 ORDER BY sfa_call_bkp_0908.sales_force_id,
          sfa_call_bkp_0908.call_id,
          sfa_call_bkp_0908.veeva_account_id,
          sfa_call_bkp_0908.ims_id,
          sfa_call_bkp_0908.ims_outlet_id
SEGMENTED BY hash(sfa_call_bkp_0908.sales_force_id) ALL NODES;

CREATE PROJECTION sandbox."SYNEOS_TERR IDs 09022021_b0" /*+basename(SYNEOS_TERR IDs 09022021),createtype(L)*/ 
(
 "RMS Territory ID"
)
AS
 SELECT "SYNEOS_TERR IDs 09022021"."RMS Territory ID"
 FROM sandbox."SYNEOS_TERR IDs 09022021"
 ORDER BY "SYNEOS_TERR IDs 09022021"."RMS Territory ID"
SEGMENTED BY hash("SYNEOS_TERR IDs 09022021"."RMS Territory ID") ALL NODES;

CREATE PROJECTION sandbox."CUstomer Flags QC09172021_b0" /*+basename(CUstomer Flags QC09172021),createtype(L)*/ 
(
 TVCM_ID,
 PRODUCT_NAME
)
AS
 SELECT "CUstomer Flags QC09172021".TVCM_ID,
        "CUstomer Flags QC09172021".PRODUCT_NAME
 FROM sandbox."CUstomer Flags QC09172021"
 ORDER BY "CUstomer Flags QC09172021".TVCM_ID,
          "CUstomer Flags QC09172021".PRODUCT_NAME
SEGMENTED BY hash("CUstomer Flags QC09172021".TVCM_ID, "CUstomer Flags QC09172021".PRODUCT_NAME) ALL NODES;

CREATE PROJECTION sandbox.datamart_sfa_call_09202021_b0 /*+basename(datamart_sfa_call_09202021),createtype(A)*/ 
(
 sales_force_id,
 call_id,
 veeva_account_id,
 ims_id,
 ims_outlet_id,
 customer_type,
 first_name,
 last_name,
 call_type,
 legacy_call_type,
 ceph_id,
 dea_num,
 rep_id,
 rep_first_name,
 rep_last_name,
 territory_number,
 zip_on_call,
 call_date,
 submit_date,
 attendees,
 attendee_type,
 area_number,
 region_number,
 tvcmid,
 call_recordtype,
 call_duration,
 call_datetime,
 call_timezone,
 how_executed,
 remote_meeting_id
)
AS
 SELECT datamart_sfa_call_09202021.sales_force_id,
        datamart_sfa_call_09202021.call_id,
        datamart_sfa_call_09202021.veeva_account_id,
        datamart_sfa_call_09202021.ims_id,
        datamart_sfa_call_09202021.ims_outlet_id,
        datamart_sfa_call_09202021.customer_type,
        datamart_sfa_call_09202021.first_name,
        datamart_sfa_call_09202021.last_name,
        datamart_sfa_call_09202021.call_type,
        datamart_sfa_call_09202021.legacy_call_type,
        datamart_sfa_call_09202021.ceph_id,
        datamart_sfa_call_09202021.dea_num,
        datamart_sfa_call_09202021.rep_id,
        datamart_sfa_call_09202021.rep_first_name,
        datamart_sfa_call_09202021.rep_last_name,
        datamart_sfa_call_09202021.territory_number,
        datamart_sfa_call_09202021.zip_on_call,
        datamart_sfa_call_09202021.call_date,
        datamart_sfa_call_09202021.submit_date,
        datamart_sfa_call_09202021.attendees,
        datamart_sfa_call_09202021.attendee_type,
        datamart_sfa_call_09202021.area_number,
        datamart_sfa_call_09202021.region_number,
        datamart_sfa_call_09202021.tvcmid,
        datamart_sfa_call_09202021.call_recordtype,
        datamart_sfa_call_09202021.call_duration,
        datamart_sfa_call_09202021.call_datetime,
        datamart_sfa_call_09202021.call_timezone,
        datamart_sfa_call_09202021.how_executed,
        datamart_sfa_call_09202021.remote_meeting_id
 FROM sandbox.datamart_sfa_call_09202021
 ORDER BY datamart_sfa_call_09202021.sales_force_id,
          datamart_sfa_call_09202021.call_id,
          datamart_sfa_call_09202021.veeva_account_id,
          datamart_sfa_call_09202021.ims_id,
          datamart_sfa_call_09202021.ims_outlet_id
SEGMENTED BY hash(datamart_sfa_call_09202021.sales_force_id) ALL NODES;

CREATE PROJECTION sandbox.archer_target_data_v2_b0 /*+basename(archer_target_data_v2),createtype(A)*/ 
(
 sales_force_id,
 period,
 veeva_account_id,
 ims_id,
 tvcmid,
 first_name,
 last_name,
 specialty,
 area_name,
 region_name,
 territory_id,
 basket_id,
 basket_name,
 p1,
 p2,
 p3
)
AS
 SELECT archer_target_data_v2.sales_force_id,
        archer_target_data_v2.period,
        archer_target_data_v2.veeva_account_id,
        archer_target_data_v2.ims_id,
        archer_target_data_v2.tvcmid,
        archer_target_data_v2.first_name,
        archer_target_data_v2.last_name,
        archer_target_data_v2.specialty,
        archer_target_data_v2.area_name,
        archer_target_data_v2.region_name,
        archer_target_data_v2.territory_id,
        archer_target_data_v2.basket_id,
        archer_target_data_v2.basket_name,
        archer_target_data_v2.p1,
        archer_target_data_v2.p2,
        archer_target_data_v2.p3
 FROM sandbox.archer_target_data_v2
 ORDER BY archer_target_data_v2.sales_force_id,
          archer_target_data_v2.period,
          archer_target_data_v2.veeva_account_id,
          archer_target_data_v2.ims_id,
          archer_target_data_v2.tvcmid,
          archer_target_data_v2.first_name,
          archer_target_data_v2.last_name,
          archer_target_data_v2.specialty
SEGMENTED BY hash(archer_target_data_v2.sales_force_id, archer_target_data_v2.tvcmid, archer_target_data_v2.territory_id, archer_target_data_v2.basket_id, archer_target_data_v2.p1, archer_target_data_v2.p2, archer_target_data_v2.p3, archer_target_data_v2.ims_id) ALL NODES;

CREATE PROJECTION sandbox.coverage_details_demographics_overview_b0 /*+basename(coverage_details_demographics_overview),createtype(L)*/ 
(
 Plan_Name,
 Display_Plan_ID,
 Payer,
 Plan_Type,
 Channel,
 Pharmacy_Enrollment,
 Product,
 Tier,
 Pharmacy_Restrictions,
 Pharmacy_Coverage,
 Copay,
 Austedo_Publisher
)
AS
 SELECT coverage_details_demographics_overview.Plan_Name,
        coverage_details_demographics_overview.Display_Plan_ID,
        coverage_details_demographics_overview.Payer,
        coverage_details_demographics_overview.Plan_Type,
        coverage_details_demographics_overview.Channel,
        coverage_details_demographics_overview.Pharmacy_Enrollment,
        coverage_details_demographics_overview.Product,
        coverage_details_demographics_overview.Tier,
        coverage_details_demographics_overview.Pharmacy_Restrictions,
        coverage_details_demographics_overview.Pharmacy_Coverage,
        coverage_details_demographics_overview.Copay,
        coverage_details_demographics_overview.Austedo_Publisher
 FROM sandbox.coverage_details_demographics_overview
 ORDER BY coverage_details_demographics_overview.Plan_Name,
          coverage_details_demographics_overview.Display_Plan_ID,
          coverage_details_demographics_overview.Payer,
          coverage_details_demographics_overview.Plan_Type,
          coverage_details_demographics_overview.Channel,
          coverage_details_demographics_overview.Pharmacy_Enrollment,
          coverage_details_demographics_overview.Product,
          coverage_details_demographics_overview.Tier
SEGMENTED BY hash(coverage_details_demographics_overview.Plan_Name, coverage_details_demographics_overview.Display_Plan_ID, coverage_details_demographics_overview.Payer, coverage_details_demographics_overview.Plan_Type, coverage_details_demographics_overview.Channel, coverage_details_demographics_overview.Pharmacy_Enrollment, coverage_details_demographics_overview.Product, coverage_details_demographics_overview.Tier) ALL NODES;

CREATE PROJECTION sandbox.coverage_details_market_coverage_b0 /*+basename(coverage_details_market_coverage),createtype(L)*/ 
(
 Plan_Name,
 Display_Plan_ID,
 Pharmacy_Enrollment,
 Plan_Type,
 Product,
 Tier,
 Pharmacy_Restrictions,
 Pharmacy_Coverage,
 Copay,
 Austedo_Publisher
)
AS
 SELECT coverage_details_market_coverage.Plan_Name,
        coverage_details_market_coverage.Display_Plan_ID,
        coverage_details_market_coverage.Pharmacy_Enrollment,
        coverage_details_market_coverage.Plan_Type,
        coverage_details_market_coverage.Product,
        coverage_details_market_coverage.Tier,
        coverage_details_market_coverage.Pharmacy_Restrictions,
        coverage_details_market_coverage.Pharmacy_Coverage,
        coverage_details_market_coverage.Copay,
        coverage_details_market_coverage.Austedo_Publisher
 FROM sandbox.coverage_details_market_coverage
 ORDER BY coverage_details_market_coverage.Plan_Name,
          coverage_details_market_coverage.Display_Plan_ID,
          coverage_details_market_coverage.Pharmacy_Enrollment,
          coverage_details_market_coverage.Plan_Type,
          coverage_details_market_coverage.Product,
          coverage_details_market_coverage.Tier,
          coverage_details_market_coverage.Pharmacy_Restrictions,
          coverage_details_market_coverage.Pharmacy_Coverage
SEGMENTED BY hash(coverage_details_market_coverage.Plan_Name, coverage_details_market_coverage.Display_Plan_ID, coverage_details_market_coverage.Pharmacy_Enrollment, coverage_details_market_coverage.Plan_Type, coverage_details_market_coverage.Product, coverage_details_market_coverage.Tier, coverage_details_market_coverage.Pharmacy_Restrictions, coverage_details_market_coverage.Pharmacy_Coverage) ALL NODES;

CREATE PROJECTION sandbox.npa_b0 /*+basename(npa),createtype(L)*/ 
(
 Product,
 Metric,
 Oct_2015,
 Nov_2015,
 Dec_2015,
 Jan_2016,
 Feb_2016,
 Mar_2016,
 Apr_2016,
 May_2016,
 Jun_2016,
 Jul_2016,
 Aug_2016,
 Sep_2016,
 Oct_2016,
 Nov_2016,
 Dec_2016,
 Jan_2017,
 Feb_2017,
 Mar_2017,
 Apr_2017,
 May_2017,
 Jun_2017,
 Jul_2017,
 Aug_2017,
 Sep_2017,
 Oct_2017,
 Nov_2017,
 Dec_2017,
 Jan_2018,
 Feb_2018,
 Mar_2018,
 Apr_2018,
 May_2018,
 Jun_2018,
 Jul_2018,
 Aug_2018,
 Sep_2018,
 Oct_2018,
 Nov_2018,
 Dec_2018,
 Jan_2019,
 Feb_2019,
 Mar_2019,
 Apr_2019,
 May_2019,
 Jun_2019,
 Jul_2019,
 Aug_2019,
 Sep_2019,
 Oct_2019,
 Nov_2019,
 Dec_2019,
 Jan_2020,
 Feb_2020,
 Mar_2020,
 Apr_2020,
 May_2020,
 Jun_2020,
 Jul_2020,
 Aug_2020,
 Sep_2020,
 Oct_2020,
 Nov_2020,
 Dec_2020,
 Jan_2021,
 Feb_2021,
 Mar_2021,
 Apr_2021,
 May_2021,
 Jun_2021,
 Jul_2021,
 Aug_2021,
 Sep_2021
)
AS
 SELECT npa.Product,
        npa.Metric,
        npa.Oct_2015,
        npa.Nov_2015,
        npa.Dec_2015,
        npa.Jan_2016,
        npa.Feb_2016,
        npa.Mar_2016,
        npa.Apr_2016,
        npa.May_2016,
        npa.Jun_2016,
        npa.Jul_2016,
        npa.Aug_2016,
        npa.Sep_2016,
        npa.Oct_2016,
        npa.Nov_2016,
        npa.Dec_2016,
        npa.Jan_2017,
        npa.Feb_2017,
        npa.Mar_2017,
        npa.Apr_2017,
        npa.May_2017,
        npa.Jun_2017,
        npa.Jul_2017,
        npa.Aug_2017,
        npa.Sep_2017,
        npa.Oct_2017,
        npa.Nov_2017,
        npa.Dec_2017,
        npa.Jan_2018,
        npa.Feb_2018,
        npa.Mar_2018,
        npa.Apr_2018,
        npa.May_2018,
        npa.Jun_2018,
        npa.Jul_2018,
        npa.Aug_2018,
        npa.Sep_2018,
        npa.Oct_2018,
        npa.Nov_2018,
        npa.Dec_2018,
        npa.Jan_2019,
        npa.Feb_2019,
        npa.Mar_2019,
        npa.Apr_2019,
        npa.May_2019,
        npa.Jun_2019,
        npa.Jul_2019,
        npa.Aug_2019,
        npa.Sep_2019,
        npa.Oct_2019,
        npa.Nov_2019,
        npa.Dec_2019,
        npa.Jan_2020,
        npa.Feb_2020,
        npa.Mar_2020,
        npa.Apr_2020,
        npa.May_2020,
        npa.Jun_2020,
        npa.Jul_2020,
        npa.Aug_2020,
        npa.Sep_2020,
        npa.Oct_2020,
        npa.Nov_2020,
        npa.Dec_2020,
        npa.Jan_2021,
        npa.Feb_2021,
        npa.Mar_2021,
        npa.Apr_2021,
        npa.May_2021,
        npa.Jun_2021,
        npa.Jul_2021,
        npa.Aug_2021,
        npa.Sep_2021
 FROM sandbox.npa
 ORDER BY npa.Product,
          npa.Metric,
          npa.Oct_2015,
          npa.Nov_2015,
          npa.Dec_2015,
          npa.Jan_2016,
          npa.Feb_2016,
          npa.Mar_2016
SEGMENTED BY hash(npa.Oct_2015, npa.Nov_2015, npa.Dec_2015, npa.Jan_2016, npa.Feb_2016, npa.Mar_2016, npa.Apr_2016, npa.May_2016) ALL NODES;

CREATE PROJECTION sandbox.npa_method_of_payment_b0 /*+basename(npa_method_of_payment),createtype(L)*/ 
(
 ATC3,
 Product,
 Brand_Generic,
 Combined_Molecule,
 Corporation,
 Metric,
 Oct_2018,
 Nov_2018,
 Dec_2018,
 Jan_2019,
 Feb_2019,
 Mar_2019,
 Apr_2019,
 May_2019,
 Jun_2019,
 Jul_2019,
 Aug_2019,
 Sep_2019,
 Oct_2019,
 Nov_2019,
 Dec_2019,
 Jan_2020,
 Feb_2020,
 Mar_2020,
 Apr_2020,
 May_2020,
 Jun_2020,
 Jul_2020,
 Aug_2020,
 Sep_2020,
 Oct_2020,
 Nov_2020,
 Dec_2020,
 Jan_2021,
 Feb_2021,
 Mar_2021,
 Apr_2021,
 May_2021,
 Jun_2021,
 Jul_2021,
 Aug_2021,
 Sep_2021
)
AS
 SELECT npa_method_of_payment.ATC3,
        npa_method_of_payment.Product,
        npa_method_of_payment.Brand_Generic,
        npa_method_of_payment.Combined_Molecule,
        npa_method_of_payment.Corporation,
        npa_method_of_payment.Metric,
        npa_method_of_payment.Oct_2018,
        npa_method_of_payment.Nov_2018,
        npa_method_of_payment.Dec_2018,
        npa_method_of_payment.Jan_2019,
        npa_method_of_payment.Feb_2019,
        npa_method_of_payment.Mar_2019,
        npa_method_of_payment.Apr_2019,
        npa_method_of_payment.May_2019,
        npa_method_of_payment.Jun_2019,
        npa_method_of_payment.Jul_2019,
        npa_method_of_payment.Aug_2019,
        npa_method_of_payment.Sep_2019,
        npa_method_of_payment.Oct_2019,
        npa_method_of_payment.Nov_2019,
        npa_method_of_payment.Dec_2019,
        npa_method_of_payment.Jan_2020,
        npa_method_of_payment.Feb_2020,
        npa_method_of_payment.Mar_2020,
        npa_method_of_payment.Apr_2020,
        npa_method_of_payment.May_2020,
        npa_method_of_payment.Jun_2020,
        npa_method_of_payment.Jul_2020,
        npa_method_of_payment.Aug_2020,
        npa_method_of_payment.Sep_2020,
        npa_method_of_payment.Oct_2020,
        npa_method_of_payment.Nov_2020,
        npa_method_of_payment.Dec_2020,
        npa_method_of_payment.Jan_2021,
        npa_method_of_payment.Feb_2021,
        npa_method_of_payment.Mar_2021,
        npa_method_of_payment.Apr_2021,
        npa_method_of_payment.May_2021,
        npa_method_of_payment.Jun_2021,
        npa_method_of_payment.Jul_2021,
        npa_method_of_payment.Aug_2021,
        npa_method_of_payment.Sep_2021
 FROM sandbox.npa_method_of_payment
 ORDER BY npa_method_of_payment.ATC3,
          npa_method_of_payment.Product,
          npa_method_of_payment.Brand_Generic,
          npa_method_of_payment.Combined_Molecule,
          npa_method_of_payment.Corporation,
          npa_method_of_payment.Metric,
          npa_method_of_payment.Oct_2018,
          npa_method_of_payment.Nov_2018
SEGMENTED BY hash(npa_method_of_payment.Oct_2018, npa_method_of_payment.Nov_2018, npa_method_of_payment.Dec_2018, npa_method_of_payment.Jan_2019, npa_method_of_payment.Feb_2019, npa_method_of_payment.Mar_2019, npa_method_of_payment.Apr_2019, npa_method_of_payment.May_2019) ALL NODES;

CREATE PROJECTION sandbox.sob_bkp_b0 /*+basename(sob_bkp),createtype(A)*/ 
(
 MONTHID,
 AGE,
 GENDER,
 PAYTYPE,
 SPECIALTY,
 CHANNEL,
 INDICATION,
 SOB,
 ARISTADA_INITIO_FLAG,
 PRIOR_PRODUCT,
 INDEX_PRODUCT,
 PATIENT_COUNT
)
AS
 SELECT sob_bkp.MONTHID,
        sob_bkp.AGE,
        sob_bkp.GENDER,
        sob_bkp.PAYTYPE,
        sob_bkp.SPECIALTY,
        sob_bkp.CHANNEL,
        sob_bkp.INDICATION,
        sob_bkp.SOB,
        sob_bkp.ARISTADA_INITIO_FLAG,
        sob_bkp.PRIOR_PRODUCT,
        sob_bkp.INDEX_PRODUCT,
        sob_bkp.PATIENT_COUNT
 FROM sandbox.sob_bkp
 ORDER BY sob_bkp.MONTHID,
          sob_bkp.AGE,
          sob_bkp.GENDER,
          sob_bkp.PAYTYPE,
          sob_bkp.SPECIALTY,
          sob_bkp.CHANNEL,
          sob_bkp.INDICATION,
          sob_bkp.SOB
SEGMENTED BY hash(sob_bkp.PATIENT_COUNT, sob_bkp.MONTHID, sob_bkp.AGE, sob_bkp.GENDER, sob_bkp.PAYTYPE, sob_bkp.SPECIALTY, sob_bkp.CHANNEL, sob_bkp.INDICATION) ALL NODES;

CREATE PROJECTION sandbox.archer_target_data_v3_b0 /*+basename(archer_target_data_v3),createtype(A)*/ 
(
 veeva_account_id,
 tvcmid,
 ims_id,
 npi,
 vmat2_decile,
 first_name,
 last_name,
 specialty_group,
 specialty,
 address,
 city,
 state,
 zip
)
AS
 SELECT archer_target_data_v3.veeva_account_id,
        archer_target_data_v3.tvcmid,
        archer_target_data_v3.ims_id,
        archer_target_data_v3.npi,
        archer_target_data_v3.vmat2_decile,
        archer_target_data_v3.first_name,
        archer_target_data_v3.last_name,
        archer_target_data_v3.specialty_group,
        archer_target_data_v3.specialty,
        archer_target_data_v3.address,
        archer_target_data_v3.city,
        archer_target_data_v3.state,
        archer_target_data_v3.zip
 FROM sandbox.archer_target_data_v3
 ORDER BY archer_target_data_v3.veeva_account_id,
          archer_target_data_v3.tvcmid,
          archer_target_data_v3.ims_id,
          archer_target_data_v3.npi,
          archer_target_data_v3.vmat2_decile,
          archer_target_data_v3.first_name,
          archer_target_data_v3.last_name,
          archer_target_data_v3.specialty_group
SEGMENTED BY hash(archer_target_data_v3.tvcmid, archer_target_data_v3.state, archer_target_data_v3.zip, archer_target_data_v3.ims_id, archer_target_data_v3.vmat2_decile, archer_target_data_v3.specialty, archer_target_data_v3.npi, archer_target_data_v3.veeva_account_id) ALL NODES;

CREATE PROJECTION sandbox.datamart_activity_hub_v3_b0 /*+basename(datamart_activity_hub_v3),createtype(A)*/ 
(
 activity_id,
 federation_id,
 contact,
 source_name,
 "datetime",
 trackback_id,
 previous_activity,
 level_name,
 activity_role_name,
 type_name,
 native_type,
 details,
 line_item_id,
 brand_name,
 activity,
 line_item_datetime,
 line_item_previous_line_item,
 line_item_trackback_id,
 line_item_details,
 line_item_type_name,
 line_item_native_type,
 basket_id,
 web_url
)
AS
 SELECT datamart_activity_hub_v3.activity_id,
        datamart_activity_hub_v3.federation_id,
        datamart_activity_hub_v3.contact,
        datamart_activity_hub_v3.source_name,
        datamart_activity_hub_v3."datetime",
        datamart_activity_hub_v3.trackback_id,
        datamart_activity_hub_v3.previous_activity,
        datamart_activity_hub_v3.level_name,
        datamart_activity_hub_v3.activity_role_name,
        datamart_activity_hub_v3.type_name,
        datamart_activity_hub_v3.native_type,
        datamart_activity_hub_v3.details,
        datamart_activity_hub_v3.line_item_id,
        datamart_activity_hub_v3.brand_name,
        datamart_activity_hub_v3.activity,
        datamart_activity_hub_v3.line_item_datetime,
        datamart_activity_hub_v3.line_item_previous_line_item,
        datamart_activity_hub_v3.line_item_trackback_id,
        datamart_activity_hub_v3.line_item_details,
        datamart_activity_hub_v3.line_item_type_name,
        datamart_activity_hub_v3.line_item_native_type,
        datamart_activity_hub_v3.basket_id,
        datamart_activity_hub_v3.web_url
 FROM sandbox.datamart_activity_hub_v3
 ORDER BY datamart_activity_hub_v3.activity_id
SEGMENTED BY hash(datamart_activity_hub_v3.activity_id) ALL NODES;

CREATE PROJECTION sandbox.copay_metrics_psd_nov_b0 /*+basename(copay_metrics_psd_nov),createtype(A)*/ 
(
 source_name,
 ndc_code,
 basket_name,
 month_date,
 mnth_dt,
 Covered_CRx_Units,
 Relay_EVoucher_And_CRx,
 FBDU_CRx_03_Units,
 Relay_DenialConversion_And_CRx,
 FDBU_Total_PA_Step_Edit_Units,
 FDBU_Total_Product_Not_Covered_Units,
 FDBU_Total_All_Other_Units,
 FAS_CRx_Spend_Coupon_OCC3,
 FAS_CRx_Spend_Coupon_OCC8,
 FAS_CRx_Spend_EVoucher,
 FAS_CRx_Spend_Denial_Conversion
)
AS
 SELECT copay_metrics_psd_nov.source_name,
        copay_metrics_psd_nov.ndc_code,
        copay_metrics_psd_nov.basket_name,
        copay_metrics_psd_nov.month_date,
        copay_metrics_psd_nov.mnth_dt,
        copay_metrics_psd_nov.Covered_CRx_Units,
        copay_metrics_psd_nov.Relay_EVoucher_And_CRx,
        copay_metrics_psd_nov.FBDU_CRx_03_Units,
        copay_metrics_psd_nov.Relay_DenialConversion_And_CRx,
        copay_metrics_psd_nov.FDBU_Total_PA_Step_Edit_Units,
        copay_metrics_psd_nov.FDBU_Total_Product_Not_Covered_Units,
        copay_metrics_psd_nov.FDBU_Total_All_Other_Units,
        copay_metrics_psd_nov.FAS_CRx_Spend_Coupon_OCC3,
        copay_metrics_psd_nov.FAS_CRx_Spend_Coupon_OCC8,
        copay_metrics_psd_nov.FAS_CRx_Spend_EVoucher,
        copay_metrics_psd_nov.FAS_CRx_Spend_Denial_Conversion
 FROM sandbox.copay_metrics_psd_nov
 ORDER BY copay_metrics_psd_nov.basket_name
SEGMENTED BY hash(copay_metrics_psd_nov.source_name, copay_metrics_psd_nov.ndc_code, copay_metrics_psd_nov.basket_name, copay_metrics_psd_nov.month_date, copay_metrics_psd_nov.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.base_metrics_psd_nov_b0 /*+basename(base_metrics_psd_nov),createtype(A)*/ 
(
 ndc_code,
 ndc_name,
 month_date,
 mnth_dt,
 EU_TRx,
 Covered_CRx_Units,
 Relay_EVoucher_And_CRx,
 FBDU_CRx_03_Units,
 Relay_DenialConversion_And_CRx,
 FDBU_Total_PA_Step_Edit_Units,
 FDBU_Total_Product_Not_Covered_Units,
 FDBU_Total_All_Other_Units,
 FAS_CRx_Spend_Coupon_OCC3,
 FAS_CRx_Spend_Coupon_OCC8,
 FAS_CRx_Spend_EVoucher,
 FAS_CRx_Spend_Denial_Conversion,
 Relay_EVoucher_Units,
 Relay_Spend_EVoucher_Paid,
 Relay_Denial_Conversion_Paid,
 Relay_Spend_Denial_Conversion_Paid
)
AS
 SELECT base_metrics_psd_nov.ndc_code,
        base_metrics_psd_nov.ndc_name,
        base_metrics_psd_nov.month_date,
        base_metrics_psd_nov.mnth_dt,
        base_metrics_psd_nov.EU_TRx,
        base_metrics_psd_nov.Covered_CRx_Units,
        base_metrics_psd_nov.Relay_EVoucher_And_CRx,
        base_metrics_psd_nov.FBDU_CRx_03_Units,
        base_metrics_psd_nov.Relay_DenialConversion_And_CRx,
        base_metrics_psd_nov.FDBU_Total_PA_Step_Edit_Units,
        base_metrics_psd_nov.FDBU_Total_Product_Not_Covered_Units,
        base_metrics_psd_nov.FDBU_Total_All_Other_Units,
        base_metrics_psd_nov.FAS_CRx_Spend_Coupon_OCC3,
        base_metrics_psd_nov.FAS_CRx_Spend_Coupon_OCC8,
        base_metrics_psd_nov.FAS_CRx_Spend_EVoucher,
        base_metrics_psd_nov.FAS_CRx_Spend_Denial_Conversion,
        base_metrics_psd_nov.Relay_EVoucher_Units,
        base_metrics_psd_nov.Relay_Spend_EVoucher_Paid,
        base_metrics_psd_nov.Relay_Denial_Conversion_Paid,
        base_metrics_psd_nov.Relay_Spend_Denial_Conversion_Paid
 FROM sandbox.base_metrics_psd_nov
 ORDER BY base_metrics_psd_nov.ndc_code,
          base_metrics_psd_nov.ndc_name,
          base_metrics_psd_nov.month_date,
          base_metrics_psd_nov.mnth_dt
SEGMENTED BY hash(base_metrics_psd_nov.ndc_code, base_metrics_psd_nov.ndc_name, base_metrics_psd_nov.month_date, base_metrics_psd_nov.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.view1_psd_nov_b0 /*+basename(view1_psd_nov),createtype(A)*/ 
(
 product_name,
 month_year,
 mnth_dt,
 Demand_units,
 Covered_Coupon_Units,
 Full_WAC_Buy_Down_Units
)
AS
 SELECT view1_psd_nov.product_name,
        view1_psd_nov.month_year,
        view1_psd_nov.mnth_dt,
        view1_psd_nov.Demand_units,
        view1_psd_nov.Covered_Coupon_Units,
        view1_psd_nov.Full_WAC_Buy_Down_Units
 FROM sandbox.view1_psd_nov
 ORDER BY view1_psd_nov.product_name,
          view1_psd_nov.month_year,
          view1_psd_nov.mnth_dt,
          view1_psd_nov.Demand_units,
          view1_psd_nov.Covered_Coupon_Units,
          view1_psd_nov.Full_WAC_Buy_Down_Units
SEGMENTED BY hash(view1_psd_nov.product_name, view1_psd_nov.mnth_dt, view1_psd_nov.Covered_Coupon_Units, view1_psd_nov.Demand_units, view1_psd_nov.Full_WAC_Buy_Down_Units, view1_psd_nov.month_year) ALL NODES;

CREATE PROJECTION sandbox.tv46k_segmentation_2020_b0 /*+basename(tv46k_segmentation_2020),createtype(A)*/ 
(
 ims_id,
 ABILIFY,
 "ABILIFY DISCMELT",
 "ABILIFY MAINTENA",
 "ABILIFY MYCITE",
 "ANTI PSYCHOTIC MARKET",
 ARIPIPRAZOLE,
 "ARIPIPRAZOLE ODT",
 "ARISTADA INITIO SYR PRF IM",
 "ARISTADA SYRINGE 1064MG",
 "ARISTADA SYRINGE 441MG",
 "ARISTADA SYRINGE 662MG",
 "ARISTADA SYRINGE 882MG",
 "ASENAPINE MALEATE",
 CAPLYTA,
 "CHLORPROMAZINE HCL",
 CLOZAPINE,
 "CLOZAPINE ODT",
 CLOZARIL,
 COMPAZINE,
 COMPRO,
 "FANAPT TAB/PACK",
 "FANAPT TITRATION PACK",
 FAZACLO,
 FLUPHENAZINE,
 "FLUPHENAZINE DECAN VIAL",
 GEODON,
 HALDOL,
 "HALDOL DECANOATE 100",
 "HALDOL DECANOATE 50",
 HALOPERIDOL,
 "HALOPERIDOL DECANOATE",
 "HALOPERIDOL LACTATE VIAL/SOLN/SYR",
 "INVEGA HAFYERA",
 "INVEGA SUSTENNA",
 "INVEGA TAB",
 "INVEGA TRINZA",
 LATUDA,
 LOXAPINE,
 "MOLINDONE HYDROCHLORIDE",
 OLANZAPINE,
 "OLANZAPINE ODT",
 PALIPERIDONE,
 PERPHENAZINE,
 "PERSERIS KIT SYRINGE",
 "PROCHLORPERAZINE EDISYLAT",
 "PROCHLORPERAZINE MALEATE",
 "QUETIAPINE FUMARATE",
 "QUETIAPINE FUMARATE ER",
 REXULTI,
 RISPERDAL,
 "RISPERDAL CONSTA",
 "RISPERDAL M-TAB",
 RISPERIDONE,
 "RISPERIDONE ODT",
 "SAPHRIS TAB",
 SECUADO,
 SEROQUEL,
 "SEROQUEL XR",
 "THIORIDAZINE HCL",
 THIOTHIXENE,
 VERSACLOZ,
 VRAYLAR,
 "ZIPRASIDONE HCL CAP",
 "ZIPRASIDONE MESY",
 ZYPREXA,
 "ZYPREXA RELPREVV",
 "ZYPREXA ZYDIS TAB"
)
AS
 SELECT tv46k_segmentation_2020.ims_id,
        tv46k_segmentation_2020.ABILIFY,
        tv46k_segmentation_2020."ABILIFY DISCMELT",
        tv46k_segmentation_2020."ABILIFY MAINTENA",
        tv46k_segmentation_2020."ABILIFY MYCITE",
        tv46k_segmentation_2020."ANTI PSYCHOTIC MARKET",
        tv46k_segmentation_2020.ARIPIPRAZOLE,
        tv46k_segmentation_2020."ARIPIPRAZOLE ODT",
        tv46k_segmentation_2020."ARISTADA INITIO SYR PRF IM",
        tv46k_segmentation_2020."ARISTADA SYRINGE 1064MG",
        tv46k_segmentation_2020."ARISTADA SYRINGE 441MG",
        tv46k_segmentation_2020."ARISTADA SYRINGE 662MG",
        tv46k_segmentation_2020."ARISTADA SYRINGE 882MG",
        tv46k_segmentation_2020."ASENAPINE MALEATE",
        tv46k_segmentation_2020.CAPLYTA,
        tv46k_segmentation_2020."CHLORPROMAZINE HCL",
        tv46k_segmentation_2020.CLOZAPINE,
        tv46k_segmentation_2020."CLOZAPINE ODT",
        tv46k_segmentation_2020.CLOZARIL,
        tv46k_segmentation_2020.COMPAZINE,
        tv46k_segmentation_2020.COMPRO,
        tv46k_segmentation_2020."FANAPT TAB/PACK",
        tv46k_segmentation_2020."FANAPT TITRATION PACK",
        tv46k_segmentation_2020.FAZACLO,
        tv46k_segmentation_2020.FLUPHENAZINE,
        tv46k_segmentation_2020."FLUPHENAZINE DECAN VIAL",
        tv46k_segmentation_2020.GEODON,
        tv46k_segmentation_2020.HALDOL,
        tv46k_segmentation_2020."HALDOL DECANOATE 100",
        tv46k_segmentation_2020."HALDOL DECANOATE 50",
        tv46k_segmentation_2020.HALOPERIDOL,
        tv46k_segmentation_2020."HALOPERIDOL DECANOATE",
        tv46k_segmentation_2020."HALOPERIDOL LACTATE VIAL/SOLN/SYR",
        tv46k_segmentation_2020."INVEGA HAFYERA",
        tv46k_segmentation_2020."INVEGA SUSTENNA",
        tv46k_segmentation_2020."INVEGA TAB",
        tv46k_segmentation_2020."INVEGA TRINZA",
        tv46k_segmentation_2020.LATUDA,
        tv46k_segmentation_2020.LOXAPINE,
        tv46k_segmentation_2020."MOLINDONE HYDROCHLORIDE",
        tv46k_segmentation_2020.OLANZAPINE,
        tv46k_segmentation_2020."OLANZAPINE ODT",
        tv46k_segmentation_2020.PALIPERIDONE,
        tv46k_segmentation_2020.PERPHENAZINE,
        tv46k_segmentation_2020."PERSERIS KIT SYRINGE",
        tv46k_segmentation_2020."PROCHLORPERAZINE EDISYLAT",
        tv46k_segmentation_2020."PROCHLORPERAZINE MALEATE",
        tv46k_segmentation_2020."QUETIAPINE FUMARATE",
        tv46k_segmentation_2020."QUETIAPINE FUMARATE ER",
        tv46k_segmentation_2020.REXULTI,
        tv46k_segmentation_2020.RISPERDAL,
        tv46k_segmentation_2020."RISPERDAL CONSTA",
        tv46k_segmentation_2020."RISPERDAL M-TAB",
        tv46k_segmentation_2020.RISPERIDONE,
        tv46k_segmentation_2020."RISPERIDONE ODT",
        tv46k_segmentation_2020."SAPHRIS TAB",
        tv46k_segmentation_2020.SECUADO,
        tv46k_segmentation_2020.SEROQUEL,
        tv46k_segmentation_2020."SEROQUEL XR",
        tv46k_segmentation_2020."THIORIDAZINE HCL",
        tv46k_segmentation_2020.THIOTHIXENE,
        tv46k_segmentation_2020.VERSACLOZ,
        tv46k_segmentation_2020.VRAYLAR,
        tv46k_segmentation_2020."ZIPRASIDONE HCL CAP",
        tv46k_segmentation_2020."ZIPRASIDONE MESY",
        tv46k_segmentation_2020.ZYPREXA,
        tv46k_segmentation_2020."ZYPREXA RELPREVV",
        tv46k_segmentation_2020."ZYPREXA ZYDIS TAB"
 FROM sandbox.tv46k_segmentation_2020
 ORDER BY tv46k_segmentation_2020.ims_id
SEGMENTED BY hash(tv46k_segmentation_2020.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tv46k_segmentation_2021_b0 /*+basename(tv46k_segmentation_2021),createtype(A)*/ 
(
 ims_id,
 ABILIFY,
 "ABILIFY DISCMELT",
 "ABILIFY MAINTENA",
 "ABILIFY MYCITE",
 "ANTI PSYCHOTIC MARKET",
 ARIPIPRAZOLE,
 "ARIPIPRAZOLE ODT",
 "ARISTADA INITIO SYR PRF IM",
 "ARISTADA SYRINGE 1064MG",
 "ARISTADA SYRINGE 441MG",
 "ARISTADA SYRINGE 662MG",
 "ARISTADA SYRINGE 882MG",
 "ASENAPINE MALEATE",
 CAPLYTA,
 "CHLORPROMAZINE HCL",
 CLOZAPINE,
 "CLOZAPINE ODT",
 CLOZARIL,
 COMPAZINE,
 COMPRO,
 "FANAPT TAB/PACK",
 "FANAPT TITRATION PACK",
 FAZACLO,
 FLUPHENAZINE,
 "FLUPHENAZINE DECAN VIAL",
 GEODON,
 HALDOL,
 "HALDOL DECANOATE 100",
 "HALDOL DECANOATE 50",
 HALOPERIDOL,
 "HALOPERIDOL DECANOATE",
 "HALOPERIDOL LACTATE VIAL/SOLN/SYR",
 "INVEGA HAFYERA",
 "INVEGA SUSTENNA",
 "INVEGA TAB",
 "INVEGA TRINZA",
 LATUDA,
 LOXAPINE,
 "MOLINDONE HYDROCHLORIDE",
 OLANZAPINE,
 "OLANZAPINE ODT",
 PALIPERIDONE,
 PERPHENAZINE,
 "PERSERIS KIT SYRINGE",
 "PROCHLORPERAZINE EDISYLAT",
 "PROCHLORPERAZINE MALEATE",
 "QUETIAPINE FUMARATE",
 "QUETIAPINE FUMARATE ER",
 REXULTI,
 RISPERDAL,
 "RISPERDAL CONSTA",
 "RISPERDAL M-TAB",
 RISPERIDONE,
 "RISPERIDONE ODT",
 "SAPHRIS TAB",
 SECUADO,
 SEROQUEL,
 "SEROQUEL XR",
 "THIORIDAZINE HCL",
 THIOTHIXENE,
 VERSACLOZ,
 VRAYLAR,
 "ZIPRASIDONE HCL CAP",
 "ZIPRASIDONE MESY",
 ZYPREXA,
 "ZYPREXA RELPREVV",
 "ZYPREXA ZYDIS TAB"
)
AS
 SELECT tv46k_segmentation_2021.ims_id,
        tv46k_segmentation_2021.ABILIFY,
        tv46k_segmentation_2021."ABILIFY DISCMELT",
        tv46k_segmentation_2021."ABILIFY MAINTENA",
        tv46k_segmentation_2021."ABILIFY MYCITE",
        tv46k_segmentation_2021."ANTI PSYCHOTIC MARKET",
        tv46k_segmentation_2021.ARIPIPRAZOLE,
        tv46k_segmentation_2021."ARIPIPRAZOLE ODT",
        tv46k_segmentation_2021."ARISTADA INITIO SYR PRF IM",
        tv46k_segmentation_2021."ARISTADA SYRINGE 1064MG",
        tv46k_segmentation_2021."ARISTADA SYRINGE 441MG",
        tv46k_segmentation_2021."ARISTADA SYRINGE 662MG",
        tv46k_segmentation_2021."ARISTADA SYRINGE 882MG",
        tv46k_segmentation_2021."ASENAPINE MALEATE",
        tv46k_segmentation_2021.CAPLYTA,
        tv46k_segmentation_2021."CHLORPROMAZINE HCL",
        tv46k_segmentation_2021.CLOZAPINE,
        tv46k_segmentation_2021."CLOZAPINE ODT",
        tv46k_segmentation_2021.CLOZARIL,
        tv46k_segmentation_2021.COMPAZINE,
        tv46k_segmentation_2021.COMPRO,
        tv46k_segmentation_2021."FANAPT TAB/PACK",
        tv46k_segmentation_2021."FANAPT TITRATION PACK",
        tv46k_segmentation_2021.FAZACLO,
        tv46k_segmentation_2021.FLUPHENAZINE,
        tv46k_segmentation_2021."FLUPHENAZINE DECAN VIAL",
        tv46k_segmentation_2021.GEODON,
        tv46k_segmentation_2021.HALDOL,
        tv46k_segmentation_2021."HALDOL DECANOATE 100",
        tv46k_segmentation_2021."HALDOL DECANOATE 50",
        tv46k_segmentation_2021.HALOPERIDOL,
        tv46k_segmentation_2021."HALOPERIDOL DECANOATE",
        tv46k_segmentation_2021."HALOPERIDOL LACTATE VIAL/SOLN/SYR",
        tv46k_segmentation_2021."INVEGA HAFYERA",
        tv46k_segmentation_2021."INVEGA SUSTENNA",
        tv46k_segmentation_2021."INVEGA TAB",
        tv46k_segmentation_2021."INVEGA TRINZA",
        tv46k_segmentation_2021.LATUDA,
        tv46k_segmentation_2021.LOXAPINE,
        tv46k_segmentation_2021."MOLINDONE HYDROCHLORIDE",
        tv46k_segmentation_2021.OLANZAPINE,
        tv46k_segmentation_2021."OLANZAPINE ODT",
        tv46k_segmentation_2021.PALIPERIDONE,
        tv46k_segmentation_2021.PERPHENAZINE,
        tv46k_segmentation_2021."PERSERIS KIT SYRINGE",
        tv46k_segmentation_2021."PROCHLORPERAZINE EDISYLAT",
        tv46k_segmentation_2021."PROCHLORPERAZINE MALEATE",
        tv46k_segmentation_2021."QUETIAPINE FUMARATE",
        tv46k_segmentation_2021."QUETIAPINE FUMARATE ER",
        tv46k_segmentation_2021.REXULTI,
        tv46k_segmentation_2021.RISPERDAL,
        tv46k_segmentation_2021."RISPERDAL CONSTA",
        tv46k_segmentation_2021."RISPERDAL M-TAB",
        tv46k_segmentation_2021.RISPERIDONE,
        tv46k_segmentation_2021."RISPERIDONE ODT",
        tv46k_segmentation_2021."SAPHRIS TAB",
        tv46k_segmentation_2021.SECUADO,
        tv46k_segmentation_2021.SEROQUEL,
        tv46k_segmentation_2021."SEROQUEL XR",
        tv46k_segmentation_2021."THIORIDAZINE HCL",
        tv46k_segmentation_2021.THIOTHIXENE,
        tv46k_segmentation_2021.VERSACLOZ,
        tv46k_segmentation_2021.VRAYLAR,
        tv46k_segmentation_2021."ZIPRASIDONE HCL CAP",
        tv46k_segmentation_2021."ZIPRASIDONE MESY",
        tv46k_segmentation_2021.ZYPREXA,
        tv46k_segmentation_2021."ZYPREXA RELPREVV",
        tv46k_segmentation_2021."ZYPREXA ZYDIS TAB"
 FROM sandbox.tv46k_segmentation_2021
 ORDER BY tv46k_segmentation_2021.ims_id
SEGMENTED BY hash(tv46k_segmentation_2021.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tv46_MOP_2020_b0 /*+basename(tv46_MOP_2020),createtype(A)*/ 
(
 ims_id,
 "NULL",
 "COMMERCIAL 3RD PTY",
 "MANAGED MEDICAID",
 MEDICAID,
 "MEDICARE PT D",
 "VOUCHER/COPAY CARDS"
)
AS
 SELECT tv46_MOP_2020.ims_id,
        tv46_MOP_2020."NULL",
        tv46_MOP_2020."COMMERCIAL 3RD PTY",
        tv46_MOP_2020."MANAGED MEDICAID",
        tv46_MOP_2020.MEDICAID,
        tv46_MOP_2020."MEDICARE PT D",
        tv46_MOP_2020."VOUCHER/COPAY CARDS"
 FROM sandbox.tv46_MOP_2020
 ORDER BY tv46_MOP_2020.ims_id
SEGMENTED BY hash(tv46_MOP_2020.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tv46_MOP_2021_b0 /*+basename(tv46_MOP_2021),createtype(A)*/ 
(
 ims_id,
 "NULL",
 "COMMERCIAL 3RD PTY",
 "MANAGED MEDICAID",
 MEDICAID,
 "MEDICARE PT D",
 "VOUCHER/COPAY CARDS"
)
AS
 SELECT tv46_MOP_2021.ims_id,
        tv46_MOP_2021."NULL",
        tv46_MOP_2021."COMMERCIAL 3RD PTY",
        tv46_MOP_2021."MANAGED MEDICAID",
        tv46_MOP_2021.MEDICAID,
        tv46_MOP_2021."MEDICARE PT D",
        tv46_MOP_2021."VOUCHER/COPAY CARDS"
 FROM sandbox.tv46_MOP_2021
 ORDER BY tv46_MOP_2021.ims_id
SEGMENTED BY hash(tv46_MOP_2021.ims_id) ALL NODES;

CREATE PROJECTION sandbox.humira_patient_companion_b0 /*+basename(humira_patient_companion),createtype(L)*/ 
(
 pat_id,
 pat_gender_cd,
 pat_age,
 pat_zip_3,
 cum_meds_brdn,
 trx_cnt,
 nrx_cnt,
 mail_trx_cnt,
 mail_nrx_cnt,
 ltc_trx_cnt,
 ltc_nrx_cnt,
 retail_trx_cnt,
 retail_nrx_cnt,
 cash_mop_trx,
 medicare_d_mop_trx,
 medicaid_mgd_mop_trx,
 medicaid_ffs_mop_trx,
 comm_mop_trx,
 acute_drug_trx_cnt,
 chronic_drug_trx_cnt,
 lifestyle_drug_trx_cnt,
 uniq_prods_dspnsd_cnt,
 uniq_usc5s_dspnsd_cnt,
 mpr_avg,
 rfll_rate,
 most_freq_rx_prov_pcp,
 most_freq_rx_prov_pcp_spcl_nm,
 most_freq_rx_prov_othr,
 most_freq_rx_prov_othr_spcl_nm,
 most_rcnt_rx_prov_pcp,
 most_rcnt_rx_prov_pcp_spcl_nm,
 most_rcnt_rx_prov_othr,
 most_rcnt_rx_prov_othr_spcl_nm,
 uniq_procd_cnt,
 tot_adm_procd_cnt,
 most_freq_rx_payer_nm_ccy,
 most_freq_rx_pln_nm_ccy,
 most_freq_rx_payer_pln_id_ccy,
 most_rcnt_rx_payer_nm_ccy,
 most_rcnt_rx_pln_nm_ccy,
 most_rcnt_rx_payer_pln_id_ccy,
 most_rcnt_rx_payer_nm_pcy,
 most_rcnt_rx_pln_nm_pcy,
 most_rcnt_rx_payer_pln_id_pcy,
 most_freq_rx_payer_nm_pcy,
 most_freq_rx_pln_nm_pcy,
 most_freq_rx_payer_pln_id_pcy,
 most_rcnt_rx_payer_nm_p2cy,
 most_rcnt_rx_pln_nm_p2cy,
 most_rcnt_rx_payer_pln_id_p2cy,
 most_freq_rx_payer_nm_p2cy,
 most_freq_rx_pln_nm_p2cy,
 most_freq_rx_payer_pln_id_p2cy,
 nbr_rx_payers,
 nbr_rx_plns,
 spcl_prod_trx_cnt,
 retail_pharmy_cnt,
 retail_loyalty_rate,
 rx_acne_ind,
 rx_acs_ind,
 rx_adhd_ind,
 rx_afib_ind,
 rx_ait_ind,
 rx_alz_ind,
 rx_angi_ind,
 rx_anor_ind,
 rx_ansp_ind,
 rx_anx_ind,
 rx_asth_ind,
 rx_bcan_ind,
 rx_bph_ind,
 rx_chol_ind,
 rx_ckde_ind,
 rx_cntr_ind,
 rx_cons_ind,
 rx_copd_ind,
 rx_croh_ind,
 rx_de_ind,
 rx_depr_ind,
 rx_diab_ind,
 rx_ed_ind,
 rx_epil_ind,
 rx_fibr_ind,
 rx_flu_ind,
 rx_gast_ind,
 rx_ghd_ind,
 rx_gout_ind,
 rx_hepb_ind,
 rx_hepc_ind,
 rx_herp_ind,
 rx_hf_ind,
 rx_hiv_ind,
 rx_hrt_ind,
 rx_hyp_ind,
 rx_hypo_ind,
 rx_ibs_ind,
 rx_inco_ind,
 rx_inft_ind,
 rx_inso_ind,
 rx_lrti_ind,
 rx_lup_ind,
 rx_md_ind,
 rx_mgrn_ind,
 rx_mi_ind,
 rx_ms_ind,
 rx_naus_ind,
 rx_nd_ind,
 rx_np_ind,
 rx_oart_ind,
 rx_ob_ind,
 rx_obes_ind,
 rx_om_ind,
 rx_ost_ind,
 rx_pai_ind,
 rx_park_ind,
 rx_pcan_ind,
 rx_psor_ind,
 rx_ra_ind,
 rx_rls_ind,
 rx_sc_ind,
 rx_sssi_ind,
 rx_strk_ind,
 rx_test_ind,
 rx_uc_ind,
 rx_urti_ind,
 rx_uti_ind,
 rx_vacc_ind,
 rx_vdp_ind,
 rx_adcn_ind,
 rx_pain_ind,
 dx_acne_ind,
 dx_acs_ind,
 dx_adhd_ind,
 dx_afib_ind,
 dx_ait_ind,
 dx_alz_ind,
 dx_angi_ind,
 dx_anor_ind,
 dx_ansp_ind,
 dx_anx_ind,
 dx_asth_ind,
 dx_bcan_ind,
 dx_bph_ind,
 dx_chol_ind,
 dx_ckde_ind,
 dx_cntr_ind,
 dx_cons_ind,
 dx_copd_ind,
 dx_croh_ind,
 dx_de_ind,
 dx_depr_ind,
 dx_diab_ind,
 dx_ed_ind,
 dx_epil_ind,
 dx_fibr_ind,
 dx_flu_ind,
 dx_gast_ind,
 dx_ghd_ind,
 dx_gout_ind,
 dx_hepb_ind,
 dx_hepc_ind,
 dx_herp_ind,
 dx_hf_ind,
 dx_hiv_ind,
 dx_hrt_ind,
 dx_hyp_ind,
 dx_hypo_ind,
 dx_ibs_ind,
 dx_inco_ind,
 dx_inft_ind,
 dx_inso_ind,
 dx_lrti_ind,
 dx_lup_ind,
 dx_md_ind,
 dx_mgrn_ind,
 dx_mi_ind,
 dx_ms_ind,
 dx_naus_ind,
 dx_nd_ind,
 dx_np_ind,
 dx_oart_ind,
 dx_ob_ind,
 dx_obes_ind,
 dx_om_ind,
 dx_ost_ind,
 dx_pai_ind,
 dx_park_ind,
 dx_pcan_ind,
 dx_psor_ind,
 dx_ra_ind,
 dx_rls_ind,
 dx_sc_ind,
 dx_sssi_ind,
 dx_strk_ind,
 dx_test_ind,
 dx_uc_ind,
 dx_urti_ind,
 dx_uti_ind,
 dx_vacc_ind,
 dx_vdp_ind,
 dx_adcn_ind,
 rx_dx_acne_ind,
 rx_dx_acs_ind,
 rx_dx_adhd_ind,
 rx_dx_afib_ind,
 rx_dx_ait_ind,
 rx_dx_alz_ind,
 rx_dx_angi_ind,
 rx_dx_anor_ind,
 rx_dx_ansp_ind,
 rx_dx_anx_ind,
 rx_dx_asth_ind,
 rx_dx_bcan_ind,
 rx_dx_bph_ind,
 rx_dx_chol_ind,
 rx_dx_ckde_ind,
 rx_dx_cntr_ind,
 rx_dx_cons_ind,
 rx_dx_copd_ind,
 rx_dx_croh_ind,
 rx_dx_de_ind,
 rx_dx_depr_ind,
 rx_dx_diab_ind,
 rx_dx_ed_ind,
 rx_dx_epil_ind,
 rx_dx_fibr_ind,
 rx_dx_flu_ind,
 rx_dx_gast_ind,
 rx_dx_ghd_ind,
 rx_dx_gout_ind,
 rx_dx_hepb_ind,
 rx_dx_hepc_ind,
 rx_dx_herp_ind,
 rx_dx_hf_ind,
 rx_dx_hiv_ind,
 rx_dx_hrt_ind,
 rx_dx_hyp_ind,
 rx_dx_hypo_ind,
 rx_dx_ibs_ind,
 rx_dx_inco_ind,
 rx_dx_inft_ind,
 rx_dx_inso_ind,
 rx_dx_lrti_ind,
 rx_dx_lup_ind,
 rx_dx_md_ind,
 rx_dx_mgrn_ind,
 rx_dx_mi_ind,
 rx_dx_ms_ind,
 rx_dx_naus_ind,
 rx_dx_nd_ind,
 rx_dx_np_ind,
 rx_dx_oart_ind,
 rx_dx_ob_ind,
 rx_dx_obes_ind,
 rx_dx_om_ind,
 rx_dx_ost_ind,
 rx_dx_pai_ind,
 rx_dx_park_ind,
 rx_dx_pcan_ind,
 rx_dx_psor_ind,
 rx_dx_ra_ind,
 rx_dx_rls_ind,
 rx_dx_sc_ind,
 rx_dx_sssi_ind,
 rx_dx_strk_ind,
 rx_dx_test_ind,
 rx_dx_uc_ind,
 rx_dx_urti_ind,
 rx_dx_uti_ind,
 rx_dx_vacc_ind,
 rx_dx_vdp_ind,
 rx_dx_adcn_ind,
 trx_mth,
 tot_opc_ccy,
 tot_opc_pcy,
 tot_opc_p2cy,
 tot_dx_vst_cnt,
 jcode_cnt,
 nbr_dx_payers,
 nbr_dx_plns,
 most_freq_dx_payer_nm_ccy,
 most_freq_dx_pln_nm_ccy,
 most_freq_dx_payer_pln_id_ccy,
 most_rcnt_dx_payer_nm_ccy,
 most_rcnt_dx_pln_nm_ccy,
 most_rcnt_dx_payer_pln_id_ccy,
 most_rcnt_dx_payer_nm_pcy,
 most_rcnt_dx_pln_nm_pcy,
 most_rcnt_dx_payer_pln_id_pcy,
 most_freq_dx_payer_nm_pcy,
 most_freq_dx_pln_nm_pcy,
 most_freq_dx_payer_pln_id_pcy,
 most_rcnt_dx_payer_nm_p2cy,
 most_rcnt_dx_pln_nm_p2cy,
 most_rcnt_dx_payer_pln_id_p2cy,
 most_freq_dx_payer_nm_p2cy,
 most_freq_dx_pln_nm_p2cy,
 most_freq_dx_payer_pln_id_p2cy,
 uniq_rx_providers,
 brand_trx_cnt,
 brand_trx_share,
 brand_nrx_cnt,
 brand_nrx_share,
 generic_trx_cnt,
 generic_trx_share,
 generic_nrx_cnt,
 generic_nrx_share,
 pr_ind,
 professional_claim_cnt,
 institutional_claim_cnt,
 uniq_rx_spcl_providers,
 low_incm_subsidy_pcy_ind,
 dual_elig_pcy_ind,
 med_d_pcy_ind,
 med_d_covrg_gap_dt_reach_pcy,
 catrphc_covrg_dt_reach_pcy,
 high_deductbl_pln_pcy_ind,
 copay_card_pcy_ind,
 low_incm_subsidy_p2cy_ind,
 dual_elig_p2cy_ind,
 med_d_p2cy_ind,
 med_d_covrg_gap_dt_reach_p2cy,
 catrphc_covrg_dt_reach_p2cy,
 high_deductbl_pln_p2cy_ind,
 copay_card_p2cy_ind,
 low_incm_subsidy_ccy_ind,
 dual_elig_ccy_ind,
 med_d_ccy_ind,
 med_d_covrg_gap_dt_reach_ccy,
 catrphc_covrg_dt_reach_ccy,
 high_deductbl_pln_ccy_ind,
 copay_card_ccy_ind,
 well_vst_cnt,
 most_freq_dx_prov_pcp,
 most_freq_dx_prov_pcp_spcl_nm,
 most_freq_dx_prov_othr,
 most_freq_dx_prov_othr_spcl_nm,
 most_rcnt_dx_prov_pcp,
 most_rcnt_dx_prov_pcp_spcl_nm,
 most_rcnt_dx_prov_othr,
 most_rcnt_dx_prov_othr_spcl_nm,
 uniq_dx_providers,
 uniq_dx_spcl_providers,
 rx_nbr_of_conds,
 dx_nbr_of_conds,
 rx_dx_nbr_of_conds,
 trx_lnched_prods,
 cnt_lnched_prods,
 avail_lnched_prods
)
AS
 SELECT humira_patient_companion.pat_id,
        humira_patient_companion.pat_gender_cd,
        humira_patient_companion.pat_age,
        humira_patient_companion.pat_zip_3,
        humira_patient_companion.cum_meds_brdn,
        humira_patient_companion.trx_cnt,
        humira_patient_companion.nrx_cnt,
        humira_patient_companion.mail_trx_cnt,
        humira_patient_companion.mail_nrx_cnt,
        humira_patient_companion.ltc_trx_cnt,
        humira_patient_companion.ltc_nrx_cnt,
        humira_patient_companion.retail_trx_cnt,
        humira_patient_companion.retail_nrx_cnt,
        humira_patient_companion.cash_mop_trx,
        humira_patient_companion.medicare_d_mop_trx,
        humira_patient_companion.medicaid_mgd_mop_trx,
        humira_patient_companion.medicaid_ffs_mop_trx,
        humira_patient_companion.comm_mop_trx,
        humira_patient_companion.acute_drug_trx_cnt,
        humira_patient_companion.chronic_drug_trx_cnt,
        humira_patient_companion.lifestyle_drug_trx_cnt,
        humira_patient_companion.uniq_prods_dspnsd_cnt,
        humira_patient_companion.uniq_usc5s_dspnsd_cnt,
        humira_patient_companion.mpr_avg,
        humira_patient_companion.rfll_rate,
        humira_patient_companion.most_freq_rx_prov_pcp,
        humira_patient_companion.most_freq_rx_prov_pcp_spcl_nm,
        humira_patient_companion.most_freq_rx_prov_othr,
        humira_patient_companion.most_freq_rx_prov_othr_spcl_nm,
        humira_patient_companion.most_rcnt_rx_prov_pcp,
        humira_patient_companion.most_rcnt_rx_prov_pcp_spcl_nm,
        humira_patient_companion.most_rcnt_rx_prov_othr,
        humira_patient_companion.most_rcnt_rx_prov_othr_spcl_nm,
        humira_patient_companion.uniq_procd_cnt,
        humira_patient_companion.tot_adm_procd_cnt,
        humira_patient_companion.most_freq_rx_payer_nm_ccy,
        humira_patient_companion.most_freq_rx_pln_nm_ccy,
        humira_patient_companion.most_freq_rx_payer_pln_id_ccy,
        humira_patient_companion.most_rcnt_rx_payer_nm_ccy,
        humira_patient_companion.most_rcnt_rx_pln_nm_ccy,
        humira_patient_companion.most_rcnt_rx_payer_pln_id_ccy,
        humira_patient_companion.most_rcnt_rx_payer_nm_pcy,
        humira_patient_companion.most_rcnt_rx_pln_nm_pcy,
        humira_patient_companion.most_rcnt_rx_payer_pln_id_pcy,
        humira_patient_companion.most_freq_rx_payer_nm_pcy,
        humira_patient_companion.most_freq_rx_pln_nm_pcy,
        humira_patient_companion.most_freq_rx_payer_pln_id_pcy,
        humira_patient_companion.most_rcnt_rx_payer_nm_p2cy,
        humira_patient_companion.most_rcnt_rx_pln_nm_p2cy,
        humira_patient_companion.most_rcnt_rx_payer_pln_id_p2cy,
        humira_patient_companion.most_freq_rx_payer_nm_p2cy,
        humira_patient_companion.most_freq_rx_pln_nm_p2cy,
        humira_patient_companion.most_freq_rx_payer_pln_id_p2cy,
        humira_patient_companion.nbr_rx_payers,
        humira_patient_companion.nbr_rx_plns,
        humira_patient_companion.spcl_prod_trx_cnt,
        humira_patient_companion.retail_pharmy_cnt,
        humira_patient_companion.retail_loyalty_rate,
        humira_patient_companion.rx_acne_ind,
        humira_patient_companion.rx_acs_ind,
        humira_patient_companion.rx_adhd_ind,
        humira_patient_companion.rx_afib_ind,
        humira_patient_companion.rx_ait_ind,
        humira_patient_companion.rx_alz_ind,
        humira_patient_companion.rx_angi_ind,
        humira_patient_companion.rx_anor_ind,
        humira_patient_companion.rx_ansp_ind,
        humira_patient_companion.rx_anx_ind,
        humira_patient_companion.rx_asth_ind,
        humira_patient_companion.rx_bcan_ind,
        humira_patient_companion.rx_bph_ind,
        humira_patient_companion.rx_chol_ind,
        humira_patient_companion.rx_ckde_ind,
        humira_patient_companion.rx_cntr_ind,
        humira_patient_companion.rx_cons_ind,
        humira_patient_companion.rx_copd_ind,
        humira_patient_companion.rx_croh_ind,
        humira_patient_companion.rx_de_ind,
        humira_patient_companion.rx_depr_ind,
        humira_patient_companion.rx_diab_ind,
        humira_patient_companion.rx_ed_ind,
        humira_patient_companion.rx_epil_ind,
        humira_patient_companion.rx_fibr_ind,
        humira_patient_companion.rx_flu_ind,
        humira_patient_companion.rx_gast_ind,
        humira_patient_companion.rx_ghd_ind,
        humira_patient_companion.rx_gout_ind,
        humira_patient_companion.rx_hepb_ind,
        humira_patient_companion.rx_hepc_ind,
        humira_patient_companion.rx_herp_ind,
        humira_patient_companion.rx_hf_ind,
        humira_patient_companion.rx_hiv_ind,
        humira_patient_companion.rx_hrt_ind,
        humira_patient_companion.rx_hyp_ind,
        humira_patient_companion.rx_hypo_ind,
        humira_patient_companion.rx_ibs_ind,
        humira_patient_companion.rx_inco_ind,
        humira_patient_companion.rx_inft_ind,
        humira_patient_companion.rx_inso_ind,
        humira_patient_companion.rx_lrti_ind,
        humira_patient_companion.rx_lup_ind,
        humira_patient_companion.rx_md_ind,
        humira_patient_companion.rx_mgrn_ind,
        humira_patient_companion.rx_mi_ind,
        humira_patient_companion.rx_ms_ind,
        humira_patient_companion.rx_naus_ind,
        humira_patient_companion.rx_nd_ind,
        humira_patient_companion.rx_np_ind,
        humira_patient_companion.rx_oart_ind,
        humira_patient_companion.rx_ob_ind,
        humira_patient_companion.rx_obes_ind,
        humira_patient_companion.rx_om_ind,
        humira_patient_companion.rx_ost_ind,
        humira_patient_companion.rx_pai_ind,
        humira_patient_companion.rx_park_ind,
        humira_patient_companion.rx_pcan_ind,
        humira_patient_companion.rx_psor_ind,
        humira_patient_companion.rx_ra_ind,
        humira_patient_companion.rx_rls_ind,
        humira_patient_companion.rx_sc_ind,
        humira_patient_companion.rx_sssi_ind,
        humira_patient_companion.rx_strk_ind,
        humira_patient_companion.rx_test_ind,
        humira_patient_companion.rx_uc_ind,
        humira_patient_companion.rx_urti_ind,
        humira_patient_companion.rx_uti_ind,
        humira_patient_companion.rx_vacc_ind,
        humira_patient_companion.rx_vdp_ind,
        humira_patient_companion.rx_adcn_ind,
        humira_patient_companion.rx_pain_ind,
        humira_patient_companion.dx_acne_ind,
        humira_patient_companion.dx_acs_ind,
        humira_patient_companion.dx_adhd_ind,
        humira_patient_companion.dx_afib_ind,
        humira_patient_companion.dx_ait_ind,
        humira_patient_companion.dx_alz_ind,
        humira_patient_companion.dx_angi_ind,
        humira_patient_companion.dx_anor_ind,
        humira_patient_companion.dx_ansp_ind,
        humira_patient_companion.dx_anx_ind,
        humira_patient_companion.dx_asth_ind,
        humira_patient_companion.dx_bcan_ind,
        humira_patient_companion.dx_bph_ind,
        humira_patient_companion.dx_chol_ind,
        humira_patient_companion.dx_ckde_ind,
        humira_patient_companion.dx_cntr_ind,
        humira_patient_companion.dx_cons_ind,
        humira_patient_companion.dx_copd_ind,
        humira_patient_companion.dx_croh_ind,
        humira_patient_companion.dx_de_ind,
        humira_patient_companion.dx_depr_ind,
        humira_patient_companion.dx_diab_ind,
        humira_patient_companion.dx_ed_ind,
        humira_patient_companion.dx_epil_ind,
        humira_patient_companion.dx_fibr_ind,
        humira_patient_companion.dx_flu_ind,
        humira_patient_companion.dx_gast_ind,
        humira_patient_companion.dx_ghd_ind,
        humira_patient_companion.dx_gout_ind,
        humira_patient_companion.dx_hepb_ind,
        humira_patient_companion.dx_hepc_ind,
        humira_patient_companion.dx_herp_ind,
        humira_patient_companion.dx_hf_ind,
        humira_patient_companion.dx_hiv_ind,
        humira_patient_companion.dx_hrt_ind,
        humira_patient_companion.dx_hyp_ind,
        humira_patient_companion.dx_hypo_ind,
        humira_patient_companion.dx_ibs_ind,
        humira_patient_companion.dx_inco_ind,
        humira_patient_companion.dx_inft_ind,
        humira_patient_companion.dx_inso_ind,
        humira_patient_companion.dx_lrti_ind,
        humira_patient_companion.dx_lup_ind,
        humira_patient_companion.dx_md_ind,
        humira_patient_companion.dx_mgrn_ind,
        humira_patient_companion.dx_mi_ind,
        humira_patient_companion.dx_ms_ind,
        humira_patient_companion.dx_naus_ind,
        humira_patient_companion.dx_nd_ind,
        humira_patient_companion.dx_np_ind,
        humira_patient_companion.dx_oart_ind,
        humira_patient_companion.dx_ob_ind,
        humira_patient_companion.dx_obes_ind,
        humira_patient_companion.dx_om_ind,
        humira_patient_companion.dx_ost_ind,
        humira_patient_companion.dx_pai_ind,
        humira_patient_companion.dx_park_ind,
        humira_patient_companion.dx_pcan_ind,
        humira_patient_companion.dx_psor_ind,
        humira_patient_companion.dx_ra_ind,
        humira_patient_companion.dx_rls_ind,
        humira_patient_companion.dx_sc_ind,
        humira_patient_companion.dx_sssi_ind,
        humira_patient_companion.dx_strk_ind,
        humira_patient_companion.dx_test_ind,
        humira_patient_companion.dx_uc_ind,
        humira_patient_companion.dx_urti_ind,
        humira_patient_companion.dx_uti_ind,
        humira_patient_companion.dx_vacc_ind,
        humira_patient_companion.dx_vdp_ind,
        humira_patient_companion.dx_adcn_ind,
        humira_patient_companion.rx_dx_acne_ind,
        humira_patient_companion.rx_dx_acs_ind,
        humira_patient_companion.rx_dx_adhd_ind,
        humira_patient_companion.rx_dx_afib_ind,
        humira_patient_companion.rx_dx_ait_ind,
        humira_patient_companion.rx_dx_alz_ind,
        humira_patient_companion.rx_dx_angi_ind,
        humira_patient_companion.rx_dx_anor_ind,
        humira_patient_companion.rx_dx_ansp_ind,
        humira_patient_companion.rx_dx_anx_ind,
        humira_patient_companion.rx_dx_asth_ind,
        humira_patient_companion.rx_dx_bcan_ind,
        humira_patient_companion.rx_dx_bph_ind,
        humira_patient_companion.rx_dx_chol_ind,
        humira_patient_companion.rx_dx_ckde_ind,
        humira_patient_companion.rx_dx_cntr_ind,
        humira_patient_companion.rx_dx_cons_ind,
        humira_patient_companion.rx_dx_copd_ind,
        humira_patient_companion.rx_dx_croh_ind,
        humira_patient_companion.rx_dx_de_ind,
        humira_patient_companion.rx_dx_depr_ind,
        humira_patient_companion.rx_dx_diab_ind,
        humira_patient_companion.rx_dx_ed_ind,
        humira_patient_companion.rx_dx_epil_ind,
        humira_patient_companion.rx_dx_fibr_ind,
        humira_patient_companion.rx_dx_flu_ind,
        humira_patient_companion.rx_dx_gast_ind,
        humira_patient_companion.rx_dx_ghd_ind,
        humira_patient_companion.rx_dx_gout_ind,
        humira_patient_companion.rx_dx_hepb_ind,
        humira_patient_companion.rx_dx_hepc_ind,
        humira_patient_companion.rx_dx_herp_ind,
        humira_patient_companion.rx_dx_hf_ind,
        humira_patient_companion.rx_dx_hiv_ind,
        humira_patient_companion.rx_dx_hrt_ind,
        humira_patient_companion.rx_dx_hyp_ind,
        humira_patient_companion.rx_dx_hypo_ind,
        humira_patient_companion.rx_dx_ibs_ind,
        humira_patient_companion.rx_dx_inco_ind,
        humira_patient_companion.rx_dx_inft_ind,
        humira_patient_companion.rx_dx_inso_ind,
        humira_patient_companion.rx_dx_lrti_ind,
        humira_patient_companion.rx_dx_lup_ind,
        humira_patient_companion.rx_dx_md_ind,
        humira_patient_companion.rx_dx_mgrn_ind,
        humira_patient_companion.rx_dx_mi_ind,
        humira_patient_companion.rx_dx_ms_ind,
        humira_patient_companion.rx_dx_naus_ind,
        humira_patient_companion.rx_dx_nd_ind,
        humira_patient_companion.rx_dx_np_ind,
        humira_patient_companion.rx_dx_oart_ind,
        humira_patient_companion.rx_dx_ob_ind,
        humira_patient_companion.rx_dx_obes_ind,
        humira_patient_companion.rx_dx_om_ind,
        humira_patient_companion.rx_dx_ost_ind,
        humira_patient_companion.rx_dx_pai_ind,
        humira_patient_companion.rx_dx_park_ind,
        humira_patient_companion.rx_dx_pcan_ind,
        humira_patient_companion.rx_dx_psor_ind,
        humira_patient_companion.rx_dx_ra_ind,
        humira_patient_companion.rx_dx_rls_ind,
        humira_patient_companion.rx_dx_sc_ind,
        humira_patient_companion.rx_dx_sssi_ind,
        humira_patient_companion.rx_dx_strk_ind,
        humira_patient_companion.rx_dx_test_ind,
        humira_patient_companion.rx_dx_uc_ind,
        humira_patient_companion.rx_dx_urti_ind,
        humira_patient_companion.rx_dx_uti_ind,
        humira_patient_companion.rx_dx_vacc_ind,
        humira_patient_companion.rx_dx_vdp_ind,
        humira_patient_companion.rx_dx_adcn_ind,
        humira_patient_companion.trx_mth,
        humira_patient_companion.tot_opc_ccy,
        humira_patient_companion.tot_opc_pcy,
        humira_patient_companion.tot_opc_p2cy,
        humira_patient_companion.tot_dx_vst_cnt,
        humira_patient_companion.jcode_cnt,
        humira_patient_companion.nbr_dx_payers,
        humira_patient_companion.nbr_dx_plns,
        humira_patient_companion.most_freq_dx_payer_nm_ccy,
        humira_patient_companion.most_freq_dx_pln_nm_ccy,
        humira_patient_companion.most_freq_dx_payer_pln_id_ccy,
        humira_patient_companion.most_rcnt_dx_payer_nm_ccy,
        humira_patient_companion.most_rcnt_dx_pln_nm_ccy,
        humira_patient_companion.most_rcnt_dx_payer_pln_id_ccy,
        humira_patient_companion.most_rcnt_dx_payer_nm_pcy,
        humira_patient_companion.most_rcnt_dx_pln_nm_pcy,
        humira_patient_companion.most_rcnt_dx_payer_pln_id_pcy,
        humira_patient_companion.most_freq_dx_payer_nm_pcy,
        humira_patient_companion.most_freq_dx_pln_nm_pcy,
        humira_patient_companion.most_freq_dx_payer_pln_id_pcy,
        humira_patient_companion.most_rcnt_dx_payer_nm_p2cy,
        humira_patient_companion.most_rcnt_dx_pln_nm_p2cy,
        humira_patient_companion.most_rcnt_dx_payer_pln_id_p2cy,
        humira_patient_companion.most_freq_dx_payer_nm_p2cy,
        humira_patient_companion.most_freq_dx_pln_nm_p2cy,
        humira_patient_companion.most_freq_dx_payer_pln_id_p2cy,
        humira_patient_companion.uniq_rx_providers,
        humira_patient_companion.brand_trx_cnt,
        humira_patient_companion.brand_trx_share,
        humira_patient_companion.brand_nrx_cnt,
        humira_patient_companion.brand_nrx_share,
        humira_patient_companion.generic_trx_cnt,
        humira_patient_companion.generic_trx_share,
        humira_patient_companion.generic_nrx_cnt,
        humira_patient_companion.generic_nrx_share,
        humira_patient_companion.pr_ind,
        humira_patient_companion.professional_claim_cnt,
        humira_patient_companion.institutional_claim_cnt,
        humira_patient_companion.uniq_rx_spcl_providers,
        humira_patient_companion.low_incm_subsidy_pcy_ind,
        humira_patient_companion.dual_elig_pcy_ind,
        humira_patient_companion.med_d_pcy_ind,
        humira_patient_companion.med_d_covrg_gap_dt_reach_pcy,
        humira_patient_companion.catrphc_covrg_dt_reach_pcy,
        humira_patient_companion.high_deductbl_pln_pcy_ind,
        humira_patient_companion.copay_card_pcy_ind,
        humira_patient_companion.low_incm_subsidy_p2cy_ind,
        humira_patient_companion.dual_elig_p2cy_ind,
        humira_patient_companion.med_d_p2cy_ind,
        humira_patient_companion.med_d_covrg_gap_dt_reach_p2cy,
        humira_patient_companion.catrphc_covrg_dt_reach_p2cy,
        humira_patient_companion.high_deductbl_pln_p2cy_ind,
        humira_patient_companion.copay_card_p2cy_ind,
        humira_patient_companion.low_incm_subsidy_ccy_ind,
        humira_patient_companion.dual_elig_ccy_ind,
        humira_patient_companion.med_d_ccy_ind,
        humira_patient_companion.med_d_covrg_gap_dt_reach_ccy,
        humira_patient_companion.catrphc_covrg_dt_reach_ccy,
        humira_patient_companion.high_deductbl_pln_ccy_ind,
        humira_patient_companion.copay_card_ccy_ind,
        humira_patient_companion.well_vst_cnt,
        humira_patient_companion.most_freq_dx_prov_pcp,
        humira_patient_companion.most_freq_dx_prov_pcp_spcl_nm,
        humira_patient_companion.most_freq_dx_prov_othr,
        humira_patient_companion.most_freq_dx_prov_othr_spcl_nm,
        humira_patient_companion.most_rcnt_dx_prov_pcp,
        humira_patient_companion.most_rcnt_dx_prov_pcp_spcl_nm,
        humira_patient_companion.most_rcnt_dx_prov_othr,
        humira_patient_companion.most_rcnt_dx_prov_othr_spcl_nm,
        humira_patient_companion.uniq_dx_providers,
        humira_patient_companion.uniq_dx_spcl_providers,
        humira_patient_companion.rx_nbr_of_conds,
        humira_patient_companion.dx_nbr_of_conds,
        humira_patient_companion.rx_dx_nbr_of_conds,
        humira_patient_companion.trx_lnched_prods,
        humira_patient_companion.cnt_lnched_prods,
        humira_patient_companion.avail_lnched_prods
 FROM sandbox.humira_patient_companion
 ORDER BY humira_patient_companion.pat_id,
          humira_patient_companion.pat_gender_cd,
          humira_patient_companion.pat_age,
          humira_patient_companion.pat_zip_3,
          humira_patient_companion.cum_meds_brdn,
          humira_patient_companion.trx_cnt,
          humira_patient_companion.nrx_cnt,
          humira_patient_companion.mail_trx_cnt
SEGMENTED BY hash(humira_patient_companion.pat_id, humira_patient_companion.pat_gender_cd, humira_patient_companion.pat_age, humira_patient_companion.pat_zip_3, humira_patient_companion.trx_cnt, humira_patient_companion.nrx_cnt, humira_patient_companion.mail_trx_cnt, humira_patient_companion.mail_nrx_cnt) ALL NODES;

CREATE PROJECTION sandbox.relay_coc_psd_nov_b0 /*+basename(relay_coc_psd_nov),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 date_of_service,
 month_date,
 mnth_dt,
 claim_status,
 pharmacy_product_dollar,
 units,
 run_date
)
AS
 SELECT relay_coc_psd_nov.source_name,
        relay_coc_psd_nov.ndc_code,
        relay_coc_psd_nov.ndc_name,
        relay_coc_psd_nov.date_of_service,
        relay_coc_psd_nov.month_date,
        relay_coc_psd_nov.mnth_dt,
        relay_coc_psd_nov.claim_status,
        relay_coc_psd_nov.pharmacy_product_dollar,
        relay_coc_psd_nov.units,
        relay_coc_psd_nov.run_date
 FROM sandbox.relay_coc_psd_nov
 ORDER BY relay_coc_psd_nov.source_name,
          relay_coc_psd_nov.ndc_code,
          relay_coc_psd_nov.ndc_name,
          relay_coc_psd_nov.date_of_service,
          relay_coc_psd_nov.month_date,
          relay_coc_psd_nov.mnth_dt,
          relay_coc_psd_nov.claim_status,
          relay_coc_psd_nov.pharmacy_product_dollar
SEGMENTED BY hash(relay_coc_psd_nov.date_of_service, relay_coc_psd_nov.mnth_dt, relay_coc_psd_nov.units, relay_coc_psd_nov.run_date, relay_coc_psd_nov.source_name, relay_coc_psd_nov.pharmacy_product_dollar, relay_coc_psd_nov.ndc_code, relay_coc_psd_nov.month_date) ALL NODES;

CREATE PROJECTION sandbox.relay_coc_metrics_psd_updtd_b0 /*+basename(relay_coc_metrics_psd_updtd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 ndc_name,
 month_date,
 mnth_dt,
 Relay_CoC_Units_Paid,
 Relay_CoC_Dollars_Paid,
 Relay_CoC_Units_Reversed,
 Relay_CoC_Dollars_Reversed,
 Relay_CoC_Units,
 Relay_CoC_Dollars
)
AS
 SELECT relay_coc_metrics_psd_updtd.source_name,
        relay_coc_metrics_psd_updtd.ndc_code,
        relay_coc_metrics_psd_updtd.ndc_name,
        relay_coc_metrics_psd_updtd.month_date,
        relay_coc_metrics_psd_updtd.mnth_dt,
        relay_coc_metrics_psd_updtd.Relay_CoC_Units_Paid,
        relay_coc_metrics_psd_updtd.Relay_CoC_Dollars_Paid,
        relay_coc_metrics_psd_updtd.Relay_CoC_Units_Reversed,
        relay_coc_metrics_psd_updtd.Relay_CoC_Dollars_Reversed,
        relay_coc_metrics_psd_updtd.Relay_CoC_Units,
        relay_coc_metrics_psd_updtd.Relay_CoC_Dollars
 FROM sandbox.relay_coc_metrics_psd_updtd
 ORDER BY relay_coc_metrics_psd_updtd.source_name,
          relay_coc_metrics_psd_updtd.ndc_code,
          relay_coc_metrics_psd_updtd.ndc_name,
          relay_coc_metrics_psd_updtd.month_date,
          relay_coc_metrics_psd_updtd.mnth_dt
SEGMENTED BY hash(relay_coc_metrics_psd_updtd.source_name, relay_coc_metrics_psd_updtd.ndc_code, relay_coc_metrics_psd_updtd.ndc_name, relay_coc_metrics_psd_updtd.month_date, relay_coc_metrics_psd_updtd.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.base_metrics_psd_updtd_b0 /*+basename(base_metrics_psd_updtd),createtype(A)*/ 
(
 ndc_code,
 ndc_name,
 month_date,
 mnth_dt,
 EU_TRx,
 CRx_Covered_Units,
 CRx_EVoucher_Units,
 CRx_NonCovered_Units,
 CRx_DC_Units,
 CRx_DC_Dollars,
 CRx_PA_Units,
 CRx_DC_CoC_Units,
 CRx_Other_Units,
 CRx_Covered_Dollars,
 CRx_NonCovered_Dollars,
 Relay_EVoucher_Units_Paid,
 Relay_EVoucher_Dollars_Paid,
 Relay_EVoucher_Units_Reversed,
 Relay_EVoucher_Dollars_Reversed,
 Relay_EVoucher_Units,
 Relay_EVoucher_Dollars,
 Relay_Denial_Conversion_Units_Paid,
 Relay_Denial_Conversion_Dollars_Paid,
 Relay_Denial_Conversion_Units_Reversal,
 Relay_Denial_Conversion_Dollars_Reversal,
 Relay_Denial_Conversion_Units,
 Relay_Denial_Conversion_Dollars,
 Relay_CoC_Units_Paid,
 Relay_CoC_Dollars_Paid,
 Relay_CoC_Units_Reversed,
 Relay_CoC_Dollars_Reversed,
 Relay_CoC_Units,
 Relay_CoC_Dollars
)
AS
 SELECT base_metrics_psd_updtd.ndc_code,
        base_metrics_psd_updtd.ndc_name,
        base_metrics_psd_updtd.month_date,
        base_metrics_psd_updtd.mnth_dt,
        base_metrics_psd_updtd.EU_TRx,
        base_metrics_psd_updtd.CRx_Covered_Units,
        base_metrics_psd_updtd.CRx_EVoucher_Units,
        base_metrics_psd_updtd.CRx_NonCovered_Units,
        base_metrics_psd_updtd.CRx_DC_Units,
        base_metrics_psd_updtd.CRx_DC_Dollars,
        base_metrics_psd_updtd.CRx_PA_Units,
        base_metrics_psd_updtd.CRx_DC_CoC_Units,
        base_metrics_psd_updtd.CRx_Other_Units,
        base_metrics_psd_updtd.CRx_Covered_Dollars,
        base_metrics_psd_updtd.CRx_NonCovered_Dollars,
        base_metrics_psd_updtd.Relay_EVoucher_Units_Paid,
        base_metrics_psd_updtd.Relay_EVoucher_Dollars_Paid,
        base_metrics_psd_updtd.Relay_EVoucher_Units_Reversed,
        base_metrics_psd_updtd.Relay_EVoucher_Dollars_Reversed,
        base_metrics_psd_updtd.Relay_EVoucher_Units,
        base_metrics_psd_updtd.Relay_EVoucher_Dollars,
        base_metrics_psd_updtd.Relay_Denial_Conversion_Units_Paid,
        base_metrics_psd_updtd.Relay_Denial_Conversion_Dollars_Paid,
        base_metrics_psd_updtd.Relay_Denial_Conversion_Units_Reversal,
        base_metrics_psd_updtd.Relay_Denial_Conversion_Dollars_Reversal,
        base_metrics_psd_updtd.Relay_Denial_Conversion_Units,
        base_metrics_psd_updtd.Relay_Denial_Conversion_Dollars,
        base_metrics_psd_updtd.Relay_CoC_Units_Paid,
        base_metrics_psd_updtd.Relay_CoC_Dollars_Paid,
        base_metrics_psd_updtd.Relay_CoC_Units_Reversed,
        base_metrics_psd_updtd.Relay_CoC_Dollars_Reversed,
        base_metrics_psd_updtd.Relay_CoC_Units,
        base_metrics_psd_updtd.Relay_CoC_Dollars
 FROM sandbox.base_metrics_psd_updtd
 ORDER BY base_metrics_psd_updtd.ndc_code,
          base_metrics_psd_updtd.ndc_name,
          base_metrics_psd_updtd.month_date,
          base_metrics_psd_updtd.mnth_dt
SEGMENTED BY hash(base_metrics_psd_updtd.ndc_code, base_metrics_psd_updtd.ndc_name, base_metrics_psd_updtd.month_date, base_metrics_psd_updtd.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.NPA_DEMAND_UNITS_bkp_may21_b0 /*+basename(NPA_DEMAND_UNITS_bkp_may21),createtype(A)*/ 
(
 Product,
 Channel,
 NDC_Details,
 EUTRx_May_2018,
 EUTRx_Jun_2018,
 EUTRx_Jul_2018,
 EUTRx_Aug_2018,
 EUTRx_Sep_2018,
 EUTRx_Oct_2018,
 EUTRx_Nov_2018,
 EUTRx_Dec_2018,
 EUTRx_Jan_2019,
 EUTRx_Feb_2019,
 EUTRx_Mar_2019,
 EUTRx_Apr_2019,
 EUTRx_May_2019,
 EUTRx_Jun_2019,
 EUTRx_Jul_2019,
 EUTRx_Aug_2019,
 EUTRx_Sep_2019,
 EUTRx_Oct_2019,
 EUTRx_Nov_2019,
 EUTRx_Dec_2019,
 EUTRx_Jan_2020,
 EUTRx_Feb_2020,
 EUTRx_Mar_2020,
 EUTRx_Apr_2020,
 EUTRx_May_2020,
 EUTRx_Jun_2020,
 EUTRx_Jul_2020,
 EUTRx_Aug_2020,
 EUTRx_Sep_2020,
 EUTRx_Oct_2020,
 EUTRx_Nov_2020,
 EUTRx_Dec_2020,
 EUTRx_Jan_2021,
 EUTRx_Feb_2021,
 EUTRx_Mar_2021,
 EUTRx_Apr_2021,
 EUTRx_May_2021,
 TRx_May_2018,
 TRx_Jun_2018,
 TRx_Jul_2018,
 TRx_Aug_2018,
 TRx_Sep_2018,
 TRx_Oct_2018,
 TRx_Nov_2018,
 TRx_Dec_2018,
 TRx_Jan_2019,
 TRx_Feb_2019,
 TRx_Mar_2019,
 TRx_Apr_2019,
 TRx_May_2019,
 TRx_Jun_2019,
 TRx_Jul_2019,
 TRx_Aug_2019,
 TRx_Sep_2019,
 TRx_Oct_2019,
 TRx_Nov_2019,
 TRx_Dec_2019,
 TRx_Jan_2020,
 TRx_Feb_2020,
 TRx_Mar_2020,
 TRx_Apr_2020,
 TRx_May_2020,
 TRx_Jun_2020,
 TRx_Jul_2020,
 TRx_Aug_2020,
 TRx_Sep_2020,
 TRx_Oct_2020,
 TRx_Nov_2020,
 TRx_Dec_2020,
 TRx_Jan_2021,
 TRx_Feb_2021,
 TRx_Mar_2021,
 TRx_Apr_2021,
 TRx_May_2021
)
AS
 SELECT NPA_DEMAND_UNITS_bkp_may21.Product,
        NPA_DEMAND_UNITS_bkp_may21.Channel,
        NPA_DEMAND_UNITS_bkp_may21.NDC_Details,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_May_2018,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jun_2018,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jul_2018,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Aug_2018,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Sep_2018,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Oct_2018,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Nov_2018,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Dec_2018,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jan_2019,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Feb_2019,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Mar_2019,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Apr_2019,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_May_2019,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jun_2019,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jul_2019,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Aug_2019,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Sep_2019,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Oct_2019,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Nov_2019,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Dec_2019,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jan_2020,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Feb_2020,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Mar_2020,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Apr_2020,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_May_2020,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jun_2020,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jul_2020,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Aug_2020,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Sep_2020,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Oct_2020,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Nov_2020,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Dec_2020,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jan_2021,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Feb_2021,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Mar_2021,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_Apr_2021,
        NPA_DEMAND_UNITS_bkp_may21.EUTRx_May_2021,
        NPA_DEMAND_UNITS_bkp_may21.TRx_May_2018,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Jun_2018,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Jul_2018,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Aug_2018,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Sep_2018,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Oct_2018,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Nov_2018,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Dec_2018,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Jan_2019,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Feb_2019,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Mar_2019,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Apr_2019,
        NPA_DEMAND_UNITS_bkp_may21.TRx_May_2019,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Jun_2019,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Jul_2019,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Aug_2019,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Sep_2019,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Oct_2019,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Nov_2019,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Dec_2019,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Jan_2020,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Feb_2020,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Mar_2020,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Apr_2020,
        NPA_DEMAND_UNITS_bkp_may21.TRx_May_2020,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Jun_2020,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Jul_2020,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Aug_2020,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Sep_2020,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Oct_2020,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Nov_2020,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Dec_2020,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Jan_2021,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Feb_2021,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Mar_2021,
        NPA_DEMAND_UNITS_bkp_may21.TRx_Apr_2021,
        NPA_DEMAND_UNITS_bkp_may21.TRx_May_2021
 FROM sandbox.NPA_DEMAND_UNITS_bkp_may21
 ORDER BY NPA_DEMAND_UNITS_bkp_may21.Product,
          NPA_DEMAND_UNITS_bkp_may21.Channel,
          NPA_DEMAND_UNITS_bkp_may21.NDC_Details,
          NPA_DEMAND_UNITS_bkp_may21.EUTRx_May_2018,
          NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jun_2018,
          NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jul_2018,
          NPA_DEMAND_UNITS_bkp_may21.EUTRx_Aug_2018,
          NPA_DEMAND_UNITS_bkp_may21.EUTRx_Sep_2018
SEGMENTED BY hash(NPA_DEMAND_UNITS_bkp_may21.EUTRx_May_2018, NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jun_2018, NPA_DEMAND_UNITS_bkp_may21.EUTRx_Jul_2018, NPA_DEMAND_UNITS_bkp_may21.EUTRx_Aug_2018, NPA_DEMAND_UNITS_bkp_may21.EUTRx_Sep_2018, NPA_DEMAND_UNITS_bkp_may21.EUTRx_Oct_2018, NPA_DEMAND_UNITS_bkp_may21.EUTRx_Nov_2018, NPA_DEMAND_UNITS_bkp_may21.EUTRx_Dec_2018) ALL NODES;

CREATE PROJECTION sandbox.RELAY_HEALTH_EVOUCHER_sep21_b0 /*+basename(RELAY_HEALTH_EVOUCHER_sep21),createtype(A)*/ 
(
 RPT_BRAND_NAME,
 NDC,
 FDB_LABEL_NAME,
 REPORT_MONTH,
 FILL_NUMBER,
 FILL_TYPE,
 CLAIM_STATUS,
 PHARMACY_STATE_NAME,
 EVOUCHER_STATUS_DESC,
 COPAY_RANGE_DISPLAY_ORDER,
 COPAY_RANGE,
 DAYS_SUPPLY,
 QTY_DISPENSED,
 ORIGINAL_COPAY,
 EVOUCHER_AMOUNT,
 NEW_COPAY,
 PATIENT_STATUS,
 PHARMACY_STATE_TYPE,
 PATIENT_AGE_RANGE,
 STARTER_BENEFIT_IND,
 PPE_TRAN_ID,
 PHARMACY_ZIPSEC,
 BRD_ISSUE_FLAG
)
AS
 SELECT RELAY_HEALTH_EVOUCHER_sep21.RPT_BRAND_NAME,
        RELAY_HEALTH_EVOUCHER_sep21.NDC,
        RELAY_HEALTH_EVOUCHER_sep21.FDB_LABEL_NAME,
        RELAY_HEALTH_EVOUCHER_sep21.REPORT_MONTH,
        RELAY_HEALTH_EVOUCHER_sep21.FILL_NUMBER,
        RELAY_HEALTH_EVOUCHER_sep21.FILL_TYPE,
        RELAY_HEALTH_EVOUCHER_sep21.CLAIM_STATUS,
        RELAY_HEALTH_EVOUCHER_sep21.PHARMACY_STATE_NAME,
        RELAY_HEALTH_EVOUCHER_sep21.EVOUCHER_STATUS_DESC,
        RELAY_HEALTH_EVOUCHER_sep21.COPAY_RANGE_DISPLAY_ORDER,
        RELAY_HEALTH_EVOUCHER_sep21.COPAY_RANGE,
        RELAY_HEALTH_EVOUCHER_sep21.DAYS_SUPPLY,
        RELAY_HEALTH_EVOUCHER_sep21.QTY_DISPENSED,
        RELAY_HEALTH_EVOUCHER_sep21.ORIGINAL_COPAY,
        RELAY_HEALTH_EVOUCHER_sep21.EVOUCHER_AMOUNT,
        RELAY_HEALTH_EVOUCHER_sep21.NEW_COPAY,
        RELAY_HEALTH_EVOUCHER_sep21.PATIENT_STATUS,
        RELAY_HEALTH_EVOUCHER_sep21.PHARMACY_STATE_TYPE,
        RELAY_HEALTH_EVOUCHER_sep21.PATIENT_AGE_RANGE,
        RELAY_HEALTH_EVOUCHER_sep21.STARTER_BENEFIT_IND,
        RELAY_HEALTH_EVOUCHER_sep21.PPE_TRAN_ID,
        RELAY_HEALTH_EVOUCHER_sep21.PHARMACY_ZIPSEC,
        RELAY_HEALTH_EVOUCHER_sep21.BRD_ISSUE_FLAG
 FROM sandbox.RELAY_HEALTH_EVOUCHER_sep21
 ORDER BY RELAY_HEALTH_EVOUCHER_sep21.RPT_BRAND_NAME,
          RELAY_HEALTH_EVOUCHER_sep21.NDC,
          RELAY_HEALTH_EVOUCHER_sep21.FDB_LABEL_NAME,
          RELAY_HEALTH_EVOUCHER_sep21.REPORT_MONTH,
          RELAY_HEALTH_EVOUCHER_sep21.FILL_NUMBER,
          RELAY_HEALTH_EVOUCHER_sep21.FILL_TYPE,
          RELAY_HEALTH_EVOUCHER_sep21.CLAIM_STATUS,
          RELAY_HEALTH_EVOUCHER_sep21.PHARMACY_STATE_NAME
SEGMENTED BY hash(RELAY_HEALTH_EVOUCHER_sep21.REPORT_MONTH, RELAY_HEALTH_EVOUCHER_sep21.FILL_NUMBER, RELAY_HEALTH_EVOUCHER_sep21.COPAY_RANGE_DISPLAY_ORDER, RELAY_HEALTH_EVOUCHER_sep21.DAYS_SUPPLY, RELAY_HEALTH_EVOUCHER_sep21.QTY_DISPENSED, RELAY_HEALTH_EVOUCHER_sep21.ORIGINAL_COPAY, RELAY_HEALTH_EVOUCHER_sep21.EVOUCHER_AMOUNT, RELAY_HEALTH_EVOUCHER_sep21.NEW_COPAY) ALL NODES;

CREATE PROJECTION sandbox.relay_health_dc_sep21_b0 /*+basename(relay_health_dc_sep21),createtype(A)*/ 
(
 DRUG_TRADE_NAME,
 NDC,
 PAID_OR_REVERSED,
 STATE,
 QUANTITY,
 DAYS_SUPPLY,
 FILL_NUMBER,
 FILL_TYPE,
 DATE_OF_SERVICE,
 DATE_PROCESSED,
 PATIENT_PAY_AMT,
 DENIAL_VOUCHER_AMOUNT,
 TOTAL_ADMIN_FEES,
 TOTAL_DUE,
 TRANSACTION_ID
)
AS
 SELECT relay_health_dc_sep21.DRUG_TRADE_NAME,
        relay_health_dc_sep21.NDC,
        relay_health_dc_sep21.PAID_OR_REVERSED,
        relay_health_dc_sep21.STATE,
        relay_health_dc_sep21.QUANTITY,
        relay_health_dc_sep21.DAYS_SUPPLY,
        relay_health_dc_sep21.FILL_NUMBER,
        relay_health_dc_sep21.FILL_TYPE,
        relay_health_dc_sep21.DATE_OF_SERVICE,
        relay_health_dc_sep21.DATE_PROCESSED,
        relay_health_dc_sep21.PATIENT_PAY_AMT,
        relay_health_dc_sep21.DENIAL_VOUCHER_AMOUNT,
        relay_health_dc_sep21.TOTAL_ADMIN_FEES,
        relay_health_dc_sep21.TOTAL_DUE,
        relay_health_dc_sep21.TRANSACTION_ID
 FROM sandbox.relay_health_dc_sep21
 ORDER BY relay_health_dc_sep21.DRUG_TRADE_NAME,
          relay_health_dc_sep21.NDC,
          relay_health_dc_sep21.PAID_OR_REVERSED,
          relay_health_dc_sep21.STATE,
          relay_health_dc_sep21.QUANTITY,
          relay_health_dc_sep21.DAYS_SUPPLY,
          relay_health_dc_sep21.FILL_NUMBER,
          relay_health_dc_sep21.FILL_TYPE
SEGMENTED BY hash(relay_health_dc_sep21.FILL_NUMBER, relay_health_dc_sep21.DATE_OF_SERVICE, relay_health_dc_sep21.DATE_PROCESSED, relay_health_dc_sep21.QUANTITY, relay_health_dc_sep21.PATIENT_PAY_AMT, relay_health_dc_sep21.DENIAL_VOUCHER_AMOUNT, relay_health_dc_sep21.TOTAL_ADMIN_FEES, relay_health_dc_sep21.TOTAL_DUE) ALL NODES;

CREATE PROJECTION sandbox.RELAY_HEALTH_coc_spe21_b0 /*+basename(RELAY_HEALTH_coc_spe21),createtype(A)*/ 
(
 DRUG_TRADE_NAME,
 NDC,
 PAID_OR_REVERSED,
 STATE,
 QUANTITY,
 FILL_NUMBER,
 FILL_TYPE,
 PAS_SUBMITTED,
 DATE_OF_SERVICE,
 PROCESSED_DATE,
 PATIENT_PAY_DOLLAR,
 PHARMACY_PRODUCT_DOLLAR,
 ADMIN_FEES_DOLLAR,
 MANUFACTURER_DOLLAR_AMOUNT,
 TRANSACTION_ID
)
AS
 SELECT RELAY_HEALTH_coc_spe21.DRUG_TRADE_NAME,
        RELAY_HEALTH_coc_spe21.NDC,
        RELAY_HEALTH_coc_spe21.PAID_OR_REVERSED,
        RELAY_HEALTH_coc_spe21.STATE,
        RELAY_HEALTH_coc_spe21.QUANTITY,
        RELAY_HEALTH_coc_spe21.FILL_NUMBER,
        RELAY_HEALTH_coc_spe21.FILL_TYPE,
        RELAY_HEALTH_coc_spe21.PAS_SUBMITTED,
        RELAY_HEALTH_coc_spe21.DATE_OF_SERVICE,
        RELAY_HEALTH_coc_spe21.PROCESSED_DATE,
        RELAY_HEALTH_coc_spe21.PATIENT_PAY_DOLLAR,
        RELAY_HEALTH_coc_spe21.PHARMACY_PRODUCT_DOLLAR,
        RELAY_HEALTH_coc_spe21.ADMIN_FEES_DOLLAR,
        RELAY_HEALTH_coc_spe21.MANUFACTURER_DOLLAR_AMOUNT,
        RELAY_HEALTH_coc_spe21.TRANSACTION_ID
 FROM sandbox.RELAY_HEALTH_coc_spe21
 ORDER BY RELAY_HEALTH_coc_spe21.DRUG_TRADE_NAME,
          RELAY_HEALTH_coc_spe21.NDC,
          RELAY_HEALTH_coc_spe21.PAID_OR_REVERSED,
          RELAY_HEALTH_coc_spe21.STATE,
          RELAY_HEALTH_coc_spe21.QUANTITY,
          RELAY_HEALTH_coc_spe21.FILL_NUMBER,
          RELAY_HEALTH_coc_spe21.FILL_TYPE,
          RELAY_HEALTH_coc_spe21.PAS_SUBMITTED
SEGMENTED BY hash(RELAY_HEALTH_coc_spe21.FILL_NUMBER, RELAY_HEALTH_coc_spe21.PAS_SUBMITTED, RELAY_HEALTH_coc_spe21.DATE_OF_SERVICE, RELAY_HEALTH_coc_spe21.PROCESSED_DATE, RELAY_HEALTH_coc_spe21.QUANTITY, RELAY_HEALTH_coc_spe21.PATIENT_PAY_DOLLAR, RELAY_HEALTH_coc_spe21.PHARMACY_PRODUCT_DOLLAR, RELAY_HEALTH_coc_spe21.ADMIN_FEES_DOLLAR) ALL NODES;

CREATE PROJECTION sandbox.copay_metrics_psd_updtd_b0 /*+basename(copay_metrics_psd_updtd),createtype(A)*/ 
(
 source_name,
 ndc_code,
 basket_name,
 month_date,
 mnth_dt,
 CRx_Covered_Units,
 CRx_EVoucher_Units,
 CRx_NonCovered_Units,
 CRx_DC_Units,
 CRx_DC_Dollars,
 CRx_PA_Units,
 CRx_DC_CoC_Units,
 CRx_Other_Units,
 CRx_Covered_Dollars,
 CRx_NonCovered_Dollars
)
AS
 SELECT copay_metrics_psd_updtd.source_name,
        copay_metrics_psd_updtd.ndc_code,
        copay_metrics_psd_updtd.basket_name,
        copay_metrics_psd_updtd.month_date,
        copay_metrics_psd_updtd.mnth_dt,
        copay_metrics_psd_updtd.CRx_Covered_Units,
        copay_metrics_psd_updtd.CRx_EVoucher_Units,
        copay_metrics_psd_updtd.CRx_NonCovered_Units,
        copay_metrics_psd_updtd.CRx_DC_Units,
        copay_metrics_psd_updtd.CRx_DC_Dollars,
        copay_metrics_psd_updtd.CRx_PA_Units,
        copay_metrics_psd_updtd.CRx_DC_CoC_Units,
        copay_metrics_psd_updtd.CRx_Other_Units,
        copay_metrics_psd_updtd.CRx_Covered_Dollars,
        copay_metrics_psd_updtd.CRx_NonCovered_Dollars
 FROM sandbox.copay_metrics_psd_updtd
 ORDER BY copay_metrics_psd_updtd.basket_name
SEGMENTED BY hash(copay_metrics_psd_updtd.source_name, copay_metrics_psd_updtd.ndc_code, copay_metrics_psd_updtd.basket_name, copay_metrics_psd_updtd.month_date, copay_metrics_psd_updtd.mnth_dt) ALL NODES;

CREATE PROJECTION sandbox.tv46k_MOP_2020_b0 /*+basename(tv46k_MOP_2020),createtype(A)*/ 
(
 ims_id,
 "NULL",
 CASH,
 "COMMERCIAL 3RD PTY",
 "MANAGED MEDICAID",
 MEDICAID,
 "MEDICARE PT D",
 "VOUCHER/COPAY CARDS"
)
AS
 SELECT tv46k_MOP_2020.ims_id,
        tv46k_MOP_2020."NULL",
        tv46k_MOP_2020.CASH,
        tv46k_MOP_2020."COMMERCIAL 3RD PTY",
        tv46k_MOP_2020."MANAGED MEDICAID",
        tv46k_MOP_2020.MEDICAID,
        tv46k_MOP_2020."MEDICARE PT D",
        tv46k_MOP_2020."VOUCHER/COPAY CARDS"
 FROM sandbox.tv46k_MOP_2020
 ORDER BY tv46k_MOP_2020.ims_id
SEGMENTED BY hash(tv46k_MOP_2020.ims_id) ALL NODES;

CREATE PROJECTION sandbox.tv46k_MOP_2021_b0 /*+basename(tv46k_MOP_2021),createtype(A)*/ 
(
 ims_id,
 "NULL",
 CASH,
 "COMMERCIAL 3RD PTY",
 "MANAGED MEDICAID",
 MEDICAID,
 "MEDICARE PT D",
 "VOUCHER/COPAY CARDS"
)
AS
 SELECT tv46k_MOP_2021.ims_id,
        tv46k_MOP_2021."NULL",
        tv46k_MOP_2021.CASH,
        tv46k_MOP_2021."COMMERCIAL 3RD PTY",
        tv46k_MOP_2021."MANAGED MEDICAID",
        tv46k_MOP_2021.MEDICAID,
        tv46k_MOP_2021."MEDICARE PT D",
        tv46k_MOP_2021."VOUCHER/COPAY CARDS"
 FROM sandbox.tv46k_MOP_2021
 ORDER BY tv46k_MOP_2021.ims_id
SEGMENTED BY hash(tv46k_MOP_2021.ims_id) ALL NODES;

CREATE PROJECTION sandbox.AHM0126_b0 /*+basename(AHM0126),createtype(L)*/ 
(
 MasterID,
 LastName,
 FirstName,
 MiddleName,
 Address,
 City,
 State,
 ST,
 Zip,
 Email,
 Phone,
 SpeakerAffiliation,
 Profession,
 ContractPhase
)
AS
 SELECT AHM0126.MasterID,
        AHM0126.LastName,
        AHM0126.FirstName,
        AHM0126.MiddleName,
        AHM0126.Address,
        AHM0126.City,
        AHM0126.State,
        AHM0126.ST,
        AHM0126.Zip,
        AHM0126.Email,
        AHM0126.Phone,
        AHM0126.SpeakerAffiliation,
        AHM0126.Profession,
        AHM0126.ContractPhase
 FROM sandbox.AHM0126
 ORDER BY AHM0126.MasterID,
          AHM0126.LastName,
          AHM0126.FirstName,
          AHM0126.MiddleName,
          AHM0126.Address,
          AHM0126.City,
          AHM0126.State,
          AHM0126.ST
SEGMENTED BY hash(AHM0126.MasterID, AHM0126.ST, AHM0126.Profession, AHM0126.State, AHM0126.Zip, AHM0126.Phone, AHM0126.MiddleName, AHM0126.City) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_b0 /*+basename(Austedo_PSRF_Utilization_Rpt),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt.PrescriberName,
        Austedo_PSRF_Utilization_Rpt.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt.PrescriberState,
        Austedo_PSRF_Utilization_Rpt.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt
 ORDER BY Austedo_PSRF_Utilization_Rpt.PrescriberName,
          Austedo_PSRF_Utilization_Rpt.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt.PrescriberState,
          Austedo_PSRF_Utilization_Rpt.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt.PrescriberZip, Austedo_PSRF_Utilization_Rpt."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_022522_super /*+basename(Austedo_PSRF_Utilization_Rpt_022522),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utiliztion_Rpt_022522.PrescriberName,
        Austedo_PSRF_Utiliztion_Rpt_022522.PrescriberCity,
        Austedo_PSRF_Utiliztion_Rpt_022522.PrescriberState,
        Austedo_PSRF_Utiliztion_Rpt_022522.PrescriberZip,
        Austedo_PSRF_Utiliztion_Rpt_022522.PrescriberNPI,
        Austedo_PSRF_Utiliztion_Rpt_022522."Current Week PSRFs",
        Austedo_PSRF_Utiliztion_Rpt_022522."Current Month PSRFs",
        Austedo_PSRF_Utiliztion_Rpt_022522.HCP_Signature_Yes,
        Austedo_PSRF_Utiliztion_Rpt_022522.HCP_Signature_No,
        Austedo_PSRF_Utiliztion_Rpt_022522.Patient_Auth_Yes,
        Austedo_PSRF_Utiliztion_Rpt_022522.Patient_Auth_No,
        Austedo_PSRF_Utiliztion_Rpt_022522."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_022522 Austedo_PSRF_Utiliztion_Rpt_022522
 ORDER BY Austedo_PSRF_Utiliztion_Rpt_022522.PrescriberName,
          Austedo_PSRF_Utiliztion_Rpt_022522.PrescriberCity,
          Austedo_PSRF_Utiliztion_Rpt_022522.PrescriberState,
          Austedo_PSRF_Utiliztion_Rpt_022522.PrescriberZip,
          Austedo_PSRF_Utiliztion_Rpt_022522.PrescriberNPI,
          Austedo_PSRF_Utiliztion_Rpt_022522."Current Week PSRFs",
          Austedo_PSRF_Utiliztion_Rpt_022522."Current Month PSRFs",
          Austedo_PSRF_Utiliztion_Rpt_022522.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utiliztion_Rpt_022522.PrescriberZip, Austedo_PSRF_Utiliztion_Rpt_022522."Current Week PSRFs", Austedo_PSRF_Utiliztion_Rpt_022522."Current Month PSRFs", Austedo_PSRF_Utiliztion_Rpt_022522.HCP_Signature_Yes, Austedo_PSRF_Utiliztion_Rpt_022522.HCP_Signature_No, Austedo_PSRF_Utiliztion_Rpt_022522.Patient_Auth_Yes, Austedo_PSRF_Utiliztion_Rpt_022522.Patient_Auth_No, Austedo_PSRF_Utiliztion_Rpt_022522."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_TP02182022_b0 /*+basename(Austedo_PSRF_Utilization_Rpt_TP02182022),createtype(L)*/ 
(
 PSRF_ID,
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_TP02182022.PSRF_ID,
        Austedo_PSRF_Utilization_Rpt_TP02182022.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_TP02182022.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_TP02182022.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_TP02182022.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_TP02182022.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_TP02182022."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_TP02182022."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_TP02182022.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_TP02182022.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_TP02182022.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_TP02182022.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_TP02182022."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_TP02182022
 ORDER BY Austedo_PSRF_Utilization_Rpt_TP02182022.PSRF_ID,
          Austedo_PSRF_Utilization_Rpt_TP02182022.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_TP02182022.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_TP02182022.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_TP02182022.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_TP02182022.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_TP02182022."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_TP02182022."Current Month PSRFs"
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_TP02182022."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_TP02182022."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_TP02182022.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_TP02182022.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_TP02182022.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_TP02182022.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_TP02182022."YTD PSRFs", Austedo_PSRF_Utilization_Rpt_TP02182022.PrescriberZip) ALL NODES;

CREATE PROJECTION sandbox.metadata_workflow_command_03132022_b0 /*+basename(metadata_workflow_command_03132022),createtype(A)*/ 
(
 process_id,
 command_step,
 type,
 folder,
 file,
 arguments,
 search_for_text,
 replace_with_text,
 comments,
 is_active,
 create_timestamp,
 update_timestamp
)
AS
 SELECT metadata_workflow_command_03132022.process_id,
        metadata_workflow_command_03132022.command_step,
        metadata_workflow_command_03132022.type,
        metadata_workflow_command_03132022.folder,
        metadata_workflow_command_03132022.file,
        metadata_workflow_command_03132022.arguments,
        metadata_workflow_command_03132022.search_for_text,
        metadata_workflow_command_03132022.replace_with_text,
        metadata_workflow_command_03132022.comments,
        metadata_workflow_command_03132022.is_active,
        metadata_workflow_command_03132022.create_timestamp,
        metadata_workflow_command_03132022.update_timestamp
 FROM sandbox.metadata_workflow_command_03132022
 ORDER BY metadata_workflow_command_03132022.process_id,
          metadata_workflow_command_03132022.command_step
SEGMENTED BY hash(metadata_workflow_command_03132022.process_id, metadata_workflow_command_03132022.command_step) ALL NODES;

CREATE PROJECTION sandbox.ajovy_payer_dash_b0 /*+basename(ajovy_payer_dash),createtype(L)*/ 
(
 payment_method,
 ptr_territory_num,
 reg_territory_num,
 area_territory_num,
 nat_territory_num,
 payer_plan_number,
 CONTR_PARENT,
 plan_name,
 time_period,
 max_week,
 ajovy_access,
 aimovig_access,
 emgality_access,
 ajovy,
 aimovig,
 emgality,
 territory_name,
 reg_name,
 area_name,
 nat_name
)
AS
 SELECT ajovy_payer_dash.payment_method,
        ajovy_payer_dash.ptr_territory_num,
        ajovy_payer_dash.reg_territory_num,
        ajovy_payer_dash.area_territory_num,
        ajovy_payer_dash.nat_territory_num,
        ajovy_payer_dash.payer_plan_number,
        ajovy_payer_dash.CONTR_PARENT,
        ajovy_payer_dash.plan_name,
        ajovy_payer_dash.time_period,
        ajovy_payer_dash.max_week,
        ajovy_payer_dash.ajovy_access,
        ajovy_payer_dash.aimovig_access,
        ajovy_payer_dash.emgality_access,
        ajovy_payer_dash.ajovy,
        ajovy_payer_dash.aimovig,
        ajovy_payer_dash.emgality,
        ajovy_payer_dash.territory_name,
        ajovy_payer_dash.reg_name,
        ajovy_payer_dash.area_name,
        ajovy_payer_dash.nat_name
 FROM sandbox.ajovy_payer_dash
 ORDER BY ajovy_payer_dash.payment_method,
          ajovy_payer_dash.ptr_territory_num,
          ajovy_payer_dash.reg_territory_num,
          ajovy_payer_dash.area_territory_num,
          ajovy_payer_dash.nat_territory_num,
          ajovy_payer_dash.payer_plan_number,
          ajovy_payer_dash.CONTR_PARENT,
          ajovy_payer_dash.plan_name
SEGMENTED BY hash(ajovy_payer_dash.nat_territory_num, ajovy_payer_dash.max_week, ajovy_payer_dash.ajovy, ajovy_payer_dash.aimovig, ajovy_payer_dash.emgality, ajovy_payer_dash.nat_name, ajovy_payer_dash.payer_plan_number, ajovy_payer_dash.ajovy_access) ALL NODES;

CREATE PROJECTION sandbox.ic_rx_jan2022_b0 /*+basename(ic_rx_jan2022),createtype(A)*/ 
(
 ic_data_month,
 basket_name,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 dnc_flag,
 dnp_flag,
 rollup_month,
 month_bucket,
 nrx_count,
 trx_count,
 nrx_quantity,
 trx_quantity,
 include_in_nation_rollup,
 include_in_area_rollup,
 include_in_region_rollup,
 join_key,
 row_source,
 row_create_date,
 indication,
 outlet_dea,
 payer_plan_number,
 payment_method
)
AS
 SELECT ic_rx_jan2022.ic_data_month,
        ic_rx_jan2022.basket_name,
        ic_rx_jan2022.sales_force_id,
        ic_rx_jan2022.area_number,
        ic_rx_jan2022.region_number,
        ic_rx_jan2022.territory_number,
        ic_rx_jan2022.ims_id,
        ic_rx_jan2022.tvcmid,
        ic_rx_jan2022.outlet_code,
        ic_rx_jan2022.va_station_number,
        ic_rx_jan2022.dnc_flag,
        ic_rx_jan2022.dnp_flag,
        ic_rx_jan2022.rollup_month,
        ic_rx_jan2022.month_bucket,
        ic_rx_jan2022.nrx_count,
        ic_rx_jan2022.trx_count,
        ic_rx_jan2022.nrx_quantity,
        ic_rx_jan2022.trx_quantity,
        ic_rx_jan2022.include_in_nation_rollup,
        ic_rx_jan2022.include_in_area_rollup,
        ic_rx_jan2022.include_in_region_rollup,
        ic_rx_jan2022.join_key,
        ic_rx_jan2022.row_source,
        ic_rx_jan2022.row_create_date,
        ic_rx_jan2022.indication,
        ic_rx_jan2022.outlet_dea,
        ic_rx_jan2022.payer_plan_number,
        ic_rx_jan2022.payment_method
 FROM sandbox.ic_rx_jan2022
 ORDER BY ic_rx_jan2022.ic_data_month,
          ic_rx_jan2022.basket_name,
          ic_rx_jan2022.sales_force_id,
          ic_rx_jan2022.area_number,
          ic_rx_jan2022.region_number,
          ic_rx_jan2022.territory_number,
          ic_rx_jan2022.ims_id,
          ic_rx_jan2022.tvcmid
SEGMENTED BY hash(ic_rx_jan2022.ic_data_month, ic_rx_jan2022.tvcmid, ic_rx_jan2022.outlet_code, ic_rx_jan2022.dnc_flag, ic_rx_jan2022.dnp_flag, ic_rx_jan2022.rollup_month, ic_rx_jan2022.month_bucket, ic_rx_jan2022.nrx_count) ALL NODES;

CREATE PROJECTION sandbox.ic_demo_jan2022_b0 /*+basename(ic_demo_jan2022),createtype(A)*/ 
(
 ic_data_month,
 sales_force_id,
 area_number,
 region_number,
 territory_number,
 ims_id,
 tvcmid,
 outlet_code,
 va_station_number,
 specialty,
 last_name,
 first_name,
 mid_name,
 address_1,
 address_2,
 address_3,
 city,
 state,
 zip,
 address_source,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 join_key,
 row_source,
 row_create_date,
 outlet_dea,
 secondary_specialty
)
AS
 SELECT ic_demo_jan2022.ic_data_month,
        ic_demo_jan2022.sales_force_id,
        ic_demo_jan2022.area_number,
        ic_demo_jan2022.region_number,
        ic_demo_jan2022.territory_number,
        ic_demo_jan2022.ims_id,
        ic_demo_jan2022.tvcmid,
        ic_demo_jan2022.outlet_code,
        ic_demo_jan2022.va_station_number,
        ic_demo_jan2022.specialty,
        ic_demo_jan2022.last_name,
        ic_demo_jan2022.first_name,
        ic_demo_jan2022.mid_name,
        ic_demo_jan2022.address_1,
        ic_demo_jan2022.address_2,
        ic_demo_jan2022.address_3,
        ic_demo_jan2022.city,
        ic_demo_jan2022.state,
        ic_demo_jan2022.zip,
        ic_demo_jan2022.address_source,
        ic_demo_jan2022.pdrp_flag,
        ic_demo_jan2022.pdrp_date,
        ic_demo_jan2022.np_pa_flag,
        ic_demo_jan2022.no_spend,
        ic_demo_jan2022.ama_no_contact_flag,
        ic_demo_jan2022.join_key,
        ic_demo_jan2022.row_source,
        ic_demo_jan2022.row_create_date,
        ic_demo_jan2022.outlet_dea,
        ic_demo_jan2022.secondary_specialty
 FROM sandbox.ic_demo_jan2022
 ORDER BY ic_demo_jan2022.ic_data_month,
          ic_demo_jan2022.sales_force_id,
          ic_demo_jan2022.area_number,
          ic_demo_jan2022.region_number,
          ic_demo_jan2022.territory_number,
          ic_demo_jan2022.ims_id,
          ic_demo_jan2022.tvcmid,
          ic_demo_jan2022.outlet_code
SEGMENTED BY hash(ic_demo_jan2022.ic_data_month, ic_demo_jan2022.tvcmid, ic_demo_jan2022.outlet_code, ic_demo_jan2022.mid_name, ic_demo_jan2022.state, ic_demo_jan2022.zip, ic_demo_jan2022.pdrp_flag, ic_demo_jan2022.pdrp_date) ALL NODES;

CREATE PROJECTION sandbox.Austedo_HDCOE_2022_b0 /*+basename(Austedo_HDCOE_2022),createtype(L)*/ 
(
 "HD-COE ID",
 ims_org_id,
 "tvcmid Teva list",
 "COE / Partner Site Name",
 "Active/Inactive_(per 2021 HDSA)",
 IMS_ID,
 "tvcmid Teva list_1",
 "npi Teva list",
 "Last Name Teva list",
 "First Name Teva list",
 "Middle Name Teva list",
 primary_specialty,
 address_line1,
 city,
 state_code,
 zip,
 specialty_group,
 "Level 1 COE",
 "Level 1 COE Partner sites",
 "In HCOS data",
 "In Teva List",
 "In Both (HCOS & TEVA List)",
 "In COE website",
 "In Both (COE Websites & Teva List)",
 "In All 3 (HCOS - COE Web - Teva List)",
 "Director/Professor",
 "Listed under HD/Movement Disporder",
 "Target HCP (Y/N)"
)
AS
 SELECT Austedo_HDCOE_2022."HD-COE ID",
        Austedo_HDCOE_2022.ims_org_id,
        Austedo_HDCOE_2022."tvcmid Teva list",
        Austedo_HDCOE_2022."COE / Partner Site Name",
        Austedo_HDCOE_2022."Active/Inactive_(per 2021 HDSA)",
        Austedo_HDCOE_2022.IMS_ID,
        Austedo_HDCOE_2022."tvcmid Teva list_1",
        Austedo_HDCOE_2022."npi Teva list",
        Austedo_HDCOE_2022."Last Name Teva list",
        Austedo_HDCOE_2022."First Name Teva list",
        Austedo_HDCOE_2022."Middle Name Teva list",
        Austedo_HDCOE_2022.primary_specialty,
        Austedo_HDCOE_2022.address_line1,
        Austedo_HDCOE_2022.city,
        Austedo_HDCOE_2022.state_code,
        Austedo_HDCOE_2022.zip,
        Austedo_HDCOE_2022.specialty_group,
        Austedo_HDCOE_2022."Level 1 COE",
        Austedo_HDCOE_2022."Level 1 COE Partner sites",
        Austedo_HDCOE_2022."In HCOS data",
        Austedo_HDCOE_2022."In Teva List",
        Austedo_HDCOE_2022."In Both (HCOS & TEVA List)",
        Austedo_HDCOE_2022."In COE website",
        Austedo_HDCOE_2022."In Both (COE Websites & Teva List)",
        Austedo_HDCOE_2022."In All 3 (HCOS - COE Web - Teva List)",
        Austedo_HDCOE_2022."Director/Professor",
        Austedo_HDCOE_2022."Listed under HD/Movement Disporder",
        Austedo_HDCOE_2022."Target HCP (Y/N)"
 FROM sandbox.Austedo_HDCOE_2022
 ORDER BY Austedo_HDCOE_2022."HD-COE ID",
          Austedo_HDCOE_2022.ims_org_id,
          Austedo_HDCOE_2022."tvcmid Teva list",
          Austedo_HDCOE_2022."COE / Partner Site Name",
          Austedo_HDCOE_2022."Active/Inactive_(per 2021 HDSA)",
          Austedo_HDCOE_2022.IMS_ID,
          Austedo_HDCOE_2022."tvcmid Teva list_1",
          Austedo_HDCOE_2022."npi Teva list"
SEGMENTED BY hash(Austedo_HDCOE_2022."tvcmid Teva list", Austedo_HDCOE_2022."tvcmid Teva list_1", Austedo_HDCOE_2022."npi Teva list", Austedo_HDCOE_2022.zip, Austedo_HDCOE_2022."HD-COE ID", Austedo_HDCOE_2022.ims_org_id, Austedo_HDCOE_2022."Active/Inactive_(per 2021 HDSA)", Austedo_HDCOE_2022.IMS_ID) ALL NODES;

CREATE PROJECTION sandbox.pres_comb_demo_frozen_03242022_TPWED109_TPWED108_b0 /*+basename(pres_comb_demo_frozen_03242022_TPWED109_TPWED108),createtype(A)*/ 
(
 start_date,
 end_date,
 sales_force_id,
 ims_id,
 npi,
 tvcmid,
 veeva_account_id,
 specialty,
 first_name,
 middle_name,
 last_name,
 ptr_veeva_address_id,
 ptr_address_1,
 ptr_address_2,
 ptr_address_3,
 ptr_city,
 ptr_state,
 ptr_zip,
 ptr_phone,
 ptr_territory_num,
 ptr_territory_type,
 ptr_address_source,
 ptr_mailable,
 dea_num,
 pdrp_flag,
 pdrp_date,
 np_pa_flag,
 no_spend,
 ama_no_contact_flag,
 email,
 degree,
 address_id,
 address_latitude,
 address_longitude,
 row_source,
 freeze_reason,
 freeze_date,
 secondary_specialty
)
AS
 SELECT pres_comb_demo_frozen_03242022_TPWED109_TPWED108.start_date,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.end_date,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.sales_force_id,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ims_id,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.npi,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.tvcmid,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.veeva_account_id,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.specialty,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.first_name,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.middle_name,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.last_name,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_veeva_address_id,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_address_1,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_address_2,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_address_3,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_city,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_state,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_zip,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_phone,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_territory_num,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_territory_type,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_address_source,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_mailable,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.dea_num,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.pdrp_flag,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.pdrp_date,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.np_pa_flag,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.no_spend,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ama_no_contact_flag,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.email,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.degree,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.address_id,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.address_latitude,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.address_longitude,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.row_source,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.freeze_reason,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.freeze_date,
        pres_comb_demo_frozen_03242022_TPWED109_TPWED108.secondary_specialty
 FROM sandbox.pres_comb_demo_frozen_03242022_TPWED109_TPWED108
 ORDER BY pres_comb_demo_frozen_03242022_TPWED109_TPWED108.sales_force_id,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ims_id,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.npi,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.tvcmid,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.veeva_account_id,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.specialty,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.first_name,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.middle_name,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.last_name,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_veeva_address_id,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_address_1,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_address_2,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_address_3,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_city,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_state,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_zip,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_phone,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_territory_num,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_territory_type,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_address_source,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_mailable,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.dea_num,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.pdrp_flag,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.pdrp_date,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.np_pa_flag,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.no_spend,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ama_no_contact_flag,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.email,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.degree,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.address_id,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.address_latitude,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.address_longitude,
          pres_comb_demo_frozen_03242022_TPWED109_TPWED108.row_source
SEGMENTED BY hash(pres_comb_demo_frozen_03242022_TPWED109_TPWED108.tvcmid, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_state, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_zip, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_mailable, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.pdrp_flag, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.pdrp_date, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.np_pa_flag, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.no_spend, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ama_no_contact_flag, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.address_id, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ims_id, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.npi, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.dea_num, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_territory_num, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.sales_force_id, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.veeva_account_id, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_veeva_address_id, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.address_latitude, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.address_longitude, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_territory_type, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_phone, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.first_name, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.middle_name, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.last_name, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_city, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_address_source, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_address_1, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_address_2, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.ptr_address_3, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.email, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.degree, pres_comb_demo_frozen_03242022_TPWED109_TPWED108.row_source) ALL NODES;

CREATE PROJECTION sandbox."FSRF today_b0" /*+basename(FSRF today),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT "FSRF today".PrescriberName,
        "FSRF today".PrescriberCity,
        "FSRF today".PrescriberState,
        "FSRF today".PrescriberZip,
        "FSRF today".PrescriberNPI,
        "FSRF today"."Current Week PSRFs",
        "FSRF today"."Current Month PSRFs",
        "FSRF today".HCP_Signature_Yes,
        "FSRF today".HCP_Signature_No,
        "FSRF today".Patient_Auth_Yes,
        "FSRF today".Patient_Auth_No,
        "FSRF today"."YTD PSRFs"
 FROM sandbox."FSRF today"
 ORDER BY "FSRF today".PrescriberName,
          "FSRF today".PrescriberCity,
          "FSRF today".PrescriberState,
          "FSRF today".PrescriberZip,
          "FSRF today".PrescriberNPI,
          "FSRF today"."Current Week PSRFs",
          "FSRF today"."Current Month PSRFs",
          "FSRF today".HCP_Signature_Yes
SEGMENTED BY hash("FSRF today"."Current Week PSRFs", "FSRF today"."Current Month PSRFs", "FSRF today".HCP_Signature_Yes, "FSRF today".HCP_Signature_No, "FSRF today".Patient_Auth_Yes, "FSRF today".Patient_Auth_No, "FSRF today"."YTD PSRFs", "FSRF today".PrescriberNPI) ALL NODES;

CREATE PROJECTION sandbox."Austedo PSRF today_b0" /*+basename(Austedo PSRF today),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT "Austedo PSRF today".PrescriberName,
        "Austedo PSRF today".PrescriberCity,
        "Austedo PSRF today".PrescriberState,
        "Austedo PSRF today".PrescriberZip,
        "Austedo PSRF today".PrescriberNPI,
        "Austedo PSRF today"."Current Week PSRFs",
        "Austedo PSRF today"."Current Month PSRFs",
        "Austedo PSRF today".HCP_Signature_Yes,
        "Austedo PSRF today".HCP_Signature_No,
        "Austedo PSRF today".Patient_Auth_Yes,
        "Austedo PSRF today".Patient_Auth_No,
        "Austedo PSRF today"."YTD PSRFs"
 FROM sandbox."Austedo PSRF today"
 ORDER BY "Austedo PSRF today".PrescriberName,
          "Austedo PSRF today".PrescriberCity,
          "Austedo PSRF today".PrescriberState,
          "Austedo PSRF today".PrescriberZip,
          "Austedo PSRF today".PrescriberNPI,
          "Austedo PSRF today"."Current Week PSRFs",
          "Austedo PSRF today"."Current Month PSRFs",
          "Austedo PSRF today".HCP_Signature_Yes
SEGMENTED BY hash("Austedo PSRF today"."Current Week PSRFs", "Austedo PSRF today"."Current Month PSRFs", "Austedo PSRF today".HCP_Signature_Yes, "Austedo PSRF today".HCP_Signature_No, "Austedo PSRF today".Patient_Auth_Yes, "Austedo PSRF today".Patient_Auth_No, "Austedo PSRF today"."YTD PSRFs", "Austedo PSRF today".PrescriberNPI) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_040122_super /*+basename(Austedo_PSRF_Utilization_Rpt_040122),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_040122 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs", Austedo_PSRF_Utilization_Rpt_00.PrescriberZip) ALL NODES;

CREATE PROJECTION sandbox.Austedo_LTC_Affiliations_b0 /*+basename(Austedo_LTC_Affiliations),createtype(L)*/ 
(
 "FACILITY ID",
 IMS_ID
)
AS
 SELECT Austedo_LTC_Affiliations."FACILITY ID",
        Austedo_LTC_Affiliations.IMS_ID
 FROM sandbox.Austedo_LTC_Affiliations
 ORDER BY Austedo_LTC_Affiliations."FACILITY ID",
          Austedo_LTC_Affiliations.IMS_ID
SEGMENTED BY hash(Austedo_LTC_Affiliations."FACILITY ID", Austedo_LTC_Affiliations.IMS_ID) ALL NODES;

CREATE PROJECTION sandbox.Austedo_PSRF_Utilization_Rpt_050622_super /*+basename(Austedo_PSRF_Utilization_Rpt_050622),createtype(L)*/ 
(
 PrescriberName,
 PrescriberCity,
 PrescriberState,
 PrescriberZip,
 PrescriberNPI,
 "Current Week PSRFs",
 "Current Month PSRFs",
 HCP_Signature_Yes,
 HCP_Signature_No,
 Patient_Auth_Yes,
 Patient_Auth_No,
 "YTD PSRFs"
)
AS
 SELECT Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
        Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
        Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
        Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes,
        Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes,
        Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No,
        Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs"
 FROM sandbox.Austedo_PSRF_Utilization_Rpt_050622 Austedo_PSRF_Utilization_Rpt_00
 ORDER BY Austedo_PSRF_Utilization_Rpt_00.PrescriberName,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberCity,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberState,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberZip,
          Austedo_PSRF_Utilization_Rpt_00.PrescriberNPI,
          Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs",
          Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs",
          Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes
SEGMENTED BY hash(Austedo_PSRF_Utilization_Rpt_00.PrescriberState, Austedo_PSRF_Utilization_Rpt_00."Current Week PSRFs", Austedo_PSRF_Utilization_Rpt_00."Current Month PSRFs", Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_Yes, Austedo_PSRF_Utilization_Rpt_00.HCP_Signature_No, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_Yes, Austedo_PSRF_Utilization_Rpt_00.Patient_Auth_No, Austedo_PSRF_Utilization_Rpt_00."YTD PSRFs") ALL NODES;

CREATE PROJECTION sandbox.sugg_terr_b0 /*+basename(sugg_terr),createtype(A)*/ 
(
 id,
 employeenumber,
 name,
 email,
 territory_number,
 ownerid,
 batch_num
)
AS
 SELECT sugg_terr.id,
        sugg_terr.employeenumber,
        sugg_terr.name,
        sugg_terr.email,
        sugg_terr.territory_number,
        sugg_terr.ownerid,
        sugg_terr.batch_num
 FROM sandbox.sugg_terr
 ORDER BY sugg_terr.id,
          sugg_terr.employeenumber,
          sugg_terr.name,
          sugg_terr.email,
          sugg_terr.territory_number,
          sugg_terr.ownerid,
          sugg_terr.batch_num
SEGMENTED BY hash(sugg_terr.id, sugg_terr.employeenumber, sugg_terr.name, sugg_terr.email, sugg_terr.territory_number, sugg_terr.ownerid, sugg_terr.batch_num) ALL NODES;

CREATE PROJECTION sandbox.user_terr_b0 /*+basename(user_terr),createtype(A)*/ 
(
 userid,
 name
)
AS
 SELECT user_terr.userid,
        user_terr.name
 FROM sandbox.user_terr
 ORDER BY user_terr.userid,
          user_terr.name
SEGMENTED BY hash(user_terr.userid, user_terr.name) ALL NODES;

CREATE PROJECTION sandbox.acct_vod_tvcmid_b0 /*+basename(acct_vod_tvcmid),createtype(A)*/ 
(
 account_vod__c,
 tvcmid
)
AS
 SELECT acct_vod_tvcmid.account_vod__c,
        acct_vod_tvcmid.tvcmid
 FROM sandbox.acct_vod_tvcmid
 ORDER BY acct_vod_tvcmid.account_vod__c,
          acct_vod_tvcmid.tvcmid
SEGMENTED BY hash(acct_vod_tvcmid.account_vod__c) ALL NODES;

CREATE PROJECTION sandbox."TS_Call Plan Misaligned_b0" /*+basename(TS_Call Plan Misaligned),createtype(L)*/ 
(
 tvcmid,
 "pcd - ter_id",
 "call plan - ter id",
 "current alignment - ter id"
)
AS
 SELECT "TS_Call Plan Misaligned".tvcmid,
        "TS_Call Plan Misaligned"."pcd - ter_id",
        "TS_Call Plan Misaligned"."call plan - ter id",
        "TS_Call Plan Misaligned"."current alignment - ter id"
 FROM sandbox."TS_Call Plan Misaligned"
 ORDER BY "TS_Call Plan Misaligned".tvcmid,
          "TS_Call Plan Misaligned"."pcd - ter_id",
          "TS_Call Plan Misaligned"."call plan - ter id",
          "TS_Call Plan Misaligned"."current alignment - ter id"
SEGMENTED BY hash("TS_Call Plan Misaligned".tvcmid, "TS_Call Plan Misaligned"."pcd - ter_id", "TS_Call Plan Misaligned"."call plan - ter id", "TS_Call Plan Misaligned"."current alignment - ter id") ALL NODES;

CREATE PROJECTION sandbox.TS_Q2_2022_callplan_rev_05172022_b0 /*+basename(TS_Q2_2022_callplan_rev_05172022),createtype(L)*/ 
(
 VEEVA_ACCOUNT_ID,
 TVCM_ID,
 IMS_ID,
 FIRST_NAME,
 LAST_NAME,
 SPECIALTY,
 TERRITORY_ID,
 ADDRESS_1,
 CITY,
 STATE,
 ZIP,
 PRODUCT_NAME,
 COMMITTED_P1,
 COMMITTED_P2,
 COMMITTED_P3,
 CALL_PLAN_TARGET
)
AS
 SELECT TS_Q2_2022_callplan_rev_05172022.VEEVA_ACCOUNT_ID,
        TS_Q2_2022_callplan_rev_05172022.TVCM_ID,
        TS_Q2_2022_callplan_rev_05172022.IMS_ID,
        TS_Q2_2022_callplan_rev_05172022.FIRST_NAME,
        TS_Q2_2022_callplan_rev_05172022.LAST_NAME,
        TS_Q2_2022_callplan_rev_05172022.SPECIALTY,
        TS_Q2_2022_callplan_rev_05172022.TERRITORY_ID,
        TS_Q2_2022_callplan_rev_05172022.ADDRESS_1,
        TS_Q2_2022_callplan_rev_05172022.CITY,
        TS_Q2_2022_callplan_rev_05172022.STATE,
        TS_Q2_2022_callplan_rev_05172022.ZIP,
        TS_Q2_2022_callplan_rev_05172022.PRODUCT_NAME,
        TS_Q2_2022_callplan_rev_05172022.COMMITTED_P1,
        TS_Q2_2022_callplan_rev_05172022.COMMITTED_P2,
        TS_Q2_2022_callplan_rev_05172022.COMMITTED_P3,
        TS_Q2_2022_callplan_rev_05172022.CALL_PLAN_TARGET
 FROM sandbox.TS_Q2_2022_callplan_rev_05172022
 ORDER BY TS_Q2_2022_callplan_rev_05172022.VEEVA_ACCOUNT_ID,
          TS_Q2_2022_callplan_rev_05172022.TVCM_ID,
          TS_Q2_2022_callplan_rev_05172022.IMS_ID,
          TS_Q2_2022_callplan_rev_05172022.FIRST_NAME,
          TS_Q2_2022_callplan_rev_05172022.LAST_NAME,
          TS_Q2_2022_callplan_rev_05172022.SPECIALTY,
          TS_Q2_2022_callplan_rev_05172022.TERRITORY_ID,
          TS_Q2_2022_callplan_rev_05172022.ADDRESS_1
SEGMENTED BY hash(TS_Q2_2022_callplan_rev_05172022.TVCM_ID, TS_Q2_2022_callplan_rev_05172022.IMS_ID, TS_Q2_2022_callplan_rev_05172022.ZIP, TS_Q2_2022_callplan_rev_05172022.COMMITTED_P1, TS_Q2_2022_callplan_rev_05172022.COMMITTED_P2, TS_Q2_2022_callplan_rev_05172022.COMMITTED_P3, TS_Q2_2022_callplan_rev_05172022.VEEVA_ACCOUNT_ID, TS_Q2_2022_callplan_rev_05172022.FIRST_NAME) ALL NODES;

CREATE PROJECTION sandbox.activity_line_level_v2_b0 /*+basename(activity_line_level_v2),createtype(L)*/ 
(
 activityid,
 level,
 basket_name
)
AS
 SELECT activity_line_level_v2.activityid,
        activity_line_level_v2.level,
        activity_line_level_v2.basket_name
 FROM sandbox.activity_line_level_v2
 ORDER BY activity_line_level_v2.activityid,
          activity_line_level_v2.level
SEGMENTED BY hash(activity_line_level_v2.level, activity_line_level_v2.activityid) ALL NODES;

CREATE PROJECTION sandbox.call_key_msgs_b0 /*+basename(call_key_msgs),createtype(A)*/ 
(
 veeva_account_id,
 tvcmid,
 call_id,
 call_record_type,
 product,
 key_message,
 call_date,
 duration,
 display_order,
 call_status,
 territory,
 call_type,
 hcp_name,
 key_message_description
)
AS
 SELECT call_key_msgs.veeva_account_id,
        call_key_msgs.tvcmid,
        call_key_msgs.call_id,
        call_key_msgs.call_record_type,
        call_key_msgs.product,
        call_key_msgs.key_message,
        call_key_msgs.call_date,
        call_key_msgs.duration,
        call_key_msgs.display_order,
        call_key_msgs.call_status,
        call_key_msgs.territory,
        call_key_msgs.call_type,
        call_key_msgs.hcp_name,
        call_key_msgs.key_message_description
 FROM sandbox.call_key_msgs
 ORDER BY call_key_msgs.veeva_account_id,
          call_key_msgs.tvcmid,
          call_key_msgs.call_id,
          call_key_msgs.call_record_type,
          call_key_msgs.product,
          call_key_msgs.key_message,
          call_key_msgs.call_date,
          call_key_msgs.duration
SEGMENTED BY hash(call_key_msgs.tvcmid, call_key_msgs.call_date, call_key_msgs.duration, call_key_msgs.veeva_account_id, call_key_msgs.display_order, call_key_msgs.call_id, call_key_msgs.call_record_type, call_key_msgs.product) ALL NODES;

CREATE PROJECTION sandbox.res_pool_b0 /*+basename(res_pool),createtype(A)*/ 
(
 pool_id,
 name,
 subcluster_oid,
 subcluster_name,
 is_internal,
 memorysize,
 maxmemorysize,
 maxquerymemorysize,
 executionparallelism,
 priority,
 runtimepriority,
 runtimeprioritythreshold,
 queuetimeout,
 plannedconcurrency,
 maxconcurrency,
 runtimecap,
 singleinitiator,
 cpuaffinityset,
 cpuaffinitymode,
 cascadeto,
 cascadetosubclusterpool
)
AS
 SELECT res_pool.pool_id,
        res_pool.name,
        res_pool.subcluster_oid,
        res_pool.subcluster_name,
        res_pool.is_internal,
        res_pool.memorysize,
        res_pool.maxmemorysize,
        res_pool.maxquerymemorysize,
        res_pool.executionparallelism,
        res_pool.priority,
        res_pool.runtimepriority,
        res_pool.runtimeprioritythreshold,
        res_pool.queuetimeout,
        res_pool.plannedconcurrency,
        res_pool.maxconcurrency,
        res_pool.runtimecap,
        res_pool.singleinitiator,
        res_pool.cpuaffinityset,
        res_pool.cpuaffinitymode,
        res_pool.cascadeto,
        res_pool.cascadetosubclusterpool
 FROM sandbox.res_pool
 ORDER BY res_pool.pool_id,
          res_pool.name,
          res_pool.subcluster_oid,
          res_pool.subcluster_name,
          res_pool.is_internal,
          res_pool.memorysize,
          res_pool.maxmemorysize,
          res_pool.maxquerymemorysize
SEGMENTED BY hash(res_pool.pool_id, res_pool.subcluster_oid, res_pool.is_internal, res_pool.priority, res_pool.runtimeprioritythreshold, res_pool.queuetimeout, res_pool.maxconcurrency, res_pool.runtimecap) ALL NODES;

CREATE PROJECTION sandbox.genoa_roster_b0 /*+basename(genoa_roster),createtype(L)*/ 
(
 Pharmacy_Status,
 Genoa_Site__,
 Street_Address_1,
 Street_Address_2,
 City,
 State,
 ZIP_Code,
 Main_Phone,
 Fax,
 DEA,
 DEA_Expiration,
 NPI,
 NCPDP,
 State_Issuing_License,
 Opening_Date,
 Location_Notes,
 Note_Effective_Date,
 Pharmacy_Contact
)
AS
 SELECT genoa_roster.Pharmacy_Status,
        genoa_roster.Genoa_Site__,
        genoa_roster.Street_Address_1,
        genoa_roster.Street_Address_2,
        genoa_roster.City,
        genoa_roster.State,
        genoa_roster.ZIP_Code,
        genoa_roster.Main_Phone,
        genoa_roster.Fax,
        genoa_roster.DEA,
        genoa_roster.DEA_Expiration,
        genoa_roster.NPI,
        genoa_roster.NCPDP,
        genoa_roster.State_Issuing_License,
        genoa_roster.Opening_Date,
        genoa_roster.Location_Notes,
        genoa_roster.Note_Effective_Date,
        genoa_roster.Pharmacy_Contact
 FROM sandbox.genoa_roster
 ORDER BY genoa_roster.Pharmacy_Status,
          genoa_roster.Genoa_Site__,
          genoa_roster.Street_Address_1,
          genoa_roster.Street_Address_2,
          genoa_roster.City,
          genoa_roster.State,
          genoa_roster.ZIP_Code,
          genoa_roster.Main_Phone
SEGMENTED BY hash(genoa_roster.Pharmacy_Status, genoa_roster.Genoa_Site__, genoa_roster.State, genoa_roster.DEA_Expiration, genoa_roster.NCPDP, genoa_roster.State_Issuing_License, genoa_roster.Opening_Date, genoa_roster.Location_Notes) ALL NODES;

CREATE PROJECTION sandbox.product_super /*+basename(product),createtype(P)*/ 
(
 product_id,
 product_name,
 product_type,
 brand_id,
 brand_name,
 market_id,
 market_name,
 teva_product_flag,
 geo_summary_include,
 presc_summary_include,
 market_share_market_id,
 market_share_market_name,
 market_share_default_brand,
 rptg_decile_attribute_type,
 rptg_decile_attribute_prod_id,
 rptg_segment_attribute_type,
 rptg_segment_attribute_prod_id,
 molecule_id,
 molecule_name,
 class_name,
 form_strength_name,
 indication
)
AS
 SELECT product.product_id,
        product.product_name,
        product.product_type,
        product.brand_id,
        product.brand_name,
        product.market_id,
        product.market_name,
        product.teva_product_flag,
        product.geo_summary_include,
        product.presc_summary_include,
        product.market_share_market_id,
        product.market_share_market_name,
        product.market_share_default_brand,
        product.rptg_decile_attribute_type,
        product.rptg_decile_attribute_prod_id,
        product.rptg_segment_attribute_type,
        product.rptg_segment_attribute_prod_id,
        product.molecule_id,
        product.molecule_name,
        product.class_name,
        product.form_strength_name,
        product.indication
 FROM sandbox.product
 ORDER BY product.product_id
UNSEGMENTED ALL NODES;

CREATE PROJECTION sandbox.product_item_super /*+basename(product_item),createtype(P)*/ 
(
 product_id,
 product_name,
 product_type,
 item_id,
 item_name,
 item_type
)
AS
 SELECT product_item.product_id,
        product_item.product_name,
        product_item.product_type,
        product_item.item_id,
        product_item.item_name,
        product_item.item_type
 FROM sandbox.product_item
 ORDER BY product_item.product_id,
          product_item.item_id
UNSEGMENTED ALL NODES;

CREATE PROJECTION sandbox.genoa_roster_june2022_b0 /*+basename(genoa_roster_june2022),createtype(L)*/ 
(
 Pharmacy_Status,
 Genoa_Site__,
 Street_Address_1,
 Street_Address_2,
 City,
 State,
 ZIP_Code,
 Main_Phone,
 Fax,
 DEA,
 DEA_Expiration,
 NPI,
 NCPDP,
 State_Issuing_License,
 Opening_Date,
 Location_Notes,
 Note_Effective_Date,
 Pharmacy_Contact
)
AS
 SELECT genoa_roster_june2022.Pharmacy_Status,
        genoa_roster_june2022.Genoa_Site__,
        genoa_roster_june2022.Street_Address_1,
        genoa_roster_june2022.Street_Address_2,
        genoa_roster_june2022.City,
        genoa_roster_june2022.State,
        genoa_roster_june2022.ZIP_Code,
        genoa_roster_june2022.Main_Phone,
        genoa_roster_june2022.Fax,
        genoa_roster_june2022.DEA,
        genoa_roster_june2022.DEA_Expiration,
        genoa_roster_june2022.NPI,
        genoa_roster_june2022.NCPDP,
        genoa_roster_june2022.State_Issuing_License,
        genoa_roster_june2022.Opening_Date,
        genoa_roster_june2022.Location_Notes,
        genoa_roster_june2022.Note_Effective_Date,
        genoa_roster_june2022.Pharmacy_Contact
 FROM sandbox.genoa_roster_june2022
 ORDER BY genoa_roster_june2022.Pharmacy_Status,
          genoa_roster_june2022.Genoa_Site__,
          genoa_roster_june2022.Street_Address_1,
          genoa_roster_june2022.Street_Address_2,
          genoa_roster_june2022.City,
          genoa_roster_june2022.State,
          genoa_roster_june2022.ZIP_Code,
          genoa_roster_june2022.Main_Phone
SEGMENTED BY hash(genoa_roster_june2022.Pharmacy_Status, genoa_roster_june2022.Genoa_Site__, genoa_roster_june2022.State, genoa_roster_june2022.DEA_Expiration, genoa_roster_june2022.NCPDP, genoa_roster_june2022.State_Issuing_License, genoa_roster_june2022.Opening_Date, genoa_roster_june2022.Location_Notes) ALL NODES;


CREATE  VIEW sandbox.V_HCOS_KAISER_PROF_AFFIL AS
 SELECT hcp.tvcmid AS TVCMID,
        p.ims_id AS IMS_ID,
        p.npi AS NPI,
        p.all_dea AS ALL_DEA,
        p.last_name AS LAST_NAME,
        p.first_name AS FIRST_NAME,
        p.middle_name AS MIDDLE_NAME,
        at.affil_type_desc AS AFFIL_TYPE_DESC,
        b.ims_org_id AS IMS_FACILITY_NUMBER,
        b.cot_facility_type AS COT_FACILITY_TYPE,
        b.business_name AS BUSINESS_NAME,
        b.physical_addr_1 AS PHYSICAL_ADDR_1,
        b.physical_addr_2 AS PHYSICAL_ADDR_2,
        b.physical_city AS PHYSICAL_CITY,
        b.physical_state AS PHYSICAL_STATE,
        b.physical_zip AS PHYSICAL_ZIP
 FROM (((((( SELECT bx.ims_org_id,
        bx.cot_facility_type,
        bx.business_name,
        bx.physical_addr_1,
        bx.physical_addr_2,
        bx.physical_city,
        bx.physical_state,
        bx.physical_zip
 FROM hcos.ims_hcos_business bx
 WHERE (bx.file_id = ( SELECT max(ims_hcos_business.file_id) AS file_id
 FROM hcos.ims_hcos_business))) b JOIN ( SELECT pafx.ims_org_id,
        pafx.hce_id_prfsnl,
        pafx.affil_type_id
 FROM hcos.ims_hcos_provider_affiliation_fact pafx
 WHERE (pafx.file_id = ( SELECT max(ims_hcos_provider_affiliation_fact.file_id) AS file_id
 FROM hcos.ims_hcos_provider_affiliation_fact))) paf ON ((b.ims_org_id = paf.ims_org_id))) JOIN ( SELECT px.ims_id,
        px.npi,
        px.all_dea,
        px.last_name,
        px.first_name,
        px.middle_name,
        px.hce_id_prfsnl
 FROM hcos.ims_hcos_professional px
 WHERE (px.file_id = ( SELECT max(ims_hcos_professional.file_id) AS file_id
 FROM hcos.ims_hcos_professional))) p ON ((paf.hce_id_prfsnl = p.hce_id_prfsnl))) LEFT  JOIN ( SELECT atx.affil_type_id,
        atx.affil_type_desc
 FROM hcos.ims_hcos_affiliation_type atx
 WHERE (atx.file_id = ( SELECT max(ims_hcos_affiliation_type.file_id) AS file_id
 FROM hcos.ims_hcos_affiliation_type))) at ON ((paf.affil_type_id = at.affil_type_id))) JOIN ( SELECT rfx.ims_org_id_child,
        rfx.ims_org_id_parent
 FROM hcos.ims_hcos_relationship_fact rfx
 WHERE (rfx.file_id = ( SELECT max(ims_hcos_relationship_fact.file_id) AS max
 FROM hcos.ims_hcos_relationship_fact))) rf ON ((b.ims_org_id = rf.ims_org_id_child))) LEFT  JOIN mdm.hcp hcp ON ((p.ims_id = hcp.ims_prescriber_id)))
 WHERE (rf.ims_org_id_parent = 'INS00000226'::varchar(11));

CREATE  VIEW sandbox.test_view AS
 SELECT ftf_restrictions.health_plan_id,
        ftf_restrictions.drug_id,
        ftf_restrictions.restriction_detail_id,
        ftf_restrictions.restriction_code,
        ftf_restrictions.formulary_entry_restriction_id,
        ftf_restrictions.restriction_detail_text,
        ftf_restrictions.restriction_addtnl_information_1,
        ftf_restrictions.restriction_addtnl_information_2,
        ftf_restrictions.record_id,
        ftf_restrictions.file_id
 FROM cleansed.ftf_restrictions
 WHERE (ftf_restrictions.file_id IN ( SELECT max(ftf_restrictions.file_id) AS max
 FROM cleansed.ftf_restrictions));

CREATE  VIEW sandbox.vw_ftf_formularies AS
 SELECT ftf_formularies.health_plan_id,
        ftf_formularies.drug_id,
        ftf_formularies.tier_code,
        ftf_formularies.restrictions,
        ftf_formularies.reason_code,
        ftf_formularies.reason_code_description,
        ftf_formularies.file_id,
        ftf_formularies.record_id
 FROM cleansed.ftf_formularies
 WHERE (ftf_formularies.file_id IN ( SELECT max(ftf_formularies.file_id) AS max
 FROM cleansed.ftf_formularies));

CREATE  VIEW sandbox.create_paragard_anda_sales AS
SELECT sh.source_customer_id AS "BP #", NULL AS "Ortho E", sh.customer_name AS "BP Name", coalesce(sh.ship_to_address_line_2, sh.ship_to_address_line_1) AS "Ship-to Street", sh.ship_to_city AS "Ship-to City", sh.ship_to_state AS "Ship-to State", sh.ship_to_zip AS "Ship-to ZipCd", NULL AS "Ship-to Ctry", NULL AS "Ship-to Phone", NULL AS "Ship-to Fax", NULL AS "Ship-to Email", ad.address AS "Bill-to Street", ad.city AS "Bill-to City", ad.state AS "Bill-to State", ad.zip_code AS "Bill-to ZipCd", NULL AS "Bill-to Ctry", NULL AS "Bill-to Phone", NULL AS "Bill-to Fax", NULL AS "Bill-to Email", CASE mod(sh.customer_type, 1::float) WHEN NULLSEQUAL 0::float THEN sh.customer_type ELSE rtrim(sh.customer_type, '0'::varchar(1)) END AS "Class of Trade", CASE mod(sh.order_no, 1::float) WHEN NULLSEQUAL 0::float THEN (((sh.order_no)::numeric)::int)::varchar ELSE rtrim(sh.order_no, '0'::varchar(1)) END AS "Invoice #", CASE mod(sh.invoice_amount, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.invoice_amount)::int)::varchar ELSE rtrim((sh.invoice_amount)::varchar, '0'::varchar(1)) END AS "Del Amt", to_char(sh.invoice_date, 'YYYY-MM-DD'::varchar(10)) AS "Inv Date", CASE mod(sh.quantity, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.quantity)::int)::varchar ELSE rtrim((sh.quantity)::varchar, '0'::varchar(1)) END AS "24237", NULL AS "24238", NULL AS "24800", NULL AS "33223", CASE mod(sh.package_size, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (sh.package_size)::varchar ELSE rtrim((sh.package_size)::varchar, '0'::varchar(1)) END AS Packs, NULL AS UnitPrice, NULL AS Territory, NULL AS "Order Type Cd", NULL AS "Order Type Desc", NULL AS LOBCdDesc, NULL AS PriceMatrixDef, ('A'::varchar(1) || btrim(to_char(sh.source_parent_customer_id, '000000000'::varchar(9)))) AS ParentBPCd, NULL AS ParentBPCdDesc, NULL AS GrandParentBPCdDesc, NULL AS "PO#", NULL AS "UPS#", CASE mod(sh.order_no, 1::float) WHEN NULLSEQUAL 0::float THEN (((sh.order_no)::numeric)::int)::varchar ELSE rtrim(sh.order_no, '0'::varchar(1)) END AS OrdNbr, NULL AS OrdLnNbr, NULL AS DiscAmt, NULL AS WhseCd, 'ANDA'::varchar(4) AS DATA_SOURCE, '51285020401'::varchar(11) AS NDC11_CODE FROM (datamart.specialty_pharmacy_shipment sh LEFT JOIN (SELECT tw_address.address_id, tw_address.address, tw_address.city, tw_address.state, tw_address.zip_code FROM datamart.tw_address) ad ON ((sh.tw_bill_to_address_id = ad.address_id))) WHERE ((sh.basket_name ~~ '%PARAGARD%'::varchar(10)) AND (sh.specialty_pharmacy_data_source = 'Anda'::varchar(4)) AND (sh.ship_date >= add_months(trunc(('now()'::varchar(5))::date, 'MM'::varchar(2)), (-1))) AND (sh.ship_date < trunc(('now()'::varchar(5))::date, 'MM'::varchar(2)))) GROUP BY sh.source_customer_id, NULL, sh.customer_name, coalesce(sh.ship_to_address_line_2, sh.ship_to_address_line_1), sh.ship_to_city, sh.ship_to_state, sh.ship_to_zip, ad.address, ad.city, ad.state, ad.zip_code, CASE mod(sh.customer_type, 1::float) WHEN NULLSEQUAL 0::float THEN sh.customer_type ELSE rtrim(sh.customer_type, '0'::varchar(1)) END, CASE mod(sh.order_no, 1::float) WHEN NULLSEQUAL 0::float THEN (((sh.order_no)::numeric)::int)::varchar ELSE rtrim(sh.order_no, '0'::varchar(1)) END, CASE mod(sh.invoice_amount, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.invoice_amount)::int)::varchar ELSE rtrim((sh.invoice_amount)::varchar, '0'::varchar(1)) END, to_char(sh.invoice_date, 'YYYY-MM-DD'::varchar(10)), CASE mod(sh.quantity, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.quantity)::int)::varchar ELSE rtrim((sh.quantity)::varchar, '0'::varchar(1)) END, CASE mod(sh.package_size, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (sh.package_size)::varchar ELSE rtrim((sh.package_size)::varchar, '0'::varchar(1)) END, ('A'::varchar(1) || btrim(to_char(sh.source_parent_customer_id, '000000000'::varchar(9)))), 'ANDA'::varchar(4), '51285020401'::varchar(11);

CREATE  VIEW sandbox.knipper_merge_test AS
 SELECT merges.current_tvcmid AS TVCMIDWinner,
        merges.previous_tvcmid AS TVCMIDLoser,
        to_char((now())::date, 'MM/DD/YYYY'::varchar(10)) AS TVCMIDMergeEffectiveDate
 FROM mdm.merges
 GROUP BY merges.current_tvcmid,
          merges.previous_tvcmid,
          to_char((now())::date, 'MM/DD/YYYY'::varchar(10));

CREATE  VIEW sandbox.knipper_supplemental_test AS
 SELECT a.tvcmid AS TVCMID,
        CASE WHEN (a.medical_suffix IS NULL) THEN ''::varchar ELSE a.medical_suffix END AS ProfDesig,
        a.first_name AS FName,
        a.last_name AS Lname,
        CASE WHEN (a.middle_name IS NULL) THEN ''::varchar ELSE a.middle_name END AS MI,
        CASE WHEN (a.personal_suffix IS NULL) THEN ''::varchar ELSE a.personal_suffix END AS Suffix,
        CASE WHEN (a.hce_status_desc IS NULL) THEN 'A'::varchar(1) WHEN (a.hce_status_desc = 'ACTIVE'::varchar(6)) THEN 'A'::varchar(1) WHEN (a.hce_status_desc = 'INACTIVE'::varchar(8)) THEN 'I'::varchar(1) ELSE 'D'::varchar(1) END AS Status,
        CASE WHEN (a.hce_status_desc = 'PRESUMED DEAD'::varchar(13)) THEN 'D'::varchar(1) WHEN (a.hce_status_desc = 'SEMI-RETIRED'::varchar(12)) THEN 'O'::varchar(1) WHEN (a.hce_status_desc = 'RETIRED'::varchar(7)) THEN 'R'::varchar(1) ELSE ''::varchar END AS DeleteReason,
        CASE WHEN ((a.hce_status_desc IS NULL) OR (a.hce_status_desc <> ALL (ARRAY['ACTIVE'::varchar(8), 'INACTIVE'::varchar(8)]))) THEN to_char(e.last_update_date, 'MM/DD/YYYY'::varchar(10)) ELSE ''::varchar END AS DeleteDate,
        CASE WHEN (a.primary_specialty IS NULL) THEN 'US'::varchar(2) ELSE a.primary_specialty END AS Specialty,
        CASE WHEN (a.address_line1 IS NULL) THEN ''::varchar ELSE a.address_line1 END AS Address1,
        CASE WHEN (a.address_line2 IS NULL) THEN ''::varchar ELSE a.address_line2 END AS Address2,
        ''::varchar AS Address3,
        CASE WHEN (a.city IS NULL) THEN ''::varchar ELSE a.city END AS City,
        CASE WHEN (a.state IS NULL) THEN ''::varchar ELSE a.state END AS State,
        CASE WHEN (a.zip IS NULL) THEN ''::varchar ELSE a.zip END AS Zip,
        CASE WHEN (b.sln IS NULL) THEN ''::varchar ELSE b.sln END AS SLN,
        CASE WHEN ((b.sln IS NULL) OR (b.sln = ''::varchar)) THEN ''::varchar ELSE CASE WHEN (b.sln_status_code = 'A'::varchar(1)) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END END AS SLNActiveFlag,
        CASE WHEN ((b.sln IS NULL) OR (b.sln = ''::varchar)) THEN ''::varchar ELSE to_char(b.sln_expiration_date, 'MM/DD/YYYY'::varchar(10)) END AS SLNExpirationDate,
        CASE WHEN (c.flag_value = 'Y'::varchar(1)) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS DNCWakeFlag,
        CASE WHEN (d.tvcmid IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS DNP
 FROM (((((( SELECT prescriber_rx.tvcmid
 FROM datamart.prescriber_rx
 GROUP BY prescriber_rx.tvcmid) exp JOIN ( SELECT hcp_demo.tvcmid,
        hcp_demo.ims_id,
        hcp_demo.npi,
        hcp_demo.last_name,
        hcp_demo.first_name,
        hcp_demo.middle_name,
        hcp_demo.personal_suffix,
        hcp_demo.medical_suffix,
        hcp_demo.primary_specialty,
        hcp_demo.address_line1,
        hcp_demo.address_line2,
        hcp_demo.city,
        hcp_demo.state_code AS state,
        hcp_demo.zip,
        hcp_demo.business_phone,
        hcp_demo.business_email,
        hcp_demo.hce_status_desc,
        hcp_demo.file_id,
        hcp_demo.record_id,
        hcp_demo.np_pa_flag
 FROM datamart.customer_hcp_demographics hcp_demo
 WHERE (hcp_demo.file_id = ( SELECT max(customer_hcp_demographics.file_id) AS MAX
 FROM datamart.customer_hcp_demographics))) a ON ((exp.tvcmid = a.tvcmid))) JOIN ( SELECT sample_eligibility.sln,
        sample_eligibility.sln_state,
        sample_eligibility.sln_expiration_date,
        sample_eligibility.sln_status_code,
        sample_eligibility.tvcmid
 FROM mdm.sample_eligibility
 WHERE (sample_eligibility.file_id = ( SELECT max(sample_eligibility.file_id) AS MAX
 FROM mdm.sample_eligibility))) b ON (((a.tvcmid = b.tvcmid) AND (a.state = b.sln_state)))) LEFT  JOIN ( SELECT ims_flag.tvcmid,
        ims_flag.flag_type,
        ims_flag.flag_value
 FROM mdm.ims_flag
 WHERE ((ims_flag.file_id = ( SELECT max(ims_flag.file_id) AS MAX
 FROM mdm.ims_flag)) AND (ims_flag.flag_type = 'AMADNC'::varchar(6)))) c ON ((a.tvcmid = c.tvcmid))) LEFT  JOIN datamart.do_not_promote d ON ((a.tvcmid = d.tvcmid))) LEFT  JOIN ( SELECT hcp.updated_date AS last_update_date,
        hcp.tvcmid
 FROM mdm.hcp
 WHERE (hcp.file_id = ( SELECT max(hcp.file_id) AS MAX
 FROM mdm.hcp))) e ON ((a.tvcmid = e.tvcmid)));

CREATE  VIEW sandbox.ad_hoc_ad AS
 SELECT ('"'::varchar(1) || fed.id_num) AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(c.fill_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat((c.file_id)::varchar, (c.record_id)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (brand.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((((('Voucher/Coupon Redemption - '::varchar(28) || coalesce(b.name, ''::varchar)) || ','::varchar(1)) || coalesce(cvp.program_description, ''::varchar)) || ','::varchar(1)) || c.redemption_type) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        (to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) || '"'::varchar(1)) AS modified
 FROM ((((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.program_number = cvp.program_number) AND (c.redemption_type = cvp.redemption_type)))) JOIN datamart.tvcmid_xref fed ON (((c.physician_tvcmid = fed.tvcmid) AND (fed.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN product.basket b ON ((c.basket_id = b.basket_id))) LEFT  JOIN ( SELECT bb.basket_id,
        bb.name,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.prod_id)));

CREATE  VIEW sandbox.v_sent_email AS
 SELECT se.id,
        se.isdeleted,
        se.name,
        se.createddate,
        se.createdbyid,
        se.lastmodifieddate,
        se.lastmodifiedbyid,
        se.systemmodstamp,
        se.mayedit,
        se.islocked,
        se.is_parent_call_vod__c,
        se.call2_vod__c,
        se.product_vod__c,
        se.detail_priority_vod__c,
        se.mobile_id_vod__c,
        se.type_vod__c,
        se.file_id,
        se.record_id
 FROM (veeva.call_detail se JOIN ( SELECT call_detail.id,
        max(call_detail.file_id) AS file_id
 FROM veeva.call_detail
 WHERE (call_detail.createddate >= add_months((statement_timestamp())::timestamp, (-25)))
 GROUP BY call_detail.id) se2 ON (((se.id = se2.id) AND (se.file_id = se2.file_id))));

CREATE  VIEW sandbox.account AS
 SELECT x.id,
        x.isdeleted,
        x.masterrecordid,
        x.name,
        x.lastname,
        x.firstname,
        x.salutation,
        x.type,
        x.recordtypeid,
        x.phone,
        x.fax,
        x.website,
        x.numberofemployees,
        x.ownership,
        x.ownerid,
        x.createddate,
        x.createdbyid,
        x.lastmodifieddate,
        x.lastmodifiedbyid,
        x.systemmodstamp,
        x.lastactivitydate,
        x.mayedit,
        x.islocked,
        x.lastvieweddate,
        x.lastreferenceddate,
        x.isexcludedfromrealign,
        x.personcontactid,
        x.ispersonaccount,
        x.personmailingstreet,
        x.personmailingcity,
        x.personmailingstate,
        x.personmailingpostalcode,
        x.personmailingcountry,
        x.personmailinglatitude,
        x.personmailinglongitude,
        x.personotherstreet,
        x.personothercity,
        x.personotherstate,
        x.personotherpostalcode,
        x.personothercountry,
        x.personotherlatitude,
        x.personotherlongitude,
        x.personmobilephone,
        x.personhomephone,
        x.personotherphone,
        x.personassistantphone,
        x.personemail,
        x.persontitle,
        x.persondepartment,
        x.personassistantname,
        x.personbirthdate,
        x.personhasoptedoutofemail,
        x.personhasoptedoutoffax,
        x.persondonotcall,
        x.personlastcurequestdate,
        x.personlastcuupdatedate,
        x.personemailbouncedreason,
        x.personemailbounceddate,
        x.jigsaw,
        x.jigsawcompanyid,
        x.accountsource,
        x.sicdesc,
        x.external_id_vod__c,
        x.credentials_vod__c,
        x.exclude_from_zip_to_terr_proce,
        x.group_specialty_1_vod__c,
        x.group_specialty_2_vod__c,
        x.specialty_1_vod__c,
        x.specialty_2_vod__c,
        x.formatted_name_vod__c,
        x.territory_test_vod__c,
        x.mobile_id_vod__c,
        x.gender_vod__c,
        x.id_vod__c,
        x.do_not_sync_sales_data_vod__c,
        x.id2_vod__c,
        x.preferred_name_vod__c,
        x.sample_default_vod__c,
        x.segmentations_vod__c,
        x.restricted_products_vod__c,
        x.payer_id_vod__c,
        x.account_status_tva__c,
        x.do_not_call_vod__c,
        x.beds__c,
        x.spend_amount__c,
        x.pdrp_opt_out_vod__c,
        x.spend_status_value_vod__c,
        x.pdrp_opt_out_date_vod__c,
        x.spend_status_vod__c,
        x.enable_restricted_products,
        x.call_reminder_vod__c,
        x.account_group_vod__c,
        x.primary_parent_vod__c,
        x.color_vod__c,
        x.middle_vod__c,
        x.suffix_vod__c,
        x.account_location_tva__c,
        x.no_orders_vod__c,
        x.account_master_id_tva__c,
        x.account_email_tva__c,
        x.account_search_firstlast,
        x.account_search_lastfirst,
        x.person_preferred_name_tva__c,
        x.practice_at_hospital_vod__c,
        x.practice_near_hospital_vod__c,
        x.do_not_create_child_account,
        x.total_mds_dos__c,
        x.aha__c,
        x.order_type_vod__c,
        x.npi_vod__c,
        x.me__c,
        x.speaker__c,
        x.investigator_vod__c,
        x.default_order_type_vod__c,
        x.person_degree_tva__c,
        x.tax_status__c,
        x.model__c,
        x.offerings__c,
        x.departments__c,
        x.account_type__c,
        x.account_search_business_vod__c,
        x.business_professional_person,
        x.no_spend_tva__c,
        x.hospital_type_vod__c,
        x.account_class_vod__c,
        x.furigana_vod__c,
        x.tirf_rems_tva__c,
        x.fentora_app_tva__c,
        x.total_revenue_000__c,
        x.net_income_loss_000__c,
        x.pmpm_income_loss_000__c,
        x.commercial_premiums_pmpm__c,
        x.medical_loss_ratio__c,
        x.medical_expenses_pmpm__c,
        x.commercial_patient_days_1000,
        x.hmo_market_shr__c,
        x.hmo__c,
        x.hmo_pos__c,
        x.ppo__c,
        x.ppo_pos__c,
        x.medicare__c,
        x.medicaid__c,
        x.nuvigil_app_tva__c,
        x.mds_status_tva__c,
        x.lis_status_tva__c,
        x.dnc_pcs_tva__c,
        x.dnc_cns_tva__c,
        x.suffix_tva__c,
        x.tysabri_status_tva__c,
        x.business_description__c,
        x.regional_strategy__c,
        x.contracts_process__c,
        x.cml_profiled_tva__c,
        x.cell_phone_tva__c,
        x.no_contact_tva__c,
        x.outlet_id_tva__c,
        x.pmo_gpo_account_affiliations,
        x.territory_status_tva__c,
        x.zdea_number_tva__c,
        x.veeva_id_tva__c,
        x.treanda_lq_tgt_tva__c,
        x.tbo_filgrastim_target_tva__c,
        x.sln_rescrub_tva__c,
        x.account_identifier_vod__c,
        x.target__c,
        x.kol_vod__c,
        x.rems_expiration_date_teva__c,
        x.account_demo_id_tva__c,
        x.total_lives__c,
        x.total_physicians_enrolled__c,
        x.tirf_rems_eff_date_tva__c,
        x.business_associate_agreement,
        x.do_not_promote_tva__c,
        x.account_dea_tva__c,
        x.bp_number__c,
        x.paragard_segmentation_tva__c,
        x.telesales_activity_tva__c,
        x.designation_tva__c,
        x.total_pharmacists__c,
        x.comp_pricing_tva__c,
        x.formulary_tva__c,
        x.gln_tva__c,
        x.gpo_contracts_tva__c,
        x.hin_tva__c,
        x.max_id_tva__c,
        x.oncology_services_tva__c,
        x.pcp_program_tva__c,
        x.pharmacy_location_tva__c,
        x.primary_credential_tva__c,
        x.primary_wholesaler_tva__c,
        x.rep_credentialing_tva__c,
        x.secondary_credential_tva__c,
        x.sign_in_location_tva__c,
        x.special_tva__c,
        x.sub_type_id_tva__c,
        x.sub_type_tva__c,
        x.teva_contracts_tva__c,
        x.ims_org_id_tva__c,
        x.year_of_birth_tva__c,
        x.teaching_hospital_tva__c,
        x.account_archived_tva__c,
        x.mobile_id_vod__pc,
        x.file_id,
        x.record_id,
        x.cm_id_tva__c,
        x.staff_email,
        x.company_managed_email,
        x.alternate_email
 FROM (veeva.account x JOIN ( SELECT account.id,
        max(account.file_id) AS file_id
 FROM veeva.account
 GROUP BY account.id) x2 ON (((x.id = x2.id) AND (x.file_id = x2.file_id))));

CREATE  VIEW sandbox.v_account AS
 SELECT x.id,
        x.isdeleted,
        x.masterrecordid,
        x.name,
        x.lastname,
        x.firstname,
        x.salutation,
        x.type,
        x.recordtypeid,
        x.phone,
        x.fax,
        x.website,
        x.numberofemployees,
        x.ownership,
        x.ownerid,
        x.createddate,
        x.createdbyid,
        x.lastmodifieddate,
        x.lastmodifiedbyid,
        x.systemmodstamp,
        x.lastactivitydate,
        x.mayedit,
        x.islocked,
        x.lastvieweddate,
        x.lastreferenceddate,
        x.isexcludedfromrealign,
        x.personcontactid,
        x.ispersonaccount,
        x.personmailingstreet,
        x.personmailingcity,
        x.personmailingstate,
        x.personmailingpostalcode,
        x.personmailingcountry,
        x.personmailinglatitude,
        x.personmailinglongitude,
        x.personotherstreet,
        x.personothercity,
        x.personotherstate,
        x.personotherpostalcode,
        x.personothercountry,
        x.personotherlatitude,
        x.personotherlongitude,
        x.personmobilephone,
        x.personhomephone,
        x.personotherphone,
        x.personassistantphone,
        x.personemail,
        x.persontitle,
        x.persondepartment,
        x.personassistantname,
        x.personbirthdate,
        x.personhasoptedoutofemail,
        x.personhasoptedoutoffax,
        x.persondonotcall,
        x.personlastcurequestdate,
        x.personlastcuupdatedate,
        x.personemailbouncedreason,
        x.personemailbounceddate,
        x.jigsaw,
        x.jigsawcompanyid,
        x.accountsource,
        x.sicdesc,
        x.external_id_vod__c,
        x.credentials_vod__c,
        x.exclude_from_zip_to_terr_proce,
        x.group_specialty_1_vod__c,
        x.group_specialty_2_vod__c,
        x.specialty_1_vod__c,
        x.specialty_2_vod__c,
        x.formatted_name_vod__c,
        x.territory_test_vod__c,
        x.mobile_id_vod__c,
        x.gender_vod__c,
        x.id_vod__c,
        x.do_not_sync_sales_data_vod__c,
        x.id2_vod__c,
        x.preferred_name_vod__c,
        x.sample_default_vod__c,
        x.segmentations_vod__c,
        x.restricted_products_vod__c,
        x.payer_id_vod__c,
        x.account_status_tva__c,
        x.do_not_call_vod__c,
        x.beds__c,
        x.spend_amount__c,
        x.pdrp_opt_out_vod__c,
        x.spend_status_value_vod__c,
        x.pdrp_opt_out_date_vod__c,
        x.spend_status_vod__c,
        x.enable_restricted_products,
        x.call_reminder_vod__c,
        x.account_group_vod__c,
        x.primary_parent_vod__c,
        x.color_vod__c,
        x.middle_vod__c,
        x.suffix_vod__c,
        x.account_location_tva__c,
        x.no_orders_vod__c,
        x.account_master_id_tva__c,
        x.account_email_tva__c,
        x.account_search_firstlast,
        x.account_search_lastfirst,
        x.person_preferred_name_tva__c,
        x.practice_at_hospital_vod__c,
        x.practice_near_hospital_vod__c,
        x.do_not_create_child_account,
        x.total_mds_dos__c,
        x.aha__c,
        x.order_type_vod__c,
        x.npi_vod__c,
        x.me__c,
        x.speaker__c,
        x.investigator_vod__c,
        x.default_order_type_vod__c,
        x.person_degree_tva__c,
        x.tax_status__c,
        x.model__c,
        x.offerings__c,
        x.departments__c,
        x.account_type__c,
        x.account_search_business_vod__c,
        x.business_professional_person,
        x.no_spend_tva__c,
        x.hospital_type_vod__c,
        x.account_class_vod__c,
        x.furigana_vod__c,
        x.tirf_rems_tva__c,
        x.fentora_app_tva__c,
        x.total_revenue_000__c,
        x.net_income_loss_000__c,
        x.pmpm_income_loss_000__c,
        x.commercial_premiums_pmpm__c,
        x.medical_loss_ratio__c,
        x.medical_expenses_pmpm__c,
        x.commercial_patient_days_1000,
        x.hmo_market_shr__c,
        x.hmo__c,
        x.hmo_pos__c,
        x.ppo__c,
        x.ppo_pos__c,
        x.medicare__c,
        x.medicaid__c,
        x.nuvigil_app_tva__c,
        x.mds_status_tva__c,
        x.lis_status_tva__c,
        x.dnc_pcs_tva__c,
        x.dnc_cns_tva__c,
        x.suffix_tva__c,
        x.tysabri_status_tva__c,
        x.business_description__c,
        x.regional_strategy__c,
        x.contracts_process__c,
        x.cml_profiled_tva__c,
        x.cell_phone_tva__c,
        x.no_contact_tva__c,
        x.outlet_id_tva__c,
        x.pmo_gpo_account_affiliations,
        x.territory_status_tva__c,
        x.zdea_number_tva__c,
        x.veeva_id_tva__c,
        x.treanda_lq_tgt_tva__c,
        x.tbo_filgrastim_target_tva__c,
        x.sln_rescrub_tva__c,
        x.account_identifier_vod__c,
        x.target__c,
        x.kol_vod__c,
        x.rems_expiration_date_teva__c,
        x.account_demo_id_tva__c,
        x.total_lives__c,
        x.total_physicians_enrolled__c,
        x.tirf_rems_eff_date_tva__c,
        x.business_associate_agreement,
        x.do_not_promote_tva__c,
        x.account_dea_tva__c,
        x.bp_number__c,
        x.paragard_segmentation_tva__c,
        x.telesales_activity_tva__c,
        x.designation_tva__c,
        x.total_pharmacists__c,
        x.comp_pricing_tva__c,
        x.formulary_tva__c,
        x.gln_tva__c,
        x.gpo_contracts_tva__c,
        x.hin_tva__c,
        x.max_id_tva__c,
        x.oncology_services_tva__c,
        x.pcp_program_tva__c,
        x.pharmacy_location_tva__c,
        x.primary_credential_tva__c,
        x.primary_wholesaler_tva__c,
        x.rep_credentialing_tva__c,
        x.secondary_credential_tva__c,
        x.sign_in_location_tva__c,
        x.special_tva__c,
        x.sub_type_id_tva__c,
        x.sub_type_tva__c,
        x.teva_contracts_tva__c,
        x.ims_org_id_tva__c,
        x.year_of_birth_tva__c,
        x.teaching_hospital_tva__c,
        x.account_archived_tva__c,
        x.mobile_id_vod__pc,
        x.file_id,
        x.record_id,
        x.cm_id_tva__c,
        x.staff_email,
        x.company_managed_email,
        x.alternate_email
 FROM (veeva.account x JOIN ( SELECT account.id,
        max(account.file_id) AS file_id
 FROM veeva.account
 GROUP BY account.id) x2 ON (((x.id = x2.id) AND (x.file_id = x2.file_id))));

CREATE  VIEW sandbox.v_call AS
 SELECT x.id,
        x.ownerid,
        x.isdeleted,
        x.name,
        x.recordtypeid,
        x.createddate,
        x.createdbyid,
        x.lastmodifieddate,
        x.lastmodifiedbyid,
        x.systemmodstamp,
        x.lastactivitydate,
        x.mayedit,
        x.islocked,
        x.lastvieweddate,
        x.lastreferenceddate,
        x.sample_card_vod__c,
        x.add_detail_vod__c,
        x.property_vod__c,
        x.account_vod__c,
        x.zvod_product_discussion_vod__c,
        x.status_vod__c,
        x.parent_address_vod__c,
        x.account_plan_vod__c,
        x.zvod_savenew_vod__c,
        x.next_call_notes_vod__c,
        x.mobile_id_vod__c,
        x.zvod_account_credentials_vod_c,
        x.zvod_account_preferred_name_vo,
        x.zvod_account_sample_status_vod,
        x.zvod_attendees_vod__c,
        x.zvod_key_messages_vod__c,
        x.zvod_detailing_vod__c,
        x.zvod_expenses_vod__c,
        x.zvod_followup_vod__c,
        x.zvod_samples_vod__c,
        x.zvod_save_vod__c,
        x.zvod_submit_vod__c,
        x.zvod_delete_vod__c,
        x.activity_type__c,
        x.significant_event__c,
        x.location_vod__c,
        x.subject_vod__c,
        x.call_datetime_vod__c,
        x.disbursed_to_vod__c,
        x.request_receipt_vod__c,
        x.signature_date_vod__c,
        x.territory_vod__c,
        x.submitted_by_mobile_vod__c,
        x.call_type_vod__c,
        x.add_key_message_vod__c,
        x.address_vod__c,
        x.attendees_vod__c,
        x.attendee_type_vod__c,
        x.call_date_vod__c,
        x.detailed_products_vod__c,
        x.no_disbursement_vod__c,
        x.parent_call_vod__c,
        x.user_vod__c,
        x.contact_vod__c,
        x.zvod_entity_vod__c,
        x.medical_event_vod__c,
        x.mobile_created_datetime_vod__c,
        x.mobile_last_modified_datetime,
        x.license_vod__c,
        x.is_parent_call_vod__c,
        x.entity_display_name_vod__c,
        x.last_device_vod__c,
        x.ship_address_line_1_vod__c,
        x.ship_address_line_2_vod__c,
        x.ship_city_vod__c,
        x.ship_country_vod__c,
        x.ship_license_expiration_date,
        x.ship_license_status_vod__c,
        x.ship_license_vod__c,
        x.ship_state_vod__c,
        x.ship_to_address_vod__c,
        x.ship_zip_vod__c,
        x.ship_to_address_text_vod__c,
        x.clm_vod__c,
        x.zvod_clmdetails_vod__c,
        x.is_sampled_call_vod__c,
        x.zvod_surveys_vod__c,
        x.presentations_vod__c,
        x.entity_reference_id_vod__c,
        x.error_reference_call_vod__c,
        x.duration_vod__c,
        x.color_vod__c,
        x.allowed_products_vod__c,
        x.zvod_attachments_vod__c,
        x.sample_card_reason_vod__c,
        x.assmca_vod__c,
        x.address_line_1_vod__c,
        x.address_line_2_vod__c,
        x.city_vod__c,
        x.dea_address_line_1_vod__c,
        x.dea_address_line_2_vod__c,
        x.dea_address_vod__c,
        x.dea_city_vod__c,
        x.dea_expiration_date_vod__c,
        x.dea_state_vod__c,
        x.dea_zip_4_vod__c,
        x.dea_zip_vod__c,
        x.dea_vod__c,
        x.ship_zip_4_vod__c,
        x.state_vod__c,
        x.zip_4_vod__c,
        x.zip_vod__c,
        x.sample_send_card_vod__c,
        x.zvod_address_vod_c_dea_status_,
        x.signature_page_image_vod__c,
        x.credentials_vod__c,
        x.salutation_vod__c,
        x.zvod_account_call_reminder_vod,
        x.sales_org_tva__c,
        x.zvod_business_account_vod__c,
        x.product_priority_1_vod__c,
        x.product_priority_2_vod__c,
        x.product_priority_3_vod__c,
        x.product_priority_4_vod__c,
        x.product_priority_5_vod__c,
        x.zvod_more_actions_vod__c,
        x.zvod_call_conflict_status,
        x.signature_timestamp_vod__c,
        x.expense_amount_vod__c,
        x.total_expense_attendees_count,
        x.attendee_list_vod__c,
        x.expense_post_status_vod__c,
        x.attendee_post_status_vod__c,
        x.expense_system_external_id,
        x.incurred_expense_vod__c,
        x.assigner_vod__c,
        x.assignment_datetime_vod__c,
        x.zvod_call_objective_vod__c,
        x.signature_location_longitude,
        x.signature_location_latitude,
        x.location_services_status,
        x.created_by_timezone_tva__c,
        x.license_expiration_date_vod__c,
        x.license_status_vod__c,
        x.ship_assmca_vod__c,
        x.ship_dea_expiration_date,
        x.ship_dea_vod__c,
        x.call_method_tva__c,
        x.bendeka_indication_tva__c,
        x.file_id,
        x.record_id,
        x.austedo_indication_tva__c,
        x.call_duration_tva__c,
        x.how_executed_tva__c,
        x.Remote_Meeting_vod__c,
        x.Veeva_Remote_Meeting_Id_vod__c,
        x.Cobrowse_URL_Participant_vod__c,
        x.Signature_Captured_Remotely_vod__c,
        x.Remote_Signature_Attendee_Name_vod__c
 FROM (veeva.call x JOIN ( SELECT call.id,
        max(call.file_id) AS file_id
 FROM veeva.call
 WHERE (call.createddate >= add_months((statement_timestamp())::timestamp, (-25)))
 GROUP BY call.id) x2 ON (((x.id = x2.id) AND (x.file_id = x2.file_id))));

CREATE  VIEW sandbox.v_call_detail AS
 SELECT x.id,
        x.isdeleted,
        x.name,
        x.createddate,
        x.createdbyid,
        x.lastmodifieddate,
        x.lastmodifiedbyid,
        x.systemmodstamp,
        x.mayedit,
        x.islocked,
        x.is_parent_call_vod__c,
        x.call2_vod__c,
        x.product_vod__c,
        x.detail_priority_vod__c,
        x.mobile_id_vod__c,
        x.type_vod__c,
        x.file_id,
        x.record_id
 FROM (veeva.call_detail x JOIN ( SELECT call_detail.id,
        max(call_detail.file_id) AS file_id
 FROM veeva.call_detail
 WHERE (call_detail.createddate >= add_months((statement_timestamp())::timestamp, (-25)))
 GROUP BY call_detail.id) x2 ON (((x.id = x2.id) AND (x.file_id = x2.file_id))));

CREATE  VIEW sandbox.ics_mop AS
 SELECT rx_vertical.ims_id,
        rx_vertical.hcp_id,
        rx_vertical.plan_code,
        rx_vertical.plan_name,
        rx_vertical.model,
        rx_vertical.basket_name,
        sum(CASE WHEN (rx_vertical.month_bucket = 24) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth24,
        sum(CASE WHEN (rx_vertical.month_bucket = 23) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth23,
        sum(CASE WHEN (rx_vertical.month_bucket = 22) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth22,
        sum(CASE WHEN (rx_vertical.month_bucket = 21) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth21,
        sum(CASE WHEN (rx_vertical.month_bucket = 20) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth20,
        sum(CASE WHEN (rx_vertical.month_bucket = 19) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth19,
        sum(CASE WHEN (rx_vertical.month_bucket = 18) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth18,
        sum(CASE WHEN (rx_vertical.month_bucket = 17) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth17,
        sum(CASE WHEN (rx_vertical.month_bucket = 16) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth16,
        sum(CASE WHEN (rx_vertical.month_bucket = 15) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth15,
        sum(CASE WHEN (rx_vertical.month_bucket = 14) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth14,
        sum(CASE WHEN (rx_vertical.month_bucket = 13) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth13,
        sum(CASE WHEN (rx_vertical.month_bucket = 12) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth12,
        sum(CASE WHEN (rx_vertical.month_bucket = 11) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth11,
        sum(CASE WHEN (rx_vertical.month_bucket = 10) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth10,
        sum(CASE WHEN (rx_vertical.month_bucket = 9) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth9,
        sum(CASE WHEN (rx_vertical.month_bucket = 8) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth8,
        sum(CASE WHEN (rx_vertical.month_bucket = 7) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth7,
        sum(CASE WHEN (rx_vertical.month_bucket = 6) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth6,
        sum(CASE WHEN (rx_vertical.month_bucket = 5) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth5,
        sum(CASE WHEN (rx_vertical.month_bucket = 4) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth4,
        sum(CASE WHEN (rx_vertical.month_bucket = 3) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth3,
        sum(CASE WHEN (rx_vertical.month_bucket = 2) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth2,
        sum(CASE WHEN (rx_vertical.month_bucket = 1) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth1
 FROM ( SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(xref.veeva_account_id, rx.ims_id) END AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.model,
        rx.basket_name,
        w.month_bucket,
        rx.trx_count
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) w ON ((rx.rollup_month = w.month_ending))) LEFT  JOIN ( SELECT a.tvcmid,
        a.veeva_account_id
 FROM ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.id_num) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE (xref.id_type = 'VEEVA_ID'::varchar(8))) a
 WHERE (a.rnk = 1)) xref ON ((xref.tvcmid = rx.tvcmid)))
 WHERE ((rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (w.month_bucket >= 1) AND (w.month_bucket <= 24))) rx_vertical
 GROUP BY rx_vertical.ims_id,
          rx_vertical.hcp_id,
          rx_vertical.plan_code,
          rx_vertical.plan_name,
          rx_vertical.model,
          rx_vertical.basket_name;

CREATE  VIEW sandbox.call AS
 SELECT a.id,
        a.ownerid,
        a.isdeleted,
        a.name,
        a.recordtypeid,
        a.createddate,
        a.createdbyid,
        a.lastmodifieddate,
        a.lastmodifiedbyid,
        a.systemmodstamp,
        a.lastactivitydate,
        a.mayedit,
        a.islocked,
        a.lastvieweddate,
        a.lastreferenceddate,
        a.sample_card_vod__c,
        a.add_detail_vod__c,
        a.property_vod__c,
        a.account_vod__c,
        a.zvod_product_discussion_vod__c,
        a.status_vod__c,
        a.parent_address_vod__c,
        a.account_plan_vod__c,
        a.zvod_savenew_vod__c,
        a.next_call_notes_vod__c,
        a.mobile_id_vod__c,
        a.zvod_account_credentials_vod_c,
        a.zvod_account_preferred_name_vo,
        a.zvod_account_sample_status_vod,
        a.zvod_attendees_vod__c,
        a.zvod_key_messages_vod__c,
        a.zvod_detailing_vod__c,
        a.zvod_expenses_vod__c,
        a.zvod_followup_vod__c,
        a.zvod_samples_vod__c,
        a.zvod_save_vod__c,
        a.zvod_submit_vod__c,
        a.zvod_delete_vod__c,
        a.activity_type__c,
        a.significant_event__c,
        a.location_vod__c,
        a.subject_vod__c,
        a.call_datetime_vod__c,
        a.disbursed_to_vod__c,
        a.request_receipt_vod__c,
        a.signature_date_vod__c,
        a.territory_vod__c,
        a.submitted_by_mobile_vod__c,
        a.call_type_vod__c,
        a.add_key_message_vod__c,
        a.address_vod__c,
        a.attendees_vod__c,
        a.attendee_type_vod__c,
        a.call_date_vod__c,
        a.detailed_products_vod__c,
        a.no_disbursement_vod__c,
        a.parent_call_vod__c,
        a.user_vod__c,
        a.contact_vod__c,
        a.zvod_entity_vod__c,
        a.medical_event_vod__c,
        a.mobile_created_datetime_vod__c,
        a.mobile_last_modified_datetime,
        a.license_vod__c,
        a.is_parent_call_vod__c,
        a.entity_display_name_vod__c,
        a.last_device_vod__c,
        a.ship_address_line_1_vod__c,
        a.ship_address_line_2_vod__c,
        a.ship_city_vod__c,
        a.ship_country_vod__c,
        a.ship_license_expiration_date,
        a.ship_license_status_vod__c,
        a.ship_license_vod__c,
        a.ship_state_vod__c,
        a.ship_to_address_vod__c,
        a.ship_zip_vod__c,
        a.ship_to_address_text_vod__c,
        a.clm_vod__c,
        a.zvod_clmdetails_vod__c,
        a.is_sampled_call_vod__c,
        a.zvod_surveys_vod__c,
        a.presentations_vod__c,
        a.entity_reference_id_vod__c,
        a.error_reference_call_vod__c,
        a.duration_vod__c,
        a.color_vod__c,
        a.allowed_products_vod__c,
        a.zvod_attachments_vod__c,
        a.sample_card_reason_vod__c,
        a.assmca_vod__c,
        a.address_line_1_vod__c,
        a.address_line_2_vod__c,
        a.city_vod__c,
        a.dea_address_line_1_vod__c,
        a.dea_address_line_2_vod__c,
        a.dea_address_vod__c,
        a.dea_city_vod__c,
        a.dea_expiration_date_vod__c,
        a.dea_state_vod__c,
        a.dea_zip_4_vod__c,
        a.dea_zip_vod__c,
        a.dea_vod__c,
        a.ship_zip_4_vod__c,
        a.state_vod__c,
        a.zip_4_vod__c,
        a.zip_vod__c,
        a.sample_send_card_vod__c,
        a.zvod_address_vod_c_dea_status_,
        a.signature_page_image_vod__c,
        a.credentials_vod__c,
        a.salutation_vod__c,
        a.zvod_account_call_reminder_vod,
        a.sales_org_tva__c,
        a.zvod_business_account_vod__c,
        a.product_priority_1_vod__c,
        a.product_priority_2_vod__c,
        a.product_priority_3_vod__c,
        a.product_priority_4_vod__c,
        a.product_priority_5_vod__c,
        a.zvod_more_actions_vod__c,
        a.zvod_call_conflict_status,
        a.signature_timestamp_vod__c,
        a.expense_amount_vod__c,
        a.total_expense_attendees_count,
        a.attendee_list_vod__c,
        a.expense_post_status_vod__c,
        a.attendee_post_status_vod__c,
        a.expense_system_external_id,
        a.incurred_expense_vod__c,
        a.assigner_vod__c,
        a.assignment_datetime_vod__c,
        a.zvod_call_objective_vod__c,
        a.signature_location_longitude,
        a.signature_location_latitude,
        a.location_services_status,
        a.created_by_timezone_tva__c,
        a.license_expiration_date_vod__c,
        a.license_status_vod__c,
        a.ship_assmca_vod__c,
        a.ship_dea_expiration_date,
        a.ship_dea_vod__c,
        a.call_method_tva__c,
        a.bendeka_indication_tva__c,
        a.file_id,
        a.record_id,
        a.austedo_indication_tva__c,
        a.call_duration_tva__c,
        a.how_executed_tva__c,
        a.Remote_Meeting_vod__c,
        a.Veeva_Remote_Meeting_Id_vod__c,
        a.Cobrowse_URL_Participant_vod__c,
        a.Signature_Captured_Remotely_vod__c,
        a.Remote_Signature_Attendee_Name_vod__c,
        a.rowrank
 FROM ( SELECT c.id,
        c.ownerid,
        c.isdeleted,
        c.name,
        c.recordtypeid,
        c.createddate,
        c.createdbyid,
        c.lastmodifieddate,
        c.lastmodifiedbyid,
        c.systemmodstamp,
        c.lastactivitydate,
        c.mayedit,
        c.islocked,
        c.lastvieweddate,
        c.lastreferenceddate,
        c.sample_card_vod__c,
        c.add_detail_vod__c,
        c.property_vod__c,
        c.account_vod__c,
        c.zvod_product_discussion_vod__c,
        c.status_vod__c,
        c.parent_address_vod__c,
        c.account_plan_vod__c,
        c.zvod_savenew_vod__c,
        c.next_call_notes_vod__c,
        c.mobile_id_vod__c,
        c.zvod_account_credentials_vod_c,
        c.zvod_account_preferred_name_vo,
        c.zvod_account_sample_status_vod,
        c.zvod_attendees_vod__c,
        c.zvod_key_messages_vod__c,
        c.zvod_detailing_vod__c,
        c.zvod_expenses_vod__c,
        c.zvod_followup_vod__c,
        c.zvod_samples_vod__c,
        c.zvod_save_vod__c,
        c.zvod_submit_vod__c,
        c.zvod_delete_vod__c,
        c.activity_type__c,
        c.significant_event__c,
        c.location_vod__c,
        c.subject_vod__c,
        c.call_datetime_vod__c,
        c.disbursed_to_vod__c,
        c.request_receipt_vod__c,
        c.signature_date_vod__c,
        c.territory_vod__c,
        c.submitted_by_mobile_vod__c,
        c.call_type_vod__c,
        c.add_key_message_vod__c,
        c.address_vod__c,
        c.attendees_vod__c,
        c.attendee_type_vod__c,
        c.call_date_vod__c,
        c.detailed_products_vod__c,
        c.no_disbursement_vod__c,
        c.parent_call_vod__c,
        c.user_vod__c,
        c.contact_vod__c,
        c.zvod_entity_vod__c,
        c.medical_event_vod__c,
        c.mobile_created_datetime_vod__c,
        c.mobile_last_modified_datetime,
        c.license_vod__c,
        c.is_parent_call_vod__c,
        c.entity_display_name_vod__c,
        c.last_device_vod__c,
        c.ship_address_line_1_vod__c,
        c.ship_address_line_2_vod__c,
        c.ship_city_vod__c,
        c.ship_country_vod__c,
        c.ship_license_expiration_date,
        c.ship_license_status_vod__c,
        c.ship_license_vod__c,
        c.ship_state_vod__c,
        c.ship_to_address_vod__c,
        c.ship_zip_vod__c,
        c.ship_to_address_text_vod__c,
        c.clm_vod__c,
        c.zvod_clmdetails_vod__c,
        c.is_sampled_call_vod__c,
        c.zvod_surveys_vod__c,
        c.presentations_vod__c,
        c.entity_reference_id_vod__c,
        c.error_reference_call_vod__c,
        c.duration_vod__c,
        c.color_vod__c,
        c.allowed_products_vod__c,
        c.zvod_attachments_vod__c,
        c.sample_card_reason_vod__c,
        c.assmca_vod__c,
        c.address_line_1_vod__c,
        c.address_line_2_vod__c,
        c.city_vod__c,
        c.dea_address_line_1_vod__c,
        c.dea_address_line_2_vod__c,
        c.dea_address_vod__c,
        c.dea_city_vod__c,
        c.dea_expiration_date_vod__c,
        c.dea_state_vod__c,
        c.dea_zip_4_vod__c,
        c.dea_zip_vod__c,
        c.dea_vod__c,
        c.ship_zip_4_vod__c,
        c.state_vod__c,
        c.zip_4_vod__c,
        c.zip_vod__c,
        c.sample_send_card_vod__c,
        c.zvod_address_vod_c_dea_status_,
        c.signature_page_image_vod__c,
        c.credentials_vod__c,
        c.salutation_vod__c,
        c.zvod_account_call_reminder_vod,
        c.sales_org_tva__c,
        c.zvod_business_account_vod__c,
        c.product_priority_1_vod__c,
        c.product_priority_2_vod__c,
        c.product_priority_3_vod__c,
        c.product_priority_4_vod__c,
        c.product_priority_5_vod__c,
        c.zvod_more_actions_vod__c,
        c.zvod_call_conflict_status,
        c.signature_timestamp_vod__c,
        c.expense_amount_vod__c,
        c.total_expense_attendees_count,
        c.attendee_list_vod__c,
        c.expense_post_status_vod__c,
        c.attendee_post_status_vod__c,
        c.expense_system_external_id,
        c.incurred_expense_vod__c,
        c.assigner_vod__c,
        c.assignment_datetime_vod__c,
        c.zvod_call_objective_vod__c,
        c.signature_location_longitude,
        c.signature_location_latitude,
        c.location_services_status,
        c.created_by_timezone_tva__c,
        c.license_expiration_date_vod__c,
        c.license_status_vod__c,
        c.ship_assmca_vod__c,
        c.ship_dea_expiration_date,
        c.ship_dea_vod__c,
        c.call_method_tva__c,
        c.bendeka_indication_tva__c,
        c.file_id,
        c.record_id,
        c.austedo_indication_tva__c,
        c.call_duration_tva__c,
        c.how_executed_tva__c,
        c.Remote_Meeting_vod__c,
        c.Veeva_Remote_Meeting_Id_vod__c,
        c.Cobrowse_URL_Participant_vod__c,
        c.Signature_Captured_Remotely_vod__c,
        c.Remote_Signature_Attendee_Name_vod__c,
        rank() OVER (PARTITION BY c.id ORDER BY c.file_id DESC) AS rowrank
 FROM veeva.call c
 WHERE (c.call_date_vod__c >= add_months((statement_timestamp())::timestamp, (-24)))) a
 WHERE (a.rowrank = 1);

CREATE  VIEW sandbox.vw_prev_month_ftf_formularies AS
 SELECT btrim(ftf_formularies.health_plan_id) AS health_plan_id,
        btrim(ftf_formularies.drug_id) AS drug_id,
        btrim(ftf_formularies.tier_code) AS tier_code,
        btrim(ftf_formularies.restrictions) AS restrictions,
        btrim(ftf_formularies.reason_code) AS reason_code,
        btrim(ftf_formularies.reason_code_description) AS btrim,
        ftf_formularies.file_id,
        ftf_formularies.record_id
 FROM cleansed.ftf_formularies
 WHERE (ftf_formularies.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ftf_formularies.file_id
 FROM cleansed.ftf_formularies
 GROUP BY ftf_formularies.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ftf_health_plans AS
 SELECT btrim(ftf_health_plans.formularyf_id) AS formularyf_id,
        btrim(ftf_health_plans.provider_id) AS provider_id,
        btrim(ftf_health_plans.provider) AS provider,
        btrim(ftf_health_plans.health_plan_id) AS health_plan_id,
        btrim(ftf_health_plans.health_plan) AS health_plan,
        btrim(ftf_health_plans.parent_id) AS parent_id,
        btrim(ftf_health_plans.parent) AS parent,
        ftf_health_plans.national_lives_count,
        btrim(ftf_health_plans.plan_type_name) AS plan_type_name,
        ftf_health_plans.preferred_brand_tier,
        ftf_health_plans.file_id,
        ftf_health_plans.record_id
 FROM cleansed.ftf_health_plans
 WHERE (ftf_health_plans.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ftf_health_plans.file_id
 FROM cleansed.ftf_health_plans
 GROUP BY ftf_health_plans.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ftf_health_plan_geography AS
 SELECT btrim(ftf_health_plan_geography.health_plan_id) AS health_plan_id,
        btrim(ftf_health_plan_geography.operating_state) AS operating_state,
        ftf_health_plan_geography.lives_coverage,
        ftf_health_plan_geography.file_id,
        ftf_health_plan_geography.record_id
 FROM cleansed.ftf_health_plan_geography
 WHERE (ftf_health_plan_geography.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ftf_health_plan_geography.file_id
 FROM cleansed.ftf_health_plan_geography
 GROUP BY ftf_health_plan_geography.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ftf_pbms AS
 SELECT btrim(ftf_pbms.health_plan_id) AS health_plan_id,
        btrim(ftf_pbms.pbm_id) AS pbm_id,
        btrim(ftf_pbms.pbm) AS pbm,
        btrim(ftf_pbms.pbm_function_id) AS pbm_function_id,
        btrim(ftf_pbms.pbm_function) AS pbm_function,
        ftf_pbms.file_id,
        ftf_pbms.record_id
 FROM cleansed.ftf_pbms
 WHERE (ftf_pbms.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ftf_pbms.file_id
 FROM cleansed.ftf_pbms
 GROUP BY ftf_pbms.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ftf_restrictions AS
 SELECT btrim(ftf_restrictions_v2.health_plan_id) AS health_plan_id,
        btrim(ftf_restrictions_v2.drug_id) AS drug_id,
        btrim(ftf_restrictions_v2.restriction_code) AS restriction_code,
        ftf_restrictions_v2.restriction_detail_id,
        btrim(ftf_restrictions_v2.restriction_detail_text) AS restriction_detail_text,
        btrim(ftf_restrictions_v2.restriction_addtnl_information_1) AS restriction_addtnl_information_1,
        btrim(ftf_restrictions_v2.restriction_addtnl_information_2) AS restriction_addtnl_information_2,
        btrim(ftf_restrictions_v2.step_count) AS step_count,
        btrim(ftf_restrictions_v2.pa_form) AS pa_form,
        btrim(ftf_restrictions_v2.indication) AS indication,
        btrim(ftf_restrictions_v2.grouped_restriction_level) AS grouped_restriction_level,
        ftf_restrictions_v2.record_id,
        ftf_restrictions_v2.file_id
 FROM cleansed.ftf_restrictions_v2
 WHERE (ftf_restrictions_v2.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ftf_restrictions_v2.file_id
 FROM cleansed.ftf_restrictions_v2
 GROUP BY ftf_restrictions_v2.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ims_plan_xref AS
 SELECT btrim(ims_plan_xref.payer_num) AS payer_num,
        btrim(ims_plan_xref.payer_name) AS payer_name,
        btrim(ims_plan_xref.plan_num) AS plan_num,
        btrim(ims_plan_xref.payer_plan_num) AS payer_plan_num,
        btrim(ims_plan_xref.plan_name) AS plan_name,
        btrim(ims_plan_xref.model) AS model,
        btrim(ims_plan_xref.city) AS city,
        btrim(ims_plan_xref.hq_state) AS hq_state,
        btrim(ims_plan_xref.operating_state) AS operating_state,
        ims_plan_xref.months_with_data,
        ims_plan_xref.file_id,
        ims_plan_xref.record_id
 FROM cleansed.ims_plan_xref
 WHERE (ims_plan_xref.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ims_plan_xref.file_id
 FROM cleansed.ims_plan_xref
 GROUP BY ims_plan_xref.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ims_pbm_xref AS
 SELECT btrim(ims_pbm_xref.pbm_name) AS pbm_name,
        btrim(ims_pbm_xref.payer_plan_num) AS payer_plan_num,
        btrim(ims_pbm_xref.xref_to_payer_plan_num) AS xref_to_payer_plan_num,
        btrim(ims_pbm_xref.ipd_id) AS ipd_id,
        btrim(ims_pbm_xref.ipd_type) AS ipd_type,
        btrim(ims_pbm_xref.plan_name) AS plan_name,
        ims_pbm_xref.pbm_num,
        ims_pbm_xref.ims_processor_num,
        ims_pbm_xref.file_id,
        ims_pbm_xref.record_id
 FROM cleansed.ims_pbm_xref
 WHERE (ims_pbm_xref.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ims_pbm_xref.file_id
 FROM cleansed.ims_pbm_xref
 GROUP BY ims_pbm_xref.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_prev_month_ftf_ims_bridge AS
 SELECT btrim(ftf_ims_bridge.payer_name) AS payer_name,
        btrim(ftf_ims_bridge.code) AS code,
        btrim(ftf_ims_bridge.name) AS name,
        btrim(ftf_ims_bridge.state) AS state,
        btrim(ftf_ims_bridge.comments) AS comments,
        ftf_ims_bridge.plan_id,
        btrim(ftf_ims_bridge.plan_name) AS plan_name,
        btrim(ftf_ims_bridge.provider_name) AS provider_name,
        btrim(ftf_ims_bridge.plan_type_name) AS plan_type_name,
        ftf_ims_bridge.file_id,
        ftf_ims_bridge.record_id
 FROM cleansed.ftf_ims_bridge
 WHERE (ftf_ims_bridge.file_id IN ( SELECT metadata_file.file_id
 FROM ( SELECT data_file_metadata.file_id,
        (date_part('month'::varchar(5), data_file_metadata.processed_date))::int AS month,
        rank() OVER (PARTITION BY (date_part('month'::varchar(5), data_file_metadata.processed_date))::int ORDER BY data_file_metadata.processed_date DESC) AS rn
 FROM metadata.data_file_metadata
 WHERE ((data_file_metadata.file_id IN ( SELECT ftf_ims_bridge.file_id
 FROM cleansed.ftf_ims_bridge
 GROUP BY ftf_ims_bridge.file_id)) AND ("datediff"('month'::varchar(5), data_file_metadata.processed_date, (now())::date) = 1))) metadata_file
 WHERE (metadata_file.rn = 1)));

CREATE  VIEW sandbox.vw_qc_uniq_iqvia_model_plan_count AS
 SELECT iqvia_plan_preprocessed.model,
        count(DISTINCT iqvia_plan_preprocessed.iqvia_plan_name) AS count
 FROM sandbox.iqvia_plan_preprocessed
 WHERE (iqvia_plan_preprocessed.cycle_id IN ( SELECT max(iqvia_plan_preprocessed.cycle_id) AS max
 FROM sandbox.iqvia_plan_preprocessed))
 GROUP BY iqvia_plan_preprocessed.model;

CREATE  VIEW sandbox.vw_qc_uniq_paytype_plan_count AS
 SELECT iqvia_plan_preprocessed.paytype,
        count(DISTINCT iqvia_plan_preprocessed.iqvia_plan_name) AS count
 FROM sandbox.iqvia_plan_preprocessed
 WHERE (iqvia_plan_preprocessed.cycle_id IN ( SELECT max(iqvia_plan_preprocessed.cycle_id) AS max
 FROM sandbox.iqvia_plan_preprocessed))
 GROUP BY iqvia_plan_preprocessed.paytype;

CREATE  VIEW sandbox.vw_qc_uniq_payer_plan_count AS
 SELECT iqvia_plan_preprocessed.iqvia_payer_name,
        count(DISTINCT iqvia_plan_preprocessed.iqvia_plan_name) AS count
 FROM sandbox.iqvia_plan_preprocessed
 WHERE (iqvia_plan_preprocessed.cycle_id IN ( SELECT max(iqvia_plan_preprocessed.cycle_id) AS max
 FROM sandbox.iqvia_plan_preprocessed))
 GROUP BY iqvia_plan_preprocessed.iqvia_payer_name;

CREATE  VIEW sandbox.vw_qc_uniq_pbm_plan_count AS
 SELECT iqvia_plan_preprocessed.iqvia_pbm,
        count(DISTINCT iqvia_plan_preprocessed.iqvia_plan_name) AS count
 FROM sandbox.iqvia_plan_preprocessed
 WHERE (iqvia_plan_preprocessed.cycle_id IN ( SELECT max(iqvia_plan_preprocessed.cycle_id) AS max
 FROM sandbox.iqvia_plan_preprocessed))
 GROUP BY iqvia_plan_preprocessed.iqvia_pbm;

CREATE  VIEW sandbox.vw_qc_uniq_plan_model_codes AS
 SELECT iqvia_plan_preprocessed.iqvia_payer_name,
        iqvia_plan_preprocessed.paytype,
        iqvia_plan_preprocessed.model,
        count(DISTINCT iqvia_plan_preprocessed.iqvia_plan_code) AS count
 FROM sandbox.iqvia_plan_preprocessed
 WHERE (iqvia_plan_preprocessed.cycle_id IN ( SELECT max(iqvia_plan_preprocessed.cycle_id) AS max
 FROM sandbox.iqvia_plan_preprocessed))
 GROUP BY iqvia_plan_preprocessed.iqvia_payer_name,
          iqvia_plan_preprocessed.paytype,
          iqvia_plan_preprocessed.model
 ORDER BY iqvia_plan_preprocessed.iqvia_payer_name,
          iqvia_plan_preprocessed.paytype;

CREATE  VIEW sandbox.vw_qc_uniq_paytype_model_plan_count AS
 SELECT iqvia_plan_preprocessed.paytype,
        iqvia_plan_preprocessed.model,
        count(DISTINCT iqvia_plan_preprocessed.iqvia_plan_name) AS plan_counts
 FROM sandbox.iqvia_plan_preprocessed
 WHERE (iqvia_plan_preprocessed.cycle_id IN ( SELECT max(iqvia_plan_preprocessed.cycle_id) AS max
 FROM sandbox.iqvia_plan_preprocessed))
 GROUP BY iqvia_plan_preprocessed.paytype,
          iqvia_plan_preprocessed.model;

CREATE  VIEW sandbox.vw_qc_ftf_uniq_paytype_plan_count AS
 SELECT ftf_health_plans_preprocessed.paytype,
        count(DISTINCT ftf_health_plans_preprocessed.ftf_health_plan_name) AS plan_count
 FROM sandbox.ftf_health_plans_preprocessed
 WHERE (ftf_health_plans_preprocessed.cycle_id IN ( SELECT max(ftf_health_plans_preprocessed.cycle_id) AS max
 FROM sandbox.ftf_health_plans_preprocessed))
 GROUP BY ftf_health_plans_preprocessed.paytype
 ORDER BY ftf_health_plans_preprocessed.paytype;

CREATE  VIEW sandbox.vw_qc_ftf_uniq_paytype_plantype_plan_count AS
 SELECT ftf_health_plans_preprocessed.paytype,
        ftf_health_plans_preprocessed.ftf_health_plan_type,
        count(DISTINCT ftf_health_plans_preprocessed.ftf_health_plan_name) AS plan_count
 FROM sandbox.ftf_health_plans_preprocessed
 WHERE (ftf_health_plans_preprocessed.cycle_id IN ( SELECT max(ftf_health_plans_preprocessed.cycle_id) AS max
 FROM sandbox.ftf_health_plans_preprocessed))
 GROUP BY ftf_health_plans_preprocessed.paytype,
          ftf_health_plans_preprocessed.ftf_health_plan_type
 ORDER BY ftf_health_plans_preprocessed.paytype,
          ftf_health_plans_preprocessed.ftf_health_plan_type;

CREATE  VIEW sandbox.vw_qc_ftf_uniq_restriction_group_plan_count AS
SELECT ftf_restrictions_preprocessed_v1.grouped_restriction_level, count(DISTINCT ftf_restrictions_preprocessed_v1.ftf_health_plan_fid) AS plan_count FROM sandbox.ftf_restrictions_preprocessed_v1 GROUP BY ftf_restrictions_preprocessed_v1.grouped_restriction_level ORDER BY ftf_restrictions_preprocessed_v1.grouped_restriction_level;

CREATE  VIEW sandbox.vw_qc_ftf_uniq_restriction_detail_plan_count AS
SELECT ftf_restrictions_preprocessed_v1.restriction_detail_text, count(DISTINCT ftf_restrictions_preprocessed_v1.ftf_health_plan_fid) AS plan_count FROM sandbox.ftf_restrictions_preprocessed_v1 GROUP BY ftf_restrictions_preprocessed_v1.restriction_detail_text ORDER BY ftf_restrictions_preprocessed_v1.restriction_detail_text;

CREATE  VIEW sandbox.vw_curr_month_ftf_formularies AS
 SELECT btrim(raw_ftf_formularies.health_plan_id) AS health_plan_id,
        btrim(raw_ftf_formularies.drug_id) AS drug_id,
        btrim(raw_ftf_formularies.tier_code) AS tier_code,
        btrim(raw_ftf_formularies.restrictions) AS restrictions,
        btrim(raw_ftf_formularies.reason_code) AS reason_code,
        btrim(raw_ftf_formularies.reason_code_description) AS btrim
 FROM sandbox.raw_ftf_formularies;

CREATE  VIEW sandbox.vw_curr_month_ftf_health_plans AS
 SELECT btrim(raw_ftf_health_plans.formularyf_id) AS formularyf_id,
        btrim(raw_ftf_health_plans.provider_id) AS provider_id,
        btrim(raw_ftf_health_plans.provider) AS provider,
        btrim(raw_ftf_health_plans.health_plan_id) AS health_plan_id,
        btrim(raw_ftf_health_plans.health_plan) AS health_plan,
        btrim(raw_ftf_health_plans.parent_id) AS parent_id,
        btrim(raw_ftf_health_plans.parent) AS parent,
        raw_ftf_health_plans.national_lives_count,
        btrim(raw_ftf_health_plans.plan_type_name) AS plan_type_name,
        raw_ftf_health_plans.preferred_brand_tier
 FROM sandbox.raw_ftf_health_plans;

CREATE  VIEW sandbox.vw_curr_month_ftf_pbms AS
 SELECT btrim(raw_ftf_pbms.health_plan_id) AS health_plan_id,
        btrim(raw_ftf_pbms.pbm_id) AS pbm_id,
        btrim(raw_ftf_pbms.pbm) AS pbm,
        btrim(raw_ftf_pbms.pbm_function_id) AS pbm_function_id,
        btrim(raw_ftf_pbms.pbm_function) AS pbm_function
 FROM sandbox.raw_ftf_pbms;

CREATE  VIEW sandbox.vw_curr_month_ftf_restrictions AS
 SELECT btrim(raw_ftf_restrictions.health_plan_id) AS health_plan_id,
        btrim(raw_ftf_restrictions.drug_id) AS drug_id,
        btrim(raw_ftf_restrictions.restriction_code) AS restriction_code,
        raw_ftf_restrictions.restriction_detail_id,
        btrim(raw_ftf_restrictions.restriction_detail_text) AS restriction_detail_text,
        btrim(raw_ftf_restrictions.restriction_addtnl_information_1) AS restriction_addtnl_information_1,
        btrim(raw_ftf_restrictions.restriction_addtnl_information_2) AS restriction_addtnl_information_2,
        btrim(raw_ftf_restrictions.step_count) AS step_count,
        btrim(raw_ftf_restrictions.pa_form) AS pa_form,
        btrim(raw_ftf_restrictions.indication) AS indication,
        btrim(raw_ftf_restrictions.grouped_restriction_level) AS grouped_restriction_level
 FROM sandbox.raw_ftf_restrictions;

CREATE  VIEW sandbox.vw_curr_month_ims_plan_xref AS
 SELECT btrim(raw_iqvia_plan.payer_num) AS payer_num,
        btrim(raw_iqvia_plan.payer_name) AS payer_name,
        btrim(raw_iqvia_plan.plan_num) AS plan_num,
        btrim(raw_iqvia_plan.payer_plan_num) AS payer_plan_num,
        btrim(raw_iqvia_plan.plan_name) AS plan_name,
        btrim(raw_iqvia_plan.model) AS model,
        btrim(raw_iqvia_plan.city) AS city,
        btrim(raw_iqvia_plan.hq_state) AS hq_state,
        btrim(raw_iqvia_plan.operating_state) AS operating_state,
        raw_iqvia_plan.months_with_data
 FROM sandbox.raw_iqvia_plan;

CREATE  VIEW sandbox.vw_curr_month_ims_pbm_xref AS
 SELECT btrim(raw_iqvia_pbm.pbm_name) AS pbm_name,
        btrim(raw_iqvia_pbm.payer_plan_num) AS payer_plan_num,
        btrim(raw_iqvia_pbm.xref_to_payer_plan_num) AS xref_to_payer_plan_num,
        btrim(raw_iqvia_pbm.ipd_id) AS ipd_id,
        btrim(raw_iqvia_pbm.ipd_type) AS ipd_type,
        btrim(raw_iqvia_pbm.plan_name) AS plan_name,
        raw_iqvia_pbm.pbm_num,
        raw_iqvia_pbm.ims_processor_num
 FROM sandbox.raw_iqvia_pbm;

CREATE  VIEW sandbox.vw_curr_month_ftf_ims_bridge AS
 SELECT btrim(raw_teva_ims_bridge.payer_name) AS payer_name,
        btrim(raw_teva_ims_bridge.code) AS code,
        btrim(raw_teva_ims_bridge.name) AS name,
        btrim(raw_teva_ims_bridge.state) AS state,
        btrim(raw_teva_ims_bridge.comments) AS comments,
        raw_teva_ims_bridge.plan_id,
        btrim(raw_teva_ims_bridge.plan_name) AS plan_name,
        btrim(raw_teva_ims_bridge.provider_name) AS provider_name,
        btrim(raw_teva_ims_bridge.plan_type_name) AS plan_type_name
 FROM sandbox.raw_teva_ims_bridge;

CREATE  VIEW sandbox.vw_curr_month_ftf_health_plan_geography AS
 SELECT btrim(raw_ftf_health_plan_geography.health_plan_id) AS health_plan_id,
        btrim(raw_ftf_health_plan_geography.state_name) AS operating_state,
        raw_ftf_health_plan_geography.county_lives AS lives_coverage
 FROM sandbox.raw_ftf_health_plan_geography;

CREATE  VIEW sandbox.vw_curr_iqvia_plans_discard AS
 SELECT btrim(iqvia_plans_discard.payer_id) AS payer_id,
        btrim(iqvia_plans_discard.notes) AS notes,
        iqvia_plans_discard.file_id,
        iqvia_plans_discard.record_id
 FROM sandbox.iqvia_plans_discard
 WHERE (iqvia_plans_discard.file_id IN ( SELECT max(iqvia_plans_discard.file_id) AS max
 FROM sandbox.iqvia_plans_discard));

CREATE  VIEW sandbox.vw_curr_model_paytype_map AS
 SELECT btrim(model_paytype_map.model) AS model,
        btrim(model_paytype_map.paytype) AS paytype,
        btrim(model_paytype_map.notes) AS notes,
        model_paytype_map.file_id,
        model_paytype_map.record_id
 FROM sandbox.model_paytype_map
 WHERE (model_paytype_map.file_id IN ( SELECT max(model_paytype_map.file_id) AS max
 FROM sandbox.model_paytype_map));

CREATE  VIEW sandbox.vw_curr_iqvia_payer_paytype_override AS
 SELECT btrim(iqvia_payer_paytype_override.iqvia_payer_name) AS iqvia_payer_name,
        btrim(iqvia_payer_paytype_override.iqvia_plan_name_regex) AS iqvia_plan_name_regex,
        btrim(iqvia_payer_paytype_override.paytype) AS paytype,
        iqvia_payer_paytype_override.file_id,
        iqvia_payer_paytype_override.record_id
 FROM sandbox.iqvia_payer_paytype_override
 WHERE (iqvia_payer_paytype_override.file_id IN ( SELECT max(iqvia_payer_paytype_override.file_id) AS max
 FROM sandbox.iqvia_payer_paytype_override));

CREATE  VIEW sandbox.vw_curr_iqvia_paytypeindex AS
 SELECT btrim(iqvia_paytypeindex.paytype_index) AS paytype_index,
        btrim(iqvia_paytypeindex.paytype) AS paytype,
        iqvia_paytypeindex.file_id,
        iqvia_paytypeindex.record_id
 FROM sandbox.iqvia_paytypeindex
 WHERE (iqvia_paytypeindex.file_id IN ( SELECT max(iqvia_paytypeindex.file_id) AS max
 FROM sandbox.iqvia_paytypeindex));

CREATE  VIEW sandbox.vw_curr_ftf_plans_paytypeindex AS
 SELECT btrim(ftf_plans_paytypeindex.ftf_health_plantype) AS btrim,
        ftf_plans_paytypeindex.paytype_index,
        ftf_plans_paytypeindex.file_id,
        ftf_plans_paytypeindex.record_id
 FROM sandbox.ftf_plans_paytypeindex
 WHERE (ftf_plans_paytypeindex.file_id IN ( SELECT max(ftf_plans_paytypeindex.file_id) AS max
 FROM sandbox.ftf_plans_paytypeindex));

CREATE  VIEW sandbox.vw_curr_ftf_paytype_paytypeindex AS
 SELECT btrim(ftf_paytype_paytypeindex.paytype_index) AS paytype_index,
        btrim(ftf_paytype_paytypeindex.paytype) AS paytype,
        ftf_paytype_paytypeindex.file_id,
        ftf_paytype_paytypeindex.record_id
 FROM sandbox.ftf_paytype_paytypeindex
 WHERE (ftf_paytype_paytypeindex.file_id IN ( SELECT max(ftf_paytype_paytypeindex.file_id) AS max
 FROM sandbox.ftf_paytype_paytypeindex));

CREATE  VIEW sandbox.vw_curr_ftf_override_provider AS
 SELECT btrim(ftf_override_provider.paytype_index) AS paytype_index,
        btrim(ftf_override_provider.provider_id) AS provider_id,
        ftf_override_provider.file_id,
        ftf_override_provider.record_id
 FROM sandbox.ftf_override_provider
 WHERE (ftf_override_provider.file_id IN ( SELECT max(ftf_override_provider.file_id) AS max
 FROM sandbox.ftf_override_provider));

CREATE  VIEW sandbox.vw_curr_ftf_override_plan AS
 SELECT btrim(ftf_override_plan.paytype_index) AS paytype_index,
        btrim(ftf_override_plan.ftf_health_planid) AS ftf_health_planid,
        ftf_override_plan.file_id,
        ftf_override_plan.record_id
 FROM sandbox.ftf_override_plan
 WHERE (ftf_override_plan.file_id IN ( SELECT max(ftf_override_plan.file_id) AS max
 FROM sandbox.ftf_override_plan));

CREATE  VIEW sandbox.vw_curr_drug_assignments AS
 SELECT drug_assignments.drug_id,
        drug_assignments.drug_seq,
        btrim(drug_assignments.product) AS product,
        drug_assignments.file_id,
        drug_assignments.record_id
 FROM sandbox.drug_assignments
 WHERE (drug_assignments.file_id IN ( SELECT max(drug_assignments.file_id) AS max
 FROM sandbox.drug_assignments));

CREATE  VIEW sandbox.vw_curr_ftf_pbm_functions AS
 SELECT ftf_pbm_functions.pbm_function_id,
        btrim(ftf_pbm_functions.pbm_function) AS pbm_function,
        btrim(ftf_pbm_functions.notes) AS notes,
        ftf_pbm_functions.file_id,
        ftf_pbm_functions.record_id
 FROM sandbox.ftf_pbm_functions
 WHERE (ftf_pbm_functions.file_id IN ( SELECT max(ftf_pbm_functions.file_id) AS max
 FROM sandbox.ftf_pbm_functions));

CREATE  VIEW sandbox.vw_curr_botox_step_restriction AS
 SELECT botox_step_restriction.code,
        btrim(botox_step_restriction.restriction_group) AS restriction_group,
        btrim(botox_step_restriction.notes) AS notes,
        botox_step_restriction.file_id,
        botox_step_restriction.record_id
 FROM sandbox.botox_step_restriction
 WHERE (botox_step_restriction.file_id IN ( SELECT max(botox_step_restriction.file_id) AS max
 FROM sandbox.botox_step_restriction));

CREATE  VIEW sandbox.vw_curr_step_restriction AS
 SELECT step_restriction.code,
        btrim(step_restriction.restriction_group) AS restriction_group,
        btrim(step_restriction.notes) AS notes,
        step_restriction.file_id,
        step_restriction.record_id
 FROM sandbox.step_restriction
 WHERE (step_restriction.file_id IN ( SELECT max(step_restriction.file_id) AS max
 FROM sandbox.step_restriction));

CREATE  VIEW sandbox.vw_curr_pa_restriction AS
 SELECT pa_restriction.code,
        btrim(pa_restriction.restriction_detail_id) AS restriction_detail_id,
        btrim(pa_restriction.notes) AS notes,
        pa_restriction.file_id,
        pa_restriction.record_id
 FROM sandbox.pa_restriction
 WHERE (pa_restriction.file_id IN ( SELECT max(pa_restriction.file_id) AS max
 FROM sandbox.pa_restriction));

CREATE  VIEW sandbox.vw_curr_patient_pa_restriction AS
 SELECT patient_pa_restriction.code,
        btrim(patient_pa_restriction.restriction_detail_id) AS restriction_detail_id,
        btrim(patient_pa_restriction.notes) AS notes,
        patient_pa_restriction.file_id,
        patient_pa_restriction.record_id
 FROM sandbox.patient_pa_restriction
 WHERE (patient_pa_restriction.file_id IN ( SELECT max(patient_pa_restriction.file_id) AS max
 FROM sandbox.patient_pa_restriction));

CREATE  VIEW sandbox.vw_curr_medical_rec_restriction AS
 SELECT medical_rec_restriction.code,
        btrim(medical_rec_restriction.restriction_detail_id) AS restriction_detail_id,
        btrim(medical_rec_restriction.notes) AS notes,
        medical_rec_restriction.file_id,
        medical_rec_restriction.record_id
 FROM sandbox.medical_rec_restriction
 WHERE (medical_rec_restriction.file_id IN ( SELECT max(medical_rec_restriction.file_id) AS max
 FROM sandbox.medical_rec_restriction));

CREATE  VIEW sandbox.vw_curr_unspecified_rec_restriction AS
 SELECT unspecified_rec_restriction.code,
        btrim(unspecified_rec_restriction.restriction_detail_id) AS restriction_detail_id,
        btrim(unspecified_rec_restriction.notes) AS notes,
        unspecified_rec_restriction.file_id,
        unspecified_rec_restriction.record_id
 FROM sandbox.unspecified_rec_restriction
 WHERE (unspecified_rec_restriction.file_id IN ( SELECT max(unspecified_rec_restriction.file_id) AS max
 FROM sandbox.unspecified_rec_restriction));

CREATE  VIEW sandbox.asi_market_access_w_test AS
SELECT A.zip, A.state, A.payer_plan_num, A.report_num, A.ims_product_group_num, A.data_month, A.nrx_001, A.nrx_002, A.nrx_003, A.nrx_004, A.nrx_005, A.nrx_006, A.nrx_007, A.nrx_008, A.nrx_009, A.nrx_010, A.nrx_011, A.nrx_012, A.nrx_013, A.nrx_014, A.nrx_015, A.nrx_016, A.nrx_017, A.nrx_018, A.nrx_019, A.nrx_020, A.nrx_021, A.nrx_022, A.nrx_023, A.nrx_024, A.trx_001, A.trx_002, A.trx_003, A.trx_004, A.trx_005, A.trx_006, A.trx_007, A.trx_008, A.trx_009, A.trx_010, A.trx_011, A.trx_012, A.trx_013, A.trx_014, A.trx_015, A.trx_016, A.trx_017, A.trx_018, A.trx_019, A.trx_020, A.trx_021, A.trx_022, A.trx_023, A.trx_024 FROM ((SELECT coalesce(d.zip, o.zip, pcd.ptr_zip) AS zip, coalesce(d.state, o.state, pcd.ptr_state, mpzd.state) AS state, rx.payer_plan_number AS payer_plan_num, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END AS report_num, rx.ims_product_group AS ims_product_group_num, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) AS data_month, sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (((((datamart.prescriber_rx rx JOIN outbound.month_rollup_and_bucket iwb ON ((rx.rollup_month = iwb.month_ending))) LEFT JOIN (SELECT market_presc_zip_divisor.ims_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.state FROM outbound.market_presc_zip_divisor GROUP BY market_presc_zip_divisor.ims_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.state) mpzd ON (((rx.ims_id = mpzd.ims_id) AND (rx.ims_client_number = mpzd.ims_client_number) AND (rx.ims_report_number_cnt = mpzd.ims_report_number)))) LEFT JOIN (SELECT hcp_demo.tvcmid, hcp_demo.state_code AS state, hcp_demo.zip FROM datamart.customer_hcp_demographics hcp_demo WHERE (hcp_demo.file_id = (SELECT max(customer_hcp_demographics.file_id) AS MAX FROM datamart.customer_hcp_demographics))) d ON ((rx.tvcmid = d.tvcmid))) LEFT JOIN (SELECT hco_demo.tvcmid, hco_demo.state_code AS state, hco_demo.zip FROM datamart.customer_hco_demographics hco_demo WHERE (hco_demo.file_id = (SELECT max(customer_hco_demographics.file_id) AS MAX FROM datamart.customer_hco_demographics))) o ON ((rx.tvcmid = o.tvcmid))) LEFT JOIN (SELECT rnk.ims_id, rnk.ptr_state, rnk.ptr_zip FROM (SELECT DISTINCT prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source) AS rnk FROM datamart.prescriber_combined_demographics ORDER BY prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source)) rnk WHERE (rnk.rnk = 1)) pcd ON ((pcd.ims_id = rx.ims_id))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_report_number_cnt = ANY (ARRAY['1'::varchar(1), '2'::varchar(1), '3'::varchar(1), '4'::varchar(1), '5'::varchar(1), '6'::varchar(1), '68'::varchar(2)])) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9))) GROUP BY coalesce(d.zip, o.zip, pcd.ptr_zip), coalesce(d.state, o.state, pcd.ptr_state, mpzd.state), rx.payer_plan_number, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END, rx.ims_product_group, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) UNION ALL SELECT CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END AS ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END AS payer_plan_num, '55'::varchar(2) AS report_num, pg.ims_product_group AS ims_product_group_num, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x) AS data_month, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((datamart.specialty_pharmacy_shipment sp JOIN (SELECT month_rollup_and_bucket.month_ending, month_rollup_and_bucket.month_bucket FROM outbound.month_rollup_and_bucket) mth ON ((last_day(sp.ship_date) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source) pg ON (((pg.basket_id = sp.basket_id) AND (pg.data_source = sp.specialty_pharmacy_data_source)))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['Prime Therapeutics'::varchar(18), 'Prime Therapeutics'::varchar(18)])) AND (sp.ims_id IS NOT NULL)) GROUP BY CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END, pg.ims_product_group, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x)) UNION ALL SELECT CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END AS ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END AS payer_plan_num, '55'::varchar(2) AS report_num, pg.ims_product_group AS ims_product_group_num, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x) AS data_month, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((datamart.specialty_pharmacy_shipment sp JOIN (SELECT month_rollup_and_bucket.month_ending, month_rollup_and_bucket.month_bucket FROM outbound.month_rollup_and_bucket) mth ON ((add_months(last_day(sp.ship_date), 1) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source) pg ON (((pg.basket_id = sp.basket_id) AND (pg.data_source = sp.specialty_pharmacy_data_source)))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['OptumRx'::varchar(7), 'OptumRx'::varchar(7)])) AND (sp.ims_id IS NOT NULL)) GROUP BY CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END, pg.ims_product_group, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x)) A;

CREATE  VIEW sandbox.vw_concur_hcp_delta_0928 AS
 SELECT concat('H'::varchar(1), (trunc(hcp.tvcmid))::varchar) AS cust_id,
        NULL AS organization_name,
        'HCP'::varchar(3) AS contact_type,
        initcap(hcp.first_name) AS first_name,
        initcap(hcp.middle_name) AS middle_name,
        initcap(hcp.last_name) AS last_name,
        hcp.suffix,
        npi.npi,
        addr.address_line_1,
        addr.address_line_2,
        addr.city,
        addr.state,
        addr.zipcode,
        sln.license_number AS sln,
        sln.state AS sln_state,
        dea.dea_number AS dea,
        NULL AS affiliation,
        CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END AS credential,
        hcp.healthcare_professional_status_code,
        date((statement_timestamp())::timestamp) AS create_date
 FROM (((((( SELECT hcp.TVCMID AS tvcmid,
        hcp.FIRST_NAME AS first_name,
        hcp.MIDDLE_NAME AS middle_name,
        hcp.LAST_NAME AS last_name,
        hcp.SUFFIX AS suffix,
        hcp.HEALTHCARE_PROFESSIONAL_STATUS_CODE AS healthcare_professional_status_code,
        hcp.TEVA_SPECIALTY_CODE AS teva_specialty_code
 FROM (raw.mdm_hcp hcp JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_hcp.file_id
 FROM raw.mdm_hcp
 GROUP BY mdm_hcp.file_id) a) hcp_file ON (((hcp.file_id = hcp_file.file_id) AND (hcp_file.file_rank = 1))))) hcp JOIN ( SELECT ad.TVCMID AS tvcmid,
        ad.ADDRESS_ID AS address_id,
        ad.ADDRESS_STATUS AS address_status,
        ad.ADDRESS_TYPE AS address_type,
        initcap(ad.ADDRESS_LINE_1) AS address_line_1,
        initcap(ad.ADDRESS_LINE_2) AS address_line_2,
        initcap(ad.CITY) AS city,
        ad.STATE AS state,
        ad.ZIP5_POSTAL_CODE AS zipcode,
        rank() OVER (PARTITION BY ad.TVCMID ORDER BY ad.PRACTICE_LOCATION_RANK DESC, ad.record_id) AS addr_rank
 FROM (raw.mdm_address ad JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_address.file_id
 FROM raw.mdm_address
 GROUP BY mdm_address.file_id) a) addr_file ON (((ad.file_id = addr_file.file_id) AND (ad.ADDRESS_STATUS = 'A'::varchar(1)) AND (ad.SINGLE_ADDRESS_INDICATOR = 'Y'::varchar(1)) AND (addr_file.file_rank = 1))))) addr ON (((hcp.tvcmid = addr.tvcmid) AND (addr.addr_rank = 1)))) JOIN ( SELECT p.TVCMID AS tvcmid,
        d.profession_code_shortname,
        rank() OVER (PARTITION BY p.TVCMID ORDER BY p.CREATED_DATE DESC) AS rnk
 FROM (raw.mdm_professional p JOIN reference.Designations d ON (((p.PROFESSION_CODE = d.profession_code) AND (p.PROFESSION_RANK = 1::float) AND (p.STATUS = 'A'::varchar(1)))))) prof ON (((hcp.tvcmid = prof.tvcmid) AND (prof.rnk = 1)))) LEFT  JOIN ( SELECT mdm_dea_address.TVCMID AS tvcmid,
        mdm_dea_address.DEA_NUMBER AS dea_number,
        mdm_dea_address.ADDRESS_ID AS address_id,
        rank() OVER (PARTITION BY mdm_dea_address.TVCMID, mdm_dea_address.ADDRESS_ID ORDER BY mdm_dea_address.DEA_EXPIRATION_DATE DESC, mdm_dea_address.UPDATED_DATE DESC, mdm_dea_address.record_id) AS rnk
 FROM raw.mdm_dea_address
 WHERE (mdm_dea_address.DEA_STATUS_CODE = 'A'::varchar(1))) dea ON (((addr.address_id = dea.address_id) AND (addr.tvcmid = dea.tvcmid) AND (dea.rnk = 1)))) LEFT  JOIN ( SELECT npi.tvcmid,
        npi.npi
 FROM (( SELECT mdm_alternate_id.file_id,
        mdm_alternate_id.TVCMID AS tvcmid,
        max(mdm_alternate_id.ALTERNATE_ID_VALUE) AS npi
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id,
          mdm_alternate_id.TVCMID) npi JOIN ( SELECT b.file_id,
        rank() OVER (ORDER BY b.file_id DESC) AS file_rank
 FROM ( SELECT mdm_alternate_id.file_id
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id) b) npi2 ON (((npi.file_id = npi2.file_id) AND (npi2.file_rank = 1))))) npi ON ((hcp.tvcmid = npi.tvcmid))) LEFT  JOIN ( SELECT sln.TVCMID AS tvcmid,
        sln.AUTHORIZATION_NUMBER AS license_number,
        sln.STATE AS state,
        rank() OVER (PARTITION BY sln.TVCMID, sln.STATE ORDER BY sln.LICENSE_TYPE_PRIVILEGE_RANK, sln.LICENSE_EXPIRATION_DATE DESC, sln.LICENSE_EFFECTIVE_DATE DESC, sln.UPDATED_DATE DESC, sln.record_id) AS rnk
 FROM raw.mdm_license sln
 WHERE (sln.LICENSE_STATUS_CODE = 'A'::varchar(1))) sln ON (((hcp.tvcmid = sln.tvcmid) AND (addr.state = sln.state) AND (sln.rnk = 1))))
 GROUP BY concat('H'::varchar(1), (trunc(hcp.tvcmid))::varchar),
          NULL,
          'HCP'::varchar(3),
          initcap(hcp.first_name),
          initcap(hcp.middle_name),
          initcap(hcp.last_name),
          hcp.suffix,
          npi.npi,
          addr.address_line_1,
          addr.address_line_2,
          addr.city,
          addr.state,
          addr.zipcode,
          sln.license_number,
          sln.state,
          dea.dea_number,
          CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END,
          hcp.healthcare_professional_status_code,
          date((statement_timestamp())::timestamp) EXCEPT  SELECT concat('H'::varchar(1), (trunc(hcp.tvcmid))::varchar) AS cust_id,
        NULL AS organization_name,
        'HCP'::varchar(3) AS contact_type,
        initcap(hcp.first_name) AS first_name,
        initcap(hcp.middle_name) AS middle_name,
        initcap(hcp.last_name) AS last_name,
        hcp.suffix,
        npi.npi,
        addr.address_line_1,
        addr.address_line_2,
        addr.city,
        addr.state,
        addr.zipcode,
        sln.license_number AS sln,
        sln.state AS sln_state,
        dea.dea_number AS dea,
        NULL AS affiliation,
        CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END AS credential,
        hcp.healthcare_professional_status_code,
        date((statement_timestamp())::timestamp) AS create_date
 FROM (((((( SELECT hcp.TVCMID AS tvcmid,
        hcp.FIRST_NAME AS first_name,
        hcp.MIDDLE_NAME AS middle_name,
        hcp.LAST_NAME AS last_name,
        hcp.SUFFIX AS suffix,
        hcp.HEALTHCARE_PROFESSIONAL_STATUS_CODE AS healthcare_professional_status_code,
        hcp.TEVA_SPECIALTY_CODE AS teva_specialty_code
 FROM (raw.mdm_hcp hcp JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_hcp.file_id
 FROM raw.mdm_hcp
 GROUP BY mdm_hcp.file_id) a) hcp_file ON (((hcp.file_id = hcp_file.file_id) AND (hcp_file.file_rank = 2))))) hcp JOIN ( SELECT ad.TVCMID AS tvcmid,
        ad.ADDRESS_ID AS address_id,
        ad.ADDRESS_STATUS AS address_status,
        ad.ADDRESS_TYPE AS address_type,
        initcap(ad.ADDRESS_LINE_1) AS address_line_1,
        initcap(ad.ADDRESS_LINE_2) AS address_line_2,
        initcap(ad.CITY) AS city,
        ad.STATE AS state,
        ad.ZIP5_POSTAL_CODE AS zipcode,
        rank() OVER (PARTITION BY ad.TVCMID ORDER BY ad.PRACTICE_LOCATION_RANK DESC, ad.record_id) AS addr_rank
 FROM (raw.mdm_address ad JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_address.file_id
 FROM raw.mdm_address
 GROUP BY mdm_address.file_id) a) addr_file ON (((ad.file_id = addr_file.file_id) AND (ad.ADDRESS_STATUS = 'A'::varchar(1)) AND (ad.SINGLE_ADDRESS_INDICATOR = 'Y'::varchar(1)) AND (addr_file.file_rank = 2))))) addr ON (((hcp.tvcmid = addr.tvcmid) AND (addr.addr_rank = 1)))) JOIN ( SELECT p.TVCMID AS tvcmid,
        d.profession_code_shortname,
        rank() OVER (PARTITION BY p.TVCMID ORDER BY p.CREATED_DATE DESC) AS rnk
 FROM (raw.mdm_professional p JOIN reference.Designations d ON (((p.PROFESSION_CODE = d.profession_code) AND (p.PROFESSION_RANK = 1::float) AND (p.STATUS = 'A'::varchar(1)))))) prof ON (((hcp.tvcmid = prof.tvcmid) AND (prof.rnk = 1)))) LEFT  JOIN ( SELECT mdm_dea_address.TVCMID AS tvcmid,
        mdm_dea_address.DEA_NUMBER AS dea_number,
        mdm_dea_address.ADDRESS_ID AS address_id,
        rank() OVER (PARTITION BY mdm_dea_address.TVCMID, mdm_dea_address.ADDRESS_ID ORDER BY mdm_dea_address.DEA_EXPIRATION_DATE DESC, mdm_dea_address.UPDATED_DATE DESC, mdm_dea_address.record_id) AS rnk
 FROM raw.mdm_dea_address
 WHERE (mdm_dea_address.DEA_STATUS_CODE = 'A'::varchar(1))) dea ON (((addr.address_id = dea.address_id) AND (addr.tvcmid = dea.tvcmid) AND (dea.rnk = 1)))) LEFT  JOIN ( SELECT npi.tvcmid,
        npi.npi
 FROM (( SELECT mdm_alternate_id.file_id,
        mdm_alternate_id.TVCMID AS tvcmid,
        max(mdm_alternate_id.ALTERNATE_ID_VALUE) AS npi
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id,
          mdm_alternate_id.TVCMID) npi JOIN ( SELECT b.file_id,
        rank() OVER (ORDER BY b.file_id DESC) AS file_rank
 FROM ( SELECT mdm_alternate_id.file_id
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id) b) npi2 ON (((npi.file_id = npi2.file_id) AND (npi2.file_rank = 2))))) npi ON ((hcp.tvcmid = npi.tvcmid))) LEFT  JOIN ( SELECT sln.TVCMID AS tvcmid,
        sln.AUTHORIZATION_NUMBER AS license_number,
        sln.STATE AS state,
        rank() OVER (PARTITION BY sln.TVCMID, sln.STATE ORDER BY sln.LICENSE_TYPE_PRIVILEGE_RANK, sln.LICENSE_EXPIRATION_DATE DESC, sln.LICENSE_EFFECTIVE_DATE DESC, sln.UPDATED_DATE DESC, sln.record_id) AS rnk
 FROM raw.mdm_license sln
 WHERE (sln.LICENSE_STATUS_CODE = 'A'::varchar(1))) sln ON (((hcp.tvcmid = sln.tvcmid) AND (addr.state = sln.state) AND (sln.rnk = 1))))
 GROUP BY concat('H'::varchar(1), (trunc(hcp.tvcmid))::varchar),
          NULL,
          'HCP'::varchar(3),
          initcap(hcp.first_name),
          initcap(hcp.middle_name),
          initcap(hcp.last_name),
          hcp.suffix,
          npi.npi,
          addr.address_line_1,
          addr.address_line_2,
          addr.city,
          addr.state,
          addr.zipcode,
          sln.license_number,
          sln.state,
          dea.dea_number,
          CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END,
          hcp.healthcare_professional_status_code,
          date((statement_timestamp())::timestamp);

SELECT MARK_DESIGN_KSAFE(1);

