


CREATE  VIEW outbound.ims_plan_workbook AS
 SELECT plantrak_workbook.payer_plan_number AS PAYER_PLAN_NUM,
        plantrak_workbook.plan_name AS PLAN_NAME,
        plantrak_workbook.payer_name AS PAYER_NAME,
        plantrak_workbook.method_of_payment AS PAYMENT_METHOD,
        plantrak_workbook.model AS MODEL,
        coalesce(plantrak_workbook.pbm_number, '999999'::varchar(6)) AS PBM_NUMBER,
        coalesce(plantrak_workbook.pbm_name, 'N/A'::varchar(3)) AS PBM_NAME
 FROM datamart.plantrak_workbook;

CREATE  VIEW outbound.zzz_activity_voucher_coupon_redemption_alphascrip AS
 SELECT cmid.id_num AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(cw.rx_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(concat((cw.file_id)::varchar, '-'::varchar(1)), (cw.record_id)::varchar) AS trackback_id,
        NULL AS previous_activity,
        coalesce((sp.entity_id)::varchar(20), cw.ndc_code) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((('Voucher/Coupon Redemption,'::varchar(26) || b.name) || ','::varchar(1)) || cw.occ_payment_type) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((integration.copay_detail_weekly cw JOIN datamart.tvcmid_xref cmid ON (((cw.tvcmid_physician = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dm ON ((cw.file_id = dm.file_id))) LEFT  JOIN product.source_product sp ON (((cw.ndc_code = sp.source_product_code) AND (dm.feed_id = sp.feed_id) AND (dm.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE ((cw.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'ALPHASCRIP_COPAY_DETAIL_WKLY'::varchar(28)))), 0)) AND (cw.rx_date >= add_months((now())::date, (-6)))) EXCEPT  SELECT cmid.id_num AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(cw.rx_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(concat((cw.file_id)::varchar, '-'::varchar(1)), (cw.record_id)::varchar) AS trackback_id,
        NULL AS previous_activity,
        coalesce((sp.entity_id)::varchar(20), cw.ndc_code) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((('Voucher/Coupon Redemption,'::varchar(26) || b.name) || ','::varchar(1)) || cw.occ_payment_type) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((integration.copay_detail_weekly cw JOIN datamart.tvcmid_xref cmid ON (((cw.tvcmid_physician = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dm ON ((cw.file_id = dm.file_id))) LEFT  JOIN product.source_product sp ON (((cw.ndc_code = sp.source_product_code) AND (dm.feed_id = sp.feed_id) AND (dm.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE ((cw.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'ALPHASCRIP_COPAY_DETAIL_WKLY'::varchar(28)))), 0)) AND (cw.rx_date >= add_months((now())::date, (-6))));

CREATE  VIEW outbound.zzz_kc_copay_voucher_redemption AS
 SELECT coalesce(c.physician_veeva_id, c.physician_ims_id) AS VEEVA_ACCOUNT_ID,
        c.physician_ims_id AS IMS_ID,
        c.redemption_type AS REDEMPTION_TYPE,
        to_char(c.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        to_char(c.date_written, 'YYYY-MM-DD'::varchar(10)) AS HCP_DATE_WRITTEN,
        CASE mod(c.days_supply, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.days_supply)::varchar ELSE rtrim((c.days_supply)::varchar, '0'::varchar(1)) END AS DAYS_SUPPLY,
        c.ndc_code AS NDC_CODE,
        c.basket_name AS BRAND_NAME,
        CASE mod(c.quantity, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.quantity)::int)::varchar ELSE rtrim((c.quantity)::varchar, '0'::varchar(1)) END AS QTY,
        CASE mod(c.refills, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.refills)::varchar ELSE rtrim((c.refills)::varchar, '0'::varchar(1)) END AS REFILLS,
        c.program_number AS PROGRAM_NUM,
        c.copay_card_number AS COPAY_VOUCHER_NUM,
        c.pharmacy_chain_number AS PHARMACY_CHAIN_NUM,
        c.pharmacy_chain AS PHARMACY_CHAIN,
        c.pharmacy_name AS PHARMACY_NAME,
        c.pharmacy_address AS PHARMACY_ADDRESS,
        c.pharmacy_address2 AS PHARMACY_ADDRESS2,
        c.pharmacy_city AS PHARMACY_CITY,
        c.pharmacy_state AS PHARMACY_STATE,
        c.pharmacy_zip AS PHARMACY_ZIP,
        CASE mod(c.pharmacy_npi_num, 1::float) WHEN NULLSEQUAL 0::float THEN c.pharmacy_npi_num ELSE rtrim(c.pharmacy_npi_num, '0'::varchar(1)) END AS PHARMACY_NPI_NUM,
        NULL AS CEPH_ID,
        NULL AS ME_NUM,
        c.principle_physician_dea AS PRINCIPLE_PHYS_DEA_NUM,
        CASE mod(c.physician_npi, 1::float) WHEN NULLSEQUAL 0::float THEN c.physician_npi ELSE rtrim(c.physician_npi, '0'::varchar(1)) END AS PRINCIPLE_PHYS_NPI_NUM,
        c.physician_name AS PHYSICIAN_NAME,
        c.physician_address1 AS PHYSICIAN_ADDRESS1,
        c.physician_address2 AS PHYSICIAN_ADDRESS2,
        c.physician_city AS PHYSICIAN_CITY,
        c.physician_state AS PHYSICIAN_STATE,
        c.physician_zip AS PHYSICIAN_ZIP,
        CASE mod(c.rebate_amount, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.rebate_amount)::int)::varchar ELSE rtrim((c.rebate_amount)::varchar, '0'::varchar(1)) END AS REBATE_AMOUNT,
        CASE mod(c.member_cash_expense, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.member_cash_expense)::int)::varchar ELSE rtrim((c.member_cash_expense)::varchar, '0'::varchar(1)) END AS MEMBER_CASH_EXPENSE,
        CASE mod(c.submitted_cost, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.submitted_cost)::int)::varchar ELSE rtrim((c.submitted_cost)::varchar, '0'::varchar(1)) END AS SUBMITTED_COST,
        CASE mod(c.pharmacy_fee, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.pharmacy_fee)::int)::varchar ELSE rtrim((c.pharmacy_fee)::varchar, '0'::varchar(1)) END AS PHARMACY_FEE,
        CASE mod(c.total_amount_due, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.total_amount_due)::int)::varchar ELSE rtrim((c.total_amount_due)::varchar, '0'::varchar(1)) END AS TOTAL_AMOUNT_DUE,
        CASE mod(c.calc_awp, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.calc_awp)::int)::varchar ELSE rtrim((c.calc_awp)::varchar, '0'::varchar(1)) END AS CALC_AWP,
        c.occ_payment_type AS OCC_PAYMENT_TYPE,
        CASE mod(c.new_refill, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.new_refill)::varchar ELSE rtrim((c.new_refill)::varchar, '0'::varchar(1)) END AS NEW_REFILL
 FROM datamart.copay c
 WHERE ((c.basket_name = ANY (ARRAY['PROAIR RESPICLICK'::varchar(17), 'QNASL'::varchar(5), 'QNASL CHILDREN'::varchar(14), 'ZECUITY'::varchar(7), 'AMRIX'::varchar(5), 'APIDPEX-P'::varchar(9), 'TEV-TROPIN'::varchar(10), 'AZILECT'::varchar(7), 'NUVIGIL'::varchar(7), 'QUARTETTE'::varchar(9), 'ADIPEX'::varchar(6)])) AND (c.fill_date < (statement_timestamp())::date) AND (coalesce(c.date_written, c.fill_date) < (statement_timestamp())::date) AND (months_between((statement_timestamp())::date, c.fill_date) <= 25::float)) UNION  SELECT coalesce(c.physician_veeva_id, c.physician_ims_id) AS VEEVA_ACCOUNT_ID,
        c.physician_ims_id AS IMS_ID,
        c.redemption_type AS REDEMPTION_TYPE,
        to_char(c.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        to_char(c.date_written, 'YYYY-MM-DD'::varchar(10)) AS HCP_DATE_WRITTEN,
        CASE mod(c.days_supply, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.days_supply)::varchar ELSE rtrim((c.days_supply)::varchar, '0'::varchar(1)) END AS DAYS_SUPPLY,
        c.ndc_code AS NDC_CODE,
        b.name AS BRAND_NAME,
        CASE mod(c.quantity, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.quantity)::int)::varchar ELSE rtrim((c.quantity)::varchar, '0'::varchar(1)) END AS QTY,
        CASE mod(c.refills, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.refills)::varchar ELSE rtrim((c.refills)::varchar, '0'::varchar(1)) END AS REFILLS,
        c.program_number AS PROGRAM_NUM,
        c.copay_card_number AS COPAY_VOUCHER_NUM,
        c.pharmacy_chain_number AS PHARMACY_CHAIN_NUM,
        c.pharmacy_chain AS PHARMACY_CHAIN,
        c.pharmacy_name AS PHARMACY_NAME,
        c.pharmacy_address AS PHARMACY_ADDRESS,
        c.pharmacy_address2 AS PHARMACY_ADDRESS2,
        c.pharmacy_city AS PHARMACY_CITY,
        c.pharmacy_state AS PHARMACY_STATE,
        c.pharmacy_zip AS PHARMACY_ZIP,
        CASE mod(c.pharmacy_npi_num, 1::float) WHEN NULLSEQUAL 0::float THEN c.pharmacy_npi_num ELSE rtrim(c.pharmacy_npi_num, '0'::varchar(1)) END AS PHARMACY_NPI_NUM,
        NULL AS CEPH_ID,
        NULL AS ME_NUM,
        c.principle_physician_dea AS PRINCIPLE_PHYS_DEA_NUM,
        CASE mod(c.physician_npi, 1::float) WHEN NULLSEQUAL 0::float THEN c.physician_npi ELSE rtrim(c.physician_npi, '0'::varchar(1)) END AS PRINCIPLE_PHYS_NPI_NUM,
        c.physician_name AS PHYSICIAN_NAME,
        c.physician_address1 AS PHYSICIAN_ADDRESS1,
        c.physician_address2 AS PHYSICIAN_ADDRESS2,
        c.physician_city AS PHYSICIAN_CITY,
        c.physician_state AS PHYSICIAN_STATE,
        c.physician_zip AS PHYSICIAN_ZIP,
        CASE mod(c.rebate_amount, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.rebate_amount)::int)::varchar ELSE rtrim((c.rebate_amount)::varchar, '0'::varchar(1)) END AS REBATE_AMOUNT,
        CASE mod(c.member_cash_expense, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.member_cash_expense)::int)::varchar ELSE rtrim((c.member_cash_expense)::varchar, '0'::varchar(1)) END AS MEMBER_CASH_EXPENSE,
        CASE mod(c.submitted_cost, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.submitted_cost)::int)::varchar ELSE rtrim((c.submitted_cost)::varchar, '0'::varchar(1)) END AS SUBMITTED_COST,
        CASE mod(c.pharmacy_fee, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.pharmacy_fee)::int)::varchar ELSE rtrim((c.pharmacy_fee)::varchar, '0'::varchar(1)) END AS PHARMACY_FEE,
        CASE mod(c.total_amount_due, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.total_amount_due)::int)::varchar ELSE rtrim((c.total_amount_due)::varchar, '0'::varchar(1)) END AS TOTAL_AMOUNT_DUE,
        CASE mod(c.calc_awp, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.calc_awp)::int)::varchar ELSE rtrim((c.calc_awp)::varchar, '0'::varchar(1)) END AS CALC_AWP,
        c.occ_payment_type AS OCC_PAYMENT_TYPE,
        CASE mod(c.new_refill, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.new_refill)::varchar ELSE rtrim((c.new_refill)::varchar, '0'::varchar(1)) END AS NEW_REFILL
 FROM ((datamart.copay c LEFT  JOIN product.basket_item bi ON ((c.basket_id = bi.entity_id))) LEFT  JOIN product.basket b ON ((bi.basket_id = b.basket_id)))
 WHERE ((b.name = ANY (ARRAY['PROAIR RESPICLICK'::varchar(17), 'QNASL'::varchar(5), 'QNASL CHILDREN'::varchar(14), 'ZECUITY'::varchar(7), 'AMRIX'::varchar(5), 'APIDPEX-P'::varchar(9), 'TEV-TROPIN'::varchar(10), 'AZILECT'::varchar(7), 'NUVIGIL'::varchar(7), 'QUARTETTE'::varchar(9), 'ADIPEX'::varchar(6)])) AND (c.fill_date < (statement_timestamp())::date) AND (coalesce(c.date_written, c.fill_date) < (statement_timestamp())::date) AND (months_between((statement_timestamp())::date, c.fill_date) <= 25::float));

CREATE  VIEW outbound.zzz_zs_agile_sp_attendees AS
 SELECT a.event_number AS EVENT_NUMBER,
        e.event_name AS EVENT_NAME,
        (e.event_start_date)::date AS EVENT_START_DATE,
        a.me_number AS ME_NUMBER,
        a.dea_number AS DEA_NUMBER,
        c.ceph_id AS CEPH_ID,
        a.tvcmid AS CUSTOMER_ID,
        a.attendee_id AS CM_ID,
        a.attendee_first_name AS ATTENDEE_FIRST_NAME,
        a.attendee_last_name AS ATTENDEE_LAST_NAME,
        a.attendee_address AS ATTENDEE_ADDRESS_LINE_1,
        NULL AS ATTENDEE_ADDRESS_LINE_2,
        NULL AS ATTENDEE_ADDRESS_LINE_3,
        a.attendee_city AS ATTENDEE_CITY,
        a.attendee_state AS ATTENDEE_STATE_PROVINCE,
        a.attendee_zip AS ATTENDEE_POSTAL_CODE,
        d.specialty AS ATTENDEE_SPECIALTY,
        d.degree AS ATTENDEE_DEGREE,
        d.ims_id AS IMS_NUM
 FROM (((datamart.event_attendee a JOIN datamart.event e ON ((e.event_number = a.event_number))) LEFT  JOIN ( SELECT a.tvcmid,
        a.specialty,
        a.degree,
        a.ims_id
 FROM ( SELECT DISTINCT prescriber_combined_demographics.tvcmid,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.degree,
        prescriber_combined_demographics.ims_id,
        row_number() OVER (PARTITION BY prescriber_combined_demographics.tvcmid ORDER BY prescriber_combined_demographics.degree) AS rnk
 FROM datamart.prescriber_combined_demographics
 ORDER BY prescriber_combined_demographics.tvcmid,
          prescriber_combined_demographics.specialty,
          prescriber_combined_demographics.degree,
          prescriber_combined_demographics.ims_id,
          row_number() OVER (PARTITION BY prescriber_combined_demographics.tvcmid ORDER BY prescriber_combined_demographics.degree)) a
 WHERE (a.rnk = 1)) d ON ((d.tvcmid = a.tvcmid))) LEFT  JOIN ( SELECT sfa_call.tvcmid,
        sfa_call.ceph_id
 FROM datamart.sfa_call
 GROUP BY sfa_call.tvcmid,
          sfa_call.ceph_id) c ON ((a.tvcmid = c.tvcmid)))
 WHERE ((e.event_start_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (trunc(e.event_start_date, 'DD'::varchar(2)) <= trunc((last_day(add_months((statement_timestamp())::timestamp, (-1))))::timestamp, 'DD'::varchar(2))))
 GROUP BY a.event_number,
          e.event_name,
          e.event_start_date,
          a.me_number,
          a.dea_number,
          c.ceph_id,
          a.attendee_id,
          a.tvcmid,
          a.attendee_first_name,
          a.attendee_last_name,
          a.attendee_address,
          NULL,
          a.attendee_city,
          a.attendee_state,
          a.attendee_zip,
          d.specialty,
          d.degree,
          d.ims_id;

CREATE  VIEW outbound.zzz_axiom_market AS
 SELECT prescriber_rx.market_name,
        prescriber_rx.payer_plan_number AS plan_num,
        b.teva_product_code AS product_code,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt24,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt24
 FROM ((datamart.prescriber_rx prescriber_rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON ((prescriber_rx.rollup_month = mth.month_ending))) LEFT  JOIN product.basket b ON ((prescriber_rx.basket_id = b.basket_id)))
 WHERE ((prescriber_rx.nrx_count IS NOT NULL) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (prescriber_rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY prescriber_rx.market_name,
          prescriber_rx.payer_plan_number,
          b.teva_product_code
 ORDER BY prescriber_rx.payer_plan_number,
          b.teva_product_code,
          sum(CASE WHEN (prescriber_rx.date = add_months(last_day(prescriber_rx.data_date), (-1))) THEN prescriber_rx.nrx_count ELSE NULL::float END);

CREATE  VIEW outbound.zzz_axiom_product_totals AS
 SELECT prescriber_rx.market_name,
        b.teva_product_code AS product_code,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt24,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt24
 FROM ((datamart.prescriber_rx prescriber_rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON ((prescriber_rx.rollup_month = mth.month_ending))) LEFT  JOIN product.basket b ON ((prescriber_rx.basket_id = b.basket_id)))
 WHERE ((prescriber_rx.nrx_count IS NOT NULL) AND (mth.month_bucket <= 24) AND (mth.month_bucket >= 1) AND (prescriber_rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY prescriber_rx.market_name,
          b.teva_product_code
 ORDER BY prescriber_rx.market_name,
          b.teva_product_code;

CREATE  VIEW outbound.dnc AS
 SELECT ims.id_num AS IMS_ID,
        tx.id_num AS DEA_NUM,
        hcp.last_name AS LAST_NAME,
        hcp.first_name AS FIRST_NAME,
        hcp.middle_name AS MID_NAME,
        hcp.address_line1 AS ADDRESS,
        hcp.city AS CITY,
        hcp.state_code AS STATE,
        hcp.zip AS ZIP,
        hcp.npi AS NPI
 FROM (((datamart.customer_level_flags clf JOIN datamart.customer_hcp_demographics hcp ON ((hcp.tvcmid = clf.tvcmid))) JOIN datamart.tvcmid_xref ims ON (((ims.tvcmid = hcp.tvcmid) AND (ims.id_type = 'IMS_ID'::varchar(6))))) LEFT  JOIN datamart.tvcmid_xref tx ON (((tx.tvcmid = hcp.tvcmid) AND (tx.id_type = 'DEA_NUM'::varchar(7)))))
 WHERE ((clf.flag_type = 'DNC'::varchar(3)) AND (clf.basket_name = 'NUVIGIL'::varchar(7)) AND (coalesce(clf.flag_effective_end_date, (statement_timestamp())::timestamp) >= (statement_timestamp())::timestamp) AND ((tx.id_num IS NOT NULL) OR (hcp.npi IS NOT NULL)) AND (hcp.ims_id IS NOT NULL))
 GROUP BY ims.id_num,
          tx.id_num,
          hcp.last_name,
          hcp.first_name,
          hcp.middle_name,
          hcp.address_line1,
          hcp.city,
          hcp.state_code,
          hcp.zip,
          hcp.npi;

CREATE  VIEW outbound.zzz_create_anda_sales AS
 SELECT sbs.transaction_id AS TRANSACTION_ID,
        to_char(sbs.invoice_date, 'YYYY-MM-DD'::varchar(10)) AS INVOICE_DATE,
        sbs.product_brand AS PRODUCT_BRAND,
        sbs.product_ndc AS PRODUCT_NDC,
        sbs.product_desc AS PRODUCT_DESC,
        (sbs.invoice_qty)::int AS INVOICE_QTY,
        (sbs.invoice_units)::int AS INVOICE_UNITS,
        sbs.invoice_cost AS INVOICE_COST,
        sbs.invoice_pack_cost AS INVOICE_PACK_COST,
        sbs.invoice_unit_cost AS INVOICE_UNIT_COST,
        sbs.contract_pack_cost AS CONTRACT_PACK_COST,
        sbs.contract_purchases AS CONTRACT_PURCHASES,
        sbs.contract_number AS CONTRACT_NUMBER,
        sbs.dispensing_location AS DISPENSING_LOCATION,
        sbs.dl_address_1 AS DL_ADDRESS_1,
        sbs.dl_address_2 AS DL_ADDRESS_2,
        sbs.dl_city AS DL_CITY,
        sbs.dl_state AS DL_STATE,
        sbs.dl_zip AS DL_ZIP,
        sbs.dl_dea_number AS DL_DEA_NUMBER,
        sbs.depot_location AS DEPOT_LOCATION,
        sbs.dep_address_1 AS DEP_ADDRESS_1,
        sbs.dep_address_2 AS DEP_ADDRESS_2,
        sbs.dep_city AS DEP_CITY,
        sbs.dep_state AS DEP_STATE,
        sbs.dep_zip AS DEP_ZIP,
        sbs.dep_dea_number AS DEP_DEA_NUMBER,
        (sbs.unit_ap)::numeric(15,2) AS UNIT_AP,
        (sbs.ap)::numeric(15,2) AS AP
 FROM datamart.select_brand_sales sbs
 WHERE (sbs.data_source = 'Anda'::varchar(4));

CREATE  VIEW outbound.activity_speaker_event AS
 SELECT cmid.id_num AS federation_id,
        e.event_location AS contact,
        ea.source_system_name AS source,
        to_char(e.event_start_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (b.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Speaker_Program'::varchar(15) AS type,
        'Speaker_Program'::varchar(15) AS native_type,
        ((((('Speaker Program -, '::varchar(19) || e.funding_source) || ', '::varchar(2)) || e.estimated_attendance) || ' Attendees, '::varchar(12)) || CASE WHEN (ea.attended = 1) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((( SELECT event_attendee.source_system_name,
        event_attendee.event_number,
        event_attendee.attended,
        event_attendee.customer_id,
        event_attendee.file_id
 FROM integration.event_attendee
 GROUP BY event_attendee.source_system_name,
          event_attendee.event_number,
          event_attendee.attended,
          event_attendee.customer_id,
          event_attendee.file_id) ea JOIN ( SELECT event.event_number,
        event.event_name,
        event.event_start_date,
        event.funding_source,
        event.estimated_attendance,
        event.event_location
 FROM integration.event
 WHERE (event.event_start_date >= add_months((now())::date, (-6)))
 GROUP BY event.event_number,
          event.event_name,
          event.event_start_date,
          event.funding_source,
          event.estimated_attendance,
          event.event_location) e ON ((ea.event_number = e.event_number))) JOIN datamart.tvcmid_xref cmid ON (((ea.customer_id = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN ( SELECT event_product.event_number,
        event_product.product_id
 FROM integration.event_product
 GROUP BY event_product.event_number,
          event_product.product_id) ep ON ((ea.event_number = ep.event_number))) LEFT  JOIN product.basket b ON (((upper(ep.product_id) = upper(b.name)) AND (b.basket_type = 'brand'::varchar(5)))))
 WHERE (ea.file_id > ( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_EVENT_ATTENDEE'::varchar(22)))))
 GROUP BY cmid.id_num,
          e.event_location,
          ea.source_system_name,
          to_char(e.event_start_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)),
          concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar),
          NULL,
          (b.basket_id)::varchar(20),
          'HCP'::varchar(3),
          'Speaker_Program'::varchar(15),
          ((((('Speaker Program -, '::varchar(19) || e.funding_source) || ', '::varchar(2)) || e.estimated_attendance) || ' Attendees, '::varchar(12)) || CASE WHEN (ea.attended = 1) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END),
          to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) EXCEPT  SELECT cmid.id_num AS federation_id,
        e.event_location AS contact,
        ea.source_system_name AS source,
        to_char(e.event_start_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (b.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Speaker_Program'::varchar(15) AS type,
        'Speaker_Program'::varchar(15) AS native_type,
        ((((('Speaker Program -, '::varchar(19) || e.funding_source) || ', '::varchar(2)) || e.estimated_attendance) || ' Attendees, '::varchar(12)) || CASE WHEN (ea.attended = 1) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((( SELECT event_attendee.source_system_name,
        event_attendee.event_number,
        event_attendee.attended,
        event_attendee.customer_id,
        event_attendee.file_id
 FROM integration.event_attendee
 GROUP BY event_attendee.source_system_name,
          event_attendee.event_number,
          event_attendee.attended,
          event_attendee.customer_id,
          event_attendee.file_id) ea JOIN ( SELECT event.event_number,
        event.event_name,
        event.event_start_date,
        event.funding_source,
        event.estimated_attendance,
        event.event_location
 FROM integration.event
 WHERE (event.event_start_date >= add_months((now())::date, (-6)))
 GROUP BY event.event_number,
          event.event_name,
          event.event_start_date,
          event.funding_source,
          event.estimated_attendance,
          event.event_location) e ON ((ea.event_number = e.event_number))) JOIN datamart.tvcmid_xref cmid ON (((ea.customer_id = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN ( SELECT event_product.event_number,
        event_product.product_id
 FROM integration.event_product
 GROUP BY event_product.event_number,
          event_product.product_id) ep ON ((ea.event_number = ep.event_number))) LEFT  JOIN product.basket b ON (((upper(ep.product_id) = upper(b.name)) AND (b.basket_type = 'brand'::varchar(5)))))
 WHERE (ea.file_id <= ( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_EVENT_ATTENDEE'::varchar(22)))))
 GROUP BY cmid.id_num,
          e.event_location,
          ea.source_system_name,
          to_char(e.event_start_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)),
          concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar),
          NULL,
          (b.basket_id)::varchar(20),
          'HCP'::varchar(3),
          'Speaker_Program'::varchar(15),
          ((((('Speaker Program -, '::varchar(19) || e.funding_source) || ', '::varchar(2)) || e.estimated_attendance) || ' Attendees, '::varchar(12)) || CASE WHEN (ea.attended = 1) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END),
          to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23));

CREATE  VIEW outbound.activity_npp_sample_orders AS
 SELECT cmid.id_num AS federation_id,
        ss.hcp_zip AS contact,
        'Knipper'::varchar(7) AS source,
        to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ss.order_source_order_id AS trackback_id,
        NULL AS previous_activity,
        (bb.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Alternate_Sample_Programs'::varchar(25) AS type,
        'Alternate_Sample_Programs'::varchar(25) AS native_type,
        concat((('Alternate Sample Programs-'::varchar(26) || coalesce(bp.name, ''::varchar)) || ','::varchar(1)), (ss.quantity)::varchar) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((((integration.sample_shipment ss JOIN datamart.tvcmid_xref cmid ON (((ss.tvcmid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dfm ON ((dfm.file_id = ss.file_id))) LEFT  JOIN product.source_product sp ON (((ss.ndc = sp.source_product_code) AND (dfm.feed_id = sp.feed_id) AND (dfm.feed_version = sp.feed_version)))) LEFT  JOIN ( SELECT bb.name,
        bb.basket_id,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) bb ON ((sp.entity_id = bb.prod_id))) LEFT  JOIN product.basket bp ON ((sp.entity_id = bp.basket_id))) LEFT  JOIN product.source s ON ((sp.source_id = s.source_id)))
 WHERE ((substr(ss.order_source_order_id, 1, 1) <> 'C'::varchar(1)) AND (ss.ship_date >= add_months((now())::date, (-6))) AND (ss.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_KNIPPER_SAMPLES'::varchar(19)))), 0))) EXCEPT  SELECT cmid.id_num AS federation_id,
        ss.hcp_zip AS contact,
        'Knipper'::varchar(7) AS source,
        to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ss.order_source_order_id AS trackback_id,
        NULL AS previous_activity,
        (bb.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Alternate_Sample_Programs'::varchar(25) AS type,
        'Alternate_Sample_Programs'::varchar(25) AS native_type,
        concat((('Alternate Sample Programs-'::varchar(26) || coalesce(bp.name, ''::varchar)) || ','::varchar(1)), (ss.quantity)::varchar) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((((integration.sample_shipment ss JOIN datamart.tvcmid_xref cmid ON (((ss.tvcmid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dfm ON ((dfm.file_id = ss.file_id))) LEFT  JOIN product.source_product sp ON (((ss.ndc = sp.source_product_code) AND (dfm.feed_id = sp.feed_id) AND (dfm.feed_version = sp.feed_version)))) LEFT  JOIN ( SELECT bb.name,
        bb.basket_id,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) bb ON ((sp.entity_id = bb.prod_id))) LEFT  JOIN product.basket bp ON ((sp.entity_id = bp.basket_id))) LEFT  JOIN product.source s ON ((sp.source_id = s.source_id)))
 WHERE ((substr(ss.order_source_order_id, 1, 1) <> 'C'::varchar(1)) AND (ss.ship_date >= add_months((now())::date, (-6))) AND (ss.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_KNIPPER_SAMPLES'::varchar(19)))), 0)));

CREATE  VIEW outbound.activity_line_item_speaker_event AS
 SELECT concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar) AS activity,
        to_char(e.event_start_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar) AS trackback_id,
        NULL AS previous_line_item,
        (ep.topic_id)::varchar(20) AS level_master_id,
        'Topics'::varchar(6) AS type,
        'Topics'::varchar(6) AS native_type,
        ep.topic_name AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((( SELECT event.event_number,
        event.event_name,
        event.event_start_date,
        max(event.file_id) AS file_id
 FROM integration.event
 WHERE (event.event_start_date >= add_months((now())::date, (-6)))
 GROUP BY event.event_number,
          event.event_name,
          event.event_start_date) e LEFT  JOIN ( SELECT event_product.source_system_name,
        event_product.event_number,
        event_product.product_id,
        event_product.product_name,
        event_product.topic_id,
        event_product.topic_name
 FROM integration.event_product
 GROUP BY event_product.source_system_name,
          event_product.event_number,
          event_product.product_id,
          event_product.product_name,
          event_product.topic_id,
          event_product.topic_name) ep ON ((e.event_number = ep.event_number))) LEFT  JOIN product.basket b ON (((upper(ep.product_name) = b.name) AND (b.basket_type = 'brand'::varchar(5))))) LEFT  JOIN ( SELECT event_attendee.source_system_name,
        event_attendee.event_number,
        event_attendee.attended,
        event_attendee.customer_id,
        event_attendee.file_id
 FROM integration.event_attendee
 GROUP BY event_attendee.source_system_name,
          event_attendee.event_number,
          event_attendee.attended,
          event_attendee.customer_id,
          event_attendee.file_id) ea ON ((ea.event_number = e.event_number))) JOIN datamart.tvcmid_xref cmid ON (((ea.customer_id = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6)))))
 WHERE (ea.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_EVENT_ATTENDEE'::varchar(22)))), 0)) EXCEPT  SELECT concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar) AS activity,
        to_char(e.event_start_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(concat((concat((e.event_name || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)), (ea.attended)::varchar), (e.event_start_date)::varchar) AS trackback_id,
        NULL AS previous_line_item,
        (ep.topic_id)::varchar(20) AS level_master_id,
        'Topics'::varchar(6) AS type,
        'Topics'::varchar(6) AS native_type,
        ep.topic_name AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((( SELECT event.event_number,
        event.event_name,
        event.event_start_date,
        max(event.file_id) AS file_id
 FROM integration.event
 WHERE (event.event_start_date >= add_months((now())::date, (-6)))
 GROUP BY event.event_number,
          event.event_name,
          event.event_start_date) e LEFT  JOIN ( SELECT event_product.source_system_name,
        event_product.event_number,
        event_product.product_id,
        event_product.product_name,
        event_product.topic_id,
        event_product.topic_name
 FROM integration.event_product
 GROUP BY event_product.source_system_name,
          event_product.event_number,
          event_product.product_id,
          event_product.product_name,
          event_product.topic_id,
          event_product.topic_name) ep ON ((e.event_number = ep.event_number))) LEFT  JOIN product.basket b ON (((upper(ep.product_name) = b.name) AND (b.basket_type = 'brand'::varchar(5))))) LEFT  JOIN ( SELECT event_attendee.source_system_name,
        event_attendee.event_number,
        event_attendee.attended,
        event_attendee.customer_id,
        event_attendee.file_id
 FROM integration.event_attendee
 GROUP BY event_attendee.source_system_name,
          event_attendee.event_number,
          event_attendee.attended,
          event_attendee.customer_id,
          event_attendee.file_id) ea ON ((ea.event_number = e.event_number))) JOIN datamart.tvcmid_xref cmid ON (((ea.customer_id = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6)))))
 WHERE (ea.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_EVENT_ATTENDEE'::varchar(22)))), 0));

CREATE  VIEW outbound.activity_line_item_non_npp_sample_orders AS
 SELECT ss.order_source_order_id AS activity,
        to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ((ss.order_source_order_id || '-'::varchar(1)) || coalesce(bp.name, ''::varchar)) AS trackback_id,
        NULL AS previous_line_item,
        (bp.basket_id)::varchar(20) AS level_master_id,
        'Alternate_Sample_Programs'::varchar(25) AS type,
        'Alternate_Sample_Programs'::varchar(25) AS native_type,
        concat((('Alternate Sample Programs-'::varchar(26) || coalesce(bp.name, ''::varchar)) || ' , '::varchar(3)), (ss.quantity)::varchar) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM (((( SELECT sample_shipment.order_source_order_id,
        sample_shipment.ship_date,
        sample_shipment.ndc,
        sample_shipment.quantity,
        sample_shipment.file_id,
        sample_shipment.record_id
 FROM integration.sample_shipment
 WHERE ((substr(sample_shipment.order_source_order_id, 1, 1) = 'C'::varchar(1)) AND (sample_shipment.ship_date >= add_months((now())::date, (-6))))) ss LEFT  JOIN product.source_product sp ON (((ss.ndc = sp.source_product_code) AND (sp.feed_id = 435) AND (sp.feed_version = 1)))) LEFT  JOIN ( SELECT bb.name,
        bb.basket_id,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) bb ON ((sp.entity_id = bb.prod_id))) LEFT  JOIN product.basket bp ON ((sp.entity_id = bp.basket_id)))
 WHERE (ss.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_VV_CALL2_SAMPLE_VOD__C'::varchar(26)))), 0))
 GROUP BY ss.order_source_order_id,
          to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)),
          ((ss.order_source_order_id || '-'::varchar(1)) || coalesce(bp.name, ''::varchar)),
          NULL,
          (bp.basket_id)::varchar(20),
          'Alternate_Sample_Programs'::varchar(25),
          concat((('Alternate Sample Programs-'::varchar(26) || coalesce(bp.name, ''::varchar)) || ' , '::varchar(3)), (ss.quantity)::varchar),
          to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) EXCEPT  SELECT ss.order_source_order_id AS activity,
        to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ((ss.order_source_order_id || '-'::varchar(1)) || coalesce(bp.name, ''::varchar)) AS trackback_id,
        NULL AS previous_line_item,
        (bp.basket_id)::varchar(20) AS level_master_id,
        'Alternate_Sample_Programs'::varchar(25) AS type,
        'Alternate_Sample_Programs'::varchar(25) AS native_type,
        concat((('Alternate Sample Programs-'::varchar(26) || coalesce(bp.name, ''::varchar)) || ' , '::varchar(3)), (ss.quantity)::varchar) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM (((( SELECT sample_shipment.order_source_order_id,
        sample_shipment.ship_date,
        sample_shipment.ndc,
        sample_shipment.quantity,
        sample_shipment.file_id,
        sample_shipment.record_id
 FROM integration.sample_shipment
 WHERE ((substr(sample_shipment.order_source_order_id, 1, 1) = 'C'::varchar(1)) AND (sample_shipment.ship_date >= add_months((now())::date, (-6))))) ss LEFT  JOIN product.source_product sp ON (((ss.ndc = sp.source_product_code) AND (sp.feed_id = 435) AND (sp.feed_version = 1)))) LEFT  JOIN ( SELECT bb.name,
        bb.basket_id,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) bb ON ((sp.entity_id = bb.prod_id))) LEFT  JOIN product.basket bp ON ((sp.entity_id = bp.basket_id)))
 WHERE (ss.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_VV_CALL2_SAMPLE_VOD__C'::varchar(26)))), 0))
 GROUP BY ss.order_source_order_id,
          to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)),
          ((ss.order_source_order_id || '-'::varchar(1)) || coalesce(bp.name, ''::varchar)),
          NULL,
          (bp.basket_id)::varchar(20),
          'Alternate_Sample_Programs'::varchar(25),
          concat((('Alternate Sample Programs-'::varchar(26) || coalesce(bp.name, ''::varchar)) || ' , '::varchar(3)), (ss.quantity)::varchar),
          to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23));

CREATE  VIEW outbound.zzz_activity_line_item_npp_sample_orders AS
 SELECT ss.order_source_order_id AS activity,
        to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ((ss.order_source_order_id || '-'::varchar(1)) || coalesce(b.name, ''::varchar)) AS trackback_id,
        NULL AS previous_line_item,
        (b.basket_id)::varchar(20) AS level_master_id,
        'Alternate_Sample_Programs'::varchar(25) AS activity_type,
        'Alternate_Sample_Programs'::varchar(25) AS native_type,
        concat((('Alternate Sample Programs-'::varchar(26) || coalesce(b.name, ''::varchar)) || ' , '::varchar(3)), (ss.quantity)::varchar) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM (((((integration.sample_shipment ss JOIN datamart.tvcmid_xref fed ON (((ss.tvcmid = fed.tvcmid) AND (fed.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dfm ON ((dfm.file_id = ss.file_id))) LEFT  JOIN product.source_product sp ON (((ss.ndc = sp.source_product_code) AND (dfm.feed_id = sp.feed_id) AND (dfm.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id))) LEFT  JOIN ( SELECT bb.name,
        bb.basket_id,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON (((bip.entity_id = bp.basket_id) AND (bp.basket_type = 'product'::varchar(7))))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) bb ON ((sp.entity_id = bb.prod_id)))
 WHERE ((substr(ss.order_source_order_id, 1, 1) <> 'C'::varchar(1)) AND (ss.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_KNIPPER_SAMPLES'::varchar(19)))), 0))) EXCEPT  SELECT ss.order_source_order_id AS activity,
        to_char(ss.ship_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ((ss.order_source_order_id || '-'::varchar(1)) || coalesce(b.name, ''::varchar)) AS trackback_id,
        NULL AS previous_line_item,
        (b.basket_id)::varchar(20) AS level_master_id,
        'Alternate_Sample_Programs'::varchar(25) AS activity_type,
        'Alternate_Sample_Programs'::varchar(25) AS native_type,
        concat((('Alternate Sample Programs-'::varchar(26) || coalesce(b.name, ''::varchar)) || ' , '::varchar(3)), (ss.quantity)::varchar) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM (((((integration.sample_shipment ss JOIN datamart.tvcmid_xref fed ON (((ss.tvcmid = fed.tvcmid) AND (fed.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dfm ON ((dfm.file_id = ss.file_id))) LEFT  JOIN product.source_product sp ON (((ss.ndc = sp.source_product_code) AND (dfm.feed_id = sp.feed_id) AND (dfm.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id))) LEFT  JOIN ( SELECT bb.name,
        bb.basket_id,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON (((bip.entity_id = bp.basket_id) AND (bp.basket_type = 'product'::varchar(7))))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) bb ON ((sp.entity_id = bb.prod_id)))
 WHERE ((substr(ss.order_source_order_id, 1, 1) <> 'C'::varchar(1)) AND (ss.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_KNIPPER_SAMPLES'::varchar(19)))), 0)));

CREATE  VIEW outbound.zzz_activity_line_item_copay AS
 SELECT ((c.file_id)::varchar || (c.record_id)::varchar) AS activity,
        to_char(c.fill_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ((c.file_id)::varchar || (c.record_id)::varchar) AS trackback_id,
        NULL AS previous_line_item,
        (b.basket_id)::varchar(20) AS level_master_id,
        'Voucher/Coupon Redemption'::varchar(25) AS activity_type,
        'Voucher/Coupon Redemption'::varchar(25) AS native_type,
        cvp.program_description AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM (((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.program_number = cvp.program_number) AND (c.redemption_type = cvp.redemption_type)))) LEFT  JOIN product.basket b ON ((c.basket_id = b.basket_id))) LEFT  JOIN ( SELECT bb.basket_id,
        bb.name,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON (((bip.entity_id = bp.basket_id) AND (bp.basket_type = 'product'::varchar(7))))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.basket_id)))
 WHERE ((c.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_ASI_COPAY_DETAIL_WKLY'::varchar(25)))), 0)) AND (c.fill_date >= add_months((now())::date, (-6)))) EXCEPT  SELECT ((c.file_id)::varchar || (c.record_id)::varchar) AS activity,
        to_char(c.fill_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        ((c.file_id)::varchar || (c.record_id)::varchar) AS trackback_id,
        NULL AS previous_line_item,
        (b.basket_id)::varchar(20) AS level_master_id,
        'Voucher/Coupon Redemption'::varchar(25) AS activity_type,
        'Voucher/Coupon Redemption'::varchar(25) AS native_type,
        cvp.program_description AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM (((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.program_number = cvp.program_number) AND (c.redemption_type = cvp.redemption_type)))) LEFT  JOIN product.basket b ON ((c.basket_id = b.basket_id))) LEFT  JOIN ( SELECT bb.basket_id,
        bb.name,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON (((bip.entity_id = bp.basket_id) AND (bp.basket_type = 'product'::varchar(7))))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.basket_id)))
 WHERE ((c.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_ASI_COPAY_DETAIL_WKLY'::varchar(25)))), 0)) AND (c.fill_date >= add_months((now())::date, (-6))));

CREATE  VIEW outbound.zzz_rems_program_lookup AS
 SELECT rems_prescriber.program_id AS PROGRAM_ID,
        rems_prescriber.program_name AS PROGRAM_NAME
 FROM datamart.rems_prescriber
 GROUP BY rems_prescriber.program_id,
          rems_prescriber.program_name;

CREATE  VIEW outbound.zzz_azilect_market AS
SELECT axiom_market.plan_num AS PLAN_NUM, axiom_market.product_code AS PRODUCT_CODE, coalesce(sum(axiom_market.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_market.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_market.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_market.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_market.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_market.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_market.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_market.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_market.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_market.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_market.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_market.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_market.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_market.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_market.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_market.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_market.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_market.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_market.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_market.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_market.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_market.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_market.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_market.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_market.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_market.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_market.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_market.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_market.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_market.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_market.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_market.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_market.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_market.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_market.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_market.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_market.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_market.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_market.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_market.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_market.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_market.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_market.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_market.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_market.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_market.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_market.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_market.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_market WHERE (axiom_market.product_code = ANY (ARRAY['700105'::varchar(6), '700110'::varchar(6), '700210'::varchar(6), '700220'::varchar(6), '700310'::varchar(6), '700320'::varchar(6), '700410'::varchar(6), '700420'::varchar(6), '700510'::varchar(6), '700520'::varchar(6), '700530'::varchar(6), '700540'::varchar(6), '700550'::varchar(6), '700582'::varchar(6), '700584'::varchar(6), '700586'::varchar(6), '700588'::varchar(6), '700570'::varchar(6)])) GROUP BY axiom_market.plan_num, axiom_market.product_code;

CREATE  VIEW outbound.zzz_azilect_product_totals AS
SELECT axiom_product_totals.product_code AS PRODUCT_CODE, coalesce(sum(axiom_product_totals.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_product_totals.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_product_totals.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_product_totals.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_product_totals.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_product_totals.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_product_totals.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_product_totals.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_product_totals.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_product_totals.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_product_totals.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_product_totals.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_product_totals.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_product_totals.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_product_totals.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_product_totals.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_product_totals.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_product_totals.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_product_totals.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_product_totals.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_product_totals.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_product_totals.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_product_totals.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_product_totals.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_product_totals.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_product_totals.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_product_totals.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_product_totals.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_product_totals.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_product_totals.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_product_totals.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_product_totals.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_product_totals.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_product_totals.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_product_totals.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_product_totals.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_product_totals.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_product_totals.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_product_totals.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_product_totals.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_product_totals.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_product_totals.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_product_totals.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_product_totals.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_product_totals.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_product_totals.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_product_totals.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_product_totals.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_product_totals WHERE (axiom_product_totals.product_code = ANY (ARRAY['700105'::varchar(6), '700110'::varchar(6), '700210'::varchar(6), '700220'::varchar(6), '700310'::varchar(6), '700320'::varchar(6), '700410'::varchar(6), '700420'::varchar(6), '700510'::varchar(6), '700520'::varchar(6), '700530'::varchar(6), '700540'::varchar(6), '700550'::varchar(6), '700582'::varchar(6), '700584'::varchar(6), '700586'::varchar(6), '700588'::varchar(6), '700570'::varchar(6)])) GROUP BY axiom_product_totals.product_code;

CREATE  VIEW outbound.zzz_create_mm_ram_to_rsm AS
 SELECT mm_ram_to_rsm.mm_ram AS MM_RAM,
        mm_ram_to_rsm.rsm AS RSM
 FROM datamart.mm_ram_to_rsm
 GROUP BY mm_ram_to_rsm.mm_ram,
          mm_ram_to_rsm.rsm
 ORDER BY mm_ram_to_rsm.mm_ram,
          mm_ram_to_rsm.rsm;

CREATE  VIEW outbound.zzz_create_tb_ds_accountsummary AS
 SELECT dsd.account_id AS ACCOUNT_ID,
        dsd.location_id AS LOCATION_ID,
        dsd.account_name AS ACCOUNT_NAME,
        dsd.account_class AS ACCOUNT_CLASS,
        dsd.address_1 AS ADDRESS_1,
        dsd.address_2 AS ADDRESS_2,
        dsd.city AS CITY,
        dsd.state AS STATE,
        dsd.zip AS ZIP
 FROM datamart.direct_sales_demographics dsd
 WHERE (dsd.file_id = ( SELECT max(direct_sales_demographics.file_id) AS MAX
 FROM datamart.direct_sales_demographics));

CREATE  VIEW outbound.zzz_create_tb_ds_transactions AS
 SELECT ds.account_id AS ACCOUNT_ID,
        ds.location_id AS LOCATION_ID,
        ds.shipment_date AS SHIPMENT_DATE,
        ds.ndc_code AS NDC_CODE,
        ds.product_name AS PRODUCT_NAME,
        ds.transaction_type AS TRANSACTION_TYPE,
        CASE mod(ds.direct_sales_units, 1::float) WHEN NULLSEQUAL 0::float THEN ((ds.direct_sales_units)::int)::varchar ELSE rtrim((ds.direct_sales_units)::varchar, '0'::varchar(1)) END AS DIRECT_SALES_UNITS,
        CASE mod(ds.direct_sales_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((ds.direct_sales_dollars)::int)::varchar ELSE rtrim((ds.direct_sales_dollars)::varchar, '0'::varchar(1)) END AS DIRECT_SALES_DOLLARS,
        CASE mod(ds.unit_ap, 1::float) WHEN NULLSEQUAL 0::float THEN ((ds.unit_ap)::int)::varchar ELSE rtrim((ds.unit_ap)::varchar, '0'::varchar(1)) END AS UNIT_AP,
        CASE mod(ds.total_ap, 1::float) WHEN NULLSEQUAL 0::float THEN ((ds.total_ap)::int)::varchar ELSE rtrim((ds.total_ap)::varchar, '0'::varchar(1)) END AS AP
 FROM datamart.direct_sales ds
 WHERE (ds.file_id = ( SELECT max(direct_sales.file_id) AS MAX
 FROM datamart.direct_sales));

CREATE  VIEW outbound.zzz_fentora_market AS
SELECT axiom_market.plan_num AS PLAN_NUM, axiom_market.product_code AS PRODUCT_CODE, coalesce(sum(axiom_market.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_market.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_market.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_market.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_market.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_market.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_market.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_market.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_market.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_market.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_market.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_market.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_market.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_market.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_market.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_market.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_market.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_market.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_market.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_market.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_market.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_market.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_market.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_market.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_market.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_market.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_market.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_market.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_market.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_market.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_market.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_market.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_market.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_market.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_market.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_market.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_market.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_market.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_market.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_market.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_market.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_market.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_market.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_market.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_market.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_market.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_market.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_market.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_market WHERE (axiom_market.product_code = ANY (ARRAY['300500'::varchar(6), '300100'::varchar(6), '300180'::varchar(6), '300170'::varchar(6), '300130'::varchar(6), '300140'::varchar(6), '300110'::varchar(6)])) GROUP BY axiom_market.plan_num, axiom_market.product_code;

CREATE  VIEW outbound.zzz_fentora_product_totals AS
SELECT axiom_product_totals.product_code AS PRODUCT_CODE, coalesce(sum(axiom_product_totals.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_product_totals.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_product_totals.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_product_totals.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_product_totals.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_product_totals.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_product_totals.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_product_totals.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_product_totals.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_product_totals.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_product_totals.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_product_totals.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_product_totals.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_product_totals.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_product_totals.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_product_totals.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_product_totals.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_product_totals.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_product_totals.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_product_totals.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_product_totals.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_product_totals.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_product_totals.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_product_totals.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_product_totals.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_product_totals.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_product_totals.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_product_totals.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_product_totals.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_product_totals.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_product_totals.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_product_totals.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_product_totals.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_product_totals.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_product_totals.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_product_totals.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_product_totals.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_product_totals.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_product_totals.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_product_totals.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_product_totals.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_product_totals.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_product_totals.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_product_totals.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_product_totals.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_product_totals.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_product_totals.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_product_totals.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_product_totals WHERE (axiom_product_totals.product_code = ANY (ARRAY['300500'::varchar(6), '300100'::varchar(6), '300180'::varchar(6), '300170'::varchar(6), '300130'::varchar(6), '300140'::varchar(6), '300110'::varchar(6)])) GROUP BY axiom_product_totals.product_code;

CREATE  VIEW outbound.zzz_kc_copay_voucher_program AS
SELECT c.redemption_type, c.program_number, c.program_description, c.sales_force_id, c.program_type, c.product_name, to_char(c.program_start_date, 'YYYY-MM-DD'::varchar(10)) AS program_start_date, to_char(c.program_end_date, 'YYYY-MM-DD'::varchar(10)) AS program_end_date, c.number_of_tablets FROM reference.copay_voucher_program c;

CREATE  VIEW outbound.zzz_nuvigil_market AS
SELECT axiom_market.plan_num AS PLAN_NUM, axiom_market.product_code AS PRODUCT_CODE, coalesce(sum(axiom_market.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_market.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_market.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_market.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_market.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_market.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_market.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_market.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_market.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_market.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_market.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_market.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_market.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_market.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_market.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_market.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_market.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_market.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_market.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_market.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_market.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_market.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_market.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_market.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_market.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_market.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_market.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_market.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_market.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_market.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_market.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_market.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_market.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_market.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_market.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_market.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_market.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_market.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_market.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_market.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_market.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_market.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_market.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_market.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_market.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_market.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_market.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_market.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_market WHERE (axiom_market.product_code = ANY (ARRAY['100N00'::varchar(6), '100100'::varchar(6), '100120'::varchar(6)])) GROUP BY axiom_market.plan_num, axiom_market.product_code;

CREATE  VIEW outbound.zzz_nuvigil_product_totals AS
SELECT axiom_product_totals.product_code AS PRODUCT_CODE, coalesce(sum(axiom_product_totals.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_product_totals.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_product_totals.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_product_totals.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_product_totals.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_product_totals.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_product_totals.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_product_totals.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_product_totals.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_product_totals.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_product_totals.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_product_totals.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_product_totals.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_product_totals.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_product_totals.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_product_totals.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_product_totals.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_product_totals.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_product_totals.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_product_totals.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_product_totals.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_product_totals.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_product_totals.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_product_totals.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_product_totals.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_product_totals.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_product_totals.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_product_totals.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_product_totals.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_product_totals.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_product_totals.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_product_totals.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_product_totals.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_product_totals.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_product_totals.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_product_totals.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_product_totals.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_product_totals.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_product_totals.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_product_totals.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_product_totals.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_product_totals.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_product_totals.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_product_totals.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_product_totals.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_product_totals.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_product_totals.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_product_totals.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_product_totals WHERE (axiom_product_totals.product_code = ANY (ARRAY['100N00'::varchar(6), '100100'::varchar(6), '100120'::varchar(6)])) GROUP BY axiom_product_totals.product_code;

CREATE  VIEW outbound.zzz_v_factory_sales_852 AS
 SELECT fs.trading_partner AS TRADING_PARTNER,
        fs.distribution_center AS DISTRIB_CENTER,
        fs.distribution_center_dea_number AS DISTRIB_CENTER_DEA_NUM,
        to_char(fs.reporting_date, 'DD-MON-YY'::varchar(9)) AS REPORTING_DATE,
        fs.ndc AS NDC,
        coalesce(b.teva_product_code, 'ERROR'::varchar(5)) AS PRODUCT_CODE,
        fs.product_name AS PRODUCT_NAME,
        fs.description AS DESCRIPTION,
        CASE mod(fs.qty_received, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_received)::int)::varchar ELSE rtrim((fs.qty_received)::varchar, '0'::varchar(1)) END AS QTY_RECEIVED,
        CASE mod(fs.qty_received_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_received_dollars)::int)::varchar ELSE rtrim((fs.qty_received_dollars)::varchar, '0'::varchar(1)) END AS QTY_RECEIVED_DOLLARS,
        CASE mod(fs.qty_sold, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_sold)::int)::varchar ELSE rtrim((fs.qty_sold)::varchar, '0'::varchar(1)) END AS QTY_SOLD,
        CASE mod(fs.qty_sold_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_sold_dollars)::int)::varchar ELSE rtrim((fs.qty_sold_dollars)::varchar, '0'::varchar(1)) END AS QTY_SOLD_DOLLARS,
        CASE mod(fs.qty_omit, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_omit)::int)::varchar ELSE rtrim((fs.qty_omit)::varchar, '0'::varchar(1)) END AS QTY_OMIT,
        CASE mod(fs.qty_omit_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_omit_dollars)::int)::varchar ELSE rtrim((fs.qty_omit_dollars)::varchar, '0'::varchar(1)) END AS QTY_OMIT_DOLLARS,
        CASE mod(fs.month_end_qty_on_hand, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.month_end_qty_on_hand)::int)::varchar ELSE rtrim((fs.month_end_qty_on_hand)::varchar, '0'::varchar(1)) END AS MTH_END_QTY_ON_HAND,
        CASE mod(fs.month_end_qty_on_hand_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.month_end_qty_on_hand_dollars)::int)::varchar ELSE rtrim((fs.month_end_qty_on_hand_dollars)::varchar, '0'::varchar(1)) END AS MTH_END_QTY_ON_HAND_DOLLARS,
        CASE mod(fs.month_end_committed, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.month_end_committed)::int)::varchar ELSE rtrim((fs.month_end_committed)::varchar, '0'::varchar(1)) END AS MTH_END_COMMITTED,
        CASE mod(fs.month_end_committed_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.month_end_committed_dollars)::int)::varchar ELSE rtrim((fs.month_end_committed_dollars)::varchar, '0'::varchar(1)) END AS MTH_END_COMMITTED_DOLLARS,
        CASE mod(fs.month_end_reserved, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.month_end_reserved)::int)::varchar ELSE rtrim((fs.month_end_reserved)::varchar, '0'::varchar(1)) END AS MTH_END_RESERVED,
        CASE mod(fs.month_end_reserved_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.month_end_reserved_dollars)::int)::varchar ELSE rtrim((fs.month_end_reserved_dollars)::varchar, '0'::varchar(1)) END AS MTH_END_RESERVED_DOLLARS,
        CASE mod(fs.qty_return, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_return)::int)::varchar ELSE rtrim((fs.qty_return)::varchar, '0'::varchar(1)) END AS QTY_RETURN,
        CASE mod(fs.qty_return_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_return_dollars)::int)::varchar ELSE rtrim((fs.qty_return_dollars)::varchar, '0'::varchar(1)) END AS QTY_RETURN_DOLLARS,
        CASE mod(fs.qty_customer_return, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_customer_return)::int)::varchar ELSE rtrim((fs.qty_customer_return)::varchar, '0'::varchar(1)) END AS QTY_CUSTOMER_RETURN,
        CASE mod(fs.qty_customer_return_dollars, 1::float) WHEN NULLSEQUAL 0::float THEN ((fs.qty_customer_return_dollars)::int)::varchar ELSE rtrim((fs.qty_customer_return_dollars)::varchar, '0'::varchar(1)) END AS QTY_CUSTOMER_RETURN_DOLLARS,
        to_char((statement_timestamp())::timestamp, 'DD-MON-YY'::varchar(9)) AS LAST_BUILD_DATE
 FROM (datamart.factory_sales_852 fs LEFT  JOIN product.basket b ON ((fs.basket_id = b.basket_id)));

CREATE  VIEW outbound.zzz_v_touchpoint_call AS
 SELECT tpc.call_id AS ID,
        tpc.call_attempt_id AS AttemptID,
        tpc.touchpoint_id AS TouchpointID,
        tpc.veeva_id AS ClientID,
        tpc.ims_id AS IMSID,
        tpc.first_name AS FirstName,
        tpc.last_name AS LastName,
        tpc.call_type AS Type,
        tpc.call_date AS Date,
        tpc.status_code AS StatusCode,
        tpc.status_description AS StatusDescription,
        tpc.rep_id AS RepID,
        tpc.rep_first_name AS RepFirstName,
        tpc.rep_last_name AS RepLastName
 FROM datamart.touchpoint_call tpc
 WHERE (tpc.file_id = ( SELECT max(touchpoint_call.file_id) AS MAX
 FROM datamart.touchpoint_call));

CREATE  VIEW outbound.zzz_zs_agile_voucher_redemptions AS
 SELECT c.physician_tvcmid AS TVCMID,
        c.physician_ims_id AS IMS_ID,
        c.physician_veeva_id AS VEEVA_ACCOUNT_ID,
        c.program_number AS ASI_PROGRAM_NUM,
        v.program_description AS PROGRAM_DESC,
        c.copay_card_number AS VOUCHER_NUM,
        c.physician_zip AS ZIP_CODE,
        to_char(c.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        c.basket_name AS PRODUCT_NAME,
        p.source_product_description AS DRUG_DESC,
        CASE mod(c.quantity, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.quantity)::int)::varchar ELSE rtrim((c.quantity)::varchar, '0'::varchar(1)) END AS QTY
 FROM ((datamart.copay c JOIN reference.copay_voucher_program v ON (((c.program_number = v.program_number) AND (c.redemption_type = v.redemption_type)))) LEFT  JOIN product.source_product p ON ((c.basket_id = p.entity_id)))
 WHERE ((c.basket_name = 'NUVIGIL'::varchar(7)) AND (c.fill_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (c.fill_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))));

CREATE  VIEW outbound.i_sfa_onc_trx AS
 SELECT p.time_period,
        p.ims_id,
        p.product,
        sum(p.trx_curr_mth) AS trx_curr_mth,
        sum(p.trx_prior_mth) AS trx_prior_mth,
        sum(p.trx_3mth) AS trx_3mth,
        sum(p.trx_6mth) AS trx_6mth,
        sum(p.trx_sem) AS trx_sem,
        p.sort_order,
        p.data_date
 FROM ( SELECT ((to_char(rx1.data_date, 'yyyy'::varchar(4)) || '-'::varchar(1)) || to_char(rx1.data_date, 'mm'::varchar(2))) AS time_period,
        rx1.ims_id,
        CASE rx1.basket_id WHEN NULLSEQUAL 207 THEN 'TRETINOIN'::varchar(9) WHEN NULLSEQUAL 203 THEN 'LEUKERAN'::varchar(8) WHEN NULLSEQUAL 242 THEN 'GLEEVEC'::varchar(7) WHEN NULLSEQUAL 243 THEN 'SPRYCEL'::varchar(7) WHEN NULLSEQUAL 244 THEN 'TASIGNA'::varchar(7) WHEN NULLSEQUAL 59 THEN 'BOSULIF'::varchar(7) WHEN NULLSEQUAL 450 THEN 'ICLUSIG'::varchar(7) WHEN NULLSEQUAL 79 THEN 'TKI TOTAL'::varchar(9) WHEN NULLSEQUAL 474 THEN 'IMBRUVICA'::varchar(9) WHEN NULLSEQUAL 379 THEN 'GRANIX'::varchar(6) WHEN NULLSEQUAL 666 THEN 'NEUPOGEN'::varchar(8) WHEN NULLSEQUAL 668 THEN 'LEUKINE'::varchar(7) ELSE NULL END AS product,
        sum(CASE WHEN (to_char(rx1.date, 'YYYYMM'::varchar(6)) = to_char(rx1.data_date, 'YYYYMM'::varchar(6))) THEN rx1.trx_count ELSE 0::float END) AS trx_curr_mth,
        sum(CASE WHEN (to_char(rx1.date, 'YYYYMM'::varchar(6)) = to_char(add_months(rx1.data_date, (-1)), 'YYYYMM'::varchar(6))) THEN rx1.trx_count ELSE 0::float END) AS trx_prior_mth,
        sum(CASE WHEN ((to_char(rx1.date, 'YYYYMM'::varchar(6)) >= to_char(add_months(rx1.data_date, (-2)), 'YYYYMM'::varchar(6))) AND (to_char(rx1.date, 'YYYYMM'::varchar(6)) <= to_char(rx1.data_date, 'YYYYMM'::varchar(6)))) THEN rx1.trx_count ELSE 0::float END) AS trx_3mth,
        sum(CASE WHEN ((to_char(rx1.date, 'YYYYMM'::varchar(6)) >= to_char(add_months(rx1.data_date, (-5)), 'YYYYMM'::varchar(6))) AND (to_char(rx1.date, 'YYYYMM'::varchar(6)) <= to_char(rx1.data_date, 'YYYYMM'::varchar(6)))) THEN rx1.trx_count ELSE 0::float END) AS trx_6mth,
        sum(CASE WHEN ((rx1.rollup_month >= rpt_periods.s1_start) AND (rx1.rollup_month <= rpt_periods.s1_end)) THEN rx1.trx_count ELSE 0::float END) AS trx_sem,
        CASE rx1.basket_id WHEN NULLSEQUAL 207 THEN 1 WHEN NULLSEQUAL 203 THEN 2 WHEN NULLSEQUAL 242 THEN 3 WHEN NULLSEQUAL 243 THEN 4 WHEN NULLSEQUAL 244 THEN 5 WHEN NULLSEQUAL 59 THEN 6 WHEN NULLSEQUAL 450 THEN 7 WHEN NULLSEQUAL 79 THEN 8 WHEN NULLSEQUAL 474 THEN 9 WHEN NULLSEQUAL 379 THEN 10 WHEN NULLSEQUAL 666 THEN 11 WHEN NULLSEQUAL 668 THEN 12 ELSE NULL::int END AS sort_order,
        rx1.data_date
 FROM ((datamart.prescriber_rx rx1 JOIN datamart.prescriber_combined_demographics d ON ((rx1.ims_id = d.ims_id))) CROSS  JOIN ( SELECT pr.data_date,
        s1.semester_time_period AS s1_time_period,
        s1.semester_begin_date AS s1_start,
        s1.semester_end_date AS s1_end
 FROM (reference.date_dim s1 JOIN ( SELECT rx.data_date
 FROM datamart.prescriber_rx rx
 WHERE ((rx.basket_id = 151) AND (rx.data_date IN ( SELECT max(prescriber_rx.data_date) AS max
 FROM datamart.prescriber_rx
 WHERE (prescriber_rx.basket_id = 151))))
 LIMIT 1) pr ON ((s1.calendar_date = pr.data_date)))) rpt_periods)
 WHERE ((d.sales_force_id = 'TO'::varchar(2)) AND (d.pdrp_flag = 'N'::varchar(1)) AND (rx1.basket_id = ANY (ARRAY[668, 59, 243, 244, 79, 242, 474, 666, 203, 207, 379, 450])) AND (to_char(rx1.date, 'YYYYMM'::varchar(6)) >= to_char(add_months(rx1.data_date, (-5)), 'YYYYMM'::varchar(6))) AND (to_char(rx1.date, 'YYYYMM'::varchar(6)) <= to_char(rx1.data_date, 'YYYYMM'::varchar(6))) AND (rx1.tvcmid IN ( SELECT sfa_demographics.tvcmid
 FROM datamart.sfa_demographics
 WHERE (sfa_demographics.sales_force_id = 'TO'::varchar(2)))))
 GROUP BY rx1.data_date,
          rx1.ims_id,
          rx1.basket_id) p
 GROUP BY p.time_period,
          p.ims_id,
          p.product,
          p.sort_order,
          p.data_date;

CREATE  VIEW outbound.zzz_axiom_market_w AS
 SELECT prescriber_rx.market_name,
        prescriber_rx.payer_plan_number AS plan_num,
        b.teva_product_code AS product_code,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt24,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt24
 FROM ((datamart.prescriber_rx prescriber_rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON ((prescriber_rx.rollup_month = mth.month_ending))) LEFT  JOIN product.basket b ON ((prescriber_rx.basket_id = b.basket_id)))
 WHERE ((prescriber_rx.nrx_count IS NOT NULL) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))
 GROUP BY prescriber_rx.market_name,
          prescriber_rx.payer_plan_number,
          b.teva_product_code
 ORDER BY prescriber_rx.payer_plan_number,
          b.teva_product_code,
          sum(CASE WHEN (prescriber_rx.date = add_months(last_day(prescriber_rx.data_date), (-1))) THEN prescriber_rx.nrx_count ELSE NULL::float END);

CREATE  VIEW outbound.zzz_zs_agile_sp_programs AS
 SELECT p.event_number AS EVENT_NUMBER,
        p.parent_event_number AS PARENT_EVENT_NUMBER,
        p.event_name AS EVENT_NAME,
        p.event_status_code AS EVENT_STATUS_CODE,
        p.event_status_description AS EVENT_STATUS_DESCRIPTION,
        to_char(p.event_status_change_date, 'YYYY-MM-DD'::varchar(10)) AS EVENT_STATUS_CHANGE_DATE,
        to_char(p.event_start_date, 'YYYY-MM-DD'::varchar(10)) AS EVENT_START_DATE,
        to_char(p.event_end_date, 'YYYY-MM-DD'::varchar(10)) AS EVENT_END_DATE,
        p.event_time_zone AS EVENT_TIME_ZONE,
        p.funding_source AS FUNDING_SOURCE,
        p.event_type AS EVENT_TYPE,
        p.event_type_description AS EVENT_TYPE_DESCRIPTION,
        p.event_format AS EVENT_FORMAT,
        p.event_location AS EVENT_LOCATION,
        to_char(p.pending_mgmnt_approval_date, 'YYYY-MM-DD'::varchar(10)) AS PENDING_MGMNT_APPROVAL_DATE,
        to_char(p.event_approval_date, 'YYYY-MM-DD'::varchar(10)) AS EVENT_APPROVAL_DATE,
        p.event_approver_id AS EVENT_APPROVER_ID,
        to_char(p.event_schedule_date, 'YYYY-MM-DD'::varchar(10)) AS EVENT_SCHEDULE_DATE,
        to_char(p.attendee_closeout_date, 'YYYY-MM-DD'::varchar(10)) AS ATTENDEE_CLOSEOUT_DATE,
        to_char(p.financial_closeout_date, 'YYYY-MM-DD'::varchar(10)) AS FINANCIAL_CLOSEOUT_DATE,
        to_char(p.cancellation_date, 'YYYY-MM-DD'::varchar(10)) AS CANCELLATION_DATE,
        p.cancellation_reason AS CANCELLATION_REASON,
        p.cancellation_source AS CANCELLATION_SOURCE,
        p.event_venue_min_cnt_req_ind AS EVENT_VENUE_MIN_CNT_REQ_IND,
        p.event_venue_min_count AS EVENT_VENUE_MIN_COUNT,
        p.estimated_attendance AS ESTIMATED_ATTENDANCE,
        p.venue_id AS VENUE_ID,
        p.venue_full_name AS VENUE_FULL_NAME,
        p.venue_address_line_1 AS VENUE_ADDRESS_LINE_1,
        p.venue_address_line_2 AS VENUE_ADDRESS_LINE_2,
        p.venue_address_line_3 AS VENUE_ADDRESS_LINE_3,
        p.venue_address_line_4 AS VENUE_ADDRESS_LINE_4,
        p.venue_city AS VENUE_CITY,
        p.venue_state AS VENUE_STATE_PROVINCE,
        p.venue_zip AS VENUE_POSTAL_CODE,
        p.venue_postal_extended_code AS VENUE_POSTAL_EXTENDED_CODE,
        p.venue_country_code AS VENUE_COUNTRY_CODE,
        p.venue_contact AS VENUE_CONTACT,
        p.venue_phone AS VENUE_PHONE,
        p.venue_fax AS VENUE_FAX,
        p.venue_email AS VENUE_EMAIL,
        p.trade_secret_indicator AS TRADE_SECRET_INDICATOR,
        p.trade_secret_reason AS TRADE_SECRET_REASON,
        p.custom_field_1 AS CUSTOM_FIELD_1,
        p.custom_field_2 AS CUSTOM_FIELD_2,
        p.custom_field_3 AS CUSTOM_FIELD_3,
        p.custom_field_4 AS CUSTOM_FIELD_4,
        p.custom_field_5 AS CUSTOM_FIELD_5,
        e.payment_id AS PAYEMNT_ID,
        e.expense_category AS EXPENSE_CATEGORY,
        CASE mod(e.amount, 1::float) WHEN NULLSEQUAL 0::float THEN ((e.amount)::int)::varchar ELSE rtrim((e.amount)::varchar, '0'::varchar(1)) END AS AMOUNT
 FROM (datamart.event p LEFT  JOIN datamart.event_expense e ON ((p.event_number = e.event_number)));

CREATE  VIEW outbound.zzz_asi_survey_data AS
(( SELECT a.veeva_account_id,
        a.bu,
        a.survey_update_date,
        a.survey,
        a.question,
        a.answer,
        a.response_update_date,
        a.response_create_date
 FROM ( SELECT t.account_vod__c AS veeva_account_id,
        substr(s.territory_vod__c, 1, 2) AS bu,
        to_char(sqr_main.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS survey_update_date,
        s.name AS survey,
        CASE WHEN ((s.name = ANY (ARRAY['Pharmacy Survey'::varchar(34), 'Respiratory - RespiClick Readiness'::varchar(34)])) AND (q.order_vod__c = ANY (ARRAY[0::numeric(18,0), 1::numeric(18,0), 2::numeric(18,0)]))) THEN (concat(((q.order_vod__c + 1::numeric(18,0)))::varchar, '. '::varchar(2)) || sqr_main.question_text_vod__c) WHEN ((s.name = ANY (ARRAY['Pharmacy Survey'::varchar(34), 'Respiratory - RespiClick Readiness'::varchar(34)])) AND (q.order_vod__c <> ALL (ARRAY[0::numeric(18,0), 1::numeric(18,0), 2::numeric(18,0)]))) THEN ('. '::varchar(2) || sqr_main.question_text_vod__c) ELSE sqr_main.question_text_vod__c END AS question,
        sqr_main.response AS answer,
        to_char(sqr_main.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS response_update_date,
        to_char(sqr_main.createddate, 'YYYY-MM-DD'::varchar(10)) AS response_create_date,
        row_number() OVER (PARTITION BY t.account_vod__c, q.id, sqr_main.response ORDER BY sqr_main.lastmodifieddate DESC) AS rnk
 FROM (((veeva.survey s JOIN veeva.survey_question q ON ((s.id = q.survey_vod__c))) JOIN ( SELECT sqr4.createddate,
        sqr4.lastmodifieddate,
        sqr4.survey_target_vod__c,
        sqr4.survey_question_vod__c,
        sqr4.question_text_vod__c,
        response.response
 FROM (( SELECT sqr3.id,
        sqr3.createddate,
        sqr3.lastmodifieddate,
        sqr3.survey_target_vod__c,
        sqr3.survey_question_vod__c,
        sqr3.question_text_vod__c,
        row_number() OVER (PARTITION BY sqr3.id ORDER BY sqr3.file_id DESC) AS rnk
 FROM veeva.survey_question_response sqr3
 WHERE (sqr3.question_text_vod__c !~~ '%Adasuve%Review%'::varchar(16))) sqr4 JOIN ( SELECT "substring"(v.values, 1, 18) AS id,
        "substring"(v.values, 19, length(v.values)) AS response
 FROM ( SELECT public.MapItems(r.v1) OVER () AS ( keys, values )
 FROM ( SELECT public.MapDelimitedExtractor((coalesce((sqr2.id || replace(sqr2.response_vod__c, ';'::varchar(1), (';'::varchar(1) || sqr2.id))), sqr2.id))::long varchar(10468) USING PARAMETERS delimiter=';'::varchar(1)) AS v1
 FROM ( SELECT sqr1.id,
        sqr1.response_vod__c,
        row_number() OVER (PARTITION BY st.account_vod__c, sqr1.survey_question_vod__c ORDER BY sqr1.lastmodifieddate DESC) AS rnk
 FROM (veeva.survey_question_response sqr1 JOIN veeva.survey_target st ON ((sqr1.survey_target_vod__c = st.id)))
 WHERE (sqr1.question_text_vod__c !~~ '%Adasuve%Review%'::varchar(16))) sqr2
 WHERE (sqr2.rnk = 1)) r) v
 GROUP BY "substring"(v.values, 1, 18),
          "substring"(v.values, 19, length(v.values))) response ON (((sqr4.id = response.id) AND (sqr4.rnk = 1))))) sqr_main ON ((q.id = sqr_main.survey_question_vod__c))) JOIN veeva.survey_target t ON ((t.id = sqr_main.survey_target_vod__c)))
 WHERE ((s.file_id = ( SELECT max(survey.file_id) AS MAX
 FROM veeva.survey)) AND (q.file_id = ( SELECT max(survey_question.file_id) AS MAX
 FROM veeva.survey_question)) AND (t.file_id = ( SELECT max(survey_target.file_id) AS MAX
 FROM veeva.survey_target)) AND (s.name = ANY (ARRAY['Pharmacy Survey'::varchar(42), 'Profiling and Developing Product Champions'::varchar(42), 'REMS Enrollment and Formulary'::varchar(42), 'Respiratory - RespiClick Readiness'::varchar(42), 'Respiratory Business Survey'::varchar(42), 'Respiratory Professional Survey'::varchar(42), 'e-Rx Survey'::varchar(42)])))) a
 WHERE (a.rnk = 1) UNION  SELECT B.veeva_account_id,
        B.bu,
        max(B.survey_update_date) OVER (PARTITION BY B.veeva_account_id),
        B.survey,
        B.question,
        B.answer,
        B.response_update_date,
        B.response_create_date
 FROM ( SELECT t.account_vod__c AS veeva_account_id,
        substr(s.territory_vod__c, 1, 2) AS bu,
        to_char(r.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS survey_update_date,
        (s.name || ' B'::varchar(2)) AS survey,
        r.question_text_vod__c AS question,
        r.response AS answer,
        to_char(r.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS response_update_date,
        to_char(r.createddate, 'YYYY-MM-DD'::varchar(10)) AS response_create_date,
        row_number() OVER (PARTITION BY t.account_vod__c, q.id ORDER BY r.lastmodifieddate DESC) AS rnk
 FROM (((veeva.survey s JOIN veeva.survey_question q ON ((s.id = q.survey_vod__c))) JOIN ( SELECT a.createddate,
        a.lastmodifieddate,
        a.survey_target_vod__c,
        a.survey_question_vod__c,
        a.question_text_vod__c,
        response.response
 FROM (( SELECT sqr.id,
        sqr.createddate,
        sqr.lastmodifieddate,
        sqr.survey_target_vod__c,
        sqr.survey_question_vod__c,
        sqr.question_text_vod__c
 FROM ( SELECT survey_question_response.id,
        survey_question_response.isdeleted,
        survey_question_response.name,
        survey_question_response.recordtypeid,
        survey_question_response.createddate,
        survey_question_response.createdbyid,
        survey_question_response.lastmodifieddate,
        survey_question_response.lastmodifiedbyid,
        survey_question_response.systemmodstamp,
        survey_question_response.mayedit,
        survey_question_response.islocked,
        survey_question_response.survey_target_vod__c,
        survey_question_response.answer_choice_vod__c,
        survey_question_response.date_vod__c,
        survey_question_response.datetime_vod__c,
        survey_question_response.external_id_vod__c,
        survey_question_response.mobile_id_vod__c,
        survey_question_response.number_vod__c,
        survey_question_response.order_vod__c,
        survey_question_response.question_text_vod__c,
        survey_question_response.required_vod__c,
        survey_question_response.response_hash_vod__c,
        survey_question_response.response_vod__c,
        survey_question_response.score_vod__c,
        survey_question_response.survey_question_vod__c,
        survey_question_response.text_vod__c,
        survey_question_response.type_vod__c,
        survey_question_response.file_id,
        survey_question_response.record_id
 FROM veeva.survey_question_response
 WHERE (survey_question_response.question_text_vod__c !~~ '%Adasuve%Review%'::varchar(16))) sqr) a LEFT  JOIN ( SELECT "substring"(v.values, 1, 18) AS id,
        "substring"(v.values, 19, length(v.values)) AS response
 FROM ( SELECT public.MapItems(r.v1) OVER () AS ( keys, values )
 FROM ( SELECT public.MapDelimitedExtractor(((sqr.id || replace(sqr.response_vod__c, ';'::varchar(1), (';'::varchar(1) || sqr.id))))::long varchar(10468) USING PARAMETERS delimiter=';'::varchar(1)) AS v1
 FROM veeva.survey_question_response sqr
 WHERE (sqr.file_id = ( SELECT max(survey_question_response.file_id) AS max
 FROM veeva.survey_question_response))) r) v
 GROUP BY "substring"(v.values, 1, 18),
          "substring"(v.values, 19, length(v.values))) response ON ((a.id = response.id)))) r ON ((q.id = r.survey_question_vod__c))) JOIN veeva.survey_target t ON ((t.id = r.survey_target_vod__c)))
 WHERE ((s.file_id = ( SELECT max(s1.file_id) AS MAX
 FROM veeva.survey s1)) AND (q.file_id = ( SELECT max(q1.file_id) AS MAX
 FROM veeva.survey_question q1)) AND (t.file_id = ( SELECT max(t1.file_id) AS MAX
 FROM veeva.survey_target t1)) AND (s.name = 'e-Rx Survey'::varchar(11)) AND (q.order_vod__c = 1::numeric(18,0)))) B
 WHERE (B.rnk = 1)
 GROUP BY B.veeva_account_id,
          B.bu,
          B.survey_update_date,
          B.survey,
          B.question,
          B.answer,
          B.response_update_date,
          B.response_create_date) UNION  SELECT a.veeva_account_id,
        a.bu,
        a.survey_update_date,
        a.survey,
        a.question,
        a.answer,
        a.response_update_date,
        a.response_create_date
 FROM ( SELECT t.account_vod__c AS veeva_account_id,
        substr(s.territory_vod__c, 1, 2) AS bu,
        to_char(r.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS survey_update_date,
        s.name AS survey,
        '*Future Scheduled Adasuve Formulary Review Date'::varchar(47) AS question,
        r.response AS answer,
        to_char(r.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS response_update_date,
        to_char(r.createddate, 'YYYY-MM-DD'::varchar(10)) AS response_create_date,
        row_number() OVER (PARTITION BY s.id, q.id, t.account_vod__c, r.response ORDER BY r.lastmodifieddate DESC) AS rnk
 FROM (((veeva.survey s JOIN veeva.survey_question q ON ((s.id = q.survey_vod__c))) JOIN ( SELECT sqr_yr.survey_target_vod__c,
        sqr_yr.survey_question_vod__c,
        sqr_yr.question_text_vod__c,
        sqr_yr.lastmodifieddate,
        sqr_yr.createddate,
        ((((coalesce(sqr_yr.response_vod__c, ''::varchar) || '-'::varchar(1)) || CASE WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Jan'::varchar(3)) THEN '01'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Feb'::varchar(3)) THEN '02'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Mar'::varchar(3)) THEN '03'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Apr'::varchar(3)) THEN '04'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'May'::varchar(3)) THEN '05'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Jun'::varchar(3)) THEN '06'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Jul'::varchar(3)) THEN '07'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Aug'::varchar(3)) THEN '08'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Sep'::varchar(3)) THEN '09'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Oct'::varchar(3)) THEN '10'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Nov'::varchar(3)) THEN '11'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Dec'::varchar(3)) THEN '12'::varchar(2) ELSE ''::varchar END) || '-'::varchar(1)) || coalesce(sqr_day.response_vod__c, ''::varchar)) AS response
 FROM ((( SELECT sqr.survey_target_vod__c,
        sqr.survey_question_vod__c,
        sqr.question_text_vod__c,
        sqr.response_vod__c,
        sqr.lastmodifieddate,
        sqr.createddate,
        row_number() OVER (PARTITION BY sqr.survey_target_vod__c, sqr.survey_question_vod__c ORDER BY sqr.createddate DESC) AS rnk
 FROM ( SELECT survey_question_response.survey_target_vod__c,
        survey_question_response.survey_question_vod__c,
        survey_question_response.question_text_vod__c,
        survey_question_response.response_vod__c,
        survey_question_response.lastmodifieddate,
        survey_question_response.createddate,
        row_number() OVER (PARTITION BY survey_question_response.survey_target_vod__c, survey_question_response.survey_question_vod__c ORDER BY survey_question_response.lastmodifieddate DESC) AS rnk
 FROM veeva.survey_question_response
 WHERE (survey_question_response.question_text_vod__c ~~ '%Future Scheduled Adasuve % Review Year%'::varchar(40))) sqr
 WHERE (sqr.rnk = 1)) sqr_yr JOIN ( SELECT sqr.survey_target_vod__c,
        sqr.survey_question_vod__c,
        sqr.question_text_vod__c,
        sqr.response_vod__c,
        sqr.rnk
 FROM ( SELECT qr.survey_target_vod__c,
        qr.survey_question_vod__c,
        qr.question_text_vod__c,
        qr.response_vod__c,
        row_number() OVER (PARTITION BY st.account_vod__c, qr.survey_question_vod__c ORDER BY qr.lastmodifieddate DESC) AS rnk
 FROM (veeva.survey_question_response qr JOIN ( SELECT survey_target.id,
        survey_target.account_vod__c
 FROM veeva.survey_target
 GROUP BY survey_target.id,
          survey_target.account_vod__c) st ON ((qr.survey_target_vod__c = st.id)))
 WHERE (qr.question_text_vod__c ~~ '%Future Scheduled Adasuve % Review Month%'::varchar(41))) sqr
 WHERE (sqr.rnk = 1)) sqr_mth ON (((sqr_mth.survey_target_vod__c = sqr_yr.survey_target_vod__c) AND (sqr_yr.rnk = 1)))) JOIN ( SELECT sqr.survey_target_vod__c,
        sqr.survey_question_vod__c,
        sqr.question_text_vod__c,
        sqr.response_vod__c,
        sqr.rnk
 FROM ( SELECT survey_question_response.survey_target_vod__c,
        survey_question_response.survey_question_vod__c,
        survey_question_response.question_text_vod__c,
        survey_question_response.response_vod__c,
        row_number() OVER (PARTITION BY survey_question_response.survey_target_vod__c, survey_question_response.survey_question_vod__c ORDER BY survey_question_response.lastmodifieddate DESC) AS rnk
 FROM veeva.survey_question_response
 WHERE (survey_question_response.question_text_vod__c ~~ '%Future Scheduled Adasuve % Review Date%'::varchar(40))) sqr
 WHERE (sqr.rnk = 1)) sqr_day ON ((sqr_day.survey_target_vod__c = sqr_yr.survey_target_vod__c)))) r ON ((q.id = r.survey_question_vod__c))) JOIN veeva.survey_target t ON ((t.id = r.survey_target_vod__c)))
 WHERE ((s.file_id = ( SELECT max(survey.file_id) AS max
 FROM veeva.survey)) AND (q.file_id = ( SELECT max(survey_question.file_id) AS max
 FROM veeva.survey_question)) AND (t.file_id = ( SELECT max(survey_target.file_id) AS max
 FROM veeva.survey_target)) AND (s.name = 'REMS Enrollment and Formulary'::varchar(29)))) a
 WHERE (a.rnk = 1)) UNION  SELECT a.veeva_account_id,
        a.bu,
        a.survey_update_date,
        a.survey,
        a.question,
        a.answer,
        a.response_update_date,
        a.response_create_date
 FROM ( SELECT t.account_vod__c AS veeva_account_id,
        substr(s.territory_vod__c, 1, 2) AS bu,
        to_char(r.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS survey_update_date,
        s.name AS survey,
        '*Prior Adasuve Formulary Review Date'::varchar(36) AS question,
        r.response AS answer,
        to_char(r.lastmodifieddate, 'YYYY-MM-DD'::varchar(10)) AS response_update_date,
        to_char(r.createddate, 'YYYY-MM-DD'::varchar(10)) AS response_create_date,
        row_number() OVER (PARTITION BY s.id, q.id, t.account_vod__c, r.response ORDER BY r.lastmodifieddate DESC) AS rnk
 FROM (((veeva.survey s JOIN veeva.survey_question q ON ((s.id = q.survey_vod__c))) JOIN ( SELECT sqr_yr.survey_target_vod__c,
        sqr_yr.survey_question_vod__c,
        sqr_yr.question_text_vod__c,
        sqr_yr.lastmodifieddate,
        sqr_yr.createddate,
        ((coalesce(sqr_yr.response_vod__c, ''::varchar) || '-'::varchar(1)) || CASE WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Jan'::varchar(3)) THEN '01'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Feb'::varchar(3)) THEN '02'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Mar'::varchar(3)) THEN '03'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Apr'::varchar(3)) THEN '04'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'May'::varchar(3)) THEN '05'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Jun'::varchar(3)) THEN '06'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Jul'::varchar(3)) THEN '07'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Aug'::varchar(3)) THEN '08'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Sep'::varchar(3)) THEN '09'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Oct'::varchar(3)) THEN '10'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Nov'::varchar(3)) THEN '11'::varchar(2) WHEN ("substring"(sqr_mth.response_vod__c, 1, 3) = 'Dec'::varchar(3)) THEN '12'::varchar(2) ELSE ''::varchar END) AS response
 FROM (( SELECT sqr.survey_target_vod__c,
        sqr.survey_question_vod__c,
        sqr.question_text_vod__c,
        sqr.response_vod__c,
        sqr.lastmodifieddate,
        sqr.createddate,
        row_number() OVER (PARTITION BY sqr.survey_target_vod__c, sqr.survey_question_vod__c ORDER BY sqr.createddate DESC) AS rnk
 FROM ( SELECT qr.survey_target_vod__c,
        qr.survey_question_vod__c,
        qr.question_text_vod__c,
        qr.response_vod__c,
        qr.lastmodifieddate,
        qr.createddate,
        row_number() OVER (PARTITION BY st.account_vod__c, qr.survey_question_vod__c ORDER BY qr.lastmodifieddate DESC) AS rnk
 FROM (veeva.survey_question_response qr JOIN ( SELECT survey_target.id,
        survey_target.account_vod__c
 FROM veeva.survey_target
 GROUP BY survey_target.id,
          survey_target.account_vod__c) st ON ((qr.survey_target_vod__c = st.id)))
 WHERE (qr.question_text_vod__c ~~ '%Prior Adasuve % Review Year'::varchar(28))) sqr
 WHERE (sqr.rnk = 1)) sqr_yr JOIN ( SELECT sqr.survey_target_vod__c,
        sqr.survey_question_vod__c,
        sqr.question_text_vod__c,
        sqr.response_vod__c,
        sqr.rnk
 FROM ( SELECT survey_question_response.survey_target_vod__c,
        survey_question_response.survey_question_vod__c,
        survey_question_response.question_text_vod__c,
        survey_question_response.response_vod__c,
        row_number() OVER (PARTITION BY survey_question_response.survey_target_vod__c, survey_question_response.survey_question_vod__c ORDER BY survey_question_response.lastmodifieddate DESC) AS rnk
 FROM veeva.survey_question_response
 WHERE (survey_question_response.question_text_vod__c ~~ '%Prior Adasuve % Review Month'::varchar(29))) sqr
 WHERE (sqr.rnk = 1)) sqr_mth ON (((sqr_mth.survey_target_vod__c = sqr_yr.survey_target_vod__c) AND (sqr_yr.rnk = 1))))) r ON ((q.id = r.survey_question_vod__c))) JOIN veeva.survey_target t ON ((t.id = r.survey_target_vod__c)))
 WHERE ((s.file_id = ( SELECT max(survey.file_id) AS max
 FROM veeva.survey)) AND (q.file_id = ( SELECT max(survey_question.file_id) AS max
 FROM veeva.survey_question)) AND (t.file_id = ( SELECT max(survey_target.file_id) AS max
 FROM veeva.survey_target)) AND (s.name = 'REMS Enrollment and Formulary'::varchar(29)))) a
 WHERE (a.rnk = 1);

CREATE  VIEW outbound.zzz_zs_agile_copay_voucher_drops AS
 SELECT d.tvcmid AS TVCMID,
        d.ims_id AS IMS_ID,
        d.veeva_account_id AS VEEVA_ACCOUNT_ID,
        d.item_type AS RESOURCE_TYPE,
        d.territory_number AS TERRITORY_NUM,
        d.distribution_date AS DISTRIBUTION_DATE,
        d.quantity AS QTY
 FROM datamart.sfa_promotional_items d
 WHERE ((d.product_name = 'NUVIGIL'::varchar(7)) AND (d.item_type = 'Voucher/Co-Pay'::varchar(14)) AND (d.ims_id IS NOT NULL) AND (d.distribution_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (d.distribution_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))));

CREATE  VIEW outbound.zzz_create_tb_cb_accountsummary AS
 SELECT cd.account_id AS ACCOUNT_ID,
        cd.location_id AS LOCATION_ID,
        cd.dea_number AS DEA_NUMBER,
        cd.end_customer AS END_CUSTOMER,
        cd.address_1 AS ADDRESS_1,
        cd.address_2 AS ADDRESS_2,
        cd.city AS CITY,
        cd.state AS STATE,
        cd.zip AS ZIP,
        cd.contract_title AS CONTRACT_TITLE,
        cd.contract_id AS CONTRACT_ID,
        cd.wholesaler_name AS WHOLESALER_NAME,
        cd.hin AS HIN,
        NULL AS CONTRACT_ALIAS,
        cd.wholesaler_dea AS WHOLESALER_DEA,
        cd.cot_source AS COT_SOURCE,
        cd.class_of_trade AS CLASS_OF_TRADE
 FROM datamart.chargeback_demographics cd;

CREATE  VIEW outbound.zzz_asi_rx_by_market AS
(SELECT rx.market_name, rx.ims_client_number AS ims_client_num, rx.ims_report_number_cnt AS ims_report_num, NULL AS zip_other, rx.ims_id, d.primary_specialty AS specialty, rx.payer_plan_number AS plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, NULL AS rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num, NULL AS filler_01, NULL AS me_num, d.last_name, d.first_name, d.middle_name, d.address_line1 AS address, d.city, d.state, d.zip, d.address_line2 AS supplemental_data, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END AS plan_name, rx.data_date, 48 AS bucket_count, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (datamart.prescriber_rx rx JOIN customer_master.hcp_demo d ON ((rx.tvcmid = d.tvcmid))) WHERE ((rx.market_name = ANY (ARRAY['MULTIPLE SCLEROSIS'::varchar(18), 'PAIN'::varchar(4), 'ANTI-PARKINSON'::varchar(14), 'SMR'::varchar(3), 'WAKE'::varchar(4)])) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'MONTH'::varchar(5)) AND (d.file_id = (SELECT max(hcp_demo.file_id) AS file_id FROM customer_master.hcp_demo))) GROUP BY rx.market_name, rx.ims_client_number, rx.ims_report_number_cnt, rx.ims_id, d.primary_specialty, rx.payer_plan_number, btrim(to_char(rx.sales_category, '00'::varchar(2))), btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))), d.last_name, d.first_name, d.middle_name, d.address_line1, d.city, d.state, d.zip, d.address_line2, CASE WHEN (rx.plan_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || rx.plan_name) || '"'::varchar(1)) ELSE rx.plan_name END, rx.data_date UNION SELECT mkt.market_name, '111'::varchar(3) AS ims_client_num, '55'::varchar(2) AS ims_report_num, NULL AS zip_other, sp.ims_id, d.primary_specialty AS specialty, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END AS plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pr.ims_product_group_num, NULL AS filler_01, NULL AS me_num, d.last_name, d.first_name, d.middle_name, d.address_line1 AS address, d.city, d.state, d.zip, d.address_line2 AS supplemental_data, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3 MAIL ORDER DATA UNSPEC'::varchar(25) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3 TYSABRI MAIL ORDER DATA UNSPEC'::varchar(33) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME MAIL ORDER DATA UNSPEC'::varchar(28) ELSE NULL END AS plan_name, sp.ship_date, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 0) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((((datamart.specialty_pharmacy_shipment sp JOIN integration.ims_week_buckets mth ON ((last_day(sp.ship_date) = mth.month_ending))) JOIN customer_master.hcp_demo d ON ((sp.tvcmid = d.tvcmid))) JOIN (SELECT bi.entity_id, pb.name AS market_name FROM (product.basket_item bi JOIN product.basket pb ON ((bi.basket_id = pb.basket_id))) WHERE ((pb.basket_type = 'market'::varchar(6)) AND (pb.name = 'MS MARKET'::varchar(9)))) mkt ON ((sp.basket_id = mkt.entity_id))) LEFT JOIN (SELECT sp.entity_id AS basket_id, sp.source_product_code AS ims_product_group_num, sp.source_product_name FROM (metadata.data_feed_metadata dfeed JOIN product.source_product sp ON ((dfeed.feed_id = sp.feed_id))) WHERE ((dfeed.short_name = 'ims_mhj_cnt_m'::varchar(13)) AND (sp.source_client_num = '632'::varchar(3)) AND (sp.source_report_num = '2'::varchar(1)))) pr ON ((sp.basket_id = pr.basket_id))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['Prime Therapeutics'::varchar(18), 'OptumRx'::varchar(7)])) AND (sp.ims_id IS NOT NULL) AND (d.file_id = (SELECT max(hcp_demo.file_id) AS file_id FROM customer_master.hcp_demo))) GROUP BY mkt.market_name, sp.ims_id, d.primary_specialty, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END, pr.ims_product_group_num, d.last_name, d.first_name, d.middle_name, d.address_line1, d.city, d.state, d.zip, d.address_line2, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3 MAIL ORDER DATA UNSPEC'::varchar(25) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3 TYSABRI MAIL ORDER DATA UNSPEC'::varchar(33) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME MAIL ORDER DATA UNSPEC'::varchar(28) ELSE NULL END, sp.ship_date) UNION SELECT mkt.name AS market_name, cm.zip, '111'::varchar(3) AS ims_client_num, '55'::varchar(2) AS ims_report_num, NULL AS zip_other, NULL AS ims_id, NULL AS specialty, 'CMOP000000'::varchar(10) AS payer_plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pr.ims_product_group_num, NULL AS filler_01, NULL AS me_num, NULL AS last_name, NULL AS first_name, NULL AS address, NULL AS city, NULL AS state, NULL AS zip, NULL AS supplemental_data, 'VA DATA UNSPEC'::varchar(14) AS plan_name, mth.month_ending AS data_month, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 0) THEN cm.total_rxs ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 1) THEN cm.total_rxs ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 2) THEN cm.total_rxs ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 3) THEN cm.total_rxs ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 4) THEN cm.total_rxs ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 5) THEN cm.total_rxs ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 6) THEN cm.total_rxs ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 7) THEN cm.total_rxs ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 8) THEN cm.total_rxs ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 9) THEN cm.total_rxs ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 10) THEN cm.total_rxs ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 11) THEN cm.total_rxs ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 12) THEN cm.total_rxs ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 13) THEN cm.total_rxs ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 14) THEN cm.total_rxs ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 15) THEN cm.total_rxs ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 16) THEN cm.total_rxs ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 17) THEN cm.total_rxs ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 18) THEN cm.total_rxs ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 19) THEN cm.total_rxs ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 20) THEN cm.total_rxs ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 21) THEN cm.total_rxs ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 22) THEN cm.total_rxs ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 23) THEN cm.total_rxs ELSE NULL::float END) AS trx_024 FROM (((datamart.cmop_rx cm JOIN integration.ims_week_buckets mth ON ((last_day(cm.comp_month) = mth.month_ending))) JOIN (SELECT bi.entity_id, pb.name FROM (product.basket_item bi JOIN product.basket pb ON ((bi.basket_id = pb.basket_id))) WHERE ((pb.basket_type = 'market'::varchar(6)) AND (pb.name = ANY (ARRAY['MS MARKET'::varchar(9), 'PD MARKET'::varchar(9)])))) mkt ON ((cm.basket_id = mkt.entity_id))) LEFT JOIN (SELECT sp.entity_id AS basket_id, sp.source_product_code AS ims_product_group_num, sp.source_product_name FROM (metadata.data_feed_metadata dfeed JOIN product.source_product sp ON ((dfeed.feed_id = sp.feed_id))) WHERE ((dfeed.short_name = 'ims_mhj_cnt_m'::varchar(13)) AND (sp.source_client_num = '632'::varchar(3)) AND (sp.source_report_num = '2'::varchar(1)))) pr ON ((cm.basket_id = pr.basket_id))) GROUP BY mkt.name, cm.zip, pr.ims_product_group_num, mth.month_ending;

CREATE  VIEW outbound.zzz_asi_rx_by_market_pain AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '74'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.zzz_asi_rx_by_market_wake AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '71'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.zzz_asi_rx_by_market_oc AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '757'::varchar(3)) AND (rx.ims_report_number_cnt = '23'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.zzz_zs_agile_copay_redemptions AS
 SELECT CASE mod(cd.physician_tvcmid, 1::float) WHEN NULLSEQUAL 0::float THEN cd.physician_tvcmid ELSE cd.physician_tvcmid END AS TVCMID,
        cd.physician_ims_id AS IMS_ID,
        cd.physician_veeva_id AS VEEVA_ACCOUNT_ID,
        p.program_number AS ASI_PROGRAM_NUM,
        p.program_description AS PROGRAM_DESC,
        cd.copay_card_number AS COPAY_CARD_NUM,
        coalesce(cd.physician_zip, cd.pharmacy_zip) AS ZIP_CODE,
        to_char(cd.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        cd.basket_name AS BRAND_NAME,
        replace(cd.basket_name, 'NUVIGIL '::varchar(8), ''::varchar) AS DRUG_DESC,
        (cd.quantity)::int AS QTY
 FROM (datamart.copay cd LEFT  JOIN reference.copay_voucher_program p ON (((cd.program_number = p.program_number) AND (cd.redemption_type = p.redemption_type))))
 WHERE ((cd.basket_name ~~ '%NUVIGIL%'::varchar(9)) AND (cd.fill_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (cd.fill_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (cd.report_frequency = 'WEEK'::varchar(4)) AND (cd.redemption_type = 'COPAY'::varchar(5)))
 GROUP BY CASE mod(cd.physician_tvcmid, 1::float) WHEN NULLSEQUAL 0::float THEN cd.physician_tvcmid ELSE cd.physician_tvcmid END,
          cd.physician_ims_id,
          cd.physician_veeva_id,
          p.program_number,
          p.program_description,
          cd.copay_card_number,
          coalesce(cd.physician_zip, cd.pharmacy_zip),
          to_char(cd.fill_date, 'YYYY-MM-DD'::varchar(10)),
          cd.basket_name,
          replace(cd.basket_name, 'NUVIGIL '::varchar(8), ''::varchar),
          (cd.quantity)::int;

CREATE  VIEW outbound.zzz_zs_agile_samples AS
 SELECT substr(c.territory_vod__c, 1, 2) AS SALES_FORCE_ID,
        c.territory_vod__c AS TERRITORY_NUM,
        pcd.tvcmid AS TVCMID,
        pcd.ims_id AS IMS_ID,
        s.veeva_id AS VEEVA_ACCOUNT_ID,
        to_char(s.ship_date, 'YYYY-MM-DD'::varchar(10)) AS SHIP_DATE,
        b.teva_product_code AS PRODUCT_CODE,
        s.basket_name AS PRODUCT,
        CASE mod(s.ship_qty, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (s.ship_qty)::varchar ELSE rtrim((s.ship_qty)::varchar, '0'::varchar(1)) END AS SHIP_QTY
 FROM (((datamart.sample_shipment s LEFT  JOIN ( SELECT call.name,
        call.territory_vod__c
 FROM veeva.call
 WHERE (substr(call.territory_vod__c, 1, 2) = 'TP'::varchar(2))
 GROUP BY call.name,
          call.territory_vod__c) c ON ((c.name = s.order_id))) LEFT  JOIN datamart.prescriber_combined_demographics pcd ON (((s.veeva_id = pcd.veeva_account_id) AND (pcd.sales_force_id = 'TP'::varchar(2)) AND (pcd.ptr_territory_type <> 'Mirror'::varchar(6))))) JOIN product.basket b ON ((s.basket_id = b.basket_id)))
 WHERE ((s.ship_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (s.ship_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (b.teva_product_code ~~ '100N%'::varchar(5)));

CREATE  VIEW outbound.zzz_zs_agile_details AS
 SELECT c.tvcmid AS TVCMID,
        c.ims_id AS IMS_ID,
        c.veeva_account_id AS VEEVA_ACCOUNT_ID,
        initcap(d.last_name) AS LAST_NAME,
        initcap(d.first_name) AS FIRST_NAME,
        initcap(d.middle_name) AS MIDDLE_NAME,
        d.credentials AS DEGREE,
        d.zip AS ZIP,
        c.rep_id AS REP_ID,
        c.territory_number AS TERRITORY_NUMBER,
        to_char(c.call_date, 'YYYY-MM-DD'::varchar(10)) AS CALL_DATE,
        cd.product AS PRODUCT,
        cd.detail_position AS DETAIL_POSITION
 FROM datamart.sfa_call c, datamart.sfa_call_detail cd, datamart.sfa_demographics d, datamart.current_alignment z
 WHERE ((c.call_id = cd.call_id) AND (c.sales_force_id = 'TC'::varchar(2)) AND (c.sales_force_id = d.sales_force_id) AND (c.territory_number = d.territory_number) AND (c.call_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (c.call_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (c.veeva_account_id = d.veeva_account_id) AND (d.zip = z.zip_code) AND (cd.product = 'NUVIGIL'::varchar(7)))
 GROUP BY c.tvcmid,
          c.ims_id,
          c.veeva_account_id,
          initcap(d.last_name),
          initcap(d.first_name),
          initcap(d.middle_name),
          d.credentials,
          d.zip,
          c.rep_id,
          c.territory_number,
          c.call_date,
          cd.product,
          cd.detail_position;

CREATE  VIEW outbound.zzz_v_asi_plan_name AS
 SELECT plantrak_workbook.payer_plan_number AS payer_plan_num,
        plantrak_workbook.plan_name,
        CASE WHEN (plantrak_workbook.payer_number = '000002'::varchar(6)) THEN plantrak_workbook.plan_name ELSE plantrak_workbook.payer_name END AS payer_name,
        plantrak_workbook.model
 FROM datamart.plantrak_workbook
 ORDER BY plantrak_workbook.payer_plan_number;

CREATE  VIEW outbound.zzz_ddd_category AS
 SELECT ddd_category.category_code AS CATEGORY_CODE,
        ddd_category.category_description AS CATEGORY_DESC,
        ddd_category.category_definition AS CATEGORY_DEFN
 FROM reference.ddd_category
 ORDER BY ddd_category.category_code;

CREATE  VIEW outbound.mcm_hcp_alignment AS
 SELECT cmid.id_num AS federation_id,
        t.territory_name,
        cp.territory_number,
        t.region_name,
        cp.region_number,
        t.area_name,
        cp.area_number,
        (now())::date AS created_date
 FROM ((datamart.call_plan cp JOIN datamart.tvcmid_xref cmid ON (((cp.tvcmid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN ( SELECT current_alignment.territory_number,
        current_alignment.territory_name,
        current_alignment.region_name,
        current_alignment.area_name
 FROM datamart.current_alignment
 GROUP BY current_alignment.territory_number,
          current_alignment.territory_name,
          current_alignment.region_name,
          current_alignment.area_name) t ON ((cp.territory_number = t.territory_number)))
 GROUP BY cmid.id_num,
          t.territory_name,
          cp.territory_number,
          t.region_name,
          cp.region_number,
          t.area_name,
          cp.area_number,
          (now())::date;

CREATE  VIEW outbound.mcm_product_segmentation AS
 SELECT cmid.id_num AS federation_id,
        rx.basket_id AS product_id,
        dec1.decile_name AS decile_name_1,
        dec1.decile_trx_count_6_mo AS "6_month_decile_1",
        dec1.decile_trx_count_12_mo AS "12_month_decile_1",
        dec2.decile_name AS decile_name_2,
        dec2.decile_trx_count_6_mo AS "6_month_decile_2",
        dec2.decile_trx_count_12_mo AS "12_month_decile_2",
        dec3.decile_name AS decile_name_3,
        dec3.decile_trx_count_6_mo AS "6_month_decile_3",
        dec3.decile_trx_count_12_mo AS "12_month_decile_3",
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, 0)) AND (rx.date <= rx.data_date)) THEN rx.trx_count ELSE NULL::float END) AS trx_cnt_01_01,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-2))) AND (rx.date <= rx.data_date)) THEN rx.trx_count ELSE NULL::float END) AS trx_cnt_01_03,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-5))) AND (rx.date <= rx.data_date)) THEN rx.trx_count ELSE NULL::float END) AS trx_cnt_01_06,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-11))) AND (rx.date <= rx.data_date)) THEN rx.trx_count ELSE NULL::float END) AS trx_cnt_01_12,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-23))) AND (rx.date <= rx.data_date)) THEN rx.trx_count ELSE NULL::float END) AS trx_cnt_01_24,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, 0)) AND (rx.date <= rx.data_date)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_cnt_01_01,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-2))) AND (rx.date <= rx.data_date)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_cnt_01_03,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-5))) AND (rx.date <= rx.data_date)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_cnt_01_06,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-11))) AND (rx.date <= rx.data_date)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_cnt_01_12,
        sum(CASE WHEN ((rx.date >= add_months(rx.data_date, (-23))) AND (rx.date <= rx.data_date)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_cnt_01_24,
        NULL AS call_plan_target,
        NULL AS call_plan_effective_date,
        NULL AS call_plan_end_date,
        ds.segment_name,
        ds.segment_value,
        NULL AS target_type_indicator,
        (now())::date AS create_date
 FROM ((((((datamart.prescriber_rx rx LEFT  JOIN reference.decile_extract_control dectrl ON ((rx.basket_id = dectrl.basket_id))) JOIN datamart.tvcmid_xref cmid ON (((rx.tvcmid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN datamart.rx_deciles dec1 ON (((rx.ims_id = dec1.ims_id) AND (rx.basket_id = dec1.basket_id) AND (dectrl.decile_name_1 = dec1.decile_name)))) LEFT  JOIN datamart.rx_deciles dec2 ON (((rx.ims_id = dec2.ims_id) AND (rx.basket_id = dec2.basket_id) AND (dectrl.decile_name_2 = dec2.decile_name)))) LEFT  JOIN datamart.rx_deciles dec3 ON (((rx.ims_id = dec3.ims_id) AND (rx.basket_id = dec3.basket_id) AND (dectrl.decile_name_3 = dec3.decile_name)))) LEFT  JOIN datamart.dynamic_segment ds ON (((cmid.id_num = ds.federation_id) AND (rx.basket_id = ds.basket_id))))
 WHERE (rx.basket_type = 'brand'::varchar(5))
 GROUP BY cmid.id_num,
          rx.basket_id,
          dec1.decile_name,
          dec1.decile_trx_count_6_mo,
          dec1.decile_trx_count_12_mo,
          dec2.decile_name,
          dec2.decile_trx_count_6_mo,
          dec2.decile_trx_count_12_mo,
          dec3.decile_name,
          dec3.decile_trx_count_6_mo,
          dec3.decile_trx_count_12_mo,
          ds.segment_name,
          ds.segment_value,
          (now())::date;

CREATE  VIEW outbound.zzz_tw_specialty_account AS
SELECT tw_account.specialty_pharmacy_data_source AS data_source, tw_account.customer_id AS customer_code, tw_account.customer_name, tw_account.parent_customer_id AS parent_customer_code, tw_account.parent_customer_name, tw_account.customer_type AS customer_type_code, tw_account.pvp_340B_id AS pvp_340b_id, NULL AS start_date, NULL AS end_date, 'Y'::varchar(1) AS active_ind, NULL AS dea_num, NULL AS hin FROM datamart.tw_account;

CREATE  VIEW outbound.zzz_tw_specialty_address AS
SELECT tw_address.specialty_pharmacy_data_source AS data_source, tw_address.address_id, tw_address.address, tw_address.city, tw_address.state, tw_address.zip_code, tw_address.phone, tw_address.fax, tw_address.email, tw_address.tax_id FROM datamart.tw_address;

CREATE  VIEW outbound.zzz_tw_specialty_addr_xref AS
SELECT tw_address_xref.specialty_pharmacy_data_source AS data_source, tw_address_xref.customer_code, tw_address_xref.address_id, tw_address_xref.address_type, NULL AS start_date, NULL AS end_date, 'Y'::varchar(1) AS active_ind FROM datamart.tw_address_xref;

CREATE  VIEW outbound.zzz_ahm_postalcodeterritory AS
 SELECT 'US'::varchar(2) AS "COUNTRY CODE",
        current_alignment.zip_code AS "POSTAL CODE",
        current_alignment.territory_number AS TERRITORY
 FROM datamart.current_alignment
 WHERE (current_alignment.territory_number !~~ '%ZZZZ%'::varchar(6))
 GROUP BY 'US'::varchar(2),
          current_alignment.zip_code,
          current_alignment.territory_number
 ORDER BY current_alignment.territory_number,
          current_alignment.zip_code,
          'US'::varchar(2);

CREATE  VIEW outbound.zzz_activity_voucher_coupon_redemption AS
 SELECT cmid.id_num AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(cw.rx_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        coalesce(cw.asi_txn_id, concat((cw.file_id)::varchar, (cw.record_id)::varchar)) AS trackback_id,
        NULL AS previous_activity,
        coalesce((sp.entity_id)::varchar(20), cw.ndc_code) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((('Voucher/Coupon Redemption,'::varchar(26) || coalesce(b.name, ''::varchar)) || ','::varchar(1)) || coalesce(cw.program_name, ''::varchar)) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((integration.copay_weekly cw JOIN datamart.tvcmid_xref cmid ON (((cw.tvcmid_physician = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dm ON ((cw.file_id = dm.file_id))) LEFT  JOIN product.source_product sp ON (((cw.ndc_code = sp.source_product_code) AND (dm.feed_id = sp.feed_id) AND (dm.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE ((cw.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_ASI_COPAY_DETAIL_WKLY'::varchar(25)))), 0)) AND (cw.rx_date >= add_months((now())::date, (-6)))) EXCEPT  SELECT cmid.id_num AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(cw.rx_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        coalesce(cw.asi_txn_id, concat((cw.file_id)::varchar, (cw.record_id)::varchar)) AS trackback_id,
        NULL AS previous_activity,
        coalesce((sp.entity_id)::varchar(20), cw.ndc_code) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((('Voucher/Coupon Redemption,'::varchar(26) || coalesce(b.name, ''::varchar)) || ','::varchar(1)) || coalesce(cw.program_name, ''::varchar)) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((integration.copay_weekly cw JOIN datamart.tvcmid_xref cmid ON (((cw.tvcmid_physician = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) JOIN metadata.data_file_metadata dm ON ((cw.file_id = dm.file_id))) LEFT  JOIN product.source_product sp ON (((cw.ndc_code = sp.source_product_code) AND (dm.feed_id = sp.feed_id) AND (dm.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE ((cw.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_ASI_COPAY_DETAIL_WKLY'::varchar(25)))), 0)) AND (cw.rx_date >= add_months((now())::date, (-6))));

CREATE  VIEW outbound.zzz_axiom_product_totals_w AS
 SELECT prescriber_rx.market_name,
        b.teva_product_code AS product_code,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.nrx_count ELSE NULL::float END) AS nrx_cnt24,
        sum(CASE WHEN (mth.month_bucket = 1) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt1,
        sum(CASE WHEN (mth.month_bucket = 2) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt2,
        sum(CASE WHEN (mth.month_bucket = 3) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt3,
        sum(CASE WHEN (mth.month_bucket = 4) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt4,
        sum(CASE WHEN (mth.month_bucket = 5) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt5,
        sum(CASE WHEN (mth.month_bucket = 6) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt6,
        sum(CASE WHEN (mth.month_bucket = 7) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt7,
        sum(CASE WHEN (mth.month_bucket = 8) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt8,
        sum(CASE WHEN (mth.month_bucket = 9) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt9,
        sum(CASE WHEN (mth.month_bucket = 10) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt10,
        sum(CASE WHEN (mth.month_bucket = 11) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt11,
        sum(CASE WHEN (mth.month_bucket = 12) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt12,
        sum(CASE WHEN (mth.month_bucket = 13) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt13,
        sum(CASE WHEN (mth.month_bucket = 14) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt14,
        sum(CASE WHEN (mth.month_bucket = 15) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt15,
        sum(CASE WHEN (mth.month_bucket = 16) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt16,
        sum(CASE WHEN (mth.month_bucket = 17) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt17,
        sum(CASE WHEN (mth.month_bucket = 18) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt18,
        sum(CASE WHEN (mth.month_bucket = 19) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt19,
        sum(CASE WHEN (mth.month_bucket = 20) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt20,
        sum(CASE WHEN (mth.month_bucket = 21) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt21,
        sum(CASE WHEN (mth.month_bucket = 22) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt22,
        sum(CASE WHEN (mth.month_bucket = 23) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt23,
        sum(CASE WHEN (mth.month_bucket = 24) THEN prescriber_rx.trx_count ELSE NULL::float END) AS trx_cnt24
 FROM ((datamart.prescriber_rx prescriber_rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON ((prescriber_rx.rollup_month = mth.month_ending))) LEFT  JOIN product.basket b ON ((prescriber_rx.basket_id = b.basket_id)))
 WHERE ((prescriber_rx.nrx_count IS NOT NULL) AND (mth.month_bucket <= 24) AND (mth.month_bucket >= 1) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))
 GROUP BY prescriber_rx.market_name,
          b.teva_product_code
 ORDER BY prescriber_rx.market_name,
          b.teva_product_code;

CREATE  VIEW outbound.zzz_ahm_sales_roster AS
 SELECT r.employee_id AS "EMPLOYEE ID",
        r.username AS USERNAME,
        CASE r.last_name WHEN NULLSEQUAL 'Vacant'::varchar(6) THEN NULL ELSE r.last_name END AS "LAST NAME",
        CASE r.first_name WHEN NULLSEQUAL 'Vacant'::varchar(6) THEN NULL ELSE r.first_name END AS "FIRST NAME",
        btrim(r.middle_name) AS "MIDDLE NAME",
        r.salutation AS SALUTATION,
        btrim(r.suffix) AS SUFFIX,
        r.title AS TITLE,
        r.territory_number AS TERRITORY,
        r.territory_name AS "TERRITORY NAME",
        CASE WHEN (substr(r.parent_territory_number, 3, 4) = 'ZZZZ'::varchar(4)) THEN NULL WHEN (r.parent_territory_number = 'TOFRMZ00'::varchar(8)) THEN NULL WHEN (r.parent_territory_number = 'TOSCGZ00'::varchar(8)) THEN NULL ELSE r.parent_territory_number END AS "MANAGER TERRITORY",
        r.team AS TEAM,
        r.business_address_line1 AS "BUSINESS LINE 1 ADDR",
        btrim(r.business_address_line2) AS "BUSINESS LINE 2 ADDR",
        NULL AS "BUSINESS LINE 3 ADDR",
        r.business_city AS "BUSINESS CITY",
        r.business_state AS "BUSINESS STATE",
        r.business_zip AS "BUSINESS POSTAL CODE",
        'US'::varchar(2) AS "BUSINESS COUNTRY CODE",
        r.address_line1 AS "HOME LINE 1 ADDR",
        btrim(r.address_line2) AS "HOME LINE 2 ADDR",
        NULL AS "HOME LINE 3 ADDR",
        r.city AS "HOME CITY",
        r.state AS "HOME STATE",
        r.zip AS "HOME POSTAL CODE",
        'US'::varchar(2) AS "HOME COUNTRY CODE",
        'Business'::varchar(8) AS "CORRESPONDENCE ADDRESS",
        r.business_phone AS "BUSINESS PHONE",
        NULL AS "BUSINESS PHONE EXTENSION",
        r.fax AS "BUSINESS FAX",
        r.voice_mail_extension AS "VOICE MAIL",
        r.mobile_phone AS "MOBILE PHONE",
        r.home_phone AS "HOME PHONE",
        NULL AS "HOME FAX",
        'Business'::varchar(8) AS "CORRESPONDENCE PHONE",
        r.email AS "BUSINESS EMAIL",
        NULL AS "HOME EMAIL",
        'Business'::varchar(8) AS "CORRESPONDENCE EMAIL",
        r.cost_center AS "COST CENTER"
 FROM datamart.roster r
 WHERE ((r.territory_number !~~ '%ZZZZ%'::varchar(6)) AND (((r.team <> 'Teva Clin Nurse Educ'::varchar(20)) AND (r.team <> 'Field Medical Affairs'::varchar(21)) AND (r.team <> 'Clinical Nurse Educator'::varchar(23)) AND (r.team <> 'Market Access'::varchar(13)) AND (r.team <> 'Specialty Pharm Strat'::varchar(21)) AND (r.team <> 'THS Sales'::varchar(9))) OR (r.team IS NULL)))
 GROUP BY r.employee_id,
          r.username,
          CASE r.last_name WHEN NULLSEQUAL 'Vacant'::varchar(6) THEN NULL ELSE r.last_name END,
          CASE r.first_name WHEN NULLSEQUAL 'Vacant'::varchar(6) THEN NULL ELSE r.first_name END,
          btrim(r.middle_name),
          r.salutation,
          btrim(r.suffix),
          r.title,
          r.territory_number,
          r.territory_name,
          CASE WHEN (substr(r.parent_territory_number, 3, 4) = 'ZZZZ'::varchar(4)) THEN NULL WHEN (r.parent_territory_number = 'TOFRMZ00'::varchar(8)) THEN NULL WHEN (r.parent_territory_number = 'TOSCGZ00'::varchar(8)) THEN NULL ELSE r.parent_territory_number END,
          r.team,
          r.business_address_line1,
          btrim(r.business_address_line2),
          NULL,
          r.business_city,
          r.business_state,
          r.business_zip,
          'US'::varchar(2),
          r.address_line1,
          btrim(r.address_line2),
          r.city,
          r.state,
          r.zip,
          'Business'::varchar(8),
          r.business_phone,
          r.fax,
          r.voice_mail_extension,
          r.mobile_phone,
          r.home_phone,
          r.email,
          r.cost_center;

CREATE  VIEW outbound.zzz_touchpoint_call AS
 SELECT tpc.call_id AS ID,
        tpc.call_attempt_id AS AttemptID,
        tpc.touchpoint_id AS TouchpointID,
        tpc.veeva_id AS ClientID,
        tpc.ims_id AS IMSID,
        tpc.first_name AS FirstName,
        tpc.last_name AS LastName,
        tpc.call_type AS Type,
        to_char(tpc.call_date, 'YYYYMMDD'::varchar(8)) AS Date,
        tpc.status_code AS StatusCode,
        tpc.status_description AS StatusDescription,
        tpc.rep_id AS RepID,
        tpc.rep_first_name AS RepFirstName,
        tpc.rep_last_name AS RepLastName
 FROM datamart.touchpoint_call tpc;

CREATE  VIEW outbound.zzz_touchpoint_presentation AS
 SELECT tpp.call_id AS CallID,
        tpp.call_attempt_id AS CallAttemptID,
        tpp.presentation_id AS ID,
        tpp.product AS Product,
        tpp."position" AS "Position",
        tpp.item_type AS ItemType,
        tpp.item_description AS ItemDescription,
        tpp.quantity AS Quantity
 FROM datamart.touchpoint_presentation tpp;

CREATE  VIEW outbound.zzz_zs_ic_medicaid_plan_groups AS
(( SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.model,
        rx.payer_name AS plan_group,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['QNASL 80'::varchar(9), 'QNASL 40'::varchar(9), 'NASONEX'::varchar(9), 'NASACORT'::varchar(9), 'OMNARIS'::varchar(9), 'RHINOCORT'::varchar(9), 'VERAMYST'::varchar(9), 'ZETONNA'::varchar(9)])) AND ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) OR (rx.payer_plan_number = ANY (ARRAY['7001720001'::varchar(10), '0013670087'::varchar(10)]))) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          v.veeva_account_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name UNION ALL  SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.model,
        rx.payer_name AS plan_group,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['AEROBID'::varchar(20), 'AEROSPAN'::varchar(20), 'ALVESCO'::varchar(20), 'ARNUITY ELLIPTA'::varchar(20), 'ASMANEX HFA MDI'::varchar(20), 'ASMANEX TWISTHALER'::varchar(20), 'AZMACORT'::varchar(20), 'FLOVENT DISK 100'::varchar(20), 'FLOVENT DISK 250'::varchar(20), 'FLOVENT DISK 50'::varchar(20), 'FLOVENT MDI 110'::varchar(20), 'FLOVENT MDI 220'::varchar(20), 'FLOVENT MDI 44'::varchar(20), 'FLOVENT MDI HOSP 110'::varchar(20), 'FLOVENT MDI HOSP 220'::varchar(20), 'FLOVENT MDI HOSP 44'::varchar(20), 'PULMICORT'::varchar(20), 'QVAR 40MCG'::varchar(20), 'QVAR 80MCG'::varchar(20)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          v.veeva_account_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name) UNION ALL  SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.model,
        rx.payer_name AS plan_group,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['ALL OTHER'::varchar(16), 'FLONASE'::varchar(16), 'FLUTICASONE PROP'::varchar(16), 'NASACORT/AQ/HFA'::varchar(16), 'NASONEX'::varchar(16), 'OMNARIS'::varchar(16), 'RHINOCORT/AQUA'::varchar(16), 'VERAMYST'::varchar(16)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          v.veeva_account_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name) UNION ALL  SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.model,
        rx.payer_name AS plan_group,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['ALBUTEROL'::varchar(20), 'ALL OTHERS'::varchar(20), 'MAXAIR AUTOHALER MDI'::varchar(20), 'PROAIR HFA'::varchar(20), 'PROAIR HFA COUNTER'::varchar(20), 'PROVENTIL HFA'::varchar(20), 'RELION VENTOLIN HFA'::varchar(20), 'VENTOLIN HFA'::varchar(20), 'XOPENEX HFA'::varchar(20)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          v.veeva_account_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name;

CREATE  VIEW outbound.zzz_zs_ic_mop AS
(( SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payment_method,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['QNASL 80'::varchar(9), 'QNASL 40'::varchar(9), 'NASONEX'::varchar(9), 'NASACORT'::varchar(9), 'OMNARIS'::varchar(9), 'RHINOCORT'::varchar(9), 'VERAMYST'::varchar(9), 'ZETONNA'::varchar(9)])) AND ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) OR (rx.payer_plan_number = ANY (ARRAY['7001720001'::varchar(10), '0013670087'::varchar(10)]))) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          coalesce(v.veeva_account_id, rx.ims_id),
          rx.payment_method,
          rx.basket_name UNION ALL  SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payment_method,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['AEROBID'::varchar(20), 'AEROSPAN'::varchar(20), 'ALVESCO'::varchar(20), 'ARNUITY ELLIPTA'::varchar(20), 'ASMANEX HFA MDI'::varchar(20), 'ASMANEX TWISTHALER'::varchar(20), 'AZMACORT'::varchar(20), 'FLOVENT DISK 100'::varchar(20), 'FLOVENT DISK 250'::varchar(20), 'FLOVENT DISK 50'::varchar(20), 'FLOVENT MDI 110'::varchar(20), 'FLOVENT MDI 220'::varchar(20), 'FLOVENT MDI 44'::varchar(20), 'FLOVENT MDI HOSP 110'::varchar(20), 'FLOVENT MDI HOSP 220'::varchar(20), 'FLOVENT MDI HOSP 44'::varchar(20), 'PULMICORT'::varchar(20), 'QVAR 40MCG'::varchar(20), 'QVAR 80MCG'::varchar(20)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          coalesce(v.veeva_account_id, rx.ims_id),
          rx.payment_method,
          rx.basket_name) UNION ALL  SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payment_method,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['ALL OTHER'::varchar(16), 'FLONASE'::varchar(16), 'FLUTICASONE PROP'::varchar(16), 'NASACORT/AQ/HFA'::varchar(16), 'NASONEX'::varchar(16), 'OMNARIS'::varchar(16), 'RHINOCORT/AQUA'::varchar(16), 'VERAMYST'::varchar(16)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          coalesce(v.veeva_account_id, rx.ims_id),
          rx.payment_method,
          rx.basket_name) UNION ALL  SELECT rx.ims_id,
        coalesce(v.veeva_account_id, rx.ims_id) AS hcp_id,
        rx.payment_method,
        rx.basket_name AS product,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_mth1,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth2,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth3,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth4,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth5,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth6,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth7,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth8,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth9,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth10,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth11,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth12,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth13,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth14,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth15,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth16,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth17,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth18,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth19,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth20,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth21,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth22,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth23,
        sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_mth24
 FROM (datamart.prescriber_rx rx LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.file_id = ( SELECT max(a.file_id) AS max
 FROM datamart.tvcmid_xref a
 WHERE (a.id_type = 'VEEVA_ID'::varchar(8)))))) v ON ((rx.tvcmid = v.tvcmid)))
 WHERE ((rx.basket_name = ANY (ARRAY['ALBUTEROL'::varchar(20), 'ALL OTHERS'::varchar(20), 'MAXAIR AUTOHALER MDI'::varchar(20), 'PROAIR HFA'::varchar(20), 'PROAIR HFA COUNTER'::varchar(20), 'PROVENTIL HFA'::varchar(20), 'RELION VENTOLIN HFA'::varchar(20), 'VENTOLIN HFA'::varchar(20), 'XOPENEX HFA'::varchar(20)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.date >= add_months(last_day(rx.data_date), (-23))) AND (rx.date <= add_months(last_day(rx.data_date), 0)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          coalesce(v.veeva_account_id, rx.ims_id),
          rx.payment_method,
          rx.basket_name;

CREATE  VIEW outbound.month_rollup_and_bucket AS
 SELECT prescriber_rx.rollup_month AS month_ending,
        rank() OVER (ORDER BY prescriber_rx.rollup_month DESC) AS month_bucket
 FROM datamart.prescriber_rx
 WHERE (prescriber_rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY prescriber_rx.rollup_month;

CREATE  VIEW outbound.zzz_zs_agile_demographics AS
SELECT d.tvcmid AS TVCMID, d.ims_id AS IMS_ID, d.veeva_account_id AS VEEVA_ACCOUNT_ID, d.first_name AS FIRST_NAME, d.middle_name AS MID_NAME, d.last_name AS LAST_NAME, d.degree AS DEGREE, ((((d.ptr_address_1 || ' '::varchar(1)) || d.ptr_address_2) || ' '::varchar(1)) || d.ptr_address_3) AS ADDRESS, d.ptr_city AS CITY, d.ptr_state AS STATE, d.ptr_zip AS ZIP, d.specialty AS PRIM_SPECIALTY, s1.nuvigil_report_group AS NUVIGIL_REPORT_GROUP, dec1.decile_trx_count_6_mo AS NUVIGIL_DECILE, dec2.decile_trx_count_6_mo AS WAKE_DECILE, s1.amrix_target_flag AS TARGET_FLAG FROM ((((datamart.prescriber_combined_demographics d LEFT JOIN reference.specialty_xref s1 ON ((s1.specialty_code = d.specialty))) LEFT JOIN datamart.rx_deciles dec1 ON (((dec1.ims_id = d.ims_id) AND (upper(dec1.decile_name) = 'NUVIGIL'::varchar(7))))) LEFT JOIN datamart.rx_deciles dec2 ON (((dec2.ims_id = d.ims_id) AND (upper(dec2.decile_name) = 'MODAFINIL'::varchar(9))))) JOIN (SELECT prescriber_rx.ims_id FROM datamart.prescriber_rx prescriber_rx WHERE ((prescriber_rx.basket_id = 36) AND (prescriber_rx.rollup_month >= add_months(prescriber_rx.data_date, (-24))) AND (prescriber_rx.rollup_month <= add_months(prescriber_rx.data_date, (-1))) AND (upper(prescriber_rx.basket_type) = 'PRODUCT'::varchar(7)) AND (prescriber_rx.report_frequency = 'MONTH'::varchar(5))) GROUP BY prescriber_rx.ims_id UNION SELECT sfa_demographics.ims_id FROM datamart.sfa_demographics WHERE (sfa_demographics.sales_force_id = 'TP'::varchar(2)) GROUP BY sfa_demographics.ims_id) rx ON ((d.ims_id = rx.ims_id))) WHERE ((d.sales_force_id = 'TP'::varchar(2)) AND (d.last_name <> 'NATIONAL ASSIGNMENT'::varchar(19)) AND (d.first_name IS NOT NULL)) GROUP BY d.tvcmid, d.ims_id, d.veeva_account_id, d.first_name, d.middle_name, d.last_name, d.degree, ((((d.ptr_address_1 || ' '::varchar(1)) || d.ptr_address_2) || ' '::varchar(1)) || d.ptr_address_3), d.ptr_city, d.ptr_state, d.ptr_zip, d.specialty, s1.nuvigil_report_group, dec1.decile_trx_count_6_mo, dec2.decile_trx_count_6_mo, s1.amrix_target_flag;

CREATE  VIEW outbound.zzz_zs_tr_calls_obw AS
 SELECT c.sales_force_id AS SALES_FORCE_ID,
        c.territory_number AS TERRITORY_NUM,
        c.veeva_account_id AS VEEVA_ACCOUNT_ID,
        c.ims_id AS IMS_ID,
        to_char(c.call_date, 'MM/DD/YYYY'::varchar(10)) AS CALL_DATE,
        cd1.product AS FIRST_PRODUCT_DETAILED,
        cd2.product AS SECOND_PRODUCT_DETAILED,
        cd3.product AS THIRD_PRODUCT_DETAILED,
        cd4.product AS FOURTH_PRODUCT_DETAILED,
        s1.product_name AS SAMPLE_NAME,
        s1.sample_ndc AS SAMPLE_NDC,
        s1.qty AS QUANTITY_DROPPED,
        c.call_type AS CALL_TYPE
 FROM (((((datamart.sfa_call c LEFT  JOIN datamart.sfa_call_detail cd1 ON (((c.call_id = cd1.call_id) AND (cd1.detail_position = 1::numeric(18,0))))) LEFT  JOIN datamart.sfa_call_detail cd2 ON (((c.call_id = cd2.call_id) AND (cd2.detail_position = 2::numeric(18,0))))) LEFT  JOIN datamart.sfa_call_detail cd3 ON (((c.call_id = cd3.call_id) AND (cd3.detail_position = 3::numeric(18,0))))) LEFT  JOIN datamart.sfa_call_detail cd4 ON (((c.call_id = cd4.call_id) AND (cd4.detail_position = 4::numeric(18,0))))) LEFT  JOIN datamart.sfa_sample s1 ON (((c.call_id = s1.call_id) AND (s1.basket_name = 'PROAIR'::varchar(6)))))
 WHERE ((c.sales_force_id = 'TR'::varchar(2)) AND (c.call_date > ((trunc(((statement_timestamp())::timestamp + 1::float), 'd'::varchar(1)) + (-2)::float) + (-42)::float)) AND (c.call_date <= (trunc(((statement_timestamp())::timestamp + 1::float), 'd'::varchar(1)) + (-2)::float)) AND (c.veeva_account_id IN ( SELECT account.id
 FROM veeva.account
 WHERE (account.ispersonaccount = 'true'::varchar(4)))));

CREATE  VIEW outbound.zzz_cmop_product AS
 SELECT sp.source_product_code AS va_product,
        pb.teva_product_code AS prod_code,
        pb.name AS prod_name,
        coalesce(bb.teva_product_code, pb.teva_product_code) AS brand_code,
        coalesce(bb.name, pb.name) AS brand_name,
        mb.teva_product_code AS market_code,
        mb.name AS market_name
 FROM (((((product.source_product sp JOIN product.basket pb ON ((pb.basket_id = sp.entity_id))) LEFT  JOIN datamart.product_basket brand ON (((brand.child_basket_id = pb.basket_id) AND (brand.parent_basket_type = 'brand'::varchar(5))))) LEFT  JOIN product.basket bb ON ((brand.parent_basket_id = bb.basket_id))) LEFT  JOIN datamart.product_basket market ON (((market.child_basket_id = pb.basket_id) AND (market.parent_basket_type = 'market'::varchar(6))))) LEFT  JOIN product.basket mb ON ((market.parent_basket_id = mb.basket_id)))
 WHERE ((sp.feed_id = 305) AND (pb.teva_product_code <> ALL (ARRAY['200102'::varchar(6), '200104'::varchar(6), '200112'::varchar(6), '200116'::varchar(6), 'V00100'::varchar(6)])))
 ORDER BY sp.source_product_code;

CREATE  VIEW outbound.zzz_create_tb_cb_transactions AS
 SELECT c.account_id AS ACCOUNT_ID,
        c.location_id AS LOCATION_ID,
        to_char(c.shipment_date, 'YYYY-MM-DD'::varchar(10)) AS SHIPMENT_DATE,
        c.ndc_code AS NDC_CODE,
        c.product_name AS PRODUCT_NAME,
        c.contract_id AS CONTRACT_ID,
        CASE mod(c.chargeback_quantity, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.chargeback_quantity)::int)::varchar ELSE rtrim((c.chargeback_quantity)::varchar, '0'::varchar(1)) END AS CHARGEBACK_UNITS,
        CASE mod(c.chargeback_amount, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.chargeback_amount)::int)::varchar ELSE rtrim((c.chargeback_amount)::varchar, '0'::varchar(1)) END AS CHARGEBACK_DOLLARS,
        to_char(c.receipt_date, 'YYYY-MM-DD'::varchar(10)) AS RECEIPT_DATE,
        c.unit_ap AS UNIT_AP,
        c.ap AS AP,
        c.debit_memo_number AS DEBIT_MEMO_NUM,
        to_char(c.credit_memo_date, 'YYYY-MM-DD HH24:MI:SS'::varchar(21)) AS CREDIT_MEMO_DATE,
        c.credit_memo_number AS CREDIT_MEMO_NUM,
        to_char(c.settlement_date, 'YYYY-MM-DD HH24:MI:SS'::varchar(21)) AS SETTLEMENT_DATE,
        CASE mod(c.contract_price, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.contract_price)::int)::varchar ELSE rtrim((c.contract_price)::varchar, '0'::varchar(1)) END AS CONTRACT_PRICE,
        ct.contract_alias AS CONTRACT_ALIAS
 FROM (datamart.chargebacks c JOIN ( SELECT chargeback_demographics.contract_id,
        chargeback_demographics.contract_alias
 FROM datamart.chargeback_demographics
 GROUP BY chargeback_demographics.contract_id,
          chargeback_demographics.contract_alias) ct ON ((c.contract_id = ct.contract_id)))
 WHERE (c.file_id = ( SELECT max(chargebacks.file_id) AS MAX
 FROM datamart.chargebacks));

CREATE  VIEW outbound.v_ob_ahm_customer_credentials AS
 SELECT d.profession_code_shortname AS CredentialCode,
        d.profession_code_fullname AS CredentialName
 FROM reference.Designations d
 GROUP BY d.profession_code_shortname,
          d.profession_code_fullname;

CREATE  VIEW outbound.v_ob_ahm_customer_specialty AS
 SELECT sp.Specialty_Code AS SpecialtyCode,
        sp.Specialty_Description AS SpecialtyName,
        ''::varchar AS SpecialtyGroupName
 FROM reference.specialties sp
 GROUP BY sp.Specialty_Code,
          sp.Specialty_Description,
          ''::varchar;

CREATE  VIEW outbound.zzz_asi_rx_by_market_ms_new AS
(SELECT rx.market_name, rx.ims_client_number AS ims_client_num, rx.ims_report_number_cnt AS ims_report_num, rx.ims_zip_other AS zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id, rx.ims_specialty AS specialty, rx.payer_plan_number AS plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.ims_rx_type AS rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num, NULL AS filler_01, axd.ims_me_num AS me_num, rx.prescriber_last_name AS last_name, rx.prescriber_first_name AS first_name, axd.ims_middle_name AS middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address, axd.ims_city AS city, axd.ims_state AS state, axd.ims_zip AS zip, replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data, rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other)))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '2'::varchar(1)) AND (rx.report_frequency = 'MONTH'::varchar(5))) GROUP BY rx.market_name, rx.ims_client_number, rx.ims_report_number_cnt, rx.ims_zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END, rx.ims_specialty, axd.ims_me_num, rx.payer_plan_number, btrim(to_char(rx.sales_category, '00'::varchar(2))), rx.ims_rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))), rx.prescriber_last_name, rx.prescriber_first_name, axd.ims_middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar), axd.ims_city, axd.ims_state, axd.ims_zip, replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar), rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) UNION ALL SELECT pg.market_name, '632'::varchar(3) AS ims_client_num, '2'::varchar(2) AS ims_report_num, rx.ims_zip AS zip_other, sp.ims_id, rx.ims_specialty AS specialty, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END AS plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pg.ims_product_group AS ims_product_group_num, NULL AS filler_01, rx.ims_me_num AS me_num, rx.ims_last_name AS last_name, rx.ims_first_name AS first_name, rx.ims_middle_name AS middle_name, rx.ims_address AS address, rx.ims_city AS city, rx.ims_state AS state_code, rx.ims_zip AS zip, NULL AS supplemental_data, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3 MAIL ORDER DATA UNSPEC'::varchar(25) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3 TYSABRI MAIL ORDER DATA UNSPEC'::varchar(33) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME MAIL ORDER DATA UNSPEC'::varchar(28) ELSE NULL END AS plan_name, to_char(max(mth.month_ending), 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM (((datamart.specialty_pharmacy_shipment sp JOIN outbound.month_rollup_and_bucket mth ON ((last_day(sp.comp_month) = mth.month_ending))) JOIN reference.asi_outbound_ims_product_group_mapping pg ON (((sp.specialty_pharmacy_data_source = pg.data_source) AND (sp.basket_id = pg.basket_id) AND (pg.market_name = 'MS MARKET'::varchar(9))))) LEFT JOIN (SELECT a.ims_last_name, a.ims_first_name, a.ims_middle_name, a.ims_address, a.ims_city, a.ims_state, a.ims_zip, a.ims_client_number, a.ims_me_num, a.ims_id, a.ims_specialty, a.rnk FROM (SELECT axd.ims_last_name, axd.ims_first_name, axd.ims_middle_name, axd.ims_address, axd.ims_city, axd.ims_state, axd.ims_zip, axd.ims_client_number, axd.ims_me_num, axd.ims_id, axd.ims_specialty, row_number() OVER (PARTITION BY axd.ims_id ORDER BY axd.ims_specialty) AS rnk FROM outbound.asi_xponent_demographics axd) a WHERE (a.rnk = 1)) rx ON ((rx.ims_id = sp.ims_id))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['Prime Therapeutics'::varchar(18), 'OptumRx'::varchar(7)])) AND (rx.ims_client_number = '632'::varchar(3)) AND (sp.ims_id IS NOT NULL)) GROUP BY pg.market_name, sp.ims_id, rx.ims_specialty, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END, pg.ims_product_group, rx.ims_me_num, rx.ims_last_name, rx.ims_first_name, rx.ims_middle_name, rx.ims_address, rx.ims_city, rx.ims_state, rx.ims_zip, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3 MAIL ORDER DATA UNSPEC'::varchar(25) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3 TYSABRI MAIL ORDER DATA UNSPEC'::varchar(33) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME MAIL ORDER DATA UNSPEC'::varchar(28) ELSE NULL END) UNION ALL SELECT pg.market_name, '632'::varchar(3) AS ims_client_num, '2'::varchar(2) AS ims_report_num, cm.zip AS zip_other, NULL AS ims_id, '01N'::varchar(3) AS specialty, 'CMOP000000'::varchar(10) AS payer_plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pg.ims_product_group AS ims_product_group_num, NULL AS filler_01, '0'::varchar(1) AS me_num, 'NATIONAL ASSIGNMENT'::varchar(19) AS last_name, NULL AS first_name, NULL AS middle_name, NULL AS address, NULL AS city, NULL AS state, '00001'::varchar(5) AS zip, NULL AS supplemental_data, 'VA DATA UNSPEC'::varchar(14) AS plan_name, (SELECT to_char(x.month_ending, 'MMDDYY'::varchar(7)) AS to_char FROM (SELECT max(ims_week_buckets.month_ending) AS month_ending FROM integration.ims_week_buckets WHERE (ims_week_buckets.full_month = 'Y'::varchar(1))) x) AS data_date, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_024 FROM ((datamart.cmop_rx cm JOIN (SELECT ims_week_buckets.month_ending, ims_week_buckets.month_bucket FROM integration.ims_week_buckets GROUP BY ims_week_buckets.month_ending, ims_week_buckets.month_bucket) mth ON ((last_day(cm.comp_month) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group FROM reference.asi_outbound_ims_product_group_mapping WHERE ((asi_outbound_ims_product_group_mapping.data_source = 'CMOP'::varchar(4)) AND (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9))) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group) pg ON ((pg.basket_id = cm.basket_id))) WHERE ((mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (cm.cmop_rxs_normalized <> 0::numeric(18,0))) GROUP BY pg.market_name, cm.zip, pg.ims_product_group, (SELECT to_char(x.month_ending, 'MMDDYY'::varchar(7)) AS to_char FROM (SELECT max(ims_week_buckets.month_ending) AS month_ending FROM integration.ims_week_buckets WHERE (ims_week_buckets.full_month = 'Y'::varchar(1))) x);

CREATE  VIEW outbound.zzz_asi_rx_by_market_pd AS
SELECT rx.market_name, rx.ims_client_number AS ims_client_num, rx.ims_report_number_cnt AS ims_report_num, rx.ims_zip_other AS zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id, rx.ims_specialty AS specialty, rx.payer_plan_number AS plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.ims_rx_type AS rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num, NULL AS filler_01, axd.ims_me_num AS me_num, rx.prescriber_last_name AS last_name, rx.prescriber_first_name AS first_name, axd.ims_middle_name AS middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address, axd.ims_city AS city, axd.ims_state AS state, axd.ims_zip AS zip, replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data, rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other)))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '6'::varchar(1)) AND (rx.report_frequency = 'MONTH'::varchar(5))) GROUP BY rx.market_name, rx.ims_client_number, rx.ims_report_number_cnt, rx.ims_zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END, rx.ims_specialty, axd.ims_me_num, rx.payer_plan_number, btrim(to_char(rx.sales_category, '00'::varchar(2))), rx.ims_rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))), rx.prescriber_last_name, rx.prescriber_first_name, axd.ims_middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar), axd.ims_city, axd.ims_state, axd.ims_zip, replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar), rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) UNION ALL SELECT pg.market_name, '632'::varchar(3) AS ims_client_num, '6'::varchar(2) AS ims_report_num, cm.zip AS zip_other, NULL AS ims_id, '01N'::varchar(3) AS specialty, 'CMOP000000'::varchar(10) AS payer_plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pg.ims_product_group AS ims_product_group_num, NULL AS filler_01, '0'::varchar(1) AS me_num, 'NATIONAL ASSIGNMENT'::varchar(19) AS last_name, NULL AS first_name, NULL AS middle_name, NULL AS address, NULL AS city, NULL AS state, '00001'::varchar(5) AS zip, NULL AS supplemental_data, 'VA DATA UNSPEC'::varchar(14) AS plan_name, (SELECT to_char(month_rollup_and_bucket.month_ending, 'MMDDYY'::varchar(6)) AS to_char FROM outbound.month_rollup_and_bucket WHERE (month_rollup_and_bucket.month_bucket = 1)) AS data_date, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN cm.cmop_rxs_normalized ELSE NULL::float END) AS trx_024 FROM ((datamart.cmop_rx cm JOIN outbound.month_rollup_and_bucket mth ON ((last_day(cm.comp_month) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group FROM reference.asi_outbound_ims_product_group_mapping WHERE ((asi_outbound_ims_product_group_mapping.data_source = 'CMOP'::varchar(4)) AND (asi_outbound_ims_product_group_mapping.market_name = 'PD MARKET'::varchar(9))) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group) pg ON ((pg.basket_id = cm.basket_id))) WHERE ((mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (cm.cmop_rxs_normalized <> 0::numeric(18,0))) GROUP BY pg.market_name, cm.zip, pg.ims_product_group, (SELECT to_char(month_rollup_and_bucket.month_ending, 'MMDDYY'::varchar(6)) AS to_char FROM outbound.month_rollup_and_bucket WHERE (month_rollup_and_bucket.month_bucket = 1));

CREATE  VIEW outbound.zzz_asi_market_access_w_tot AS
SELECT asi_market_access_w.report_num, asi_market_access_w.ims_product_group_num AS product_num, asi_market_access_w.data_month, sum(asi_market_access_w.nrx_001) AS total_nrx_01, sum(asi_market_access_w.nrx_002) AS total_nrx_02, sum(asi_market_access_w.nrx_003) AS total_nrx_03, sum(asi_market_access_w.nrx_004) AS total_nrx_04, sum(asi_market_access_w.nrx_005) AS total_nrx_05, sum(asi_market_access_w.nrx_006) AS total_nrx_06, sum(asi_market_access_w.nrx_007) AS total_nrx_07, sum(asi_market_access_w.nrx_008) AS total_nrx_08, sum(asi_market_access_w.nrx_009) AS total_nrx_09, sum(asi_market_access_w.nrx_010) AS total_nrx_10, sum(asi_market_access_w.nrx_011) AS total_nrx_11, sum(asi_market_access_w.nrx_012) AS total_nrx_12, sum(asi_market_access_w.nrx_013) AS total_nrx_13, sum(asi_market_access_w.nrx_014) AS total_nrx_14, sum(asi_market_access_w.nrx_015) AS total_nrx_15, sum(asi_market_access_w.nrx_016) AS total_nrx_16, sum(asi_market_access_w.nrx_017) AS total_nrx_17, sum(asi_market_access_w.nrx_018) AS total_nrx_18, sum(asi_market_access_w.nrx_019) AS total_nrx_19, sum(asi_market_access_w.nrx_020) AS total_nrx_20, sum(asi_market_access_w.nrx_021) AS total_nrx_21, sum(asi_market_access_w.nrx_022) AS total_nrx_22, sum(asi_market_access_w.nrx_023) AS total_nrx_23, sum(asi_market_access_w.nrx_024) AS total_nrx_24, sum(asi_market_access_w.trx_001) AS total_trx_01, sum(asi_market_access_w.trx_002) AS total_trx_02, sum(asi_market_access_w.trx_003) AS total_trx_03, sum(asi_market_access_w.trx_004) AS total_trx_04, sum(asi_market_access_w.trx_005) AS total_trx_05, sum(asi_market_access_w.trx_006) AS total_trx_06, sum(asi_market_access_w.trx_007) AS total_trx_07, sum(asi_market_access_w.trx_008) AS total_trx_08, sum(asi_market_access_w.trx_009) AS total_trx_09, sum(asi_market_access_w.trx_010) AS total_trx_10, sum(asi_market_access_w.trx_011) AS total_trx_11, sum(asi_market_access_w.trx_012) AS total_trx_12, sum(asi_market_access_w.trx_013) AS total_trx_13, sum(asi_market_access_w.trx_014) AS total_trx_14, sum(asi_market_access_w.trx_015) AS total_trx_15, sum(asi_market_access_w.trx_016) AS total_trx_16, sum(asi_market_access_w.trx_017) AS total_trx_17, sum(asi_market_access_w.trx_018) AS total_trx_18, sum(asi_market_access_w.trx_019) AS total_trx_19, sum(asi_market_access_w.trx_020) AS total_trx_20, sum(asi_market_access_w.trx_021) AS total_trx_21, sum(asi_market_access_w.trx_022) AS total_trx_22, sum(asi_market_access_w.trx_023) AS total_trx_23, sum(asi_market_access_w.trx_024) AS total_trx_24 FROM outbound.asi_market_access_w GROUP BY asi_market_access_w.report_num, asi_market_access_w.ims_product_group_num, asi_market_access_w.data_month;

CREATE  VIEW outbound.zzz_asi_market_access_m_tot AS
SELECT asi_market_access_m.report_num, asi_market_access_m.ims_product_group_num AS product_num, asi_market_access_m.data_month, sum(asi_market_access_m.nrx_001) AS total_nrx_01, sum(asi_market_access_m.nrx_002) AS total_nrx_02, sum(asi_market_access_m.nrx_003) AS total_nrx_03, sum(asi_market_access_m.nrx_004) AS total_nrx_04, sum(asi_market_access_m.nrx_005) AS total_nrx_05, sum(asi_market_access_m.nrx_006) AS total_nrx_06, sum(asi_market_access_m.nrx_007) AS total_nrx_07, sum(asi_market_access_m.nrx_008) AS total_nrx_08, sum(asi_market_access_m.nrx_009) AS total_nrx_09, sum(asi_market_access_m.nrx_010) AS total_nrx_10, sum(asi_market_access_m.nrx_011) AS total_nrx_11, sum(asi_market_access_m.nrx_012) AS total_nrx_12, sum(asi_market_access_m.nrx_013) AS total_nrx_13, sum(asi_market_access_m.nrx_014) AS total_nrx_14, sum(asi_market_access_m.nrx_015) AS total_nrx_15, sum(asi_market_access_m.nrx_016) AS total_nrx_16, sum(asi_market_access_m.nrx_017) AS total_nrx_17, sum(asi_market_access_m.nrx_018) AS total_nrx_18, sum(asi_market_access_m.nrx_019) AS total_nrx_19, sum(asi_market_access_m.nrx_020) AS total_nrx_20, sum(asi_market_access_m.nrx_021) AS total_nrx_21, sum(asi_market_access_m.nrx_022) AS total_nrx_22, sum(asi_market_access_m.nrx_023) AS total_nrx_23, sum(asi_market_access_m.nrx_024) AS total_nrx_24, sum(asi_market_access_m.trx_001) AS total_trx_01, sum(asi_market_access_m.trx_002) AS total_trx_02, sum(asi_market_access_m.trx_003) AS total_trx_03, sum(asi_market_access_m.trx_004) AS total_trx_04, sum(asi_market_access_m.trx_005) AS total_trx_05, sum(asi_market_access_m.trx_006) AS total_trx_06, sum(asi_market_access_m.trx_007) AS total_trx_07, sum(asi_market_access_m.trx_008) AS total_trx_08, sum(asi_market_access_m.trx_009) AS total_trx_09, sum(asi_market_access_m.trx_010) AS total_trx_10, sum(asi_market_access_m.trx_011) AS total_trx_11, sum(asi_market_access_m.trx_012) AS total_trx_12, sum(asi_market_access_m.trx_013) AS total_trx_13, sum(asi_market_access_m.trx_014) AS total_trx_14, sum(asi_market_access_m.trx_015) AS total_trx_15, sum(asi_market_access_m.trx_016) AS total_trx_16, sum(asi_market_access_m.trx_017) AS total_trx_17, sum(asi_market_access_m.trx_018) AS total_trx_18, sum(asi_market_access_m.trx_019) AS total_trx_19, sum(asi_market_access_m.trx_020) AS total_trx_20, sum(asi_market_access_m.trx_021) AS total_trx_21, sum(asi_market_access_m.trx_022) AS total_trx_22, sum(asi_market_access_m.trx_023) AS total_trx_23, sum(asi_market_access_m.trx_024) AS total_trx_24 FROM outbound.asi_market_access_m GROUP BY asi_market_access_m.report_num, asi_market_access_m.ims_product_group_num, asi_market_access_m.data_month;

CREATE  VIEW outbound.zzz_ics_medicaidplangroups AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        coalesce(a.veeva_account_id, rx.ims_id) AS HCP_ID,
        rx.payer_plan_number AS PLAN_CODE,
        rx.plan_name AS PLAN_NAME,
        rx.model AS MODEL,
        rx.payer_name AS PLAN_GROUP,
        CASE WHEN (rx.basket_name ~~ 'QVAR%'::varchar(5)) THEN 'QVAR'::varchar(4) WHEN (rx.basket_name ~~ 'FLOVENT%'::varchar(8)) THEN 'FLOVENT'::varchar(7) ELSE rx.basket_name END AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM (((( SELECT rx.ims_id,
        rx.payer_plan_number,
        rx.plan_name,
        rx.model,
        rx.payer_name,
        rx.basket_name,
        rx.basket_id,
        rx.basket_type,
        rx.rollup_month,
        rx.trx_count,
        rx.tvcmid,
        rx.payment_method,
        rx.rollup_week
 FROM (datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency))))
 WHERE ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name,
          rx.basket_id,
          rx.basket_type,
          rx.rollup_month,
          rx.trx_count,
          rx.tvcmid,
          rx.payment_method,
          rx.rollup_week) rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((b.teva_product_code = ANY (ARRAY['330-13-010'::varchar(10), '330-13-020'::varchar(10), '330-13-021'::varchar(10), '330-13-016'::varchar(10), '330-13-008'::varchar(10), '330-13-022'::varchar(10), '330-13-023'::varchar(10), '330-13-024'::varchar(10), '330-13-025'::varchar(10), '330-13-026'::varchar(10), '330-13-027'::varchar(10), '330-13-028'::varchar(10), '330-13-029'::varchar(10), '330-13-030'::varchar(10), '330-13-009'::varchar(10), '330-13-005'::varchar(10), '330-13-006'::varchar(10), '330-13-011'::varchar(10), '330-13-017'::varchar(10)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END,
          coalesce(a.veeva_account_id, rx.ims_id),
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          CASE WHEN (rx.basket_name ~~ 'QVAR%'::varchar(5)) THEN 'QVAR'::varchar(4) WHEN (rx.basket_name ~~ 'FLOVENT%'::varchar(8)) THEN 'FLOVENT'::varchar(7) ELSE rx.basket_name END;

CREATE  VIEW outbound.zzz_nasal_medicaidplangroups AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        coalesce(a.veeva_account_id, rx.ims_id) AS HCP_ID,
        rx.payer_plan_number AS PLAN_CODE,
        rx.plan_name AS PLAN_NAME,
        rx.model AS MODEL,
        rx.payer_name AS PLAN_GROUP,
        rx.basket_name AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM (((( SELECT rx.ims_id,
        rx.payer_plan_number,
        rx.plan_name,
        rx.model,
        rx.payer_name,
        rx.basket_name,
        rx.basket_id,
        rx.basket_type,
        rx.rollup_month,
        rx.trx_count,
        rx.tvcmid,
        rx.payment_method,
        rx.rollup_week
 FROM (datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency))))
 WHERE ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name,
          rx.basket_id,
          rx.basket_type,
          rx.rollup_month,
          rx.trx_count,
          rx.tvcmid,
          rx.payment_method,
          rx.rollup_week) rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((b.teva_product_code = ANY (ARRAY['330-15-005'::varchar(10), '330-15-010'::varchar(10), '330-15-019'::varchar(10), '330-15-015'::varchar(10), '330-15-025'::varchar(10), '330-15-030'::varchar(10), '330-15-047'::varchar(10), '330-15-050'::varchar(10)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END,
          coalesce(a.veeva_account_id, rx.ims_id),
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name;

CREATE  VIEW outbound.zzz_nasal_mop AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(a.veeva_account_id, rx.ims_id) END AS HCP_ID,
        rx.payment_method AS PAYMENT_METHOD,
        rx.basket_name AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM (((( SELECT rx.ims_id,
        rx.payer_plan_number,
        rx.plan_name,
        rx.model,
        rx.payer_name,
        rx.basket_name,
        rx.basket_id,
        rx.basket_type,
        rx.rollup_month,
        rx.trx_count,
        NULL::float,
        rx.tvcmid,
        rx.payment_method,
        rx.rollup_week
 FROM (datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND ((length(rx.ims_id) = 7) OR ((length(rx.ims_id) <> 7) AND (rx.basket_name = ANY (ARRAY['NASONEX'::varchar(7), 'OMNARIS'::varchar(7)])))))
 GROUP BY rx.ims_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name,
          rx.basket_id,
          rx.basket_type,
          rx.rollup_month,
          rx.trx_count,
          NULL::float,
          rx.tvcmid,
          rx.payment_method,
          rx.rollup_week UNION ALL  SELECT prescriber_rx.ims_id,
        prescriber_rx.payer_plan_number,
        prescriber_rx.plan_name,
        prescriber_rx.model,
        prescriber_rx.payer_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_type,
        prescriber_rx.rollup_month,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_count,
        prescriber_rx.tvcmid,
        prescriber_rx.payment_method,
        prescriber_rx.rollup_week
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.basket_type = 'product'::varchar(7)) AND (prescriber_rx.basket_name <> ALL (ARRAY['NASONEX'::varchar(7), 'OMNARIS'::varchar(7)])) AND (length(prescriber_rx.ims_id) <> 7))) rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((b.teva_product_code = ANY (ARRAY['330-15-005'::varchar(10), '330-15-010'::varchar(10), '330-15-019'::varchar(10), '330-15-015'::varchar(10), '330-15-025'::varchar(10), '330-15-030'::varchar(10), '330-15-047'::varchar(10), '330-15-050'::varchar(10)])) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END,
          CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(a.veeva_account_id, rx.ims_id) END,
          rx.payment_method,
          rx.basket_name;

CREATE  VIEW outbound.zzz_paytype AS
 SELECT rx.model AS MODEL,
        rx.payment_method AS PAYMENT_METHOD
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((length(rx.ims_id) = 7) AND (rx.basket_type = 'product'::varchar(7)) AND (b.teva_product_code = ANY (ARRAY['330-12-002'::varchar(11), '330-12-003'::varchar(11), '330-12-015'::varchar(11), '330-12-019'::varchar(11), '330-12-023'::varchar(11), '330-13-005'::varchar(11), '330-13-006'::varchar(11), '330-13-009'::varchar(11), '330-13-011'::varchar(11), '330-13-016'::varchar(11), '330-13-020'::varchar(11), '330-13-021'::varchar(11), '330-13-022'::varchar(11), '330-13-023'::varchar(11), '330-13-024'::varchar(11), '330-13-025'::varchar(11), '330-13-026'::varchar(11), '330-13-027'::varchar(11), '330-13-028'::varchar(11), '330-13-029'::varchar(11), '330-13-030'::varchar(11), '330-14-001'::varchar(11), '330-14-0025'::varchar(11), '330-14-003'::varchar(11), '330-14-004'::varchar(11), '330-14-005'::varchar(11), '330-14-006'::varchar(11), '330-14-007'::varchar(11), '330-14-008'::varchar(11), '330-14-009'::varchar(11), '330-15-001'::varchar(11), '330-15-005'::varchar(11), '330-15-010'::varchar(11), '330-15-015'::varchar(11), '330-15-019'::varchar(11), '330-15-025'::varchar(11), '330-15-030'::varchar(11), '330-15-040'::varchar(11), '330-15-047'::varchar(11), '330-15-050'::varchar(11), '330-16-020'::varchar(11), '330-16-027'::varchar(11), '330-16-028'::varchar(11), '330-16-029'::varchar(11), '330-16-050'::varchar(11), '330-16-055'::varchar(11), '330-16-056'::varchar(11)])))
 GROUP BY rx.model,
          rx.payment_method;

CREATE  VIEW outbound.zzz_planname AS
 SELECT rx.payer_plan_number AS PAYER_PLAN_NUM,
        rx.plan_name AS PLAN_NAME,
        rx.model AS MODEL,
        rx.payer_name AS PAYER_NAME
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((length(rx.ims_id) = 7) AND (b.teva_product_code = ANY (ARRAY['330-14-001'::varchar(11), '330-14-007'::varchar(11), '330-14-009'::varchar(11), '330-14-0025'::varchar(11), '330-16-050'::varchar(11), '330-14-003'::varchar(11), '330-14-008'::varchar(11), '330-16-055'::varchar(11), '330-14-004'::varchar(11), '330-16-056'::varchar(11), '330-14-006'::varchar(11), '330-15-050'::varchar(11), '330-14-005'::varchar(11), '330-15-005'::varchar(11), '330-12-002'::varchar(11), '330-15-010'::varchar(11), '330-15-019'::varchar(11), '330-12-015'::varchar(11), '330-15-015'::varchar(11), '330-12-003'::varchar(11), '330-15-025'::varchar(11), '330-12-023'::varchar(11), '330-15-030'::varchar(11), '330-12-019'::varchar(11), '330-15-047'::varchar(11), '330-15-050'::varchar(11), '330-13-020'::varchar(11), '330-16-020'::varchar(11), '330-13-021'::varchar(11), '330-13-016'::varchar(11), '330-13-022'::varchar(11), '330-13-023'::varchar(11), '330-13-024'::varchar(11), '330-13-025'::varchar(11), '330-13-026'::varchar(11), '330-13-027'::varchar(11), '330-13-028'::varchar(11), '330-13-029'::varchar(11), '330-13-030'::varchar(11), '330-16-027'::varchar(11), '330-16-028'::varchar(11), '330-16-029'::varchar(11), '330-13-009'::varchar(11), '330-13-005'::varchar(11), '330-13-006'::varchar(11), '330-13-011'::varchar(11), '330-15-019'::varchar(11), '330-12-015'::varchar(11), '330-15-015'::varchar(11), '330-12-003'::varchar(11), '330-15-025'::varchar(11), '330-12-023'::varchar(11), '330-15-001'::varchar(11), '330-15-030'::varchar(11), '330-12-019'::varchar(11), '330-15-047'::varchar(11), '330-15-040'::varchar(11)])))
 GROUP BY rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name;

CREATE  VIEW outbound.zzz_saba_medicaidplangroups AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        coalesce(a.veeva_account_id, rx.ims_id) AS HCP_ID,
        rx.payer_plan_number AS PLAN_CODE,
        rx.plan_name AS PLAN_NAME,
        rx.model AS MODEL,
        rx.payer_name AS PLAN_GROUP,
        CASE WHEN (rx.basket_name ~~ 'PROAIR HFA%'::varchar(11)) THEN 'PROAIR'::varchar(6) ELSE rx.basket_name END AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM (((( SELECT rx.ims_id,
        rx.payer_plan_number,
        rx.plan_name,
        rx.model,
        rx.payer_name,
        rx.basket_name,
        rx.basket_id,
        rx.basket_type,
        rx.rollup_month,
        rx.trx_count,
        rx.tvcmid,
        rx.payment_method,
        rx.rollup_week
 FROM (datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency))))
 WHERE ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name,
          rx.basket_id,
          rx.basket_type,
          rx.rollup_month,
          rx.trx_count,
          rx.tvcmid,
          rx.payment_method,
          rx.rollup_week) rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((b.teva_product_code = ANY (ARRAY['330-14-001'::varchar(10), '330-14-007'::varchar(10), '330-14-009'::varchar(10), '330-14-002'::varchar(10), '330-14-003'::varchar(10), '330-14-008'::varchar(10), '330-14-004'::varchar(10), '330-14-006'::varchar(10), '330-14-005'::varchar(10), '330-14-010'::varchar(10)])) AND (rx.payment_method ~~ '%MEDICAID%'::varchar(10)) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END,
          coalesce(a.veeva_account_id, rx.ims_id),
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          CASE WHEN (rx.basket_name ~~ 'PROAIR HFA%'::varchar(11)) THEN 'PROAIR'::varchar(6) ELSE rx.basket_name END;

CREATE  VIEW outbound.zzz_saba_mop AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(a.veeva_account_id, rx.ims_id) END AS HCP_ID,
        rx.payment_method AS PAYMENT_METHOD,
        CASE WHEN (rx.basket_name ~~ 'PROAIR HFA%'::varchar(11)) THEN 'PROAIR'::varchar(6) ELSE rx.basket_name END AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM (((( SELECT rx.ims_id,
        rx.payer_plan_number,
        rx.plan_name,
        rx.model,
        rx.payer_name,
        rx.basket_name,
        rx.basket_id,
        rx.basket_type,
        rx.rollup_month,
        rx.trx_count,
        rx.nrx_count,
        rx.tvcmid,
        rx.payment_method,
        rx.rollup_week
 FROM (datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency))))
 WHERE (rx.basket_type = 'product'::varchar(7))
 GROUP BY rx.ims_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name,
          rx.basket_id,
          rx.basket_type,
          rx.rollup_month,
          rx.trx_count,
          rx.nrx_count,
          rx.tvcmid,
          rx.payment_method,
          rx.rollup_week) rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((b.teva_product_code = ANY (ARRAY['330-14-001'::varchar(10), '330-14-007'::varchar(10), '330-14-009'::varchar(10), '330-14-002'::varchar(10), '330-14-003'::varchar(10), '330-14-008'::varchar(10), '330-14-004'::varchar(10), '330-14-006'::varchar(10), '330-14-005'::varchar(10), '330-14-010'::varchar(10)])) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END,
          CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(a.veeva_account_id, rx.ims_id) END,
          rx.payment_method,
          CASE WHEN (rx.basket_name ~~ 'PROAIR HFA%'::varchar(11)) THEN 'PROAIR'::varchar(6) ELSE rx.basket_name END;

CREATE  VIEW outbound.zzz_zs_agile_rx AS
 SELECT rx.ims_id AS IMS_ID,
        b.teva_product_code AS PRODUCT_CODE,
        rx.basket_name AS PRODUCT_NAME,
        rx.rollup_month AS MONTH_ENDING,
        sum(CASE mod(rx.nrx_quantity, 1::float) WHEN NULLSEQUAL 0::float THEN ((rx.nrx_quantity)::int)::varchar ELSE rtrim((rx.nrx_quantity)::varchar, '0'::varchar(1)) END) AS NRX_QTY,
        sum(CASE mod(rx.trx_quantity, 1::float) WHEN NULLSEQUAL 0::float THEN ((rx.trx_quantity)::int)::varchar ELSE rtrim((rx.trx_quantity)::varchar, '0'::varchar(1)) END) AS TRX_QTY,
        sum(CASE mod(rx.unnormalized_nrx_count, 1::float) WHEN NULLSEQUAL 0::float THEN ((rx.unnormalized_nrx_count)::int)::varchar ELSE rtrim((rx.unnormalized_nrx_count)::varchar, '0'::varchar(1)) END) AS NRX_CNT,
        sum(CASE mod(rx.unnormalized_trx_count, 1::float) WHEN NULLSEQUAL 0::float THEN ((rx.unnormalized_trx_count)::int)::varchar ELSE rtrim((rx.unnormalized_trx_count)::varchar, '0'::varchar(1)) END) AS TRX_CNT
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) LEFT  JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((rx.rollup_month >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (rx.rollup_month <= last_day(add_months((statement_timestamp())::timestamp, (-2)))) AND (((b.teva_product_code = ANY (ARRAY['100120'::varchar(6), '100N25'::varchar(6), '100N15'::varchar(6), '100101'::varchar(6), '100N20'::varchar(6), '100102'::varchar(6), '100N05'::varchar(6)])) AND (rx.basket_type = 'product'::varchar(7))) OR ((b.teva_product_code = ANY (ARRAY['100100'::varchar(6), '100N00'::varchar(6)])) AND (rx.basket_type = 'brand'::varchar(5))) OR ((b.teva_product_code = ANY (ARRAY['100700'::varchar(6)])) AND (rx.basket_type = 'submarket'::varchar(9)))) AND (length(rx.ims_id) = 7) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.ims_id,
          b.teva_product_code,
          rx.basket_name,
          rx.rollup_month;

CREATE  VIEW outbound.zzz_amrix_market AS
SELECT axiom_market.plan_num AS PLAN_NUM, axiom_market.product_code AS PRODUCT_CODE, coalesce(sum(axiom_market.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_market.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_market.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_market.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_market.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_market.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_market.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_market.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_market.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_market.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_market.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_market.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_market.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_market.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_market.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_market.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_market.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_market.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_market.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_market.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_market.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_market.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_market.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_market.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_market.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_market.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_market.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_market.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_market.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_market.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_market.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_market.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_market.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_market.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_market.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_market.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_market.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_market.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_market.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_market.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_market.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_market.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_market.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_market.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_market.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_market.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_market.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_market.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_market axiom_market WHERE (axiom_market.product_code = ANY (ARRAY['A00380'::varchar(6), 'A00100'::varchar(6), 'A00330'::varchar(6), 'A00210'::varchar(6), 'A00370'::varchar(6), 'A00220'::varchar(6), 'A00230'::varchar(6), 'A00350'::varchar(6), 'A00360'::varchar(6), 'A00240'::varchar(6), 'A00320'::varchar(6), 'A00250'::varchar(6), 'A00340'::varchar(6), 'A00260'::varchar(6), 'A00270'::varchar(6), 'A00280'::varchar(6), 'A00290'::varchar(6)])) GROUP BY axiom_market.plan_num, axiom_market.product_code;

CREATE  VIEW outbound.zzz_amrix_product_totals AS
SELECT axiom_product_totals.product_code AS PRODUCT_CODE, coalesce(sum(axiom_product_totals.trx_cnt24), 0::float) AS TRX_CNT24, coalesce(sum(axiom_product_totals.nrx_cnt24), 0::float) AS NRX_CNT24, coalesce(sum(axiom_product_totals.trx_cnt23), 0::float) AS TRX_CNT23, coalesce(sum(axiom_product_totals.nrx_cnt23), 0::float) AS NRX_CNT23, coalesce(sum(axiom_product_totals.trx_cnt22), 0::float) AS TRX_CNT22, coalesce(sum(axiom_product_totals.nrx_cnt22), 0::float) AS NRX_CNT22, coalesce(sum(axiom_product_totals.trx_cnt21), 0::float) AS TRX_CNT21, coalesce(sum(axiom_product_totals.nrx_cnt21), 0::float) AS NRX_CNT21, coalesce(sum(axiom_product_totals.trx_cnt20), 0::float) AS TRX_CNT20, coalesce(sum(axiom_product_totals.nrx_cnt20), 0::float) AS NRX_CNT20, coalesce(sum(axiom_product_totals.trx_cnt19), 0::float) AS TRX_CNT19, coalesce(sum(axiom_product_totals.nrx_cnt19), 0::float) AS NRX_CNT19, coalesce(sum(axiom_product_totals.trx_cnt18), 0::float) AS TRX_CNT18, coalesce(sum(axiom_product_totals.nrx_cnt18), 0::float) AS NRX_CNT18, coalesce(sum(axiom_product_totals.trx_cnt17), 0::float) AS TRX_CNT17, coalesce(sum(axiom_product_totals.nrx_cnt17), 0::float) AS NRX_CNT17, coalesce(sum(axiom_product_totals.trx_cnt16), 0::float) AS TRX_CNT16, coalesce(sum(axiom_product_totals.nrx_cnt16), 0::float) AS NRX_CNT16, coalesce(sum(axiom_product_totals.trx_cnt15), 0::float) AS TRX_CNT15, coalesce(sum(axiom_product_totals.nrx_cnt15), 0::float) AS NRX_CNT15, coalesce(sum(axiom_product_totals.trx_cnt14), 0::float) AS TRX_CNT14, coalesce(sum(axiom_product_totals.nrx_cnt14), 0::float) AS NRX_CNT14, coalesce(sum(axiom_product_totals.trx_cnt13), 0::float) AS TRX_CNT13, coalesce(sum(axiom_product_totals.nrx_cnt13), 0::float) AS NRX_CNT13, coalesce(sum(axiom_product_totals.trx_cnt12), 0::float) AS TRX_CNT12, coalesce(sum(axiom_product_totals.nrx_cnt12), 0::float) AS NRX_CNT12, coalesce(sum(axiom_product_totals.trx_cnt11), 0::float) AS TRX_CNT11, coalesce(sum(axiom_product_totals.nrx_cnt11), 0::float) AS NRX_CNT11, coalesce(sum(axiom_product_totals.trx_cnt10), 0::float) AS TRX_CNT10, coalesce(sum(axiom_product_totals.nrx_cnt10), 0::float) AS NRX_CNT10, coalesce(sum(axiom_product_totals.trx_cnt9), 0::float) AS TRX_CNT9, coalesce(sum(axiom_product_totals.nrx_cnt9), 0::float) AS NRX_CNT9, coalesce(sum(axiom_product_totals.trx_cnt8), 0::float) AS TRX_CNT8, coalesce(sum(axiom_product_totals.nrx_cnt8), 0::float) AS NRX_CNT8, coalesce(sum(axiom_product_totals.trx_cnt7), 0::float) AS TRX_CNT7, coalesce(sum(axiom_product_totals.nrx_cnt7), 0::float) AS NRX_CNT7, coalesce(sum(axiom_product_totals.trx_cnt6), 0::float) AS TRX_CNT6, coalesce(sum(axiom_product_totals.nrx_cnt6), 0::float) AS NRX_CNT6, coalesce(sum(axiom_product_totals.trx_cnt5), 0::float) AS TRX_CNT5, coalesce(sum(axiom_product_totals.nrx_cnt5), 0::float) AS NRX_CNT5, coalesce(sum(axiom_product_totals.trx_cnt4), 0::float) AS TRX_CNT4, coalesce(sum(axiom_product_totals.nrx_cnt4), 0::float) AS NRX_CNT4, coalesce(sum(axiom_product_totals.trx_cnt3), 0::float) AS TRX_CNT3, coalesce(sum(axiom_product_totals.nrx_cnt3), 0::float) AS NRX_CNT3, coalesce(sum(axiom_product_totals.trx_cnt2), 0::float) AS TRX_CNT2, coalesce(sum(axiom_product_totals.nrx_cnt2), 0::float) AS NRX_CNT2, coalesce(sum(axiom_product_totals.trx_cnt1), 0::float) AS TRX_CNT1, coalesce(sum(axiom_product_totals.nrx_cnt1), 0::float) AS NRX_CNT1 FROM outbound.axiom_product_totals axiom_product_totals WHERE (axiom_product_totals.product_code = ANY (ARRAY['A00380'::varchar(6), 'A00100'::varchar(6), 'A00330'::varchar(6), 'A00210'::varchar(6), 'A00370'::varchar(6), 'A00220'::varchar(6), 'A00230'::varchar(6), 'A00350'::varchar(6), 'A00360'::varchar(6), 'A00240'::varchar(6), 'A00320'::varchar(6), 'A00250'::varchar(6), 'A00340'::varchar(6), 'A00260'::varchar(6), 'A00270'::varchar(6), 'A00280'::varchar(6), 'A00290'::varchar(6)])) GROUP BY axiom_product_totals.product_code;

CREATE  VIEW outbound.v_ob_ahm_customer_individual AS
 SELECT cm.tvcmid AS CustomerId,
        coalesce(cm.first_name, ''::varchar) AS FirstName,
        coalesce(cm.last_name, ''::varchar) AS LastName,
        coalesce(cm.middle_name, ''::varchar) AS MiddleName,
        ''::varchar AS Salutation,
        coalesce(cm.suffix, ''::varchar) AS PersonalSuffix,
        cm.sub_type_name AS CustomerType,
        CASE WHEN (cm.teva_specialty_code = 'NRP'::varchar(3)) THEN 'NP'::varchar(2) ELSE d.profession_code_shortname END AS ProfessionalDesignation,
        coalesce(cm.teva_specialty_code, ''::varchar) AS PrimarySpecialtyCode,
        ''::varchar AS SecondarySpecialtyCode,
        ''::varchar AS GovernmentEmployeeIndicator,
        ''::varchar AS TaxId,
        ''::varchar AS TaxIdType,
        ''::varchar AS BusinessEmail,
        ''::varchar AS BusinessPhone,
        ''::varchar AS BusinessFax,
        ''::varchar AS MobilePhone,
        ''::varchar AS HomePhone,
        'US'::varchar(2) AS RegionId,
        CASE WHEN (cm.healthcare_professional_status_code = 'A'::varchar(1)) THEN 'Active'::varchar(6) WHEN (cm.healthcare_professional_status_code <> 'A'::varchar(1)) THEN 'Inactive'::varchar(8) ELSE ''::varchar END AS Status
 FROM ((mdm.hcp cm LEFT  JOIN ( SELECT Desig.tvcmid,
        Desig.profession_code,
        Desig.rownum
 FROM ( SELECT DISTINCT professional.tvcmid,
        professional.profession_code,
        row_number() OVER (PARTITION BY professional.tvcmid ORDER BY professional.profession_rank, professional.updated_date DESC NULLS LAST, professional.profession_code) AS rownum
 FROM mdm.professional
 ORDER BY professional.tvcmid,
          professional.profession_code,
          row_number() OVER (PARTITION BY professional.tvcmid ORDER BY professional.profession_rank, professional.updated_date DESC NULLS LAST, professional.profession_code)) Desig
 WHERE (Desig.rownum = 1)) prof ON ((cm.tvcmid = prof.tvcmid))) JOIN reference.Designations d ON ((d.profession_code = prof.profession_code)))
 WHERE ((cm.tvcmid IS NOT NULL) AND (cm.file_id IN ( SELECT max(hcp.file_id) AS max
 FROM mdm.hcp)))
 GROUP BY cm.tvcmid,
          coalesce(cm.first_name, ''::varchar),
          coalesce(cm.last_name, ''::varchar),
          coalesce(cm.middle_name, ''::varchar),
          ''::varchar,
          coalesce(cm.suffix, ''::varchar),
          cm.sub_type_name,
          CASE WHEN (cm.teva_specialty_code = 'NRP'::varchar(3)) THEN 'NP'::varchar(2) ELSE d.profession_code_shortname END,
          coalesce(cm.teva_specialty_code, ''::varchar),
          'US'::varchar(2),
          CASE WHEN (cm.healthcare_professional_status_code = 'A'::varchar(1)) THEN 'Active'::varchar(6) WHEN (cm.healthcare_professional_status_code <> 'A'::varchar(1)) THEN 'Inactive'::varchar(8) ELSE ''::varchar END;

CREATE  VIEW outbound.zzz_zs_tr_launch_analytics AS
 SELECT rx.ims_id,
        rx.model,
        rx.payment_method AS method_of_payment,
        rx.payer_plan_number,
        rx.basket_name,
        rx.ims_product_group,
        rx.rollup_month AS month_ending,
        rx.rollup_week AS week_ending,
        rx.nrx_count,
        rx.trx_count,
        rx.sales_category
 FROM (((datamart.prescriber_rx rx JOIN product.basket b ON ((rx.basket_id = b.basket_id))) JOIN outbound.month_rollup_and_bucket mth ON ((rx.rollup_month = mth.month_ending))) JOIN reference.ims_report_cnt_qty_mapping irc ON (((rx.ims_client_number = irc.ims_client_number) AND (coalesce(rx.ims_report_number_cnt, ''::varchar) = coalesce(irc.ims_report_number_cnt, ''::varchar)) AND (coalesce(rx.ims_report_number_qty, ''::varchar) = coalesce(irc.ims_report_number_qty, ''::varchar)) AND (irc.active_flag = 'Y'::char(1)))))
 WHERE ((b.teva_product_code ~~ '330-14%'::varchar(7)) AND (rx.basket_type = 'product'::varchar(7)) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 12) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)));

CREATE  VIEW outbound.ftf_ims_monthly_market_obm AS
(SELECT a.plan_number AS "PLAN ID", a.plan_name AS "PLAN NAME", a.payer_number AS "PAYER ID", a.payer_name AS "PAYER NAME", pg.market_name AS "MARKET NAME", rx.basket_name AS "PRODUCT NAME", mpzd.zip, to_char(rx.rollup_month, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum((rx.trx_count / mpzd.divisor)) AS TRX, sum((rx.nrx_count / mpzd.divisor)) AS NRX FROM (((((datamart.plantrak_workbook a JOIN datamart.prescriber_rx rx ON (((a.plan_name = rx.plan_name) AND (a.payer_name = rx.payer_name) AND (a.model = rx.model) AND (a.payer_plan_number = rx.payer_plan_number) AND (a.method_of_payment = rx.payment_method)))) JOIN outbound.month_rollup_and_bucket mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) JOIN (SELECT market_presc_zip_divisor.sales_force_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.ims_id, market_presc_zip_divisor.zip, market_presc_zip_divisor.divisor FROM outbound.market_presc_zip_divisor GROUP BY market_presc_zip_divisor.sales_force_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.ims_id, market_presc_zip_divisor.zip, market_presc_zip_divisor.divisor) mpzd ON (((rx.ims_id = mpzd.ims_id) AND (rx.ims_client_number = mpzd.ims_client_number) AND (rx.ims_report_number_cnt = mpzd.ims_report_number)))) JOIN (SELECT ims_report_cnt_qty_mapping.ims_client_number, ims_report_cnt_qty_mapping.ims_report_number_cnt, ims_report_cnt_qty_mapping.report_frequency FROM reference.ims_report_cnt_qty_mapping WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.data_source = 'FTF'::varchar(3)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.data_source) pg ON ((pg.basket_id = rx.basket_id))) WHERE (rx.market_name = ANY (ARRAY['ALLERGY MARKET TOTAL'::varchar(20), 'BDP NASAL MARKET TOTAL'::varchar(22), 'ICS MARKET TOTAL'::varchar(16), 'ICS SPLIT MARKET TOTAL'::varchar(22), 'LABA MARKET TOTAL'::varchar(17), 'SABA MARKET TOTAL'::varchar(17)])) GROUP BY a.plan_number, a.plan_name, a.payer_number, a.payer_name, pg.market_name, rx.basket_name, mpzd.zip, rx.rollup_month UNION SELECT a.plan_number AS "PLAN ID", a.plan_name AS "PLAN NAME", a.payer_number AS "PAYER ID", a.payer_name AS "PAYER NAME", pg.market_name AS "MARKET NAME", rx.basket_name AS "PRODUCT NAME", mpzd.zip, to_char(rx.rollup_month, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum((rx.trx_count / mpzd.divisor)) AS TRX, sum((rx.nrx_count / mpzd.divisor)) AS NRX FROM (((((datamart.plantrak_workbook a JOIN datamart.prescriber_rx rx ON (((a.plan_name = rx.plan_name) AND (a.payer_name = rx.payer_name) AND (a.model = rx.model) AND (a.payer_plan_number = rx.payer_plan_number) AND (a.method_of_payment = rx.payment_method)))) JOIN outbound.month_rollup_and_bucket mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) JOIN (SELECT market_presc_zip_divisor.sales_force_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.ims_id, market_presc_zip_divisor.zip, market_presc_zip_divisor.divisor FROM outbound.market_presc_zip_divisor GROUP BY market_presc_zip_divisor.sales_force_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.ims_id, market_presc_zip_divisor.zip, market_presc_zip_divisor.divisor) mpzd ON (((rx.ims_id = mpzd.ims_id) AND (rx.ims_client_number = mpzd.ims_client_number) AND (rx.ims_report_number_cnt = mpzd.ims_report_number)))) JOIN (SELECT ims_report_cnt_qty_mapping.ims_client_number, ims_report_cnt_qty_mapping.ims_report_number_cnt, ims_report_cnt_qty_mapping.report_frequency FROM reference.ims_report_cnt_qty_mapping WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.data_source = 'FTF'::varchar(3)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.data_source) pg ON ((pg.basket_id = rx.basket_id))) WHERE (rx.market_name = ANY (ARRAY['MS MARKET'::varchar(9), 'PD MARKET'::varchar(9)])) GROUP BY a.plan_number, a.plan_name, a.payer_number, a.payer_name, pg.market_name, rx.basket_name, mpzd.zip, rx.rollup_month) UNION SELECT a.plan_number AS "PLAN ID", a.plan_name AS "PLAN NAME", a.payer_number AS "PAYER ID", a.payer_name AS "PAYER NAME", pg.market_name AS "MARKET NAME", rx.basket_name AS "PRODUCT NAME", mpzd.zip, to_char(rx.rollup_month, 'YYYY-MM-DD'::varchar(10)) AS DATE, sum((rx.trx_count / mpzd.divisor)) AS TRX, sum((rx.nrx_count / mpzd.divisor)) AS NRX FROM (((((datamart.plantrak_workbook a JOIN datamart.prescriber_rx rx ON (((a.plan_name = rx.plan_name) AND (a.payer_name = rx.payer_name) AND (a.model = rx.model) AND (a.payer_plan_number = rx.payer_plan_number) AND (a.method_of_payment = rx.payment_method)))) JOIN outbound.month_rollup_and_bucket mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) JOIN (SELECT market_presc_zip_divisor.sales_force_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.ims_id, market_presc_zip_divisor.zip, market_presc_zip_divisor.divisor FROM outbound.market_presc_zip_divisor GROUP BY market_presc_zip_divisor.sales_force_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.ims_id, market_presc_zip_divisor.zip, market_presc_zip_divisor.divisor) mpzd ON (((rx.ims_id = mpzd.ims_id) AND (rx.ims_client_number = mpzd.ims_client_number) AND (rx.ims_report_number_cnt = mpzd.ims_report_number)))) JOIN (SELECT ims_report_cnt_qty_mapping.ims_client_number, ims_report_cnt_qty_mapping.ims_report_number_cnt, ims_report_cnt_qty_mapping.report_frequency FROM reference.ims_report_cnt_qty_mapping WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.data_source = 'FTF'::varchar(3)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.data_source) pg ON ((pg.basket_id = rx.basket_id))) WHERE (rx.market_name = 'TOTAL STIMULANT/SLEEP/SEDATIVE'::varchar(30)) GROUP BY a.plan_number, a.plan_name, a.payer_number, a.payer_name, pg.market_name, rx.basket_name, mpzd.zip, rx.rollup_month;

CREATE  VIEW outbound.zzz_asi_psr_enrollment AS
 SELECT enrollment_summary.tvcmid,
        enrollment_summary.ims_id,
        enrollment_summary.npi,
        CASE WHEN (enrollment_summary.veeva_account_id IS NULL) THEN enrollment_summary.ims_id ELSE enrollment_summary.veeva_account_id END AS veeva_account_id,
        enrollment_summary.ndc,
        enrollment_summary.indication,
        to_char(enrollment_summary.week_ending, 'YYYYMMDD'::varchar(8)) AS week_ending,
        enrollment_summary.in_progress_count,
        enrollment_summary.completed_count,
        enrollment_summary.cancelled_count,
        enrollment_summary.prescriber_count
 FROM datamart.enrollment_summary
 ORDER BY to_char(enrollment_summary.week_ending, 'YYYYMMDD'::varchar(8));

CREATE  VIEW outbound.zzz_tr_launch_analytics_rx AS
 SELECT rx.ims_id,
        rx.model,
        rx.payment_method AS method_of_payment,
        rx.payer_plan_number AS payer_plan_num,
        b.name AS product_name,
        b.teva_product_code AS product_code,
        rx.rollup_month AS month_ending,
        mth.month_bucket,
        rx.rollup_week AS week_ending,
        mth.calendar_week_bucket AS week_bucket,
        sum(rx.nrx_count) AS nrx_count,
        sum(rx.trx_count) AS trx_count,
        rx.sales_category
 FROM (((datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) LEFT  JOIN product.basket b ON ((rx.basket_id = b.basket_id))) JOIN ( SELECT ims_week_buckets.month_bucket,
        ims_week_buckets.calendar_week,
        ims_week_buckets.calendar_week_bucket,
        ims_week_buckets.split_week_ending,
        ims_week_buckets.month_ending
 FROM integration.ims_week_buckets) mth ON (((rx.rollup_week = mth.calendar_week) AND (rx.rollup_month = mth.month_ending))))
 WHERE (((b.teva_product_code ~~ '%330-14%'::varchar(8)) OR (b.basket_id IN ( SELECT basket_item.entity_id
 FROM product.basket_item
 WHERE (basket_item.basket_id = 5398)))) AND (rx.basket_type = 'product'::varchar(7)) AND (mth.calendar_week_bucket >= 1) AND (mth.calendar_week_bucket <= 52))
 GROUP BY rx.ims_id,
          rx.model,
          rx.payment_method,
          rx.payer_plan_number,
          b.name,
          b.teva_product_code,
          rx.rollup_month,
          mth.month_bucket,
          rx.rollup_week,
          mth.calendar_week_bucket,
          rx.nrx_count,
          rx.trx_count,
          rx.sales_category;

CREATE  VIEW outbound.zzz_brandedims_medicaidplangroups AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        coalesce(a.veeva_account_id, rx.ims_id) AS HCP_ID,
        rx.payer_plan_number AS PLAN_CODE,
        rx.plan_name AS PLAN_NAME,
        rx.model AS MODEL,
        rx.payer_name AS PLAN_GROUP,
        rx.basket_name AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM (((( SELECT rx.ims_id,
        rx.payer_plan_number,
        rx.plan_name,
        rx.model,
        rx.payer_name,
        rx.basket_name,
        rx.basket_id,
        rx.basket_type,
        rx.rollup_month,
        rx.trx_count,
        rx.tvcmid,
        rx.payment_method,
        rx.rollup_week
 FROM (datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency))))
 WHERE (((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) OR (rx.payer_plan_number = ANY (ARRAY['7001720001'::varchar(10), '0013670087'::varchar(10)]))) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name,
          rx.basket_id,
          rx.basket_type,
          rx.rollup_month,
          rx.trx_count,
          rx.tvcmid,
          rx.payment_method,
          rx.rollup_week) rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE (((b.basket_id)::varchar = ANY (ARRAY['85'::varchar(10), '84'::varchar(10), '86'::varchar(10), '63'::varchar(10), '405'::varchar(10), '87'::varchar(10), '89'::varchar(10), '88'::varchar(10), '580'::varchar(10), '581'::varchar(10), '582'::varchar(10), '583'::varchar(10), '584'::varchar(10), '585'::varchar(10), '5346'::varchar(10), '5347'::varchar(10), '5348'::varchar(10), '589'::varchar(10), '590'::varchar(10), '5394'::varchar(10), '5395'::varchar(10), '5396'::varchar(10), '586'::varchar(10), '587'::varchar(10), '103'::varchar(10)])) AND ((rx.payment_method ~~ '%MEDICAID%'::varchar(10)) OR (rx.payer_plan_number = ANY (ARRAY['7001720001'::varchar(10), '0013670087'::varchar(10)]))) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY rx.ims_id,
          a.veeva_account_id,
          rx.payer_plan_number,
          rx.plan_name,
          rx.model,
          rx.payer_name,
          rx.basket_name;

CREATE  VIEW outbound.zzz_brandedims_mop AS
 SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS IMS_ID,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(a.veeva_account_id, rx.ims_id) END AS HCP_ID,
        rx.payment_method AS PAYMENT_METHOD,
        rx.basket_name AS PRODUCT,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH24,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH23,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH22,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH21,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH20,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH19,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH18,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH17,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH16,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH15,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH14,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH13,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH12,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH11,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH10,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH9,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH8,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH7,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH6,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH5,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH4,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH3,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH2,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS TRX_MTH1
 FROM ((((datamart.prescriber_rx rx JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.report_frequency
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) actv ON (((rx.ims_client_number = actv.ims_client_number) AND (rx.ims_report_number_cnt = actv.ims_report_number_cnt) AND (rx.report_frequency = actv.report_frequency)))) JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON (((last_day(rx.rollup_month) = mth.month_ending) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24)))) LEFT  JOIN ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.tvcmid) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE ((xref.id_type = 'VEEVA_ID'::varchar(8)) AND (xref.tvcmid IS NOT NULL))) a ON (((a.tvcmid = rx.tvcmid) AND (a.rnk = 1)))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE (((b.basket_id)::varchar = ANY (ARRAY['85'::varchar(10), '84'::varchar(10), '86'::varchar(10), '63'::varchar(10), '405'::varchar(10), '87'::varchar(10), '89'::varchar(10), '88'::varchar(10), '580'::varchar(10), '581'::varchar(10), '582'::varchar(10), '583'::varchar(10), '584'::varchar(10), '585'::varchar(10), '5346'::varchar(10), '5347'::varchar(10), '5348'::varchar(10), '589'::varchar(10), '590'::varchar(10), '5394'::varchar(10), '5395'::varchar(10), '5396'::varchar(10), '586'::varchar(10), '587'::varchar(10), '103'::varchar(10)])) AND (rx.basket_type = 'product'::varchar(7)))
 GROUP BY CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END,
          CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(a.veeva_account_id, rx.ims_id) END,
          rx.payment_method,
          rx.basket_name;

CREATE  VIEW outbound.zzz_asi_rems_extract AS
 SELECT r.ACCOUNT_ID,
        r.ENROLLMENT_ID,
        r.NPI,
        r.DEA_NUM,
        r.PROGRAM_ID,
        r.REMS_PROGRAM,
        r.ENROLLMENT_STATUS,
        r.CURRENT_ENROLLMENT_STEP,
        r.EFFECTIVE_DATE,
        r.EXPIRATION_DATE
 FROM ( SELECT coalesce(cm_vvid.id_num, cm_imsid.id_num) AS ACCOUNT_ID,
        r.enrollment_id AS ENROLLMENT_ID,
        r.npi AS NPI,
        r.dea_num AS DEA_NUM,
        r.program_id AS PROGRAM_ID,
        "substring"(r.program_name, 1, 4) AS REMS_PROGRAM,
        r.status AS ENROLLMENT_STATUS,
        r.in_progress_step AS CURRENT_ENROLLMENT_STEP,
        r.effective_date AS EFFECTIVE_DATE,
        r.expiration_date AS EXPIRATION_DATE
 FROM ((datamart.rems_prescriber r LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        max(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'VEEVA_ID'::varchar(8))
 GROUP BY tvcmid_xref.tvcmid) cm_vvid ON ((r.prescriber_tvcmid = cm_vvid.tvcmid))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        max(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'IMS_ID'::varchar(6))
 GROUP BY tvcmid_xref.tvcmid) cm_imsid ON ((r.prescriber_tvcmid = cm_imsid.tvcmid)))) r
 WHERE (r.ACCOUNT_ID IS NOT NULL);

CREATE  VIEW outbound.zzz_zs_agile_mkt_fentora_obq_demo AS
SELECT pcd.tvcmid, pcd.ims_id, pcd.veeva_account_id, pcd.first_name, pcd.middle_name, pcd.last_name, pcd.degree, ((pcd.ptr_address_1 || pcd.ptr_address_2) || pcd.ptr_address_3) AS address, pcd.ptr_city, pcd.ptr_state, pcd.ptr_zip, pcd.specialty AS prim_specialty, s.fentora_report_group, rxd.decile_trx_count_6_mo AS fentora_decile, CASE WHEN (cp.ims_id IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS target_flag FROM ((((datamart.prescriber_combined_demographics pcd LEFT JOIN reference.specialty_xref s ON ((pcd.specialty = s.specialty_code))) LEFT JOIN datamart.rx_deciles rxd ON (((pcd.ims_id = rxd.ims_id) AND (rxd.decile_name = 'AMRIX'::varchar(5))))) JOIN (SELECT prescriber_rx.ims_id FROM datamart.prescriber_rx WHERE (prescriber_rx.basket_id = 40)) rx ON ((rx.ims_id = pcd.ims_id))) LEFT JOIN datamart.call_plan cp ON (((pcd.ims_id = cp.ims_id) AND (pcd.sales_force_id = cp.sales_force_id) AND (cp.basket_id = 40)))) WHERE ((pcd.sales_force_id = 'TP'::varchar(2)) AND (pcd.last_name <> 'NATIONAL ASSIGNMENT'::varchar(19)) AND (pcd.first_name IS NOT NULL)) GROUP BY pcd.tvcmid, pcd.ims_id, pcd.veeva_account_id, pcd.first_name, pcd.middle_name, pcd.last_name, pcd.degree, ((pcd.ptr_address_1 || pcd.ptr_address_2) || pcd.ptr_address_3), pcd.ptr_city, pcd.ptr_state, pcd.ptr_zip, pcd.specialty, s.fentora_report_group, rxd.decile_trx_count_6_mo, CASE WHEN (cp.ims_id IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END;

CREATE  VIEW outbound.zzz_zs_agile_mkt_fentora_obq_rems_enrollment AS
 SELECT NULL AS CEPH_ID,
        rp.program_id AS PROGRAM_ID,
        rp.program_name AS PROGRAM_NAME,
        rp.channel AS CHANNEL,
        rp.enrollment_id AS ENROLLMENT_ID,
        rp.first_name AS FIRST_NAME,
        rp.middle_name AS MIDDLE_NAME,
        rp.last_name AS LAST_NAME,
        irp.credential AS CREDENTIAL,
        NULL AS SPECIALTY,
        rp.site_name AS SITE_NAME,
        rp.address_line_1 AS ADDRESS1,
        rp.address_line_2 AS ADDRESS2,
        rp.city AS CITY,
        rp.state AS STATE,
        rp.zip AS ZIP,
        rp.status AS STATUS,
        rp.in_progress_step AS IN_PROGRESS_STEP,
        rp.phone AS PHONE,
        rp.effective_date AS EFFECTIVE_DATE,
        rp.expiration_date AS EXPIRATION_DATE,
        rp.npi AS NPI,
        rp.dea_num AS DEA_NUM,
        rp.obsolescence_date AS OBSOLESCENCE_DATE,
        NULL AS OBSOLESCENCE_REASON,
        (statement_timestamp())::timestamp AS LAST_BUILD_DATE,
        rp.ppaf_count AS PPAF_COUNT,
        NULL AS HAD_ENROLLED_IN_FENTORA_REMS,
        NULL AS CM_ID,
        cm_ims.id_num AS IMS_ID,
        cm_vv.id_num AS VEEVA_ACCOUNT_ID
 FROM (((datamart.rems_prescriber rp JOIN integration.rems_prescriber irp ON (((rp.file_id = irp.file_id) AND (rp.record_id = irp.record_id)))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'IMS_ID'::varchar(6))
 GROUP BY tvcmid_xref.tvcmid) cm_ims ON ((rp.prescriber_tvcmid = cm_ims.tvcmid))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'VEEVA_ID'::varchar(8))
 GROUP BY tvcmid_xref.tvcmid) cm_vv ON ((rp.prescriber_tvcmid = cm_vv.tvcmid)));

CREATE  VIEW outbound.zzz_asi_rx_by_market_hd_parallel AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM ((datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other)))) JOIN outbound.month_rollup_and_bucket iwb ON ((rx.rollup_month = iwb.month_ending)))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '046'::varchar(3)) AND (rx.ims_report_number_cnt = '8'::varchar(1)) AND (rx.report_frequency = 'MONTH'::varchar(5)) AND (((rx.basket_id = ANY (ARRAY[5264, 5266, 5216, 5265])) AND (rx.indication = 'HD'::varchar(2))) OR (rx.basket_id <> ALL (ARRAY[5264, 5266, 5216, 5265]))))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.i_sfa_decile AS
 SELECT rx_deciles.ims_id,
        'CNS'::varchar(3) AS category,
        CASE WHEN (rx_deciles.decile_name = 'MS MARKET'::varchar(9)) THEN 'MS'::varchar(2) WHEN (rx_deciles.decile_name = 'MODAFINIL'::varchar(9)) THEN 'WAKE'::varchar(4) ELSE NULL END AS decile_name,
        rx_deciles.decile_trx_count_6_mo AS trx_cnt_01_06,
        rx_deciles.decile_trx_count_12_mo AS trx_cnt_01_12,
        rx_deciles.tvcmid
 FROM datamart.rx_deciles
 WHERE (((rx_deciles.decile_name = 'MS MARKET'::varchar(9)) OR (rx_deciles.decile_name = 'MODAFINIL'::varchar(9))) AND (rx_deciles.ims_id IN ( SELECT sfa_demographics.ims_id
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = ANY (ARRAY['TC'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) AND (sfa_demographics.ims_id IS NOT NULL)))));

CREATE  VIEW outbound.zzz_rx_amrix AS
 SELECT rx.ims_id,
        rx.payment_method AS mop,
        b.teva_product_code AS product_code,
        b.name AS product_name,
        rx.rollup_month AS month_ending,
        sum(rx.nrx_quantity) AS nrx_qty,
        sum(rx.trx_quantity) AS trx_qty,
        sum(rx.unnormalized_nrx_count) AS nrx_cnt,
        sum(rx.unnormalized_trx_count) AS trx_cnt
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT basket.basket_id,
        basket.name,
        basket.description,
        basket.teva_product_code,
        basket.basket_type
 FROM product.basket
 WHERE (basket.basket_id = ANY (ARRAY[40, 147, 173, 197, 198, 199, 216, 217, 235]))) b ON ((rx.basket_id = b.basket_id))) JOIN ( SELECT ims_report_cnt_qty_mapping.ims_client_number,
        ims_report_cnt_qty_mapping.ims_report_number_cnt,
        ims_report_cnt_qty_mapping.ims_report_number_qty,
        ims_report_cnt_qty_mapping.report_frequency,
        ims_report_cnt_qty_mapping.active_flag,
        ims_report_cnt_qty_mapping.indication_flag
 FROM reference.ims_report_cnt_qty_mapping
 WHERE (ims_report_cnt_qty_mapping.active_flag = 'Y'::char(1))) m ON (((rx.ims_client_number = m.ims_client_number) AND (rx.ims_report_number_cnt <=> m.ims_report_number_cnt) AND (rx.ims_report_number_qty <=> m.ims_report_number_qty))))
 WHERE ((rx.rollup_month >= last_day(add_months((statement_timestamp())::timestamp, (-25)))) AND (rx.rollup_month <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (length(rx.ims_id) = 7))
 GROUP BY rx.ims_id,
          rx.payment_method,
          b.teva_product_code,
          b.name,
          rx.rollup_month;

CREATE  VIEW outbound.zzz_details_amrix AS
 SELECT c.tvcmid,
        c.ims_id,
        c.veeva_account_id,
        initcap(d.last_name) AS last_name,
        initcap(d.first_name) AS first_name,
        initcap(d.middle_name) AS middle_name,
        d.credentials,
        d.zip,
        c.rep_id,
        c.territory_number AS territory_num,
        c.call_date,
        'AMRIX'::varchar(5) AS product,
        cd.detail_position
 FROM (((( SELECT sfa_call_detail.sales_force_id,
        sfa_call_detail.call_id,
        sfa_call_detail.product,
        sfa_call_detail.basket_id,
        sfa_call_detail.basket_name,
        sfa_call_detail.detail_position,
        sfa_call_detail.indication
 FROM datamart.sfa_call_detail
 WHERE ((sfa_call_detail.sales_force_id = ANY (ARRAY['TP'::varchar(2), 'TC'::varchar(2)])) AND (sfa_call_detail.product = 'AMRIX'::varchar(5)))) cd JOIN ( SELECT sfa_call.sales_force_id,
        sfa_call.call_id,
        sfa_call.veeva_account_id,
        sfa_call.ims_id,
        sfa_call.ims_outlet_id,
        sfa_call.customer_type,
        sfa_call.first_name,
        sfa_call.last_name,
        sfa_call.call_type,
        sfa_call.legacy_call_type,
        sfa_call.ceph_id,
        sfa_call.dea_num,
        sfa_call.rep_id,
        sfa_call.rep_first_name,
        sfa_call.rep_last_name,
        sfa_call.territory_number,
        sfa_call.zip_on_call,
        sfa_call.call_date,
        sfa_call.submit_date,
        sfa_call.attendees,
        sfa_call.attendee_type,
        sfa_call.area_number,
        sfa_call.region_number,
        sfa_call.tvcmid,
        sfa_call.call_recordtype,
        sfa_call.call_duration,
        sfa_call.call_datetime,
        sfa_call.call_timezone
 FROM datamart.sfa_call
 WHERE ((sfa_call.call_date >= last_day(add_months((statement_timestamp())::timestamp, (-25)))) AND (sfa_call.call_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))))) c ON ((cd.call_id = c.call_id))) JOIN ( SELECT sfa_demographics.veeva_account_id,
        sfa_demographics.sales_force_id,
        sfa_demographics.customer_type,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.ims_outlet_code,
        sfa_demographics.territory_number,
        sfa_demographics.territory_type,
        sfa_demographics.territory_status,
        sfa_demographics.last_name,
        sfa_demographics.first_name,
        sfa_demographics.middle_name,
        sfa_demographics.suffix_name,
        sfa_demographics.credentials,
        sfa_demographics.organization_name,
        sfa_demographics.veeva_address_id,
        sfa_demographics.address_line1,
        sfa_demographics.address_line2,
        sfa_demographics.address_line3,
        sfa_demographics.city,
        sfa_demographics.state,
        sfa_demographics.zip,
        sfa_demographics.address_status,
        sfa_demographics.phone,
        sfa_demographics.phone_ext,
        sfa_demographics.fax,
        sfa_demographics.mobile,
        sfa_demographics.email,
        sfa_demographics.prim_specialty,
        sfa_demographics.specialty_code,
        sfa_demographics.sfa_create_date,
        sfa_demographics.demo_rank,
        sfa_demographics.last_call_date,
        sfa_demographics.calls_last_90_days,
        sfa_demographics.zip_valid_for_territory_num,
        sfa_demographics.bp_code,
        sfa_demographics.sfa_align_date,
        sfa_demographics.account_demo_id,
        sfa_demographics.pdrp_flag,
        sfa_demographics.designation,
        sfa_demographics.business_type,
        sfa_demographics.area_number,
        sfa_demographics.region_number,
        sfa_demographics.tvcmid
 FROM datamart.sfa_demographics) d ON ((c.veeva_account_id = d.veeva_account_id))) JOIN ( SELECT current_alignment.zip_code,
        current_alignment.city,
        current_alignment.state_code,
        current_alignment.territory_number,
        current_alignment.territory_name,
        current_alignment.area_number,
        current_alignment.area_name,
        current_alignment.region_number,
        current_alignment.region_name,
        current_alignment.sales_force_id,
        current_alignment.organization_code,
        current_alignment.inactive_flag,
        current_alignment.comments,
        current_alignment.mirror_flag,
        current_alignment.mirror_territory_number,
        current_alignment.file_id,
        current_alignment.record_id
 FROM datamart.current_alignment) al ON ((d.zip = al.zip_code)))
 GROUP BY c.tvcmid,
          c.ims_id,
          c.veeva_account_id,
          initcap(d.last_name),
          initcap(d.first_name),
          initcap(d.middle_name),
          d.credentials,
          d.zip,
          c.rep_id,
          c.territory_number,
          c.call_date,
          'AMRIX'::varchar(5),
          cd.detail_position;

CREATE  VIEW outbound.zzz_demo_amrix AS
SELECT d.tvcmid AS TVCMID, d.ims_id AS IMS_ID, d.veeva_account_id AS VEEVA_ACCOUNT_ID, d.first_name AS FIRST_NAME, d.middle_name AS MID_NAME, d.last_name AS LAST_NAME, d.degree AS DEGREE, ((((d.ptr_address_1 || ' '::varchar(1)) || d.ptr_address_2) || ' '::varchar(1)) || d.ptr_address_3) AS ADDRESS, d.ptr_city AS CITY, d.ptr_state AS STATE, d.ptr_zip AS ZIP, d.specialty AS PRIM_SPECIALTY, s1.nuvigil_report_group AS amrix_report_group, dec1.decile_trx_count_6_mo AS amrix_decile, dec2.decile_trx_count_6_mo AS bsmr_decile, dec3.decile_trx_count_6_mo AS total_muscal_relaxant_decile, NULL AS bsmr_less_soma_zanaflex_decile, dec4.decile_trx_count_6_mo AS Cyclobenzaprine_HCL_decile, s1.amrix_target_flag AS TARGET_FLAG FROM ((((((datamart.prescriber_combined_demographics d LEFT JOIN reference.specialty_xref s1 ON ((s1.specialty_code = d.specialty))) LEFT JOIN datamart.rx_deciles dec1 ON (((dec1.ims_id = d.ims_id) AND (upper(dec1.decile_name) = 'AMRIX'::varchar(5))))) LEFT JOIN datamart.rx_deciles dec2 ON (((dec2.ims_id = d.ims_id) AND (upper(dec2.decile_name) = 'BRANDED MUSCLE RELAXANTS'::varchar(24))))) LEFT JOIN datamart.rx_deciles dec3 ON (((dec3.ims_id = d.ims_id) AND (upper(dec3.decile_name) = 'TOTAL MUSCLE RELAXANTS'::varchar(22))))) LEFT JOIN datamart.rx_deciles dec4 ON (((dec4.ims_id = d.ims_id) AND (upper(dec4.decile_name) = 'CYCLOBENZAPRINE HCL'::varchar(19))))) JOIN (SELECT prescriber_rx.ims_id FROM datamart.prescriber_rx prescriber_rx WHERE ((prescriber_rx.basket_id = 176) AND (prescriber_rx.rollup_month >= add_months(prescriber_rx.data_date, (-24))) AND (prescriber_rx.rollup_month <= add_months(prescriber_rx.data_date, (-1))) AND (upper(prescriber_rx.basket_type) = 'PRODUCT'::varchar(7)) AND (prescriber_rx.report_frequency = 'MONTH'::varchar(5))) GROUP BY prescriber_rx.ims_id UNION SELECT sfa_demographics.ims_id FROM datamart.sfa_demographics WHERE (sfa_demographics.sales_force_id = 'TP'::varchar(2)) GROUP BY sfa_demographics.ims_id) rx ON ((d.ims_id = rx.ims_id))) WHERE ((d.sales_force_id = 'TP'::varchar(2)) AND (d.last_name <> 'NATIONAL ASSIGNMENT'::varchar(19)) AND (d.first_name IS NOT NULL)) GROUP BY d.tvcmid, d.ims_id, d.veeva_account_id, d.first_name, d.middle_name, d.last_name, d.degree, ((((d.ptr_address_1 || ' '::varchar(1)) || d.ptr_address_2) || ' '::varchar(1)) || d.ptr_address_3), d.ptr_city, d.ptr_state, d.ptr_zip, d.specialty, s1.nuvigil_report_group, dec1.decile_trx_count_6_mo, dec2.decile_trx_count_6_mo, dec3.decile_trx_count_6_mo, dec4.decile_trx_count_6_mo, s1.amrix_target_flag;

CREATE  VIEW outbound.zzz_copay_redemption_amrix AS
 SELECT cd.physician_tvcmid AS TVCMID,
        cd.physician_ims_id AS IMS_ID,
        cd.physician_veeva_id AS VEEVA_ACCOUNT_ID,
        p.program_number AS ASI_PROGRAM_NUM,
        p.program_description AS PROGRAM_DESC,
        cd.copay_card_number AS COPAY_CARD_NUM,
        coalesce(cd.physician_zip, cd.pharmacy_zip) AS ZIP_CODE,
        to_char(cd.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        cd.basket_name AS BRAND_NAME,
        replace(cd.basket_name, 'AMRIX'::varchar(5), ''::varchar) AS DRUG_DESC,
        cd.quantity AS QTY
 FROM (datamart.copay cd LEFT  JOIN reference.copay_voucher_program p ON (((cd.program_number = p.program_number) AND (cd.redemption_type = p.redemption_type))))
 WHERE ((cd.basket_name ~~ '%AMRIX%'::varchar(7)) AND (cd.fill_date >= last_day((add_months((statement_timestamp())::timestamp, (-25)) + 1))) AND (cd.fill_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))) AND (cd.report_frequency = 'WEEK'::varchar(4)) AND (cd.redemption_type = 'COPAY'::varchar(5)))
 GROUP BY cd.physician_tvcmid,
          cd.physician_ims_id,
          cd.physician_veeva_id,
          p.program_number,
          p.program_description,
          cd.copay_card_number,
          coalesce(cd.physician_zip, cd.pharmacy_zip),
          to_char(cd.fill_date, 'YYYY-MM-DD'::varchar(10)),
          cd.basket_name,
          replace(cd.basket_name, 'AMRIX'::varchar(5), ''::varchar),
          cd.quantity;

CREATE  VIEW outbound.zs_calls_by_specialty AS
SELECT 'TEVA'::varchar(4) AS company, x.specialty_code, d.prim_specialty, sum(c.calls) AS calls_6mth FROM (((SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE (sfa_demographics.ims_id IS NOT NULL) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.veeva_account_id, c.territory_number AS territory_num, sum(1) AS calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01))) GROUP BY c.veeva_account_id, c.territory_number) c ON (((d.VEEVA_ACCOUNT_ID = c.veeva_account_id) AND (d.territory_num = c.territory_num)))) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) GROUP BY d.prim_specialty, x.specialty_code ORDER BY x.specialty_code;

CREATE  VIEW outbound.zs_calls_by_sales_force AS
 SELECT 'TEVA'::varchar(4) AS company,
        to_char(month_lookup.m01, 'yyyymm'::varchar(6)) AS month_ending,
        c.sales_force_id,
        CASE c.sales_force_id WHEN NULLSEQUAL 'TP'::varchar(2) THEN 'Psychiatry'::varchar(10) WHEN NULLSEQUAL 'TN'::varchar(2) THEN 'Neuroscience'::varchar(12) WHEN NULLSEQUAL 'TO'::varchar(2) THEN 'Oncology'::varchar(8) WHEN NULLSEQUAL 'TR'::varchar(2) THEN 'Respiratory'::varchar(11) WHEN NULLSEQUAL 'TS'::varchar(2) THEN 'Severe Asthma'::varchar(13) ELSE NULL END AS sales_team,
        count(DISTINCT c.territory_num) AS num_terrs,
        count(DISTINCT c.rep_id) AS num_reps,
        sum(c.p1_calls_mth1) AS p1_calls_mth1,
        sum(c.p2_calls_mth1) AS p2_calls_mth1,
        sum(c.p3_calls_mth1) AS p3_calls_mth1,
        sum(c.p4_calls_mth1) AS p4_calls_mth1,
        sum(c.p1_calls_mth2) AS p1_calls_mth2,
        sum(c.p2_calls_mth2) AS p2_calls_mth2,
        sum(c.p3_calls_mth2) AS p3_calls_mth2,
        sum(c.p4_calls_mth2) AS p4_calls_mth2,
        sum(c.p1_calls_mth3) AS p1_calls_mth3,
        sum(c.p2_calls_mth3) AS p2_calls_mth3,
        sum(c.p3_calls_mth3) AS p3_calls_mth3,
        sum(c.p4_calls_mth3) AS p4_calls_mth3,
        sum(c.p1_calls_mth4) AS p1_calls_mth4,
        sum(c.p2_calls_mth4) AS p2_calls_mth4,
        sum(c.p3_calls_mth4) AS p3_calls_mth4,
        sum(c.p4_calls_mth4) AS p4_calls_mth4,
        sum(c.p1_calls_mth5) AS p1_calls_mth5,
        sum(c.p2_calls_mth5) AS p2_calls_mth5,
        sum(c.p3_calls_mth5) AS p3_calls_mth5,
        sum(c.p4_calls_mth5) AS p4_calls_mth5,
        sum(c.p1_calls_mth6) AS p1_calls_mth6,
        sum(c.p2_calls_mth6) AS p2_calls_mth6,
        sum(c.p3_calls_mth6) AS p3_calls_mth6,
        sum(c.p4_calls_mth6) AS p4_calls_mth6
 FROM ( SELECT c.sales_force_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.sales_force_id,
        c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        d.product,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.sales_force_id,
          c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          d.product,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.sales_force_id,
          c.territory_num,
          c.rep_id) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) month_lookup
 WHERE (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)]))
 GROUP BY c.sales_force_id,
          to_char(month_lookup.m01, 'yyyymm'::varchar(6));

CREATE  VIEW outbound.zs_calls_by_product AS
 SELECT 'TEVA'::varchar(4) AS company,
        to_char(month_lookup.m01, 'yyyymm'::varchar(6)) AS month_ending,
        c.product,
        sum(c.p1_calls_mth1) AS p1_calls_mth1,
        sum(c.p2_calls_mth1) AS p2_calls_mth1,
        sum(c.p3_calls_mth1) AS p3_calls_mth1,
        sum(c.p4_calls_mth1) AS p4_calls_mth1,
        sum(c.p1_calls_mth2) AS p1_calls_mth2,
        sum(c.p2_calls_mth2) AS p2_calls_mth2,
        sum(c.p3_calls_mth2) AS p3_calls_mth2,
        sum(c.p4_calls_mth2) AS p4_calls_mth2,
        sum(c.p1_calls_mth3) AS p1_calls_mth3,
        sum(c.p2_calls_mth3) AS p2_calls_mth3,
        sum(c.p3_calls_mth3) AS p3_calls_mth3,
        sum(c.p4_calls_mth3) AS p4_calls_mth3,
        sum(c.p1_calls_mth4) AS p1_calls_mth4,
        sum(c.p2_calls_mth4) AS p2_calls_mth4,
        sum(c.p3_calls_mth4) AS p3_calls_mth4,
        sum(c.p4_calls_mth4) AS p4_calls_mth4,
        sum(c.p1_calls_mth5) AS p1_calls_mth5,
        sum(c.p2_calls_mth5) AS p2_calls_mth5,
        sum(c.p3_calls_mth5) AS p3_calls_mth5,
        sum(c.p4_calls_mth5) AS p4_calls_mth5,
        sum(c.p1_calls_mth6) AS p1_calls_mth6,
        sum(c.p2_calls_mth6) AS p2_calls_mth6,
        sum(c.p3_calls_mth6) AS p3_calls_mth6,
        sum(c.p4_calls_mth6) AS p4_calls_mth6
 FROM ( SELECT c.product,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        d.product,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          d.product,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.product) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) month_lookup
 GROUP BY to_char(month_lookup.m01, 'yyyymm'::varchar(6)),
          c.product;

CREATE  VIEW outbound.zs_call_plan_semester_ts_qvar AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TS'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TS'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'QVAR'::varchar(4)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'QVAR'::varchar(4)) AND (cp.sales_force_id = 'TS'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TS'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TS'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'QVAR'::varchar(4)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'QVAR'::varchar(4)) AND (cp.sales_force_id = 'TS'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_ts_airduo AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TS'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TS'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AIRDUO'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AIRDUO'::varchar(6)) AND (cp.sales_force_id = 'TS'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TS'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TS'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AIRDUO'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AIRDUO'::varchar(6)) AND (cp.sales_force_id = 'TS'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_tr_qvar AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TR'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'QVAR'::varchar(4)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'QVAR'::varchar(4)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TR'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'QVAR'::varchar(4)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'QVAR'::varchar(4)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_tr_qnasl AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TR'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'QNASL'::varchar(5)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'QNASL'::varchar(5)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TR'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'QNASL'::varchar(5)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'QNASL'::varchar(5)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_ts_proair AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TR'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'PROAIR'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'PROAIR'::varchar(6)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TR'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'PROAIR'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'PROAIR'::varchar(6)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_tr_airduo AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TR'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AIRDUO'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AIRDUO'::varchar(6)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TR'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TR'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AIRDUO'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AIRDUO'::varchar(6)) AND (cp.sales_force_id = 'TR'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_tp_amrix AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TP'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TP'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AMRIX'::varchar(5)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AMRIX'::varchar(5)) AND (cp.sales_force_id = 'TP'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TP'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TP'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AMRIX'::varchar(5)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AMRIX'::varchar(5)) AND (cp.sales_force_id = 'TP'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_tn_copaxone AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TN'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TN'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'COPAXONE'::varchar(8)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'COPAXONE'::varchar(8)) AND (cp.sales_force_id = 'TN'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TN'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TN'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'COPAXONE'::varchar(8)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'COPAXONE'::varchar(8)) AND (cp.sales_force_id = 'TN'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_call_plan_semester_tn_austedo AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TN'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TN'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AUSTEDO'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AUSTEDO'::varchar(7)) AND (cp.sales_force_id = 'TN'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TN'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TN'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'AUSTEDO'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'AUSTEDO'::varchar(7)) AND (cp.sales_force_id = 'TN'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zzz_zs_calls_oncology_trinsenox AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TO'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, d.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6
 FROM ((( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'TRISENOX'::varchar(8)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((d.VEEVA_ACCOUNT_ID = c.veeva_account_id) AND (d.territory_num = c.territory_num))));

CREATE  VIEW outbound.zzz_create_copay_voucher_redemption AS
 SELECT coalesce(c.physician_veeva_id, c.physician_ims_id) AS VEEVA_ACCOUNT_ID,
        c.physician_ims_id AS IMS_ID,
        c.redemption_type AS REDEMPTION_TYPE,
        to_char(c.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        to_char(c.date_written, 'YYYY-MM-DD'::varchar(10)) AS HCP_DATE_WRITTEN,
        CASE mod(c.days_supply, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.days_supply)::varchar ELSE rtrim((c.days_supply)::varchar, '0'::varchar(1)) END AS DAYS_SUPPLY,
        c.ndc_code AS NDC_CODE,
        c.basket_name AS BRAND_NAME,
        CASE mod(c.quantity, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.quantity)::int)::varchar ELSE rtrim((c.quantity)::varchar, '0'::varchar(1)) END AS QTY,
        CASE mod(c.refills, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.refills)::varchar ELSE rtrim((c.refills)::varchar, '0'::varchar(1)) END AS REFILLS,
        c.program_number AS PROGRAM_NUM,
        c.copay_card_number AS COPAY_VOUCHER_NUM,
        c.pharmacy_chain_number AS PHARMACY_CHAIN_NUM,
        c.pharmacy_chain AS PHARMACY_CHAIN,
        c.pharmacy_name AS PHARMACY_NAME,
        c.pharmacy_address AS PHARMACY_ADDRESS,
        c.pharmacy_address2 AS PHARMACY_ADDRESS2,
        c.pharmacy_city AS PHARMACY_CITY,
        c.pharmacy_state AS PHARMACY_STATE,
        c.pharmacy_zip AS PHARMACY_ZIP,
        CASE mod(c.pharmacy_npi_num, 1::float) WHEN NULLSEQUAL 0::float THEN c.pharmacy_npi_num ELSE rtrim(c.pharmacy_npi_num, '0'::varchar(1)) END AS PHARMACY_NPI_NUM,
        NULL AS CEPH_ID,
        NULL AS ME_NUM,
        c.principle_physician_dea AS PRINCIPLE_PHYS_DEA_NUM,
        CASE mod(c.physician_npi, 1::float) WHEN NULLSEQUAL 0::float THEN c.physician_npi ELSE rtrim(c.physician_npi, '0'::varchar(1)) END AS PRINCIPLE_PHYS_NPI_NUM,
        c.physician_name AS PHYSICIAN_NAME,
        c.physician_address1 AS PHYSICIAN_ADDRESS1,
        c.physician_address2 AS PHYSICIAN_ADDRESS2,
        c.physician_city AS PHYSICIAN_CITY,
        c.physician_state AS PHYSICIAN_STATE,
        c.physician_zip AS PHYSICIAN_ZIP,
        CASE mod(c.rebate_amount, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.rebate_amount)::int)::varchar ELSE rtrim((c.rebate_amount)::varchar, '0'::varchar(1)) END AS REBATE_AMOUNT,
        CASE mod(c.member_cash_expense, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.member_cash_expense)::int)::varchar ELSE rtrim((c.member_cash_expense)::varchar, '0'::varchar(1)) END AS MEMBER_CASH_EXPENSE,
        CASE mod(c.submitted_cost, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.submitted_cost)::int)::varchar ELSE rtrim((c.submitted_cost)::varchar, '0'::varchar(1)) END AS SUBMITTED_COST,
        CASE mod(c.pharmacy_fee, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.pharmacy_fee)::int)::varchar ELSE rtrim((c.pharmacy_fee)::varchar, '0'::varchar(1)) END AS PHARMACY_FEE,
        CASE mod(c.total_amount_due, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.total_amount_due)::int)::varchar ELSE rtrim((c.total_amount_due)::varchar, '0'::varchar(1)) END AS TOTAL_AMOUNT_DUE,
        CASE mod(c.calc_awp, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.calc_awp)::int)::varchar ELSE rtrim((c.calc_awp)::varchar, '0'::varchar(1)) END AS CALC_AWP,
        c.occ_payment_type AS OCC_PAYMENT_TYPE,
        CASE mod(c.new_refill, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.new_refill)::varchar ELSE rtrim((c.new_refill)::varchar, '0'::varchar(1)) END AS NEW_REFILL,
        NULL AS ADMIN_HCP_NAME,
        NULL AS ADMIN_HCP_NPI,
        NULL AS ADMIN_HCP_ADDRESS,
        NULL AS ADMIN_HCP_ADDRESS_2,
        NULL AS ADMIN_HCP_CITY,
        NULL AS ADMIN_HCP_STATE,
        NULL AS ADMIN_HCP_ZIP,
        NULL AS SOC_NAME,
        NULL AS SOC_ID,
        NULL AS SOC_NPI,
        NULL AS SOC_ADDRESS,
        NULL AS SOC_CITY,
        NULL AS SOC_STATE,
        NULL AS SOC_ZIP,
        NULL AS SOC_PHONE,
        NULL AS SOC_FAX,
        NULL AS PAYER_NAME,
        NULL AS CLAIM_TYPE,
        NULL AS CPT_CODE,
        c.other_coverage_code AS COVERAGE_CODE
 FROM datamart.copay c
 WHERE ((c.basket_name = ANY (ARRAY['PROAIR RESPICLICK'::varchar(17), 'QNASL'::varchar(5), 'QNASL CHILDREN'::varchar(14), 'ZECUITY'::varchar(7), 'AMRIX'::varchar(5), 'ADIPEX-P'::varchar(8), 'ADIPEX'::varchar(6), 'TEV-TROPIN'::varchar(10), 'AZILECT'::varchar(7), 'QUARTETTE'::varchar(9), 'CINQAIR'::varchar(7)])) AND (c.report_frequency = 'WEEK'::varchar(4)) AND (c.fill_date < trunc((statement_timestamp())::timestamp, 'DD'::varchar(2))) AND ((c.date_written < trunc((statement_timestamp())::timestamp, 'DD'::varchar(2))) OR (c.date_written IS NULL)) AND (months_between(trunc((statement_timestamp())::timestamp, 'MON'::varchar(3)), c.fill_date) <= 24::float)) UNION  SELECT coalesce(c.physician_veeva_id, c.physician_ims_id) AS VEEVA_ACCOUNT_ID,
        c.physician_ims_id AS IMS_ID,
        c.redemption_type AS REDEMPTION_TYPE,
        to_char(c.fill_date, 'YYYY-MM-DD'::varchar(10)) AS FILL_DATE,
        to_char(c.date_written, 'YYYY-MM-DD'::varchar(10)) AS HCP_DATE_WRITTEN,
        CASE mod(c.days_supply, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.days_supply)::varchar ELSE rtrim((c.days_supply)::varchar, '0'::varchar(1)) END AS DAYS_SUPPLY,
        c.ndc_code AS NDC_CODE,
        CASE WHEN (b.name = 'BDP NASAL MARKET TOTAL'::varchar(22)) THEN 'QNASL'::varchar(5) ELSE b.name END AS BRAND_NAME,
        CASE mod(c.quantity, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.quantity)::int)::varchar ELSE rtrim((c.quantity)::varchar, '0'::varchar(1)) END AS QTY,
        CASE mod(c.refills, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.refills)::varchar ELSE rtrim((c.refills)::varchar, '0'::varchar(1)) END AS REFILLS,
        c.program_number AS PROGRAM_NUM,
        c.copay_card_number AS COPAY_VOUCHER_NUM,
        c.pharmacy_chain_number AS PHARMACY_CHAIN_NUM,
        c.pharmacy_chain AS PHARMACY_CHAIN,
        c.pharmacy_name AS PHARMACY_NAME,
        c.pharmacy_address AS PHARMACY_ADDRESS,
        c.pharmacy_address2 AS PHARMACY_ADDRESS2,
        c.pharmacy_city AS PHARMACY_CITY,
        c.pharmacy_state AS PHARMACY_STATE,
        c.pharmacy_zip AS PHARMACY_ZIP,
        CASE mod(c.pharmacy_npi_num, 1::float) WHEN NULLSEQUAL 0::float THEN c.pharmacy_npi_num ELSE rtrim(c.pharmacy_npi_num, '0'::varchar(1)) END AS PHARMACY_NPI_NUM,
        NULL AS CEPH_ID,
        NULL AS ME_NUM,
        c.principle_physician_dea AS PRINCIPLE_PHYS_DEA_NUM,
        CASE mod(c.physician_npi, 1::float) WHEN NULLSEQUAL 0::float THEN c.physician_npi ELSE rtrim(c.physician_npi, '0'::varchar(1)) END AS PRINCIPLE_PHYS_NPI_NUM,
        c.physician_name AS PHYSICIAN_NAME,
        c.physician_address1 AS PHYSICIAN_ADDRESS1,
        c.physician_address2 AS PHYSICIAN_ADDRESS2,
        c.physician_city AS PHYSICIAN_CITY,
        c.physician_state AS PHYSICIAN_STATE,
        c.physician_zip AS PHYSICIAN_ZIP,
        CASE mod(c.rebate_amount, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.rebate_amount)::int)::varchar ELSE rtrim((c.rebate_amount)::varchar, '0'::varchar(1)) END AS REBATE_AMOUNT,
        CASE mod(c.member_cash_expense, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.member_cash_expense)::int)::varchar ELSE rtrim((c.member_cash_expense)::varchar, '0'::varchar(1)) END AS MEMBER_CASH_EXPENSE,
        CASE mod(c.submitted_cost, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.submitted_cost)::int)::varchar ELSE rtrim((c.submitted_cost)::varchar, '0'::varchar(1)) END AS SUBMITTED_COST,
        CASE mod(c.pharmacy_fee, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.pharmacy_fee)::int)::varchar ELSE rtrim((c.pharmacy_fee)::varchar, '0'::varchar(1)) END AS PHARMACY_FEE,
        CASE mod(c.total_amount_due, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.total_amount_due)::int)::varchar ELSE rtrim((c.total_amount_due)::varchar, '0'::varchar(1)) END AS TOTAL_AMOUNT_DUE,
        CASE mod(c.calc_awp, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN ((c.calc_awp)::int)::varchar ELSE rtrim((c.calc_awp)::varchar, '0'::varchar(1)) END AS CALC_AWP,
        c.occ_payment_type AS OCC_PAYMENT_TYPE,
        CASE mod(c.new_refill, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (c.new_refill)::varchar ELSE rtrim((c.new_refill)::varchar, '0'::varchar(1)) END AS NEW_REFILL,
        NULL AS ADMIN_HCP_NAME,
        NULL AS ADMIN_HCP_NPI,
        NULL AS ADMIN_HCP_ADDRESS,
        NULL AS ADMIN_HCP_ADDRESS_2,
        NULL AS ADMIN_HCP_CITY,
        NULL AS ADMIN_HCP_STATE,
        NULL AS ADMIN_HCP_ZIP,
        NULL AS SOC_NAME,
        NULL AS SOC_ID,
        NULL AS SOC_NPI,
        NULL AS SOC_ADDRESS,
        NULL AS SOC_CITY,
        NULL AS SOC_STATE,
        NULL AS SOC_ZIP,
        NULL AS SOC_PHONE,
        NULL AS SOC_FAX,
        NULL AS PAYER_NAME,
        NULL AS CLAIM_TYPE,
        NULL AS CPT_CODE,
        c.other_coverage_code
 FROM ((datamart.copay c LEFT  JOIN product.basket_item bi ON ((c.basket_id = bi.entity_id))) LEFT  JOIN product.basket b ON ((bi.basket_id = b.basket_id)))
 WHERE ((b.name = ANY (ARRAY['PROAIR RESPICLICK'::varchar(22), 'QNASL'::varchar(22), 'QNASL CHILDREN'::varchar(22), 'ZECUITY'::varchar(22), 'AMRIX'::varchar(22), 'ADIPEX-P'::varchar(22), 'TEV-TROPIN'::varchar(22), 'AZILECT'::varchar(22), 'QUARTETTE'::varchar(22), 'ADIPEX'::varchar(22), 'BDP NASAL MARKET TOTAL'::varchar(22), 'CINQAIR'::varchar(22), 'CINQAIR'::varchar(22)])) AND (c.report_frequency = 'WEEK'::varchar(4)) AND (c.fill_date < trunc((statement_timestamp())::timestamp, 'DD'::varchar(2))) AND ((c.date_written < trunc((statement_timestamp())::timestamp, 'DD'::varchar(2))) OR (c.date_written IS NULL)) AND (months_between(trunc((statement_timestamp())::timestamp, 'MON'::varchar(3)), c.fill_date) <= 24::float));

CREATE  VIEW outbound.zzz_samples_amrix AS
 SELECT dm.sales_force_id,
        dm.ptr_territory_num AS territory_num,
        dm.tvcmid,
        coalesce(sh.ims_id, xref.id_num) AS ims_id,
        sh.veeva_id,
        sh.ship_date,
        sh.teva_product_code AS product_code,
        sh.basket_name AS product,
        sh.ship_qty
 FROM ((( SELECT a.ims_id,
        a.veeva_id,
        a.ship_date,
        a.ship_qty,
        b.teva_product_code,
        b.name AS basket_name
 FROM (datamart.sample_shipment a JOIN product.basket b ON ((a.basket_id = b.basket_id)))
 WHERE ((b.teva_product_code ~~ 'A00%'::varchar(4)) AND (a.ship_date >= last_day(add_months((statement_timestamp())::timestamp, (-25)))) AND (a.ship_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))))) sh LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        tvcmid_xref.id_num,
        tvcmid_xref.id_type,
        tvcmid_xref.state,
        tvcmid_xref.file_id,
        tvcmid_xref.record_id
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'IMS_ID'::varchar(6))) xref ON ((sh.ims_id = xref.id_num))) LEFT  JOIN ( SELECT prescriber_combined_demographics.sales_force_id,
        prescriber_combined_demographics.ptr_territory_num,
        prescriber_combined_demographics.veeva_account_id,
        prescriber_combined_demographics.tvcmid
 FROM datamart.prescriber_combined_demographics
 WHERE ((prescriber_combined_demographics.sales_force_id = ANY (ARRAY['TP'::varchar(2), 'TC'::varchar(2)])) AND (prescriber_combined_demographics.veeva_account_id IS NOT NULL))) dm ON ((sh.veeva_id = dm.veeva_account_id)));

CREATE  VIEW outbound.zzz_access_monitor_calls_by_specialty_oncology AS
SELECT 'TEVA'::varchar(4) AS company, x.specialty_code, d.prim_specialty, count(DISTINCT c.tvcmid) AS number_of_physicians_6mth FROM (((SELECT sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE (sfa_demographics.ims_id IS NOT NULL) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.tvcmid FROM datamart.sfa_call c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01))) GROUP BY c.tvcmid) c ON ((d.tvcmid = c.tvcmid))) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) GROUP BY d.prim_specialty, x.specialty_code ORDER BY x.specialty_code;

CREATE  VIEW outbound.tn_physician_univ AS
 SELECT x.npi,
        x.dea_num,
        x.last_name,
        x.first_name,
        x.middle_name,
        x.address,
        x.city,
        x.state,
        x.zip
 FROM ( SELECT dc.npi,
        dc.dea_num,
        upper(dc.last_name) AS last_name,
        upper(dc.first_name) AS first_name,
        upper(dc.middle_name) AS middle_name,
        btrim(upper(((((coalesce(dc.ptr_address_1, ''::varchar) || ' '::varchar(1)) || coalesce(dc.ptr_address_2, ''::varchar)) || ' '::varchar(1)) || coalesce(dc.ptr_address_3, ''::varchar)))) AS address,
        upper(dc.ptr_city) AS city,
        dc.ptr_state AS state,
        dc.ptr_zip AS zip,
        row_number() OVER (PARTITION BY dc.sales_force_id, dc.npi ORDER BY dc.ptr_territory_num) AS rnk
 FROM datamart.prescriber_combined_demographics dc
 WHERE ((dc.ims_id IS NOT NULL) AND (dc.npi IS NOT NULL) AND (dc.sales_force_id = 'TN'::varchar(2)))) x
 WHERE (x.rnk = 1);

CREATE  VIEW outbound.zzz_rxnormalizationcontrol AS
 SELECT m.ims_client_number AS ClientNo,
        m.ims_report_number_cnt AS RxReportNo,
        sp_cnt.source_product_code AS ProductGroupNo,
        m.ims_report_number_qty AS CorrespondingUnitsReportNo,
        sp_cnt.source_product_name AS ProductGroupName,
        CASE WHEN (nf.divisor = (nf.divisor)::int) THEN ((nf.divisor)::int)::varchar ELSE rtrim((nf.divisor)::varchar, '0'::varchar(1)) END AS Divisor,
        CASE WHEN (nf.multiplier = (nf.multiplier)::int) THEN ((nf.multiplier)::int)::varchar ELSE rtrim((nf.multiplier)::varchar, '0'::varchar(1)) END AS Multiplier
 FROM ((product.normalization_factor nf JOIN product.source_product sp_cnt ON ((nf.entity_id = sp_cnt.entity_id))) JOIN reference.ims_report_cnt_qty_mapping m ON (((sp_cnt.source_client_num = m.ims_client_number) AND (sp_cnt.source_report_num = m.ims_report_number_cnt))))
 WHERE ((nf.source_id = 1) AND (m.report_frequency = 'SPLITWEEK'::varchar(9)) AND (m.ims_report_number_qty IS NOT NULL) AND (m.sent_from_iqvia_to_asi_flag = 'Y'::char(1)))
 ORDER BY m.ims_client_number,
          m.ims_report_number_cnt,
          sp_cnt.source_product_code;

CREATE  VIEW outbound.zzz_asi_rx_by_market_bdpnasal AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '16'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.mdm_alternate_identifier AS
 SELECT 'OPTMRX'::varchar(6) AS dsp_id,
        substr(replace((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100) AS dsp_hce_id,
        'NPI'::varchar(3) AS alternate_id_type,
        specialty_pharmacy_shipment.source_customer_id AS alternate_id_value,
        NULL AS state,
        NULL AS identifier_category,
        NULL AS status,
        NULL AS source_deactivation_reason_code
 FROM datamart.specialty_pharmacy_shipment
 WHERE ((specialty_pharmacy_shipment.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (specialty_pharmacy_shipment.customer_type = 'HCP'::varchar(3)))
 GROUP BY 'OPTMRX'::varchar(6),
          substr(replace((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100),
          'NPI'::varchar(3),
          specialty_pharmacy_shipment.source_customer_id,
          NULL UNION  SELECT A.dsp_id,
        substr(A.dsp_hce_id, 1, 100) AS dsp_hce_id,
        A.alternate_id_type,
        A.alternate_id_value,
        A.state,
        A.identifier_category,
        A.status,
        A.source_deactivation_reason_code
 FROM ( SELECT 'PT'::varchar(2) AS dsp_id,
        replace(((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name), ' '::varchar(1), ''::varchar) AS dsp_hce_id,
        'NPI'::varchar(3) AS alternate_id_type,
        prime_rx.prescriber_npi AS alternate_id_value,
        NULL AS state,
        NULL AS identifier_category,
        NULL AS status,
        NULL AS source_deactivation_reason_code
 FROM cleansed.prime_rx
 WHERE (prime_rx.prescriber_npi IS NOT NULL)
 GROUP BY 'PT'::varchar(2),
          replace(((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name), ' '::varchar(1), ''::varchar),
          'NPI'::varchar(3),
          prime_rx.prescriber_npi,
          NULL) A
 ORDER BY 1,
          2,
          3;

CREATE  VIEW outbound.mdm_address AS
 SELECT 'OPTMRX'::varchar(6) AS dsp_id,
        substr(replace((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100) AS dsp_hce_id,
        upper(substr(replace((((((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_address_line_1, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_city, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_state, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_zip, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100)) AS dsp_addr_id,
        NULL AS address_type,
        specialty_pharmacy_shipment.ship_to_address_line_1 AS address_line_1,
        specialty_pharmacy_shipment.ship_to_address_line_2 AS address_line_2,
        specialty_pharmacy_shipment.ship_to_city AS city,
        specialty_pharmacy_shipment.ship_to_state AS state,
        'USA'::varchar(3) AS country_code,
        specialty_pharmacy_shipment.ship_to_zip AS postal_code,
        NULL AS postal_extension_code,
        NULL AS address_status,
        NULL::date AS address_effective_date,
        NULL AS single_address_indicator
 FROM datamart.specialty_pharmacy_shipment
 WHERE ((specialty_pharmacy_shipment.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (specialty_pharmacy_shipment.customer_type = 'HCP'::varchar(3)))
 GROUP BY 'OPTMRX'::varchar(6),
          substr(replace((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100),
          upper(substr(replace((((((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_address_line_1, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_city, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_state, ''::varchar)) || coalesce(specialty_pharmacy_shipment.ship_to_zip, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100)),
          NULL,
          specialty_pharmacy_shipment.ship_to_address_line_1,
          specialty_pharmacy_shipment.ship_to_address_line_2,
          specialty_pharmacy_shipment.ship_to_city,
          specialty_pharmacy_shipment.ship_to_state,
          'USA'::varchar(3),
          specialty_pharmacy_shipment.ship_to_zip,
          NULL::date UNION  SELECT A.dsp_id,
        substr(A.dsp_hce_id, 1, 100) AS dsp_hce_id,
        substr(A.dsp_addr_id, 1, 100) AS dsp_addr_id,
        A.address_type,
        A.address_line_1,
        A.address_line_2,
        A.city,
        A.state,
        A.country_code,
        A.postal_code,
        A.postal_extension_code,
        A.address_status,
        A.address_effective_date,
        A.single_address_indicator
 FROM ( SELECT 'PT'::varchar(2) AS dsp_id,
        replace(((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name), ' '::varchar(1), ''::varchar) AS dsp_hce_id,
        replace((((((((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name) || coalesce(prime_rx.md_addr1, ''::varchar)) || coalesce(prime_rx.md_addr2, ''::varchar)) || coalesce(prime_rx.md_city, ''::varchar)) || coalesce(prime_rx.md_state, ''::varchar)) || coalesce(prime_rx.md_zip, ''::varchar)), ' '::varchar(1), ''::varchar) AS dsp_addr_id,
        NULL AS address_type,
        prime_rx.md_addr1 AS address_line_1,
        prime_rx.md_addr2 AS address_line_2,
        prime_rx.md_city AS city,
        prime_rx.md_state AS state,
        'USA'::varchar(3) AS country_code,
        prime_rx.md_zip AS postal_code,
        NULL AS postal_extension_code,
        NULL AS address_status,
        NULL::date AS address_effective_date,
        NULL AS single_address_indicator
 FROM cleansed.prime_rx
 GROUP BY 'PT'::varchar(2),
          replace(((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name), ' '::varchar(1), ''::varchar),
          replace((((((((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name) || coalesce(prime_rx.md_addr1, ''::varchar)) || coalesce(prime_rx.md_addr2, ''::varchar)) || coalesce(prime_rx.md_city, ''::varchar)) || coalesce(prime_rx.md_state, ''::varchar)) || coalesce(prime_rx.md_zip, ''::varchar)), ' '::varchar(1), ''::varchar),
          NULL,
          prime_rx.md_addr1,
          prime_rx.md_addr2,
          prime_rx.md_city,
          prime_rx.md_state,
          'USA'::varchar(3),
          prime_rx.md_zip,
          NULL::date) A
 ORDER BY 1,
          2,
          3;

CREATE  VIEW outbound.sharepoint_roster_tn_tp AS
 SELECT sr.title,
        sr.territory
 FROM ( SELECT lower(r.username) AS title,
        r.territory_number AS territory
 FROM datamart.roster r
 WHERE ((r.username IS NOT NULL) AND (r.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)]))) UNION  SELECT lower(r.username) AS title,
        (r.employee_id || '_'::varchar(1)) AS territory
 FROM datamart.roster r
 WHERE ((r.username IS NOT NULL) AND (r.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])))) sr
 GROUP BY sr.title,
          sr.territory
 ORDER BY sr.title;

CREATE  VIEW outbound.zs_ajovy_activity_call_detail AS
 SELECT c.sales_force_id,
        c.call_id,
        c.veeva_account_id,
        c.ims_id,
        c.customer_type,
        c.call_type,
        c.rep_id,
        c.territory_number,
        c.zip_on_call,
        c.call_date,
        c.submit_date,
        c.attendees,
        c.attendee_type,
        c.tvcmid,
        cd.product,
        cd.basket_id,
        cd.basket_name,
        cd.detail_position
 FROM (datamart.sfa_call c JOIN datamart.sfa_call_detail cd ON ((c.call_id = cd.call_id)))
 WHERE (cd.basket_name ~~ 'AJOVY%'::varchar(6))
 ORDER BY c.call_date;

CREATE  VIEW outbound.zs_xpd_demographics AS
SELECT xpd_demographics.ims_client_number, xpd_demographics.ims_report_number, xpd_demographics.ims_id, xpd_demographics.tvcmid, xpd_demographics.last_name, xpd_demographics.first_name, xpd_demographics.middle_name, xpd_demographics.address_1, xpd_demographics.address_2, xpd_demographics.city, xpd_demographics.state, xpd_demographics.zip, xpd_demographics.specialty, xpd_demographics.specialty_description, xpd_demographics.trx_decile_retail, xpd_demographics.nrx_decile_retail, xpd_demographics.nbrx_decile_retail, xpd_demographics.trx_decile_mail, xpd_demographics.nrx_decile_mail, xpd_demographics.nbrx_decile_mail, xpd_demographics.market_prescriber_reliability_retail, xpd_demographics.market_prescriber_reliability_mail FROM datamart.xpd_demographics;

CREATE  VIEW outbound.zs_xpd_core_metrics AS
SELECT xpd_core_metrics.ims_client_number, xpd_core_metrics.ims_report_number, xpd_core_metrics.channel_indicator, xpd_core_metrics.ims_id, xpd_core_metrics.tvcmid, xpd_core_metrics.specialty, xpd_core_metrics.ims_product_group, xpd_core_metrics.basket_id, xpd_core_metrics.basket_name, xpd_core_metrics.rollup_month, xpd_core_metrics.xpo_nrx, xpd_core_metrics.xpo_trx, xpd_core_metrics.unknown_nrx, xpd_core_metrics.unknown_trx, xpd_core_metrics.new_therapy_starts, xpd_core_metrics.continued_new, xpd_core_metrics.switch_to, xpd_core_metrics.add_on, xpd_core_metrics.restart_same_new, xpd_core_metrics.restart_different, xpd_core_metrics.continued_refill, xpd_core_metrics.restart_same_refill, xpd_core_metrics.switch_from, xpd_core_metrics.restart_different_from, xpd_core_metrics.add_to, xpd_core_metrics.market_new_to_brand_rx, xpd_core_metrics.dynamic_capture_rx FROM datamart.xpd_core_metrics;

CREATE  VIEW outbound.vendormate_roster AS
 SELECT roster.sales_force_id,
        roster.employee_id,
        roster.username,
        roster.territory_number,
        roster.territory_name,
        roster.first_name,
        roster.middle_name,
        roster.last_name,
        roster.hr_status,
        roster.email,
        roster.business_address_line1,
        roster.business_address_line2,
        roster.business_address_line3,
        roster.business_city,
        roster.business_state,
        roster.business_zip,
        roster.shipping_address_line1,
        roster.shipping_address_line2,
        roster.shipping_address_line3,
        roster.shipping_city,
        roster.shipping_state,
        roster.shipping_zip,
        roster.mobile_phone,
        roster.business_phone,
        roster.home_phone,
        roster.voice_mail_extension,
        roster.hire_date,
        roster.birth_month_day
 FROM datamart.roster
 WHERE ((roster.sales_force_id = ANY (ARRAY['MA'::varchar(2), 'TE'::varchar(2), 'TM'::varchar(2), 'TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)])) AND (roster.last_name <> 'Vacant'::varchar(6)))
 ORDER BY roster.sales_force_id,
          roster.hire_date DESC;

CREATE  VIEW outbound.valuecentricrxdataextract AS
 SELECT '4416451422'::varchar(10) AS CUSTOMERID,
        a.basket_name AS BRAND_NAME,
        CASE WHEN (a.basket_name = 'COPAXONE 20MG'::varchar(13)) THEN '68546031730'::varchar(11) WHEN (a.basket_name = 'COPAXONE 40MG'::varchar(13)) THEN '68546032512'::varchar(11) WHEN (a.basket_name = 'PROAIR HFA'::varchar(10)) THEN '59310057920'::varchar(11) WHEN (a.basket_name = 'PROAIR HFA COUNTER'::varchar(18)) THEN '59310057922'::varchar(11) WHEN (a.basket_name = 'PROAIR RESPICLICK'::varchar(17)) THEN '59310058020'::varchar(11) WHEN (a.basket_name = 'QNASL 40'::varchar(8)) THEN '59310020606'::varchar(11) WHEN (a.basket_name = 'QNASL 80'::varchar(8)) THEN '59310021012'::varchar(11) WHEN (a.basket_name = 'QVAR 40MCG'::varchar(10)) THEN '59310020212'::varchar(11) WHEN (a.basket_name = 'QVAR 80MCG'::varchar(10)) THEN '59310020412'::varchar(11) ELSE NULL END AS NDCUPC,
        a.ptr_zip AS ZIP,
        to_char(a.rollup_month, 'MM/DD/YYYY'::varchar(10)) AS PERIOD_END_DATE,
        sum(a.trx_count) AS TRX_CNT,
        sum(a.trx_quantity) AS TRX_QTY
 FROM ( SELECT rx.ims_id,
        rx.rollup_month,
        rx.basket_name,
        rx.trx_count,
        rx.trx_quantity,
        pcd.ptr_zip
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT prescriber_combined_demographics.ims_id,
        min(prescriber_combined_demographics.ptr_zip) AS ptr_zip
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TN'::varchar(2))
 GROUP BY prescriber_combined_demographics.ims_id) pcd ON ((pcd.ims_id = rx.ims_id))) JOIN outbound.month_rollup_and_bucket mth ON ((rx.rollup_month = mth.month_ending)))
 WHERE ((rx.sales_category = '01'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)) AND (rx.basket_type = 'product'::varchar(7)) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 12) AND (rx.basket_name = ANY (ARRAY['COPAXONE 20MG'::varchar(13), 'COPAXONE 40MG'::varchar(13)]))) UNION ALL  SELECT rx.ims_id,
        rx.rollup_month,
        rx.basket_name,
        rx.trx_count,
        0 AS trx_quantity,
        pcd.ptr_zip
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT prescriber_combined_demographics.ims_id,
        min(prescriber_combined_demographics.ptr_zip) AS ptr_zip
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TR'::varchar(2))
 GROUP BY prescriber_combined_demographics.ims_id) pcd ON ((pcd.ims_id = rx.ims_id))) JOIN outbound.month_rollup_and_bucket mth ON ((rx.rollup_month = mth.month_ending)))
 WHERE ((rx.sales_category = '01'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)) AND (rx.basket_type = 'product'::varchar(7)) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 12) AND (rx.basket_name = ANY (ARRAY['PROAIR HFA'::varchar(18), 'PROAIR HFA COUNTER'::varchar(18), 'PROAIR RESPICLICK'::varchar(18), 'QNASL 40'::varchar(18), 'QNASL 80'::varchar(18), 'QVAR 40MCG'::varchar(18), 'QVAR 80MCG'::varchar(18)])))) a
 GROUP BY a.basket_name,
          a.ptr_zip,
          a.rollup_month
 ORDER BY a.basket_name,
          a.ptr_zip,
          a.rollup_month;

CREATE  VIEW outbound.bullseye_prescriber_rx AS
 SELECT rx.tvcmid,
        rx.ims_id,
        CASE WHEN (rx.basket_name ~~ 'ARMONAIR RESPICLICK%'::varchar(20)) THEN 'ARMONAIR RESPICLICK'::varchar(19) WHEN (rx.basket_name ~~ 'ASMANEX%'::varchar(8)) THEN 'ASMANEX'::varchar(7) WHEN (rx.basket_name ~~ 'FLOVENT DISK%'::varchar(13)) THEN 'FLOVENT DISK'::varchar(12) WHEN (rx.basket_name ~~ 'FLOVENT MDI%'::varchar(12)) THEN 'FLOVENT MDI'::varchar(11) ELSE rx.basket_name END AS product,
        rx.rollup_month AS month_ending,
        rx.payment_method,
        sum(rx.nrx_count) AS nrx_cnt,
        sum(rx.trx_count) AS trx_cnt
 FROM datamart.prescriber_rx rx
 WHERE ((rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (rx.report_frequency = 'MONTH'::varchar(5)) AND (rx.ims_id >= '0000002'::varchar(7)) AND (rx.ims_id <= '8999999'::varchar(7)) AND ((rx.basket_name = rx.market_name) OR (rx.rollup_flag IS NULL)) AND (rx.rollup_month = rx.data_date))
 GROUP BY rx.tvcmid,
          rx.ims_id,
          CASE WHEN (rx.basket_name ~~ 'ARMONAIR RESPICLICK%'::varchar(20)) THEN 'ARMONAIR RESPICLICK'::varchar(19) WHEN (rx.basket_name ~~ 'ASMANEX%'::varchar(8)) THEN 'ASMANEX'::varchar(7) WHEN (rx.basket_name ~~ 'FLOVENT DISK%'::varchar(13)) THEN 'FLOVENT DISK'::varchar(12) WHEN (rx.basket_name ~~ 'FLOVENT MDI%'::varchar(12)) THEN 'FLOVENT MDI'::varchar(11) ELSE rx.basket_name END,
          rx.rollup_month,
          rx.payment_method
 ORDER BY rx.tvcmid,
          rx.ims_id,
          CASE WHEN (rx.basket_name ~~ 'ARMONAIR RESPICLICK%'::varchar(20)) THEN 'ARMONAIR RESPICLICK'::varchar(19) WHEN (rx.basket_name ~~ 'ASMANEX%'::varchar(8)) THEN 'ASMANEX'::varchar(7) WHEN (rx.basket_name ~~ 'FLOVENT DISK%'::varchar(13)) THEN 'FLOVENT DISK'::varchar(12) WHEN (rx.basket_name ~~ 'FLOVENT MDI%'::varchar(12)) THEN 'FLOVENT MDI'::varchar(11) ELSE rx.basket_name END,
          rx.rollup_month,
          rx.payment_method;

CREATE  VIEW outbound.zs_austedo_activity_sample_shipment AS
 SELECT sample_shipment.veeva_id,
        sample_shipment.tvcmid,
        sample_shipment.ims_id,
        sample_shipment.first_name,
        sample_shipment.middle_name,
        sample_shipment.last_name,
        sample_shipment.designation,
        sample_shipment.state_license_number,
        sample_shipment.address_line_1,
        sample_shipment.address_line_2,
        sample_shipment.address_line_3,
        sample_shipment.city,
        sample_shipment.state,
        sample_shipment.zip,
        sample_shipment.dea_license_number,
        sample_shipment.order_id,
        sample_shipment.ndc,
        sample_shipment.basket_id,
        sample_shipment.basket_name,
        sample_shipment.order_job_code,
        sample_shipment.order_job_description,
        sample_shipment.ship_qty,
        sample_shipment.ship_date
 FROM datamart.sample_shipment
 WHERE ((sample_shipment.basket_name ~~ 'AUSTEDO%'::varchar(8)) AND (sample_shipment.ship_date >= '2018-01-01'::date) AND (sample_shipment.ship_date < trunc(now(), 'MONTH'::varchar(5))))
 ORDER BY sample_shipment.ship_date;

CREATE  VIEW outbound.zs_austedo_activity_ahm_participant AS
 SELECT p.sourcesystemid,
        p.batchid,
        p.batchdate,
        p.transactionstatuscode,
        p.interactionid,
        p.interactioncode,
        p.participantid,
        (p.clientcustomerid)::!int AS clientcustomerid,
        p.participanttype,
        p.firstname,
        p.middlename,
        p.lastname,
        p.suffix,
        p.professionaldesignation,
        p.primaryspecialty,
        p.organizationname,
        p.npinumber,
        p.addressid,
        p.clientaddressid,
        p.addressline1,
        p.addressline2,
        p.addressline3,
        p.addresscity,
        p.addressstateprovince,
        p.addresspostalcode,
        p.addresspostalcodeextension,
        p.addresscountry,
        p.region,
        p.primarystatelicensestate,
        p.primarystatelicensenumber,
        p.attended,
        p.mealconsumed,
        p.contractid,
        p.clientcontractid,
        p.contractname,
        p.contractcategory,
        p.contractsubcategory,
        p.contractclassification,
        p.contracttier,
        p.contracteffectivedate,
        p.contractexpirationdate,
        p.contracttotalvalue
 FROM (datamart.ahm_interactions i JOIN datamart.ahm_participant p ON ((i.interactionid = p.interactionid)))
 WHERE ((i.interactionstartdate >= '2018-01-01'::date) AND (('AUSTEDO'::varchar(7) = i.product1name) OR ('AUSTEDO'::varchar(7) = i.product2name) OR ('AUSTEDO'::varchar(7) = i.product3name)) AND ((p.clientcustomerid)::!int IS NOT NULL));

CREATE  VIEW outbound.zs_austedo_activity_ahm_interactions AS
 SELECT i.sourcesystemid,
        i.batchid,
        i.batchdate,
        i.transactionstatuscode,
        i.interactionid,
        i.interactioncode,
        i.interactionname,
        i.interactioncategory,
        i.interactiontype,
        i.locationtype,
        i.interactionstatus,
        i.interactionstartdate,
        i.interactionenddate,
        i.interactionstarttime,
        i.interactionendtime,
        i.interactiontimezone,
        i.interactionstartdatetime,
        i.interactionenddatetime,
        i.requestingregion,
        i.parentinteractionid,
        i.parentinteractioncode,
        i.employeeid,
        i.clientemployeeid,
        i.employeefirstname,
        i.employeelastname,
        i.employeeorganizationunitid,
        i.employeeorganizationunitcode,
        i.employeeorganizationunitname,
        i.venueid,
        i.clientvenueid,
        i.venuename,
        i.venueaddressline1,
        i.venueaddressline2,
        i.venueaddressline3,
        i.venuecity,
        i.venuestateprovince,
        i.venuepostalcode,
        i.venuecountry,
        i.venueregion,
        i.totalestimatedparticipantcount,
        i.financialcloseddate,
        i.product1name,
        i.product1id,
        i.product1clientid,
        i.topic1name,
        i.topic1id,
        i.topic1clientid,
        i.product2name,
        i.product2id,
        i.product2clientid,
        i.topic2name,
        i.topic2id,
        i.topic2clientid,
        i.product3name,
        i.product3id,
        i.product3clientid,
        i.topic3name,
        i.topic3id,
        i.topic3clientid,
        i.product4name,
        i.product4id,
        i.product4clientid,
        i.topic4name,
        i.topic4id,
        i.topic4clientid,
        i.product5name,
        i.product5id,
        i.product5clientid,
        i.topic5name,
        i.topic5id,
        i.topic5clientid
 FROM datamart.ahm_interactions i
 WHERE ((i.interactionstartdate >= '2018-01-01'::date) AND (('AUSTEDO'::varchar(7) = i.product1name) OR ('AUSTEDO'::varchar(7) = i.product2name) OR ('AUSTEDO'::varchar(7) = i.product3name)));

CREATE  VIEW outbound.zs_austedo_activity_copay AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.nabp,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.occ_payment_type,
        copay.auth_refills,
        copay.claim_type,
        copay.administration_flag,
        copay.payer_name,
        copay.trans_type,
        copay.previous_payer_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.source_name
 FROM datamart.copay
 WHERE ((copay.basket_name ~~ 'AUSTEDO%'::varchar(8)) AND (copay.fill_date >= '2018-01-01'::date) AND (copay.fill_date < trunc(now(), 'MONTH'::varchar(5))))
 ORDER BY copay.fill_date;

CREATE  VIEW outbound.millennium_roster AS
 SELECT r1.territory_number AS TERRITORY_NUM,
        r1.last_name AS LAST_NAME,
        r1.first_name AS FIRST_NAME,
        r1.shipping_address_line1 AS SHIP_ADDRESS_LINE1,
        r1.shipping_address_line2 AS SHIP_ADDRESS_LINE2,
        r1.shipping_city AS SHIP_CITY,
        r1.shipping_state AS SHIP_STATE,
        r1.shipping_zip AS SHIP_ZIP,
        coalesce(r1.business_phone, r1.mobile_phone, r1.home_phone) AS PHONE,
        r1.email AS EMAIL,
        CASE WHEN (r1.rep_type = 'REP'::varchar(3)) THEN r2.parent_territory_number WHEN (r1.rep_type = 'MGR'::varchar(3)) THEN r1.parent_territory_number WHEN (r1.rep_type = 'DIR'::varchar(3)) THEN r1.territory_number ELSE NULL END AS DISTRICT,
        CASE WHEN (r1.rep_type = 'REP'::varchar(3)) THEN r1.parent_territory_number WHEN (r1.rep_type = 'MGR'::varchar(3)) THEN r1.territory_number ELSE NULL END AS REGION
 FROM (datamart.roster r1 JOIN datamart.roster r2 ON ((r1.parent_territory_number = r2.territory_number)))
 WHERE ((r1.sales_force_id = ANY (ARRAY['TO'::varchar(2), 'TP'::varchar(2), 'TN'::varchar(2)])) AND (r1.last_name <> 'Vacant'::varchar(6)) AND (r1.rep_type = ANY (ARRAY['REP'::varchar(3), 'MGR'::varchar(3), 'DIR'::varchar(3)])))
 ORDER BY r1.last_name;

CREATE  VIEW outbound.activity_line_item_centris_speaker_event AS
 SELECT concat(((concat((e.interactionname || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)) || ea.attended), (e.interactionstartdate)::varchar) AS activity,
        to_char(e.interactionstartdate, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat((((e.interactionname || ':'::varchar(1)) || coalesce(e.topic1name, ''::varchar)) || ','::varchar(1)), (e.interactionstartdate)::varchar) AS trackback_id,
        NULL AS previous_line_item,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN cmid.id_num ELSE (b.basket_id)::varchar END AS level_master_id,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN 'Speaker'::varchar(7) ELSE 'Topics'::varchar(6) END AS type,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN 'Speaker'::varchar(7) ELSE 'Topics'::varchar(6) END AS native_type,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN ea.participant_name ELSE e.topic1name END AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((( SELECT dm.feed_id,
        dm.feed_version,
        ints.interactioncode,
        ints.interactionname,
        ints.interactionstartdate,
        ints.product1id,
        ints.product1name,
        ints.topic1name,
        max(ints.file_id) AS file_id
 FROM (datamart.ahm_interactions ints JOIN metadata.data_file_metadata dm ON ((dm.file_id = ints.file_id)))
 WHERE (ints.interactionstartdate >= add_months((now())::date, (-6)))
 GROUP BY dm.feed_id,
          dm.feed_version,
          ints.interactioncode,
          ints.interactionname,
          ints.interactionstartdate,
          ints.product1id,
          ints.product1name,
          ints.topic1name) e LEFT  JOIN ( SELECT ahm_participant.sourcesystemid,
        ahm_participant.interactioncode,
        ahm_participant.attended,
        ahm_participant.clientcustomerid,
        ahm_participant.participanttype,
        ((ahm_participant.firstname || ' '::varchar(1)) || ahm_participant.lastname) AS participant_name,
        ahm_participant.file_id
 FROM datamart.ahm_participant
 GROUP BY ahm_participant.sourcesystemid,
          ahm_participant.interactioncode,
          ahm_participant.attended,
          ahm_participant.clientcustomerid,
          ahm_participant.participanttype,
          ((ahm_participant.firstname || ' '::varchar(1)) || ahm_participant.lastname),
          ahm_participant.file_id) ea ON ((ea.interactioncode = e.interactioncode))) JOIN datamart.tvcmid_xref cmid ON (((ea.clientcustomerid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6)) AND (regexp_count(ea.clientcustomerid, '^[0-9.-]+$'::varchar(10), 1, ''::varchar) = 1)))) LEFT  JOIN product.source_product sp ON (((upper(e.product1id) = upper(sp.source_product_code)) AND (e.feed_id = sp.feed_id) AND (e.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE (ea.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_PARTICIPANT'::varchar(19)))), 0)) EXCEPT  SELECT concat(((concat((e.interactionname || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)) || ea.attended), (e.interactionstartdate)::varchar) AS activity,
        to_char(e.interactionstartdate, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat((((e.interactionname || ':'::varchar(1)) || coalesce(e.topic1name, ''::varchar)) || ','::varchar(1)), (e.interactionstartdate)::varchar) AS trackback_id,
        NULL AS previous_line_item,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN cmid.id_num ELSE (b.basket_id)::varchar END AS level_master_id,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN 'Speaker'::varchar(7) ELSE 'Topics'::varchar(6) END AS type,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN 'Speaker'::varchar(7) ELSE 'Topics'::varchar(6) END AS native_type,
        CASE WHEN (ea.participanttype = 'Speaker'::varchar(7)) THEN ea.participant_name ELSE e.topic1name END AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((( SELECT dm.feed_id,
        dm.feed_version,
        ints.interactioncode,
        ints.interactionname,
        ints.interactionstartdate,
        ints.product1id,
        ints.product1name,
        ints.topic1name,
        max(ints.file_id) AS file_id
 FROM (datamart.ahm_interactions ints JOIN metadata.data_file_metadata dm ON ((dm.file_id = ints.file_id)))
 WHERE (ints.interactionstartdate >= add_months((now())::date, (-6)))
 GROUP BY dm.feed_id,
          dm.feed_version,
          ints.interactioncode,
          ints.interactionname,
          ints.interactionstartdate,
          ints.product1id,
          ints.product1name,
          ints.topic1name) e LEFT  JOIN ( SELECT ahm_participant.sourcesystemid,
        ahm_participant.interactioncode,
        ahm_participant.attended,
        ahm_participant.clientcustomerid,
        ahm_participant.participanttype,
        ((ahm_participant.firstname || ' '::varchar(1)) || ahm_participant.lastname) AS participant_name,
        ahm_participant.file_id
 FROM datamart.ahm_participant
 GROUP BY ahm_participant.sourcesystemid,
          ahm_participant.interactioncode,
          ahm_participant.attended,
          ahm_participant.clientcustomerid,
          ahm_participant.participanttype,
          ((ahm_participant.firstname || ' '::varchar(1)) || ahm_participant.lastname),
          ahm_participant.file_id) ea ON ((ea.interactioncode = e.interactioncode))) JOIN datamart.tvcmid_xref cmid ON (((ea.clientcustomerid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6)) AND (regexp_count(ea.clientcustomerid, '^[0-9.-]+$'::varchar(10), 1, ''::varchar) = 1)))) LEFT  JOIN product.source_product sp ON (((upper(e.product1id) = upper(sp.source_product_code)) AND (e.feed_id = sp.feed_id) AND (e.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE (ea.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_PARTICIPANT'::varchar(19)))), 0));

CREATE  VIEW outbound.zs_xpd_core_metrics_antimigraine_monthly AS
 SELECT xpd_core_metrics_antimigraine.ims_client_number,
        xpd_core_metrics_antimigraine.ims_report_number,
        xpd_core_metrics_antimigraine.channel_indicator,
        xpd_core_metrics_antimigraine.ims_id,
        xpd_core_metrics_antimigraine.tvcmid,
        xpd_core_metrics_antimigraine.specialty,
        xpd_core_metrics_antimigraine.ims_product_group,
        xpd_core_metrics_antimigraine.basket_id,
        xpd_core_metrics_antimigraine.basket_name,
        xpd_core_metrics_antimigraine.rollup_period,
        xpd_core_metrics_antimigraine.xpo_nrx,
        xpd_core_metrics_antimigraine.xpo_trx,
        xpd_core_metrics_antimigraine.unknown_nrx,
        xpd_core_metrics_antimigraine.unknown_trx,
        xpd_core_metrics_antimigraine.new_therapy_starts,
        xpd_core_metrics_antimigraine.continued_new,
        xpd_core_metrics_antimigraine.switch_to,
        xpd_core_metrics_antimigraine.add_on,
        xpd_core_metrics_antimigraine.restart_same_new,
        xpd_core_metrics_antimigraine.restart_different,
        xpd_core_metrics_antimigraine.continued_refill,
        xpd_core_metrics_antimigraine.restart_same_refill,
        xpd_core_metrics_antimigraine.switch_from,
        xpd_core_metrics_antimigraine.restart_different_from,
        xpd_core_metrics_antimigraine.add_to,
        xpd_core_metrics_antimigraine.market_new_to_brand_rx,
        xpd_core_metrics_antimigraine.dynamic_capture_rx,
        xpd_core_metrics_antimigraine.report_frequency
 FROM datamart.xpd_core_metrics_antimigraine
 WHERE (xpd_core_metrics_antimigraine.report_frequency = 'MONTH'::varchar(5));

CREATE  VIEW outbound.zs_qvar_week52_rx AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.rollup_week,
        prescriber_rx.sales_category,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        sum(prescriber_rx.nrx_count) AS nrx_count,
        sum(prescriber_rx.trx_count) AS trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (prescriber_rx.cnt_file_id = ANY (ARRAY[152703, 152704, 152705])))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.rollup_week,
          prescriber_rx.sales_category,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method;

CREATE  VIEW outbound.zs_to_ims_zip_xref AS
 SELECT CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END AS ims_id,
        prescriber_combined_demographics.ptr_zip AS zip
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TO'::varchar(2))
 GROUP BY CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END,
          prescriber_combined_demographics.ptr_zip
 ORDER BY CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END,
          prescriber_combined_demographics.ptr_zip;

CREATE  VIEW outbound.zs_to_zip_terr_xref AS
 SELECT aa.territory_number AS territory,
        aa.zip_code AS zip
 FROM datamart.alternate_alignments aa
 WHERE ((aa.sales_force_id = 'TO'::varchar(2)) AND (aa.file_id IN ( SELECT max(daa.file_id) AS max
 FROM datamart.alternate_alignments daa
 WHERE (daa.sales_force_id = 'TO'::varchar(2)))))
 ORDER BY aa.territory_number,
          aa.zip_code;

CREATE  VIEW outbound.iqvia_antimigraine_acute_weekly AS
 SELECT prescriber_rx.tvcmid,
        prescriber_rx.ims_id,
        product_basket.parent_basket_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.report_frequency,
        prescriber_rx.ims_product_group,
        prescriber_rx.date,
        prescriber_rx.sales_category,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payer_name,
        prescriber_rx.plan_name,
        prescriber_rx.pbm_name,
        prescriber_rx.model,
        prescriber_rx.payment_method,
        prescriber_rx.ims_specialty,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.ims_report_number_cnt,
        prescriber_rx.cnt_file_id,
        prescriber_rx.cnt_record_id,
        prescriber_rx.ims_report_number_qty,
        prescriber_rx.qty_file_id,
        prescriber_rx.qty_record_id,
        prescriber_rx.rollup_flag,
        prescriber_rx.indication,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.data_date
 FROM (datamart.product_basket product_basket JOIN datamart.prescriber_rx prescriber_rx ON ((product_basket.child_basket_name = prescriber_rx.basket_name)))
 WHERE ((product_basket.parent_basket_name = 'ANTI-CGRP'::varchar(9)) AND (prescriber_rx.basket_type = 'product'::varchar(7)) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.qty_file_id IN ( SELECT max(prescriber_rx.qty_file_id) AS max
 FROM datamart.prescriber_rx
 WHERE (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))) AND (prescriber_rx.cnt_file_id IN ( SELECT max(prescriber_rx.cnt_file_id) AS max
 FROM datamart.prescriber_rx
 WHERE (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))))
 GROUP BY prescriber_rx.tvcmid,
          prescriber_rx.ims_id,
          product_basket.parent_basket_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.report_frequency,
          prescriber_rx.ims_product_group,
          prescriber_rx.date,
          prescriber_rx.sales_category,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payer_name,
          prescriber_rx.plan_name,
          prescriber_rx.pbm_name,
          prescriber_rx.model,
          prescriber_rx.payment_method,
          prescriber_rx.ims_specialty,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.ims_report_number_cnt,
          prescriber_rx.cnt_file_id,
          prescriber_rx.cnt_record_id,
          prescriber_rx.ims_report_number_qty,
          prescriber_rx.qty_file_id,
          prescriber_rx.qty_record_id,
          prescriber_rx.rollup_flag,
          prescriber_rx.indication,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.data_date;

CREATE  VIEW outbound.CobbsCreek_austedo_copay_Weekly AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.pharmacy_chain_number,
        copay.nabp,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.create_date,
        copay.occ_payment_type,
        copay.counted_copay,
        copay.auth_refills,
        copay.admin_hcp_npi,
        copay.admin_hcp_name,
        copay.admin_hcp_address,
        copay.admin_hcp_address2,
        copay.admin_hcp_city,
        copay.admin_hcp_state,
        copay.admin_hcp_zip,
        copay.claim_type,
        copay.administration_flag,
        copay.soc_name,
        copay.soc_phone,
        copay.soc_fax,
        copay.soc_address,
        copay.soc_city,
        copay.soc_state,
        copay.soc_zip,
        copay.soc_id,
        copay.soc_npi,
        copay.payer_name,
        copay.cpt_code,
        copay.trans_type,
        copay.previous_payer_id,
        copay.member_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.report_frequency,
        copay.source_name,
        copay.patient_type,
        copay.primary_bin,
        copay.primary_bin_description,
        copay.reject_code
 FROM datamart.copay copay
 WHERE (copay.basket_name ~~ 'AUSTEDO%'::varchar(8))
 GROUP BY copay.redemption_type,
          copay.physician_tvcmid,
          copay.pharmacy_tvcmid,
          copay.basket_id,
          copay.basket_name,
          copay.asi_txn_id,
          copay.orig_asi_txn_id,
          copay.rx_num,
          copay.fill_date,
          copay.date_written,
          copay.days_supply,
          copay.ndc_code,
          copay.daw,
          copay.new_refill,
          copay.quantity,
          copay.refills,
          copay.other_coverage_code,
          copay.program_number,
          copay.copay_card_number,
          copay.sex,
          copay.age_at_redemption,
          copay.pharmacy_process_date,
          copay.pharmacy_chain_number,
          copay.nabp,
          copay.pharmacy_chain,
          copay.pharmacy_name,
          copay.pharmacy_address,
          copay.pharmacy_address2,
          copay.pharmacy_city,
          copay.pharmacy_state,
          copay.pharmacy_zip,
          copay.pharmacy_phone,
          copay.pharmacy_npi_num,
          copay.principle_physician_dea,
          copay.physician_npi,
          copay.physician_ims_id,
          copay.physician_veeva_id,
          copay.physician_name,
          copay.physician_address1,
          copay.physician_address2,
          copay.physician_city,
          copay.physician_state,
          copay.physician_zip,
          copay.rebate_amount,
          copay.member_cash_expense,
          copay.submitted_cost,
          copay.pharmacy_fee,
          copay.total_amount_due,
          copay.calc_awp,
          copay.create_date,
          copay.occ_payment_type,
          copay.counted_copay,
          copay.auth_refills,
          copay.admin_hcp_npi,
          copay.admin_hcp_name,
          copay.admin_hcp_address,
          copay.admin_hcp_address2,
          copay.admin_hcp_city,
          copay.admin_hcp_state,
          copay.admin_hcp_zip,
          copay.claim_type,
          copay.administration_flag,
          copay.soc_name,
          copay.soc_phone,
          copay.soc_fax,
          copay.soc_address,
          copay.soc_city,
          copay.soc_state,
          copay.soc_zip,
          copay.soc_id,
          copay.soc_npi,
          copay.payer_name,
          copay.cpt_code,
          copay.trans_type,
          copay.previous_payer_id,
          copay.member_id,
          copay.benefit_amount,
          copay.patient_expense,
          copay.submission_method,
          copay.report_frequency,
          copay.source_name,
          copay.patient_type,
          copay.primary_bin,
          copay.primary_bin_description,
          copay.reject_code
 ORDER BY copay.physician_tvcmid;

CREATE  VIEW outbound.CobbsCreek_Austedo_cmop_rx_monthly AS
 SELECT cmop_rx.data_month,
        cmop_rx.comp_month,
        cmop_rx.pharmacy,
        cmop_rx.visn,
        cmop_rx.station_number,
        cmop_rx.station,
        cmop_rx.va_product,
        cmop_rx.basket_id,
        cmop_rx.basket_name,
        cmop_rx.cmop_rxs_raw,
        cmop_rx.cmop_rxs_normalized,
        cmop_rx.total_quantity,
        cmop_rx.cmop_quantity,
        cmop_rx.rxs_30_days,
        cmop_rx.zip,
        cmop_rx.id,
        cmop_rx.file_id,
        cmop_rx.record_id,
        cmop_rx.rollup_flag,
        cmop_rx.basket_type,
        cmop_rx.total_rxs_normalized,
        product_basket.child_basket_name AS MOVEMENT_DISORDER_PRODUCTS
 FROM (datamart.cmop_rx cmop_rx JOIN datamart.product_basket product_basket ON ((cmop_rx.basket_name = product_basket.child_basket_name)))
 WHERE ((product_basket.child_basket_type = 'product'::varchar(7)) AND (product_basket.parent_basket_name = 'MOVEMENT DISORDER MARKET'::varchar(24)))
 GROUP BY cmop_rx.data_month,
          cmop_rx.comp_month,
          cmop_rx.pharmacy,
          cmop_rx.visn,
          cmop_rx.station_number,
          cmop_rx.station,
          cmop_rx.va_product,
          cmop_rx.basket_id,
          cmop_rx.basket_name,
          cmop_rx.cmop_rxs_raw,
          cmop_rx.cmop_rxs_normalized,
          cmop_rx.total_quantity,
          cmop_rx.cmop_quantity,
          cmop_rx.rxs_30_days,
          cmop_rx.zip,
          cmop_rx.id,
          cmop_rx.file_id,
          cmop_rx.record_id,
          cmop_rx.rollup_flag,
          cmop_rx.basket_type,
          cmop_rx.total_rxs_normalized,
          product_basket.child_basket_name;

CREATE  VIEW outbound.zs_saba_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.rollup_month,
        prescriber_rx.sales_category,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payer_name,
        prescriber_rx.plan_name,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.model,
        prescriber_rx.payment_method,
        sum(prescriber_rx.nrx_count) AS nrx_count,
        sum(prescriber_rx.trx_count) AS trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = 'SABA MARKET TOTAL'::varchar(17)) AND (prescriber_rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.rollup_month,
          prescriber_rx.sales_category,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payer_name,
          prescriber_rx.plan_name,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.model,
          prescriber_rx.payment_method;

CREATE  VIEW outbound.zs_ics_laba_market_monthly AS
 SELECT rx.ims_id,
        rx.tvcmid,
        rx.market_name,
        rx.basket_name,
        rx.basket_type,
        rx.rollup_month,
        rx.sales_category,
        rx.payer_plan_number,
        rx.payer_name,
        rx.plan_name,
        rx.pbm_name,
        rx.pbm_parent_name,
        rx.model,
        rx.payment_method,
        sum(rx.nrx_count) AS Sum_nrx_count,
        sum(rx.trx_count) AS Sum_trx_count
 FROM (datamart.prescriber_rx rx JOIN reference.ics_laba_saba ils ON ((rx.basket_name = ils.basket_name)))
 WHERE ((rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.ims_id,
          rx.tvcmid,
          rx.market_name,
          rx.basket_name,
          rx.basket_type,
          rx.rollup_month,
          rx.sales_category,
          rx.payer_plan_number,
          rx.payer_name,
          rx.plan_name,
          rx.pbm_name,
          rx.pbm_parent_name,
          rx.model,
          rx.payment_method;

CREATE  VIEW outbound.zs_onc_ic_data_monthly AS
 SELECT oas.tvcmid,
        CASE WHEN (oas.outlet_zip IS NULL) THEN hd.zip ELSE oas.outlet_zip END AS zip,
        oas.rollup_month,
        CASE WHEN (oas.basket_id = 539) THEN 'BENDEKA'::varchar(7) WHEN (oas.basket_id = ANY (ARRAY[381, 382, 515, 513, 134, 135, 516, 514, 9882, 9884])) THEN 'GRANIX'::varchar(6) WHEN (oas.basket_id = ANY (ARRAY[74, 73])) THEN 'TREANDA'::varchar(7) WHEN (oas.basket_id = ANY (ARRAY[10695, 10696])) THEN 'TRUXIMA'::varchar(7) ELSE 'brand ??'::varchar(8) END AS Brand,
        oas.basket_id,
        oas.basket_name,
        oas.reported_trx_strength_units
 FROM ((datamart.oncology_adjusted_sales oas LEFT  JOIN datamart.customer_hco_demographics hd ON ((hd.tvcmid = oas.tvcmid))) LEFT  JOIN datamart.dddmd_demographics ddemo ON ((ddemo.tvcmid = hd.tvcmid)))
 WHERE ((oas.report_frequency = 'MONTH'::varchar(5)) AND (oas.basket_id = ANY (ARRAY[539, 381, 382, 515, 513, 134, 135, 516, 514, 9882, 9884, 74, 73, 10695, 10696])) AND (oas.rollup_month >= trunc((now() + '-13'::interval month), 'month'::varchar(5))) AND (ddemo.subcategory_code <> 'A5'::varchar(2)))
 GROUP BY oas.tvcmid,
          CASE WHEN (oas.outlet_zip IS NULL) THEN hd.zip ELSE oas.outlet_zip END,
          oas.rollup_month,
          CASE WHEN (oas.basket_id = 539) THEN 'BENDEKA'::varchar(7) WHEN (oas.basket_id = ANY (ARRAY[381, 382, 515, 513, 134, 135, 516, 514, 9882, 9884])) THEN 'GRANIX'::varchar(6) WHEN (oas.basket_id = ANY (ARRAY[74, 73])) THEN 'TREANDA'::varchar(7) WHEN (oas.basket_id = ANY (ARRAY[10695, 10696])) THEN 'TRUXIMA'::varchar(7) ELSE 'brand ??'::varchar(8) END,
          oas.basket_id,
          oas.basket_name,
          oas.reported_trx_strength_units
 ORDER BY oas.rollup_month DESC;

CREATE  VIEW outbound.zs_digihaler_activity_call_detail AS
 SELECT c.sales_force_id,
        c.call_id,
        c.veeva_account_id,
        c.ims_id,
        c.customer_type,
        c.call_type,
        c.rep_id,
        c.territory_number,
        c.zip_on_call,
        c.call_date,
        c.submit_date,
        c.attendees,
        c.attendee_type,
        c.tvcmid,
        cd.product,
        cd.basket_id,
        cd.basket_name,
        cd.detail_position,
        c.call_recordtype,
        c.how_executed
 FROM (datamart.sfa_call c JOIN datamart.sfa_call_detail cd ON ((c.call_id = cd.call_id)))
 WHERE ((cd.basket_name ~~* '%DIGIHALER%'::varchar(11)) AND (c.call_date >= '2020-01-01'::date))
 GROUP BY c.sales_force_id,
          c.call_id,
          c.veeva_account_id,
          c.ims_id,
          c.customer_type,
          c.call_type,
          c.rep_id,
          c.territory_number,
          c.zip_on_call,
          c.call_date,
          c.submit_date,
          c.attendees,
          c.attendee_type,
          c.tvcmid,
          cd.product,
          cd.basket_id,
          cd.basket_name,
          cd.detail_position,
          c.call_recordtype,
          c.how_executed
 ORDER BY c.call_date;

CREATE  VIEW outbound.CobbsCreek_austedo_optum_rx_monthly AS
 SELECT specialty_pharmacy_shipment.specialty_pharmacy_data_source,
        specialty_pharmacy_shipment.ims_id,
        specialty_pharmacy_shipment.tw_ship_to_address_id,
        specialty_pharmacy_shipment.tw_bill_to_address_id,
        specialty_pharmacy_shipment.source_customer_id,
        specialty_pharmacy_shipment.customer_name,
        specialty_pharmacy_shipment.physician_first_name,
        specialty_pharmacy_shipment.physician_last_name,
        specialty_pharmacy_shipment.ship_to_address_line_1,
        specialty_pharmacy_shipment.ship_to_address_line_2,
        specialty_pharmacy_shipment.ship_to_city,
        specialty_pharmacy_shipment.ship_to_state,
        specialty_pharmacy_shipment.ship_to_zip,
        specialty_pharmacy_shipment.source_transaction_id,
        specialty_pharmacy_shipment.invoice_date,
        specialty_pharmacy_shipment.ship_date,
        specialty_pharmacy_shipment.source_product_code,
        specialty_pharmacy_shipment.basket_id,
        specialty_pharmacy_shipment.quantity,
        specialty_pharmacy_shipment.invoice_unit_price,
        specialty_pharmacy_shipment.invoice_amount,
        specialty_pharmacy_shipment.invoice_discount,
        specialty_pharmacy_shipment.order_type,
        specialty_pharmacy_shipment.customer_type,
        specialty_pharmacy_shipment.source_parent_customer_id,
        specialty_pharmacy_shipment.parent_customer_name,
        specialty_pharmacy_shipment.lob_code_desc,
        specialty_pharmacy_shipment.order_type_desc,
        specialty_pharmacy_shipment.price_matrix_def,
        specialty_pharmacy_shipment.whse_code,
        specialty_pharmacy_shipment.order_no,
        specialty_pharmacy_shipment.package_size,
        specialty_pharmacy_shipment.tvcmid,
        specialty_pharmacy_shipment.trx_cnt,
        specialty_pharmacy_shipment.net_sales_amt,
        specialty_pharmacy_shipment.adj_invoice_unit_price,
        specialty_pharmacy_shipment.adj_invoice_amount,
        specialty_pharmacy_shipment.net_cost,
        specialty_pharmacy_shipment.payer_flag,
        specialty_pharmacy_shipment.optum_briova_flag AS birova_flag,
        specialty_pharmacy_shipment.physician_middle_name,
        specialty_pharmacy_shipment.rollup_flag,
        specialty_pharmacy_shipment.basket_type,
        specialty_pharmacy_shipment.unnormalized_trx_count,
        specialty_pharmacy_shipment.file_id,
        specialty_pharmacy_shipment.basket_name,
        product_basket.parent_basket_name,
        product_basket.child_basket_name
 FROM (datamart.specialty_pharmacy_shipment specialty_pharmacy_shipment JOIN datamart.product_basket product_basket ON ((specialty_pharmacy_shipment.basket_name = product_basket.child_basket_name)))
 WHERE ((specialty_pharmacy_shipment.ship_date >= '2018-02-01'::date) AND (specialty_pharmacy_shipment.basket_type = 'product'::varchar(7)) AND (product_basket.parent_basket_name = 'MOVEMENT DISORDER MARKET'::varchar(24)))
 GROUP BY specialty_pharmacy_shipment.specialty_pharmacy_data_source,
          specialty_pharmacy_shipment.ims_id,
          specialty_pharmacy_shipment.tw_ship_to_address_id,
          specialty_pharmacy_shipment.tw_bill_to_address_id,
          specialty_pharmacy_shipment.source_customer_id,
          specialty_pharmacy_shipment.customer_name,
          specialty_pharmacy_shipment.physician_first_name,
          specialty_pharmacy_shipment.physician_last_name,
          specialty_pharmacy_shipment.ship_to_address_line_1,
          specialty_pharmacy_shipment.ship_to_address_line_2,
          specialty_pharmacy_shipment.ship_to_city,
          specialty_pharmacy_shipment.ship_to_state,
          specialty_pharmacy_shipment.ship_to_zip,
          specialty_pharmacy_shipment.source_transaction_id,
          specialty_pharmacy_shipment.invoice_date,
          specialty_pharmacy_shipment.ship_date,
          specialty_pharmacy_shipment.source_product_code,
          specialty_pharmacy_shipment.basket_id,
          specialty_pharmacy_shipment.quantity,
          specialty_pharmacy_shipment.invoice_unit_price,
          specialty_pharmacy_shipment.invoice_amount,
          specialty_pharmacy_shipment.invoice_discount,
          specialty_pharmacy_shipment.order_type,
          specialty_pharmacy_shipment.customer_type,
          specialty_pharmacy_shipment.source_parent_customer_id,
          specialty_pharmacy_shipment.parent_customer_name,
          specialty_pharmacy_shipment.lob_code_desc,
          specialty_pharmacy_shipment.order_type_desc,
          specialty_pharmacy_shipment.price_matrix_def,
          specialty_pharmacy_shipment.whse_code,
          specialty_pharmacy_shipment.order_no,
          specialty_pharmacy_shipment.package_size,
          specialty_pharmacy_shipment.tvcmid,
          specialty_pharmacy_shipment.trx_cnt,
          specialty_pharmacy_shipment.net_sales_amt,
          specialty_pharmacy_shipment.adj_invoice_unit_price,
          specialty_pharmacy_shipment.adj_invoice_amount,
          specialty_pharmacy_shipment.net_cost,
          specialty_pharmacy_shipment.payer_flag,
          specialty_pharmacy_shipment.optum_briova_flag,
          specialty_pharmacy_shipment.physician_middle_name,
          specialty_pharmacy_shipment.rollup_flag,
          specialty_pharmacy_shipment.basket_type,
          specialty_pharmacy_shipment.unnormalized_trx_count,
          specialty_pharmacy_shipment.file_id,
          specialty_pharmacy_shipment.basket_name,
          product_basket.parent_basket_name,
          product_basket.child_basket_name;

CREATE  VIEW outbound.zs_xpo_xpopt_AM_prodbrandmrkt_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.rollup_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (prescriber_rx.market_name = 'ANTI-MIGRAINE MARKET'::varchar(20)) AND (prescriber_rx.basket_type = ANY (ARRAY['brand'::varchar(7), 'market'::varchar(7), 'product'::varchar(7)])));

CREATE  VIEW outbound.zs_xpo_xpopt_AM_submrkt_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.rollup_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (prescriber_rx.market_name = 'ANTI-MIGRAINE MARKET'::varchar(20)) AND (prescriber_rx.basket_type = 'submarket'::varchar(9)));

CREATE  VIEW outbound.zs_sample_shipment AS
 SELECT ss.veeva_id,
        ss.tvcmid,
        ss.ims_id,
        ss.first_name,
        ss.middle_name,
        ss.last_name,
        ss.designation,
        ss.state_license_number,
        ss.address_line_1,
        ss.address_line_2,
        ss.address_line_3,
        ss.city,
        ss.state,
        ss.zip,
        ss.dea_license_number,
        ss.order_id,
        ss.ndc,
        ss.basket_id,
        ss.basket_name,
        ss.order_job_code,
        ss.order_job_description,
        ss.ship_qty,
        ss.ship_date,
        ss.repid,
        ss.territory,
        ss.signature_type,
        ss.attendeename
 FROM datamart.sample_shipment ss
 WHERE ((ss.basket_name !~~* '%QNASL%'::varchar(7)) AND (ss.ship_date >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))))
 GROUP BY ss.veeva_id,
          ss.tvcmid,
          ss.ims_id,
          ss.first_name,
          ss.middle_name,
          ss.last_name,
          ss.designation,
          ss.state_license_number,
          ss.address_line_1,
          ss.address_line_2,
          ss.address_line_3,
          ss.city,
          ss.state,
          ss.zip,
          ss.dea_license_number,
          ss.order_id,
          ss.ndc,
          ss.basket_id,
          ss.basket_name,
          ss.order_job_code,
          ss.order_job_description,
          ss.ship_qty,
          ss.ship_date,
          ss.repid,
          ss.territory,
          ss.signature_type,
          ss.attendeename;

CREATE  VIEW outbound.zs_ddd_weekly AS
 SELECT ddd.outlet_code,
        ddd.outlet_name,
        ddd.outlet_zip,
        ddd.report_frequency,
        ddd.basket_id,
        ddd.basket_name,
        ddd.data_date,
        ddd.date,
        ddd.rollup_week,
        ddd.rollup_month,
        ddd.comp_month,
        ddd.quantity,
        ddd.market_name,
        ddd.outlet_tvcmid,
        ddd.sales_force_id,
        ddd.category_code,
        ddd.rollup_flag,
        ddd.basket_type,
        ddd.rollup_445_month,
        ddd.dollars,
        ddd.COUNT AS count,
        ddd.subcategory_code
 FROM datamart.ddd
 WHERE (ddd.rollup_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5)))
 GROUP BY ddd.outlet_code,
          ddd.outlet_name,
          ddd.outlet_zip,
          ddd.report_frequency,
          ddd.basket_id,
          ddd.basket_name,
          ddd.data_date,
          ddd.date,
          ddd.rollup_week,
          ddd.rollup_month,
          ddd.comp_month,
          ddd.quantity,
          ddd.market_name,
          ddd.outlet_tvcmid,
          ddd.sales_force_id,
          ddd.category_code,
          ddd.rollup_flag,
          ddd.basket_type,
          ddd.rollup_445_month,
          ddd.dollars,
          ddd.COUNT,
          ddd.subcategory_code;

CREATE  VIEW outbound.ajovy_fia_monthly AS
 SELECT fia.basket_id,
        fia.basket_name,
        fia.claim_id,
        fia.patient_id,
        fia.sequence_number,
        fia.product_id,
        fia.fill_date,
        fia.claim_type,
        fia.reject_code,
        fia.days_supply,
        fia.quantity,
        fia.refill_code,
        fia.payer_plan_id,
        fia.opc_ask,
        fia.sec_payer_plan_id,
        fia.buy_down,
        fia.opc_paid,
        fia.prescriber_id,
        fia.sob,
        fia.sub_product_id,
        fia.sub_opc,
        fia.initial_claim_id,
        fia.prev_product_id,
        fia.daw_code,
        fia.wrt_date,
        fia.claim_status,
        fia.copay_card_flg,
        fia.zip_code,
        fia.ecoup_flag,
        fia.ecoup_offset_amt,
        fia.standard_copay,
        fia.standard_copay_yn,
        fia.market_id,
        fia.flexible_fld_1_char,
        fia.flexible_fld_2_char,
        fia.flexible_fld_3_char,
        fia.flexible_fld_4_char,
        fia.file_id,
        fia.record_id,
        fia.cbsa_code,
        fia.cbsa_description,
        fia.state_code,
        fia.payer_name,
        fia.plan_name,
        fia.pbm_name,
        fia.pbm_id,
        fia.method_of_payment,
        fia.model_type,
        fia.product_group,
        fia.product_group_id,
        fia.product_name,
        fia.generic_name,
        fia.brand_generic_flag,
        fia.product_form,
        fia.product_strength,
        fia.package_size,
        fia.manufacturer,
        fia.cmf10,
        fia.usc_code,
        fia.fia_market_desc,
        fia.reject_reason,
        fia.reject_group,
        fia.mpd_year,
        fia.mpd_eligibility_class,
        fia.deductible_start_date,
        fia.copay_start_date,
        fia.gap_start_date,
        fia.catastrophic_start_date,
        fia.mpd_panel_patient,
        fia.PROVIDER_TYPE,
        fia.IQVIA_RXER_ID,
        fia.PRIMARY_SPECIALTY_CODE,
        fia.PRIMARY_SPECIALTY_DESC,
        fia.FIRST_NAME,
        fia.LAST_NAME,
        fia.ORG_NM,
        fia.ADDRESS,
        fia.CITY,
        fia.PVR_ZIP_CODE,
        fia.PVR_STATE_CODE,
        fia.PHONE_NUMBER
 FROM datamart.fia fia
 WHERE ((fia.fill_date >= '2020-01-01'::date) AND (fia.basket_id IN ( SELECT source_product.entity_id
 FROM product.source_product
 WHERE (source_product.source_file_code = 'LK715'::varchar(5)))))
 GROUP BY fia.basket_id,
          fia.basket_name,
          fia.claim_id,
          fia.patient_id,
          fia.sequence_number,
          fia.product_id,
          fia.fill_date,
          fia.claim_type,
          fia.reject_code,
          fia.days_supply,
          fia.quantity,
          fia.refill_code,
          fia.payer_plan_id,
          fia.opc_ask,
          fia.sec_payer_plan_id,
          fia.buy_down,
          fia.opc_paid,
          fia.prescriber_id,
          fia.sob,
          fia.sub_product_id,
          fia.sub_opc,
          fia.initial_claim_id,
          fia.prev_product_id,
          fia.daw_code,
          fia.wrt_date,
          fia.claim_status,
          fia.copay_card_flg,
          fia.zip_code,
          fia.ecoup_flag,
          fia.ecoup_offset_amt,
          fia.standard_copay,
          fia.standard_copay_yn,
          fia.market_id,
          fia.flexible_fld_1_char,
          fia.flexible_fld_2_char,
          fia.flexible_fld_3_char,
          fia.flexible_fld_4_char,
          fia.file_id,
          fia.record_id,
          fia.cbsa_code,
          fia.cbsa_description,
          fia.state_code,
          fia.payer_name,
          fia.plan_name,
          fia.pbm_name,
          fia.pbm_id,
          fia.method_of_payment,
          fia.model_type,
          fia.product_group,
          fia.product_group_id,
          fia.product_name,
          fia.generic_name,
          fia.brand_generic_flag,
          fia.product_form,
          fia.product_strength,
          fia.package_size,
          fia.manufacturer,
          fia.cmf10,
          fia.usc_code,
          fia.fia_market_desc,
          fia.reject_reason,
          fia.reject_group,
          fia.mpd_year,
          fia.mpd_eligibility_class,
          fia.deductible_start_date,
          fia.copay_start_date,
          fia.gap_start_date,
          fia.catastrophic_start_date,
          fia.mpd_panel_patient,
          fia.PROVIDER_TYPE,
          fia.IQVIA_RXER_ID,
          fia.PRIMARY_SPECIALTY_CODE,
          fia.PRIMARY_SPECIALTY_DESC,
          fia.FIRST_NAME,
          fia.LAST_NAME,
          fia.ORG_NM,
          fia.ADDRESS,
          fia.CITY,
          fia.PVR_ZIP_CODE,
          fia.PVR_STATE_CODE,
          fia.PHONE_NUMBER;

CREATE  VIEW outbound.blink_call_key_messages AS
 SELECT call_key_messages.veeva_account_id,
        call_key_messages.tvcmid,
        call_key_messages.call_id,
        call_key_messages.call_record_type,
        call_key_messages.product,
        call_key_messages.key_message,
        call_key_messages.call_date,
        call_key_messages.duration,
        call_key_messages.display_order,
        call_key_messages.call_status,
        call_key_messages.territory,
        call_key_messages.call_type,
        call_key_messages.hcp_name
 FROM reporting.call_key_messages
 WHERE ((call_key_messages.product = ANY (ARRAY['Blink Health – AJOVY'::varchar(24), 'Blink Health – AUSTEDO'::varchar(24)])) AND (call_key_messages.call_date >= '2021-02-01'::date));

CREATE  VIEW outbound.cei_roster AS
 SELECT rep.employee_id AS UniqueIdentifier,
        mgr.employee_id AS ParentUniqueEmployeeId,
        ((mgr.first_name || ' '::varchar(1)) || mgr.last_name) AS ReportsToName,
        rep.team AS EmployeeOrganization,
        rep.last_name AS LastName,
        rep.first_name AS FirstName,
        rep.middle_name AS MiddleName,
        rep.suffix AS Generation,
        rep.preferred_name AS PreferredName,
        rep.hire_date AS HireDate,
        rep.address_line1 AS Address1,
        rep.address_line2 AS Address2,
        rep.address_line3 AS Address3,
        rep.city AS City,
        rep.state AS StateProvince,
        rep.zip AS ZipPostalCode,
        rep.home_phone AS HomePhone,
        rep.mobile_phone AS CellPhoneHome,
        rep.business_phone AS Workphone,
        rep.email AS EmailWork,
        coalesce(rep.hr_status, 'Active'::varchar(6)) AS Status,
        rep.territory_number AS TerrID,
        rep.territory_name AS TerrName,
        '1900-01-01 00:00:00'::varchar(19) AS TermDate
 FROM (datamart.roster rep LEFT  JOIN datamart.roster mgr ON ((rep.supervisor_global_employee_id = mgr.global_employee_id)))
 WHERE ((rep.employee_id IS NOT NULL) AND (rep.sales_force_id = ANY (ARRAY['TM'::varchar(2), 'MA'::varchar(2), 'TE'::varchar(2), 'TS'::varchar(2), 'TR'::varchar(2), 'TO'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) AND (rep.fleet_eligible = 'Y'::varchar(1)));

CREATE  VIEW outbound.zs_wholesaler_sales_867_monthly AS
 SELECT wholesaler_sales_867.basket_id,
        wholesaler_sales_867.basket_name,
        wholesaler_sales_867.ndc,
        wholesaler_sales_867.product_description,
        wholesaler_sales_867.product_name,
        wholesaler_sales_867.trading_partner_name,
        wholesaler_sales_867.trading_partner_dea,
        wholesaler_sales_867.trading_partner_hin,
        wholesaler_sales_867.trading_partner_location_type,
        wholesaler_sales_867.trading_partner_dc_dea,
        wholesaler_sales_867.trading_partner_dc_hin,
        wholesaler_sales_867.trading_partner_dc_name,
        wholesaler_sales_867.trading_partner_dc_address,
        wholesaler_sales_867.trading_partner_dc_address_2,
        wholesaler_sales_867.trading_partner_dc_city,
        wholesaler_sales_867.trading_partner_dc_state,
        wholesaler_sales_867.trading_partner_dc_zip,
        wholesaler_sales_867.class_of_trade,
        wholesaler_sales_867.outlet_location_name,
        wholesaler_sales_867.outlet_dea,
        wholesaler_sales_867.outlet_hin,
        wholesaler_sales_867.outlet_340b,
        wholesaler_sales_867.outlet_ncpdp,
        wholesaler_sales_867.outlet_npi,
        wholesaler_sales_867.outlet_location_address,
        wholesaler_sales_867.outlet_location_address_2,
        wholesaler_sales_867.outlet_location_city,
        wholesaler_sales_867.outlet_location_state,
        wholesaler_sales_867.outlet_location_zip,
        wholesaler_sales_867.reporting_date,
        wholesaler_sales_867.rollup_reporting_month,
        wholesaler_sales_867.rollup_reporting_quarter,
        wholesaler_sales_867.contract_number,
        wholesaler_sales_867.contract_description,
        wholesaler_sales_867.invoice_number,
        wholesaler_sales_867.invoice_date,
        wholesaler_sales_867.invoice_line_id,
        wholesaler_sales_867.quanitity_stock_sales_ss,
        wholesaler_sales_867.ds_sales_ds,
        wholesaler_sales_867.summary_sales_su,
        wholesaler_sales_867.dock_to_dock_bq,
        wholesaler_sales_867.interbranch_ib,
        wholesaler_sales_867.return_to_useable_ru,
        wholesaler_sales_867.return_to_vendor_rv,
        wholesaler_sales_867.transfer_to_disposal_td,
        wholesaler_sales_867.adjusted_price,
        wholesaler_sales_867.gross_amount,
        wholesaler_sales_867.trx_count_normalized
 FROM datamart.wholesaler_sales_867
 WHERE (wholesaler_sales_867.reporting_date >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5)))
 GROUP BY wholesaler_sales_867.basket_id,
          wholesaler_sales_867.basket_name,
          wholesaler_sales_867.ndc,
          wholesaler_sales_867.product_description,
          wholesaler_sales_867.product_name,
          wholesaler_sales_867.trading_partner_name,
          wholesaler_sales_867.trading_partner_dea,
          wholesaler_sales_867.trading_partner_hin,
          wholesaler_sales_867.trading_partner_location_type,
          wholesaler_sales_867.trading_partner_dc_dea,
          wholesaler_sales_867.trading_partner_dc_hin,
          wholesaler_sales_867.trading_partner_dc_name,
          wholesaler_sales_867.trading_partner_dc_address,
          wholesaler_sales_867.trading_partner_dc_address_2,
          wholesaler_sales_867.trading_partner_dc_city,
          wholesaler_sales_867.trading_partner_dc_state,
          wholesaler_sales_867.trading_partner_dc_zip,
          wholesaler_sales_867.class_of_trade,
          wholesaler_sales_867.outlet_location_name,
          wholesaler_sales_867.outlet_dea,
          wholesaler_sales_867.outlet_hin,
          wholesaler_sales_867.outlet_340b,
          wholesaler_sales_867.outlet_ncpdp,
          wholesaler_sales_867.outlet_npi,
          wholesaler_sales_867.outlet_location_address,
          wholesaler_sales_867.outlet_location_address_2,
          wholesaler_sales_867.outlet_location_city,
          wholesaler_sales_867.outlet_location_state,
          wholesaler_sales_867.outlet_location_zip,
          wholesaler_sales_867.reporting_date,
          wholesaler_sales_867.rollup_reporting_month,
          wholesaler_sales_867.rollup_reporting_quarter,
          wholesaler_sales_867.contract_number,
          wholesaler_sales_867.contract_description,
          wholesaler_sales_867.invoice_number,
          wholesaler_sales_867.invoice_date,
          wholesaler_sales_867.invoice_line_id,
          wholesaler_sales_867.quanitity_stock_sales_ss,
          wholesaler_sales_867.ds_sales_ds,
          wholesaler_sales_867.summary_sales_su,
          wholesaler_sales_867.dock_to_dock_bq,
          wholesaler_sales_867.interbranch_ib,
          wholesaler_sales_867.return_to_useable_ru,
          wholesaler_sales_867.return_to_vendor_rv,
          wholesaler_sales_867.transfer_to_disposal_td,
          wholesaler_sales_867.adjusted_price,
          wholesaler_sales_867.gross_amount,
          wholesaler_sales_867.trx_count_normalized;

CREATE  VIEW outbound.ajovy_fia_adhoc_qtrly AS
 SELECT fia.basket_id,
        fia.basket_name,
        fia.claim_id,
        fia.patient_id,
        fia.sequence_number,
        fia.product_id,
        fia.fill_date,
        fia.claim_type,
        fia.reject_code,
        fia.days_supply,
        fia.quantity,
        fia.refill_code,
        fia.payer_plan_id,
        fia.opc_ask,
        fia.sec_payer_plan_id,
        fia.buy_down,
        fia.opc_paid,
        fia.prescriber_id,
        fia.sob,
        fia.sub_product_id,
        fia.sub_opc,
        fia.initial_claim_id,
        fia.prev_product_id,
        fia.daw_code,
        fia.wrt_date,
        fia.claim_status,
        fia.copay_card_flg,
        fia.zip_code,
        fia.ecoup_flag,
        fia.ecoup_offset_amt,
        fia.standard_copay,
        fia.standard_copay_yn,
        fia.market_id,
        fia.flexible_fld_1_char,
        fia.flexible_fld_2_char,
        fia.flexible_fld_3_char,
        fia.flexible_fld_4_char,
        fia.file_id,
        fia.record_id,
        fia.cbsa_code,
        fia.cbsa_description,
        fia.state_code,
        fia.payer_name,
        fia.plan_name,
        fia.pbm_name,
        fia.pbm_id,
        fia.method_of_payment,
        fia.model_type,
        fia.product_group,
        fia.product_group_id,
        fia.product_name,
        fia.generic_name,
        fia.brand_generic_flag,
        fia.product_form,
        fia.product_strength,
        fia.package_size,
        fia.manufacturer,
        fia.cmf10,
        fia.usc_code,
        fia.fia_market_desc,
        fia.reject_reason,
        fia.reject_group,
        fia.mpd_year,
        fia.mpd_eligibility_class,
        fia.deductible_start_date,
        fia.copay_start_date,
        fia.gap_start_date,
        fia.catastrophic_start_date,
        fia.mpd_panel_patient,
        fia.PROVIDER_TYPE,
        fia.IQVIA_RXER_ID,
        fia.PRIMARY_SPECIALTY_CODE,
        fia.PRIMARY_SPECIALTY_DESC,
        fia.FIRST_NAME,
        fia.LAST_NAME,
        fia.ORG_NM,
        fia.ADDRESS,
        fia.CITY,
        fia.PVR_ZIP_CODE,
        fia.PVR_STATE_CODE,
        fia.PHONE_NUMBER
 FROM datamart.fia_adhoc fia
 WHERE ((fia.fill_date >= '2020-01-01'::date) AND (fia.basket_id IN ( SELECT source_product.entity_id
 FROM product.source_product
 WHERE (source_product.source_file_code = 'A67.F12176'::varchar(10)))))
 GROUP BY fia.basket_id,
          fia.basket_name,
          fia.claim_id,
          fia.patient_id,
          fia.sequence_number,
          fia.product_id,
          fia.fill_date,
          fia.claim_type,
          fia.reject_code,
          fia.days_supply,
          fia.quantity,
          fia.refill_code,
          fia.payer_plan_id,
          fia.opc_ask,
          fia.sec_payer_plan_id,
          fia.buy_down,
          fia.opc_paid,
          fia.prescriber_id,
          fia.sob,
          fia.sub_product_id,
          fia.sub_opc,
          fia.initial_claim_id,
          fia.prev_product_id,
          fia.daw_code,
          fia.wrt_date,
          fia.claim_status,
          fia.copay_card_flg,
          fia.zip_code,
          fia.ecoup_flag,
          fia.ecoup_offset_amt,
          fia.standard_copay,
          fia.standard_copay_yn,
          fia.market_id,
          fia.flexible_fld_1_char,
          fia.flexible_fld_2_char,
          fia.flexible_fld_3_char,
          fia.flexible_fld_4_char,
          fia.file_id,
          fia.record_id,
          fia.cbsa_code,
          fia.cbsa_description,
          fia.state_code,
          fia.payer_name,
          fia.plan_name,
          fia.pbm_name,
          fia.pbm_id,
          fia.method_of_payment,
          fia.model_type,
          fia.product_group,
          fia.product_group_id,
          fia.product_name,
          fia.generic_name,
          fia.brand_generic_flag,
          fia.product_form,
          fia.product_strength,
          fia.package_size,
          fia.manufacturer,
          fia.cmf10,
          fia.usc_code,
          fia.fia_market_desc,
          fia.reject_reason,
          fia.reject_group,
          fia.mpd_year,
          fia.mpd_eligibility_class,
          fia.deductible_start_date,
          fia.copay_start_date,
          fia.gap_start_date,
          fia.catastrophic_start_date,
          fia.mpd_panel_patient,
          fia.PROVIDER_TYPE,
          fia.IQVIA_RXER_ID,
          fia.PRIMARY_SPECIALTY_CODE,
          fia.PRIMARY_SPECIALTY_DESC,
          fia.FIRST_NAME,
          fia.LAST_NAME,
          fia.ORG_NM,
          fia.ADDRESS,
          fia.CITY,
          fia.PVR_ZIP_CODE,
          fia.PVR_STATE_CODE,
          fia.PHONE_NUMBER;

CREATE  VIEW outbound.zs_call_plan AS
 SELECT cp.sales_force_id,
        cp.period,
        cp.veeva_account_id,
        cp.ims_id,
        cp.tvcmid,
        cp.first_name,
        cp.last_name,
        cp.specialty,
        cp.area_number,
        cp.region_number,
        cp.territory_number,
        cp.basket_id,
        cp.basket_name,
        cp.p1,
        cp.p2,
        cp.p3
 FROM (datamart.call_plan cp JOIN reference.call_plan_active_dates dt ON (((dt.period = cp.period) AND (dt.sales_force_id = cp.sales_force_id) AND ((statement_timestamp())::timestamp >= dt.start_date) AND ((statement_timestamp())::timestamp <= dt.end_date) AND (dt.include_in_alternates = 'Y'::varchar(1)))))
 GROUP BY cp.sales_force_id,
          cp.period,
          cp.veeva_account_id,
          cp.ims_id,
          cp.tvcmid,
          cp.first_name,
          cp.last_name,
          cp.specialty,
          cp.area_number,
          cp.region_number,
          cp.territory_number,
          cp.basket_id,
          cp.basket_name,
          cp.p1,
          cp.p2,
          cp.p3;

CREATE  VIEW outbound.Syneos_call_acitivty AS
 SELECT sc.sales_force_id,
        sc.veeva_account_id,
        sc.call_id,
        scd.basket_name,
        scd.detail_position,
        sc.tvcmid,
        sc.ims_id,
        sc.ims_outlet_id,
        sc.customer_type,
        sc.first_name,
        sc.last_name,
        sc.call_type,
        sc.rep_first_name,
        sc.rep_last_name,
        sc.territory_number,
        sc.zip_on_call,
        sc.call_date,
        sc.submit_date,
        sc.attendees,
        sc.attendee_type,
        sc.area_number,
        sc.region_number,
        sc.call_recordtype,
        sc.call_duration,
        sc.call_datetime,
        sc.how_executed
 FROM datamart.sfa_call_detail scd, datamart.sfa_call sc
 WHERE ((scd.call_id = sc.call_id) AND (scd.sales_force_id = sc.sales_force_id) AND (scd.basket_name = ANY (ARRAY['CINQAIR'::varchar(18), 'PROAIR DIGIHALER'::varchar(18), 'AIRDUO DIGIHALER'::varchar(18), 'ARMONAIR DIGIHALER'::varchar(18)])) AND (sc.territory_number IN ( SELECT roster.territory_number
 FROM datamart.roster
 WHERE (((roster.employee_id ~~* '%CWKU%'::varchar(6)) OR (roster.employee_id = ANY (ARRAY['A061823'::varchar(7), 'A805771'::varchar(7)])) OR (roster.employee_id = ANY (ARRAY['061823'::varchar(6), '805771'::varchar(6)]))) AND (roster.sales_force_id = 'TR'::varchar(2))))) AND (sc.call_date > '2019-12-31'::date))
 GROUP BY sc.sales_force_id,
          sc.veeva_account_id,
          sc.call_id,
          scd.basket_name,
          scd.detail_position,
          sc.tvcmid,
          sc.ims_id,
          sc.ims_outlet_id,
          sc.customer_type,
          sc.first_name,
          sc.last_name,
          sc.call_type,
          sc.rep_first_name,
          sc.rep_last_name,
          sc.territory_number,
          sc.zip_on_call,
          sc.call_date,
          sc.submit_date,
          sc.attendees,
          sc.attendee_type,
          sc.area_number,
          sc.region_number,
          sc.call_recordtype,
          sc.call_duration,
          sc.call_datetime,
          sc.how_executed;

CREATE  VIEW outbound.Syneos_Digihaler_rx AS
 SELECT demo.sales_force_id,
        ca.territory_number,
        rx.ims_id,
        rx.tvcmid,
        rx.data_date,
        rx.date,
        rx.basket_name,
        rx.prescriber_first_name,
        rx.prescriber_last_name,
        demo.ptr_address_1,
        demo.ptr_address_2,
        demo.ptr_city,
        demo.ptr_state,
        demo.ptr_zip,
        rx.nrx_count,
        rx.trx_count,
        rx.nrx_quantity,
        rx.trx_quantity,
        rx.ims_specialty
 FROM datamart.prescriber_rx rx, datamart.prescriber_combined_demo_frozen demo, datamart.current_alignment ca
 WHERE ((demo.ptr_zip = ca.zip_code) AND (rx.ims_id = demo.ims_id) AND (demo.sales_force_id = ca.sales_force_id) AND (ca.territory_number IN ( SELECT roster.territory_number
 FROM datamart.roster
 WHERE (((roster.employee_id ~~* '%CWKU%'::varchar(6)) OR (roster.employee_id = ANY (ARRAY['A061823'::varchar(7), 'A805771'::varchar(7)])) OR (roster.employee_id = ANY (ARRAY['061823'::varchar(6), '805771'::varchar(6)]))) AND (roster.sales_force_id = 'TR'::varchar(2))))) AND (rx.basket_name ~~* '%digihaler%'::varchar(11)) AND (rx.rollup_month > '2019-12-31'::date))
 GROUP BY demo.sales_force_id,
          ca.territory_number,
          rx.ims_id,
          rx.tvcmid,
          rx.data_date,
          rx.date,
          rx.basket_name,
          rx.prescriber_first_name,
          rx.prescriber_last_name,
          demo.ptr_address_1,
          demo.ptr_address_2,
          demo.ptr_city,
          demo.ptr_state,
          demo.ptr_zip,
          rx.nrx_count,
          rx.trx_count,
          rx.nrx_quantity,
          rx.trx_quantity,
          rx.ims_specialty;

CREATE  VIEW outbound.Syneos_Cinqair_dddmd AS
 SELECT ca.sales_force_id,
        ca.territory_number,
        dddmd.onc_account_demo_id,
        dddmd.outlet_name,
        demo.outlet_address,
        demo.outlet_city,
        demo.outlet_state,
        demo.outlet_zip,
        dddmd.outlet_code,
        dddmd.tvcmid,
        dddmd.subcategory_code,
        dddmd.basket_name,
        dddmd.data_date,
        dddmd.date,
        dddmd.rollup_month,
        dddmd.quantity,
        dddmd.dollars
 FROM datamart.ddd_md dddmd, datamart.dddmd_demographics demo, datamart.alternate_alignments ca
 WHERE ((demo.outlet_zip = ca.zip_code) AND (dddmd.outlet_code = demo.outlet_code) AND (ca.territory_number IN ( SELECT roster.territory_number
 FROM datamart.roster
 WHERE (((roster.employee_id ~~* '%CWKU%'::varchar(6)) OR (roster.employee_id = ANY (ARRAY['A061823'::varchar(7), 'A805771'::varchar(7)])) OR (roster.employee_id = ANY (ARRAY['061823'::varchar(6), '805771'::varchar(6)]))) AND (roster.sales_force_id = 'TR'::varchar(2))))) AND (dddmd.basket_name ~~* '%CINQ%'::varchar(6)) AND (dddmd.rollup_month > '2019-12-31'::date))
 GROUP BY ca.sales_force_id,
          ca.territory_number,
          dddmd.onc_account_demo_id,
          dddmd.outlet_name,
          demo.outlet_address,
          demo.outlet_city,
          demo.outlet_state,
          demo.outlet_zip,
          dddmd.outlet_code,
          dddmd.tvcmid,
          dddmd.subcategory_code,
          dddmd.basket_name,
          dddmd.data_date,
          dddmd.date,
          dddmd.rollup_month,
          dddmd.quantity,
          dddmd.dollars;

CREATE  VIEW outbound.Syneos_digihaler_targets AS
 SELECT pcd.ims_id,
        fl.tvcmid,
        NULL AS basket_id,
        NULL AS basket_name,
        fl.territory_number,
        fl.sales_force_id,
        fl.flag_type,
        fl.flag_value,
        fl.flag_effective_start_date,
        fl.flag_effective_end_date,
        pcd.veeva_account_id,
        pcd.specialty
 FROM (datamart.customer_level_flags fl LEFT  JOIN datamart.prescriber_combined_demographics pcd ON ((fl.tvcmid = pcd.tvcmid)))
 WHERE ((fl.territory_number IN ( SELECT roster.territory_number
 FROM datamart.roster
 WHERE (((roster.employee_id ~~* '%CWKU%'::varchar(6)) OR (roster.employee_id = ANY (ARRAY['A061823'::varchar(7), 'A805771'::varchar(7)])) OR (roster.employee_id = ANY (ARRAY['061823'::varchar(6), '805771'::varchar(6)]))) AND (roster.sales_force_id = 'TR'::varchar(2))))) AND (fl.basket_name ~~* '%DIGIHALER'::varchar(10)) AND ((statement_timestamp())::timestamp >= fl.flag_effective_start_date) AND ((statement_timestamp())::timestamp <= fl.flag_effective_end_date))
 GROUP BY pcd.ims_id,
          fl.tvcmid,
          NULL,
          fl.territory_number,
          fl.sales_force_id,
          fl.flag_type,
          fl.flag_value,
          fl.flag_effective_start_date,
          fl.flag_effective_end_date,
          pcd.veeva_account_id,
          pcd.specialty
 ORDER BY fl.territory_number,
          pcd.ims_id;

CREATE  VIEW outbound.mcm_qvar_copay AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.pharmacy_chain_number,
        copay.nabp,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.create_date,
        copay.occ_payment_type,
        copay.counted_copay,
        copay.auth_refills,
        copay.admin_hcp_npi,
        copay.admin_hcp_name,
        copay.admin_hcp_address,
        copay.admin_hcp_address2,
        copay.admin_hcp_city,
        copay.admin_hcp_state,
        copay.admin_hcp_zip,
        copay.claim_type,
        copay.administration_flag,
        copay.soc_name,
        copay.soc_phone,
        copay.soc_fax,
        copay.soc_address,
        copay.soc_city,
        copay.soc_state,
        copay.soc_zip,
        copay.soc_id,
        copay.soc_npi,
        copay.payer_name,
        copay.cpt_code,
        copay.trans_type,
        copay.previous_payer_id,
        copay.member_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.report_frequency,
        copay.source_name,
        copay.file_id,
        copay.record_id,
        copay.patient_type,
        copay.primary_bin,
        copay.primary_bin_description,
        copay.reject_code
 FROM datamart.copay
 WHERE (copay.basket_name ~~* '%QVAR%'::varchar(6))
 ORDER BY copay.fill_date;

CREATE  VIEW outbound.newman_roster AS
 SELECT rep.territory_number AS Territory,
        rep.last_name AS LastName,
        rep.first_name AS FirstName,
        substr(rep.middle_name, 1, 1) AS "Middle Initial",
        rep.suffix AS Suffix,
        rep.employee_id AS "Teva ID",
        rep.email AS Email,
        rep.business_address_line1 AS "Business Address1",
        rep.business_address_line2 AS "Business Address2",
        rep.shipping_address_line3 AS "Business Address3",
        rep.business_city AS "Business City",
        rep.business_state AS "Business State",
        rep.business_zip AS "Business Zip",
        rep.shipping_address_line1 AS "Shipping Address1",
        rep.shipping_address_line2 AS "Shipping Address2",
        rep.shipping_address_line3 AS "Shipping Address3",
        rep.shipping_city AS "Shipping City",
        rep.shipping_state AS "Shipping State",
        rep.shipping_zip AS "Shipping Zip",
        rep.mobile_phone AS "Cell Phone",
        rep.business_phone AS "Business Phone",
        rep.sales_force_id AS Company,
        CASE WHEN (upper(rep.reg_contract) = 'EX'::varchar(2)) THEN 'Contractor'::varchar(10) ELSE 'Associate'::varchar(9) END AS "Profile Type",
        coalesce(rep.username, 'zzzzz'::varchar(5)) AS "Newman User Name"
 FROM datamart.roster rep
 WHERE ((rep.employee_id IS NOT NULL) AND (rep.sales_force_id = ANY (ARRAY['MA'::varchar(2), 'TE'::varchar(2), 'TM'::varchar(2), 'TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'TH'::varchar(2)])) AND (rep.assignment_type <> 'Secondary'::varchar(9)));

CREATE  VIEW outbound.zzz_asi_rx_by_market_smr AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM (datamart.prescriber_rx rx LEFT  JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '435'::varchar(3)) AND (rx.ims_report_number_cnt = '68'::varchar(2)) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.v_ob_ahm_customer_individual_duplicate_Check AS
 SELECT cm.tvcmid AS CustomerId,
        coalesce(cm.first_name, ''::varchar) AS FirstName,
        coalesce(cm.last_name, ''::varchar) AS LastName,
        coalesce(cm.middle_name, ''::varchar) AS MiddleName,
        ''::varchar AS Salutation,
        coalesce(cm.suffix, ''::varchar) AS PersonalSuffix,
        cm.sub_type_name AS CustomerType,
        CASE WHEN (cm.teva_specialty_code = 'NRP'::varchar(3)) THEN 'NP'::varchar(2) ELSE d.profession_code_shortname END AS ProfessionalDesignation,
        coalesce(cm.teva_specialty_code, ''::varchar) AS PrimarySpecialtyCode,
        ''::varchar AS SecondarySpecialtyCode,
        ''::varchar AS GovernmentEmployeeIndicator,
        ''::varchar AS TaxId,
        ''::varchar AS TaxIdType,
        ''::varchar AS BusinessEmail,
        ''::varchar AS BusinessPhone,
        ''::varchar AS BusinessFax,
        ''::varchar AS MobilePhone,
        ''::varchar AS HomePhone,
        'US'::varchar(2) AS RegionId,
        CASE WHEN (cm.healthcare_professional_status_code = 'A'::varchar(1)) THEN 'Active'::varchar(6) WHEN (cm.healthcare_professional_status_code <> 'A'::varchar(1)) THEN 'Inactive'::varchar(8) ELSE ''::varchar END AS Status
 FROM ((mdm.hcp cm LEFT  JOIN mdm.professional prof ON (((cm.tvcmid = prof.tvcmid) AND (prof.profession_rank = 1::float)))) JOIN reference.Designations d ON ((d.profession_code = prof.profession_code)))
 WHERE ((cm.tvcmid IS NOT NULL) AND (cm.tvcmid = ANY (ARRAY[102904, 1244562, 1377015, 1582445, 1609131, 1925288, 2020622, 3243439, 5010145, 5120229, 5122932])))
 GROUP BY cm.tvcmid,
          coalesce(cm.first_name, ''::varchar),
          coalesce(cm.last_name, ''::varchar),
          coalesce(cm.middle_name, ''::varchar),
          ''::varchar,
          coalesce(cm.suffix, ''::varchar),
          cm.sub_type_name,
          CASE WHEN (cm.teva_specialty_code = 'NRP'::varchar(3)) THEN 'NP'::varchar(2) ELSE d.profession_code_shortname END,
          coalesce(cm.teva_specialty_code, ''::varchar),
          'US'::varchar(2),
          CASE WHEN (cm.healthcare_professional_status_code = 'A'::varchar(1)) THEN 'Active'::varchar(6) WHEN (cm.healthcare_professional_status_code <> 'A'::varchar(1)) THEN 'Inactive'::varchar(8) ELSE ''::varchar END;

CREATE  VIEW outbound.DDDMD_WEEKLY_DOLLARS AS
 SELECT EXT_TR_DDDMD_WEEKLY_DOLLARS_src.client_num,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.report_num,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.ims_outlet_code,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.subcategory_code,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.alt_seq_num,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.filler01,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.category_code,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.ims_product_code,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.data_date,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk01,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk02,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk03,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk04,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk05,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk06,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk07,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk08,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk09,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk10,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk11,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk12,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk13,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk14,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk15,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk16,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk17,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk18,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk19,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk20,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk21,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk22,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk23,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk24,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk25,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk26,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk27,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk28,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk29,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk30,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk31,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk32,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk33,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk34,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk35,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk36,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk37,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk38,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk39,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk40,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk41,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk42,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk43,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk44,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk45,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk46,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk47,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk48,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk49,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk50,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk51,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk52,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk53,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk54,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk55,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk56,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk57,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk58,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk59,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk60,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk61,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk62,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk63,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk64,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk65,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk66,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk67,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk68,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk69,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk70,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk71,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk72,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk73,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk74,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk75,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk76,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk77,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk78,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk79,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk80,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk81,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk82,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk83,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk84,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk85,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk86,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk87,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk88,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk89,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk90,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk91,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk92,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk93,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk94,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk95,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk96,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk97,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk98,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk99,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk100,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk101,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk102,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk103,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk104,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk105,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.dol_wk106,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.outlet_name,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.outlet_address,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.outlet_city,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.outlet_state,
        EXT_TR_DDDMD_WEEKLY_DOLLARS_src.outlet_zip
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_DOLLARS_src
 WHERE (EXT_TR_DDDMD_WEEKLY_DOLLARS_src.batch_id IN ( SELECT max(EXT_TR_DDDMD_WEEKLY_DOLLARS_src.batch_id) AS max
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_DOLLARS_src));

CREATE  VIEW outbound.DDDMD_WEEKLY_DEMO_DOL AS
 SELECT EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.client_num,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.report_num,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.ims_outlet_code,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.ims_facility_number,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.ims_prescriber_number,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.outlet_name,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.outlet_address,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.outlet_city,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.outlet_state,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.outlet_zip,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_name,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_address1,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_address2,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_address3,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_address4,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_city,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_state,
        EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.facility_prescriber_zip
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src
 WHERE (EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.batch_id IN ( SELECT max(EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src.batch_id) AS max
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_DEMO_DOL_src));

CREATE  VIEW outbound.zzz_kc_cns_deciles AS
 SELECT d.ims_id AS hcp_id,
        d.decile_name,
        d.decile_trx_count_6_mo AS decile_value
 FROM datamart.rx_deciles d
 WHERE ((d.decile_name = ANY (ARRAY['FENTORA'::varchar(8), 'ACTIQ'::varchar(8), 'NUVIGIL'::varchar(8), 'AMRIX'::varchar(8), 'AZILECT'::varchar(8), 'COPAXONE'::varchar(8)])) AND (EXISTS ( SELECT 1
 FROM datamart.prescriber_combined_demographics pd
 WHERE (pd.ims_id = d.ims_id))))
 GROUP BY d.ims_id,
          d.decile_name,
          d.decile_trx_count_6_mo UNION ALL  SELECT d.ims_id AS hcp_id,
        d.decile_name,
        d.decile_trx_count_6_mo AS decile_value
 FROM datamart.rx_deciles d
 WHERE (d.decile_name = ANY (ARRAY['TIRF TOTAL'::varchar(22), 'COMBO SAO TOTAL'::varchar(22), 'TOTAL OPIOID MARKET'::varchar(22), 'LAO TOTAL'::varchar(22), 'PURE SAO TOTAL'::varchar(22), 'BRANDED SLEEP/SEDATIVE'::varchar(22), 'TOTAL MUSCLE RELAXANTS'::varchar(22)]))
 GROUP BY d.ims_id,
          d.decile_name,
          d.decile_trx_count_6_mo;

CREATE  VIEW outbound.zzz_zs_agile_mkt_fentora_obq_copay_redemption AS
 SELECT c.physician_tvcmid AS TVCMID,
        cm_ims.id_num AS IMS_ID,
        cm_vv.id_num AS VEEVA_ACCOUNT_ID,
        c.program_number AS ASI_PROGRAM_NUM,
        cvp.program_description AS PROGRAM_DESC,
        c.copay_card_number AS COPAY_CARD_NUM,
        c.physician_zip AS ZIP_CODE,
        to_char(c.fill_date, 'MM/DD/YYYY'::varchar(10)) AS FILL_DATE,
        brand.brand_name AS BRAND_NAME,
        c.basket_name AS DRUG_DESC,
        c.quantity AS QTY
 FROM ((((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.redemption_type = cvp.redemption_type) AND (c.program_number = cvp.program_number)))) JOIN ( SELECT bp.basket_id AS prod_basket_id,
        bb.basket_id AS brand_basket_id,
        bb.name AS brand_name
 FROM ((product.basket bp JOIN product.basket_item bi ON (((bp.basket_id = bi.entity_id) AND (bp.basket_type = 'product'::varchar(7))))) JOIN product.basket bb ON (((bb.basket_id = bi.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.prod_basket_id))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'IMS_ID'::varchar(6))
 GROUP BY tvcmid_xref.tvcmid) cm_ims ON ((c.physician_tvcmid = cm_ims.tvcmid))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'VEEVA_ID'::varchar(8))
 GROUP BY tvcmid_xref.tvcmid) cm_vv ON ((c.physician_tvcmid = cm_vv.tvcmid)))
 WHERE ((c.basket_name ~~ '%FENTORA%'::varchar(9)) AND (c.redemption_type = 'COPAY'::varchar(5)) AND (c.report_frequency = 'MONTH'::varchar(5)) AND (c.physician_tvcmid IS NOT NULL) AND (c.fill_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (c.fill_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))));

CREATE  VIEW outbound.zzz_zs_agile_mkt_fentora_obq_voucher_redemption AS
 SELECT c.physician_tvcmid AS TVCMID,
        cm_ims.id_num AS IMS_ID,
        cm_vv.id_num AS VEEVA_ACCOUNT_ID,
        c.program_number AS ASI_PROGRAM_NUM,
        cvp.program_description AS PROGRAM_DESC,
        c.copay_card_number AS VOUCHER_NUM,
        c.physician_zip AS ZIP_CODE,
        to_char(c.fill_date, 'MM/DD/YYYY'::varchar(10)) AS FILL_DATE,
        brand.brand_name AS BRAND_NAME,
        c.basket_name AS DRUG_DESC,
        c.quantity AS QTY
 FROM ((((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.redemption_type = cvp.redemption_type) AND (c.program_number = cvp.program_number)))) JOIN ( SELECT bp.basket_id AS prod_basket_id,
        bb.basket_id AS brand_basket_id,
        bb.name AS brand_name
 FROM ((product.basket bp JOIN product.basket_item bi ON (((bp.basket_id = bi.entity_id) AND (bp.basket_type = 'product'::varchar(7))))) JOIN product.basket bb ON (((bb.basket_id = bi.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.prod_basket_id))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'IMS_ID'::varchar(6))
 GROUP BY tvcmid_xref.tvcmid) cm_ims ON ((c.physician_tvcmid = cm_ims.tvcmid))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'VEEVA_ID'::varchar(8))
 GROUP BY tvcmid_xref.tvcmid) cm_vv ON ((c.physician_tvcmid = cm_vv.tvcmid)))
 WHERE ((c.basket_name ~~ '%FENTORA%'::varchar(9)) AND (c.redemption_type = 'VOUCHER'::varchar(7)) AND (c.report_frequency = 'MONTH'::varchar(5)) AND (c.physician_tvcmid IS NOT NULL) AND (c.fill_date >= (last_day(add_months((statement_timestamp())::timestamp, (-25))) + 1)) AND (c.fill_date <= last_day(add_months((statement_timestamp())::timestamp, (-1)))));

CREATE  VIEW outbound.zzz_v_cmop_rx AS
 SELECT cr.station_number AS STATION_NUMBER,
        cr.va_product AS VA_PRODUCT,
        0 AS PRODUCT_ID,
        CASE WHEN ((b.teva_product_code IS NULL) AND (cr.va_product ~~ 'LEVONORGESTREL%'::varchar(15))) THEN 'TW0900'::varchar(6) WHEN ((b.teva_product_code IS NULL) AND (cr.va_product ~~ 'MOMETASONE FUROATE%'::varchar(19))) THEN 'TR0900'::varchar(6) WHEN ((b.teva_product_code IS NULL) AND (cr.va_product ~~ 'ESTROGENS,CONJUGATED%'::varchar(21))) THEN 'TW0900'::varchar(6) WHEN ((b.teva_product_code IS NULL) AND (cr.va_product ~~ 'BECLOMETHASONE DIPROPIONATE%'::varchar(28))) THEN 'TR0900'::varchar(6) WHEN ((b.teva_product_code IS NULL) AND (cr.va_product ~~ 'INTERFERON BETA%'::varchar(16))) THEN '600230'::varchar(6) ELSE b.teva_product_code END AS PRODUCT_CODE,
        (add_months(cr.data_month, (-1)) + 1) AS MONTH,
        cr.total_rxs_normalized AS TRX_CNT,
        cr.cmop_rxs_normalized AS CMOP_CNT,
        cr.total_quantity AS TRX_QTY,
        cr.cmop_quantity AS CMOP_QTY,
        ((cr.rxs_30_days)::int)::varchar AS CNT_30_DAY_RX,
        cr.id AS ID
 FROM ((datamart.cmop_rx cr JOIN ( SELECT a.month_ending,
        a.month_bucket
 FROM ( SELECT last_day(cmop_rx.data_month) AS month_ending,
        rank() OVER (ORDER BY last_day(cmop_rx.data_month) DESC) AS month_bucket
 FROM datamart.cmop_rx
 GROUP BY last_day(cmop_rx.data_month)) a
 WHERE ((a.month_bucket >= 1) AND (a.month_bucket <= 24))) mth ON ((last_day(cr.data_month) = mth.month_ending))) LEFT  JOIN product.basket b ON ((cr.basket_id = b.basket_id)))
 WHERE (cr.va_product IS NOT NULL);

CREATE  VIEW outbound.zzz_asi_market_access_w AS
SELECT A.zip, A.state, A.payer_plan_num, A.report_num, A.ims_product_group_num, A.data_month, A.nrx_001, A.nrx_002, A.nrx_003, A.nrx_004, A.nrx_005, A.nrx_006, A.nrx_007, A.nrx_008, A.nrx_009, A.nrx_010, A.nrx_011, A.nrx_012, A.nrx_013, A.nrx_014, A.nrx_015, A.nrx_016, A.nrx_017, A.nrx_018, A.nrx_019, A.nrx_020, A.nrx_021, A.nrx_022, A.nrx_023, A.nrx_024, A.trx_001, A.trx_002, A.trx_003, A.trx_004, A.trx_005, A.trx_006, A.trx_007, A.trx_008, A.trx_009, A.trx_010, A.trx_011, A.trx_012, A.trx_013, A.trx_014, A.trx_015, A.trx_016, A.trx_017, A.trx_018, A.trx_019, A.trx_020, A.trx_021, A.trx_022, A.trx_023, A.trx_024 FROM ((SELECT coalesce(d.zip, o.zip, pcd.ptr_zip) AS zip, coalesce(d.state, o.state, pcd.ptr_state, mpzd.state) AS state, rx.payer_plan_number AS payer_plan_num, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END AS report_num, rx.ims_product_group AS ims_product_group_num, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) AS data_month, sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (((((datamart.prescriber_rx rx JOIN outbound.month_rollup_and_bucket iwb ON ((rx.rollup_month = iwb.month_ending))) LEFT JOIN (SELECT market_presc_zip_divisor.ims_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.state FROM outbound.market_presc_zip_divisor GROUP BY market_presc_zip_divisor.ims_id, market_presc_zip_divisor.ims_client_number, market_presc_zip_divisor.ims_report_number, market_presc_zip_divisor.state) mpzd ON (((rx.ims_id = mpzd.ims_id) AND (rx.ims_client_number = mpzd.ims_client_number) AND (rx.ims_report_number_cnt = mpzd.ims_report_number)))) LEFT JOIN (SELECT hcp_demo.tvcmid, hcp_demo.state_code AS state, hcp_demo.zip FROM datamart.customer_hcp_demographics hcp_demo WHERE (hcp_demo.file_id = (SELECT max(customer_hcp_demographics.file_id) AS MAX FROM datamart.customer_hcp_demographics))) d ON ((rx.tvcmid = d.tvcmid))) LEFT JOIN (SELECT hco_demo.tvcmid, hco_demo.state_code AS state, hco_demo.zip FROM datamart.customer_hco_demographics hco_demo WHERE (hco_demo.file_id = (SELECT max(customer_hco_demographics.file_id) AS MAX FROM datamart.customer_hco_demographics))) o ON ((rx.tvcmid = o.tvcmid))) LEFT JOIN (SELECT rnk.ims_id, rnk.ptr_state, rnk.ptr_zip FROM (SELECT DISTINCT prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source) AS rnk FROM datamart.prescriber_combined_demographics ORDER BY prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source)) rnk WHERE (rnk.rnk = 1)) pcd ON ((pcd.ims_id = rx.ims_id))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_report_number_cnt = ANY (ARRAY['1'::varchar(1), '2'::varchar(1), '3'::varchar(1), '4'::varchar(1), '5'::varchar(1), '6'::varchar(1), '68'::varchar(2)])) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9))) GROUP BY coalesce(d.zip, o.zip, pcd.ptr_zip), coalesce(d.state, o.state, pcd.ptr_state, mpzd.state), rx.payer_plan_number, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END, rx.ims_product_group, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) UNION ALL SELECT CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END AS ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END AS payer_plan_num, '55'::varchar(2) AS report_num, pg.ims_product_group AS ims_product_group_num, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x) AS data_month, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((datamart.specialty_pharmacy_shipment sp JOIN (SELECT month_rollup_and_bucket.month_ending, month_rollup_and_bucket.month_bucket FROM outbound.month_rollup_and_bucket) mth ON ((last_day(sp.ship_date) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source) pg ON (((pg.basket_id = sp.basket_id) AND (pg.data_source = sp.specialty_pharmacy_data_source)))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['Prime Therapeutics'::varchar(18), 'Prime Therapeutics'::varchar(18)])) AND (sp.ims_id IS NOT NULL)) GROUP BY CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END, pg.ims_product_group, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x)) UNION ALL SELECT CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END AS ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END AS payer_plan_num, '55'::varchar(2) AS report_num, pg.ims_product_group AS ims_product_group_num, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x) AS data_month, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((datamart.specialty_pharmacy_shipment sp JOIN (SELECT month_rollup_and_bucket.month_ending, month_rollup_and_bucket.month_bucket FROM outbound.month_rollup_and_bucket) mth ON ((add_months(last_day(sp.ship_date), 1) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source) pg ON (((pg.basket_id = sp.basket_id) AND (pg.data_source = sp.specialty_pharmacy_data_source)))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['OptumRx'::varchar(7), 'OptumRx'::varchar(7)])) AND (sp.ims_id IS NOT NULL)) GROUP BY CASE WHEN (sp.ship_to_zip IS NULL) THEN '00000'::varchar(5) ELSE sp.ship_to_zip END, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END, pg.ims_product_group, (SELECT to_char(x.month_ending, 'MM/YYYY'::varchar(7)) AS TO_CHAR FROM (SELECT max(month_rollup_and_bucket.month_ending) AS month_ending FROM outbound.month_rollup_and_bucket) x)) A;

CREATE  VIEW outbound.zzz_asi_rx_by_market_ms AS
(SELECT rx.market_name, rx.ims_client_number AS ims_client_num, rx.ims_report_number_cnt AS ims_report_num, rx.ims_zip_other AS zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id, rx.ims_specialty AS specialty, rx.payer_plan_number AS plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.ims_rx_type AS rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num, NULL AS filler_01, axd.ims_me_num AS me_num, rx.prescriber_last_name AS last_name, rx.prescriber_first_name AS first_name, axd.ims_middle_name AS middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address, axd.ims_city AS city, axd.ims_state AS state, axd.ims_zip AS zip, replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data, rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other)))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '2'::varchar(1)) AND (rx.report_frequency = 'MONTH'::varchar(5))) GROUP BY rx.market_name, rx.ims_client_number, rx.ims_report_number_cnt, rx.ims_zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END, rx.ims_specialty, axd.ims_me_num, rx.payer_plan_number, btrim(to_char(rx.sales_category, '00'::varchar(2))), rx.ims_rx_type, btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))), rx.prescriber_last_name, rx.prescriber_first_name, axd.ims_middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar), axd.ims_city, axd.ims_state, axd.ims_zip, replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar), rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) UNION ALL SELECT pg.market_name, '632'::varchar(3) AS ims_client_num, '2'::varchar(2) AS ims_report_num, rx.ims_zip AS zip_other, sp.ims_id, rx.ims_specialty AS specialty, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END AS plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pg.ims_product_group AS ims_product_group_num, NULL AS filler_01, rx.ims_me_num AS me_num, rx.ims_last_name AS last_name, rx.ims_first_name AS first_name, rx.ims_middle_name AS middle_name, rx.ims_address AS address, rx.ims_city AS city, rx.ims_state AS state_code, rx.ims_zip AS zip, NULL AS supplemental_data, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3 MAIL ORDER DATA UNSPEC'::varchar(25) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3 TYSABRI MAIL ORDER DATA UNSPEC'::varchar(33) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME MAIL ORDER DATA UNSPEC'::varchar(28) ELSE NULL END AS plan_name, to_char(mth2.data_date, 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((((datamart.specialty_pharmacy_shipment sp JOIN outbound.month_rollup_and_bucket mth ON ((last_day(sp.comp_month) = mth.month_ending))) JOIN (SELECT max(month_rollup_and_bucket.month_ending) AS data_date FROM outbound.month_rollup_and_bucket) mth2 ON (true)) JOIN reference.asi_outbound_ims_product_group_mapping pg ON (((sp.specialty_pharmacy_data_source = pg.data_source) AND (sp.basket_id = pg.basket_id) AND (pg.market_name = 'MS MARKET'::varchar(9))))) LEFT JOIN (SELECT a.ims_last_name, a.ims_first_name, a.ims_middle_name, a.ims_address, a.ims_city, a.ims_state, a.ims_zip, a.ims_client_number, a.ims_me_num, a.ims_id, a.ims_specialty, a.rnk FROM (SELECT axd.ims_last_name, axd.ims_first_name, axd.ims_middle_name, axd.ims_address, axd.ims_city, axd.ims_state, axd.ims_zip, axd.ims_client_number, axd.ims_me_num, axd.ims_id, axd.ims_specialty, row_number() OVER (PARTITION BY axd.ims_id ORDER BY axd.ims_specialty) AS rnk FROM outbound.asi_xponent_demographics axd) a WHERE (a.rnk = 1)) rx ON (((rx.ims_id = sp.ims_id) AND (rx.ims_client_number = '632'::varchar(3))))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['Prime Therapeutics'::varchar(18), 'OptumRx'::varchar(7)])) AND (sp.ims_id IS NOT NULL)) GROUP BY pg.market_name, sp.ims_id, rx.ims_specialty, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END, pg.ims_product_group, rx.ims_me_num, rx.ims_last_name, rx.ims_first_name, rx.ims_middle_name, rx.ims_address, rx.ims_city, rx.ims_state, rx.ims_zip, CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3 MAIL ORDER DATA UNSPEC'::varchar(25) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3 TYSABRI MAIL ORDER DATA UNSPEC'::varchar(33) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME MAIL ORDER DATA UNSPEC'::varchar(28) ELSE NULL END, to_char(mth2.data_date, 'MMDDYY'::varchar(6))) UNION ALL SELECT pg.market_name, '632'::varchar(3) AS ims_client_num, '2'::varchar(2) AS ims_report_num, cm.zip AS zip_other, NULL AS ims_id, '01N'::varchar(3) AS specialty, 'CMOP000000'::varchar(10) AS payer_plan_id, '02'::varchar(2) AS sales_category, 'B'::varchar(1) AS rx_type, pg.ims_product_group AS ims_product_group_num, NULL AS filler_01, '0'::varchar(1) AS me_num, 'NATIONAL ASSIGNMENT'::varchar(19) AS last_name, NULL AS first_name, NULL AS middle_name, NULL AS address, NULL AS city, NULL AS state, '00001'::varchar(5) AS zip, NULL AS supplemental_data, 'VA DATA UNSPEC'::varchar(14) AS plan_name, to_char(mth2.data_date, 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN cm.total_rxs_normalized ELSE NULL::float END) AS trx_024 FROM (((datamart.cmop_rx cm JOIN outbound.month_rollup_and_bucket mth ON ((last_day(cm.comp_month) = mth.month_ending))) JOIN (SELECT max(month_rollup_and_bucket.month_ending) AS data_date FROM outbound.month_rollup_and_bucket) mth2 ON (true)) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group FROM reference.asi_outbound_ims_product_group_mapping WHERE ((asi_outbound_ims_product_group_mapping.data_source = 'CMOP'::varchar(4)) AND (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9))) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group) pg ON ((pg.basket_id = cm.basket_id))) WHERE ((mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (cm.total_rxs_normalized <> 0::numeric(18,0))) GROUP BY pg.market_name, cm.zip, pg.ims_product_group, to_char(mth2.data_date, 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.pdrp AS
 SELECT d.ims_id AS IMS_ID,
        coalesce(d.dea_num, dea.id_num) AS DEA_NUM,
        d.last_name AS LAST_NAME,
        d.first_name AS FIRST_NAME,
        d.middle_name AS MID_NAME,
        ((((d.ptr_address_1 || ' '::varchar(1)) || d.ptr_address_2) || ' '::varchar(1)) || d.ptr_address_3) AS ADDRESS,
        d.ptr_city AS CITY,
        d.ptr_state AS STATE,
        d.ptr_zip AS ZIP,
        d.npi AS NPI
 FROM ((datamart.prescriber_combined_demographics d JOIN ( SELECT a.tvcmid,
        a.flag_type,
        a.flag_value
 FROM ( SELECT customer_level_flags.tvcmid,
        customer_level_flags.flag_type,
        customer_level_flags.flag_value,
        customer_level_flags.flag_effective_start_date,
        row_number() OVER (PARTITION BY customer_level_flags.tvcmid ORDER BY customer_level_flags.flag_effective_start_date DESC NULLS LAST, customer_level_flags.flag_value DESC) AS rnk
 FROM datamart.customer_level_flags
 WHERE (customer_level_flags.flag_type = 'PDRP'::varchar(4))) a
 WHERE (a.rnk = 1)) clf ON (((d.tvcmid = clf.tvcmid) AND (clf.flag_type = 'PDRP'::varchar(4)) AND (clf.flag_value = 'Y'::varchar(1))))) LEFT  JOIN ( SELECT b.tvcmid,
        b.id_num,
        b.state
 FROM ( SELECT tvcmid_xref.tvcmid,
        tvcmid_xref.id_num,
        tvcmid_xref.id_type,
        tvcmid_xref.state,
        row_number() OVER (PARTITION BY tvcmid_xref.tvcmid, tvcmid_xref.state ORDER BY tvcmid_xref.id_num) AS rnk
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'DEA_NUM'::varchar(7))) b
 WHERE (b.rnk = 1)) dea ON (((d.tvcmid = dea.tvcmid) AND (d.ptr_state = dea.state))))
 GROUP BY d.ims_id,
          coalesce(d.dea_num, dea.id_num),
          d.last_name,
          d.first_name,
          d.middle_name,
          ((((d.ptr_address_1 || ' '::varchar(1)) || d.ptr_address_2) || ' '::varchar(1)) || d.ptr_address_3),
          d.ptr_city,
          d.ptr_state,
          d.ptr_zip,
          d.npi;

CREATE  VIEW outbound.zzz_asi_patient_month AS
 SELECT pmc.tvcmid,
        pmc.ims_id,
        pmc.npi,
        coalesce(vvid.veeva_account_id, pmc.ims_id) AS veeva_account_id,
        pmc.ims_surrogate_patient_id,
        pmc.basket_name AS product_name,
        pmc.indication,
        pmc.dispense_type,
        to_char(pmc.rollup_shipment_month, 'YYYYMMDD'::varchar(8)) AS rollup_shipment_month,
        (pmc.patient_months)::numeric(32,3) AS patient_months
 FROM ((datamart.patient_months_count pmc LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        min(tvcmid_xref.id_num) AS veeva_account_id
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'VEEVA_ID'::varchar(8))
 GROUP BY tvcmid_xref.tvcmid) vvid ON ((pmc.tvcmid = vvid.tvcmid))) JOIN ( SELECT to_char(ims_week_buckets.month_ending, 'YYYYMMDD'::varchar(8)) AS full_month
 FROM integration.ims_week_buckets
 WHERE (ims_week_buckets.full_month = 'Y'::varchar(1))
 GROUP BY to_char(ims_week_buckets.month_ending, 'YYYYMMDD'::varchar(8))) fm ON ((to_char(pmc.rollup_shipment_month, 'YYYYMMDD'::varchar(8)) = fm.full_month)))
 WHERE (pmc.approved_indication = 'Y'::varchar(1))
 ORDER BY pmc.tvcmid,
          pmc.ims_surrogate_patient_id;

CREATE  VIEW outbound.zzz_generic_roster AS
 SELECT rep.employee_id AS TevaID,
        rep.territory_number AS Terr_id,
        rep.territory_name AS TerritoryName,
        rep.sales_force_id AS SalesForceID,
        rep.first_name AS FirstName,
        rep.middle_name AS MiddleName,
        rep.preferred_name AS PreferredName,
        rep.last_name AS LastName,
        replace(((((rep.first_name || ' '::varchar(1)) || coalesce(rep.middle_name, ''::varchar)) || ' '::varchar(1)) || rep.last_name), '  '::varchar(2), ' '::varchar(1)) AS FullName,
        rep.title AS Title,
        rep.hr_status AS RepStatus,
        CASE WHEN (upper(rep.reg_contract) = 'EX'::varchar(2)) THEN 'Contract'::varchar(8) ELSE rep.rep_type END AS RepType,
        ''::varchar AS Contractor,
        rep.email AS Email,
        mgr.employee_id AS ManagerID,
        mgr.first_name AS ManagerFirstName,
        coalesce(mgr.middle_name, ''::varchar) AS ManagerMiddleName,
        mgr.last_name AS ManagerLastName,
        replace(((((mgr.first_name || ' '::varchar(1)) || coalesce(mgr.middle_name, ''::varchar)) || ' '::varchar(1)) || mgr.last_name), '  '::varchar(2), ' '::varchar(1)) AS ManagerFullName,
        rep.business_address_line1 AS BusinessAddress1,
        rep.business_address_line2 AS BusinessAddress2,
        ''::varchar AS BusinessAddress3,
        rep.business_city AS BusinessAddressCity,
        rep.business_state AS BusinessAddressState,
        rep.business_zip AS BusinessZip,
        rep.business_country AS BusinessAddressCtry,
        'Active'::varchar(6) AS BusinessAddressStatus,
        rep.shipping_address_line1 AS ShippingAddress1,
        rep.shipping_address_line2 AS ShippingAddress2,
        ''::varchar AS ShippingAddress3,
        rep.shipping_city AS ShippingAddressCity,
        rep.shipping_state AS ShippingAddressState,
        rep.shipping_zip AS ShippingZip,
        rep.shipping_country AS ShippingAddressCtry,
        'Active'::varchar(6) AS ShippingAddressStatus,
        rep.samplestorage_address_line1 AS SampleStorageAddress1,
        rep.samplestorage_address_line2 AS SampleStorageAddress2,
        rep.samplestorage_address_line3 AS SampleStorageAddress3,
        rep.samplestorage_city AS SampleStorageAddressCity,
        rep.samplestorage_state AS SampleStorageAddressState,
        rep.samplestorage_zip AS SampleStorageAddressZip,
        rep.samplestorage_country AS SampleStorageAddressCtry,
        'Active'::varchar(6) AS SampleStorageAddressStatus,
        rep.business_phone AS BusinessPhone,
        rep.mobile_phone AS MobilePhone,
        rep.home_phone AS HomePhone,
        rep.hire_date AS HireDate,
        rep.username AS LoginID,
        'Primary'::varchar(7) AS TerritoryAssignment,
        substr(('0'::varchar(1) || rep.birth_month_day), ((length(('0'::varchar(1) || rep.birth_month_day)) - 4) + 1), 4) AS BirthMonthDay
 FROM (datamart.roster rep LEFT  JOIN datamart.roster mgr ON ((mgr.employee_id = rep.mngr_employee_id)))
 WHERE ((rep.employee_id IS NOT NULL) AND (rep.hr_status = 'Active'::varchar(6)) AND (rep.territory_number IS NOT NULL) AND (rep.sales_force_id <> ALL (ARRAY['TWH'::varchar(3), 'TX'::varchar(2)])) AND (rep.calculated_rep_type <> 'CONTRACT'::varchar(8)))
 GROUP BY rep.employee_id,
          rep.territory_number,
          rep.territory_name,
          rep.sales_force_id,
          rep.first_name,
          rep.middle_name,
          rep.preferred_name,
          rep.last_name,
          replace(((((rep.first_name || ' '::varchar(1)) || coalesce(rep.middle_name, ''::varchar)) || ' '::varchar(1)) || rep.last_name), '  '::varchar(2), ' '::varchar(1)),
          rep.title,
          rep.hr_status,
          CASE WHEN (upper(rep.reg_contract) = 'EX'::varchar(2)) THEN 'Contract'::varchar(8) ELSE rep.rep_type END,
          ''::varchar,
          rep.email,
          mgr.employee_id,
          mgr.first_name,
          coalesce(mgr.middle_name, ''::varchar),
          mgr.last_name,
          replace(((((mgr.first_name || ' '::varchar(1)) || coalesce(mgr.middle_name, ''::varchar)) || ' '::varchar(1)) || mgr.last_name), '  '::varchar(2), ' '::varchar(1)),
          rep.business_address_line1,
          rep.business_address_line2,
          rep.business_city,
          rep.business_state,
          rep.business_zip,
          rep.business_country,
          'Active'::varchar(6),
          rep.shipping_address_line1,
          rep.shipping_address_line2,
          rep.shipping_city,
          rep.shipping_state,
          rep.shipping_zip,
          rep.shipping_country,
          rep.samplestorage_address_line1,
          rep.samplestorage_address_line2,
          rep.samplestorage_address_line3,
          rep.samplestorage_city,
          rep.samplestorage_state,
          rep.samplestorage_zip,
          rep.samplestorage_country,
          rep.business_phone,
          rep.mobile_phone,
          rep.home_phone,
          rep.hire_date,
          rep.username,
          'Primary'::varchar(7),
          substr(('0'::varchar(1) || rep.birth_month_day), ((length(('0'::varchar(1) || rep.birth_month_day)) - 4) + 1), 4);

CREATE  VIEW outbound.zzz_asi_rx_by_market_onc AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        coalesce(rx.payer_plan_number, 'NOPLANCODE'::varchar(10)) AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_001,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_002,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_003,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_004,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_005,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_006,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_007,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_008,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_009,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_010,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_011,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_012,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_013,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_014,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_015,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_016,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_017,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_018,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_019,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_020,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_021,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_022,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_023,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.nrx_count ELSE NULL::numeric(18,3) END) AS nrx_024,
        sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_001,
        sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_002,
        sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_003,
        sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_004,
        sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_005,
        sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_006,
        sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_007,
        sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_008,
        sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_009,
        sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_010,
        sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_011,
        sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_012,
        sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_013,
        sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_014,
        sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_015,
        sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_016,
        sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_017,
        sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_018,
        sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_019,
        sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_020,
        sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_021,
        sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_022,
        sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_023,
        sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE NULL::numeric(18,3) END) AS trx_024
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT ims_week_buckets.month_ending,
        ims_week_buckets.month_bucket
 FROM integration.ims_week_buckets
 GROUP BY ims_week_buckets.month_ending,
          ims_week_buckets.month_bucket) mth ON ((rx.rollup_month = mth.month_ending))) JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number <=> axd.ims_client_number) AND (rx.ims_report_number_cnt <=> axd.ims_report_number) AND (rx.ims_id <=> axd.ims_id) AND (rx.ims_product_group <=> axd.ims_product_group) AND (rx.ims_specialty <=> axd.ims_specialty) AND (rx.ims_zip_other <=> axd.ims_zip_other))))
 WHERE ((rx.rollup_flag IS NULL) AND (rx.ims_client_number = '994'::varchar(3)) AND (rx.ims_report_number_cnt = '18'::varchar(2)) AND (rx.ims_report_number_qty = '17'::varchar(2)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.zs_access_monitor_control_file_oncology AS
 SELECT 'TEVA'::varchar(4) AS company,
        c.sales_force_id,
        c.sales_force_id AS sales_team,
        count(DISTINCT c.rep_id) AS num_reps,
        count(DISTINCT c.territory_num) AS num_terrs,
        sum(c.p1_calls_mth1) AS p1_calls_mth1,
        sum(c.p1_calls_mth2) AS p1_calls_mth2,
        sum(c.p1_calls_mth3) AS p1_calls_mth3,
        sum(c.p1_calls_mth4) AS p1_calls_mth4,
        sum(c.p1_calls_mth5) AS p1_calls_mth5,
        sum(c.p1_calls_mth6) AS p1_calls_mth6,
        sum(cp.plan_calls) AS total_planned_calls,
        count(c.tvcmid) AS total_records
 FROM ((( SELECT c.sales_force_id,
        c.territory_num,
        c.rep_id,
        c.tvcmid,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6
 FROM ( SELECT c.sales_force_id,
        c.tvcmid,
        c.territory_number AS territory_num,
        c.rep_id,
        d.product,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(1) AS pri_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1))
 GROUP BY c.sales_force_id,
          c.tvcmid,
          c.territory_number,
          c.rep_id,
          d.product,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.sales_force_id,
          c.territory_num,
          c.rep_id,
          c.tvcmid) c JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT cp.tvcmid,
        sum(cp.p1) AS plan_calls
 FROM datamart.call_plan cp
 WHERE (cp.sales_force_id = 'TO'::varchar(2))
 GROUP BY cp.tvcmid) cp ON ((c.tvcmid = cp.tvcmid)))
 WHERE (c.sales_force_id = 'TO'::varchar(2))
 GROUP BY c.sales_force_id;

CREATE  VIEW outbound.zs_access_monitor_control_file_cns AS
 SELECT 'TEVA'::varchar(4) AS company,
        d.sales_force_id,
        d.sales_force_id AS sales_team,
        count(DISTINCT d.rep_id) AS num_reps,
        count(DISTINCT d.territory_number) AS num_terrs,
        sum(d.p1_calls_mth1) AS p1_calls_mth1,
        sum(d.p1_calls_mth2) AS p1_calls_mth2,
        sum(d.p1_calls_mth3) AS p1_calls_mth3,
        sum(d.p1_calls_mth4) AS p1_calls_mth4,
        sum(d.p1_calls_mth5) AS p1_calls_mth5,
        sum(d.p1_calls_mth6) AS p1_calls_mth6,
        sum(d.plan_calls) AS total_planned_calls,
        count(d.tvcmid) AS total_records
 FROM ( SELECT calls_by_detail.sales_force_id,
        calls_by_detail.territory_number,
        calls_by_detail.rep_id,
        calls_by_detail.tvcmid,
        calls_by_detail.p1_calls_mth1,
        calls_by_detail.p1_calls_mth2,
        calls_by_detail.p1_calls_mth3,
        calls_by_detail.p1_calls_mth4,
        calls_by_detail.p1_calls_mth5,
        calls_by_detail.p1_calls_mth6,
        0 AS plan_calls
 FROM ( SELECT c.sales_force_id,
        c.territory_number,
        c.rep_id,
        c.tvcmid,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6
 FROM ( SELECT c.sales_force_id,
        c.tvcmid,
        c.territory_number,
        c.rep_id,
        d.product,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(1) AS pri_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1))
 GROUP BY c.sales_force_id,
          c.tvcmid,
          c.territory_number,
          c.rep_id,
          d.product,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.sales_force_id,
          c.territory_number,
          c.rep_id,
          c.tvcmid) calls_by_detail UNION  SELECT cp.sales_force_id,
        NULL AS territory_number,
        NULL AS rep_id,
        0 AS tvcmid,
        0 AS p1_calls_mth1,
        0 AS p1_calls_mth2,
        0 AS p1_calls_mth3,
        0 AS p1_calls_mth4,
        0 AS p1_calls_mth5,
        0 AS p1_calls_mth6,
        cp.plan_calls
 FROM ( SELECT cp.sales_force_id,
        sum(cp.p1) AS plan_calls
 FROM datamart.call_plan cp
 WHERE (cp.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)]))
 GROUP BY cp.sales_force_id) cp) d
 GROUP BY d.sales_force_id;

CREATE  VIEW outbound.zs_access_monitor_control_file_respiratory AS
 SELECT 'TEVA'::varchar(4) AS company,
        d.sales_force_id,
        d.sales_force_id AS sales_team,
        count(DISTINCT d.rep_id) AS num_reps,
        count(DISTINCT d.territory_number) AS num_terrs,
        sum(d.p1_calls_mth1) AS p1_calls_mth1,
        sum(d.p1_calls_mth2) AS p1_calls_mth2,
        sum(d.p1_calls_mth3) AS p1_calls_mth3,
        sum(d.p1_calls_mth4) AS p1_calls_mth4,
        sum(d.p1_calls_mth5) AS p1_calls_mth5,
        sum(d.p1_calls_mth6) AS p1_calls_mth6,
        sum(d.plan_calls) AS total_planned_calls,
        count(d.tvcmid) AS total_records
 FROM ( SELECT calls_by_detail.sales_force_id,
        calls_by_detail.territory_number,
        calls_by_detail.rep_id,
        calls_by_detail.tvcmid,
        calls_by_detail.p1_calls_mth1,
        calls_by_detail.p1_calls_mth2,
        calls_by_detail.p1_calls_mth3,
        calls_by_detail.p1_calls_mth4,
        calls_by_detail.p1_calls_mth5,
        calls_by_detail.p1_calls_mth6,
        0 AS plan_calls
 FROM ( SELECT c.sales_force_id,
        c.territory_number,
        c.rep_id,
        c.tvcmid,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6
 FROM ( SELECT c.sales_force_id,
        c.tvcmid,
        c.territory_number,
        c.rep_id,
        d.product,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(1) AS pri_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1))
 GROUP BY c.sales_force_id,
          c.tvcmid,
          c.territory_number,
          c.rep_id,
          d.product,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.sales_force_id,
          c.territory_number,
          c.rep_id,
          c.tvcmid) calls_by_detail UNION  SELECT cp.sales_force_id,
        NULL AS territory_number,
        NULL AS rep_id,
        0 AS tvcmid,
        0 AS p1_calls_mth1,
        0 AS p1_calls_mth2,
        0 AS p1_calls_mth3,
        0 AS p1_calls_mth4,
        0 AS p1_calls_mth5,
        0 AS p1_calls_mth6,
        cp.plan_calls
 FROM ( SELECT cp.sales_force_id,
        sum(cp.p1) AS plan_calls
 FROM datamart.call_plan cp
 WHERE (cp.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)]))
 GROUP BY cp.sales_force_id) cp) d
 GROUP BY d.sales_force_id;

CREATE  VIEW outbound.zs_access_monitor_calls_by_specialty_cns AS
SELECT 'TEVA'::varchar(4) AS company, x.specialty_code, d.prim_specialty, count(DISTINCT c.tvcmid) AS number_of_physicians_6mth FROM (((SELECT sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE (sfa_demographics.ims_id IS NOT NULL) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.tvcmid FROM datamart.sfa_call c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01))) GROUP BY c.tvcmid) c ON ((d.tvcmid = c.tvcmid))) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) GROUP BY d.prim_specialty, x.specialty_code ORDER BY x.specialty_code;

CREATE  VIEW outbound.zs_access_monitor_no_contact_respiratory AS
 SELECT a.sales_force_id,
        b.me__c AS me_number,
        a.npi,
        b.id AS veeva_id,
        a.tvcmid,
        a.ims_id
 FROM (datamart.sfa_demographics a JOIN veeva.account b ON ((a.veeva_account_id = b.id)))
 WHERE ((b.no_contact_tva__c IS NOT NULL) AND (a.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])))
 GROUP BY a.sales_force_id,
          b.me__c,
          a.npi,
          b.id,
          a.tvcmid,
          a.ims_id
 ORDER BY b.me__c;

CREATE  VIEW outbound.zs_access_monitor_detailed_data_cns AS
SELECT 'TEVA'::varchar(4) AS company, c.sales_force_id, c.territory_num, NULL AS me_number, d.npi, d.VEEVA_ACCOUNT_ID AS veeva_account_id, c.tvcmid, d.ims_id, to_char(c.call_date, 'mm/dd/yyyy'::varchar(10)) AS call_date, c.basket_id AS product_id, c.product AS product_name, c.detail_position AS "position", d.ZIP AS physician_zip, x.specialty_code FROM ((((SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE ((sfa_demographics.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) AND (sfa_demographics.ims_id IS NOT NULL)) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.sales_force_id, c.tvcmid, c.territory_number AS territory_num, c.rep_id, d.basket_id, d.product, c.call_date, d.detail_position FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.sales_force_id, c.tvcmid, c.territory_number, c.rep_id, d.basket_id, d.product, c.call_date, d.detail_position) c ON (((d.tvcmid = c.tvcmid) AND (d.territory_num = c.territory_num)))) JOIN (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m ON (true)) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) WHERE (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) GROUP BY 'TEVA'::varchar(4), c.sales_force_id, c.territory_num, NULL, d.npi, d.VEEVA_ACCOUNT_ID, c.tvcmid, d.ims_id, to_char(c.call_date, 'mm/dd/yyyy'::varchar(10)), c.basket_id, c.product, c.detail_position, d.ZIP, x.specialty_code;

CREATE  VIEW outbound.zs_access_monitor_detailed_data_oncology AS
SELECT 'TEVA'::varchar(4) AS company, c.sales_force_id, c.territory_num, NULL AS me_number, d.npi, d.VEEVA_ACCOUNT_ID AS veeva_account_id, c.tvcmid, d.ims_id, to_char(c.call_date, 'mm/dd/yyyy'::varchar(10)) AS call_date, c.basket_id AS product_id, c.product AS product_name, c.detail_position AS "position", d.ZIP AS physician_zip, x.specialty_code FROM ((((SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL)) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.sales_force_id, c.tvcmid, c.territory_number AS territory_num, c.rep_id, d.basket_id, d.product, c.call_date, d.detail_position FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.sales_force_id, c.tvcmid, c.territory_number, c.rep_id, d.basket_id, d.product, c.call_date, d.detail_position) c ON (((d.tvcmid = c.tvcmid) AND (d.territory_num = c.territory_num)))) JOIN (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m ON (true)) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) WHERE (c.sales_force_id = 'TO'::varchar(2)) GROUP BY 'TEVA'::varchar(4), c.sales_force_id, c.territory_num, NULL, d.npi, d.VEEVA_ACCOUNT_ID, c.tvcmid, d.ims_id, to_char(c.call_date, 'mm/dd/yyyy'::varchar(10)), c.basket_id, c.product, c.detail_position, d.ZIP, x.specialty_code;

CREATE  VIEW outbound.zs_access_monitor_detailed_data_respiratory AS
SELECT 'TEVA'::varchar(4) AS company, c.sales_force_id, c.territory_num, NULL AS me_number, d.npi, d.VEEVA_ACCOUNT_ID AS veeva_account_id, c.tvcmid, d.ims_id, to_char(c.call_date, 'mm/dd/yyyy'::varchar(10)) AS call_date, c.basket_id AS product_id, c.product AS product_name, c.detail_position AS "position", d.ZIP AS physician_zip, x.specialty_code FROM ((((SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE ((sfa_demographics.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (sfa_demographics.ims_id IS NOT NULL)) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.sales_force_id, c.tvcmid, c.veeva_account_id, c.territory_number AS territory_num, c.rep_id, d.basket_id, d.product, c.call_date, d.detail_position FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.sales_force_id, c.tvcmid, c.veeva_account_id, c.territory_number, c.rep_id, d.basket_id, d.product, c.call_date, d.detail_position) c ON (((d.tvcmid = c.tvcmid) AND (d.territory_num = c.territory_num)))) JOIN (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m ON (true)) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) WHERE (c.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) GROUP BY 'TEVA'::varchar(4), c.sales_force_id, c.territory_num, NULL, d.npi, d.VEEVA_ACCOUNT_ID, c.tvcmid, d.ims_id, to_char(c.call_date, 'mm/dd/yyyy'::varchar(10)), c.basket_id, c.product, c.detail_position, d.ZIP, x.specialty_code;

CREATE  VIEW outbound.tp_physician_univ AS
 SELECT x.npi,
        x.dea_num,
        x.last_name,
        x.first_name,
        x.middle_name,
        x.address,
        x.city,
        x.state,
        x.zip
 FROM ( SELECT dc.npi,
        dc.dea_num,
        upper(dc.last_name) AS last_name,
        upper(dc.first_name) AS first_name,
        upper(dc.middle_name) AS middle_name,
        btrim(upper(((((coalesce(dc.ptr_address_1, ''::varchar) || ' '::varchar(1)) || coalesce(dc.ptr_address_2, ''::varchar)) || ' '::varchar(1)) || coalesce(dc.ptr_address_3, ''::varchar)))) AS address,
        upper(dc.ptr_city) AS city,
        dc.ptr_state AS state,
        dc.ptr_zip AS zip,
        row_number() OVER (PARTITION BY dc.sales_force_id, dc.npi ORDER BY dc.ptr_territory_num) AS rnk
 FROM datamart.prescriber_combined_demographics dc
 WHERE ((dc.ims_id IS NOT NULL) AND (dc.npi IS NOT NULL) AND (dc.sales_force_id = 'TP'::varchar(2)))) x
 WHERE (x.rnk = 1);

CREATE  VIEW outbound.zzz_asi_market_access_m AS
(SELECT coalesce(d.zip, o.zip, pcd.ptr_zip) AS zip, coalesce(d.state, o.state, pcd.ptr_state) AS state, rx.payer_plan_number AS payer_plan_num, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END AS report_num, rx.ims_product_group AS ims_product_group_num, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) AS data_month, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (rx.date = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (((datamart.prescriber_rx rx LEFT JOIN (SELECT hcp_demo.tvcmid, hcp_demo.state_code AS state, hcp_demo.zip FROM datamart.customer_hcp_demographics hcp_demo) d ON ((rx.tvcmid = d.tvcmid))) LEFT JOIN (SELECT hco_demo.tvcmid, hco_demo.state_code AS state, hco_demo.zip FROM datamart.customer_hco_demographics hco_demo) o ON ((rx.tvcmid = o.tvcmid))) LEFT JOIN (SELECT rnk.ims_id, rnk.ptr_state, rnk.ptr_zip FROM (SELECT DISTINCT prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source) AS rnk FROM datamart.prescriber_combined_demographics ORDER BY prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source)) rnk WHERE (rnk.rnk = 1)) pcd ON ((pcd.ims_id = rx.ims_id))) WHERE ((rx.ims_report_number_cnt = ANY (ARRAY['2'::varchar(1), '6'::varchar(1), '14'::varchar(2), '16'::varchar(2), '81'::varchar(2)])) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'MONTH'::varchar(5))) GROUP BY coalesce(d.zip, o.zip, pcd.ptr_zip), coalesce(d.state, o.state, pcd.ptr_state), rx.payer_plan_number, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END, rx.ims_product_group, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) UNION ALL SELECT sp.ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END AS payer_plan_num, '55'::varchar(2) AS report_num, pg.ims_product_group AS ims_product_group_num, (SELECT to_char(month_rollup_and_bucket.month_ending, 'MM/YYYY'::varchar(7)) AS to_char FROM outbound.month_rollup_and_bucket WHERE (month_rollup_and_bucket.month_bucket = 1)) AS data_month, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((datamart.specialty_pharmacy_shipment sp JOIN outbound.month_rollup_and_bucket mth ON ((last_day(sp.comp_month) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source) pg ON (((pg.basket_id = sp.basket_id) AND (pg.data_source = sp.specialty_pharmacy_data_source)))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['Prime Therapeutics'::varchar(18), 'Prime T'::varchar(7)])) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (sp.ims_id IS NOT NULL)) GROUP BY sp.ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END, pg.ims_product_group, (SELECT to_char(month_rollup_and_bucket.month_ending, 'MM/YYYY'::varchar(7)) AS to_char FROM outbound.month_rollup_and_bucket WHERE (month_rollup_and_bucket.month_bucket = 1))) UNION ALL SELECT sp.ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END AS payer_plan_num, '55'::varchar(2) AS report_num, pg.ims_product_group AS ims_product_group_num, (SELECT to_char(month_rollup_and_bucket.month_ending, 'MM/YYYY'::varchar(7)) AS to_char FROM outbound.month_rollup_and_bucket WHERE (month_rollup_and_bucket.month_bucket = 1)) AS data_month, NULL::float AS nrx_001, NULL::float AS nrx_002, NULL::float AS nrx_003, NULL::float AS nrx_004, NULL::float AS nrx_005, NULL::float AS nrx_006, NULL::float AS nrx_007, NULL::float AS nrx_008, NULL::float AS nrx_009, NULL::float AS nrx_010, NULL::float AS nrx_011, NULL::float AS nrx_012, NULL::float AS nrx_013, NULL::float AS nrx_014, NULL::float AS nrx_015, NULL::float AS nrx_016, NULL::float AS nrx_017, NULL::float AS nrx_018, NULL::float AS nrx_019, NULL::float AS nrx_020, NULL::float AS nrx_021, NULL::float AS nrx_022, NULL::float AS nrx_023, NULL::float AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN sp.trx_cnt ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN sp.trx_cnt ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN sp.trx_cnt ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN sp.trx_cnt ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN sp.trx_cnt ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN sp.trx_cnt ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN sp.trx_cnt ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN sp.trx_cnt ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN sp.trx_cnt ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN sp.trx_cnt ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN sp.trx_cnt ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN sp.trx_cnt ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN sp.trx_cnt ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN sp.trx_cnt ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN sp.trx_cnt ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN sp.trx_cnt ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN sp.trx_cnt ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN sp.trx_cnt ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN sp.trx_cnt ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN sp.trx_cnt ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN sp.trx_cnt ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN sp.trx_cnt ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN sp.trx_cnt ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN sp.trx_cnt ELSE NULL::float END) AS trx_024 FROM ((datamart.specialty_pharmacy_shipment sp JOIN outbound.month_rollup_and_bucket mth ON ((last_day(sp.ship_date) = mth.month_ending))) JOIN (SELECT asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source FROM reference.asi_outbound_ims_product_group_mapping WHERE (asi_outbound_ims_product_group_mapping.market_name = 'MS MARKET'::varchar(9)) GROUP BY asi_outbound_ims_product_group_mapping.basket_id, asi_outbound_ims_product_group_mapping.market_name, asi_outbound_ims_product_group_mapping.ims_product_group, asi_outbound_ims_product_group_mapping.data_source) pg ON (((pg.basket_id = sp.basket_id) AND (pg.data_source = sp.specialty_pharmacy_data_source)))) WHERE ((sp.specialty_pharmacy_data_source = ANY (ARRAY['OptumRx'::varchar(7), 'OptumRx'::varchar(7)])) AND (mth.month_bucket >= 1) AND (mth.month_bucket <= 24) AND (sp.ims_id IS NOT NULL)) GROUP BY sp.ship_to_zip, sp.ship_to_state, CASE WHEN (pg.market_name = 'MS MARKET'::varchar(9)) THEN CASE WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id <> 572)) THEN 'I3'::varchar(2) WHEN ((sp.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (sp.basket_id = 572)) THEN 'I3TYS'::varchar(5) WHEN (sp.specialty_pharmacy_data_source = 'Prime Therapeutics'::varchar(18)) THEN 'PRIME'::varchar(5) ELSE NULL END ELSE NULL END, pg.ims_product_group, (SELECT to_char(month_rollup_and_bucket.month_ending, 'MM/YYYY'::varchar(7)) AS to_char FROM outbound.month_rollup_and_bucket WHERE (month_rollup_and_bucket.month_bucket = 1));

CREATE  VIEW outbound.zzz_create_copay_voucher_program AS
 SELECT copay_voucher_program.redemption_type AS REDEMPTION_TYPE,
        copay_voucher_program.program_number AS ASI_PROGRAM_NUM,
        copay_voucher_program.program_description AS PROGRAM_DESC,
        NULL AS SALES_FORCE_ID,
        NULL AS PROGRAM_TYPE,
        NULL AS PRODUCT_NAME,
        NULL AS PROGRAM_START_DATE,
        NULL AS PROGRAM_END_DATE,
        NULL AS NUMBER_OF_TABLETS
 FROM reference.copay_voucher_program;

CREATE  VIEW outbound.i_bag_territory_product AS
( SELECT i_bag_territory_product_terr.territory_number,
        i_bag_territory_product_terr.bag_name,
        i_bag_territory_product_terr."position",
        i_bag_territory_product_terr.basket_name
 FROM ( SELECT bt.territory_number,
        b.bag_name,
        bp."position",
        bp.basket_name
 FROM ((reference.bag b JOIN reference.bag_territory bt ON ((b.bag_id = bt.bag_id))) JOIN reference.bag_product bp ON ((b.bag_id = bp.bag_id)))
 WHERE (((statement_timestamp())::timestamp >= b.first_valid_date) AND ((statement_timestamp())::timestamp <= b.last_valid_date) AND ((statement_timestamp())::timestamp >= bt.detail_first_valid_date) AND ((statement_timestamp())::timestamp <= bt.detail_last_valid_date))) i_bag_territory_product_terr UNION  SELECT i_bag_territory_product_mgr.territory_number,
        i_bag_territory_product_mgr.bag_name,
        i_bag_territory_product_mgr."position",
        i_bag_territory_product_mgr.basket_name
 FROM ( SELECT m.territory_number,
        (m.sales_force_id || 'MGR'::varchar(3)) AS bag_name,
        row_number() OVER (PARTITION BY m.territory_number ORDER BY p.basket_name) AS "position",
        p.basket_name
 FROM (( SELECT substr(i_bag_territory_product_terr.territory_number, 1, 2) AS sales_force_id,
        i_bag_territory_product_terr.basket_name
 FROM ( SELECT bt.territory_number,
        b.bag_name,
        bp."position",
        bp.basket_name
 FROM ((reference.bag b JOIN reference.bag_territory bt ON ((b.bag_id = bt.bag_id))) JOIN reference.bag_product bp ON ((b.bag_id = bp.bag_id)))
 WHERE (((statement_timestamp())::timestamp >= b.first_valid_date) AND ((statement_timestamp())::timestamp <= b.last_valid_date) AND ((statement_timestamp())::timestamp >= bt.detail_first_valid_date) AND ((statement_timestamp())::timestamp <= bt.detail_last_valid_date))) i_bag_territory_product_terr
 GROUP BY substr(i_bag_territory_product_terr.territory_number, 1, 2),
          i_bag_territory_product_terr.basket_name) p JOIN ( SELECT substr(i_bag_territory_product_terr.territory_number, 1, 2) AS sales_force_id,
        (substr(i_bag_territory_product_terr.territory_number, 1, 6) || '00'::varchar(2)) AS territory_number
 FROM ( SELECT bt.territory_number,
        b.bag_name,
        bp."position",
        bp.basket_name
 FROM ((reference.bag b JOIN reference.bag_territory bt ON ((b.bag_id = bt.bag_id))) JOIN reference.bag_product bp ON ((b.bag_id = bp.bag_id)))
 WHERE (((statement_timestamp())::timestamp >= b.first_valid_date) AND ((statement_timestamp())::timestamp <= b.last_valid_date) AND ((statement_timestamp())::timestamp >= bt.detail_first_valid_date) AND ((statement_timestamp())::timestamp <= bt.detail_last_valid_date))) i_bag_territory_product_terr
 GROUP BY substr(i_bag_territory_product_terr.territory_number, 1, 2),
          (substr(i_bag_territory_product_terr.territory_number, 1, 6) || '00'::varchar(2))) m ON ((p.sales_force_id = m.sales_force_id)))) i_bag_territory_product_mgr) UNION  SELECT terrs.territory_number,
        NULL AS bag_name,
        (90 + row_number() OVER (PARTITION BY terrs.territory_number ORDER BY sfpm.PRODUCT_NAME)) AS "position",
        sfpm.PRODUCT_NAME AS product_name
 FROM (reference.sales_force_product_metrics sfpm JOIN ( SELECT i_bag_territory_product_terr.territory_number
 FROM ( SELECT bt.territory_number,
        b.bag_name,
        bp."position",
        bp.basket_name
 FROM ((reference.bag b JOIN reference.bag_territory bt ON ((b.bag_id = bt.bag_id))) JOIN reference.bag_product bp ON ((b.bag_id = bp.bag_id)))
 WHERE (((statement_timestamp())::timestamp >= b.first_valid_date) AND ((statement_timestamp())::timestamp <= b.last_valid_date) AND ((statement_timestamp())::timestamp >= bt.detail_first_valid_date) AND ((statement_timestamp())::timestamp <= bt.detail_last_valid_date))) i_bag_territory_product_terr UNION  SELECT i_bag_territory_product_mgr.territory_number
 FROM ( SELECT m.territory_number,
        (m.sales_force_id || 'MGR'::varchar(3)) AS bag_name,
        row_number() OVER (PARTITION BY m.territory_number ORDER BY p.basket_name) AS "position",
        p.basket_name
 FROM (( SELECT substr(i_bag_territory_product_terr.territory_number, 1, 2) AS sales_force_id,
        i_bag_territory_product_terr.basket_name
 FROM ( SELECT bt.territory_number,
        b.bag_name,
        bp."position",
        bp.basket_name
 FROM ((reference.bag b JOIN reference.bag_territory bt ON ((b.bag_id = bt.bag_id))) JOIN reference.bag_product bp ON ((b.bag_id = bp.bag_id)))
 WHERE (((statement_timestamp())::timestamp >= b.first_valid_date) AND ((statement_timestamp())::timestamp <= b.last_valid_date) AND ((statement_timestamp())::timestamp >= bt.detail_first_valid_date) AND ((statement_timestamp())::timestamp <= bt.detail_last_valid_date))) i_bag_territory_product_terr
 GROUP BY substr(i_bag_territory_product_terr.territory_number, 1, 2),
          i_bag_territory_product_terr.basket_name) p JOIN ( SELECT substr(i_bag_territory_product_terr.territory_number, 1, 2) AS sales_force_id,
        (substr(i_bag_territory_product_terr.territory_number, 1, 6) || '00'::varchar(2)) AS territory_number
 FROM ( SELECT bt.territory_number,
        b.bag_name,
        bp."position",
        bp.basket_name
 FROM ((reference.bag b JOIN reference.bag_territory bt ON ((b.bag_id = bt.bag_id))) JOIN reference.bag_product bp ON ((b.bag_id = bp.bag_id)))
 WHERE (((statement_timestamp())::timestamp >= b.first_valid_date) AND ((statement_timestamp())::timestamp <= b.last_valid_date) AND ((statement_timestamp())::timestamp >= bt.detail_first_valid_date) AND ((statement_timestamp())::timestamp <= bt.detail_last_valid_date))) i_bag_territory_product_terr
 GROUP BY substr(i_bag_territory_product_terr.territory_number, 1, 2),
          (substr(i_bag_territory_product_terr.territory_number, 1, 6) || '00'::varchar(2))) m ON ((p.sales_force_id = m.sales_force_id)))) i_bag_territory_product_mgr) terrs ON ((terrs.territory_number ~~ (sfpm.SALES_FORCE_ID || '%'::varchar(1)))));

CREATE  VIEW outbound.mdm_hcp AS
 SELECT 'OPTMRX'::varchar(6) AS dsp_id,
        substr(replace((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100) AS dsp_hce_id,
        specialty_pharmacy_shipment.physician_first_name AS first_name,
        specialty_pharmacy_shipment.physician_middle_name AS middle_name,
        specialty_pharmacy_shipment.physician_last_name AS last_name,
        NULL AS prefix,
        NULL AS suffix,
        '1'::varchar(50) AS sub_type,
        NULL AS status_code,
        NULL::date AS year_of_birth,
        NULL::date AS year_of_death,
        NULL AS gender_code,
        NULL AS teva_specialty_code
 FROM datamart.specialty_pharmacy_shipment
 WHERE ((specialty_pharmacy_shipment.specialty_pharmacy_data_source = 'OptumRx'::varchar(7)) AND (specialty_pharmacy_shipment.customer_type = 'HCP'::varchar(3)))
 GROUP BY 'OPTMRX'::varchar(6),
          substr(replace((coalesce(specialty_pharmacy_shipment.source_customer_id, ''::varchar) || coalesce(specialty_pharmacy_shipment.customer_name, ''::varchar)), ' '::varchar(1), ''::varchar), 1, 100),
          specialty_pharmacy_shipment.physician_first_name,
          specialty_pharmacy_shipment.physician_middle_name,
          specialty_pharmacy_shipment.physician_last_name,
          NULL,
          '1'::varchar(50),
          NULL::date UNION  SELECT a.dsp_id,
        substr(a.dsp_hce_id, 1, 100) AS dsp_hce_id,
        a.first_name,
        a.middle_name,
        a.last_name,
        a.prefix,
        a.suffix,
        a.sub_type,
        a.status_code,
        a.year_of_birth,
        a.year_of_death,
        a.gender_code,
        a.teva_specialty_code
 FROM ( SELECT 'PT'::varchar(2) AS dsp_id,
        replace(((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name), ' '::varchar(1), ''::varchar) AS dsp_hce_id,
        prime_rx.md_first_name AS first_name,
        NULL AS middle_name,
        prime_rx.md_last_name AS last_name,
        NULL AS prefix,
        NULL AS suffix,
        '1'::varchar(50) AS sub_type,
        NULL AS status_code,
        NULL::date AS year_of_birth,
        NULL::date AS year_of_death,
        NULL AS gender_code,
        NULL AS teva_specialty_code
 FROM cleansed.prime_rx
 GROUP BY 'PT'::varchar(2),
          replace(((coalesce(prime_rx.prescriber_npi, ''::varchar) || prime_rx.md_last_name) || prime_rx.md_first_name), ' '::varchar(1), ''::varchar),
          prime_rx.md_first_name,
          NULL,
          prime_rx.md_last_name,
          '1'::varchar(50),
          NULL::date) a
 ORDER BY 1,
          2,
          3;

CREATE  VIEW outbound.sharepoint_roster_to AS
 SELECT sr.title,
        sr.territory
 FROM ( SELECT lower(r.username) AS title,
        r.territory_number AS territory
 FROM datamart.roster r
 WHERE ((r.username IS NOT NULL) AND (r.sales_force_id = 'TO'::varchar(2))) UNION  SELECT lower(r.username) AS title,
        (r.employee_id || '_'::varchar(1)) AS territory
 FROM datamart.roster r
 WHERE ((r.username IS NOT NULL) AND (r.sales_force_id = 'TO'::varchar(2)))) sr
 GROUP BY sr.title,
          sr.territory
 ORDER BY sr.title;

CREATE  VIEW outbound.zs_antimigraine_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.rollup_month,
        prescriber_rx.sales_category,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payer_name,
        prescriber_rx.plan_name,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.model,
        prescriber_rx.payment_method
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = 'ANTI-MIGRAINE MARKET'::varchar(20)) AND ((prescriber_rx.basket_name ~~ 'AIMOVIG%'::varchar(8)) OR (prescriber_rx.basket_name ~~ 'EMGALITY%'::varchar(9)) OR (prescriber_rx.basket_name ~~ 'AJOVY%'::varchar(6))) AND (prescriber_rx.rollup_flag IS NULL))
 ORDER BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.rollup_month,
          prescriber_rx.sales_category,
          prescriber_rx.payer_plan_number;

CREATE  VIEW outbound.zs_ajovy_activity_sample_request AS
 SELECT sfa_sample.sample_id,
        sfa_sample.call_id,
        sfa_sample.veeva_account_id,
        sfa_sample.ims_id,
        sfa_sample.call_date,
        sfa_sample.sales_force_id,
        sfa_sample.territory_number,
        sfa_sample.call_type,
        sfa_sample.attendee_type,
        sfa_sample.customer_type,
        sfa_sample.sample_type,
        sfa_sample.product_name,
        sfa_sample.sample_name,
        sfa_sample.sample_ndc,
        sfa_sample.basket_id,
        sfa_sample.basket_name,
        sfa_sample.qty,
        sfa_sample.zip_on_call,
        sfa_sample.employee_number,
        sfa_sample.tvcmid
 FROM datamart.sfa_sample
 WHERE ((sfa_sample.basket_name ~~ 'AJOVY%'::varchar(6)) AND (sfa_sample.sample_type = 'REQUEST'::varchar(7)))
 ORDER BY sfa_sample.call_date;

CREATE  VIEW outbound.connectiverx_ajovy_demographics AS
 SELECT a.sales_force_id,
        a.ptr_territory_num AS terr,
        b.reg,
        b.area,
        a.ims_id,
        a.npi,
        a.first_name,
        a.last_name,
        a.ptr_city,
        a.ptr_state,
        a.ptr_zip,
        a.specialty
 FROM datamart.prescriber_combined_demographics a, ( SELECT a.geography_number AS terr,
        b.geography_number AS reg,
        c.geography_number AS area
 FROM datamart.sales_geography a, datamart.sales_geography b, datamart.sales_geography c
 WHERE ((a.parent_geography_number = b.geography_number) AND (b.parent_geography_number = c.geography_number) AND (a.geography_type = 'Territory'::varchar(9)) AND (b.geography_type = 'Region'::varchar(6)) AND (c.geography_type = 'Area'::varchar(4)) AND (a.sales_force_id = ANY (ARRAY['TR'::varchar(2), 'TN'::varchar(2), 'TE'::varchar(2)])))
 GROUP BY a.geography_number,
          b.geography_number,
          c.geography_number) b
 WHERE ((a.ptr_territory_num = b.terr) AND (a.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TR'::varchar(2), 'TE'::varchar(2)])))
 GROUP BY a.sales_force_id,
          a.ptr_territory_num,
          b.reg,
          b.area,
          a.ims_id,
          a.npi,
          a.first_name,
          a.last_name,
          a.ptr_city,
          a.ptr_state,
          a.ptr_zip,
          a.specialty
 ORDER BY a.sales_force_id,
          a.ims_id;

CREATE  VIEW outbound.aptus_hcp_ajovy AS
 SELECT p.territory_number,
        p.tvcmid,
        d.last_name,
        d.first_name,
        d.credentials AS professional_designation,
        CASE WHEN (d.address_line1 ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || d.address_line1) || '"'::varchar(1)) ELSE d.address_line1 END AS address_line1,
        CASE WHEN (d.address_line2 ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || d.address_line2) || '"'::varchar(1)) ELSE d.address_line2 END AS address_line2,
        CASE WHEN (d.city ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || d.city) || '"'::varchar(1)) ELSE d.city END AS city,
        d.state,
        d.zip
 FROM (datamart.sfa_promotional_items p JOIN datamart.sfa_demographics d ON (((p.veeva_account_id = d.veeva_account_id) AND (p.territory_number = d.territory_number))))
 WHERE ((p.item_name ~~ 'FRE-40475%'::varchar(10)) AND (p.tvcmid IS NOT NULL))
 GROUP BY p.territory_number,
          p.tvcmid,
          d.last_name,
          d.first_name,
          d.credentials,
          CASE WHEN (d.address_line1 ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || d.address_line1) || '"'::varchar(1)) ELSE d.address_line1 END,
          CASE WHEN (d.address_line2 ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || d.address_line2) || '"'::varchar(1)) ELSE d.address_line2 END,
          CASE WHEN (d.city ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || d.city) || '"'::varchar(1)) ELSE d.city END,
          d.state,
          d.zip
 ORDER BY d.last_name,
          d.first_name;

CREATE  VIEW outbound.mcm_hcp_segmentation AS
 SELECT y.federation_id,
        y.tvcmid,
        y.veeva_account_id,
        y.npi,
        y.ims_id,
        y.me_number,
        y.first_name,
        y.last_name,
        y.middle_name,
        y.personal_suffix,
        y.medical_suffix,
        y.address_line_1,
        y.address_line_2,
        y.city,
        y.state,
        y.zip_code,
        y.state_license_state,
        y.state_license_number,
        y.state_license_expiration_date,
        y.sample_eligibility_code,
        y.primary_specialty_code,
        y.primary_specialty_description,
        y.primary_specialty_group_code,
        y.np_pa_flag,
        y.created_date
 FROM ( SELECT rank() OVER (PARTITION BY x.tvcmid ORDER BY x.veeva_account_id DESC, x.me_number DESC, x.state_license_number DESC, x.npi DESC) AS rank,
        x.federation_id,
        x.tvcmid,
        x.veeva_account_id,
        x.npi,
        x.ims_id,
        x.me_number,
        x.first_name,
        x.last_name,
        x.middle_name,
        x.personal_suffix,
        x.medical_suffix,
        x.address_line_1,
        x.address_line_2,
        x.city,
        x.state,
        x.zip_code,
        x.zip_code_extension,
        x.state_license_state,
        x.state_license_number,
        x.state_license_expiration_date,
        x.sample_eligibility_code,
        x.primary_specialty_code,
        x.primary_specialty_description,
        x.primary_specialty_group_code,
        x.primary_specialty_group_description,
        x.np_pa_flag,
        x.created_date
 FROM ( SELECT cmid.id_num AS federation_id,
        pcd.tvcmid,
        pcd.veeva_account_id,
        CASE WHEN (chd.tvcmid IS NULL) THEN pcd.npi ELSE chd.npi END AS npi,
        CASE WHEN (chd.tvcmid IS NULL) THEN pcd.ims_id ELSE chd.ims_id END AS ims_id,
        hcos.me AS me_number,
        CASE WHEN (chd.tvcmid IS NULL) THEN pcd.first_name ELSE chd.first_name END AS first_name,
        CASE WHEN (chd.tvcmid IS NULL) THEN pcd.last_name ELSE chd.last_name END AS last_name,
        CASE WHEN (chd.tvcmid IS NULL) THEN pcd.middle_name ELSE chd.middle_name END AS middle_name,
        chd.personal_suffix,
        chd.medical_suffix,
        chd.address_line1 AS address_line_1,
        chd.address_line2 AS address_line_2,
        chd.city,
        chd.state_code AS state,
        chd.zip AS zip_code,
        NULL AS zip_code_extension,
        se.sln_state AS state_license_state,
        se.sln AS state_license_number,
        se.sln_expiration_date AS state_license_expiration_date,
        se.teva_sample_eligibility_flag AS sample_eligibility_code,
        chd.primary_specialty AS primary_specialty_code,
        spec.Specialty_Description AS primary_specialty_description,
        NULL AS primary_specialty_group_code,
        NULL AS primary_specialty_group_description,
        chd.np_pa_flag,
        (now())::date AS created_date
 FROM (((((datamart.prescriber_combined_demographics pcd LEFT  JOIN datamart.customer_hcp_demographics chd ON ((pcd.tvcmid = chd.tvcmid))) JOIN datamart.tvcmid_xref cmid ON (((pcd.tvcmid = cmid.tvcmid) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN hcos.ims_hcos_professional hcos ON ((hcos.ims_id = pcd.ims_id))) LEFT  JOIN mdm.sample_eligibility se ON (((se.tvcmid = pcd.tvcmid) AND (upper(se.sln_state) = upper(chd.state_code))))) LEFT  JOIN reference.specialties spec ON ((spec.Specialty_Code = chd.primary_specialty)))
 GROUP BY cmid.id_num,
          pcd.tvcmid,
          pcd.veeva_account_id,
          CASE WHEN (chd.tvcmid IS NULL) THEN pcd.npi ELSE chd.npi END,
          CASE WHEN (chd.tvcmid IS NULL) THEN pcd.ims_id ELSE chd.ims_id END,
          hcos.me,
          CASE WHEN (chd.tvcmid IS NULL) THEN pcd.first_name ELSE chd.first_name END,
          CASE WHEN (chd.tvcmid IS NULL) THEN pcd.last_name ELSE chd.last_name END,
          CASE WHEN (chd.tvcmid IS NULL) THEN pcd.middle_name ELSE chd.middle_name END,
          chd.personal_suffix,
          chd.medical_suffix,
          chd.address_line1,
          chd.address_line2,
          chd.city,
          chd.state_code,
          chd.zip,
          NULL,
          se.sln_state,
          se.sln,
          se.sln_expiration_date,
          se.teva_sample_eligibility_flag,
          chd.primary_specialty,
          spec.Specialty_Description,
          chd.np_pa_flag,
          (now())::date) x) y
 WHERE (y.rank = 1);

CREATE  VIEW outbound.ics_mop AS
 SELECT rx_vertical.ims_id,
        rx_vertical.hcp_id,
        rx_vertical.plan_code,
        rx_vertical.plan_name,
        rx_vertical.payment_method,
        rx_vertical.basket_name,
        sum(CASE WHEN (rx_vertical.month_bucket = 24) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth24,
        sum(CASE WHEN (rx_vertical.month_bucket = 23) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth23,
        sum(CASE WHEN (rx_vertical.month_bucket = 22) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth22,
        sum(CASE WHEN (rx_vertical.month_bucket = 21) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth21,
        sum(CASE WHEN (rx_vertical.month_bucket = 20) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth20,
        sum(CASE WHEN (rx_vertical.month_bucket = 19) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth19,
        sum(CASE WHEN (rx_vertical.month_bucket = 18) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth18,
        sum(CASE WHEN (rx_vertical.month_bucket = 17) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth17,
        sum(CASE WHEN (rx_vertical.month_bucket = 16) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth16,
        sum(CASE WHEN (rx_vertical.month_bucket = 15) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth15,
        sum(CASE WHEN (rx_vertical.month_bucket = 14) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth14,
        sum(CASE WHEN (rx_vertical.month_bucket = 13) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth13,
        sum(CASE WHEN (rx_vertical.month_bucket = 12) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth12,
        sum(CASE WHEN (rx_vertical.month_bucket = 11) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth11,
        sum(CASE WHEN (rx_vertical.month_bucket = 10) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth10,
        sum(CASE WHEN (rx_vertical.month_bucket = 9) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth9,
        sum(CASE WHEN (rx_vertical.month_bucket = 8) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth8,
        sum(CASE WHEN (rx_vertical.month_bucket = 7) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth7,
        sum(CASE WHEN (rx_vertical.month_bucket = 6) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth6,
        sum(CASE WHEN (rx_vertical.month_bucket = 5) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth5,
        sum(CASE WHEN (rx_vertical.month_bucket = 4) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth4,
        sum(CASE WHEN (rx_vertical.month_bucket = 3) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth3,
        sum(CASE WHEN (rx_vertical.month_bucket = 2) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth2,
        sum(CASE WHEN (rx_vertical.month_bucket = 1) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth1
 FROM ( SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(xref.veeva_account_id, rx.ims_id) END AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.payment_method,
        rx.basket_name,
        w.month_bucket,
        rx.trx_count
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT row_number() OVER (ORDER BY z.rollup_month DESC) AS month_bucket,
        z.rollup_month
 FROM ( SELECT prescriber_rx.rollup_month
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (prescriber_rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY prescriber_rx.rollup_month) z) w ON ((rx.rollup_month = w.rollup_month))) LEFT  JOIN ( SELECT a.tvcmid,
        a.veeva_account_id
 FROM ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.id_num) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE (xref.id_type = 'VEEVA_ID'::varchar(8))) a
 WHERE (a.rnk = 1)) xref ON ((xref.tvcmid = rx.tvcmid)))
 WHERE ((rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'MONTH'::varchar(5)) AND (w.month_bucket >= 1) AND (w.month_bucket <= 24))) rx_vertical
 GROUP BY rx_vertical.ims_id,
          rx_vertical.hcp_id,
          rx_vertical.plan_code,
          rx_vertical.plan_name,
          rx_vertical.payment_method,
          rx_vertical.basket_name;

CREATE  VIEW outbound.fingertip_monthly_plantrak_rx AS
 SELECT substr(rx.payer_plan_number, ((length(rx.payer_plan_number) - 4) + 1), 4) AS plan_id,
        rx.plan_name,
        substr(rx.payer_plan_number, 1, 6) AS payer_id,
        rx.payer_name,
        rx.market_name,
        rx.basket_name,
        d.ptr_zip,
        to_char(rx.rollup_month, 'YYYY-MM-DD'::varchar(10)) AS rollup_month,
        round(sum((rx.trx_count / d.divisor)), 3) AS trx,
        round(sum((rx.nrx_count / d.divisor)), 3) AS nrx
 FROM (((( SELECT a.market_name,
        a.report_frequency,
        a.data_date
 FROM ( SELECT market_frequency.market_name,
        market_frequency.report_frequency,
        market_frequency.data_date,
        row_number() OVER (PARTITION BY market_frequency.market_name ORDER BY market_frequency.report_frequency DESC) AS rnk
 FROM ( SELECT prescriber_rx.market_name,
        prescriber_rx.report_frequency,
        prescriber_rx.data_date
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.payer_plan_number IS NOT NULL) AND (prescriber_rx.rollup_flag IS NULL) AND (((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.data_date >= (trunc((statement_timestamp())::timestamp, 'MON'::varchar(3)) + '-3'::interval month))) OR ((prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.data_date >= (trunc((statement_timestamp())::timestamp, 'MON'::varchar(3)) + '-1'::interval month)))))
 GROUP BY prescriber_rx.market_name,
          prescriber_rx.report_frequency,
          prescriber_rx.data_date) market_frequency) a
 WHERE (a.rnk = 1)) mte JOIN datamart.prescriber_rx rx ON (((mte.market_name = rx.market_name) AND (mte.report_frequency = rx.report_frequency) AND (mte.data_date = rx.data_date)))) JOIN ( SELECT a.ims_id,
        a.ptr_zip,
        count(*) OVER (PARTITION BY a.ims_id) AS divisor
 FROM ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.ptr_zip
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)]))
 GROUP BY prescriber_combined_demographics.ims_id,
          prescriber_combined_demographics.ptr_zip) a) d ON ((rx.ims_id = d.ims_id))) CROSS  JOIN ( SELECT (trunc(max(markets_to_extract.data_date), 'MON'::varchar(3)) + '-23'::interval month) AS start_month,
        max(markets_to_extract.data_date) AS end_month
 FROM ( SELECT a.market_name,
        a.report_frequency,
        a.data_date
 FROM ( SELECT market_frequency.market_name,
        market_frequency.report_frequency,
        market_frequency.data_date,
        row_number() OVER (PARTITION BY market_frequency.market_name ORDER BY market_frequency.report_frequency DESC) AS rnk
 FROM ( SELECT prescriber_rx.market_name,
        prescriber_rx.report_frequency,
        prescriber_rx.data_date
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.payer_plan_number IS NOT NULL) AND (prescriber_rx.rollup_flag IS NULL) AND (((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.data_date >= (trunc((statement_timestamp())::timestamp, 'MON'::varchar(3)) + '-3'::interval month))) OR ((prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.data_date >= (trunc((statement_timestamp())::timestamp, 'MON'::varchar(3)) + '-1'::interval month)))))
 GROUP BY prescriber_rx.market_name,
          prescriber_rx.report_frequency,
          prescriber_rx.data_date) market_frequency) a
 WHERE (a.rnk = 1)) markets_to_extract
 WHERE (markets_to_extract.report_frequency = 'MONTH'::varchar(5))) dr)
 WHERE ((rx.rollup_flag IS NULL) AND (rx.rollup_month >= dr.start_month) AND (rx.rollup_month <= dr.end_month))
 GROUP BY substr(rx.payer_plan_number, ((length(rx.payer_plan_number) - 4) + 1), 4),
          rx.plan_name,
          substr(rx.payer_plan_number, 1, 6),
          rx.payer_name,
          rx.market_name,
          rx.basket_name,
          d.ptr_zip,
          to_char(rx.rollup_month, 'YYYY-MM-DD'::varchar(10));

CREATE  VIEW outbound.stride_segmentation AS
 SELECT hcp.ims_id,
        hcp.npi,
        hcp.tvcmid,
        hcp.first_name,
        hcp.middle_name,
        hcp.last_name,
        hcp.primary_specialty,
        'specialty_grp_AJOVY'::varchar(19) AS specialty_group_ajovy,
        hcp.address_line1,
        hcp.address_line2,
        hcp.city,
        hcp.state_code,
        hcp.zip,
        flags.ajovy_tier,
        CASE WHEN (callplan.tvcmid IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END AS target,
        calls.ltdcalls AS ajovy_details_ltd,
        dec.trx_ACGRP_dec,
        dec.trx_AIMOVIG_dec,
        dec.trx_AJOVY_dec,
        dec.trx_EMGALITY_dec,
        flags.ha_specialist_flag,
        flags.exclude_flag
 FROM ((((datamart.customer_hcp_demographics hcp LEFT  JOIN ( SELECT call_plan.tvcmid
 FROM datamart.call_plan
 WHERE (call_plan.basket_name = 'AJOVY'::varchar(5))
 GROUP BY call_plan.tvcmid) callplan ON ((hcp.tvcmid = callplan.tvcmid))) LEFT  JOIN ( SELECT sfa.tvcmid,
        count(*) AS ltdcalls
 FROM (datamart.sfa_call sfa LEFT  JOIN datamart.sfa_call_detail sfadetail ON (((sfa.call_id = sfadetail.call_id) AND (sfadetail.basket_name = 'AJOVY'::varchar(5)))))
 GROUP BY sfa.tvcmid) calls ON ((hcp.tvcmid = calls.tvcmid))) LEFT  JOIN ( SELECT rx_deciles.tvcmid,
        max(CASE WHEN (rx_deciles.basket_name = 'ANTI-CGRP'::varchar(9)) THEN rx_deciles.trx_count_12_mo ELSE NULL::float END) AS trx_ACGRP_dec,
        max(CASE WHEN (rx_deciles.basket_name = 'AIMOVIG'::varchar(7)) THEN rx_deciles.trx_count_12_mo ELSE NULL::float END) AS trx_AIMOVIG_dec,
        max(CASE WHEN (rx_deciles.basket_name = 'AJOVY'::varchar(5)) THEN rx_deciles.trx_count_12_mo ELSE NULL::float END) AS trx_AJOVY_dec,
        max(CASE WHEN (rx_deciles.basket_name = 'EMGALITY'::varchar(8)) THEN rx_deciles.trx_count_12_mo ELSE NULL::float END) AS trx_EMGALITY_dec
 FROM datamart.rx_deciles
 GROUP BY rx_deciles.tvcmid
 ORDER BY rx_deciles.tvcmid) dec ON ((hcp.tvcmid = dec.tvcmid))) LEFT  JOIN ( SELECT customer_level_flags.tvcmid,
        max(CASE WHEN (customer_level_flags.flag_type = 'MIGRAINE_TIER'::varchar(13)) THEN customer_level_flags.flag_value ELSE NULL END) AS ajovy_tier,
        max(CASE WHEN (customer_level_flags.flag_type = 'HEADACHE_SPECIALIST'::varchar(19)) THEN customer_level_flags.flag_value ELSE NULL END) AS ha_specialist_flag,
        max(CASE WHEN (customer_level_flags.flag_type = 'AMADNC'::varchar(6)) THEN customer_level_flags.flag_value ELSE NULL END) AS exclude_flag
 FROM datamart.customer_level_flags
 WHERE (customer_level_flags.flag_type = ANY (ARRAY['MIGRAINE_TIER'::varchar(19), 'HEADACHE_SPECIALIST'::varchar(19), 'AMADNC'::varchar(19)]))
 GROUP BY customer_level_flags.tvcmid
 ORDER BY customer_level_flags.tvcmid) flags ON ((hcp.tvcmid = flags.tvcmid)));

CREATE  VIEW outbound.mcm_ajovy_copay AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.pharmacy_chain_number,
        copay.nabp,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.create_date,
        copay.occ_payment_type,
        copay.counted_copay,
        copay.auth_refills,
        copay.admin_hcp_npi,
        copay.admin_hcp_name,
        copay.admin_hcp_address,
        copay.admin_hcp_address2,
        copay.admin_hcp_city,
        copay.admin_hcp_state,
        copay.admin_hcp_zip,
        copay.claim_type,
        copay.administration_flag,
        copay.soc_name,
        copay.soc_phone,
        copay.soc_fax,
        copay.soc_address,
        copay.soc_city,
        copay.soc_state,
        copay.soc_zip,
        copay.soc_id,
        copay.soc_npi,
        copay.payer_name,
        copay.cpt_code,
        copay.trans_type,
        copay.previous_payer_id,
        copay.member_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.report_frequency,
        copay.source_name,
        copay.file_id,
        copay.record_id,
        copay.patient_type,
        copay.primary_bin,
        copay.primary_bin_description,
        copay.reject_code
 FROM datamart.copay
 WHERE (copay.basket_name ~~ 'AJOVY%'::varchar(6))
 ORDER BY copay.fill_date;

CREATE  VIEW outbound.zs_xpd_demographics_antimigraine_monthly AS
 SELECT xpd_demographics_antimigraine.ims_client_number,
        xpd_demographics_antimigraine.ims_report_number,
        xpd_demographics_antimigraine.ims_id,
        xpd_demographics_antimigraine.tvcmid,
        xpd_demographics_antimigraine.last_name,
        xpd_demographics_antimigraine.first_name,
        xpd_demographics_antimigraine.middle_name,
        xpd_demographics_antimigraine.address_1,
        xpd_demographics_antimigraine.address_2,
        xpd_demographics_antimigraine.city,
        xpd_demographics_antimigraine.state,
        xpd_demographics_antimigraine.zip,
        xpd_demographics_antimigraine.specialty,
        xpd_demographics_antimigraine.specialty_description,
        xpd_demographics_antimigraine.trx_decile_retail,
        xpd_demographics_antimigraine.nrx_decile_retail,
        xpd_demographics_antimigraine.nbrx_decile_retail,
        xpd_demographics_antimigraine.trx_decile_mail,
        xpd_demographics_antimigraine.nrx_decile_mail,
        xpd_demographics_antimigraine.nbrx_decile_mail,
        xpd_demographics_antimigraine.market_prescriber_reliability_retail,
        xpd_demographics_antimigraine.market_prescriber_reliability_mail,
        xpd_demographics_antimigraine.report_frequency
 FROM datamart.xpd_demographics_antimigraine
 WHERE (xpd_demographics_antimigraine.report_frequency = 'MONTH'::varchar(5));

CREATE  VIEW outbound.zs_cgrp_accute_preventive_monthly AS
 SELECT rx.ims_id,
        'ACGRP_ACUTE_PREVENTIVE_ZS'::varchar(25) AS sub_market,
        rx.payer_plan_number,
        rx.plan_name,
        rx.payer_name,
        rx.pbm_name,
        sum(rx.trx_count) AS Sum_trx_cnt,
        sum(rx.nrx_count) AS Sum_nrx_cnt,
        sum(rx.trx_quantity) AS Sum_trx_qty,
        sum(rx.nrx_quantity) AS Sum_nrx_qty,
        rx.rollup_month
 FROM datamart.prescriber_rx rx, product.basket b, product.basket_item bi, outbound.month_rollup_and_bucket mth
 WHERE ((rx.report_frequency = 'MONTH'::varchar(5)) AND (rx.rollup_month = mth.month_ending) AND (mth.month_bucket <= 12) AND (bi.basket_id = ( SELECT basket.basket_id
 FROM product.basket
 WHERE ((basket.name = 'ACGRP_ACUTE_PREVENTIVE_ZS'::varchar(25)) AND (basket.basket_type = 'submarket'::varchar(9))))) AND (b.basket_id = bi.entity_id) AND (rx.basket_id = bi.entity_id))
 GROUP BY rx.report_frequency,
          rx.pbm_name,
          rx.payer_name,
          rx.plan_name,
          rx.payer_plan_number,
          rx.ims_id,
          rx.data_date,
          rx.rollup_month
 ORDER BY rx.ims_id,
          rx.rollup_month;

CREATE  VIEW outbound.zs_acutemigraine_managed_care AS
 SELECT a.ims_id,
        a.payer_plan_number,
        a.payment_method,
        a.pbm_name,
        a.payer_name,
        a.plan_name,
        b.product_group,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), 0)) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx1,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-1))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx2,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-2))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx3,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-3))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx4,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-4))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx5,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-5))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx6,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-6))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx7,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-7))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx8,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-8))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx9,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-9))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx10,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-10))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx11,
        sum(CASE WHEN (a.date = add_months(last_day(a.data_date), (-11))) THEN a.trx_count ELSE 0::numeric(18,0) END) AS trx12
 FROM datamart.prescriber_rx a, reference.acute_market_definition b
 WHERE ((a.basket_id = b.bfs_id) AND (a.report_frequency = 'MONTH'::varchar(5)) AND (a.rollup_month >= add_months(last_day(a.data_date), (-11))) AND (a.rollup_month <= add_months(last_day(a.data_date), 0)) AND (a.basket_type = 'product'::varchar(7)))
 GROUP BY a.ims_id,
          a.payer_plan_number,
          a.payment_method,
          a.pbm_name,
          a.payer_name,
          a.plan_name,
          b.product_group
 ORDER BY a.ims_id,
          a.payer_plan_number,
          a.payment_method,
          a.pbm_name,
          a.payer_name,
          a.plan_name,
          b.product_group;

CREATE  VIEW outbound.CobbsCreek_austedo_xpo_rx_pt_monthly AS
 SELECT customer_hcp_demographics.ims_id AS demo_ims_id,
        prescriber_rx.ims_id AS rx_ims_id,
        prescriber_rx.payer_plan_number,
        prescriber_rx.ims_client_number,
        prescriber_rx.report_frequency,
        prescriber_rx.ims_product_group,
        prescriber_rx.basket_id,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.sales_category,
        prescriber_rx.tvcmid AS rx_tvmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count,
        prescriber_rx.payer_name,
        prescriber_rx.plan_name,
        prescriber_rx.pbm_name,
        prescriber_rx.model,
        prescriber_rx.payment_method,
        prescriber_rx.ims_specialty,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.ims_report_number_cnt,
        prescriber_rx.cnt_file_id,
        prescriber_rx.cnt_record_id,
        prescriber_rx.ims_report_number_qty,
        prescriber_rx.qty_file_id,
        prescriber_rx.qty_record_id,
        prescriber_rx.rollup_flag,
        prescriber_rx.indication,
        prescriber_rx.pbm_parent_name,
        customer_hcp_demographics.tvcmid AS demo_tvcmid,
        customer_hcp_demographics.npi,
        customer_hcp_demographics.last_name,
        customer_hcp_demographics.first_name,
        customer_hcp_demographics.middle_name,
        customer_hcp_demographics.personal_suffix,
        customer_hcp_demographics.medical_suffix,
        customer_hcp_demographics.primary_specialty,
        customer_hcp_demographics.secondary_specialty,
        customer_hcp_demographics.address_line1,
        customer_hcp_demographics.address_line2,
        customer_hcp_demographics.city,
        customer_hcp_demographics.state_code,
        customer_hcp_demographics.zip,
        customer_hcp_demographics.business_phone,
        customer_hcp_demographics.business_email,
        customer_hcp_demographics.hce_status_desc,
        customer_hcp_demographics.np_pa_flag,
        customer_hcp_demographics.address_id,
        customer_hcp_demographics.address_latitude,
        customer_hcp_demographics.address_longitude,
        customer_hcp_demographics.file_id,
        customer_hcp_demographics.record_id
 FROM (datamart.customer_hcp_demographics customer_hcp_demographics RIGHT  JOIN datamart.prescriber_rx prescriber_rx ON ((customer_hcp_demographics.ims_id = prescriber_rx.ims_id)))
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = 'MOVEMENT DISORDER MARKET'::varchar(24)) AND (prescriber_rx.basket_type = 'product'::varchar(7)))
 GROUP BY customer_hcp_demographics.ims_id,
          prescriber_rx.ims_id,
          prescriber_rx.payer_plan_number,
          prescriber_rx.ims_client_number,
          prescriber_rx.report_frequency,
          prescriber_rx.ims_product_group,
          prescriber_rx.basket_id,
          prescriber_rx.data_date,
          prescriber_rx.date,
          prescriber_rx.sales_category,
          prescriber_rx.tvcmid,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count,
          prescriber_rx.payer_name,
          prescriber_rx.plan_name,
          prescriber_rx.pbm_name,
          prescriber_rx.model,
          prescriber_rx.payment_method,
          prescriber_rx.ims_specialty,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.ims_report_number_cnt,
          prescriber_rx.cnt_file_id,
          prescriber_rx.cnt_record_id,
          prescriber_rx.ims_report_number_qty,
          prescriber_rx.qty_file_id,
          prescriber_rx.qty_record_id,
          prescriber_rx.rollup_flag,
          prescriber_rx.indication,
          prescriber_rx.pbm_parent_name,
          customer_hcp_demographics.tvcmid,
          customer_hcp_demographics.npi,
          customer_hcp_demographics.last_name,
          customer_hcp_demographics.first_name,
          customer_hcp_demographics.middle_name,
          customer_hcp_demographics.personal_suffix,
          customer_hcp_demographics.medical_suffix,
          customer_hcp_demographics.primary_specialty,
          customer_hcp_demographics.secondary_specialty,
          customer_hcp_demographics.address_line1,
          customer_hcp_demographics.address_line2,
          customer_hcp_demographics.city,
          customer_hcp_demographics.state_code,
          customer_hcp_demographics.zip,
          customer_hcp_demographics.business_phone,
          customer_hcp_demographics.business_email,
          customer_hcp_demographics.hce_status_desc,
          customer_hcp_demographics.np_pa_flag,
          customer_hcp_demographics.address_id,
          customer_hcp_demographics.address_latitude,
          customer_hcp_demographics.address_longitude,
          customer_hcp_demographics.file_id,
          customer_hcp_demographics.record_id
 ORDER BY customer_hcp_demographics.ims_id;

CREATE  VIEW outbound.CobbsCreek_Austedo_867_Monthly AS
 SELECT wholesaler_sales_867.basket_id,
        wholesaler_sales_867.basket_name,
        wholesaler_sales_867.ndc,
        wholesaler_sales_867.product_description,
        wholesaler_sales_867.product_name,
        wholesaler_sales_867.trading_partner_name,
        wholesaler_sales_867.trading_partner_dea,
        wholesaler_sales_867.trading_partner_hin,
        wholesaler_sales_867.trading_partner_location_type,
        wholesaler_sales_867.trading_partner_dc_dea,
        wholesaler_sales_867.trading_partner_dc_hin,
        wholesaler_sales_867.trading_partner_dc_name,
        wholesaler_sales_867.trading_partner_dc_address,
        wholesaler_sales_867.trading_partner_dc_address_2,
        wholesaler_sales_867.trading_partner_dc_city,
        wholesaler_sales_867.trading_partner_dc_state,
        wholesaler_sales_867.trading_partner_dc_zip,
        wholesaler_sales_867.class_of_trade,
        wholesaler_sales_867.outlet_location_name,
        wholesaler_sales_867.outlet_dea,
        wholesaler_sales_867.outlet_hin,
        wholesaler_sales_867.outlet_340b,
        wholesaler_sales_867.outlet_ncpdp,
        wholesaler_sales_867.outlet_npi,
        wholesaler_sales_867.outlet_location_address,
        wholesaler_sales_867.outlet_location_address_2,
        wholesaler_sales_867.outlet_location_city,
        wholesaler_sales_867.outlet_location_state,
        wholesaler_sales_867.outlet_location_zip,
        wholesaler_sales_867.reporting_date,
        wholesaler_sales_867.rollup_reporting_month,
        wholesaler_sales_867.rollup_reporting_quarter,
        wholesaler_sales_867.contract_number,
        wholesaler_sales_867.contract_description,
        wholesaler_sales_867.invoice_number,
        wholesaler_sales_867.invoice_date,
        wholesaler_sales_867.invoice_line_id,
        wholesaler_sales_867.quanitity_stock_sales_ss,
        wholesaler_sales_867.ds_sales_ds,
        wholesaler_sales_867.summary_sales_su,
        wholesaler_sales_867.dock_to_dock_bq,
        wholesaler_sales_867.interbranch_ib,
        wholesaler_sales_867.return_to_useable_ru,
        wholesaler_sales_867.return_to_vendor_rv,
        wholesaler_sales_867.transfer_to_disposal_td,
        wholesaler_sales_867.adjusted_price,
        wholesaler_sales_867.gross_amount,
        wholesaler_sales_867.trx_count_normalized,
        wholesaler_sales_867.file_id
 FROM datamart.wholesaler_sales_867 wholesaler_sales_867
 WHERE ((wholesaler_sales_867.basket_name ~~ 'AUSTEDO%'::varchar(8)) AND (wholesaler_sales_867.reporting_date >= trunc((now() + '-24'::interval month), 'month'::varchar(5))))
 GROUP BY wholesaler_sales_867.basket_id,
          wholesaler_sales_867.basket_name,
          wholesaler_sales_867.ndc,
          wholesaler_sales_867.product_description,
          wholesaler_sales_867.product_name,
          wholesaler_sales_867.trading_partner_name,
          wholesaler_sales_867.trading_partner_dea,
          wholesaler_sales_867.trading_partner_hin,
          wholesaler_sales_867.trading_partner_location_type,
          wholesaler_sales_867.trading_partner_dc_dea,
          wholesaler_sales_867.trading_partner_dc_hin,
          wholesaler_sales_867.trading_partner_dc_name,
          wholesaler_sales_867.trading_partner_dc_address,
          wholesaler_sales_867.trading_partner_dc_address_2,
          wholesaler_sales_867.trading_partner_dc_city,
          wholesaler_sales_867.trading_partner_dc_state,
          wholesaler_sales_867.trading_partner_dc_zip,
          wholesaler_sales_867.class_of_trade,
          wholesaler_sales_867.outlet_location_name,
          wholesaler_sales_867.outlet_dea,
          wholesaler_sales_867.outlet_hin,
          wholesaler_sales_867.outlet_340b,
          wholesaler_sales_867.outlet_ncpdp,
          wholesaler_sales_867.outlet_npi,
          wholesaler_sales_867.outlet_location_address,
          wholesaler_sales_867.outlet_location_address_2,
          wholesaler_sales_867.outlet_location_city,
          wholesaler_sales_867.outlet_location_state,
          wholesaler_sales_867.outlet_location_zip,
          wholesaler_sales_867.reporting_date,
          wholesaler_sales_867.rollup_reporting_month,
          wholesaler_sales_867.rollup_reporting_quarter,
          wholesaler_sales_867.contract_number,
          wholesaler_sales_867.contract_description,
          wholesaler_sales_867.invoice_number,
          wholesaler_sales_867.invoice_date,
          wholesaler_sales_867.invoice_line_id,
          wholesaler_sales_867.quanitity_stock_sales_ss,
          wholesaler_sales_867.ds_sales_ds,
          wholesaler_sales_867.summary_sales_su,
          wholesaler_sales_867.dock_to_dock_bq,
          wholesaler_sales_867.interbranch_ib,
          wholesaler_sales_867.return_to_useable_ru,
          wholesaler_sales_867.return_to_vendor_rv,
          wholesaler_sales_867.transfer_to_disposal_td,
          wholesaler_sales_867.adjusted_price,
          wholesaler_sales_867.gross_amount,
          wholesaler_sales_867.trx_count_normalized,
          wholesaler_sales_867.file_id
 ORDER BY wholesaler_sales_867.outlet_npi;

CREATE  VIEW outbound.zs_laba_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.rollup_month,
        prescriber_rx.sales_category,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payer_name,
        prescriber_rx.plan_name,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.model,
        prescriber_rx.payment_method,
        sum(prescriber_rx.nrx_count) AS nrx_count,
        sum(prescriber_rx.trx_count) AS trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = 'LABA MARKET TOTAL'::varchar(17)) AND (prescriber_rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.rollup_month,
          prescriber_rx.sales_category,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payer_name,
          prescriber_rx.plan_name,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.model,
          prescriber_rx.payment_method;

CREATE  VIEW outbound.zs_ts_ims_zip_xref AS
 SELECT CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END AS ims_id,
        prescriber_combined_demographics.ptr_zip AS zip
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))
 GROUP BY CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END,
          prescriber_combined_demographics.ptr_zip
 ORDER BY CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END,
          prescriber_combined_demographics.ptr_zip;

CREATE  VIEW outbound.zs_xpo_xpopt_AM_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.rollup_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (prescriber_rx.market_name = 'ANTI-MIGRAINE MARKET'::varchar(20)))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.sales_category,
          prescriber_rx.market_name,
          prescriber_rx.basket_id,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.model,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.indication,
          prescriber_rx.data_date,
          prescriber_rx.date,
          prescriber_rx.rollup_flag,
          prescriber_rx.rollup_week,
          prescriber_rx.rollup_month,
          prescriber_rx.report_frequency,
          prescriber_rx.plan_name,
          prescriber_rx.payer_name,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count;

CREATE  VIEW outbound.archer_rte AS
 SELECT se.id AS veeva_sent_email_id,
        se.sent_email_id,
        se.product_display_vod__c AS product,
        se.email_sent_date_vod__c AS date_sent,
        CASE WHEN (se.status_vod__c = 'Delivered_vod'::varchar(13)) THEN 'Delivered'::varchar(9) WHEN (se.status_vod__c = 'Failed_vod'::varchar(10)) THEN 'Failed'::varchar(6) WHEN (se.status_vod__c = 'Saved_vod'::varchar(9)) THEN 'Saved'::varchar(5) WHEN (se.status_vod__c = 'Sent_vod'::varchar(8)) THEN 'Sent'::varchar(4) WHEN (se.status_vod__c = 'Dropped_vod'::varchar(11)) THEN 'Dropped'::varchar(7) ELSE NULL END AS status,
        se.failure_msg_vod__c AS failure_message,
        se.account_vod__c AS veeva_account_id,
        tx.tvcmid,
        se.call2_vod__c AS veeva_call_id,
        se.call_id,
        se.sender_email_vod__c AS sender_email,
        se.territory_number AS territory,
        se.account_email_vod__c AS recipient_email,
        se.click_count_vod__c AS click_count,
        se.open_count_vod__c AS open_count,
        se.last_open_date_vod__c AS last_open_date,
        se.valid_consent_exists_vod__c AS valid_consent,
        CASE WHEN (ea1.event_type_vod__c IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END AS delivered,
        CASE WHEN (ea2.event_type_vod__c IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END AS opened,
        CASE WHEN (ea3.event_type_vod__c IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END AS dropped,
        CASE WHEN (ea4.event_type_vod__c IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END AS clicked,
        CASE WHEN (ea5.event_type_vod__c IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END AS downloaded,
        CASE WHEN (ea6.event_type_vod__c IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END AS viewed,
        se.approved_email_template_vod__c AS template_id,
        ad.name AS template_name,
        ea7.event_msg_vod__c,
        ea7.click_url_vod__c,
        se.subject
 FROM (((((((((( SELECT a.id,
        a.sent_email_id,
        a.product_display_vod__c,
        a.email_sent_date_vod__c,
        a.status_vod__c,
        a.failure_msg_vod__c,
        a.account_vod__c,
        a.call2_vod__c,
        a.call_id,
        a.sender_email_vod__c,
        a.territory_number,
        a.account_email_vod__c,
        a.click_count_vod__c,
        a.open_count_vod__c,
        a.last_open_date_vod__c,
        a.valid_consent_exists_vod__c,
        a.subject,
        a.approved_email_template_vod__c,
        a.ranked
 FROM ( SELECT se.Id AS id,
        se.Name AS sent_email_id,
        se.Product_Display_vod__c AS product_display_vod__c,
        se.Email_Sent_Date_vod__c AS email_sent_date_vod__c,
        se.Status_vod__c AS status_vod__c,
        se.Failure_Msg_vod__c AS failure_msg_vod__c,
        se.Account_vod__c AS account_vod__c,
        se.Call2_vod__c AS call2_vod__c,
        c.name AS call_id,
        se.Sender_Email_vod__c AS sender_email_vod__c,
        t.territory_number,
        se.Account_Email_vod__c AS account_email_vod__c,
        se.Click_Count_vod__c AS click_count_vod__c,
        se.Open_Count_vod__c AS open_count_vod__c,
        se.Last_Open_Date_vod__c AS last_open_date_vod__c,
        se.Valid_Consent_Exists_vod__c AS valid_consent_exists_vod__c,
        se.subject,
        se.Approved_Email_Template_vod__c AS approved_email_template_vod__c,
        rank() OVER (PARTITION BY se.Id ORDER BY se.file_id DESC) AS ranked
 FROM ((veeva.sent_email se LEFT  JOIN ( SELECT call.id,
        call.name
 FROM veeva.call
 WHERE (call.createddate >= '2020-01-01 00:00:00'::timestamp(0))
 GROUP BY call.id,
          call.name) c ON ((se.Call2_vod__c = c.id))) JOIN ( SELECT ad.account_vod__c,
        ad.zip_vod__c,
        ca.zip_code,
        ca.territory_number,
        ca.sales_force_id
 FROM veeva.address ad, sandbox.archer_zip_terr ca
 WHERE (ad.zip_vod__c = ca.zip_code)
 GROUP BY ad.account_vod__c,
          ad.zip_vod__c,
          ca.zip_code,
          ca.territory_number,
          ca.sales_force_id) t ON (((se.Account_vod__c = t.account_vod__c) AND (substr(se.Territory_vod__c, 1, 2) = t.sales_force_id))))
 WHERE (se.CreatedDate >= '2020-01-01 00:00:00'::timestamp(0))) a
 WHERE (a.ranked = 1)) se LEFT  JOIN ( SELECT approved_document.id,
        approved_document.ownerid,
        approved_document.isdeleted,
        approved_document.name,
        approved_document.recordtypeid,
        approved_document.createddate,
        approved_document.createdbyid,
        approved_document.lastmodifieddate,
        approved_document.lastmodifiedbyid,
        approved_document.systemmodstamp,
        approved_document.lastactivitydate,
        approved_document.mayedit,
        approved_document.islocked,
        approved_document.lastvieweddate,
        approved_document.lastreferenceddate,
        approved_document.detail_group_vod__c,
        approved_document.document_description_vod__c,
        approved_document.document_host_url_vod__c,
        approved_document.document_id_vod__c,
        approved_document.document_last_mod_datetime_vod__c,
        approved_document.email_allows_documents_vod__c,
        approved_document.email_domain_vod__c,
        approved_document.email_from_address_vod__c,
        approved_document.email_from_name_vod__c,
        approved_document.email_replyto_address_vod__c,
        approved_document.email_replyto_name_vod__c,
        approved_document.email_subject_vod__c,
        approved_document.email_template_fragment_document_id_vod__c,
        approved_document.isi_document_id_vod__c,
        approved_document.language_vod__c,
        approved_document.other_document_id_list_vod__c,
        approved_document.pi_document_id_vod__c,
        approved_document.piece_document_id_vod__c,
        approved_document.product_vod__c,
        approved_document.status_vod__c,
        approved_document.territory_vod__c,
        approved_document.vault_instance_id_vod__c,
        approved_document.expiration_date_tva__c,
        approved_document.group_to_share_to__c,
        approved_document.training_org_tva__c,
        approved_document.unsub_svr_tva__c,
        approved_document.file_id,
        approved_document.record_id
 FROM veeva.approved_document
 WHERE (approved_document.file_id IN ( SELECT max(approved_document.file_id) AS max
 FROM veeva.approved_document))) ad ON ((se.approved_email_template_vod__c = ad.id))) LEFT  JOIN ( SELECT a.id,
        a.sent_email_vod__c,
        a.event_type_vod__c,
        a.event_msg_vod__c,
        a.click_url_vod__c,
        a.ranked
 FROM ( SELECT email_activity.Id AS id,
        email_activity.Sent_Email_vod__c AS sent_email_vod__c,
        email_activity.Event_type_vod__c AS event_type_vod__c,
        email_activity.Event_Msg_vod__c AS event_msg_vod__c,
        email_activity.Click_URL_vod__c AS click_url_vod__c,
        rank() OVER (PARTITION BY email_activity.Sent_Email_vod__c, email_activity.Event_type_vod__c ORDER BY email_activity.file_id DESC, email_activity.Name DESC) AS ranked
 FROM veeva.email_activity) a
 WHERE (a.ranked = 1)) ea1 ON (((se.id = ea1.sent_email_vod__c) AND (ea1.event_type_vod__c = 'Delivered_vod'::varchar(13))))) LEFT  JOIN ( SELECT a.id,
        a.sent_email_vod__c,
        a.event_type_vod__c,
        a.event_msg_vod__c,
        a.click_url_vod__c,
        a.ranked
 FROM ( SELECT email_activity.Id AS id,
        email_activity.Sent_Email_vod__c AS sent_email_vod__c,
        email_activity.Event_type_vod__c AS event_type_vod__c,
        email_activity.Event_Msg_vod__c AS event_msg_vod__c,
        email_activity.Click_URL_vod__c AS click_url_vod__c,
        rank() OVER (PARTITION BY email_activity.Sent_Email_vod__c, email_activity.Event_type_vod__c ORDER BY email_activity.file_id DESC, email_activity.Name DESC) AS ranked
 FROM veeva.email_activity) a
 WHERE (a.ranked = 1)) ea2 ON (((se.id = ea2.sent_email_vod__c) AND (ea2.event_type_vod__c = 'Opened_vod'::varchar(10))))) LEFT  JOIN ( SELECT a.id,
        a.sent_email_vod__c,
        a.event_type_vod__c,
        a.event_msg_vod__c,
        a.click_url_vod__c,
        a.ranked
 FROM ( SELECT email_activity.Id AS id,
        email_activity.Sent_Email_vod__c AS sent_email_vod__c,
        email_activity.Event_type_vod__c AS event_type_vod__c,
        email_activity.Event_Msg_vod__c AS event_msg_vod__c,
        email_activity.Click_URL_vod__c AS click_url_vod__c,
        rank() OVER (PARTITION BY email_activity.Sent_Email_vod__c, email_activity.Event_type_vod__c ORDER BY email_activity.file_id DESC, email_activity.Name DESC) AS ranked
 FROM veeva.email_activity) a
 WHERE (a.ranked = 1)) ea3 ON (((se.id = ea3.sent_email_vod__c) AND (ea3.event_type_vod__c = 'Dropped_vod'::varchar(11))))) LEFT  JOIN ( SELECT a.id,
        a.sent_email_vod__c,
        a.event_type_vod__c,
        a.event_msg_vod__c,
        a.click_url_vod__c,
        a.ranked
 FROM ( SELECT email_activity.Id AS id,
        email_activity.Sent_Email_vod__c AS sent_email_vod__c,
        email_activity.Event_type_vod__c AS event_type_vod__c,
        email_activity.Event_Msg_vod__c AS event_msg_vod__c,
        email_activity.Click_URL_vod__c AS click_url_vod__c,
        rank() OVER (PARTITION BY email_activity.Sent_Email_vod__c, email_activity.Event_type_vod__c ORDER BY email_activity.file_id DESC, email_activity.Name DESC) AS ranked
 FROM veeva.email_activity) a
 WHERE (a.ranked = 1)) ea4 ON (((se.id = ea4.sent_email_vod__c) AND (ea4.event_type_vod__c = 'Clicked_vod'::varchar(11))))) LEFT  JOIN ( SELECT a.id,
        a.sent_email_vod__c,
        a.event_type_vod__c,
        a.event_msg_vod__c,
        a.click_url_vod__c,
        a.ranked
 FROM ( SELECT email_activity.Id AS id,
        email_activity.Sent_Email_vod__c AS sent_email_vod__c,
        email_activity.Event_type_vod__c AS event_type_vod__c,
        email_activity.Event_Msg_vod__c AS event_msg_vod__c,
        email_activity.Click_URL_vod__c AS click_url_vod__c,
        rank() OVER (PARTITION BY email_activity.Sent_Email_vod__c, email_activity.Event_type_vod__c ORDER BY email_activity.file_id DESC, email_activity.Name DESC) AS ranked
 FROM veeva.email_activity) a
 WHERE (a.ranked = 1)) ea5 ON (((se.id = ea5.sent_email_vod__c) AND (ea5.event_type_vod__c = 'Downloaded_vod'::varchar(14))))) LEFT  JOIN ( SELECT a.id,
        a.sent_email_vod__c,
        a.event_type_vod__c,
        a.event_msg_vod__c,
        a.click_url_vod__c,
        a.ranked
 FROM ( SELECT email_activity.Id AS id,
        email_activity.Sent_Email_vod__c AS sent_email_vod__c,
        email_activity.Event_type_vod__c AS event_type_vod__c,
        email_activity.Event_Msg_vod__c AS event_msg_vod__c,
        email_activity.Click_URL_vod__c AS click_url_vod__c,
        rank() OVER (PARTITION BY email_activity.Sent_Email_vod__c, email_activity.Event_type_vod__c ORDER BY email_activity.file_id DESC, email_activity.Name DESC) AS ranked
 FROM veeva.email_activity) a
 WHERE (a.ranked = 1)) ea6 ON (((se.id = ea6.sent_email_vod__c) AND (ea6.event_type_vod__c = 'Viewed_vod'::varchar(10))))) LEFT  JOIN ( SELECT a.id,
        a.sent_email_vod__c,
        a.event_type_vod__c,
        a.event_msg_vod__c,
        a.click_url_vod__c,
        a.ranked
 FROM ( SELECT email_activity.Id AS id,
        email_activity.Sent_Email_vod__c AS sent_email_vod__c,
        email_activity.Event_type_vod__c AS event_type_vod__c,
        email_activity.Event_Msg_vod__c AS event_msg_vod__c,
        email_activity.Click_URL_vod__c AS click_url_vod__c,
        rank() OVER (PARTITION BY email_activity.Sent_Email_vod__c, email_activity.Event_type_vod__c ORDER BY email_activity.file_id DESC, email_activity.Name DESC) AS ranked
 FROM veeva.email_activity) a
 WHERE (a.ranked = 1)) ea7 ON ((se.id = ea7.sent_email_vod__c))) LEFT  JOIN datamart.tvcmid_xref tx ON (((se.account_vod__c = tx.id_num) AND (tx.id_type = 'VEEVA_ID'::varchar(8)))))
 GROUP BY se.id,
          se.sent_email_id,
          se.product_display_vod__c,
          se.email_sent_date_vod__c,
          CASE WHEN (se.status_vod__c = 'Delivered_vod'::varchar(13)) THEN 'Delivered'::varchar(9) WHEN (se.status_vod__c = 'Failed_vod'::varchar(10)) THEN 'Failed'::varchar(6) WHEN (se.status_vod__c = 'Saved_vod'::varchar(9)) THEN 'Saved'::varchar(5) WHEN (se.status_vod__c = 'Sent_vod'::varchar(8)) THEN 'Sent'::varchar(4) WHEN (se.status_vod__c = 'Dropped_vod'::varchar(11)) THEN 'Dropped'::varchar(7) ELSE NULL END,
          se.failure_msg_vod__c,
          se.account_vod__c,
          tx.tvcmid,
          se.call2_vod__c,
          se.call_id,
          se.sender_email_vod__c,
          se.territory_number,
          se.account_email_vod__c,
          se.click_count_vod__c,
          se.open_count_vod__c,
          se.last_open_date_vod__c,
          se.valid_consent_exists_vod__c,
          CASE WHEN (ea1.event_type_vod__c IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END,
          CASE WHEN (ea2.event_type_vod__c IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END,
          CASE WHEN (ea3.event_type_vod__c IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END,
          CASE WHEN (ea4.event_type_vod__c IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END,
          CASE WHEN (ea5.event_type_vod__c IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END,
          CASE WHEN (ea6.event_type_vod__c IS NULL) THEN 'N'::varchar(1) ELSE 'Y'::varchar(1) END,
          se.approved_email_template_vod__c,
          ad.name,
          ea7.event_msg_vod__c,
          ea7.click_url_vod__c,
          se.subject;

CREATE  VIEW outbound.archer_dnc AS
 SELECT clf.tvcmid,
        atd.ims_id,
        atd.npi,
        CASE WHEN (clf.flag_type = ANY (ARRAY['DNC'::varchar(6), 'AMADNC'::varchar(6)])) THEN 'Do Not Call'::varchar(11) WHEN (clf.flag_type = ANY (ARRAY['OIG'::varchar(6), 'FDA'::varchar(6), 'DEA'::varchar(6), 'PERPRM'::varchar(6)])) THEN 'Do Not Promote'::varchar(14) ELSE clf.flag_type END AS flag_type,
        clf.flag_value,
        clf.flag_effective_start_date,
        clf.flag_effective_end_date
 FROM datamart.customer_level_flags clf, sandbox.archer_target_data atd
 WHERE ((clf.tvcmid = atd.tvcmid) AND (clf.flag_type = ANY (ARRAY['DNC'::varchar(6), 'AMADNC'::varchar(6), 'OIG'::varchar(6), 'FDA'::varchar(6), 'DEA'::varchar(6), 'PERPRM'::varchar(6)])) AND ((statement_timestamp())::timestamp >= clf.flag_effective_start_date) AND ((statement_timestamp())::timestamp <= clf.flag_effective_end_date))
 GROUP BY clf.tvcmid,
          atd.ims_id,
          atd.npi,
          CASE WHEN (clf.flag_type = ANY (ARRAY['DNC'::varchar(6), 'AMADNC'::varchar(6)])) THEN 'Do Not Call'::varchar(11) WHEN (clf.flag_type = ANY (ARRAY['OIG'::varchar(6), 'FDA'::varchar(6), 'DEA'::varchar(6), 'PERPRM'::varchar(6)])) THEN 'Do Not Promote'::varchar(14) ELSE clf.flag_type END,
          clf.flag_value,
          clf.flag_effective_start_date,
          clf.flag_effective_end_date;

CREATE  VIEW outbound.v_ob_ahm_employee AS
 SELECT Employee.employee_id AS EmployeeId,
        coalesce(Employee.username, ''::varchar) AS Username,
        coalesce(upper(Employee.username), ''::varchar) AS FederationId,
        CASE WHEN (Employee.rep_type = 'REP'::varchar(3)) THEN 'TEVA Pharma Rep'::varchar(15) ELSE 'TEVA Pharma Manager'::varchar(19) END AS SFDCUserProfile,
        coalesce(Manager.employee_id, ''::varchar) AS ManagerEmployeeId,
        coalesce(Employee.first_name, ''::varchar) AS FirstName,
        coalesce(Employee.last_name, ''::varchar) AS LastName,
        coalesce(Employee.middle_name, ''::varchar) AS MiddleName,
        ''::varchar AS Nickname,
        ''::varchar AS GenderCode,
        'Sales Specialist'::varchar(16) AS EmployeeRole,
        coalesce(Employee.shipping_address_line1, Employee.address_line1) AS ShippingAddressLine1,
        coalesce(Employee.shipping_address_line2, Employee.address_line2) AS ShippingAddressLine2,
        ''::varchar AS ShippingAddressLine3,
        coalesce(Employee.shipping_city, Employee.city) AS ShippingCity,
        ''::varchar AS ShippingNeighborhood,
        coalesce(Employee.shipping_state, Employee.state) AS ShippingStateProvince,
        coalesce(Employee.shipping_zip, Employee.zip) AS ShippingPostalCode,
        ''::varchar AS ShippingPostalCodeExtension,
        'US'::varchar(2) AS ShippingCountryCode,
        coalesce(Employee.address_line1, ''::varchar) AS HomeAddressLine1,
        coalesce(Employee.address_line2, ''::varchar) AS HomeAddressLine2,
        ''::varchar AS HomeAddressLine3,
        coalesce(Employee.city, ''::varchar) AS HomeCity,
        ''::varchar AS HomeNeighborhood,
        coalesce(Employee.state, ''::varchar) AS HomeStateProvince,
        coalesce(Employee.zip, ''::varchar) AS HomePostalCode,
        ''::varchar AS HomePostalCodeExtension,
        'US'::varchar(2) AS HomeCountryCode,
        coalesce(Employee.business_address_line1, ''::varchar) AS WorkAddressLine1,
        coalesce(Employee.business_address_line2, ''::varchar) AS WorkAddressLine2,
        ''::varchar AS WorkAddressLine3,
        coalesce(Employee.business_city, ''::varchar) AS WorkCity,
        ''::varchar AS WorkNeighborhood,
        coalesce(Employee.business_state, ''::varchar) AS WorkStateProvince,
        coalesce(Employee.business_zip, ''::varchar) AS WorkPostalCode,
        ''::varchar AS WorkPostalCodeExtension,
        'US'::varchar(2) AS WorkCountryCode,
        coalesce(Employee.mobile_phone, ''::varchar) AS WorkPhone,
        ''::varchar AS WorkPhoneExtension,
        coalesce(Employee.email, ''::varchar) AS EmailAddress,
        coalesce(Employee.fax, ''::varchar) AS Fax,
        'US'::varchar(2) AS RegionId,
        coalesce((Employee.hire_date)::varchar(10), ''::varchar) AS HireDate,
        ''::varchar AS TerminationDate,
        'Active'::varchar(6) AS Status
 FROM (datamart.roster Employee LEFT  JOIN datamart.roster Manager ON ((Employee.parent_territory_number = Manager.territory_number)))
 WHERE ((Employee.employee_id IS NOT NULL) AND (Employee.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2)])));

CREATE  VIEW outbound.anda_ajovyTRx_monthly AS
 SELECT r.ims_id AS IMS_ID,
        r.tvcmid,
        r.prescriber_first_name,
        r.prescriber_last_name,
        r.rollup_month,
        sum(CASE WHEN (r.basket_name ~~* '%AJOVY%'::varchar(7)) THEN r.trx_count ELSE 0::numeric(18,0) END) AS Sum_AJOVY_TRx,
        sum(CASE WHEN (r.basket_name ~~* '%AIMOVIG%'::varchar(9)) THEN r.trx_count ELSE 0::numeric(18,0) END) AS Sum_AIMOVIG_TRx,
        sum(CASE WHEN (r.basket_name ~~* '%EMGALITY%'::varchar(10)) THEN r.trx_count ELSE 0::numeric(18,0) END) AS Sum_EMGALITY_TRx,
        sum(r.trx_count) AS Sum_ANTICGRP_TRx
 FROM ((datamart.prescriber_rx r JOIN ( SELECT prescriber_rx.rollup_month AS month_end
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.market_name ~~* '%ANTI-MIGRAINE MARKET%'::varchar(22)) AND (prescriber_rx.rollup_flag IS NULL) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.rollup_month <= last_day((trunc((now())::timestamp, 'DD'::varchar(2)) + '-1'::interval month))))
 GROUP BY prescriber_rx.rollup_month
 ORDER BY prescriber_rx.rollup_month DESC
 LIMIT 12) m ON ((r.rollup_month = m.month_end))) JOIN ( SELECT b.basket_id,
        b.name
 FROM ((product.basket m JOIN product.basket_item mi ON ((mi.basket_id = m.basket_id))) JOIN product.basket b ON ((b.basket_id = mi.entity_id)))
 WHERE ((m.basket_type = 'submarket'::varchar(9)) AND (m.name = 'ANTI-CGRP'::varchar(9)))) a ON ((r.basket_id = a.basket_id)))
 WHERE ((r.market_name ~~* '%ANTI-MIGRAINE MARKET%'::varchar(22)) AND (r.rollup_flag IS NULL) AND (r.report_frequency = 'SPLITWEEK'::varchar(9)) AND (r.ims_id <= '9499999'::varchar(7)))
 GROUP BY r.ims_id,
          r.tvcmid,
          r.prescriber_first_name,
          r.prescriber_last_name,
          r.rollup_month
 ORDER BY r.ims_id,
          r.rollup_month;

CREATE  VIEW outbound.anda_austedoTRx_monthly AS
 SELECT r.ims_id AS IMS_ID,
        r.tvcmid,
        r.prescriber_first_name,
        r.prescriber_last_name,
        r.rollup_month,
        sum(r.trx_count) AS AUSTEDO_TRx
 FROM (datamart.prescriber_rx r JOIN ( SELECT prescriber_rx.rollup_month AS month_end
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.basket_name ~~* '%AUSTEDO%'::varchar(9)) AND (prescriber_rx.rollup_flag IS NULL) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.rollup_month <= last_day((trunc((now())::timestamp, 'DD'::varchar(2)) + '-1'::interval month))))
 GROUP BY prescriber_rx.rollup_month
 ORDER BY prescriber_rx.rollup_month DESC
 LIMIT 12) m ON ((r.rollup_month = m.month_end)))
 WHERE ((r.basket_name ~~* '%AUSTEDO%'::varchar(9)) AND (r.rollup_flag IS NULL) AND (r.report_frequency = 'SPLITWEEK'::varchar(9)) AND (r.ims_id <= '9499999'::varchar(7)))
 GROUP BY r.ims_id,
          r.tvcmid,
          r.prescriber_first_name,
          r.prescriber_last_name,
          r.rollup_month
 ORDER BY r.ims_id,
          r.rollup_month;

CREATE  VIEW outbound.zs_xpd_addon_details_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.channel_indicator,
        rx.ims_id,
        rx.tvcmid,
        pcd.specialty,
        xref.specialty_group,
        rx.addon_from_product_group_num,
        rx.addon_from_basket_id,
        rx.addon_from_basket_name,
        rx.addon_to_product_group_num,
        rx.addon_to_basket_id,
        rx.addon_to_basket_name,
        rx.rollup_period,
        rx.addon_rx,
        rx.report_frequency
 FROM ((datamart.xpd_add_on_details rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.channel_indicator,
          rx.ims_id,
          rx.tvcmid,
          pcd.specialty,
          xref.specialty_group,
          rx.addon_from_product_group_num,
          rx.addon_from_basket_id,
          rx.addon_from_basket_name,
          rx.addon_to_product_group_num,
          rx.addon_to_basket_id,
          rx.addon_to_basket_name,
          rx.rollup_period,
          rx.addon_rx,
          rx.report_frequency;

CREATE  VIEW outbound.zs_revo_engage_call_activity AS
 SELECT engage_call_activity.call_id,
        engage_call_activity.engage_meeting_id,
        engage_call_activity.sales_force_id,
        engage_call_activity.territory_number,
        engage_call_activity.tvcmid,
        engage_call_activity.call_record_type,
        engage_call_activity.call_type,
        engage_call_activity.customer_type,
        engage_call_activity.how_executed,
        engage_call_activity.rep_first_name,
        engage_call_activity.rep_last_name,
        engage_call_activity.hcp_first_name,
        engage_call_activity.hcp_last_name,
        engage_call_activity.hco_name,
        engage_call_activity.call_date,
        engage_call_activity.address,
        engage_call_activity.first_product_detailed,
        engage_call_activity.second_product_detailed,
        engage_call_activity.third_product_detailed,
        engage_call_activity.meeting_scheduled_date,
        engage_call_activity.latest_meeting_start_date,
        engage_call_activity.meeting_duration,
        engage_call_activity.non_host_attendees,
        engage_call_activity.avg_attendee_duration,
        engage_call_activity.hcp_invites,
        engage_call_activity.teva_engage_meeting_status,
        engage_call_activity.attendance_report_process_status_vod__c,
        engage_call_activity.meeting_outcome_status_vod__c
 FROM reporting.engage_call_activity
 WHERE ((engage_call_activity.first_product_detailed <> ALL (ARRAY['Blink Health – AJOVY'::varchar(24), 'Blink Health – AUSTEDO'::varchar(24), 'Unassociated'::varchar(24)])) AND (engage_call_activity.second_product_detailed <> ALL (ARRAY['Blink Health – AJOVY'::varchar(24), 'Blink Health – AUSTEDO'::varchar(24), 'Unassociated'::varchar(24)])) AND (engage_call_activity.third_product_detailed <> ALL (ARRAY['Blink Health – AJOVY'::varchar(24), 'Blink Health – AUSTEDO'::varchar(24), 'Unassociated'::varchar(24)])) AND (engage_call_activity.call_date >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))));

CREATE  VIEW outbound.zs_revo_approved_email AS
 SELECT approved_email.veeva_sent_email_id,
        approved_email.sent_email_id,
        approved_email.product,
        approved_email.date_sent,
        approved_email.status,
        approved_email.failure_message,
        approved_email.veeva_account_id,
        approved_email.tvcmid,
        approved_email.veeva_call_id,
        approved_email.call_id,
        approved_email.sender_email,
        approved_email.territory,
        approved_email.recipient_email,
        approved_email.click_count,
        approved_email.open_count,
        approved_email.last_open_date,
        approved_email.valid_consent,
        approved_email.delivered,
        approved_email.opened,
        approved_email.dropped,
        approved_email.clicked,
        approved_email.downloaded,
        approved_email.viewed,
        approved_email.template_id,
        approved_email.template_name,
        approved_email.event_msg_vod__c,
        approved_email.click_url_vod__c,
        approved_email.subject
 FROM reporting.approved_email
 WHERE ((upper(approved_email.template_name) !~~ upper('%Blink%'::varchar(7))) AND (approved_email.date_sent >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))));

CREATE  VIEW outbound.speakers_weekly AS
 SELECT ap.sourcesystemid,
        ap.batchdate,
        ap.transactionstatuscode,
        ap.interactioncode,
        ap.clientcustomerid,
        ap.participanttype,
        ap.firstname,
        ap.middlename,
        ap.lastname,
        ap.suffix,
        ap.professionaldesignation,
        ap.primaryspecialty,
        ap.organizationname,
        ap.clientaddressid,
        ap.addressline1,
        ap.addressline2,
        ap.addressline3,
        ap.addresscity,
        ap.addressstateprovince,
        ap.addresspostalcode,
        ap.addresspostalcodeextension,
        ap.addresscountry,
        ap.region,
        ap.primarystatelicensestate,
        ap.primarystatelicensenumber,
        ap.attended,
        ap.mealconsumed,
        ap.contractid,
        ap.clientcontractid,
        ap.contractname,
        ap.contractcategory,
        ap.contractsubcategory,
        ap.contractclassification,
        ap.contracttier,
        ap.contracteffectivedate,
        ap.contractexpirationdate,
        ai.interactionname,
        ai.interactioncategory,
        ai.interactiontype,
        ai.locationtype,
        ai.interactionstatus,
        ai.interactionstartdate,
        ai.interactionenddate,
        ai.interactionstartdatetime,
        ai.interactionenddatetime,
        ai.requestingregion,
        ai.parentinteractioncode,
        ai.clientemployeeid,
        ai.employeefirstname,
        ai.employeelastname,
        ai.employeeorganizationunitcode,
        ai.employeeorganizationunitname,
        ai.venuename,
        ai.venueaddressline1,
        ai.venueaddressline2,
        ai.venueaddressline3,
        ai.venuecity,
        ai.venuestateprovince,
        ai.venuepostalcode,
        ai.venuecountry,
        ai.venueregion,
        ai.totalestimatedparticipantcount,
        ai.financialcloseddate,
        ai.product1name,
        ai.topic1name,
        ai.product2name,
        ai.topic2name,
        ai.product3name,
        ai.topic3name,
        ai.product4name,
        ai.topic4name,
        ai.product5name,
        ai.topic5name
 FROM (datamart.ahm_participant ap JOIN datamart.ahm_interactions ai ON (((ap.interactionid = ai.interactionid) AND (ai.batchdate = ap.batchdate) AND ((ai.product1name = ANY (ARRAY['AUSTEDO'::varchar(19), 'AJOVY'::varchar(19), 'Digihaler Portfolio'::varchar(19)])) OR (ai.product2name = ANY (ARRAY['AUSTEDO'::varchar(19), 'AJOVY'::varchar(19), 'Digihaler Portfolio'::varchar(19)])) OR (ai.product3name = ANY (ARRAY['AUSTEDO'::varchar(19), 'AJOVY'::varchar(19), 'Digihaler Portfolio'::varchar(19)])) OR (ai.product4name = ANY (ARRAY['AUSTEDO'::varchar(19), 'AJOVY'::varchar(19), 'Digihaler Portfolio'::varchar(19)])) OR (ai.product5name = ANY (ARRAY['AUSTEDO'::varchar(19), 'AJOVY'::varchar(19), 'Digihaler Portfolio'::varchar(19)]))) AND (ai.interactionstartdate >= trunc((now() + '-24'::interval month), 'month'::varchar(5))))))
 GROUP BY ap.sourcesystemid,
          ap.batchdate,
          ap.transactionstatuscode,
          ap.interactioncode,
          ap.clientcustomerid,
          ap.participanttype,
          ap.firstname,
          ap.middlename,
          ap.lastname,
          ap.suffix,
          ap.professionaldesignation,
          ap.primaryspecialty,
          ap.organizationname,
          ap.clientaddressid,
          ap.addressline1,
          ap.addressline2,
          ap.addressline3,
          ap.addresscity,
          ap.addressstateprovince,
          ap.addresspostalcode,
          ap.addresspostalcodeextension,
          ap.addresscountry,
          ap.region,
          ap.primarystatelicensestate,
          ap.primarystatelicensenumber,
          ap.attended,
          ap.mealconsumed,
          ap.contractid,
          ap.clientcontractid,
          ap.contractname,
          ap.contractcategory,
          ap.contractsubcategory,
          ap.contractclassification,
          ap.contracttier,
          ap.contracteffectivedate,
          ap.contractexpirationdate,
          ai.interactionname,
          ai.interactioncategory,
          ai.interactiontype,
          ai.locationtype,
          ai.interactionstatus,
          ai.interactionstartdate,
          ai.interactionenddate,
          ai.interactionstartdatetime,
          ai.interactionenddatetime,
          ai.requestingregion,
          ai.parentinteractioncode,
          ai.clientemployeeid,
          ai.employeefirstname,
          ai.employeelastname,
          ai.employeeorganizationunitcode,
          ai.employeeorganizationunitname,
          ai.venuename,
          ai.venueaddressline1,
          ai.venueaddressline2,
          ai.venueaddressline3,
          ai.venuecity,
          ai.venuestateprovince,
          ai.venuepostalcode,
          ai.venuecountry,
          ai.venueregion,
          ai.totalestimatedparticipantcount,
          ai.financialcloseddate,
          ai.product1name,
          ai.topic1name,
          ai.product2name,
          ai.topic2name,
          ai.product3name,
          ai.topic3name,
          ai.product4name,
          ai.topic4name,
          ai.product5name,
          ai.topic5name;

CREATE  VIEW outbound.mcm_digihaler_copay AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.pharmacy_chain_number,
        copay.nabp,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.create_date,
        copay.occ_payment_type,
        copay.counted_copay,
        copay.auth_refills,
        copay.admin_hcp_npi,
        copay.admin_hcp_name,
        copay.admin_hcp_address,
        copay.admin_hcp_address2,
        copay.admin_hcp_city,
        copay.admin_hcp_state,
        copay.admin_hcp_zip,
        copay.claim_type,
        copay.administration_flag,
        copay.soc_name,
        copay.soc_phone,
        copay.soc_fax,
        copay.soc_address,
        copay.soc_city,
        copay.soc_state,
        copay.soc_zip,
        copay.soc_id,
        copay.soc_npi,
        copay.payer_name,
        copay.cpt_code,
        copay.trans_type,
        copay.previous_payer_id,
        copay.member_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.report_frequency,
        copay.source_name,
        copay.file_id,
        copay.record_id,
        copay.patient_type,
        copay.primary_bin,
        copay.primary_bin_description,
        copay.reject_code
 FROM datamart.copay
 WHERE (copay.basket_name ~~ '%DIGIHALER%'::varchar(11))
 ORDER BY copay.fill_date;

CREATE  VIEW outbound.v_ob_ahm_orgstructure AS
 SELECT R.territory_number AS OrganizationUnitId,
        coalesce(R.territory_name, ''::varchar) AS OrganizationUnitName,
        'ORGU'::varchar(4) AS OrganizationUnitType,
        CASE WHEN (G.geography_type = 'Territory'::varchar(9)) THEN 'TERR'::varchar(4) WHEN (G.geography_type = 'Region'::varchar(6)) THEN 'DIST'::varchar(4) WHEN (G.geography_type = 'Area'::varchar(4)) THEN 'REG'::varchar(3) ELSE NULL END AS OrganizationUnitSubType,
        CASE WHEN (G.geography_type = 'Area'::varchar(4)) THEN CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END ELSE coalesce(G.parent_geography_number, ''::varchar) END AS ParentOrganizationUnitId,
        'US'::varchar(2) AS RegionId,
        'TEVA'::varchar(4) AS CompanyId,
        B.ref_code AS BusinessUnitId,
        CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END AS OrganizationId,
        ''::varchar AS TeamId,
        '2017-01-01'::varchar(10) AS EffectiveDate,
        '2040-12-31'::varchar(10) AS EndDate,
        'ACTIVE'::varchar(6) AS Status
 FROM datamart.roster R, datamart.sales_geography G, reference.salesforce_reference B, reference.salesforce_reference P
 WHERE ((R.territory_number = G.geography_number) AND (R.sales_force_id = B.sales_force_id) AND (B.ref_type = 'Bus_Unit'::varchar(8)) AND (R.sales_force_id = P.sales_force_id) AND (P.ref_type = 'Org_ID'::varchar(6)) AND (R.territory_number IS NOT NULL) AND (R.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)])) AND ((R.territory_number !~~ '%ZZZZ99'::varchar(7)) OR (R.territory_number <> ALL (ARRAY['TRZZZZ99'::varchar(8), 'TOSCGZ02'::varchar(8), 'TOSCGZ03'::varchar(8), 'TOSCGZ04'::varchar(8), 'TEZZZZZZ'::varchar(8)]))) AND (G.geography_type <> 'National'::varchar(8)))
 GROUP BY R.territory_number,
          coalesce(R.territory_name, ''::varchar),
          'ORGU'::varchar(4),
          CASE WHEN (G.geography_type = 'Territory'::varchar(9)) THEN 'TERR'::varchar(4) WHEN (G.geography_type = 'Region'::varchar(6)) THEN 'DIST'::varchar(4) WHEN (G.geography_type = 'Area'::varchar(4)) THEN 'REG'::varchar(3) ELSE NULL END,
          CASE WHEN (G.geography_type = 'Area'::varchar(4)) THEN CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END ELSE coalesce(G.parent_geography_number, ''::varchar) END,
          'US'::varchar(2),
          'TEVA'::varchar(4),
          B.ref_code,
          CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END,
          ''::varchar,
          '2017-01-01'::varchar(10),
          '2040-12-31'::varchar(10),
          'ACTIVE'::varchar(6) UNION  SELECT R.territory_number AS OrganizationUnitId,
        coalesce(R.territory_name, ''::varchar) AS OrganizationUnitName,
        'ORGU'::varchar(4) AS OrganizationUnitType,
        'REG'::varchar(3) AS OrganizationUnitSubType,
        CASE WHEN (G.geography_type = 'Area'::varchar(4)) THEN CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END ELSE coalesce(G.parent_geography_number, ''::varchar) END AS ParentOrganizationUnitId,
        'US'::varchar(2) AS RegionId,
        'TEVA'::varchar(4) AS CompanyId,
        B.ref_code AS BusinessUnitId,
        CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END AS OrganizationId,
        ''::varchar AS TeamId,
        '2017-01-01'::varchar(10) AS EffectiveDate,
        '2040-12-31'::varchar(10) AS EndDate,
        'ACTIVE'::varchar(6) AS Status
 FROM datamart.roster R, datamart.sales_geography G, reference.salesforce_reference B, reference.salesforce_reference P
 WHERE ((R.territory_number = G.geography_number) AND (R.sales_force_id = B.sales_force_id) AND (B.ref_type = 'Bus_Unit'::varchar(8)) AND (R.sales_force_id = P.sales_force_id) AND (P.ref_type = 'Org_ID'::varchar(6)) AND (R.territory_number IS NOT NULL) AND (R.territory_number = 'TRZZZZ00'::varchar(8)))
 GROUP BY R.territory_number,
          coalesce(R.territory_name, ''::varchar),
          'ORGU'::varchar(4),
          'REG'::varchar(3),
          CASE WHEN (G.geography_type = 'Area'::varchar(4)) THEN CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END ELSE coalesce(G.parent_geography_number, ''::varchar) END,
          'US'::varchar(2),
          'TEVA'::varchar(4),
          B.ref_code,
          CASE WHEN (substr(R.territory_number, 1, 3) = 'TEC'::varchar(3)) THEN 'CNS_PS'::varchar(6) WHEN (substr(R.territory_number, 1, 3) = 'TER'::varchar(3)) THEN 'RES_PS'::varchar(6) ELSE P.ref_code END,
          ''::varchar,
          '2017-01-01'::varchar(10),
          '2040-12-31'::varchar(10),
          'ACTIVE'::varchar(6);

CREATE  VIEW outbound.zzz_gcsf_dmd AS
 SELECT DISTINCT coalesce(ca.territory_number, 'TOHZHZ99'::varchar(8)) AS TERRITORY_NUM,
        dm.ims_outlet_code AS IMS_OUTLET_CODE,
        dm.subcategory_code AS SUBCATEGORY_CODE,
        cat.category_code AS CATEGORY_CODE,
        dm.ims_product_code AS IMS_PRODUCT_CODE,
        ba.teva_product_code AS PRODUCT_CODE,
        to_char(dm.data_date, 'YYYYMM'::varchar(6)) AS MTH_YYYYMM,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), 0)) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH01,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-1))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH02,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-2))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH03,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-3))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH04,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-4))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH05,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-5))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH06,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-6))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH07,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-7))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH08,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-8))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH09,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-9))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH010,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-10))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH011,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-11))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH012,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-12))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH013,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-13))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH014,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-14))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH015,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-15))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH016,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-16))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH017,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-17))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH018,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-18))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH019,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-19))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH020,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-20))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH021,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-21))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH022,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-22))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH023,
        sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-23))) THEN dm.dollars ELSE NULL::float END) AS DOL_MTH024,
        dm.outlet_name AS OUTLET_NAME,
        iom.address AS OUTLET_ADDRESS,
        iom.city AS OUTLET_CITY,
        iom.state AS OUTLET_STATE,
        iom.zip AS OUTLET_ZIP
 FROM (((((((((integration.ddd_md dm JOIN ( SELECT max(ddd.file_id) AS file_id,
        df.feed_id
 FROM (integration.ddd_md ddd JOIN metadata.data_file_metadata df ON ((ddd.file_id = df.file_id)))
 WHERE (df.feed_id = 318)
 GROUP BY df.feed_id) dollar_files ON ((dm.file_id = dollar_files.file_id))) JOIN metadata.data_file_metadata md ON ((dm.file_id = md.file_id))) LEFT  JOIN product.source_product sp ON (((sp.source_product_code = dm.ims_product_code) AND (sp.source_client_num = dm.client_number) AND (sp.source_report_num = dm.report_number) AND (sp.feed_id = md.feed_id) AND (sp.feed_version = md.feed_version)))) JOIN ( SELECT bi.entity_id AS eid,
        b.name AS product_name,
        c.name AS brand_name
 FROM product.basket_item bi, product.basket b, product.basket c
 WHERE ((bi.entity_id = b.basket_id) AND (bi.basket_id = c.basket_id) AND (c.basket_type = 'brand'::varchar(5)) AND (c.name = ANY (ARRAY['NEUPOGEN'::varchar(8), 'GRANIX'::varchar(6), 'LEUKINE'::varchar(7)])))) y ON ((sp.entity_id = y.eid))) LEFT  JOIN reference.ddd_subcategory sub ON ((dm.subcategory_code = sub.subcategory_code))) LEFT  JOIN reference.ddd_category cat ON ((sub.category_code = cat.category_code))) LEFT  JOIN product.basket ba ON ((sp.entity_id = ba.basket_id))) LEFT  JOIN datamart.ims_outlet_master iom ON ((dm.ims_outlet_code = iom.outlet_number))) LEFT  JOIN ( SELECT current_alignment.zip_code,
        current_alignment.city,
        current_alignment.state_code,
        current_alignment.territory_number,
        current_alignment.territory_name,
        current_alignment.area_number,
        current_alignment.area_name,
        current_alignment.region_number,
        current_alignment.region_name,
        current_alignment.sales_force_id,
        current_alignment.organization_code,
        current_alignment.inactive_flag,
        current_alignment.comments,
        current_alignment.mirror_flag,
        current_alignment.mirror_territory_number,
        current_alignment.file_id,
        current_alignment.record_id
 FROM datamart.current_alignment
 WHERE ((current_alignment.sales_force_id = 'TO'::varchar(2)) AND (current_alignment.mirror_flag = 'N'::varchar(1)))) ca ON ((dm.outlet_zip = ca.zip_code)))
 GROUP BY ca.territory_number,
          dm.ims_outlet_code,
          dm.subcategory_code,
          cat.category_code,
          dm.ims_product_code,
          ba.teva_product_code,
          to_char(dm.data_date, 'YYYYMM'::varchar(6)),
          dm.outlet_name,
          iom.address,
          iom.city,
          iom.state,
          iom.zip,
          dm.alt_seq_number
 ORDER BY coalesce(ca.territory_number, 'TOHZHZ99'::varchar(8)),
          dm.ims_outlet_code,
          dm.subcategory_code,
          cat.category_code,
          dm.ims_product_code,
          ba.teva_product_code,
          to_char(dm.data_date, 'YYYYMM'::varchar(6)),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), 0)) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-1))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-2))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-3))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-4))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-5))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-6))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-7))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-8))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-9))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-10))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-11))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-12))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-13))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-14))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-15))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-16))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-17))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-18))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-19))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-20))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-21))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-22))) THEN dm.dollars ELSE NULL::float END),
          sum(CASE WHEN (dm.bucket_date = add_months(last_day(dm.data_date), (-23))) THEN dm.dollars ELSE NULL::float END),
          dm.outlet_name,
          iom.address,
          iom.city,
          iom.state,
          iom.zip;

CREATE  VIEW outbound.zzz_REMS_EXTRACT AS
 SELECT coalesce(veeva.id_num, ims.id_num) AS ACCOUNT_ID,
        ca.territory_number,
        R.site_name AS account_name,
        R.address_line_1 AS address1,
        R.address_line_2 AS address2,
        NULL AS address3,
        R.city,
        R.state,
        R.zip,
        'Y'::varchar(1) AS primary_address,
        R.phone AS phone_number,
        fact.ims_org_id AS EXTERNAL_ID,
        'HOSPITAL'::varchar(8) AS CUSTOMER_TYPE,
        NULL AS BPNUMBER,
        NULL AS SUBTYPE,
        NULL AS CM_ID
 FROM ((((datamart.rems_prescriber R LEFT  JOIN ( SELECT current_alignment.zip_code,
        current_alignment.city,
        current_alignment.state_code,
        current_alignment.territory_number,
        current_alignment.territory_name,
        current_alignment.area_number,
        current_alignment.area_name,
        current_alignment.region_number,
        current_alignment.region_name,
        current_alignment.sales_force_id,
        current_alignment.organization_code,
        current_alignment.inactive_flag,
        current_alignment.comments,
        current_alignment.mirror_flag,
        current_alignment.mirror_territory_number,
        current_alignment.file_id,
        current_alignment.record_id
 FROM datamart.current_alignment) ca ON ((R.zip = ca.zip_code))) LEFT  JOIN hcos.ims_hcos_identifier_fact fact ON (((fact.identifier_id = 15::numeric(18,0)) AND (fact.identifier = R.npi)))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        max(tvcmid_xref.id_num) AS id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'VEEVA_ID'::varchar(8))
 GROUP BY tvcmid_xref.tvcmid) veeva ON ((R.prescriber_tvcmid = veeva.tvcmid))) LEFT  JOIN ( SELECT ims.tvcmid,
        max(ims.id_num) AS id_num
 FROM datamart.tvcmid_xref ims
 WHERE (ims.id_type = 'IMS_ID'::varchar(6))
 GROUP BY ims.tvcmid) ims ON ((R.prescriber_tvcmid = ims.tvcmid)));

CREATE  VIEW outbound.DDDMD_WEEKLY_UNITS AS
 SELECT EXT_TR_DDDMD_WEEKLY_UNITS_src.client_num,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.report_num,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.ims_outlet_code,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.subcategory_code,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.alt_seq_num,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.filler01,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.category_code,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.ims_product_code,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.data_date,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk01,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk02,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk03,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk04,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk05,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk06,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk07,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk08,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk09,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk10,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk11,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk12,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk13,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk14,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk15,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk16,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk17,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk18,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk19,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk20,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk21,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk22,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk23,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk24,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk25,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk26,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk27,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk28,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk29,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk30,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk31,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk32,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk33,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk34,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk35,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk36,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk37,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk38,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk39,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk40,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk41,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk42,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk43,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk44,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk45,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk46,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk47,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk48,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk49,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk50,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk51,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk52,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk53,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk54,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk55,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk56,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk57,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk58,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk59,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk60,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk61,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk62,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk63,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk64,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk65,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk66,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk67,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk68,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk69,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk70,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk71,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk72,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk73,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk74,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk75,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk76,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk77,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk78,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk79,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk80,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk81,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk82,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk83,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk84,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk85,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk86,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk87,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk88,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk89,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk90,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk91,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk92,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk93,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk94,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk95,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk96,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk97,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk98,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk99,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk100,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk101,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk102,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk103,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk104,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk105,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.qty_wk106,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.outlet_name,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.outlet_address,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.outlet_city,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.outlet_state,
        EXT_TR_DDDMD_WEEKLY_UNITS_src.outlet_zip
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_UNITS_src
 WHERE (EXT_TR_DDDMD_WEEKLY_UNITS_src.batch_id IN ( SELECT max(EXT_TR_DDDMD_WEEKLY_UNITS_src.batch_id) AS max
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_UNITS_src));

CREATE  VIEW outbound.DDDMD_WEEKLY_DEMO_UNITS AS
 SELECT EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.client_num,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.report_num,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.ims_outlet_code,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.ims_facility_number,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.ims_prescriber_number,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.outlet_name,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.outlet_address,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.outlet_city,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.outlet_state,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.outlet_zip,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_name,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_address1,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_address2,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_address3,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_address4,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_city,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_state,
        EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.facility_prescriber_zip
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src
 WHERE (EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.batch_id IN ( SELECT max(EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src.batch_id) AS max
 FROM teva_ingestion.EXT_TR_DDDMD_WEEKLY_DEMO_UNITS_src));

CREATE  VIEW outbound.zzz_create_paragard_specialty_rx AS
SELECT sh.source_customer_id AS "BP #", NULL AS "Ortho E", sh.customer_name AS "BP Name", coalesce(sh.ship_to_address_line_2, sh.ship_to_address_line_1) AS "Ship-to Street", sh.ship_to_city AS "Ship-to City", sh.ship_to_state AS "Ship-to State", sh.ship_to_zip AS "Ship-to ZipCd", NULL AS "Ship-to Ctry", NULL AS "Ship-to Phone", NULL AS "Ship-to Fax", NULL AS "Ship-to Email", ad.address AS "Bill-to Street", ad.city AS "Bill-to City", ad.state AS "Bill-to State", ad.zip_code AS "Bill-to ZipCd", NULL AS "Bill-to Ctry", NULL AS "Bill-to Phone", NULL AS "Bill-to Fax", NULL AS "Bill-to Email", CASE mod(sh.customer_type, 1::float) WHEN NULLSEQUAL 0::float THEN sh.customer_type ELSE rtrim(sh.customer_type, '0'::varchar(1)) END AS "Class of Trade", CASE mod(sh.order_no, 1::float) WHEN NULLSEQUAL 0::float THEN (((sh.order_no)::numeric)::int)::varchar ELSE rtrim(sh.order_no, '0'::varchar(1)) END AS "Invoice #", CASE mod(sh.net_cost, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.net_cost)::int)::varchar ELSE rtrim((sh.net_cost)::varchar, '0'::varchar(1)) END AS "Del Amt", to_char(sh.invoice_date, 'YYYY-MM-DD'::varchar(10)) AS "Inv Date", CASE mod(sh.quantity, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.quantity)::int)::varchar ELSE rtrim((sh.quantity)::varchar, '0'::varchar(1)) END AS "24237", NULL AS "24238", NULL AS "24800", NULL AS "33223", CASE mod(sh.package_size, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (sh.package_size)::varchar ELSE rtrim((sh.package_size)::varchar, '0'::varchar(1)) END AS Packs, NULL AS UnitPrice, NULL AS Territory, NULL AS "Order Type Cd", NULL AS "Order Type Desc", NULL AS LOBCdDesc, NULL AS PriceMatrixDef, ('A'::varchar(1) || btrim(to_char(sh.source_parent_customer_id, '000000000'::varchar(9)))) AS ParentBPCd, NULL AS ParentBPCdDesc, NULL AS GrandParentBPCdDesc, NULL AS "PO#", NULL AS "UPS#", CASE mod(sh.order_no, 1::float) WHEN NULLSEQUAL 0::float THEN (((sh.order_no)::numeric)::int)::varchar ELSE rtrim(sh.order_no, '0'::varchar(1)) END AS OrdNbr, NULL AS OrdLnNbr, NULL AS DiscAmt, NULL AS WhseCd, 'ANDA'::varchar(4) AS Data_Source, '51285020401'::varchar(11) AS NDC11_CODE FROM ((datamart.specialty_pharmacy_shipment sh LEFT JOIN (SELECT tw_address.address_id, tw_address.address, tw_address.city, tw_address.state, tw_address.zip_code FROM datamart.tw_address) ad ON ((sh.tw_bill_to_address_id = ad.address_id))) JOIN product.basket b ON ((b.basket_id = sh.basket_id))) WHERE ((b.name = 'PARAGARD'::varchar(8)) AND (b.basket_type = 'product'::varchar(7)) AND (sh.specialty_pharmacy_data_source = 'Anda'::varchar(4))) GROUP BY sh.source_customer_id, NULL, sh.customer_name, coalesce(sh.ship_to_address_line_2, sh.ship_to_address_line_1), sh.ship_to_city, sh.ship_to_state, sh.ship_to_zip, ad.address, ad.city, ad.state, ad.zip_code, CASE mod(sh.customer_type, 1::float) WHEN NULLSEQUAL 0::float THEN sh.customer_type ELSE rtrim(sh.customer_type, '0'::varchar(1)) END, CASE mod(sh.order_no, 1::float) WHEN NULLSEQUAL 0::float THEN (((sh.order_no)::numeric)::int)::varchar ELSE rtrim(sh.order_no, '0'::varchar(1)) END, CASE mod(sh.net_cost, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.net_cost)::int)::varchar ELSE rtrim((sh.net_cost)::varchar, '0'::varchar(1)) END, to_char(sh.invoice_date, 'YYYY-MM-DD'::varchar(10)), CASE mod(sh.quantity, 1::float) WHEN NULLSEQUAL 0::float THEN ((sh.quantity)::int)::varchar ELSE rtrim((sh.quantity)::varchar, '0'::varchar(1)) END, CASE mod(sh.package_size, 1::numeric(18,0)) WHEN NULLSEQUAL 0::numeric(18,0) THEN (sh.package_size)::varchar ELSE rtrim((sh.package_size)::varchar, '0'::varchar(1)) END, ('A'::varchar(1) || btrim(to_char(sh.source_parent_customer_id, '000000000'::varchar(9))));

CREATE  VIEW outbound.axiom_patient_transaction AS
 SELECT specialty_pharmacy_patient_txn.patient_yob,
        specialty_pharmacy_patient_txn.patient_gender,
        specialty_pharmacy_patient_txn.ims_surrogate_patient_id,
        specialty_pharmacy_patient_txn.product_ndc,
        specialty_pharmacy_patient_txn.product_name,
        specialty_pharmacy_patient_txn.product_strength,
        specialty_pharmacy_patient_txn.unit_of_measure,
        specialty_pharmacy_patient_txn.extended_wac_price,
        specialty_pharmacy_patient_txn.transaction_id,
        specialty_pharmacy_patient_txn.patient_status_date,
        specialty_pharmacy_patient_txn.patient_status_,
        specialty_pharmacy_patient_txn.patient_sub_status,
        specialty_pharmacy_patient_txn.specialty_pharmacy_patient_or_case_id,
        specialty_pharmacy_patient_txn.primary_icd_9,
        specialty_pharmacy_patient_txn.primary_icd_10,
        specialty_pharmacy_patient_txn.script_receipt_date,
        specialty_pharmacy_patient_txn.primary_appeal_status,
        specialty_pharmacy_patient_txn.primary_copay_type,
        specialty_pharmacy_patient_txn.primary_deductible,
        specialty_pharmacy_patient_txn.primary_pa_required,
        specialty_pharmacy_patient_txn.primary_copay_amount,
        specialty_pharmacy_patient_txn.primary_payer_name,
        specialty_pharmacy_patient_txn.primary_plan_name,
        specialty_pharmacy_patient_txn.primary_payer_type,
        specialty_pharmacy_patient_txn.primary_plan_type,
        specialty_pharmacy_patient_txn.primary_payer_reject_reason_code,
        specialty_pharmacy_patient_txn.primary_reimbursement_status,
        specialty_pharmacy_patient_txn.primary_reimbursement_status_date,
        specialty_pharmacy_patient_txn.primary_step_therapy_required,
        specialty_pharmacy_patient_txn.secondary_copay_type,
        specialty_pharmacy_patient_txn.secondary_deductible,
        specialty_pharmacy_patient_txn.secondary_pa_required,
        specialty_pharmacy_patient_txn.secondary_copay_amount,
        specialty_pharmacy_patient_txn.secondary_payer_name,
        specialty_pharmacy_patient_txn.secondary_plan_name,
        specialty_pharmacy_patient_txn.secondary_payer_type,
        specialty_pharmacy_patient_txn.secondary_plan_type,
        specialty_pharmacy_patient_txn.secondary_payer_reject_reason_code,
        specialty_pharmacy_patient_txn.secondary_step_therapy_required,
        specialty_pharmacy_patient_txn.ncpdp_number,
        specialty_pharmacy_patient_txn.pharmacy_name,
        specialty_pharmacy_patient_txn.pharmacy_zip,
        specialty_pharmacy_patient_txn.prescribing_physician_first_name,
        specialty_pharmacy_patient_txn.prescribing_physician_last_name,
        specialty_pharmacy_patient_txn.prescribing_physician_middle_initial,
        specialty_pharmacy_patient_txn.prescribing_physician_dea_number,
        specialty_pharmacy_patient_txn.prescribing_physician_me_number,
        specialty_pharmacy_patient_txn.prescribing_physician_npi_number,
        specialty_pharmacy_patient_txn.prescribing_physician_address_1,
        specialty_pharmacy_patient_txn.prescribing_physician_address_2,
        specialty_pharmacy_patient_txn.prescribing_physician_city,
        specialty_pharmacy_patient_txn.prescribing_physician_state,
        specialty_pharmacy_patient_txn.prescribing_physician_zip,
        specialty_pharmacy_patient_txn.number_of_fills_prescribed,
        specialty_pharmacy_patient_txn.number_of_refills_remaining,
        specialty_pharmacy_patient_txn.fill_type,
        specialty_pharmacy_patient_txn.rx_date,
        specialty_pharmacy_patient_txn.rx_number,
        specialty_pharmacy_patient_txn.carrier,
        specialty_pharmacy_patient_txn.date_of_drug_receipt,
        specialty_pharmacy_patient_txn.initial_ship_date,
        specialty_pharmacy_patient_txn.quantity_shipped,
        specialty_pharmacy_patient_txn.out_of_pocket_cost,
        specialty_pharmacy_patient_txn.shipment_date,
        specialty_pharmacy_patient_txn.product_lot_number,
        specialty_pharmacy_patient_txn.program_dispense_type,
        specialty_pharmacy_patient_txn.days_supply_dispensed,
        specialty_pharmacy_patient_txn.primary_payer_pa_outcome,
        specialty_pharmacy_patient_txn.secondary_payer_pa_outcome,
        specialty_pharmacy_patient_txn.rx_communication_method,
        specialty_pharmacy_patient_txn.tertiary_icd_10,
        specialty_pharmacy_patient_txn.ims_file_id,
        specialty_pharmacy_patient_txn.ims_transaction_id,
        specialty_pharmacy_patient_txn.ims_cycle_date,
        specialty_pharmacy_patient_txn.ims_supplier_id,
        specialty_pharmacy_patient_txn.ims_supplier_name,
        specialty_pharmacy_patient_txn.ims_transaction_type_code,
        specialty_pharmacy_patient_txn.ims_duplicate_transaction,
        specialty_pharmacy_patient_txn.ims_prescriber_id,
        specialty_pharmacy_patient_txn.ims_phys_first_name,
        specialty_pharmacy_patient_txn.ims_phys_last_name,
        specialty_pharmacy_patient_txn.ims_phys_address,
        specialty_pharmacy_patient_txn.ims_phys_city,
        specialty_pharmacy_patient_txn.ims_phys_state,
        specialty_pharmacy_patient_txn.ims_phys_zip,
        specialty_pharmacy_patient_txn.ims_phys_specialty,
        specialty_pharmacy_patient_txn.ims_product_id,
        specialty_pharmacy_patient_txn.ims_product_description,
        specialty_pharmacy_patient_txn.ims_outlet_id,
        specialty_pharmacy_patient_txn.ims_outlet_name,
        specialty_pharmacy_patient_txn.ims_outlet_address,
        specialty_pharmacy_patient_txn.ims_outlet_city,
        specialty_pharmacy_patient_txn.ims_outlet_state,
        specialty_pharmacy_patient_txn.ims_outlet_zip,
        specialty_pharmacy_patient_txn.ims_outlet_subcategory,
        specialty_pharmacy_patient_txn.ims_plan_id,
        specialty_pharmacy_patient_txn.ims_plan_name,
        specialty_pharmacy_patient_txn.ims_plan_model,
        specialty_pharmacy_patient_txn.primary_icd10_grouping,
        specialty_pharmacy_patient_txn.primary_icd10_grouping_reason_code,
        specialty_pharmacy_patient_txn.secondary_icd10_grouping,
        specialty_pharmacy_patient_txn.secondary_icd10_grouping_reason_code,
        specialty_pharmacy_patient_txn.ims_ndc_flag,
        specialty_pharmacy_patient_txn.ims_dispensed_date_flag,
        specialty_pharmacy_patient_txn.ims_dispensed_quantity_flag,
        specialty_pharmacy_patient_txn.ims_cost_flag,
        specialty_pharmacy_patient_txn.ims_overall_flag,
        specialty_pharmacy_patient_txn.patient_months,
        specialty_pharmacy_patient_txn.approved_indication,
        specialty_pharmacy_patient_txn.tvcmid,
        specialty_pharmacy_patient_txn.basket_id
 FROM datamart.specialty_pharmacy_patient_txn;

CREATE  VIEW outbound.tc_physician_univ AS
 SELECT dc.npi AS NPI,
        dc.dea_num AS DEA_NUM,
        upper(dc.last_name) AS LAST_NAME,
        upper(dc.first_name) AS FIRST_NAME,
        upper(dc.middle_name) AS MIDDLE_NAME,
        upper(((((dc.ptr_address_1 || ' '::varchar(1)) || dc.ptr_address_2) || ' '::varchar(1)) || dc.ptr_address_3)) AS ADDRESS,
        upper(dc.ptr_city) AS CITY,
        dc.ptr_state AS PTR_STATE,
        dc.ptr_zip AS PTR_ZIP
 FROM ( SELECT prescriber_combined_demographics.sales_force_id,
        prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.veeva_account_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.first_name,
        prescriber_combined_demographics.middle_name,
        prescriber_combined_demographics.last_name,
        prescriber_combined_demographics.ptr_veeva_address_id,
        prescriber_combined_demographics.ptr_address_1,
        prescriber_combined_demographics.ptr_city,
        prescriber_combined_demographics.ptr_state,
        prescriber_combined_demographics.ptr_zip,
        prescriber_combined_demographics.ptr_phone,
        prescriber_combined_demographics.ptr_territory_num,
        prescriber_combined_demographics.ptr_territory_type,
        prescriber_combined_demographics.ptr_address_source,
        prescriber_combined_demographics.ptr_mailable,
        prescriber_combined_demographics.dea_num,
        prescriber_combined_demographics.pdrp_flag,
        prescriber_combined_demographics.pdrp_date,
        prescriber_combined_demographics.np_pa_flag,
        prescriber_combined_demographics.no_spend,
        prescriber_combined_demographics.ama_no_contact_flag,
        prescriber_combined_demographics.email,
        prescriber_combined_demographics.degree,
        prescriber_combined_demographics.npi,
        prescriber_combined_demographics.tvcmid,
        prescriber_combined_demographics.ptr_address_2,
        prescriber_combined_demographics.ptr_address_3,
        row_number() OVER (PARTITION BY prescriber_combined_demographics.sales_force_id, prescriber_combined_demographics.npi ORDER BY prescriber_combined_demographics.ptr_territory_num) AS rnk
 FROM datamart.prescriber_combined_demographics) dc
 WHERE (((dc.ims_id IS NOT NULL) OR (dc.dea_num IS NOT NULL)) AND (dc.sales_force_id = 'TC'::varchar(2)) AND (dc.rnk = 1));

CREATE  VIEW outbound.zzz_cmop_station AS
 SELECT cmop_rx.visn AS VISN,
        cmop_rx.station_number AS STATION_NUMBER,
        cmop_rx.station AS STATION,
        NULL AS STATION_TYPE,
        NULL AS ADDRESS,
        NULL AS CITY,
        NULL AS STATE,
        cmop_rx.zip AS ZIP,
        NULL AS CMOP,
        NULL AS CMOP_DATE,
        to_char(max(cmop_rx.data_month), 'YYYY-MM-DD'::varchar(10)) AS CREATE_DATE,
        to_char((statement_timestamp())::date, 'YYYY-MM-DD'::varchar(10)) AS LAST_UPD_DATE,
        NULL AS STANDARD_ZIP
 FROM (datamart.cmop_rx JOIN ( SELECT cmop_rx.station_number,
        max(cmop_rx.data_month) AS maxmth
 FROM datamart.cmop_rx
 GROUP BY cmop_rx.station_number) ms ON (((ms.maxmth = cmop_rx.data_month) AND (ms.station_number = cmop_rx.station_number))))
 GROUP BY cmop_rx.visn,
          cmop_rx.station_number,
          cmop_rx.station,
          NULL,
          upper(cmop_rx.pharmacy),
          to_char((statement_timestamp())::date, 'YYYY-MM-DD'::varchar(10)),
          cmop_rx.zip;

CREATE  VIEW outbound.hcos_affiliation_type AS
 SELECT EXT_HCOS_AFFILIATION_TYPE_src.AFFIL_TYPE_ID,
        EXT_HCOS_AFFILIATION_TYPE_src.AFFIL_TYPE_CODE,
        EXT_HCOS_AFFILIATION_TYPE_src.AFFIL_TYPE_DESC,
        EXT_HCOS_AFFILIATION_TYPE_src.AFFIL_GROUP_CODE,
        EXT_HCOS_AFFILIATION_TYPE_src.AFFIL_GROUP_DESC
 FROM teva_ingestion.EXT_HCOS_AFFILIATION_TYPE_src
 WHERE (EXT_HCOS_AFFILIATION_TYPE_src.batch_id IN ( SELECT max(EXT_HCOS_AFFILIATION_TYPE_src.batch_id) AS max
 FROM teva_ingestion.EXT_HCOS_AFFILIATION_TYPE_src));

CREATE  VIEW outbound.zzz_hcos_business AS
 SELECT EXT_HCOS_BUSINESS_src.IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.BUSINESS_NAME,
        EXT_HCOS_BUSINESS_src.DBA_NAME,
        EXT_HCOS_BUSINESS_src.CARE_OF_LOCATION,
        EXT_HCOS_BUSINESS_src.ADDRESS_ID,
        EXT_HCOS_BUSINESS_src.STF_ID,
        EXT_HCOS_BUSINESS_src.PHYSICAL_ADDR_1,
        EXT_HCOS_BUSINESS_src.PHYSICAL_ADDR_2,
        EXT_HCOS_BUSINESS_src.PHYSICAL_CITY,
        EXT_HCOS_BUSINESS_src.PHYSICAL_STATE,
        EXT_HCOS_BUSINESS_src.PHYSICAL_ZIP,
        EXT_HCOS_BUSINESS_src.POSTAL_ADDR_1,
        EXT_HCOS_BUSINESS_src.POSTAL_ADDR_2,
        EXT_HCOS_BUSINESS_src.POSTAL_CITY,
        EXT_HCOS_BUSINESS_src.POSTAL_STATE,
        EXT_HCOS_BUSINESS_src.POSTAL_ZIP,
        EXT_HCOS_BUSINESS_src.PHONE,
        EXT_HCOS_BUSINESS_src.FAX,
        EXT_HCOS_BUSINESS_src.WEBSITE,
        EXT_HCOS_BUSINESS_src.LATITUDE,
        EXT_HCOS_BUSINESS_src.LONGITUDE,
        EXT_HCOS_BUSINESS_src.OWNER_STATUS,
        EXT_HCOS_BUSINESS_src.PROFIT_STATUS,
        EXT_HCOS_BUSINESS_src.CMI,
        EXT_HCOS_BUSINESS_src.PRIMARY_COT_ID,
        EXT_HCOS_BUSINESS_src.COT_CLASSIFICATION_ID,
        EXT_HCOS_BUSINESS_src.COT_CLASSIFICATION,
        EXT_HCOS_BUSINESS_src.COT_FACILITY_TYPE_ID,
        EXT_HCOS_BUSINESS_src.COT_FACILITY_TYPE,
        EXT_HCOS_BUSINESS_src.COT_SPECIALTY_ID,
        EXT_HCOS_BUSINESS_src.COT_SPECIALTY,
        EXT_HCOS_BUSINESS_src.RECORD_TYPE,
        EXT_HCOS_BUSINESS_src.BED_CLUSTER_ID,
        EXT_HCOS_BUSINESS_src.TTL_LICENSE_BEDS,
        EXT_HCOS_BUSINESS_src.TTL_CENSUS_BEDS,
        EXT_HCOS_BUSINESS_src.TTL_STAFFED_BEDS,
        EXT_HCOS_BUSINESS_src.TEACHING_HOSP,
        EXT_HCOS_BUSINESS_src.COMMHOSP,
        EXT_HCOS_BUSINESS_src.ALL_DDD,
        EXT_HCOS_BUSINESS_src.ALL_NPI,
        EXT_HCOS_BUSINESS_src.HIN,
        EXT_HCOS_BUSINESS_src.DEA,
        EXT_HCOS_BUSINESS_src.MPN,
        EXT_HCOS_BUSINESS_src.MPN_ORDER,
        EXT_HCOS_BUSINESS_src.MSA,
        EXT_HCOS_BUSINESS_src.FIPS_STATE,
        EXT_HCOS_BUSINESS_src.FIPS_COUNTY,
        EXT_HCOS_BUSINESS_src.NUM_OF_PROVIDERS,
        EXT_HCOS_BUSINESS_src.CORP_PARENT_IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.CORP_PARENT_NAME,
        EXT_HCOS_BUSINESS_src.OWNER_SUB_IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.OWNER_SUB_NAME,
        EXT_HCOS_BUSINESS_src.GPO_PHARMA_IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.GPO_PHARMA_NAME,
        EXT_HCOS_BUSINESS_src.GPO_MEDSURG_IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.GPO_MEDSURG_NAME,
        EXT_HCOS_BUSINESS_src.PHARMA_PROV_IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.PHARMA_PROV_NAME,
        EXT_HCOS_BUSINESS_src.FORMULARY,
        EXT_HCOS_BUSINESS_src.ELECTRONIC_MED_REC,
        EXT_HCOS_BUSINESS_src.EPRESCRIBE,
        EXT_HCOS_BUSINESS_src.PAYPERFORM,
        EXT_HCOS_BUSINESS_src.GENFIRST,
        EXT_HCOS_BUSINESS_src.SREP_ACCESS,
        EXT_HCOS_BUSINESS_src.DEACTIVATION_REASON,
        EXT_HCOS_BUSINESS_src.REFERBACK_IMS_ORG_ID,
        EXT_HCOS_BUSINESS_src.STATUS_INDICATOR
 FROM teva_ingestion.EXT_HCOS_BUSINESS_src
 WHERE (EXT_HCOS_BUSINESS_src.batch_id IN ( SELECT max(EXT_HCOS_BUSINESS_src.batch_id) AS max
 FROM teva_ingestion.EXT_HCOS_BUSINESS_src));

CREATE  VIEW outbound.zzz_hcos_identifier_fact AS
 SELECT EXT_HCOS_IDENTIFIER_FACT_src.IMS_ORG_ID,
        EXT_HCOS_IDENTIFIER_FACT_src.HCE_ID_PRFSNL,
        EXT_HCOS_IDENTIFIER_FACT_src.PROFESSIONAL_ID,
        EXT_HCOS_IDENTIFIER_FACT_src.IDENTIFIER_ID,
        EXT_HCOS_IDENTIFIER_FACT_src.IDENTIFIER,
        EXT_HCOS_IDENTIFIER_FACT_src.IDENTIFIER_ORDER,
        EXT_HCOS_IDENTIFIER_FACT_src.IDENTIFIER_CATEGORY,
        EXT_HCOS_IDENTIFIER_FACT_src.IDENTIFIER_STATE,
        EXT_HCOS_IDENTIFIER_FACT_src.SRC_STRT_DT,
        EXT_HCOS_IDENTIFIER_FACT_src.SRC_TRMTN_DT,
        EXT_HCOS_IDENTIFIER_FACT_src.SRC_TRMTN_CD
 FROM teva_ingestion.EXT_HCOS_IDENTIFIER_FACT_src
 WHERE (EXT_HCOS_IDENTIFIER_FACT_src.batch_id IN ( SELECT max(EXT_HCOS_IDENTIFIER_FACT_src.batch_id) AS max
 FROM teva_ingestion.EXT_HCOS_IDENTIFIER_FACT_src));

CREATE  VIEW outbound.zzz_hcos_professional AS
 SELECT EXT_HCOS_PROFESSIONAL_src.HCE_ID_PRFSNL,
        EXT_HCOS_PROFESSIONAL_src.PROFESSIONAL_ID,
        EXT_HCOS_PROFESSIONAL_src.FIRST_NAME,
        EXT_HCOS_PROFESSIONAL_src.MIDDLE_NAME,
        EXT_HCOS_PROFESSIONAL_src.LAST_NAME,
        EXT_HCOS_PROFESSIONAL_src.GEN_SUFFIX,
        EXT_HCOS_PROFESSIONAL_src.DESIGNATION,
        EXT_HCOS_PROFESSIONAL_src.GENDER,
        EXT_HCOS_PROFESSIONAL_src.ROLE,
        EXT_HCOS_PROFESSIONAL_src.PRIMARY_SPEC,
        EXT_HCOS_PROFESSIONAL_src.SECONDARY_SPEC,
        EXT_HCOS_PROFESSIONAL_src.TERTIARY_SPEC,
        EXT_HCOS_PROFESSIONAL_src.PRIMARY_PROF_CODE,
        EXT_HCOS_PROFESSIONAL_src.PRIMARY_PROF_DESC,
        EXT_HCOS_PROFESSIONAL_src.IMS_ID,
        EXT_HCOS_PROFESSIONAL_src.UPIN,
        EXT_HCOS_PROFESSIONAL_src.ME,
        EXT_HCOS_PROFESSIONAL_src.ALL_DEA,
        EXT_HCOS_PROFESSIONAL_src.NPI,
        EXT_HCOS_PROFESSIONAL_src.STATUS_DESC
 FROM teva_ingestion.EXT_HCOS_PROFESSIONAL_src
 WHERE (EXT_HCOS_PROFESSIONAL_src.batch_id IN ( SELECT max(EXT_HCOS_PROFESSIONAL_src.batch_id) AS max
 FROM teva_ingestion.EXT_HCOS_PROFESSIONAL_src));

CREATE  VIEW outbound.zzz_hcos_provider_affiliation_fact AS
 SELECT ext_hcos_provider_affiliation_fact_src.IMS_ORG_ID,
        ext_hcos_provider_affiliation_fact_src.HCE_ID_PRFSNL,
        ext_hcos_provider_affiliation_fact_src.PROFESSIONAL_ID,
        ext_hcos_provider_affiliation_fact_src.AFFIL_TYPE_ID,
        ext_hcos_provider_affiliation_fact_src.DEA,
        ext_hcos_provider_affiliation_fact_src.AFFIL_IND,
        ext_hcos_provider_affiliation_fact_src.AFFIL_RANK
 FROM teva_ingestion.ext_hcos_provider_affiliation_fact_src
 WHERE (ext_hcos_provider_affiliation_fact_src.batch_id IN ( SELECT max(ext_hcos_provider_affiliation_fact_src.batch_id) AS max
 FROM teva_ingestion.ext_hcos_provider_affiliation_fact_src));

CREATE  VIEW outbound.zzz_hcos_relationship_fact AS
 SELECT EXT_HCOS_RELATIONSHIP_FACT_src.IMS_ORG_ID_PARENT,
        EXT_HCOS_RELATIONSHIP_FACT_src.IMS_ORG_ID_CHILD,
        EXT_HCOS_RELATIONSHIP_FACT_src.REL_ID,
        EXT_HCOS_RELATIONSHIP_FACT_src.REL_ORDER
 FROM teva_ingestion.EXT_HCOS_RELATIONSHIP_FACT_src
 WHERE (EXT_HCOS_RELATIONSHIP_FACT_src.batch_id IN ( SELECT max(EXT_HCOS_RELATIONSHIP_FACT_src.batch_id) AS max
 FROM teva_ingestion.EXT_HCOS_RELATIONSHIP_FACT_src));

CREATE  VIEW outbound.zzz_hcos_relationship_type AS
 SELECT EXT_HCOS_RELATIONSHIP_TYPE_src.REL_ID,
        EXT_HCOS_RELATIONSHIP_TYPE_src.REL_CODE,
        EXT_HCOS_RELATIONSHIP_TYPE_src.REL_DESC,
        EXT_HCOS_RELATIONSHIP_TYPE_src.REL_GROUP_CODE,
        EXT_HCOS_RELATIONSHIP_TYPE_src.REL_GROUP_DESC,
        EXT_HCOS_RELATIONSHIP_TYPE_src.REL_CATEGORY_CODE,
        EXT_HCOS_RELATIONSHIP_TYPE_src.REL_CATEGORY_DESC
 FROM teva_ingestion.EXT_HCOS_RELATIONSHIP_TYPE_src
 WHERE (EXT_HCOS_RELATIONSHIP_TYPE_src.batch_id IN ( SELECT max(EXT_HCOS_RELATIONSHIP_TYPE_src.batch_id) AS max
 FROM teva_ingestion.EXT_HCOS_RELATIONSHIP_TYPE_src));

CREATE  VIEW outbound.zzz_hcos_ddd_xfer AS
 SELECT ext_hcos_ddd_xfer_src.IMS_ORG_ID,
        ext_hcos_ddd_xfer_src.HCE_ID_PRFSNL,
        ext_hcos_ddd_xfer_src.PROFESSIONAL_ID,
        ext_hcos_ddd_xfer_src.IDENTIFIER_ID,
        ext_hcos_ddd_xfer_src.IDENTIFIER,
        ext_hcos_ddd_xfer_src.IDENTIFIER_ORDER,
        ext_hcos_ddd_xfer_src.IDENTIFIER_CATEGORY,
        ext_hcos_ddd_xfer_src.IDENTIFIER_STATE,
        ext_hcos_ddd_xfer_src.SRC_STRT_DT,
        ext_hcos_ddd_xfer_src.SRC_TRMTN_DT,
        ext_hcos_ddd_xfer_src.SRC_TRMTN_CD
 FROM teva_ingestion.ext_hcos_ddd_xfer_src
 WHERE (ext_hcos_ddd_xfer_src.batch_id IN ( SELECT max(ext_hcos_ddd_xfer_src.batch_id) AS max
 FROM teva_ingestion.ext_hcos_ddd_xfer_src));

CREATE  VIEW outbound.zzz_zs_agile_mkt_fentora_obq_rx AS
 SELECT rx.ims_id AS IMS_ID,
        rx.payment_method AS MOP,
        b.teva_product_code AS PRODUCT_CODE,
        b.name AS PRODUCT_NAME,
        to_char(rx.rollup_month, 'YYYY-MM-DD'::varchar(10)) AS MONTH_ENDING,
        sum(rx.nrx_quantity) AS NRX_QTY,
        sum(rx.trx_quantity) AS TRX_QTY,
        sum(rx.nrx_count) AS NRX_CNT,
        sum(rx.trx_count) AS TRX_CNT
 FROM ((datamart.prescriber_rx rx JOIN reference.ims_report_cnt_qty_mapping m ON (((rx.ims_client_number = m.ims_client_number) AND (rx.ims_report_number_cnt <=> m.ims_report_number_cnt) AND (rx.ims_report_number_qty <=> m.ims_report_number_qty) AND (m.active_flag = 'Y'::char(1))))) JOIN product.basket b ON ((rx.basket_id = b.basket_id)))
 WHERE ((rx.basket_id = ANY (ARRAY[39, 38, 2, 72, 290, 575, 574])) AND (rx.rollup_month >= (last_day(add_months((statement_timestamp())::timestamp, (-26))) + 1)) AND (rx.rollup_month <= last_day(add_months((statement_timestamp())::timestamp, (-2)))) AND (length(rx.ims_id) = 7))
 GROUP BY rx.ims_id,
          rx.payment_method,
          b.teva_product_code,
          b.name,
          rx.rollup_month
 ORDER BY rx.rollup_month DESC;

CREATE  VIEW outbound.zs_calls_oncology_treanda AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TO'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, d.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6
 FROM ((( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'TREANDA'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((d.VEEVA_ACCOUNT_ID = c.veeva_account_id) AND (d.territory_num = c.territory_num))));

CREATE  VIEW outbound.zs_calls_oncology_synribo AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TO'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, d.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6
 FROM ((( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'SYNRIBO'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((d.VEEVA_ACCOUNT_ID = c.veeva_account_id) AND (d.territory_num = c.territory_num))));

CREATE  VIEW outbound.zs_calls_oncology_granix AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TO'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, d.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6
 FROM ((( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'GRANIX'::varchar(6)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((d.VEEVA_ACCOUNT_ID = c.veeva_account_id) AND (d.territory_num = c.territory_num))));

CREATE  VIEW outbound.zs_calls_oncology_bendeka AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TO'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, d.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6
 FROM ((( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'BENDEKA'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((d.VEEVA_ACCOUNT_ID = c.veeva_account_id) AND (d.territory_num = c.territory_num))));

CREATE  VIEW outbound.zs_monitor_no_contact AS
 SELECT a.sales_force_id,
        b.me__c,
        a.ims_id,
        a.npi
 FROM (datamart.sfa_demographics a JOIN veeva.account b ON ((a.veeva_account_id = b.id)))
 WHERE ((b.no_contact_tva__c IS NOT NULL) AND (b.me__c IS NOT NULL) AND (b.me__c <> '0000000000'::varchar(10)) AND (a.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'TO'::varchar(2)])))
 GROUP BY a.sales_force_id,
          b.me__c,
          a.ims_id,
          a.npi
 ORDER BY b.me__c;

CREATE  VIEW outbound.zs_call_plan_semester_ts_cinqair AS
 SELECT 'TEVA'::varchar(4) AS company,
        'TS'::varchar(2) AS sales_force,
        to_char(m.m01, 'yyyymm'::varchar(6)) AS month_ending,
        coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM,
        d.npi,
        d.ims_id,
        d.VEEVA_ACCOUNT_ID AS veeva_account_id,
        d.tvcmid,
        d.prim_specialty,
        d.ZIP AS zip,
        c.p1_calls_mth1,
        c.p2_calls_mth1,
        c.p3_calls_mth1,
        c.p4_calls_mth1,
        c.p1_calls_mth2,
        c.p2_calls_mth2,
        c.p3_calls_mth2,
        c.p4_calls_mth2,
        c.p1_calls_mth3,
        c.p2_calls_mth3,
        c.p3_calls_mth3,
        c.p4_calls_mth3,
        c.p1_calls_mth4,
        c.p2_calls_mth4,
        c.p3_calls_mth4,
        c.p4_calls_mth4,
        c.p1_calls_mth5,
        c.p2_calls_mth5,
        c.p3_calls_mth5,
        c.p4_calls_mth5,
        c.p1_calls_mth6,
        c.p2_calls_mth6,
        c.p3_calls_mth6,
        c.p4_calls_mth6,
        cp.p1_plan_calls,
        cp.p2_plan_calls,
        cp.p3_plan_calls
 FROM ((((( SELECT calls.veeva_account_id,
        calls.territory_num
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TS'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'CINQAIR'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) calls UNION  SELECT call_plan.veeva_account_id,
        call_plan.territory_num
 FROM ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'CINQAIR'::varchar(7)) AND (cp.sales_force_id = 'TS'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) call_plan) u JOIN ( SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID,
        sfa_demographics.ims_id,
        sfa_demographics.npi,
        sfa_demographics.tvcmid,
        sfa_demographics.territory_number AS territory_num,
        sfa_demographics.prim_specialty,
        sfa_demographics.zip AS ZIP
 FROM datamart.sfa_demographics
 WHERE ((sfa_demographics.sales_force_id = 'TS'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL))
 GROUP BY sfa_demographics.veeva_account_id,
          sfa_demographics.ims_id,
          sfa_demographics.npi,
          sfa_demographics.tvcmid,
          sfa_demographics.territory_number,
          sfa_demographics.prim_specialty,
          sfa_demographics.zip) d ON (((u.veeva_account_id = d.VEEVA_ACCOUNT_ID) AND (u.territory_num = d.territory_num)))) JOIN ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m ON (true)) LEFT  JOIN ( SELECT c.veeva_account_id,
        c.territory_num,
        c.rep_id,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m01) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth1,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m02) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth2,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m03) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth3,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m04) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth4,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m05) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth5,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.sec_calls ELSE 0 END) AS p2_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.ter_calls ELSE 0 END) AS p3_calls_mth6,
        sum(CASE WHEN (c.call_date = m.m06) THEN c.quad_calls ELSE 0 END) AS p4_calls_mth6
 FROM ( SELECT c.veeva_account_id,
        c.territory_number AS territory_num,
        c.rep_id,
        trunc(c.call_date, 'MON'::varchar(3)) AS call_date,
        sum(CASE WHEN (d.detail_position = 1) THEN 1 ELSE 0 END) AS pri_calls,
        sum(CASE WHEN (d.detail_position = 2) THEN 1 ELSE 0 END) AS sec_calls,
        sum(CASE WHEN (d.detail_position = 3) THEN 1 ELSE 0 END) AS ter_calls,
        sum(CASE WHEN (d.detail_position = 4) THEN 1 ELSE 0 END) AS quad_calls
 FROM datamart.sfa_call c, datamart.sfa_call_detail d, outbound.zs_monitor_sales_force_product z, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (d.sales_force_id = z.sales_force_id) AND (d.basket_name = z.basket_name) AND (c.sales_force_id = 'TS'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (d.product = 'CINQAIR'::varchar(7)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)))
 GROUP BY c.veeva_account_id,
          c.territory_number,
          c.rep_id,
          trunc(c.call_date, 'MON'::varchar(3))) c, ( SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01,
        trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02,
        trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03,
        trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04,
        trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05,
        trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06,
        trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07,
        trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08,
        trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09,
        trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10,
        trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11,
        trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12
 FROM v_catalog.dual) m
 GROUP BY c.veeva_account_id,
          c.territory_num,
          c.rep_id) c ON (((u.veeva_account_id = c.veeva_account_id) AND (u.territory_num = c.territory_num)))) LEFT  JOIN ( SELECT cp.veeva_account_id,
        cp.territory_number AS territory_num,
        sum(cp.p1) AS p1_plan_calls,
        sum(cp.p2) AS p2_plan_calls,
        sum(cp.p3) AS p3_plan_calls
 FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.basket_name = zs.basket_name) AND (cp.period = zs.semester))))
 WHERE ((cp.basket_name = 'CINQAIR'::varchar(7)) AND (cp.sales_force_id = 'TS'::varchar(2)))
 GROUP BY cp.veeva_account_id,
          cp.territory_number) cp ON (((u.veeva_account_id = cp.veeva_account_id) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zzz_asi_rx_by_market_hd AS
SELECT rx.market_name, rx.ims_client_number AS ims_client_num, rx.ims_report_number_cnt AS ims_report_num, rx.ims_zip_other AS zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id, rx.ims_specialty AS specialty, rx.payer_plan_number AS plan_id, btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category, rx.ims_rx_type AS rx_type, CASE WHEN (opn.basket_id IS NOT NULL) THEN opn.outbound_prod_name ELSE btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) END AS ims_product_group_num, NULL AS filler_01, axd.ims_me_num AS me_num, rx.prescriber_last_name AS last_name, rx.prescriber_first_name AS first_name, axd.ims_middle_name AS middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address, axd.ims_city AS city, axd.ims_state AS state, axd.ims_zip AS zip, coalesce(replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar), rx.indication) AS supplemental_data, rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date, 48 AS bucket_count, sum(CASE WHEN (mth.month_bucket = 1) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024, sum(CASE WHEN (mth.month_bucket = 1) THEN rx.trx_count ELSE NULL::float END) AS trx_001, sum(CASE WHEN (mth.month_bucket = 2) THEN rx.trx_count ELSE NULL::float END) AS trx_002, sum(CASE WHEN (mth.month_bucket = 3) THEN rx.trx_count ELSE NULL::float END) AS trx_003, sum(CASE WHEN (mth.month_bucket = 4) THEN rx.trx_count ELSE NULL::float END) AS trx_004, sum(CASE WHEN (mth.month_bucket = 5) THEN rx.trx_count ELSE NULL::float END) AS trx_005, sum(CASE WHEN (mth.month_bucket = 6) THEN rx.trx_count ELSE NULL::float END) AS trx_006, sum(CASE WHEN (mth.month_bucket = 7) THEN rx.trx_count ELSE NULL::float END) AS trx_007, sum(CASE WHEN (mth.month_bucket = 8) THEN rx.trx_count ELSE NULL::float END) AS trx_008, sum(CASE WHEN (mth.month_bucket = 9) THEN rx.trx_count ELSE NULL::float END) AS trx_009, sum(CASE WHEN (mth.month_bucket = 10) THEN rx.trx_count ELSE NULL::float END) AS trx_010, sum(CASE WHEN (mth.month_bucket = 11) THEN rx.trx_count ELSE NULL::float END) AS trx_011, sum(CASE WHEN (mth.month_bucket = 12) THEN rx.trx_count ELSE NULL::float END) AS trx_012, sum(CASE WHEN (mth.month_bucket = 13) THEN rx.trx_count ELSE NULL::float END) AS trx_013, sum(CASE WHEN (mth.month_bucket = 14) THEN rx.trx_count ELSE NULL::float END) AS trx_014, sum(CASE WHEN (mth.month_bucket = 15) THEN rx.trx_count ELSE NULL::float END) AS trx_015, sum(CASE WHEN (mth.month_bucket = 16) THEN rx.trx_count ELSE NULL::float END) AS trx_016, sum(CASE WHEN (mth.month_bucket = 17) THEN rx.trx_count ELSE NULL::float END) AS trx_017, sum(CASE WHEN (mth.month_bucket = 18) THEN rx.trx_count ELSE NULL::float END) AS trx_018, sum(CASE WHEN (mth.month_bucket = 19) THEN rx.trx_count ELSE NULL::float END) AS trx_019, sum(CASE WHEN (mth.month_bucket = 20) THEN rx.trx_count ELSE NULL::float END) AS trx_020, sum(CASE WHEN (mth.month_bucket = 21) THEN rx.trx_count ELSE NULL::float END) AS trx_021, sum(CASE WHEN (mth.month_bucket = 22) THEN rx.trx_count ELSE NULL::float END) AS trx_022, sum(CASE WHEN (mth.month_bucket = 23) THEN rx.trx_count ELSE NULL::float END) AS trx_023, sum(CASE WHEN (mth.month_bucket = 24) THEN rx.trx_count ELSE NULL::float END) AS trx_024 FROM (((datamart.prescriber_rx rx JOIN (SELECT ims_week_buckets.month_ending, ims_week_buckets.month_bucket FROM integration.ims_week_buckets GROUP BY ims_week_buckets.month_ending, ims_week_buckets.month_bucket) mth ON ((rx.rollup_month = mth.month_ending))) JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number <=> axd.ims_client_number) AND (rx.ims_report_number_cnt <=> axd.ims_report_number) AND (rx.ims_id <=> axd.ims_id) AND (rx.ims_product_group <=> axd.ims_product_group) AND (rx.ims_specialty <=> axd.ims_specialty) AND (rx.ims_zip_other <=> axd.ims_zip_other)))) LEFT JOIN reference.outbound_product_name opn ON (((rx.basket_id = opn.basket_id) AND (opn.transform_name = 'ASI_IMS_OBM'::varchar(11))))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '8'::varchar(1))) GROUP BY rx.market_name, rx.ims_client_number, rx.ims_report_number_cnt, rx.ims_zip_other, CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END, rx.ims_specialty, axd.ims_me_num, rx.payer_plan_number, btrim(to_char(rx.sales_category, '00'::varchar(2))), rx.ims_rx_type, CASE WHEN (opn.basket_id IS NOT NULL) THEN opn.outbound_prod_name ELSE btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) END, rx.prescriber_last_name, rx.prescriber_first_name, axd.ims_middle_name, replace(axd.ims_address, ','::varchar(1), ''::varchar), axd.ims_city, axd.ims_state, axd.ims_zip, coalesce(replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar), rx.indication), rx.plan_name, to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.knipper_supplemental AS
 SELECT a.tvcmid AS TVCMID,
        CASE WHEN (a.medical_suffix IS NULL) THEN ''::varchar ELSE a.medical_suffix END AS ProfDesig,
        a.first_name AS FName,
        a.last_name AS Lname,
        CASE WHEN (a.middle_name IS NULL) THEN ''::varchar ELSE a.middle_name END AS MI,
        CASE WHEN (a.personal_suffix IS NULL) THEN ''::varchar ELSE a.personal_suffix END AS Suffix,
        CASE WHEN (a.hce_status_desc IS NULL) THEN 'A'::varchar(1) WHEN (a.hce_status_desc = 'ACTIVE'::varchar(6)) THEN 'A'::varchar(1) WHEN (a.hce_status_desc = 'INACTIVE'::varchar(8)) THEN 'I'::varchar(1) ELSE 'D'::varchar(1) END AS Status,
        CASE WHEN (a.hce_status_desc = 'PRESUMED DEAD'::varchar(13)) THEN 'D'::varchar(1) WHEN (a.hce_status_desc = 'SEMI-RETIRED'::varchar(12)) THEN 'O'::varchar(1) WHEN (a.hce_status_desc = 'RETIRED'::varchar(7)) THEN 'R'::varchar(1) ELSE ''::varchar END AS DeleteReason,
        CASE WHEN ((a.hce_status_desc IS NULL) OR (a.hce_status_desc <> ALL (ARRAY['ACTIVE'::varchar(8), 'INACTIVE'::varchar(8)]))) THEN to_char(e.last_update_date, 'MM/DD/YYYY'::varchar(10)) ELSE ''::varchar END AS DeleteDate,
        CASE WHEN (a.primary_specialty IS NULL) THEN 'US'::varchar(2) ELSE a.primary_specialty END AS Specialty,
        CASE WHEN (a.address_line1 IS NULL) THEN ''::varchar ELSE a.address_line1 END AS Address1,
        CASE WHEN (a.address_line2 IS NULL) THEN ''::varchar ELSE a.address_line2 END AS Address2,
        ''::varchar AS Address3,
        CASE WHEN (a.city IS NULL) THEN ''::varchar ELSE a.city END AS City,
        CASE WHEN (a.state IS NULL) THEN ''::varchar ELSE a.state END AS State,
        CASE WHEN (a.zip IS NULL) THEN ''::varchar ELSE a.zip END AS Zip,
        CASE WHEN (b.sln IS NULL) THEN ''::varchar ELSE b.sln END AS SLN,
        CASE WHEN ((b.sln IS NULL) OR (b.sln = ''::varchar)) THEN ''::varchar ELSE CASE WHEN (b.sln_status_code = 'A'::varchar(1)) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END END AS SLNActiveFlag,
        CASE WHEN ((b.sln IS NULL) OR (b.sln = ''::varchar)) THEN ''::varchar ELSE to_char(b.sln_expiration_date, 'MM/DD/YYYY'::varchar(10)) END AS SLNExpirationDate,
        CASE WHEN (c.flag_value = 'Y'::varchar(1)) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS DNCWakeFlag,
        CASE WHEN (d.tvcmid IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS DNP
 FROM (((((( SELECT prescriber_rx.tvcmid
 FROM datamart.prescriber_rx
 GROUP BY prescriber_rx.tvcmid) exp JOIN ( SELECT hcp_demo.tvcmid,
        hcp_demo.ims_id,
        hcp_demo.npi,
        hcp_demo.last_name,
        hcp_demo.first_name,
        hcp_demo.middle_name,
        hcp_demo.personal_suffix,
        hcp_demo.medical_suffix,
        hcp_demo.primary_specialty,
        hcp_demo.address_line1,
        hcp_demo.address_line2,
        hcp_demo.city,
        hcp_demo.state_code AS state,
        hcp_demo.zip,
        hcp_demo.business_phone,
        hcp_demo.business_email,
        hcp_demo.hce_status_desc,
        hcp_demo.file_id,
        hcp_demo.record_id,
        hcp_demo.np_pa_flag
 FROM datamart.customer_hcp_demographics hcp_demo
 WHERE (hcp_demo.file_id = ( SELECT max(customer_hcp_demographics.file_id) AS MAX
 FROM datamart.customer_hcp_demographics))) a ON ((exp.tvcmid = a.tvcmid))) JOIN ( SELECT sample_eligibility.sln,
        sample_eligibility.sln_state,
        sample_eligibility.sln_expiration_date,
        sample_eligibility.sln_status_code,
        sample_eligibility.tvcmid
 FROM mdm.sample_eligibility
 WHERE (sample_eligibility.file_id = ( SELECT max(sample_eligibility.file_id) AS MAX
 FROM mdm.sample_eligibility))) b ON (((a.tvcmid = b.tvcmid) AND (a.state = b.sln_state)))) LEFT  JOIN ( SELECT ims_flag.tvcmid,
        ims_flag.flag_type,
        ims_flag.flag_value
 FROM mdm.ims_flag
 WHERE ((ims_flag.file_id = ( SELECT max(ims_flag.file_id) AS MAX
 FROM mdm.ims_flag)) AND (ims_flag.flag_type = 'AMADNC'::varchar(6)))) c ON ((a.tvcmid = c.tvcmid))) LEFT  JOIN datamart.do_not_promote d ON ((a.tvcmid = d.tvcmid))) LEFT  JOIN ( SELECT hcp.updated_date AS last_update_date,
        hcp.tvcmid
 FROM mdm.hcp
 WHERE (hcp.file_id = ( SELECT max(hcp.file_id) AS MAX
 FROM mdm.hcp))) e ON ((a.tvcmid = e.tvcmid)));

CREATE  VIEW outbound.zzz_asi_market_access_hd AS
SELECT coalesce(chd.zip, o.zip, pcd.ptr_zip) AS zip, coalesce(chd.state_code, o.state, pcd.ptr_state, csz.state) AS state, rx.payer_plan_number AS payer_plan_num, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END AS report_num, coalesce(CASE WHEN (rx.indication IS NOT NULL) THEN b.teva_product_code ELSE rx.ims_product_group END, rx.ims_product_group) AS ims_product_group_num, to_char(rx.data_date, 'MM/YYYY'::varchar(7)) AS data_month, sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.nrx_count ELSE 0::float END) AS nrx_001, sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.nrx_count ELSE 0::float END) AS nrx_002, sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.nrx_count ELSE 0::float END) AS nrx_003, sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.nrx_count ELSE 0::float END) AS nrx_004, sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.nrx_count ELSE 0::float END) AS nrx_005, sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.nrx_count ELSE 0::float END) AS nrx_006, sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.nrx_count ELSE 0::float END) AS nrx_007, sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.nrx_count ELSE 0::float END) AS nrx_008, sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.nrx_count ELSE 0::float END) AS nrx_009, sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.nrx_count ELSE 0::float END) AS nrx_010, sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.nrx_count ELSE 0::float END) AS nrx_011, sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.nrx_count ELSE 0::float END) AS nrx_012, sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.nrx_count ELSE 0::float END) AS nrx_013, sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.nrx_count ELSE 0::float END) AS nrx_014, sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.nrx_count ELSE 0::float END) AS nrx_015, sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.nrx_count ELSE 0::float END) AS nrx_016, sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.nrx_count ELSE 0::float END) AS nrx_017, sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.nrx_count ELSE 0::float END) AS nrx_018, sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.nrx_count ELSE 0::float END) AS nrx_019, sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.nrx_count ELSE 0::float END) AS nrx_020, sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.nrx_count ELSE 0::float END) AS nrx_021, sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.nrx_count ELSE 0::float END) AS nrx_022, sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.nrx_count ELSE 0::float END) AS nrx_023, sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.nrx_count ELSE 0::float END) AS nrx_024, sum(CASE WHEN (iwb.month_bucket = 1) THEN rx.trx_count ELSE 0::float END) AS trx_001, sum(CASE WHEN (iwb.month_bucket = 2) THEN rx.trx_count ELSE 0::float END) AS trx_002, sum(CASE WHEN (iwb.month_bucket = 3) THEN rx.trx_count ELSE 0::float END) AS trx_003, sum(CASE WHEN (iwb.month_bucket = 4) THEN rx.trx_count ELSE 0::float END) AS trx_004, sum(CASE WHEN (iwb.month_bucket = 5) THEN rx.trx_count ELSE 0::float END) AS trx_005, sum(CASE WHEN (iwb.month_bucket = 6) THEN rx.trx_count ELSE 0::float END) AS trx_006, sum(CASE WHEN (iwb.month_bucket = 7) THEN rx.trx_count ELSE 0::float END) AS trx_007, sum(CASE WHEN (iwb.month_bucket = 8) THEN rx.trx_count ELSE 0::float END) AS trx_008, sum(CASE WHEN (iwb.month_bucket = 9) THEN rx.trx_count ELSE 0::float END) AS trx_009, sum(CASE WHEN (iwb.month_bucket = 10) THEN rx.trx_count ELSE 0::float END) AS trx_010, sum(CASE WHEN (iwb.month_bucket = 11) THEN rx.trx_count ELSE 0::float END) AS trx_011, sum(CASE WHEN (iwb.month_bucket = 12) THEN rx.trx_count ELSE 0::float END) AS trx_012, sum(CASE WHEN (iwb.month_bucket = 13) THEN rx.trx_count ELSE 0::float END) AS trx_013, sum(CASE WHEN (iwb.month_bucket = 14) THEN rx.trx_count ELSE 0::float END) AS trx_014, sum(CASE WHEN (iwb.month_bucket = 15) THEN rx.trx_count ELSE 0::float END) AS trx_015, sum(CASE WHEN (iwb.month_bucket = 16) THEN rx.trx_count ELSE 0::float END) AS trx_016, sum(CASE WHEN (iwb.month_bucket = 17) THEN rx.trx_count ELSE 0::float END) AS trx_017, sum(CASE WHEN (iwb.month_bucket = 18) THEN rx.trx_count ELSE 0::float END) AS trx_018, sum(CASE WHEN (iwb.month_bucket = 19) THEN rx.trx_count ELSE 0::float END) AS trx_019, sum(CASE WHEN (iwb.month_bucket = 20) THEN rx.trx_count ELSE 0::float END) AS trx_020, sum(CASE WHEN (iwb.month_bucket = 21) THEN rx.trx_count ELSE 0::float END) AS trx_021, sum(CASE WHEN (iwb.month_bucket = 22) THEN rx.trx_count ELSE 0::float END) AS trx_022, sum(CASE WHEN (iwb.month_bucket = 23) THEN rx.trx_count ELSE 0::float END) AS trx_023, sum(CASE WHEN (iwb.month_bucket = 24) THEN rx.trx_count ELSE 0::float END) AS trx_024 FROM (((((((datamart.prescriber_rx rx JOIN product.basket b ON ((rx.basket_id = b.basket_id))) JOIN (SELECT ims_week_buckets.month_bucket, ims_week_buckets.month_ending FROM integration.ims_week_buckets GROUP BY ims_week_buckets.month_bucket, ims_week_buckets.month_ending) iwb ON ((rx.rollup_month = iwb.month_ending))) LEFT JOIN reference.outbound_product_name opn ON (((rx.basket_id = opn.basket_id) AND (opn.transform_name = 'ASI_MKT_ACCESS_OBM'::varchar(18))))) LEFT JOIN datamart.customer_hcp_demographics chd ON ((rx.ims_id = chd.ims_id))) LEFT JOIN (SELECT hco_demo.tvcmid, hco_demo.state_code AS state, hco_demo.zip FROM datamart.customer_hco_demographics hco_demo) o ON ((rx.tvcmid = o.tvcmid))) LEFT JOIN (SELECT rnk.ims_id, rnk.ptr_state, rnk.ptr_zip FROM (SELECT DISTINCT prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source) AS rnk FROM datamart.prescriber_combined_demographics ORDER BY prescriber_combined_demographics.ims_id, prescriber_combined_demographics.ptr_state, prescriber_combined_demographics.ptr_zip, prescriber_combined_demographics.ptr_address_source, row_number() OVER (PARTITION BY prescriber_combined_demographics.ims_id ORDER BY prescriber_combined_demographics.ptr_address_source)) rnk WHERE (rnk.rnk = 1)) pcd ON ((pcd.ims_id = rx.ims_id))) LEFT JOIN reference.city_state_zip csz ON ((coalesce(chd.zip, o.zip, pcd.ptr_zip) = csz.zip))) WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '8'::varchar(1))) GROUP BY coalesce(chd.zip, o.zip, pcd.ptr_zip), coalesce(chd.state_code, o.state, pcd.ptr_state, csz.state), rx.payer_plan_number, CASE WHEN (length(rx.ims_report_number_cnt) = 1) THEN btrim(to_char(rx.ims_report_number_cnt, '00'::varchar(2))) ELSE rx.ims_report_number_cnt END, coalesce(CASE WHEN (rx.indication IS NOT NULL) THEN b.teva_product_code ELSE rx.ims_product_group END, rx.ims_product_group), to_char(rx.data_date, 'MM/YYYY'::varchar(7));

CREATE  VIEW outbound.zzz_asi_market_access_hd_tot AS
SELECT asi_market_access_hd.report_num, asi_market_access_hd.ims_product_group_num AS product_num, asi_market_access_hd.data_month, sum(asi_market_access_hd.nrx_001) AS total_nrx_01, sum(asi_market_access_hd.nrx_002) AS total_nrx_02, sum(asi_market_access_hd.nrx_003) AS total_nrx_03, sum(asi_market_access_hd.nrx_004) AS total_nrx_04, sum(asi_market_access_hd.nrx_005) AS total_nrx_05, sum(asi_market_access_hd.nrx_006) AS total_nrx_06, sum(asi_market_access_hd.nrx_007) AS total_nrx_07, sum(asi_market_access_hd.nrx_008) AS total_nrx_08, sum(asi_market_access_hd.nrx_009) AS total_nrx_09, sum(asi_market_access_hd.nrx_010) AS total_nrx_10, sum(asi_market_access_hd.nrx_011) AS total_nrx_11, sum(asi_market_access_hd.nrx_012) AS total_nrx_12, sum(asi_market_access_hd.nrx_013) AS total_nrx_13, sum(asi_market_access_hd.nrx_014) AS total_nrx_14, sum(asi_market_access_hd.nrx_015) AS total_nrx_15, sum(asi_market_access_hd.nrx_016) AS total_nrx_16, sum(asi_market_access_hd.nrx_017) AS total_nrx_17, sum(asi_market_access_hd.nrx_018) AS total_nrx_18, sum(asi_market_access_hd.nrx_019) AS total_nrx_19, sum(asi_market_access_hd.nrx_020) AS total_nrx_20, sum(asi_market_access_hd.nrx_021) AS total_nrx_21, sum(asi_market_access_hd.nrx_022) AS total_nrx_22, sum(asi_market_access_hd.nrx_023) AS total_nrx_23, sum(asi_market_access_hd.nrx_024) AS total_nrx_24, sum(asi_market_access_hd.trx_001) AS total_trx_01, sum(asi_market_access_hd.trx_002) AS total_trx_02, sum(asi_market_access_hd.trx_003) AS total_trx_03, sum(asi_market_access_hd.trx_004) AS total_trx_04, sum(asi_market_access_hd.trx_005) AS total_trx_05, sum(asi_market_access_hd.trx_006) AS total_trx_06, sum(asi_market_access_hd.trx_007) AS total_trx_07, sum(asi_market_access_hd.trx_008) AS total_trx_08, sum(asi_market_access_hd.trx_009) AS total_trx_09, sum(asi_market_access_hd.trx_010) AS total_trx_10, sum(asi_market_access_hd.trx_011) AS total_trx_11, sum(asi_market_access_hd.trx_012) AS total_trx_12, sum(asi_market_access_hd.trx_013) AS total_trx_13, sum(asi_market_access_hd.trx_014) AS total_trx_14, sum(asi_market_access_hd.trx_015) AS total_trx_15, sum(asi_market_access_hd.trx_016) AS total_trx_16, sum(asi_market_access_hd.trx_017) AS total_trx_17, sum(asi_market_access_hd.trx_018) AS total_trx_18, sum(asi_market_access_hd.trx_019) AS total_trx_19, sum(asi_market_access_hd.trx_020) AS total_trx_20, sum(asi_market_access_hd.trx_021) AS total_trx_21, sum(asi_market_access_hd.trx_022) AS total_trx_22, sum(asi_market_access_hd.trx_023) AS total_trx_23, sum(asi_market_access_hd.trx_024) AS total_trx_24 FROM outbound.asi_market_access_hd GROUP BY asi_market_access_hd.report_num, asi_market_access_hd.ims_product_group_num, asi_market_access_hd.data_month;

CREATE  VIEW outbound.zzz_ddd_subcategory AS
 SELECT ddd_subcategory.subcategory_code AS SUBCATEGORY_CODE,
        ddd_subcategory.category_code AS CATEGORY_CODE,
        ddd_subcategory.cot_code AS COT_CODE,
        ddd_subcategory.mailorder_flag AS MAILORDER_FLAG,
        ddd_subcategory.nonretail_flag AS NONRETAIL_FLAG,
        ddd_subcategory.outlet_example AS OUTLET_EXAMPLE,
        ddd_subcategory.outlet_description AS OUTLET_DESC,
        ddd_subcategory.outlet_definition AS OUTLET_DEFN,
        ddd_subcategory.mdm_flag AS MDM_FLAG,
        ddd_subcategory.adm_flag AS ADM_FLAG,
        ddd_subcategory.onc_subcat_group AS ONC_SUBCAT_GROUP
 FROM reference.ddd_subcategory;

CREATE  VIEW outbound.activity_centris_speaker_event AS
 SELECT cmid.id_num AS federation_id,
        e.locationtype AS contact,
        'Centris'::varchar(7) AS source,
        to_char(e.interactionstartdate, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(((concat((e.interactionname || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)) || ea.attended), (e.interactionstartdate)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (b.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Speaker_Program'::varchar(15) AS type,
        'Speaker_Program'::varchar(15) AS native_type,
        ((concat((('Speaker Program-'::varchar(16) || e.product1name) || ','::varchar(1)), (e.totalestimatedparticipantcount)::varchar) || ' Attendees,'::varchar(11)) || CASE WHEN (ea.attended = 1::float) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((datamart.ahm_participant ea JOIN ( SELECT ints.file_id,
        dm.feed_version,
        dm.feed_id,
        ints.interactioncode,
        ints.interactionname,
        ints.interactionstartdate,
        ints.product1id,
        ints.product1name,
        ints.totalestimatedparticipantcount,
        ints.locationtype
 FROM (datamart.ahm_interactions ints JOIN metadata.data_file_metadata dm ON ((dm.file_id = ints.file_id)))
 WHERE (ints.interactionstartdate >= add_months((now())::date, (-6)))
 GROUP BY ints.file_id,
          dm.feed_version,
          dm.feed_id,
          ints.interactioncode,
          ints.interactionname,
          ints.interactionstartdate,
          ints.product1id,
          ints.product1name,
          ints.totalestimatedparticipantcount,
          ints.locationtype) e ON ((ea.interactioncode = e.interactioncode))) JOIN datamart.tvcmid_xref cmid ON (((ea.clientcustomerid = cmid.tvcmid) AND (regexp_count(ea.clientcustomerid, '^[0-9.-]+$'::varchar(10), 1, ''::varchar) = 1) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN product.source_product sp ON (((upper(e.product1id) = upper(sp.source_product_code)) AND (e.feed_id = sp.feed_id) AND (e.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE (ea.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_PARTICIPANT'::varchar(19)))), 0))
 GROUP BY cmid.id_num,
          e.locationtype,
          'Centris'::varchar(7),
          to_char(e.interactionstartdate, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)),
          concat(((concat((e.interactionname || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)) || ea.attended), (e.interactionstartdate)::varchar),
          NULL,
          (b.basket_id)::varchar(20),
          'HCP'::varchar(3),
          'Speaker_Program'::varchar(15),
          ((concat((('Speaker Program-'::varchar(16) || e.product1name) || ','::varchar(1)), (e.totalestimatedparticipantcount)::varchar) || ' Attendees,'::varchar(11)) || CASE WHEN (ea.attended = 1::float) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END),
          to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) EXCEPT  SELECT cmid.id_num AS federation_id,
        e.locationtype AS contact,
        'Centris'::varchar(7) AS source,
        to_char(e.interactionstartdate, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        concat(((concat((e.interactionname || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)) || ea.attended), (e.interactionstartdate)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (b.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Speaker_Program'::varchar(15) AS type,
        'Speaker_Program'::varchar(15) AS native_type,
        ((concat((('Speaker Program-'::varchar(16) || e.product1name) || ','::varchar(1)), (e.totalestimatedparticipantcount)::varchar) || ' Attendees,'::varchar(11)) || CASE WHEN (ea.attended = 1::float) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((datamart.ahm_participant ea JOIN ( SELECT ints.file_id,
        dm.feed_version,
        dm.feed_id,
        ints.interactioncode,
        ints.interactionname,
        ints.interactionstartdate,
        ints.product1id,
        ints.product1name,
        ints.totalestimatedparticipantcount,
        ints.locationtype
 FROM (datamart.ahm_interactions ints JOIN metadata.data_file_metadata dm ON ((dm.file_id = ints.file_id)))
 WHERE (ints.interactionstartdate >= add_months((now())::date, (-6)))
 GROUP BY ints.file_id,
          dm.feed_version,
          dm.feed_id,
          ints.interactioncode,
          ints.interactionname,
          ints.interactionstartdate,
          ints.product1id,
          ints.product1name,
          ints.totalestimatedparticipantcount,
          ints.locationtype) e ON ((ea.interactioncode = e.interactioncode))) JOIN datamart.tvcmid_xref cmid ON (((ea.clientcustomerid = cmid.tvcmid) AND (regexp_count(ea.clientcustomerid, '^[0-9.-]+$'::varchar(10), 1, ''::varchar) = 1) AND (cmid.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN product.source_product sp ON (((upper(e.product1id) = upper(sp.source_product_code)) AND (e.feed_id = sp.feed_id) AND (e.feed_version = sp.feed_version)))) LEFT  JOIN product.basket b ON ((sp.entity_id = b.basket_id)))
 WHERE (ea.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_AHM_PARTICIPANT'::varchar(19)))), 0))
 GROUP BY cmid.id_num,
          e.locationtype,
          'Centris'::varchar(7),
          to_char(e.interactionstartdate, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)),
          concat(((concat((e.interactionname || '-'::varchar(1)), (cmid.tvcmid)::varchar) || '-'::varchar(1)) || ea.attended), (e.interactionstartdate)::varchar),
          NULL,
          (b.basket_id)::varchar(20),
          'HCP'::varchar(3),
          'Speaker_Program'::varchar(15),
          ((concat((('Speaker Program-'::varchar(16) || e.product1name) || ','::varchar(1)), (e.totalestimatedparticipantcount)::varchar) || ' Attendees,'::varchar(11)) || CASE WHEN (ea.attended = 1::float) THEN 'Attended'::varchar(8) ELSE 'Invited'::varchar(7) END),
          to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23));

CREATE  VIEW outbound.v_activity_line_item AS
( SELECT activity_line_item_speaker_event.activity,
        activity_line_item_speaker_event."datetime",
        activity_line_item_speaker_event.trackback_id,
        activity_line_item_speaker_event.previous_line_item,
        activity_line_item_speaker_event.level_master_id,
        activity_line_item_speaker_event.type,
        activity_line_item_speaker_event.native_type,
        activity_line_item_speaker_event.details,
        activity_line_item_speaker_event.created,
        activity_line_item_speaker_event.modified
 FROM outbound.activity_line_item_speaker_event UNION ALL  SELECT activity_line_item_non_npp_sample_orders.activity,
        activity_line_item_non_npp_sample_orders."datetime",
        activity_line_item_non_npp_sample_orders.trackback_id,
        activity_line_item_non_npp_sample_orders.previous_line_item,
        activity_line_item_non_npp_sample_orders.level_master_id,
        activity_line_item_non_npp_sample_orders.type,
        activity_line_item_non_npp_sample_orders.native_type,
        activity_line_item_non_npp_sample_orders.details,
        activity_line_item_non_npp_sample_orders.created,
        activity_line_item_non_npp_sample_orders.modified
 FROM outbound.activity_line_item_non_npp_sample_orders) UNION ALL  SELECT activity_line_item_centris_speaker_event.activity,
        activity_line_item_centris_speaker_event."datetime",
        activity_line_item_centris_speaker_event.trackback_id,
        activity_line_item_centris_speaker_event.previous_line_item,
        activity_line_item_centris_speaker_event.level_master_id,
        activity_line_item_centris_speaker_event.type,
        activity_line_item_centris_speaker_event.native_type,
        activity_line_item_centris_speaker_event.details,
        activity_line_item_centris_speaker_event.created,
        activity_line_item_centris_speaker_event.modified
 FROM outbound.activity_line_item_centris_speaker_event;

CREATE  VIEW outbound.zzz_alphascrip_roster AS
 SELECT rep.territory_number AS TerritoryID,
        rep.territory_name AS TerritoryName,
        CASE WHEN (rep.rep_type = 'REP'::varchar(3)) THEN 'Territory'::varchar(9) WHEN (rep.rep_type = 'MGR'::varchar(3)) THEN 'Region'::varchar(6) WHEN (rep.rep_type = 'DIR'::varchar(3)) THEN 'Area'::varchar(4) WHEN (rep.rep_type = 'VP'::varchar(2)) THEN 'National'::varchar(8) ELSE NULL END AS Territorytype,
        rep.last_name AS Territoryincumbentlastname,
        rep.first_name AS Territoryincumbentfirstname,
        rep.email AS Territoryincumbentbusinessemailaddress
 FROM datamart.roster rep
 WHERE ((rep.employee_id IS NOT NULL) AND (rep.hr_status = 'Active'::varchar(6)) AND (rep.sales_force_id = 'TP'::varchar(2)))
 GROUP BY rep.territory_number,
          rep.territory_name,
          CASE WHEN (rep.rep_type = 'REP'::varchar(3)) THEN 'Territory'::varchar(9) WHEN (rep.rep_type = 'MGR'::varchar(3)) THEN 'Region'::varchar(6) WHEN (rep.rep_type = 'DIR'::varchar(3)) THEN 'Area'::varchar(4) WHEN (rep.rep_type = 'VP'::varchar(2)) THEN 'National'::varchar(8) ELSE NULL END,
          rep.last_name,
          rep.first_name,
          rep.email;

CREATE  VIEW outbound.zzz_zs_access_monito_calls_by_specialty_respiratory AS
SELECT 'TEVA'::varchar(4) AS company, x.specialty_code, d.prim_specialty, count(DISTINCT c.tvcmid) AS number_of_physicians_6mth FROM (((SELECT sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE (sfa_demographics.ims_id IS NOT NULL) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.tvcmid FROM datamart.sfa_call c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01))) GROUP BY c.tvcmid) c ON ((d.tvcmid = c.tvcmid))) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) GROUP BY d.prim_specialty, x.specialty_code ORDER BY x.specialty_code;

CREATE  VIEW outbound.zs_access_monitor_call_data_cns AS
SELECT 'TEVA'::varchar(4) AS company, d.sales_force_id AS sales_force, coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM, NULL AS me_num, d.npi, d.VEEVA_ACCOUNT_ID AS veeva_account_id, d.tvcmid, d.ims_id, to_char(m.m01, 'yyyymm'::varchar(6)) AS month1, c.p1_calls_mth1, c.p1_calls_mth2, c.p1_calls_mth3, c.p1_calls_mth4, c.p1_calls_mth5, c.p1_calls_mth6, cp.plan_calls AS total_calls, to_char(m.m04, 'yyyymm'::varchar(6)) AS start_month, to_char(m.m01, 'yyyymm'::varchar(6)) AS end_month, '4'::varchar(1) AS duration, CASE WHEN (cp.tvcmid IS NULL) THEN '0'::varchar(1) ELSE '1'::varchar(1) END AS physician_value, d.ZIP AS physician_zip, x.specialty_code AS physician_specialty FROM ((((((SELECT calls.tvcmid, calls.territory_num FROM (SELECT c.tvcmid, c.territory_number AS territory_num, c.rep_id, trunc(c.call_date, 'MON'::varchar(3)) AS call_date, sum(1) AS pri_calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.tvcmid, c.territory_number, c.rep_id, trunc(c.call_date, 'MON'::varchar(3))) calls UNION SELECT call_plan.tvcmid, call_plan.territory_num FROM (SELECT cp.tvcmid, cp.territory_number AS territory_num, sum(cp.p1) AS plan_calls FROM datamart.call_plan cp WHERE (cp.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) GROUP BY cp.tvcmid, cp.territory_number) call_plan) u JOIN (SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.sales_force_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE ((sfa_demographics.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) AND (sfa_demographics.ims_id IS NOT NULL)) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.sales_force_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d ON (((u.tvcmid = d.tvcmid) AND (u.territory_num = d.territory_num)))) JOIN (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m ON (true)) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) LEFT JOIN (SELECT c.tvcmid, c.territory_num, c.rep_id, sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1, sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2, sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3, sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4, sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5, sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6 FROM (SELECT c.tvcmid, c.territory_number AS territory_num, c.rep_id, trunc(c.call_date, 'MON'::varchar(3)) AS call_date, sum(1) AS pri_calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.tvcmid, c.territory_number, c.rep_id, trunc(c.call_date, 'MON'::varchar(3))) c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m GROUP BY c.tvcmid, c.territory_num, c.rep_id) c ON (((u.tvcmid = c.tvcmid) AND (u.territory_num = c.territory_num)))) LEFT JOIN (SELECT cp.tvcmid, cp.territory_number AS territory_num, sum(cp.p1) AS plan_calls FROM datamart.call_plan cp WHERE (cp.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])) GROUP BY cp.tvcmid, cp.territory_number) cp ON (((u.tvcmid = cp.tvcmid) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_access_monitor_call_data_oncology AS
SELECT 'TEVA'::varchar(4) AS company, 'TO'::varchar(2) AS sales_force, coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM, NULL AS me_num, d.npi, d.VEEVA_ACCOUNT_ID AS veeva_account_id, d.tvcmid, d.ims_id, to_char(m.m01, 'yyyymm'::varchar(6)) AS month1, c.p1_calls_mth1, c.p1_calls_mth2, c.p1_calls_mth3, c.p1_calls_mth4, c.p1_calls_mth5, c.p1_calls_mth6, NULL AS total_calls, NULL AS start_month, NULL AS end_month, '4'::varchar(1) AS duration, '1'::varchar(1) AS physician_value, d.ZIP AS physician_zip, x.specialty_code AS physician_specialty FROM ((((((SELECT calls.tvcmid, calls.territory_num FROM (SELECT c.tvcmid, c.territory_number AS territory_num, c.rep_id, trunc(c.call_date, 'MON'::varchar(3)) AS call_date, sum(1) AS pri_calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.tvcmid, c.territory_number, c.rep_id, trunc(c.call_date, 'MON'::varchar(3))) calls UNION SELECT call_plan.tvcmid, call_plan.territory_num FROM (SELECT cp.tvcmid, cp.territory_number AS territory_num, sum(cp.p1) AS plan_calls FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.period = zs.semester)))) WHERE (cp.sales_force_id = 'TO'::varchar(2)) GROUP BY cp.tvcmid, cp.territory_number) call_plan) u JOIN (SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE ((sfa_demographics.sales_force_id = 'TO'::varchar(2)) AND (sfa_demographics.ims_id IS NOT NULL)) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d ON (((u.tvcmid = d.tvcmid) AND (u.territory_num = d.territory_num)))) JOIN (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m ON (true)) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) LEFT JOIN (SELECT c.tvcmid, c.territory_num, c.rep_id, sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1, sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2, sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3, sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4, sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5, sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6 FROM (SELECT c.tvcmid, c.territory_number AS territory_num, c.rep_id, trunc(c.call_date, 'MON'::varchar(3)) AS call_date, sum(1) AS pri_calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.tvcmid, c.territory_number, c.rep_id, trunc(c.call_date, 'MON'::varchar(3))) c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m GROUP BY c.tvcmid, c.territory_num, c.rep_id) c ON (((u.tvcmid = c.tvcmid) AND (u.territory_num = c.territory_num)))) LEFT JOIN (SELECT cp.tvcmid, cp.territory_number AS territory_num, sum(cp.p1) AS plan_calls FROM (datamart.call_plan cp JOIN outbound.zs_monitor_sales_force_product zs ON (((cp.sales_force_id = zs.sales_force_id) AND (cp.period = zs.semester)))) WHERE (cp.sales_force_id = 'TO'::varchar(2)) GROUP BY cp.tvcmid, cp.territory_number) cp ON (((u.tvcmid = cp.tvcmid) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_access_monitor_call_data_respiratory AS
SELECT 'TEVA'::varchar(4) AS company, d.sales_force_id AS sales_force, coalesce(c.territory_num, cp.territory_num) AS TERRITORY_NUM, NULL AS me_num, d.npi, d.VEEVA_ACCOUNT_ID AS veeva_account_id, d.tvcmid, d.ims_id, to_char(m.m01, 'yyyymm'::varchar(6)) AS month1, c.p1_calls_mth1, c.p1_calls_mth2, c.p1_calls_mth3, c.p1_calls_mth4, c.p1_calls_mth5, c.p1_calls_mth6, cp.plan_calls AS total_calls, to_char(m.m04, 'yyyymm'::varchar(6)) AS start_month, to_char(m.m01, 'yyyymm'::varchar(6)) AS end_month, '4'::varchar(1) AS duration, CASE WHEN (cp.tvcmid IS NULL) THEN '0'::varchar(1) ELSE '1'::varchar(1) END AS physician_value, d.ZIP AS physician_zip, x.specialty_code AS physician_specialty FROM ((((((SELECT calls.tvcmid, calls.territory_num FROM (SELECT c.tvcmid, c.territory_number AS territory_num, c.rep_id, trunc(c.call_date, 'MON'::varchar(3)) AS call_date, sum(1) AS pri_calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.tvcmid, c.territory_number, c.rep_id, trunc(c.call_date, 'MON'::varchar(3))) calls UNION SELECT call_plan.tvcmid, call_plan.territory_num FROM (SELECT cp.tvcmid, cp.territory_number AS territory_num, sum(cp.p1) AS plan_calls FROM datamart.call_plan cp WHERE (cp.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) GROUP BY cp.tvcmid, cp.territory_number) call_plan) u JOIN (SELECT sfa_demographics.veeva_account_id AS VEEVA_ACCOUNT_ID, sfa_demographics.sales_force_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE ((sfa_demographics.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (sfa_demographics.ims_id IS NOT NULL)) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.sales_force_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d ON (((u.tvcmid = d.tvcmid) AND (u.territory_num = d.territory_num)))) JOIN (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m ON (true)) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) LEFT JOIN (SELECT c.tvcmid, c.territory_num, c.rep_id, sum(CASE WHEN (c.call_date = m.m01) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth1, sum(CASE WHEN (c.call_date = m.m02) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth2, sum(CASE WHEN (c.call_date = m.m03) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth3, sum(CASE WHEN (c.call_date = m.m04) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth4, sum(CASE WHEN (c.call_date = m.m05) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth5, sum(CASE WHEN (c.call_date = m.m06) THEN c.pri_calls ELSE 0 END) AS p1_calls_mth6 FROM (SELECT c.tvcmid, c.territory_number AS territory_num, c.rep_id, trunc(c.call_date, 'MON'::varchar(3)) AS call_date, sum(1) AS pri_calls FROM datamart.sfa_call c, datamart.sfa_call_detail d, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.call_id = d.call_id) AND (c.sales_force_id = d.sales_force_id) AND (c.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (c.customer_type = 'Professional'::varchar(12)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01)) AND (d.detail_position = 1)) GROUP BY c.tvcmid, c.territory_number, c.rep_id, trunc(c.call_date, 'MON'::varchar(3))) c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m GROUP BY c.tvcmid, c.territory_num, c.rep_id) c ON (((u.tvcmid = c.tvcmid) AND (u.territory_num = c.territory_num)))) LEFT JOIN (SELECT cp.tvcmid, cp.territory_number AS territory_num, sum(cp.p1) AS plan_calls FROM datamart.call_plan cp WHERE (cp.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) GROUP BY cp.tvcmid, cp.territory_number) cp ON (((u.tvcmid = cp.tvcmid) AND (u.territory_num = cp.territory_num))));

CREATE  VIEW outbound.zs_access_monitor_calls_by_specialty_oncology AS
SELECT 'TEVA'::varchar(4) AS company, x.specialty_code, d.prim_specialty, count(DISTINCT c.tvcmid) AS number_of_physicians_6mth FROM (((SELECT sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE (sfa_demographics.ims_id IS NOT NULL) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.tvcmid FROM datamart.sfa_call c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = 'TO'::varchar(2)) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01))) GROUP BY c.tvcmid) c ON ((d.tvcmid = c.tvcmid))) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) GROUP BY d.prim_specialty, x.specialty_code ORDER BY x.specialty_code;

CREATE  VIEW outbound.zs_access_monitor_calls_by_specialty_respiratory AS
SELECT 'TEVA'::varchar(4) AS company, x.specialty_code, d.prim_specialty, count(DISTINCT c.tvcmid) AS number_of_physicians_6mth FROM (((SELECT sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number AS territory_num, sfa_demographics.prim_specialty, sfa_demographics.zip AS ZIP FROM datamart.sfa_demographics WHERE (sfa_demographics.ims_id IS NOT NULL) GROUP BY sfa_demographics.veeva_account_id, sfa_demographics.ims_id, sfa_demographics.npi, sfa_demographics.tvcmid, sfa_demographics.territory_number, sfa_demographics.prim_specialty, sfa_demographics.zip) d JOIN (SELECT c.tvcmid FROM datamart.sfa_call c, (SELECT trunc(add_months((statement_timestamp())::timestamp, (-1)), 'MON'::varchar(3)) AS m01, trunc(add_months((statement_timestamp())::timestamp, (-2)), 'MON'::varchar(3)) AS m02, trunc(add_months((statement_timestamp())::timestamp, (-3)), 'MON'::varchar(3)) AS m03, trunc(add_months((statement_timestamp())::timestamp, (-4)), 'MON'::varchar(3)) AS m04, trunc(add_months((statement_timestamp())::timestamp, (-5)), 'MON'::varchar(3)) AS m05, trunc(add_months((statement_timestamp())::timestamp, (-6)), 'MON'::varchar(3)) AS m06, trunc(add_months((statement_timestamp())::timestamp, (-7)), 'MON'::varchar(3)) AS m07, trunc(add_months((statement_timestamp())::timestamp, (-8)), 'MON'::varchar(3)) AS m08, trunc(add_months((statement_timestamp())::timestamp, (-9)), 'MON'::varchar(3)) AS m09, trunc(add_months((statement_timestamp())::timestamp, (-10)), 'MON'::varchar(3)) AS m10, trunc(add_months((statement_timestamp())::timestamp, (-11)), 'MON'::varchar(3)) AS m11, trunc(add_months((statement_timestamp())::timestamp, (-12)), 'MON'::varchar(3)) AS m12 FROM v_catalog.dual) m WHERE ((c.customer_type = 'Professional'::varchar(12)) AND (c.sales_force_id = ANY (ARRAY['TS'::varchar(2), 'TR'::varchar(2)])) AND (c.call_date >= m.m06) AND (c.call_date <= last_day(m.m01))) GROUP BY c.tvcmid) c ON ((d.tvcmid = c.tvcmid))) LEFT JOIN reference.sfa_specialty_xref x ON ((d.prim_specialty = x.specialty_desc))) GROUP BY d.prim_specialty, x.specialty_code ORDER BY x.specialty_code;

CREATE  VIEW outbound.zs_access_monitor_no_contact_cns AS
 SELECT a.sales_force_id,
        b.me__c AS me_number,
        a.npi,
        b.id AS veeva_id,
        a.tvcmid,
        a.ims_id
 FROM (datamart.sfa_demographics a JOIN veeva.account b ON ((a.veeva_account_id = b.id)))
 WHERE ((b.no_contact_tva__c IS NOT NULL) AND (a.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)])))
 GROUP BY a.sales_force_id,
          b.me__c,
          a.npi,
          b.id,
          a.tvcmid,
          a.ims_id
 ORDER BY b.me__c;

CREATE  VIEW outbound.zs_access_monitor_no_contact_oncology AS
 SELECT a.sales_force_id,
        b.me__c AS me_number,
        a.npi,
        b.id AS veeva_id,
        a.tvcmid,
        a.ims_id
 FROM (datamart.sfa_demographics a JOIN veeva.account b ON ((a.veeva_account_id = b.id)))
 WHERE ((b.no_contact_tva__c IS NOT NULL) AND (a.sales_force_id = 'TO'::varchar(2)))
 GROUP BY a.sales_force_id,
          b.me__c,
          a.npi,
          b.id,
          a.tvcmid,
          a.ims_id
 ORDER BY b.me__c;

CREATE  VIEW outbound.activity_copay AS
 SELECT fed.id_num AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(c.fill_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        (((c.file_id)::varchar || '-'::varchar(1)) || (c.record_id)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (brand.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((((('Voucher/Coupon Redemption - '::varchar(28) || coalesce(b.name, ''::varchar)) || ','::varchar(1)) || coalesce(cvp.program_description, ''::varchar)) || ','::varchar(1)) || c.redemption_type) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.program_number = cvp.program_number) AND (c.redemption_type = cvp.redemption_type)))) JOIN datamart.tvcmid_xref fed ON (((c.physician_tvcmid = fed.tvcmid) AND (fed.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN product.basket b ON ((c.basket_id = b.basket_id))) LEFT  JOIN ( SELECT bb.basket_id,
        bb.name,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.prod_id)))
 WHERE ((c.file_id > coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_ASI_COPAY_DETAIL_WKLY'::varchar(25)))), 0)) AND (c.fill_date >= add_months((now())::date, (-6)))) EXCEPT  SELECT fed.id_num AS federation_id,
        NULL AS contact,
        'Third_Party_Redemptions'::varchar(23) AS source,
        to_char(c.fill_date, 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS "datetime",
        (((c.file_id)::varchar || '-'::varchar(1)) || (c.record_id)::varchar) AS trackback_id,
        NULL AS previous_activity,
        (brand.basket_id)::varchar(20) AS level_master_id,
        'HCP'::varchar(3) AS activity_role,
        'Voucher/Coupon_Redemption'::varchar(25) AS type,
        'Voucher/Coupon_Redemption'::varchar(25) AS native_type,
        ((((('Voucher/Coupon Redemption - '::varchar(28) || coalesce(b.name, ''::varchar)) || ','::varchar(1)) || coalesce(cvp.program_description, ''::varchar)) || ','::varchar(1)) || c.redemption_type) AS details,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS created,
        to_char(now(), 'yyyy-mm-ddThh:mi:ss.msz'::varchar(23)) AS modified
 FROM ((((datamart.copay c JOIN reference.copay_voucher_program cvp ON (((c.program_number = cvp.program_number) AND (c.redemption_type = cvp.redemption_type)))) JOIN datamart.tvcmid_xref fed ON (((c.physician_tvcmid = fed.tvcmid) AND (fed.id_type = 'FED_ID'::varchar(6))))) LEFT  JOIN product.basket b ON ((c.basket_id = b.basket_id))) LEFT  JOIN ( SELECT bb.basket_id,
        bb.name,
        bp.basket_id AS prod_id
 FROM ((product.basket_item bip JOIN product.basket bp ON ((bip.entity_id = bp.basket_id))) JOIN product.basket bb ON (((bip.basket_id = bb.basket_id) AND (bb.basket_type = 'brand'::varchar(5)))))) brand ON ((c.basket_id = brand.prod_id)))
 WHERE ((c.file_id <= coalesce(( SELECT max(teva_transform_control.batch_id) AS max
 FROM teva_transform.teva_transform_control
 WHERE ((teva_transform_control.transform_name = 'ACTIVITY_HUB_OB'::varchar(15)) AND (teva_transform_control.file_class_name = 'EXT_ASI_COPAY_DETAIL_WKLY'::varchar(25)))), 0)) AND (c.fill_date >= add_months((now())::date, (-6))));

CREATE  VIEW outbound.zzz_asi_rx_by_market_saba AS
 SELECT rx.market_name,
        rx.ims_client_number AS ims_client_num,
        rx.ims_report_number_cnt AS ims_report_num,
        rx.ims_zip_other AS zip_other,
        CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END AS ims_id,
        rx.ims_specialty AS specialty,
        rx.payer_plan_number AS plan_id,
        btrim(to_char(rx.sales_category, '00'::varchar(2))) AS sales_category,
        rx.ims_rx_type AS rx_type,
        btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))) AS ims_product_group_num,
        NULL AS filler_01,
        axd.ims_me_num AS me_num,
        rx.prescriber_last_name AS last_name,
        rx.prescriber_first_name AS first_name,
        axd.ims_middle_name AS middle_name,
        replace(axd.ims_address, ','::varchar(1), ''::varchar) AS address,
        axd.ims_city AS city,
        axd.ims_state AS state,
        axd.ims_zip AS zip,
        replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar) AS supplemental_data,
        rx.plan_name,
        to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6)) AS data_date,
        48 AS bucket_count,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.nrx_count ELSE NULL::float END) AS nrx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.nrx_count ELSE NULL::float END) AS nrx_024,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), 0)) THEN rx.trx_count ELSE NULL::float END) AS trx_001,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-1))) THEN rx.trx_count ELSE NULL::float END) AS trx_002,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-2))) THEN rx.trx_count ELSE NULL::float END) AS trx_003,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-3))) THEN rx.trx_count ELSE NULL::float END) AS trx_004,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-4))) THEN rx.trx_count ELSE NULL::float END) AS trx_005,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-5))) THEN rx.trx_count ELSE NULL::float END) AS trx_006,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-6))) THEN rx.trx_count ELSE NULL::float END) AS trx_007,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-7))) THEN rx.trx_count ELSE NULL::float END) AS trx_008,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-8))) THEN rx.trx_count ELSE NULL::float END) AS trx_009,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-9))) THEN rx.trx_count ELSE NULL::float END) AS trx_010,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-10))) THEN rx.trx_count ELSE NULL::float END) AS trx_011,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-11))) THEN rx.trx_count ELSE NULL::float END) AS trx_012,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-12))) THEN rx.trx_count ELSE NULL::float END) AS trx_013,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-13))) THEN rx.trx_count ELSE NULL::float END) AS trx_014,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-14))) THEN rx.trx_count ELSE NULL::float END) AS trx_015,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-15))) THEN rx.trx_count ELSE NULL::float END) AS trx_016,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-16))) THEN rx.trx_count ELSE NULL::float END) AS trx_017,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-17))) THEN rx.trx_count ELSE NULL::float END) AS trx_018,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-18))) THEN rx.trx_count ELSE NULL::float END) AS trx_019,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-19))) THEN rx.trx_count ELSE NULL::float END) AS trx_020,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-20))) THEN rx.trx_count ELSE NULL::float END) AS trx_021,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-21))) THEN rx.trx_count ELSE NULL::float END) AS trx_022,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-22))) THEN rx.trx_count ELSE NULL::float END) AS trx_023,
        sum(CASE WHEN (last_day(rx.date) = add_months(last_day(rx.data_date), (-23))) THEN rx.trx_count ELSE NULL::float END) AS trx_024
 FROM (datamart.prescriber_rx rx JOIN outbound.asi_xponent_demographics axd ON (((rx.ims_client_number = axd.ims_client_number) AND (rx.ims_report_number_cnt = axd.ims_report_number) AND (rx.ims_id = axd.ims_id) AND (rx.ims_product_group = axd.ims_product_group) AND (rx.ims_specialty = axd.ims_specialty) AND (rx.ims_zip_other = axd.ims_zip_other))))
 WHERE ((rx.basket_type = 'product'::varchar(7)) AND (rx.ims_client_number = '632'::varchar(3)) AND (rx.ims_report_number_cnt = '14'::varchar(2)) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.market_name,
          rx.ims_client_number,
          rx.ims_report_number_cnt,
          rx.ims_zip_other,
          CASE WHEN (rx.prescriber_last_name = 'NATIONAL ASSIGNMENT'::varchar(19)) THEN NULL ELSE rx.ims_id END,
          rx.ims_specialty,
          axd.ims_me_num,
          rx.payer_plan_number,
          btrim(to_char(rx.sales_category, '00'::varchar(2))),
          rx.ims_rx_type,
          btrim(to_char(rx.ims_product_group, '000000000'::varchar(9))),
          rx.prescriber_last_name,
          rx.prescriber_first_name,
          axd.ims_middle_name,
          replace(axd.ims_address, ','::varchar(1), ''::varchar),
          axd.ims_city,
          axd.ims_state,
          axd.ims_zip,
          replace(rx.ims_supplemental_data, ','::varchar(1), ''::varchar),
          rx.plan_name,
          to_char(last_day(rx.data_date), 'MMDDYY'::varchar(6));

CREATE  VIEW outbound.zzz_bullseye_prescriber_demographics AS
 SELECT d.ims_id,
        d.tvcmid,
        d.npi,
        rxd.decile_name,
        rxd.decile_trx_count_6_mo,
        rxd.decile_trx_count_12_mo,
        d.last_name,
        d.first_name,
        d.degree AS medical_suffix,
        d.specialty AS primary_specialty,
        d.ptr_address_1 AS address_line1,
        d.ptr_address_2 AS address_line2,
        d.ptr_city AS city,
        d.ptr_state AS state,
        d.ptr_zip AS zip,
        d.np_pa_flag,
        sfa.last_call_date,
        d.pdrp_flag
 FROM ((datamart.prescriber_combined_demographics d JOIN datamart.rx_deciles rxd ON ((d.tvcmid = rxd.tvcmid))) LEFT  JOIN ( SELECT sfa_demographics.sales_force_id,
        sfa_demographics.tvcmid,
        max(sfa_demographics.last_call_date) AS last_call_date
 FROM datamart.sfa_demographics
 WHERE (sfa_demographics.tvcmid IS NOT NULL)
 GROUP BY sfa_demographics.sales_force_id,
          sfa_demographics.tvcmid) sfa ON (((d.tvcmid = sfa.tvcmid) AND (d.sales_force_id = sfa.sales_force_id))))
 WHERE ((d.sales_force_id = 'TR'::varchar(2)) AND (rxd.decile_name = 'ICS MARKET TOTAL'::varchar(16)));

CREATE  VIEW outbound.sharepoint_roster_tr_ts AS
 SELECT sr.title,
        sr.territory
 FROM ( SELECT lower(r.username) AS title,
        r.territory_number AS territory
 FROM datamart.roster r
 WHERE ((r.username IS NOT NULL) AND (r.sales_force_id = ANY (ARRAY['TR'::varchar(2), 'TS'::varchar(2)]))) UNION  SELECT lower(r.username) AS title,
        (r.employee_id || '_'::varchar(1)) AS territory
 FROM datamart.roster r
 WHERE ((r.username IS NOT NULL) AND (r.sales_force_id = ANY (ARRAY['TR'::varchar(2), 'TS'::varchar(2)])))) sr
 GROUP BY sr.title,
          sr.territory
 ORDER BY sr.title;

CREATE  VIEW outbound.mcm_customer_level_flags AS
 SELECT clf.tvcmid,
        ai.alternate_id_value AS federation_id,
        clf.basket_id,
        clf.basket_name,
        clf.territory_number,
        clf.sales_force_id,
        clf.flag_type,
        clf.flag_value,
        clf.flag_effective_start_date,
        clf.flag_effective_end_date
 FROM (datamart.customer_level_flags clf JOIN mdm.alternate_id ai ON ((clf.tvcmid = ai.tvcmid)))
 WHERE ((ai.status_name = 'ACTIVE'::varchar(6)) AND (ai.alternate_id_type = 'FED_ID'::varchar(6)));

CREATE  VIEW outbound.zs_ajovy_activity_sample_shipment AS
 SELECT sample_shipment.veeva_id,
        sample_shipment.tvcmid,
        sample_shipment.ims_id,
        sample_shipment.first_name,
        sample_shipment.middle_name,
        sample_shipment.last_name,
        sample_shipment.designation,
        sample_shipment.state_license_number,
        sample_shipment.address_line_1,
        sample_shipment.address_line_2,
        sample_shipment.address_line_3,
        sample_shipment.city,
        sample_shipment.state,
        sample_shipment.zip,
        sample_shipment.dea_license_number,
        sample_shipment.order_id,
        sample_shipment.ndc,
        sample_shipment.basket_id,
        sample_shipment.basket_name,
        sample_shipment.order_job_code,
        sample_shipment.order_job_description,
        sample_shipment.ship_qty,
        sample_shipment.ship_date
 FROM datamart.sample_shipment
 WHERE (sample_shipment.basket_name ~~ 'AJOVY%'::varchar(6))
 ORDER BY sample_shipment.ship_date;

CREATE  VIEW outbound.connectiverx_ajovy_zip_to_territory AS
 SELECT current_alignment.sales_force_id,
        current_alignment.zip_code,
        current_alignment.territory_number,
        current_alignment.territory_name,
        current_alignment.region_number,
        current_alignment.region_name AS area_number,
        current_alignment.area_name
 FROM datamart.current_alignment
 WHERE (current_alignment.sales_force_id = ANY (ARRAY['TE'::varchar(2), 'TN'::varchar(2), 'TR'::varchar(2)]))
 ORDER BY current_alignment.zip_code,
          current_alignment.territory_number;

CREATE  VIEW outbound.zs_xpd_switch_details AS
SELECT xpd_switch_details.ims_client_number, xpd_switch_details.ims_report_number, xpd_switch_details.channel_indicator, xpd_switch_details.ims_id, xpd_switch_details.tvcmid, xpd_switch_details.specialty, xpd_switch_details.switch_from_product_group_num, xpd_switch_details.switch_from_basket_id, xpd_switch_details.switch_from_basket_name, xpd_switch_details.switch_to_product_group_num, xpd_switch_details.switch_to_basket_id, xpd_switch_details.switch_to_basket_name, xpd_switch_details.rollup_month, xpd_switch_details.rx FROM datamart.xpd_switch_details;

CREATE  VIEW outbound.connectiverx_ajovy_pdrp AS
 SELECT f.tvcmid,
        nx.npi,
        ix.ims_id,
        f.flag_value AS pdrp_flag
 FROM ((datamart.customer_level_flags f LEFT  JOIN ( SELECT x.tvcmid,
        x.npi
 FROM ( SELECT tvcmid_xref.tvcmid,
        tvcmid_xref.id_num AS npi,
        row_number() OVER (PARTITION BY tvcmid_xref.tvcmid ORDER BY tvcmid_xref.id_num) AS rnk
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'NPI'::varchar(3))) x
 WHERE (x.rnk = 1)) nx ON ((nx.tvcmid = f.tvcmid))) LEFT  JOIN ( SELECT x.tvcmid,
        x.ims_id
 FROM ( SELECT tvcmid_xref.tvcmid,
        tvcmid_xref.id_num AS ims_id,
        row_number() OVER (PARTITION BY tvcmid_xref.tvcmid ORDER BY tvcmid_xref.id_num) AS rnk
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'IMS_ID'::varchar(6))) x
 WHERE (x.rnk = 1)) ix ON ((ix.tvcmid = f.tvcmid)))
 WHERE ((f.flag_type = 'PDRP'::varchar(4)) AND (f.flag_value = 'Y'::varchar(1)));

CREATE  VIEW outbound.wrb_roster AS
 SELECT r."Territory ID",
        r."First Name",
        r."Middle Name",
        r."Last Name",
        r.Title,
        r.Email,
        r."Office Phone",
        r."Superior's Territory ID",
        r."Brand Business Unit"
 FROM ( SELECT roster.territory_number AS "Territory ID",
        roster.first_name AS "First Name",
        roster.middle_name AS "Middle Name",
        roster.last_name AS "Last Name",
        roster.title AS Title,
        roster.email AS Email,
        roster.business_phone AS "Office Phone",
        roster.parent_territory_number AS "Superior's Territory ID",
        roster.sales_force_id AS "Brand Business Unit"
 FROM datamart.roster
 WHERE ((roster.last_name <> 'Vacant'::varchar(6)) AND (roster.sales_force_id = ANY (ARRAY['MA'::varchar(2), 'TE'::varchar(2), 'TX'::varchar(2), 'TZ'::varchar(2), 'TH'::varchar(2), 'TM'::varchar(2), 'TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)]))) UNION  SELECT axtria_territory_hierarchy.territory_number__c AS "Territory ID",
        'VACANT'::varchar(6) AS "First Name",
        ''::varchar AS "Middle Name",
        axtria_territory_hierarchy.territory_number__c AS "Last Name",
        CASE axtria_territory_hierarchy.territory_level__c WHEN 'REP'::varchar(3) THEN 'Sales Specialist'::varchar(16) WHEN 'MGR'::varchar(3) THEN 'Area Manager'::varchar(12) WHEN 'DIR'::varchar(3) THEN 'Regional Director'::varchar(17) ELSE axtria_territory_hierarchy.territory_level__c END AS Title,
        (axtria_territory_hierarchy.territory_number__c || '@tevapharm.com'::varchar(14)) AS Email,
        ''::varchar AS "Office Phone",
        axtria_territory_hierarchy.parent_territory_number__c AS "Superior's Territory ID",
        axtria_territory_hierarchy.business_unit_code__c AS "Brand Business Unit"
 FROM cleansed.axtria_territory_hierarchy
 WHERE (axtria_territory_hierarchy.territory_number__c IN ( SELECT roster.territory_number
 FROM datamart.roster
 WHERE ((roster.last_name = 'Vacant'::varchar(6)) AND (roster.sales_force_id = ANY (ARRAY['MA'::varchar(2), 'TE'::varchar(2), 'TX'::varchar(2), 'TZ'::varchar(2), 'TH'::varchar(2), 'TM'::varchar(2), 'TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)])))))) r
 ORDER BY r."Territory ID";

CREATE  VIEW outbound.fingertip_roster AS
 SELECT roster.email,
        roster.first_name,
        roster.last_name,
        NULL AS password,
        CASE WHEN (roster.rep_type = 'REP'::varchar(3)) THEN 'Sales Representative'::varchar(20) WHEN (roster.rep_type = 'AD'::varchar(2)) THEN 'Regional Sales Manager'::varchar(22) WHEN (roster.rep_type = 'RM'::varchar(2)) THEN 'Regional Sales Manager'::varchar(22) ELSE NULL END AS rep_desc,
        roster.rep_type,
        roster.territory_number
 FROM datamart.roster
 WHERE ((roster.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'TE'::varchar(2)])) AND (roster.last_name <> 'Vacant'::varchar(6)) AND (roster.rep_type IS NOT NULL));

CREATE  VIEW outbound.zs_austedo_activity_call_detail AS
 SELECT c.sales_force_id,
        c.call_id,
        c.veeva_account_id,
        c.ims_id,
        c.customer_type,
        c.call_type,
        c.rep_id,
        c.territory_number,
        c.zip_on_call,
        c.call_date,
        c.submit_date,
        c.attendees,
        c.attendee_type,
        c.tvcmid,
        cd.product,
        cd.basket_id,
        cd.basket_name,
        cd.detail_position
 FROM (datamart.sfa_call c JOIN datamart.sfa_call_detail cd ON ((c.call_id = cd.call_id)))
 WHERE ((cd.basket_name ~~ 'AUSTEDO%'::varchar(8)) AND (c.call_date >= '2018-01-01'::date) AND (c.call_date < trunc(now(), 'MONTH'::varchar(5))))
 ORDER BY c.call_date;

CREATE  VIEW outbound.zs_austedo_activity_sample_request AS
 SELECT sfa_sample.sample_id,
        sfa_sample.call_id,
        sfa_sample.veeva_account_id,
        sfa_sample.ims_id,
        sfa_sample.call_date,
        sfa_sample.sales_force_id,
        sfa_sample.territory_number,
        sfa_sample.call_type,
        sfa_sample.attendee_type,
        sfa_sample.customer_type,
        sfa_sample.sample_type,
        sfa_sample.product_name,
        sfa_sample.sample_name,
        sfa_sample.sample_ndc,
        sfa_sample.basket_id,
        sfa_sample.basket_name,
        sfa_sample.qty,
        sfa_sample.zip_on_call,
        sfa_sample.employee_number,
        sfa_sample.tvcmid
 FROM datamart.sfa_sample
 WHERE ((sfa_sample.basket_name ~~ 'AUSTEDO%'::varchar(8)) AND (sfa_sample.sample_type = 'REQUEST'::varchar(7)) AND (sfa_sample.call_date >= '2018-01-01'::date) AND (sfa_sample.call_date < trunc(now(), 'MONTH'::varchar(5))))
 ORDER BY sfa_sample.call_date;

CREATE  VIEW outbound.zs_ajovy_activity_copay AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.nabp,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.occ_payment_type,
        copay.auth_refills,
        copay.claim_type,
        copay.administration_flag,
        copay.payer_name,
        copay.trans_type,
        copay.previous_payer_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.source_name,
        copay.patient_type,
        copay.primary_bin,
        copay.primary_bin_description,
        copay.reject_code
 FROM datamart.copay
 WHERE (copay.basket_name ~~ 'AJOVY%'::varchar(6))
 ORDER BY copay.fill_date;

CREATE  VIEW outbound.zs_xpd_switch_details_antimigraine_monthly AS
 SELECT xpd_switch_details_antimigraine.ims_client_number,
        xpd_switch_details_antimigraine.ims_report_number,
        xpd_switch_details_antimigraine.channel_indicator,
        xpd_switch_details_antimigraine.ims_id,
        xpd_switch_details_antimigraine.tvcmid,
        xpd_switch_details_antimigraine.specialty,
        xpd_switch_details_antimigraine.switch_from_product_group_num,
        xpd_switch_details_antimigraine.switch_from_basket_id,
        xpd_switch_details_antimigraine.switch_from_basket_name,
        xpd_switch_details_antimigraine.switch_to_product_group_num,
        xpd_switch_details_antimigraine.switch_to_basket_id,
        xpd_switch_details_antimigraine.switch_to_basket_name,
        xpd_switch_details_antimigraine.rollup_period,
        xpd_switch_details_antimigraine.rx,
        xpd_switch_details_antimigraine.report_frequency
 FROM datamart.xpd_switch_details_antimigraine
 WHERE (xpd_switch_details_antimigraine.report_frequency = 'MONTH'::varchar(5));

CREATE  VIEW outbound.zs_xpd_switch_details_antimigraine_weekly AS
 SELECT xpd_switch_details_antimigraine.ims_client_number,
        xpd_switch_details_antimigraine.ims_report_number,
        xpd_switch_details_antimigraine.channel_indicator,
        xpd_switch_details_antimigraine.ims_id,
        xpd_switch_details_antimigraine.tvcmid,
        xpd_switch_details_antimigraine.specialty,
        xpd_switch_details_antimigraine.switch_from_product_group_num,
        xpd_switch_details_antimigraine.switch_from_basket_id,
        xpd_switch_details_antimigraine.switch_from_basket_name,
        xpd_switch_details_antimigraine.switch_to_product_group_num,
        xpd_switch_details_antimigraine.switch_to_basket_id,
        xpd_switch_details_antimigraine.switch_to_basket_name,
        xpd_switch_details_antimigraine.rollup_period,
        xpd_switch_details_antimigraine.rx,
        xpd_switch_details_antimigraine.report_frequency
 FROM datamart.xpd_switch_details_antimigraine
 WHERE (xpd_switch_details_antimigraine.report_frequency = 'WEEK'::varchar(4));

CREATE  VIEW outbound.zs_xpd_demographics_antimigraine_weekly AS
 SELECT xpd_demographics_antimigraine.ims_client_number,
        xpd_demographics_antimigraine.ims_report_number,
        xpd_demographics_antimigraine.ims_id,
        xpd_demographics_antimigraine.tvcmid,
        xpd_demographics_antimigraine.last_name,
        xpd_demographics_antimigraine.first_name,
        xpd_demographics_antimigraine.middle_name,
        xpd_demographics_antimigraine.address_1,
        xpd_demographics_antimigraine.address_2,
        xpd_demographics_antimigraine.city,
        xpd_demographics_antimigraine.state,
        xpd_demographics_antimigraine.zip,
        xpd_demographics_antimigraine.specialty,
        xpd_demographics_antimigraine.specialty_description,
        xpd_demographics_antimigraine.trx_decile_retail,
        xpd_demographics_antimigraine.nrx_decile_retail,
        xpd_demographics_antimigraine.nbrx_decile_retail,
        xpd_demographics_antimigraine.trx_decile_mail,
        xpd_demographics_antimigraine.nrx_decile_mail,
        xpd_demographics_antimigraine.nbrx_decile_mail,
        xpd_demographics_antimigraine.market_prescriber_reliability_retail,
        xpd_demographics_antimigraine.market_prescriber_reliability_mail,
        xpd_demographics_antimigraine.report_frequency
 FROM datamart.xpd_demographics_antimigraine
 WHERE (xpd_demographics_antimigraine.report_frequency = 'WEEK'::varchar(4));

CREATE  VIEW outbound.zs_xpd_core_metrics_antimigraine_weekly AS
 SELECT xpd_core_metrics_antimigraine.ims_client_number,
        xpd_core_metrics_antimigraine.ims_report_number,
        xpd_core_metrics_antimigraine.channel_indicator,
        xpd_core_metrics_antimigraine.ims_id,
        xpd_core_metrics_antimigraine.tvcmid,
        xpd_core_metrics_antimigraine.specialty,
        xpd_core_metrics_antimigraine.ims_product_group,
        xpd_core_metrics_antimigraine.basket_id,
        xpd_core_metrics_antimigraine.basket_name,
        xpd_core_metrics_antimigraine.rollup_period,
        xpd_core_metrics_antimigraine.xpo_nrx,
        xpd_core_metrics_antimigraine.xpo_trx,
        xpd_core_metrics_antimigraine.unknown_nrx,
        xpd_core_metrics_antimigraine.unknown_trx,
        xpd_core_metrics_antimigraine.new_therapy_starts,
        xpd_core_metrics_antimigraine.continued_new,
        xpd_core_metrics_antimigraine.switch_to,
        xpd_core_metrics_antimigraine.add_on,
        xpd_core_metrics_antimigraine.restart_same_new,
        xpd_core_metrics_antimigraine.restart_different,
        xpd_core_metrics_antimigraine.continued_refill,
        xpd_core_metrics_antimigraine.restart_same_refill,
        xpd_core_metrics_antimigraine.switch_from,
        xpd_core_metrics_antimigraine.restart_different_from,
        xpd_core_metrics_antimigraine.add_to,
        xpd_core_metrics_antimigraine.market_new_to_brand_rx,
        xpd_core_metrics_antimigraine.dynamic_capture_rx,
        xpd_core_metrics_antimigraine.report_frequency
 FROM datamart.xpd_core_metrics_antimigraine
 WHERE (xpd_core_metrics_antimigraine.report_frequency = 'WEEK'::varchar(4));

CREATE  VIEW outbound.ics_mop_yearly AS
 SELECT rx_vertical.ims_id,
        rx_vertical.hcp_id,
        rx_vertical.plan_code,
        rx_vertical.plan_name,
        rx_vertical.payment_method,
        rx_vertical.basket_name,
        sum(CASE WHEN (rx_vertical.month_bucket = 24) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth24,
        sum(CASE WHEN (rx_vertical.month_bucket = 23) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth23,
        sum(CASE WHEN (rx_vertical.month_bucket = 22) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth22,
        sum(CASE WHEN (rx_vertical.month_bucket = 21) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth21,
        sum(CASE WHEN (rx_vertical.month_bucket = 20) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth20,
        sum(CASE WHEN (rx_vertical.month_bucket = 19) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth19,
        sum(CASE WHEN (rx_vertical.month_bucket = 18) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth18,
        sum(CASE WHEN (rx_vertical.month_bucket = 17) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth17,
        sum(CASE WHEN (rx_vertical.month_bucket = 16) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth16,
        sum(CASE WHEN (rx_vertical.month_bucket = 15) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth15,
        sum(CASE WHEN (rx_vertical.month_bucket = 14) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth14,
        sum(CASE WHEN (rx_vertical.month_bucket = 13) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth13,
        sum(CASE WHEN (rx_vertical.month_bucket = 12) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth12,
        sum(CASE WHEN (rx_vertical.month_bucket = 11) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth11,
        sum(CASE WHEN (rx_vertical.month_bucket = 10) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth10,
        sum(CASE WHEN (rx_vertical.month_bucket = 9) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth9,
        sum(CASE WHEN (rx_vertical.month_bucket = 8) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth8,
        sum(CASE WHEN (rx_vertical.month_bucket = 7) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth7,
        sum(CASE WHEN (rx_vertical.month_bucket = 6) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth6,
        sum(CASE WHEN (rx_vertical.month_bucket = 5) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth5,
        sum(CASE WHEN (rx_vertical.month_bucket = 4) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth4,
        sum(CASE WHEN (rx_vertical.month_bucket = 3) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth3,
        sum(CASE WHEN (rx_vertical.month_bucket = 2) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth2,
        sum(CASE WHEN (rx_vertical.month_bucket = 1) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth1
 FROM ( SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(xref.veeva_account_id, rx.ims_id) END AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.payment_method,
        rx.basket_name,
        w.month_bucket,
        rx.trx_count
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT row_number() OVER (ORDER BY z.rollup_month DESC) AS month_bucket,
        z.rollup_month
 FROM ( SELECT prescriber_rx.rollup_month
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))
 GROUP BY prescriber_rx.rollup_month) z) w ON ((rx.rollup_month = w.rollup_month))) LEFT  JOIN ( SELECT a.tvcmid,
        a.veeva_account_id
 FROM ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.id_num) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE (xref.id_type = 'VEEVA_ID'::varchar(8))) a
 WHERE (a.rnk = 1)) xref ON ((xref.tvcmid = rx.tvcmid)))
 WHERE ((rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (w.month_bucket >= 1) AND (w.month_bucket <= 24))) rx_vertical
 GROUP BY rx_vertical.ims_id,
          rx_vertical.hcp_id,
          rx_vertical.plan_code,
          rx_vertical.plan_name,
          rx_vertical.payment_method,
          rx_vertical.basket_name;

CREATE  VIEW outbound.iqvia_zs_total_acute_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.rollup_month,
        prescriber_rx.sales_category,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        sum(prescriber_rx.nrx_count) AS nrx_count,
        sum(prescriber_rx.trx_count) AS trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = 'ANTI-MIGRAINE MARKET'::varchar(20)) AND (prescriber_rx.basket_name = 'TOTAL ACUTE MIGRAINE'::varchar(20)))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.rollup_month,
          prescriber_rx.sales_category,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method;

CREATE  VIEW outbound.CobbsCreek_austedo_xpo_rx_weekly AS
 SELECT DISTINCT prescriber_combined_demographics.tvcmid,
        prescriber_combined_demographics.npi,
        prescriber_combined_demographics.ims_id,
        prescriber_rx.market_name,
        prescriber_rx.basket_name,
        prescriber_rx.basket_id,
        prescriber_rx.rollup_week,
        prescriber_rx.date,
        sum(prescriber_rx.nrx_count) AS Sum_nrx_count,
        sum(prescriber_rx.trx_count) AS Sum_trx_count,
        sum(prescriber_rx.nrx_quantity) AS Sum_nrx_quantity,
        sum(prescriber_rx.trx_quantity) AS Sum_trx_quantity,
        sum(prescriber_rx.unnormalized_nrx_count) AS Sum_unnormalized_nrx_count,
        sum(prescriber_rx.unnormalized_trx_count) AS Sum_unnormalized_trx_count,
        prescriber_rx.indication,
        prescriber_rx.sales_category,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.rollup_flag,
        prescriber_combined_demographics.first_name,
        prescriber_combined_demographics.middle_name,
        prescriber_combined_demographics.last_name,
        prescriber_combined_demographics.ptr_address_1,
        prescriber_combined_demographics.ptr_address_2,
        prescriber_combined_demographics.ptr_city,
        prescriber_combined_demographics.ptr_state,
        prescriber_combined_demographics.ptr_zip,
        prescriber_combined_demographics.ptr_phone,
        prescriber_combined_demographics.email,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.secondary_specialty,
        prescriber_combined_demographics.pdrp_flag,
        prescriber_combined_demographics.pdrp_date,
        prescriber_combined_demographics.np_pa_flag,
        prescriber_combined_demographics.ama_no_contact_flag,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payer_name,
        prescriber_rx.plan_name,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.payment_method,
        prescriber_rx.data_date
 FROM (datamart.prescriber_rx prescriber_rx LEFT  JOIN datamart.prescriber_combined_demographics prescriber_combined_demographics ON ((prescriber_rx.ims_id = prescriber_combined_demographics.ims_id)))
 WHERE ((prescriber_rx.market_name = 'MOVEMENT DISORDER MARKET'::varchar(24)) AND (prescriber_rx.basket_type = 'product'::varchar(7)) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.market_name = 'MOVEMENT DISORDER MARKET'::varchar(24)) AND (prescriber_rx.basket_type = 'product'::varchar(7)) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))
 GROUP BY prescriber_combined_demographics.tvcmid,
          prescriber_combined_demographics.npi,
          prescriber_combined_demographics.ims_id,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_id,
          prescriber_rx.basket_type,
          prescriber_rx.report_frequency,
          prescriber_rx.rollup_week,
          prescriber_rx.date,
          prescriber_rx.sales_category,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.rollup_flag,
          prescriber_combined_demographics.first_name,
          prescriber_combined_demographics.middle_name,
          prescriber_combined_demographics.last_name,
          prescriber_combined_demographics.ptr_address_1,
          prescriber_combined_demographics.ptr_address_2,
          prescriber_combined_demographics.ptr_city,
          prescriber_combined_demographics.ptr_state,
          prescriber_combined_demographics.ptr_zip,
          prescriber_combined_demographics.ptr_phone,
          prescriber_combined_demographics.email,
          prescriber_combined_demographics.specialty,
          prescriber_combined_demographics.secondary_specialty,
          prescriber_combined_demographics.pdrp_flag,
          prescriber_combined_demographics.pdrp_date,
          prescriber_combined_demographics.np_pa_flag,
          prescriber_combined_demographics.ama_no_contact_flag,
          prescriber_rx.data_date,
          prescriber_rx.indication,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payer_name,
          prescriber_rx.plan_name,
          prescriber_rx.pbm_name,
          prescriber_rx.payment_method,
          prescriber_rx.pbm_parent_name
 ORDER BY prescriber_combined_demographics.ims_id,
          prescriber_combined_demographics.tvcmid,
          prescriber_combined_demographics.npi,
          prescriber_rx.market_name,
          prescriber_rx.basket_name,
          prescriber_rx.basket_id,
          prescriber_rx.rollup_week,
          prescriber_rx.date,
          sum(prescriber_rx.nrx_count),
          sum(prescriber_rx.trx_count),
          sum(prescriber_rx.nrx_quantity),
          sum(prescriber_rx.trx_quantity),
          sum(prescriber_rx.unnormalized_nrx_count),
          sum(prescriber_rx.unnormalized_trx_count),
          prescriber_rx.indication,
          prescriber_rx.sales_category,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.rollup_flag,
          prescriber_combined_demographics.first_name,
          prescriber_combined_demographics.middle_name,
          prescriber_combined_demographics.last_name,
          prescriber_combined_demographics.ptr_address_1,
          prescriber_combined_demographics.ptr_address_2,
          prescriber_combined_demographics.ptr_city,
          prescriber_combined_demographics.ptr_state,
          prescriber_combined_demographics.ptr_zip,
          prescriber_combined_demographics.ptr_phone,
          prescriber_combined_demographics.email,
          prescriber_combined_demographics.specialty,
          prescriber_combined_demographics.secondary_specialty,
          prescriber_combined_demographics.pdrp_flag,
          prescriber_combined_demographics.pdrp_date,
          prescriber_combined_demographics.np_pa_flag,
          prescriber_combined_demographics.ama_no_contact_flag,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payer_name,
          prescriber_rx.plan_name,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.payment_method,
          prescriber_rx.data_date;

CREATE  VIEW outbound.zs_austedo_activity_call_detail_weekly AS
 SELECT c.sales_force_id,
        c.call_id,
        c.veeva_account_id,
        c.ims_id,
        c.customer_type,
        c.call_type,
        c.rep_id,
        c.territory_number,
        c.zip_on_call,
        c.call_date,
        c.submit_date,
        c.attendees,
        c.attendee_type,
        c.tvcmid,
        cd.product,
        cd.basket_id,
        cd.basket_name,
        cd.detail_position
 FROM (datamart.sfa_call c JOIN datamart.sfa_call_detail cd ON ((c.call_id = cd.call_id)))
 WHERE ((cd.basket_name ~~ 'AUSTEDO%'::varchar(8)) AND (c.call_date >= trunc((now() + '-15'::interval day), 'day'::varchar(3))))
 ORDER BY c.call_date;

CREATE  VIEW outbound.zs_laba_weekly AS
 SELECT rx.ims_id,
        rx.tvcmid,
        rx.market_name,
        rx.basket_id,
        rx.basket_name,
        rx.basket_type,
        rx.rollup_week,
        rx.rollup_month,
        rx.sales_category,
        rx.payer_plan_number,
        rx.payer_name,
        rx.plan_name,
        rx.pbm_name,
        rx.pbm_parent_name,
        rx.model,
        rx.payment_method,
        rx.report_frequency,
        rx.rollup_flag,
        pcd.specialty,
        xref.specialty_group,
        sum(rx.nrx_count) AS nrx_count,
        sum(rx.trx_count) AS trx_count
 FROM ((datamart.prescriber_rx rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE ((rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (rx.market_name = 'LABA MARKET TOTAL'::varchar(17)) AND (rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))))
 GROUP BY rx.ims_id,
          rx.tvcmid,
          rx.market_name,
          rx.basket_id,
          rx.basket_name,
          rx.basket_type,
          rx.rollup_week,
          rx.rollup_month,
          rx.sales_category,
          rx.payer_plan_number,
          rx.payer_name,
          rx.plan_name,
          rx.pbm_name,
          rx.pbm_parent_name,
          rx.model,
          rx.payment_method,
          rx.report_frequency,
          rx.rollup_flag,
          pcd.specialty,
          xref.specialty_group;

CREATE  VIEW outbound.zs_saba_weekly AS
 SELECT rx.ims_id,
        rx.tvcmid,
        rx.market_name,
        rx.basket_id,
        rx.basket_name,
        rx.basket_type,
        rx.rollup_week,
        rx.rollup_month,
        rx.sales_category,
        rx.payer_plan_number,
        rx.payer_name,
        rx.plan_name,
        rx.pbm_name,
        rx.pbm_parent_name,
        rx.model,
        rx.payment_method,
        rx.report_frequency,
        rx.rollup_flag,
        pcd.specialty,
        xref.specialty_group,
        sum(rx.nrx_count) AS nrx_count,
        sum(rx.trx_count) AS trx_count
 FROM ((datamart.prescriber_rx rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE ((rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (rx.market_name = 'SABA MARKET TOTAL'::varchar(17)) AND (rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))))
 GROUP BY rx.ims_id,
          rx.tvcmid,
          rx.market_name,
          rx.basket_id,
          rx.basket_name,
          rx.basket_type,
          rx.rollup_week,
          rx.rollup_month,
          rx.sales_category,
          rx.payer_plan_number,
          rx.payer_name,
          rx.plan_name,
          rx.pbm_name,
          rx.pbm_parent_name,
          rx.model,
          rx.payment_method,
          rx.report_frequency,
          rx.rollup_flag,
          pcd.specialty,
          xref.specialty_group;

CREATE  VIEW outbound.zs_ics_market_monthly AS
 SELECT rx.ims_id,
        rx.tvcmid,
        rx.market_name,
        rx.basket_id,
        rx.basket_name,
        rx.basket_type,
        rx.rollup_week,
        rx.rollup_month,
        rx.sales_category,
        rx.nrx_count,
        rx.trx_count,
        rx.payer_plan_number,
        rx.payer_name,
        rx.plan_name,
        rx.pbm_name,
        rx.pbm_parent_name,
        rx.model,
        rx.payment_method,
        rx.report_frequency,
        rx.rollup_flag,
        pcd.specialty,
        xref.specialty_group
 FROM ((datamart.prescriber_rx rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE ((rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))) AND (rx.report_frequency = 'MONTH'::varchar(5)))
 GROUP BY rx.ims_id,
          rx.tvcmid,
          rx.market_name,
          rx.basket_id,
          rx.basket_name,
          rx.basket_type,
          rx.rollup_week,
          rx.rollup_month,
          rx.sales_category,
          rx.nrx_count,
          rx.trx_count,
          rx.payer_plan_number,
          rx.payer_name,
          rx.plan_name,
          rx.pbm_name,
          rx.pbm_parent_name,
          rx.model,
          rx.payment_method,
          rx.report_frequency,
          rx.rollup_flag,
          pcd.specialty,
          xref.specialty_group UNION  SELECT rx.ims_id,
        rx.tvcmid,
        rx.market_name,
        rx.basket_id,
        rx.basket_name,
        rx.basket_type,
        rx.rollup_week,
        rx.rollup_month,
        rx.sales_category,
        rx.nrx_count,
        rx.trx_count,
        rx.payer_plan_number,
        rx.payer_name,
        rx.plan_name,
        rx.pbm_name,
        rx.pbm_parent_name,
        rx.model,
        rx.payment_method,
        rx.report_frequency,
        rx.rollup_flag,
        pcd.specialty,
        xref.specialty_group
 FROM ((datamart.prescriber_rx rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE ((rx.market_name = 'ICS MARKET TOTAL'::varchar(16)) AND (rx.data_date >= '2020-01-30'::date) AND (rx.rollup_month >= trunc((now() + '-24'::interval month), 'month'::varchar(5))) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (rx.basket_name ~~* 'ARMO%%'::varchar(6)))
 GROUP BY rx.ims_id,
          rx.tvcmid,
          rx.market_name,
          rx.basket_id,
          rx.basket_name,
          rx.basket_type,
          rx.rollup_week,
          rx.rollup_month,
          rx.sales_category,
          rx.nrx_count,
          rx.trx_count,
          rx.payer_plan_number,
          rx.payer_name,
          rx.plan_name,
          rx.pbm_name,
          rx.pbm_parent_name,
          rx.model,
          rx.payment_method,
          rx.report_frequency,
          rx.rollup_flag,
          pcd.specialty,
          xref.specialty_group;

CREATE  VIEW outbound.zs_addon_details_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.channel_indicator,
        rx.ims_id,
        rx.tvcmid,
        pcd.specialty,
        xref.specialty_group,
        rx.addon_from_product_group_num,
        rx.addon_from_basket_id,
        rx.addon_from_basket_name,
        rx.addon_to_product_group_num,
        rx.addon_to_basket_id,
        rx.addon_to_basket_name,
        rx.rollup_period AS addon_rx,
        rx.report_frequency
 FROM ((datamart.xpd_add_on_details rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.channel_indicator,
          rx.ims_id,
          rx.tvcmid,
          pcd.specialty,
          xref.specialty_group,
          rx.addon_from_product_group_num,
          rx.addon_from_basket_id,
          rx.addon_from_basket_name,
          rx.addon_to_product_group_num,
          rx.addon_to_basket_id,
          rx.addon_to_basket_name,
          rx.rollup_period,
          rx.report_frequency;

CREATE  VIEW outbound.zs_restart_diff_details_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.channel_indicator,
        rx.ims_id,
        rx.tvcmid,
        pcd.specialty,
        xref.specialty_group,
        rx.restart_from_product_group_num,
        rx.restart_from_basket_id,
        rx.restart_from_basket_name,
        rx.restart_to_product_group_num,
        rx.restart_to_basket_id,
        rx.restart_to_basket_name,
        rx.rollup_period,
        rx.restart_diff_rx,
        rx.report_frequency
 FROM ((datamart.xpd_restart_diff_details rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TS'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.channel_indicator,
          rx.ims_id,
          rx.tvcmid,
          pcd.specialty,
          xref.specialty_group,
          rx.restart_from_product_group_num,
          rx.restart_from_basket_id,
          rx.restart_from_basket_name,
          rx.restart_to_product_group_num,
          rx.restart_to_basket_id,
          rx.restart_to_basket_name,
          rx.rollup_period,
          rx.restart_diff_rx,
          rx.report_frequency;

CREATE  VIEW outbound.zs_digihaler_activity_sample_shipment AS
 SELECT sample_shipment.veeva_id,
        sample_shipment.tvcmid,
        sample_shipment.ims_id,
        sample_shipment.first_name,
        sample_shipment.middle_name,
        sample_shipment.last_name,
        sample_shipment.designation,
        sample_shipment.state_license_number,
        sample_shipment.address_line_1,
        sample_shipment.address_line_2,
        sample_shipment.address_line_3,
        sample_shipment.city,
        sample_shipment.state,
        sample_shipment.zip,
        sample_shipment.dea_license_number,
        sample_shipment.order_id,
        sample_shipment.ndc,
        sample_shipment.basket_id,
        sample_shipment.basket_name,
        sample_shipment.order_job_code,
        sample_shipment.order_job_description,
        sample_shipment.ship_qty,
        sample_shipment.ship_date
 FROM datamart.sample_shipment
 WHERE ((sample_shipment.basket_name ~~* '%DIGIHALER%'::varchar(11)) AND (sample_shipment.ship_date >= '2020-01-01'::date))
 ORDER BY sample_shipment.ship_date;

CREATE  VIEW outbound.respiratory_fia_monthly AS
 SELECT fia.basket_id,
        fia.basket_name,
        fia.claim_id,
        fia.patient_id,
        fia.sequence_number,
        fia.product_id,
        fia.fill_date,
        fia.claim_type,
        fia.reject_code,
        fia.days_supply,
        fia.quantity,
        fia.refill_code,
        fia.payer_plan_id,
        fia.opc_ask,
        fia.sec_payer_plan_id,
        fia.buy_down,
        fia.opc_paid,
        fia.prescriber_id,
        fia.sob,
        fia.sub_product_id,
        fia.sub_opc,
        fia.initial_claim_id,
        fia.prev_product_id,
        fia.daw_code,
        fia.wrt_date,
        fia.claim_status,
        fia.copay_card_flg,
        fia.zip_code,
        fia.ecoup_flag,
        fia.ecoup_offset_amt,
        fia.standard_copay,
        fia.standard_copay_yn,
        fia.market_id,
        fia.flexible_fld_1_char,
        fia.flexible_fld_2_char,
        fia.flexible_fld_3_char,
        fia.flexible_fld_4_char,
        fia.file_id,
        fia.record_id,
        fia.cbsa_code,
        fia.cbsa_description,
        fia.state_code,
        fia.payer_name,
        fia.plan_name,
        fia.pbm_name,
        fia.pbm_id,
        fia.method_of_payment,
        fia.model_type,
        fia.product_group,
        fia.product_group_id,
        fia.product_name,
        fia.generic_name,
        fia.brand_generic_flag,
        fia.product_form,
        fia.product_strength,
        fia.package_size,
        fia.manufacturer,
        fia.cmf10,
        fia.usc_code,
        fia.fia_market_desc,
        fia.reject_reason,
        fia.reject_group,
        fia.mpd_year,
        fia.mpd_eligibility_class,
        fia.deductible_start_date,
        fia.copay_start_date,
        fia.gap_start_date,
        fia.catastrophic_start_date,
        fia.mpd_panel_patient,
        fia.PROVIDER_TYPE,
        fia.IQVIA_RXER_ID,
        fia.PRIMARY_SPECIALTY_CODE,
        fia.PRIMARY_SPECIALTY_DESC,
        fia.FIRST_NAME,
        fia.LAST_NAME,
        fia.ORG_NM,
        fia.ADDRESS,
        fia.CITY,
        fia.PVR_ZIP_CODE,
        fia.PVR_STATE_CODE,
        fia.PHONE_NUMBER
 FROM datamart.fia fia
 WHERE ((fia.fill_date >= '2020-01-01'::date) AND (fia.basket_id IN ( SELECT source_product.entity_id
 FROM product.source_product
 WHERE (source_product.source_file_code = 'A67.F12158'::varchar(10)))));

CREATE  VIEW outbound.zs_copay_weekly AS
 SELECT copay.redemption_type,
        copay.physician_tvcmid,
        copay.pharmacy_tvcmid,
        copay.basket_id,
        copay.basket_name,
        copay.asi_txn_id,
        copay.orig_asi_txn_id,
        copay.rx_num,
        copay.fill_date,
        copay.date_written,
        copay.days_supply,
        copay.ndc_code,
        copay.daw,
        copay.new_refill,
        copay.quantity,
        copay.refills,
        copay.other_coverage_code,
        copay.program_number,
        copay.copay_card_number,
        copay.sex,
        copay.age_at_redemption,
        copay.pharmacy_process_date,
        copay.nabp,
        copay.pharmacy_chain_number,
        copay.pharmacy_chain,
        copay.pharmacy_name,
        copay.pharmacy_address,
        copay.pharmacy_address2,
        copay.pharmacy_city,
        copay.pharmacy_state,
        copay.pharmacy_zip,
        copay.pharmacy_phone,
        copay.pharmacy_npi_num,
        copay.principle_physician_dea,
        copay.physician_npi,
        copay.physician_ims_id,
        copay.physician_veeva_id,
        copay.physician_name,
        copay.physician_address1,
        copay.physician_address2,
        copay.physician_city,
        copay.physician_state,
        copay.physician_zip,
        copay.rebate_amount,
        copay.member_cash_expense,
        copay.submitted_cost,
        copay.pharmacy_fee,
        copay.total_amount_due,
        copay.calc_awp,
        copay.occ_payment_type,
        copay.auth_refills,
        copay.claim_type,
        copay.administration_flag,
        copay.payer_name,
        copay.trans_type,
        copay.previous_payer_id,
        copay.benefit_amount,
        copay.patient_expense,
        copay.submission_method,
        copay.source_name,
        copay.patient_type,
        copay.primary_bin,
        copay.primary_bin_description,
        copay.reject_code
 FROM datamart.copay
 WHERE ((copay.basket_name ~~* '%AJOVY%'::varchar(7)) OR (copay.basket_name ~~* '%AUSTEDO%'::varchar(9)) OR (copay.basket_name ~~* '%DIGIHALER%'::varchar(11)))
 GROUP BY copay.redemption_type,
          copay.physician_tvcmid,
          copay.pharmacy_tvcmid,
          copay.basket_id,
          copay.basket_name,
          copay.asi_txn_id,
          copay.orig_asi_txn_id,
          copay.rx_num,
          copay.fill_date,
          copay.date_written,
          copay.days_supply,
          copay.ndc_code,
          copay.daw,
          copay.new_refill,
          copay.quantity,
          copay.refills,
          copay.other_coverage_code,
          copay.program_number,
          copay.copay_card_number,
          copay.sex,
          copay.age_at_redemption,
          copay.pharmacy_process_date,
          copay.nabp,
          copay.pharmacy_chain_number,
          copay.pharmacy_chain,
          copay.pharmacy_name,
          copay.pharmacy_address,
          copay.pharmacy_address2,
          copay.pharmacy_city,
          copay.pharmacy_state,
          copay.pharmacy_zip,
          copay.pharmacy_phone,
          copay.pharmacy_npi_num,
          copay.principle_physician_dea,
          copay.physician_npi,
          copay.physician_ims_id,
          copay.physician_veeva_id,
          copay.physician_name,
          copay.physician_address1,
          copay.physician_address2,
          copay.physician_city,
          copay.physician_state,
          copay.physician_zip,
          copay.rebate_amount,
          copay.member_cash_expense,
          copay.submitted_cost,
          copay.pharmacy_fee,
          copay.total_amount_due,
          copay.calc_awp,
          copay.occ_payment_type,
          copay.auth_refills,
          copay.claim_type,
          copay.administration_flag,
          copay.payer_name,
          copay.trans_type,
          copay.previous_payer_id,
          copay.benefit_amount,
          copay.patient_expense,
          copay.submission_method,
          copay.source_name,
          copay.patient_type,
          copay.primary_bin,
          copay.primary_bin_description,
          copay.reject_code;

CREATE  VIEW outbound.zs_specialty_group_adhoc AS
( SELECT CASE WHEN (msf.sales_force_id = 'SA'::varchar(2)) THEN 'TS'::varchar(2) WHEN (msf.sales_force_id = 'NS'::varchar(2)) THEN 'TN'::varchar(2) WHEN (msf.sales_force_id = 'SP'::varchar(2)) THEN 'TR'::varchar(2) WHEN (msf.sales_force_id = 'MA'::varchar(2)) THEN 'MA'::varchar(2) WHEN (msf.sales_force_id = 'ON'::varchar(2)) THEN 'TO'::varchar(2) WHEN (msf.sales_force_id = 'NP'::varchar(2)) THEN 'TP'::varchar(2) ELSE msf.sales_force_id END AS sales_force_id,
        msf.market_basket_id,
        msf.market_name,
        sgx.specialty_code,
        sgx.specialty_group,
        msf.specialty_group_name
 FROM reference.reporting_market_sales_force msf, reference.specialty_group_xref sgx
 WHERE (sgx.category_name = msf.specialty_group_name)
 GROUP BY CASE WHEN (msf.sales_force_id = 'SA'::varchar(2)) THEN 'TS'::varchar(2) WHEN (msf.sales_force_id = 'NS'::varchar(2)) THEN 'TN'::varchar(2) WHEN (msf.sales_force_id = 'SP'::varchar(2)) THEN 'TR'::varchar(2) WHEN (msf.sales_force_id = 'MA'::varchar(2)) THEN 'MA'::varchar(2) WHEN (msf.sales_force_id = 'ON'::varchar(2)) THEN 'TO'::varchar(2) WHEN (msf.sales_force_id = 'NP'::varchar(2)) THEN 'TP'::varchar(2) ELSE msf.sales_force_id END,
          msf.market_basket_id,
          msf.market_name,
          sgx.specialty_code,
          sgx.specialty_group,
          msf.specialty_group_name UNION  SELECT CASE WHEN (msf.sales_force_id = 'SA'::varchar(2)) THEN 'TS'::varchar(2) WHEN (msf.sales_force_id = 'NS'::varchar(2)) THEN 'TN'::varchar(2) WHEN (msf.sales_force_id = 'SP'::varchar(2)) THEN 'TR'::varchar(2) WHEN (msf.sales_force_id = 'MA'::varchar(2)) THEN 'MA'::varchar(2) WHEN (msf.sales_force_id = 'ON'::varchar(2)) THEN 'TO'::varchar(2) WHEN (msf.sales_force_id = 'NP'::varchar(2)) THEN 'TP'::varchar(2) ELSE msf.sales_force_id END AS sales_force_id,
        msf.market_basket_id,
        msf.market_name,
        sgx.specialty_code,
        sgx.specialty_group,
        msf.specialty_group_name
 FROM reference.ref_rptng_mrkt_sales_force_05132020 msf, reference.specialty_group_xref sgx
 WHERE ((sgx.category_name = msf.specialty_group_name) AND (sgx.category_name = ANY (ARRAY['QVAR'::varchar(7), 'CINQAIR'::varchar(7)])))
 GROUP BY CASE WHEN (msf.sales_force_id = 'SA'::varchar(2)) THEN 'TS'::varchar(2) WHEN (msf.sales_force_id = 'NS'::varchar(2)) THEN 'TN'::varchar(2) WHEN (msf.sales_force_id = 'SP'::varchar(2)) THEN 'TR'::varchar(2) WHEN (msf.sales_force_id = 'MA'::varchar(2)) THEN 'MA'::varchar(2) WHEN (msf.sales_force_id = 'ON'::varchar(2)) THEN 'TO'::varchar(2) WHEN (msf.sales_force_id = 'NP'::varchar(2)) THEN 'TP'::varchar(2) ELSE msf.sales_force_id END,
          msf.market_basket_id,
          msf.market_name,
          sgx.specialty_code,
          sgx.specialty_group,
          msf.specialty_group_name) UNION  SELECT CASE WHEN (msf.sales_force_id = 'SA'::varchar(2)) THEN 'TS'::varchar(2) WHEN (msf.sales_force_id = 'NS'::varchar(2)) THEN 'TN'::varchar(2) WHEN (msf.sales_force_id = 'SP'::varchar(2)) THEN 'TR'::varchar(2) WHEN (msf.sales_force_id = 'MA'::varchar(2)) THEN 'MA'::varchar(2) WHEN (msf.sales_force_id = 'ON'::varchar(2)) THEN 'TO'::varchar(2) WHEN (msf.sales_force_id = 'NP'::varchar(2)) THEN 'TP'::varchar(2) ELSE msf.sales_force_id END AS sales_force_id,
        msf.market_basket_id,
        msf.market_name,
        sgx.specialty_code,
        CASE WHEN (sgx.specialty_code = ANY (ARRAY['MFM'::varchar(3), 'WMN'::varchar(3), 'GYN'::varchar(3), 'OBG'::varchar(3), 'REN'::varchar(3), 'OBS'::varchar(3), 'WH'::varchar(2)])) THEN 'OBG'::varchar(3) ELSE sgx.specialty_group END AS specialty_group,
        'AJOVY WITH OBG'::varchar(14) AS specialty_group_name
 FROM reference.reporting_market_sales_force msf, reference.specialty_group_xref sgx
 WHERE ((sgx.category_name = msf.specialty_group_name) AND (sgx.category_name = 'AJOVY'::varchar(5)))
 GROUP BY CASE WHEN (msf.sales_force_id = 'SA'::varchar(2)) THEN 'TS'::varchar(2) WHEN (msf.sales_force_id = 'NS'::varchar(2)) THEN 'TN'::varchar(2) WHEN (msf.sales_force_id = 'SP'::varchar(2)) THEN 'TR'::varchar(2) WHEN (msf.sales_force_id = 'MA'::varchar(2)) THEN 'MA'::varchar(2) WHEN (msf.sales_force_id = 'ON'::varchar(2)) THEN 'TO'::varchar(2) WHEN (msf.sales_force_id = 'NP'::varchar(2)) THEN 'TP'::varchar(2) ELSE msf.sales_force_id END,
          msf.market_basket_id,
          msf.market_name,
          sgx.specialty_code,
          CASE WHEN (sgx.specialty_code = ANY (ARRAY['MFM'::varchar(3), 'WMN'::varchar(3), 'GYN'::varchar(3), 'OBG'::varchar(3), 'REN'::varchar(3), 'OBS'::varchar(3), 'WH'::varchar(2)])) THEN 'OBG'::varchar(3) ELSE sgx.specialty_group END,
          'AJOVY WITH OBG'::varchar(14);

CREATE  VIEW outbound.zs_zip_terr AS
 SELECT current_alignment.sales_force_id,
        current_alignment.zip_code,
        current_alignment.city,
        current_alignment.state_code,
        current_alignment.territory_number,
        current_alignment.territory_name,
        current_alignment.area_number,
        current_alignment.area_name,
        current_alignment.region_number,
        current_alignment.region_name,
        current_alignment.mirror_flag,
        CASE WHEN (current_alignment.mirror_territory_number = 'NULL'::varchar(4)) THEN NULL ELSE current_alignment.mirror_territory_number END AS mirror_territory_number
 FROM datamart.current_alignment
 WHERE (current_alignment.sales_force_id = ANY (ARRAY['MA'::varchar(2), 'TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)]));

CREATE  VIEW outbound.saba_laba_mop_digihaler_temp AS
 SELECT rx_vertical.ims_id,
        rx_vertical.hcp_id,
        rx_vertical.plan_code,
        rx_vertical.plan_name,
        rx_vertical.payment_method,
        rx_vertical.basket_name,
        sum(CASE WHEN (rx_vertical.month_bucket = 24) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth24,
        sum(CASE WHEN (rx_vertical.month_bucket = 23) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth23,
        sum(CASE WHEN (rx_vertical.month_bucket = 22) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth22,
        sum(CASE WHEN (rx_vertical.month_bucket = 21) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth21,
        sum(CASE WHEN (rx_vertical.month_bucket = 20) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth20,
        sum(CASE WHEN (rx_vertical.month_bucket = 19) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth19,
        sum(CASE WHEN (rx_vertical.month_bucket = 18) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth18,
        sum(CASE WHEN (rx_vertical.month_bucket = 17) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth17,
        sum(CASE WHEN (rx_vertical.month_bucket = 16) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth16,
        sum(CASE WHEN (rx_vertical.month_bucket = 15) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth15,
        sum(CASE WHEN (rx_vertical.month_bucket = 14) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth14,
        sum(CASE WHEN (rx_vertical.month_bucket = 13) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth13,
        sum(CASE WHEN (rx_vertical.month_bucket = 12) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth12,
        sum(CASE WHEN (rx_vertical.month_bucket = 11) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth11,
        sum(CASE WHEN (rx_vertical.month_bucket = 10) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth10,
        sum(CASE WHEN (rx_vertical.month_bucket = 9) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth9,
        sum(CASE WHEN (rx_vertical.month_bucket = 8) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth8,
        sum(CASE WHEN (rx_vertical.month_bucket = 7) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth7,
        sum(CASE WHEN (rx_vertical.month_bucket = 6) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth6,
        sum(CASE WHEN (rx_vertical.month_bucket = 5) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth5,
        sum(CASE WHEN (rx_vertical.month_bucket = 4) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth4,
        sum(CASE WHEN (rx_vertical.month_bucket = 3) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth3,
        sum(CASE WHEN (rx_vertical.month_bucket = 2) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth2,
        sum(CASE WHEN (rx_vertical.month_bucket = 1) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth1
 FROM ( SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(xref.veeva_account_id, rx.ims_id) END AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.payment_method,
        rx.basket_name,
        w.month_bucket,
        rx.trx_count
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT row_number() OVER (ORDER BY z.rollup_month DESC) AS month_bucket,
        z.rollup_month
 FROM ( SELECT prescriber_rx.rollup_month
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.market_name = 'SABA MARKET TOTAL'::varchar(17)) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.rollup_week >= prescriber_rx.rollup_month))
 GROUP BY prescriber_rx.rollup_month) z) w ON ((rx.rollup_month = w.rollup_month))) LEFT  JOIN ( SELECT a.tvcmid,
        a.veeva_account_id
 FROM ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.id_num) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE (xref.id_type = 'VEEVA_ID'::varchar(8))) a
 WHERE (a.rnk = 1)) xref ON ((xref.tvcmid = rx.tvcmid)))
 WHERE ((rx.market_name = 'SABA MARKET TOTAL'::varchar(17)) AND (rx.basket_name ~~* '%PRO%DIGIHA%'::varchar(12)) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (w.month_bucket >= 1) AND (w.month_bucket <= 24))) rx_vertical
 GROUP BY rx_vertical.ims_id,
          rx_vertical.hcp_id,
          rx_vertical.plan_code,
          rx_vertical.plan_name,
          rx_vertical.payment_method,
          rx_vertical.basket_name;

CREATE  VIEW outbound.saba_laba_mop_digihaler AS
 SELECT rx_vertical.ims_id,
        rx_vertical.hcp_id,
        rx_vertical.plan_code,
        rx_vertical.plan_name,
        rx_vertical.payment_method,
        rx_vertical.basket_name,
        sum(CASE WHEN (rx_vertical.month_bucket = 24) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth24,
        sum(CASE WHEN (rx_vertical.month_bucket = 23) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth23,
        sum(CASE WHEN (rx_vertical.month_bucket = 22) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth22,
        sum(CASE WHEN (rx_vertical.month_bucket = 21) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth21,
        sum(CASE WHEN (rx_vertical.month_bucket = 20) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth20,
        sum(CASE WHEN (rx_vertical.month_bucket = 19) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth19,
        sum(CASE WHEN (rx_vertical.month_bucket = 18) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth18,
        sum(CASE WHEN (rx_vertical.month_bucket = 17) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth17,
        sum(CASE WHEN (rx_vertical.month_bucket = 16) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth16,
        sum(CASE WHEN (rx_vertical.month_bucket = 15) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth15,
        sum(CASE WHEN (rx_vertical.month_bucket = 14) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth14,
        sum(CASE WHEN (rx_vertical.month_bucket = 13) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth13,
        sum(CASE WHEN (rx_vertical.month_bucket = 12) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth12,
        sum(CASE WHEN (rx_vertical.month_bucket = 11) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth11,
        sum(CASE WHEN (rx_vertical.month_bucket = 10) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth10,
        sum(CASE WHEN (rx_vertical.month_bucket = 9) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth9,
        sum(CASE WHEN (rx_vertical.month_bucket = 8) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth8,
        sum(CASE WHEN (rx_vertical.month_bucket = 7) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth7,
        sum(CASE WHEN (rx_vertical.month_bucket = 6) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth6,
        sum(CASE WHEN (rx_vertical.month_bucket = 5) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth5,
        sum(CASE WHEN (rx_vertical.month_bucket = 4) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth4,
        sum(CASE WHEN (rx_vertical.month_bucket = 3) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth3,
        sum(CASE WHEN (rx_vertical.month_bucket = 2) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth2,
        sum(CASE WHEN (rx_vertical.month_bucket = 1) THEN rx_vertical.trx_count ELSE 0::numeric(18,0) END) AS trx_mth1,
        sum(CASE WHEN (rx_vertical.month_bucket = 24) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth24,
        sum(CASE WHEN (rx_vertical.month_bucket = 23) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth23,
        sum(CASE WHEN (rx_vertical.month_bucket = 22) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth22,
        sum(CASE WHEN (rx_vertical.month_bucket = 21) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth21,
        sum(CASE WHEN (rx_vertical.month_bucket = 20) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth20,
        sum(CASE WHEN (rx_vertical.month_bucket = 19) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth19,
        sum(CASE WHEN (rx_vertical.month_bucket = 18) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth18,
        sum(CASE WHEN (rx_vertical.month_bucket = 17) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth17,
        sum(CASE WHEN (rx_vertical.month_bucket = 16) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth16,
        sum(CASE WHEN (rx_vertical.month_bucket = 15) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth15,
        sum(CASE WHEN (rx_vertical.month_bucket = 14) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth14,
        sum(CASE WHEN (rx_vertical.month_bucket = 13) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth13,
        sum(CASE WHEN (rx_vertical.month_bucket = 12) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth12,
        sum(CASE WHEN (rx_vertical.month_bucket = 11) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth11,
        sum(CASE WHEN (rx_vertical.month_bucket = 10) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth10,
        sum(CASE WHEN (rx_vertical.month_bucket = 9) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth9,
        sum(CASE WHEN (rx_vertical.month_bucket = 8) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth8,
        sum(CASE WHEN (rx_vertical.month_bucket = 7) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth7,
        sum(CASE WHEN (rx_vertical.month_bucket = 6) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth6,
        sum(CASE WHEN (rx_vertical.month_bucket = 5) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth5,
        sum(CASE WHEN (rx_vertical.month_bucket = 4) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth4,
        sum(CASE WHEN (rx_vertical.month_bucket = 3) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth3,
        sum(CASE WHEN (rx_vertical.month_bucket = 2) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth2,
        sum(CASE WHEN (rx_vertical.month_bucket = 1) THEN rx_vertical.trx_qty ELSE 0::numeric(18,0) END) AS trx_qty_mth1
 FROM ( SELECT CASE WHEN (length(rx.ims_id) = 8) THEN ('XX'::varchar(2) || substr(rx.ims_id, 4)) ELSE rx.ims_id END AS ims_id,
        CASE WHEN (length(rx.ims_id) = 8) THEN NULL ELSE coalesce(xref.veeva_account_id, rx.ims_id) END AS hcp_id,
        rx.payer_plan_number AS plan_code,
        rx.plan_name,
        rx.payment_method,
        rx.basket_name,
        w.month_bucket,
        rx.trx_count,
        rx.trx_quantity AS trx_qty
 FROM ((datamart.prescriber_rx rx JOIN ( SELECT row_number() OVER (ORDER BY z.rollup_month DESC) AS month_bucket,
        z.rollup_month
 FROM ( SELECT prescriber_rx.rollup_month
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.market_name = ANY (ARRAY['SABA MARKET TOTAL'::varchar(17), 'LABA MARKET TOTAL'::varchar(17), 'ICS MARKET TOTAL'::varchar(16)])) AND (prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)))
 GROUP BY prescriber_rx.rollup_month) z) w ON ((rx.rollup_month = w.rollup_month))) LEFT  JOIN ( SELECT a.tvcmid,
        a.veeva_account_id
 FROM ( SELECT xref.tvcmid,
        xref.id_num AS veeva_account_id,
        row_number() OVER (PARTITION BY xref.tvcmid ORDER BY xref.id_num) AS rnk
 FROM datamart.tvcmid_xref xref
 WHERE (xref.id_type = 'VEEVA_ID'::varchar(8))) a
 WHERE (a.rnk = 1)) xref ON ((xref.tvcmid = rx.tvcmid)))
 WHERE ((rx.market_name = ANY (ARRAY['SABA MARKET TOTAL'::varchar(17), 'LABA MARKET TOTAL'::varchar(17), 'ICS MARKET TOTAL'::varchar(16)])) AND (rx.basket_name ~~* '%%DIGIHA%'::varchar(9)) AND (rx.basket_type = 'product'::varchar(7)) AND (rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (w.month_bucket >= 1) AND (w.month_bucket <= 24))) rx_vertical
 GROUP BY rx_vertical.ims_id,
          rx_vertical.hcp_id,
          rx_vertical.plan_code,
          rx_vertical.plan_name,
          rx_vertical.payment_method,
          rx_vertical.basket_name;

CREATE  VIEW outbound.austedo_fia_monthly AS
 SELECT fia.basket_id,
        fia.basket_name,
        fia.claim_id,
        fia.patient_id,
        fia.sequence_number,
        fia.product_id,
        fia.fill_date,
        fia.claim_type,
        fia.reject_code,
        fia.days_supply,
        fia.quantity,
        fia.refill_code,
        fia.payer_plan_id,
        fia.opc_ask,
        fia.sec_payer_plan_id,
        fia.buy_down,
        fia.opc_paid,
        fia.prescriber_id,
        fia.sob,
        fia.sub_product_id,
        fia.sub_opc,
        fia.initial_claim_id,
        fia.prev_product_id,
        fia.daw_code,
        fia.wrt_date,
        fia.claim_status,
        fia.copay_card_flg,
        fia.zip_code,
        fia.ecoup_flag,
        fia.ecoup_offset_amt,
        fia.standard_copay,
        fia.standard_copay_yn,
        fia.market_id,
        fia.flexible_fld_1_char,
        fia.flexible_fld_2_char,
        fia.flexible_fld_3_char,
        fia.flexible_fld_4_char,
        fia.file_id,
        fia.record_id,
        fia.cbsa_code,
        fia.cbsa_description,
        fia.state_code,
        fia.payer_name,
        fia.plan_name,
        fia.pbm_name,
        fia.pbm_id,
        fia.method_of_payment,
        fia.model_type,
        fia.product_group,
        fia.product_group_id,
        fia.product_name,
        fia.generic_name,
        fia.brand_generic_flag,
        fia.product_form,
        fia.product_strength,
        fia.package_size,
        fia.manufacturer,
        fia.cmf10,
        fia.usc_code,
        fia.fia_market_desc,
        fia.reject_reason,
        fia.reject_group,
        fia.mpd_year,
        fia.mpd_eligibility_class,
        fia.deductible_start_date,
        fia.copay_start_date,
        fia.gap_start_date,
        fia.catastrophic_start_date,
        fia.mpd_panel_patient,
        fia.PROVIDER_TYPE,
        fia.IQVIA_RXER_ID,
        fia.PRIMARY_SPECIALTY_CODE,
        fia.PRIMARY_SPECIALTY_DESC,
        fia.FIRST_NAME,
        fia.LAST_NAME,
        fia.ORG_NM,
        fia.ADDRESS,
        fia.CITY,
        fia.PVR_ZIP_CODE,
        fia.PVR_STATE_CODE,
        fia.PHONE_NUMBER
 FROM datamart.fia fia
 WHERE ((fia.fill_date >= '2020-01-01'::date) AND (fia.basket_id IN ( SELECT source_product.entity_id
 FROM product.source_product
 WHERE (source_product.source_file_code = 'A67.F12045'::varchar(10)))));

CREATE  VIEW outbound.zs_spec_pharm_shipment_monthly AS
 SELECT specialty_pharmacy_shipment.specialty_pharmacy_data_source,
        specialty_pharmacy_shipment.ims_id,
        specialty_pharmacy_shipment.tw_ship_to_address_id,
        specialty_pharmacy_shipment.tw_bill_to_address_id,
        specialty_pharmacy_shipment.source_customer_id,
        specialty_pharmacy_shipment.customer_name,
        specialty_pharmacy_shipment.physician_first_name,
        specialty_pharmacy_shipment.physician_last_name,
        specialty_pharmacy_shipment.ship_to_address_line_1,
        specialty_pharmacy_shipment.ship_to_address_line_2,
        specialty_pharmacy_shipment.ship_to_city,
        specialty_pharmacy_shipment.ship_to_state,
        specialty_pharmacy_shipment.ship_to_zip,
        specialty_pharmacy_shipment.source_transaction_id,
        specialty_pharmacy_shipment.invoice_date,
        specialty_pharmacy_shipment.ship_date,
        specialty_pharmacy_shipment.source_product_code,
        specialty_pharmacy_shipment.basket_id,
        specialty_pharmacy_shipment.quantity,
        specialty_pharmacy_shipment.invoice_unit_price,
        specialty_pharmacy_shipment.invoice_amount,
        specialty_pharmacy_shipment.invoice_discount,
        specialty_pharmacy_shipment.order_type,
        specialty_pharmacy_shipment.customer_type,
        specialty_pharmacy_shipment.source_parent_customer_id,
        specialty_pharmacy_shipment.parent_customer_name,
        specialty_pharmacy_shipment.lob_code_desc,
        specialty_pharmacy_shipment.order_type_desc,
        specialty_pharmacy_shipment.price_matrix_def,
        specialty_pharmacy_shipment.whse_code,
        specialty_pharmacy_shipment.order_no,
        specialty_pharmacy_shipment.package_size,
        specialty_pharmacy_shipment.tvcmid,
        specialty_pharmacy_shipment.trx_cnt,
        specialty_pharmacy_shipment.net_sales_amt,
        specialty_pharmacy_shipment.adj_invoice_unit_price,
        specialty_pharmacy_shipment.adj_invoice_amount,
        specialty_pharmacy_shipment.net_cost,
        specialty_pharmacy_shipment.payer_flag,
        specialty_pharmacy_shipment.optum_briova_flag AS briova_flag,
        specialty_pharmacy_shipment.physician_middle_name,
        specialty_pharmacy_shipment.rollup_flag,
        specialty_pharmacy_shipment.basket_type,
        specialty_pharmacy_shipment.unnormalized_trx_count,
        specialty_pharmacy_shipment.basket_name,
        specialty_pharmacy_shipment.comp_month,
        specialty_pharmacy_shipment.days_supplied,
        specialty_pharmacy_shipment.SPP_Physician_ID,
        specialty_pharmacy_shipment.Primary_Payer_BIN,
        specialty_pharmacy_shipment.Primary_Payer_PCN,
        specialty_pharmacy_shipment.Primary_Group_Num,
        specialty_pharmacy_shipment.Primary_Payer_Name,
        specialty_pharmacy_shipment.Primary_Payer_Type,
        specialty_pharmacy_shipment.Primary_Copay_Amount,
        specialty_pharmacy_shipment.NPI,
        specialty_pharmacy_shipment.state_license_number
 FROM datamart.specialty_pharmacy_shipment
 WHERE ((specialty_pharmacy_shipment.ship_date >= '2018-02-01'::date) AND (specialty_pharmacy_shipment.basket_type = 'product'::varchar(7)) AND (specialty_pharmacy_shipment.specialty_pharmacy_data_source = ANY (ARRAY['OptumRx'::varchar(10), 'RelianceRx'::varchar(10)])))
 GROUP BY specialty_pharmacy_shipment.specialty_pharmacy_data_source,
          specialty_pharmacy_shipment.ims_id,
          specialty_pharmacy_shipment.tw_ship_to_address_id,
          specialty_pharmacy_shipment.tw_bill_to_address_id,
          specialty_pharmacy_shipment.source_customer_id,
          specialty_pharmacy_shipment.customer_name,
          specialty_pharmacy_shipment.physician_first_name,
          specialty_pharmacy_shipment.physician_last_name,
          specialty_pharmacy_shipment.ship_to_address_line_1,
          specialty_pharmacy_shipment.ship_to_address_line_2,
          specialty_pharmacy_shipment.ship_to_city,
          specialty_pharmacy_shipment.ship_to_state,
          specialty_pharmacy_shipment.ship_to_zip,
          specialty_pharmacy_shipment.source_transaction_id,
          specialty_pharmacy_shipment.invoice_date,
          specialty_pharmacy_shipment.ship_date,
          specialty_pharmacy_shipment.source_product_code,
          specialty_pharmacy_shipment.basket_id,
          specialty_pharmacy_shipment.quantity,
          specialty_pharmacy_shipment.invoice_unit_price,
          specialty_pharmacy_shipment.invoice_amount,
          specialty_pharmacy_shipment.invoice_discount,
          specialty_pharmacy_shipment.order_type,
          specialty_pharmacy_shipment.customer_type,
          specialty_pharmacy_shipment.source_parent_customer_id,
          specialty_pharmacy_shipment.parent_customer_name,
          specialty_pharmacy_shipment.lob_code_desc,
          specialty_pharmacy_shipment.order_type_desc,
          specialty_pharmacy_shipment.price_matrix_def,
          specialty_pharmacy_shipment.whse_code,
          specialty_pharmacy_shipment.order_no,
          specialty_pharmacy_shipment.package_size,
          specialty_pharmacy_shipment.tvcmid,
          specialty_pharmacy_shipment.trx_cnt,
          specialty_pharmacy_shipment.net_sales_amt,
          specialty_pharmacy_shipment.adj_invoice_unit_price,
          specialty_pharmacy_shipment.adj_invoice_amount,
          specialty_pharmacy_shipment.net_cost,
          specialty_pharmacy_shipment.payer_flag,
          specialty_pharmacy_shipment.optum_briova_flag,
          specialty_pharmacy_shipment.physician_middle_name,
          specialty_pharmacy_shipment.rollup_flag,
          specialty_pharmacy_shipment.basket_type,
          specialty_pharmacy_shipment.unnormalized_trx_count,
          specialty_pharmacy_shipment.basket_name,
          specialty_pharmacy_shipment.comp_month,
          specialty_pharmacy_shipment.days_supplied,
          specialty_pharmacy_shipment.SPP_Physician_ID,
          specialty_pharmacy_shipment.Primary_Payer_BIN,
          specialty_pharmacy_shipment.Primary_Payer_PCN,
          specialty_pharmacy_shipment.Primary_Group_Num,
          specialty_pharmacy_shipment.Primary_Payer_Name,
          specialty_pharmacy_shipment.Primary_Payer_Type,
          specialty_pharmacy_shipment.Primary_Copay_Amount,
          specialty_pharmacy_shipment.NPI,
          specialty_pharmacy_shipment.state_license_number;

CREATE  VIEW outbound.zs_tr_ims_zip_xref AS
 SELECT CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END AS ims_id,
        prescriber_combined_demographics.ptr_zip AS zip
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TR'::varchar(2))
 GROUP BY CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END,
          prescriber_combined_demographics.ptr_zip
 ORDER BY CASE WHEN (length(prescriber_combined_demographics.ims_id) = 8) THEN ('XX'::varchar(2) || substr(prescriber_combined_demographics.ims_id, ((length(prescriber_combined_demographics.ims_id) - 5) + 1), 5)) ELSE prescriber_combined_demographics.ims_id END,
          prescriber_combined_demographics.ptr_zip;

CREATE  VIEW outbound.zs_xpo_xpopt_AM_MD_ICS_LABA_weekly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.rollup_week >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (prescriber_rx.market_name <> ALL (ARRAY['ALLERGY MARKET TOTAL'::varchar(20), 'SABA MARKET TOTAL'::varchar(17)])))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.sales_category,
          prescriber_rx.market_name,
          prescriber_rx.basket_id,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.model,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.indication,
          prescriber_rx.data_date,
          prescriber_rx.date,
          prescriber_rx.rollup_flag,
          prescriber_rx.rollup_week,
          prescriber_rx.rollup_month,
          prescriber_rx.report_frequency,
          prescriber_rx.plan_name,
          prescriber_rx.payer_name,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count;

CREATE  VIEW outbound.zs_xpo_xpopt_SABA_weekly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'SPLITWEEK'::varchar(9)) AND (prescriber_rx.rollup_week >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (prescriber_rx.market_name = 'SABA MARKET TOTAL'::varchar(17)))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.sales_category,
          prescriber_rx.market_name,
          prescriber_rx.basket_id,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.model,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.indication,
          prescriber_rx.data_date,
          prescriber_rx.date,
          prescriber_rx.rollup_flag,
          prescriber_rx.rollup_week,
          prescriber_rx.rollup_month,
          prescriber_rx.report_frequency,
          prescriber_rx.plan_name,
          prescriber_rx.payer_name,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count;

CREATE  VIEW outbound.zs_revo_demographics_monthly AS
 SELECT d.sales_force_id,
        d.ims_id,
        d.npi,
        d.tvcmid,
        d.veeva_account_id,
        d.specialty,
        d.secondary_specialty,
        d.first_name,
        d.middle_name,
        d.last_name,
        d.ptr_address_1,
        d.ptr_address_2,
        d.ptr_address_3,
        d.ptr_city,
        d.ptr_state,
        d.ptr_zip,
        d.ptr_phone,
        d.ptr_territory_num,
        d.dea_num,
        d.pdrp_flag,
        d.pdrp_date,
        d.np_pa_flag,
        d.no_spend,
        d.ama_no_contact_flag,
        d.email,
        d.degree,
        CASE WHEN (dnp.tvcmid IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS dnp_flag,
        x.hce_status_desc AS cm_status_flag,
        xref.id_num AS ME_Num
 FROM (((datamart.prescriber_combined_demographics d LEFT  JOIN ( SELECT customer_level_flags.tvcmid
 FROM datamart.customer_level_flags
 WHERE ((customer_level_flags.flag_type = ANY (ARRAY['OIG'::varchar(6), 'FDA'::varchar(6), 'DEA'::varchar(6), 'PERPRM'::varchar(6)])) AND (customer_level_flags.flag_value = 'Y'::varchar(1)))
 GROUP BY customer_level_flags.tvcmid) dnp ON ((d.tvcmid = dnp.tvcmid))) LEFT  JOIN ( SELECT customer_hcp_demographics.tvcmid,
        customer_hcp_demographics.hce_status_desc
 FROM datamart.customer_hcp_demographics) x ON ((d.tvcmid = x.tvcmid))) LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        tvcmid_xref.id_num
 FROM datamart.tvcmid_xref
 WHERE (tvcmid_xref.id_type = 'AMA'::varchar(3))
 GROUP BY tvcmid_xref.tvcmid,
          tvcmid_xref.id_num) xref ON ((d.tvcmid = xref.tvcmid)))
 WHERE (d.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'TO'::varchar(2), 'MA'::varchar(2)]))
 GROUP BY d.sales_force_id,
          d.ims_id,
          d.npi,
          d.tvcmid,
          d.veeva_account_id,
          d.specialty,
          d.secondary_specialty,
          d.first_name,
          d.middle_name,
          d.last_name,
          d.ptr_address_1,
          d.ptr_address_2,
          d.ptr_address_3,
          d.ptr_city,
          d.ptr_state,
          d.ptr_zip,
          d.ptr_phone,
          d.ptr_territory_num,
          d.dea_num,
          d.pdrp_flag,
          d.pdrp_date,
          d.np_pa_flag,
          d.no_spend,
          d.ama_no_contact_flag,
          d.email,
          d.degree,
          CASE WHEN (dnp.tvcmid IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END,
          x.hce_status_desc,
          xref.id_num;

CREATE  VIEW outbound.zs_revo_call_key_messages AS
 SELECT call_key_messages.veeva_account_id,
        call_key_messages.tvcmid,
        call_key_messages.call_id,
        call_key_messages.call_record_type,
        call_key_messages.product,
        call_key_messages.key_message,
        call_key_messages.call_date,
        call_key_messages.duration,
        call_key_messages.display_order,
        call_key_messages.call_status,
        call_key_messages.territory,
        call_key_messages.call_type,
        call_key_messages.hcp_name
 FROM reporting.call_key_messages
 WHERE ((call_key_messages.product <> ALL (ARRAY['Blink Health – AJOVY'::varchar(24), 'Blink Health – AUSTEDO'::varchar(24), 'Unassociated'::varchar(24)])) AND (call_key_messages.call_date >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))));

CREATE  VIEW outbound.zs_call_details AS
 SELECT c.sales_force_id,
        c.call_id,
        c.veeva_account_id,
        c.ims_id,
        c.customer_type,
        c.call_type,
        c.rep_id,
        c.territory_number,
        c.zip_on_call,
        c.call_date,
        c.submit_date,
        c.attendees,
        c.attendee_type,
        c.tvcmid,
        cd.product,
        cd.basket_id,
        cd.basket_name,
        cd.detail_position,
        c.call_recordtype,
        c.how_executed,
        c.ims_outlet_id,
        c.first_name,
        c.last_name,
        c.rep_first_name,
        c.rep_last_name,
        c.area_number,
        c.region_number,
        c.call_duration,
        c.call_timezone,
        c.remote_meeting_id,
        c.call_datetime,
        cd.indication
 FROM ((datamart.sfa_call c JOIN datamart.sfa_call_detail cd ON ((c.call_id = cd.call_id))) JOIN reference.zs_revo_products zrp ON (((cd.basket_id = zrp.basket_id) AND (zrp.entity = 'call activity'::varchar(13)))))
 WHERE ((c.call_date >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'TO'::varchar(2), 'MA'::varchar(2)])));

CREATE  VIEW outbound.blink_call_details AS
 SELECT c.sales_force_id,
        c.call_id,
        c.veeva_account_id,
        c.ims_id,
        d.npi,
        c.customer_type,
        c.call_type,
        c.rep_id,
        c.territory_number,
        c.zip_on_call,
        c.call_date,
        c.submit_date,
        c.attendees,
        c.attendee_type,
        c.tvcmid,
        cd.product,
        cd.basket_id,
        cd.basket_name,
        cd.detail_position,
        c.call_recordtype,
        c.how_executed,
        c.ims_outlet_id,
        c.first_name,
        c.last_name,
        c.rep_first_name,
        c.rep_last_name,
        c.area_number,
        c.region_number,
        c.call_duration,
        c.call_timezone,
        c.remote_meeting_id
 FROM ((datamart.sfa_call c JOIN datamart.sfa_call_detail cd ON ((c.call_id = cd.call_id))) LEFT  JOIN datamart.customer_hcp_demographics d ON ((d.tvcmid = c.tvcmid)))
 WHERE ((c.call_date >= '2021-02-01'::date) AND (c.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'TO'::varchar(2), 'MA'::varchar(2)])) AND (cd.product ~~* 'Blink%'::varchar(6)));

CREATE  VIEW outbound.zs_xpo_xpopt_MD_ICS_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = ANY (ARRAY['ICS MARKET TOTAL'::varchar(24), 'MOVEMENT DISORDER MARKET'::varchar(24)])))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.sales_category,
          prescriber_rx.market_name,
          prescriber_rx.basket_id,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.model,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.indication,
          prescriber_rx.data_date,
          prescriber_rx.date,
          prescriber_rx.rollup_flag,
          prescriber_rx.rollup_week,
          prescriber_rx.rollup_month,
          prescriber_rx.report_frequency,
          prescriber_rx.plan_name,
          prescriber_rx.payer_name,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count;

CREATE  VIEW outbound.zs_sample_request AS
 SELECT sfa_sample.sample_id,
        sfa_sample.call_id,
        sfa_sample.veeva_account_id,
        sfa_sample.ims_id,
        sfa_sample.call_date,
        sfa_sample.sales_force_id,
        sfa_sample.territory_number,
        sfa_sample.call_type,
        sfa_sample.attendee_type,
        sfa_sample.customer_type,
        sfa_sample.sample_type,
        sfa_sample.product_name,
        sfa_sample.sample_name,
        sfa_sample.sample_ndc,
        sfa_sample.basket_id,
        sfa_sample.basket_name,
        sfa_sample.qty,
        sfa_sample.zip_on_call,
        sfa_sample.employee_number,
        sfa_sample.tvcmid,
        sfa_sample.how_executed
 FROM datamart.sfa_sample
 WHERE ((sfa_sample.sample_type = 'REQUEST'::varchar(7)) AND (sfa_sample.basket_name <> 'QNASL'::varchar(5)) AND (sfa_sample.call_date >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))));

CREATE  VIEW outbound.zs_dddmd_demographics_weekly AS
 SELECT dddmd_demographics.account_demo_id,
        dddmd_demographics.outlet_code,
        dddmd_demographics.ims_facility_number,
        dddmd_demographics.ims_prescriber_number,
        dddmd_demographics.category_code,
        dddmd_demographics.subcategory_code,
        dddmd_demographics.alignment_zip,
        dddmd_demographics.outlet_name,
        dddmd_demographics.outlet_address,
        dddmd_demographics.outlet_city,
        dddmd_demographics.outlet_state,
        dddmd_demographics.outlet_zip,
        dddmd_demographics.facility_name,
        dddmd_demographics.facility_address1,
        dddmd_demographics.facility_address2,
        dddmd_demographics.facility_address3,
        dddmd_demographics.facility_address4,
        dddmd_demographics.facility_city,
        dddmd_demographics.facility_state,
        dddmd_demographics.facility_zip,
        dddmd_demographics.prescriber_name,
        dddmd_demographics.prescriber_address1,
        dddmd_demographics.prescriber_address2,
        dddmd_demographics.prescriber_address3,
        dddmd_demographics.prescriber_address4,
        dddmd_demographics.prescriber_city,
        dddmd_demographics.prescriber_state,
        dddmd_demographics.prescriber_zip,
        dddmd_demographics.account_status,
        dddmd_demographics.tvcmid,
        dddmd_demographics.sales_force_id,
        dddmd_demographics.outlet_tvcmid,
        dddmd_demographics.facility_tvcmid,
        dddmd_demographics.prescriber_tvcmid,
        dddmd_demographics.tvcmid_assignment_rule
 FROM datamart.dddmd_demographics
 GROUP BY dddmd_demographics.account_demo_id,
          dddmd_demographics.outlet_code,
          dddmd_demographics.ims_facility_number,
          dddmd_demographics.ims_prescriber_number,
          dddmd_demographics.category_code,
          dddmd_demographics.subcategory_code,
          dddmd_demographics.alignment_zip,
          dddmd_demographics.outlet_name,
          dddmd_demographics.outlet_address,
          dddmd_demographics.outlet_city,
          dddmd_demographics.outlet_state,
          dddmd_demographics.outlet_zip,
          dddmd_demographics.facility_name,
          dddmd_demographics.facility_address1,
          dddmd_demographics.facility_address2,
          dddmd_demographics.facility_address3,
          dddmd_demographics.facility_address4,
          dddmd_demographics.facility_city,
          dddmd_demographics.facility_state,
          dddmd_demographics.facility_zip,
          dddmd_demographics.prescriber_name,
          dddmd_demographics.prescriber_address1,
          dddmd_demographics.prescriber_address2,
          dddmd_demographics.prescriber_address3,
          dddmd_demographics.prescriber_address4,
          dddmd_demographics.prescriber_city,
          dddmd_demographics.prescriber_state,
          dddmd_demographics.prescriber_zip,
          dddmd_demographics.account_status,
          dddmd_demographics.tvcmid,
          dddmd_demographics.sales_force_id,
          dddmd_demographics.outlet_tvcmid,
          dddmd_demographics.facility_tvcmid,
          dddmd_demographics.prescriber_tvcmid,
          dddmd_demographics.tvcmid_assignment_rule;

CREATE  VIEW outbound.zs_dddmd_demographics_detail_weekly AS
 SELECT dddmd_demographics_detail.account_demo_id,
        dddmd_demographics_detail.outlet_code,
        dddmd_demographics_detail.ims_facility_number,
        dddmd_demographics_detail.ims_prescriber_number,
        dddmd_demographics_detail.category_code,
        dddmd_demographics_detail.subcategory_code,
        dddmd_demographics_detail.alignment_zip,
        dddmd_demographics_detail.outlet_name,
        dddmd_demographics_detail.outlet_address,
        dddmd_demographics_detail.outlet_city,
        dddmd_demographics_detail.outlet_state,
        dddmd_demographics_detail.outlet_zip,
        dddmd_demographics_detail.facility_name,
        dddmd_demographics_detail.facility_address1,
        dddmd_demographics_detail.facility_address2,
        dddmd_demographics_detail.facility_address3,
        dddmd_demographics_detail.facility_address4,
        dddmd_demographics_detail.facility_city,
        dddmd_demographics_detail.facility_state,
        dddmd_demographics_detail.facility_zip,
        dddmd_demographics_detail.prescriber_name,
        dddmd_demographics_detail.prescriber_address1,
        dddmd_demographics_detail.prescriber_address2,
        dddmd_demographics_detail.prescriber_address3,
        dddmd_demographics_detail.prescriber_address4,
        dddmd_demographics_detail.prescriber_city,
        dddmd_demographics_detail.prescriber_state,
        dddmd_demographics_detail.prescriber_zip,
        dddmd_demographics_detail.account_status,
        dddmd_demographics_detail.tvcmid,
        dddmd_demographics_detail.sales_force_id,
        dddmd_demographics_detail.outlet_tvcmid,
        dddmd_demographics_detail.facility_tvcmid,
        dddmd_demographics_detail.prescriber_tvcmid,
        dddmd_demographics_detail.tvcmid_assignment_rule
 FROM datamart.dddmd_demographics_detail
 GROUP BY dddmd_demographics_detail.account_demo_id,
          dddmd_demographics_detail.outlet_code,
          dddmd_demographics_detail.ims_facility_number,
          dddmd_demographics_detail.ims_prescriber_number,
          dddmd_demographics_detail.category_code,
          dddmd_demographics_detail.subcategory_code,
          dddmd_demographics_detail.alignment_zip,
          dddmd_demographics_detail.outlet_name,
          dddmd_demographics_detail.outlet_address,
          dddmd_demographics_detail.outlet_city,
          dddmd_demographics_detail.outlet_state,
          dddmd_demographics_detail.outlet_zip,
          dddmd_demographics_detail.facility_name,
          dddmd_demographics_detail.facility_address1,
          dddmd_demographics_detail.facility_address2,
          dddmd_demographics_detail.facility_address3,
          dddmd_demographics_detail.facility_address4,
          dddmd_demographics_detail.facility_city,
          dddmd_demographics_detail.facility_state,
          dddmd_demographics_detail.facility_zip,
          dddmd_demographics_detail.prescriber_name,
          dddmd_demographics_detail.prescriber_address1,
          dddmd_demographics_detail.prescriber_address2,
          dddmd_demographics_detail.prescriber_address3,
          dddmd_demographics_detail.prescriber_address4,
          dddmd_demographics_detail.prescriber_city,
          dddmd_demographics_detail.prescriber_state,
          dddmd_demographics_detail.prescriber_zip,
          dddmd_demographics_detail.account_status,
          dddmd_demographics_detail.tvcmid,
          dddmd_demographics_detail.sales_force_id,
          dddmd_demographics_detail.outlet_tvcmid,
          dddmd_demographics_detail.facility_tvcmid,
          dddmd_demographics_detail.prescriber_tvcmid,
          dddmd_demographics_detail.tvcmid_assignment_rule;

CREATE  VIEW outbound.zs_dddmd_weekly AS
 SELECT ddd_md.onc_account_demo_id,
        ddd_md.alt_seq_num,
        ddd_md.outlet_name,
        ddd_md.outlet_code,
        ddd_md.subcategory_code,
        ddd_md.outlet_zip,
        ddd_md.report_frequency,
        ddd_md.basket_id,
        ddd_md.basket_name,
        ddd_md.data_date,
        ddd_md.date,
        ddd_md.rollup_week,
        ddd_md.rollup_month,
        ddd_md.comp_month,
        ddd_md.quantity,
        ddd_md.dollars,
        ddd_md.sales_force_id,
        ddd_md.rollup_445_month,
        ddd_md.tvcmid,
        ddd_md.ims_facility_number,
        ddd_md.ims_prescriber_number,
        ddd_md.facility_tvcmid,
        ddd_md.prescriber_tvcmid,
        ddd_md.outlet_tvcmid
 FROM datamart.ddd_md
 WHERE (ddd_md.rollup_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5)))
 GROUP BY ddd_md.onc_account_demo_id,
          ddd_md.alt_seq_num,
          ddd_md.outlet_name,
          ddd_md.outlet_code,
          ddd_md.subcategory_code,
          ddd_md.outlet_zip,
          ddd_md.report_frequency,
          ddd_md.basket_id,
          ddd_md.basket_name,
          ddd_md.data_date,
          ddd_md.date,
          ddd_md.rollup_week,
          ddd_md.rollup_month,
          ddd_md.comp_month,
          ddd_md.quantity,
          ddd_md.dollars,
          ddd_md.sales_force_id,
          ddd_md.rollup_445_month,
          ddd_md.tvcmid,
          ddd_md.ims_facility_number,
          ddd_md.ims_prescriber_number,
          ddd_md.facility_tvcmid,
          ddd_md.prescriber_tvcmid,
          ddd_md.outlet_tvcmid;

CREATE  VIEW outbound.wheels_roster AS
 SELECT replace(rep.employee_id, 'A'::varchar(1), ''::varchar) AS UniqueIdentifier,
        mgr.full_name AS ReportsToName,
        mgr.email AS ReportsToEmailAddress,
        rep.team AS EmployeeOrganization,
        rep.last_name AS LastName,
        rep.first_name AS FirstName,
        rep.middle_name AS MiddleName,
        rep.suffix AS Generation,
        rep.preferred_name AS PreferredName,
        rep.hire_date AS HireDate,
        rep.address_line1 AS Address1,
        rep.address_line2 AS Address2,
        rep.address_line3 AS Address3,
        rep.city AS City,
        rep.state AS StateProvince,
        rep.zip AS ZipPostalCode,
        rep.home_phone AS HomePhone,
        rep.business_phone AS WorkPhone,
        rep.email AS EmailWork,
        coalesce(rep.hr_status, 'Active'::varchar(6)) AS Status,
        rep.territory_number AS TerrID,
        rep.territory_name AS TerrName,
        ''::varchar AS TermDate,
        CASE WHEN (rep.sales_force_id ~~ 'CA%'::varchar(3)) THEN (rep.oracle_string || '.6040008'::varchar(8)) ELSE (rep.oracle_string || '.7040006'::varchar(8)) END AS ADPJobCode,
        rep.title AS PositionName
 FROM (datamart.roster rep LEFT  JOIN datamart.roster mgr ON ((rep.supervisor_global_employee_id = mgr.global_employee_id)))
 WHERE ((rep.employee_id IS NOT NULL) AND (rep.sales_force_id = ANY (ARRAY['TM'::varchar(2), 'MA'::varchar(2), 'TE'::varchar(2), 'TS'::varchar(2), 'TR'::varchar(2), 'TO'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2), 'CG'::varchar(2), 'CA'::varchar(2), 'CM'::varchar(2), 'CS'::varchar(2)])) AND (rep.fleet_eligible = 'Y'::varchar(1)))
 ORDER BY substr(rep.territory_number, 1, 2),
          rep.last_name,
          rep.first_name;

CREATE  VIEW outbound.zs_xpd_demographics_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.ims_id,
        rx.tvcmid,
        rx.last_name,
        rx.first_name,
        rx.middle_name,
        rx.address_1,
        rx.address_2,
        rx.city,
        rx.state,
        rx.zip,
        pcd.specialty,
        xref.specialty_group,
        rx.trx_decile_retail,
        rx.nrx_decile_retail,
        rx.nbrx_decile_retail,
        rx.trx_decile_mail,
        rx.nrx_decile_mail,
        rx.nbrx_decile_mail,
        rx.market_prescriber_reliability_retail,
        rx.market_prescriber_reliability_mail,
        rx.report_frequency
 FROM ((datamart.xpd_demographics_respiratory rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TR'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.ims_id,
          rx.tvcmid,
          rx.last_name,
          rx.first_name,
          rx.middle_name,
          rx.address_1,
          rx.address_2,
          rx.city,
          rx.state,
          rx.zip,
          pcd.specialty,
          xref.specialty_group,
          rx.trx_decile_retail,
          rx.nrx_decile_retail,
          rx.nbrx_decile_retail,
          rx.trx_decile_mail,
          rx.nrx_decile_mail,
          rx.nbrx_decile_mail,
          rx.market_prescriber_reliability_retail,
          rx.market_prescriber_reliability_mail,
          rx.report_frequency;

CREATE  VIEW outbound.zs_xpd_core_metrics_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.channel_indicator,
        rx.ims_id,
        rx.tvcmid,
        pcd.specialty,
        xref.specialty_group,
        rx.ims_product_group,
        rx.basket_id,
        rx.basket_name,
        rx.rollup_period,
        rx.xpo_nrx,
        rx.xpo_trx,
        rx.unknown_nrx,
        rx.unknown_trx,
        rx.new_therapy_starts,
        rx.continued_new,
        rx.switch_to,
        rx.add_on,
        rx.restart_same_new,
        rx.restart_different,
        rx.continued_refill,
        rx.restart_same_refill,
        rx.switch_from,
        rx.restart_different_from,
        rx.add_to,
        rx.market_new_to_brand_rx,
        rx.dynamic_capture_rx,
        rx.report_frequency
 FROM ((datamart.xpd_core_metrics_respiratory rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TR'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.channel_indicator,
          rx.ims_id,
          rx.tvcmid,
          pcd.specialty,
          xref.specialty_group,
          rx.ims_product_group,
          rx.basket_id,
          rx.basket_name,
          rx.rollup_period,
          rx.xpo_nrx,
          rx.xpo_trx,
          rx.unknown_nrx,
          rx.unknown_trx,
          rx.new_therapy_starts,
          rx.continued_new,
          rx.switch_to,
          rx.add_on,
          rx.restart_same_new,
          rx.restart_different,
          rx.continued_refill,
          rx.restart_same_refill,
          rx.switch_from,
          rx.restart_different_from,
          rx.add_to,
          rx.market_new_to_brand_rx,
          rx.dynamic_capture_rx,
          rx.report_frequency;

CREATE  VIEW outbound.zs_xpd_switch_details_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.channel_indicator,
        rx.ims_id,
        rx.tvcmid,
        pcd.specialty,
        xref.specialty_group,
        rx.switch_from_product_group_num,
        rx.switch_from_basket_id,
        rx.switch_from_basket_name,
        rx.switch_to_product_group_num,
        rx.switch_to_basket_id,
        rx.switch_to_basket_name,
        rx.rollup_period,
        rx.rx,
        rx.report_frequency
 FROM ((datamart.xpd_switch_details_respiratory rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TR'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.channel_indicator,
          rx.ims_id,
          rx.tvcmid,
          pcd.specialty,
          xref.specialty_group,
          rx.switch_from_product_group_num,
          rx.switch_from_basket_id,
          rx.switch_from_basket_name,
          rx.switch_to_product_group_num,
          rx.switch_to_basket_id,
          rx.switch_to_basket_name,
          rx.rollup_period,
          rx.rx,
          rx.report_frequency;

CREATE  VIEW outbound.zs_xpd_restart_diff_details_respiratory_monthly AS
 SELECT rx.ims_client_number,
        rx.ims_report_number,
        rx.channel_indicator,
        rx.ims_id,
        rx.tvcmid,
        pcd.specialty,
        xref.specialty_group,
        rx.restart_from_product_group_num,
        rx.restart_from_basket_id,
        rx.restart_from_basket_name,
        rx.restart_to_product_group_num,
        rx.restart_to_basket_id,
        rx.restart_to_basket_name,
        rx.rollup_period,
        rx.restart_diff_rx,
        rx.report_frequency
 FROM ((datamart.xpd_restart_diff_details rx LEFT  JOIN ( SELECT prescriber_combined_demographics.ims_id,
        prescriber_combined_demographics.specialty,
        prescriber_combined_demographics.sales_force_id
 FROM datamart.prescriber_combined_demographics
 WHERE (prescriber_combined_demographics.sales_force_id = 'TR'::varchar(2))) pcd ON ((rx.ims_id = pcd.ims_id))) LEFT  JOIN ( SELECT specialty_group_xref.category_name,
        specialty_group_xref.specialty_code,
        specialty_group_xref.specialty_group
 FROM reference.specialty_group_xref
 WHERE (specialty_group_xref.category_name = 'CINQAIR'::varchar(7))) xref ON ((pcd.specialty = xref.specialty_code)))
 WHERE (rx.report_frequency = 'MONTH'::varchar(5))
 GROUP BY rx.ims_client_number,
          rx.ims_report_number,
          rx.channel_indicator,
          rx.ims_id,
          rx.tvcmid,
          pcd.specialty,
          xref.specialty_group,
          rx.restart_from_product_group_num,
          rx.restart_from_basket_id,
          rx.restart_from_basket_name,
          rx.restart_to_product_group_num,
          rx.restart_to_basket_id,
          rx.restart_to_basket_name,
          rx.rollup_period,
          rx.restart_diff_rx,
          rx.report_frequency;

CREATE  VIEW outbound.zs_cmop_monthly AS
 SELECT cmop_rx.data_month,
        cmop_rx.comp_month,
        cmop_rx.pharmacy,
        cmop_rx.visn,
        cmop_rx.station_number,
        cmop_rx.station,
        cmop_rx.va_product,
        cmop_rx.basket_id,
        cmop_rx.basket_name,
        cmop_rx.cmop_rxs_raw,
        cmop_rx.cmop_rxs_normalized,
        cmop_rx.total_quantity,
        cmop_rx.cmop_quantity,
        cmop_rx.rxs_30_days,
        cmop_rx.zip,
        cmop_rx.id,
        cmop_rx.rollup_flag,
        cmop_rx.basket_type,
        cmop_rx.total_rxs_normalized
 FROM datamart.cmop_rx
 WHERE (cmop_rx.comp_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5)))
 GROUP BY cmop_rx.data_month,
          cmop_rx.comp_month,
          cmop_rx.pharmacy,
          cmop_rx.visn,
          cmop_rx.station_number,
          cmop_rx.station,
          cmop_rx.va_product,
          cmop_rx.basket_id,
          cmop_rx.basket_name,
          cmop_rx.cmop_rxs_raw,
          cmop_rx.cmop_rxs_normalized,
          cmop_rx.total_quantity,
          cmop_rx.cmop_quantity,
          cmop_rx.rxs_30_days,
          cmop_rx.zip,
          cmop_rx.id,
          cmop_rx.rollup_flag,
          cmop_rx.basket_type,
          cmop_rx.total_rxs_normalized;

CREATE  VIEW outbound.knipper_roster AS
 SELECT roster.rep_type AS Title,
        roster.territory_number AS "Territory ID",
        roster.first_name AS "First Name",
        roster.last_name AS "Last Name",
        NULL AS "Cell Number",
        NULL AS "Home Number",
        NULL AS "Home Address",
        NULL AS "Home Address 2",
        NULL AS "Home City",
        NULL AS "Home State",
        NULL AS "Home Zip",
        roster.business_address_line1 AS "Mailing Address",
        roster.business_address_line2 AS "Mailing Address 2",
        roster.business_city AS "Mailing City",
        roster.business_state AS "Mailing State",
        roster.business_zip AS "Mailing Zip",
        roster.email AS Email,
        roster.employee_id AS "Employee#",
        roster.hire_date AS "Start Date",
        NULL AS "Personal Email",
        CASE WHEN (roster.hr_status = 'LOA'::varchar(3)) THEN 'Y'::varchar(1) WHEN (roster.hr_status = 'Active'::varchar(6)) THEN 'N'::varchar(1) ELSE roster.hr_status END AS "On LOA"
 FROM datamart.roster
 WHERE ((roster.hr_status IS NOT NULL) AND (roster.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2)])));

CREATE  VIEW outbound.knipper_zip_terr AS
 SELECT current_alignment.zip_code AS Zip,
        current_alignment.city AS City,
        current_alignment.state_code AS State,
        current_alignment.territory_number AS "Territory ID",
        current_alignment.territory_name AS "Territory Name",
        current_alignment.region_number AS "Regional ID",
        current_alignment.region_name AS "Region Name",
        current_alignment.area_number AS "Area ID",
        current_alignment.area_name AS "Area Name"
 FROM datamart.current_alignment
 WHERE (current_alignment.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2)]))
 GROUP BY current_alignment.zip_code,
          current_alignment.city,
          current_alignment.state_code,
          current_alignment.territory_number,
          current_alignment.territory_name,
          current_alignment.region_number,
          current_alignment.region_name,
          current_alignment.area_number,
          current_alignment.area_name;

CREATE  VIEW outbound.zs_tvcmid_xref_monthly AS
 SELECT xref.tvcmid,
        xref.id_num,
        xref.id_type,
        xref.state,
        xref.file_id,
        xref.record_id,
        xref.status
 FROM (datamart.tvcmid_xref xref JOIN datamart.customer_hco_demographics hco ON ((hco.tvcmid = xref.tvcmid)))
 WHERE (xref.file_id IN ( SELECT data_file_metadata.file_id
 FROM metadata.data_file_metadata
 WHERE (data_file_metadata.raw_table ~~* '%mdm_alternate_id%'::varchar(18))))
 GROUP BY xref.tvcmid,
          xref.id_num,
          xref.id_type,
          xref.state,
          xref.file_id,
          xref.record_id,
          xref.status;

CREATE  VIEW outbound.zs_revo_hco_demographics_monthly AS
 SELECT hco.tvcmid,
        hco.ims_org_id,
        hco.npi,
        hco.hin,
        hco.outlet_code,
        hco.business_name,
        hco.address_line1,
        hco.address_line2,
        hco.city,
        hco.state_code,
        hco.zip,
        hco.cot_classification,
        hco.cot_facility_type,
        hco.cot_specialty,
        mc.communication_value AS phone,
        xref.id_num AS dea,
        mdm.status_indicator_name AS hco_status,
        mdm.updated_date
 FROM (((datamart.customer_hco_demographics hco LEFT  JOIN mdm.communication mc ON (((hco.tvcmid = mc.tvcmid) AND (hco.address_id = mc.address_id) AND (mc.communication_type_name = 'PHONE'::varchar(5))))) LEFT  JOIN datamart.tvcmid_xref xref ON (((hco.tvcmid = xref.tvcmid) AND (xref.id_type = 'DEA_NUM'::varchar(7)) AND (xref.status <> 'I'::varchar(1))))) LEFT  JOIN mdm.hco mdm ON ((hco.tvcmid = mdm.tvcmid)))
 GROUP BY hco.tvcmid,
          hco.ims_org_id,
          hco.npi,
          hco.hin,
          hco.outlet_code,
          hco.business_name,
          hco.address_line1,
          hco.address_line2,
          hco.city,
          hco.state_code,
          hco.zip,
          hco.cot_classification,
          hco.cot_facility_type,
          hco.cot_specialty,
          mc.communication_value,
          xref.id_num,
          mdm.status_indicator_name,
          mdm.updated_date;

CREATE  VIEW outbound.MCM_roster AS
 SELECT r.sales_force_id,
        r.employee_id,
        r.territory_number,
        t.Name AS covered_territory,
        r.territory_name,
        coalesce(vu.id, ('vacant-'::varchar(7) || r.territory_number)) AS veeva_user_id,
        r.full_name,
        r.first_name,
        r.middle_name,
        r.last_name,
        r.email,
        r.title,
        r.rep_type,
        mgr.territory_number AS mgr_territory,
        mgr.full_name AS mgr_name,
        mgr.email AS mgr_email,
        CASE WHEN ((r.full_name ~~* '%vacant%'::varchar(8)) AND (eas.assignment_end_date__c <> '2099-12-31'::varchar(10))) THEN substr((((trunc((statement_timestamp())::timestamp, 'DD'::varchar(2)) - to_date(substr(eas.assignment_end_date__c, 1, 10), 'yyyy-mm-dd'::varchar(10)))))::varchar, ((length((((trunc((statement_timestamp())::timestamp, 'DD'::varchar(2)) - to_date(substr(eas.assignment_end_date__c, 1, 10), 'yyyy-mm-dd'::varchar(10)))))::varchar) - 5) + 1), 5) ELSE NULL END AS num_days_vacant
 FROM (((((datamart.roster r LEFT  JOIN veeva.veeva_user vu ON ((vu.employeenumber = r.employee_id))) LEFT  JOIN veeva.userterritory2association uta ON ((vu.id = uta.UserId))) LEFT  JOIN veeva.territory2 t ON ((uta.Territory2Id = t.Id))) JOIN datamart.roster mgr ON ((r.parent_territory_number = mgr.territory_number))) LEFT  JOIN cleansed.axtria_employee_assignment_status_v2 eas ON (((r.territory_number = eas.rms_territory_number__c) AND (eas.assignment_status__c = 'Active'::varchar(6)))))
 WHERE ((r.sales_force_id = ANY (ARRAY['TR'::varchar(2), 'TN'::varchar(2), 'TP'::varchar(2)])) AND (r.rep_type = 'REP'::varchar(3)) AND (eas.file_id = ( SELECT max(axtria_employee_assignment_status_v2.file_id) AS max
 FROM cleansed.axtria_employee_assignment_status_v2)))
 GROUP BY r.sales_force_id,
          r.employee_id,
          r.territory_number,
          t.Name,
          r.territory_name,
          coalesce(vu.id, ('vacant-'::varchar(7) || r.territory_number)),
          r.full_name,
          r.first_name,
          r.middle_name,
          r.last_name,
          r.email,
          r.title,
          r.rep_type,
          mgr.territory_number,
          mgr.full_name,
          mgr.email,
          CASE WHEN ((r.full_name ~~* '%vacant%'::varchar(8)) AND (eas.assignment_end_date__c <> '2099-12-31'::varchar(10))) THEN substr((((trunc((statement_timestamp())::timestamp, 'DD'::varchar(2)) - to_date(substr(eas.assignment_end_date__c, 1, 10), 'yyyy-mm-dd'::varchar(10)))))::varchar, ((length((((trunc((statement_timestamp())::timestamp, 'DD'::varchar(2)) - to_date(substr(eas.assignment_end_date__c, 1, 10), 'yyyy-mm-dd'::varchar(10)))))::varchar) - 5) + 1), 5) ELSE NULL END;

CREATE  VIEW outbound.zs_xpo_xpopt_AM_product_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.rollup_month >= trunc((now() + '-24'::interval month), 'MONTH'::varchar(5))) AND (prescriber_rx.market_name = 'ANTI-MIGRAINE MARKET'::varchar(20)) AND (prescriber_rx.basket_type = 'product'::varchar(7)));

CREATE  VIEW outbound.zs_xpo_xpopt_SABA_LABA_monthly AS
 SELECT prescriber_rx.ims_id,
        prescriber_rx.tvcmid,
        prescriber_rx.prescriber_first_name,
        prescriber_rx.prescriber_last_name,
        prescriber_rx.sales_category,
        prescriber_rx.market_name,
        prescriber_rx.basket_id,
        prescriber_rx.basket_name,
        prescriber_rx.basket_type,
        prescriber_rx.model,
        prescriber_rx.ims_rx_type,
        prescriber_rx.ims_supplemental_data,
        prescriber_rx.ims_zip_other,
        prescriber_rx.indication,
        prescriber_rx.data_date,
        prescriber_rx.date,
        prescriber_rx.rollup_flag,
        prescriber_rx.rollup_week,
        prescriber_rx.rollup_month,
        prescriber_rx.report_frequency,
        prescriber_rx.plan_name,
        prescriber_rx.payer_name,
        prescriber_rx.payer_plan_number,
        prescriber_rx.payment_method,
        prescriber_rx.pbm_name,
        prescriber_rx.pbm_parent_name,
        prescriber_rx.nrx_count,
        prescriber_rx.trx_count,
        prescriber_rx.nrx_quantity,
        prescriber_rx.trx_quantity,
        prescriber_rx.unnormalized_nrx_count,
        prescriber_rx.unnormalized_trx_count
 FROM datamart.prescriber_rx
 WHERE ((prescriber_rx.report_frequency = 'MONTH'::varchar(5)) AND (prescriber_rx.market_name = ANY (ARRAY['SABA MARKET TOTAL'::varchar(17), 'LABA MARKET TOTAL'::varchar(17)])))
 GROUP BY prescriber_rx.ims_id,
          prescriber_rx.tvcmid,
          prescriber_rx.prescriber_first_name,
          prescriber_rx.prescriber_last_name,
          prescriber_rx.sales_category,
          prescriber_rx.market_name,
          prescriber_rx.basket_id,
          prescriber_rx.basket_name,
          prescriber_rx.basket_type,
          prescriber_rx.model,
          prescriber_rx.ims_rx_type,
          prescriber_rx.ims_supplemental_data,
          prescriber_rx.ims_zip_other,
          prescriber_rx.indication,
          prescriber_rx.data_date,
          prescriber_rx.date,
          prescriber_rx.rollup_flag,
          prescriber_rx.rollup_week,
          prescriber_rx.rollup_month,
          prescriber_rx.report_frequency,
          prescriber_rx.plan_name,
          prescriber_rx.payer_name,
          prescriber_rx.payer_plan_number,
          prescriber_rx.payment_method,
          prescriber_rx.pbm_name,
          prescriber_rx.pbm_parent_name,
          prescriber_rx.nrx_count,
          prescriber_rx.trx_count,
          prescriber_rx.nrx_quantity,
          prescriber_rx.trx_quantity,
          prescriber_rx.unnormalized_nrx_count,
          prescriber_rx.unnormalized_trx_count;

CREATE  VIEW outbound.v_ob_ahm_employee_assignments AS
 SELECT r.employee_id AS EmployeeId,
        r.territory_number AS OrganizationUnitId,
        'Primary'::varchar(7) AS AssignmentPosition,
        CASE WHEN (r.sales_force_id = 'TE'::varchar(2)) THEN 'TPS'::varchar(3) ELSE r.sales_force_id END AS ProductCatalogId,
        coalesce(th.start_date, NULL::date) AS EffectiveDate,
        CASE WHEN (th.end_date = '2099-12-31'::date) THEN '2040-12-31'::date ELSE coalesce(th.end_date, NULL::date) END AS EndDate,
        CASE WHEN (th.end_date = '2099-12-31'::date) THEN 'Active'::varchar(6) ELSE 'Inactive'::varchar(8) END AS Status
 FROM (datamart.roster r LEFT  JOIN datamart.territory_history th ON (((r.employee_id = th.employee_id) AND (th.source_id IS NOT NULL))))
 WHERE ((r.employee_id IS NOT NULL) AND (r.rep_type <> 'VP'::varchar(2)) AND (r.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2)])) AND ((th.end_date = '2099-12-31'::date) OR (th.end_date IS NULL)))
 GROUP BY r.employee_id,
          r.territory_number,
          'Primary'::varchar(7),
          CASE WHEN (r.sales_force_id = 'TE'::varchar(2)) THEN 'TPS'::varchar(3) ELSE r.sales_force_id END,
          coalesce(th.start_date, NULL::date),
          CASE WHEN (th.end_date = '2099-12-31'::date) THEN '2040-12-31'::date ELSE coalesce(th.end_date, NULL::date) END,
          CASE WHEN (th.end_date = '2099-12-31'::date) THEN 'Active'::varchar(6) ELSE 'Inactive'::varchar(8) END UNION  SELECT r.employee_id AS EmployeeId,
        r.territory_number AS OrganizationUnitId,
        'Primary'::varchar(7) AS AssignmentPosition,
        CASE WHEN (r.sales_force_id = 'TE'::varchar(2)) THEN 'TPS'::varchar(3) ELSE r.sales_force_id END AS ProductCatalogId,
        coalesce(th.start_date, NULL::date) AS EffectiveDate,
        CASE WHEN (th.end_date = '2099-12-31'::date) THEN '2040-12-31'::date ELSE coalesce(th.end_date, NULL::date) END AS EndDate,
        CASE WHEN (th.end_date = '2099-12-31'::date) THEN 'Active'::varchar(6) ELSE 'Inactive'::varchar(8) END AS Status
 FROM (datamart.roster r LEFT  JOIN datamart.territory_history th ON (((r.employee_id = th.employee_id) AND (th.source_id IS NOT NULL))))
 WHERE ((r.territory_number = 'TRZZZZ00'::varchar(8)) AND ((th.end_date = '2099-12-31'::date) OR (th.end_date IS NULL)))
 GROUP BY r.employee_id,
          r.territory_number,
          'Primary'::varchar(7),
          CASE WHEN (r.sales_force_id = 'TE'::varchar(2)) THEN 'TPS'::varchar(3) ELSE r.sales_force_id END,
          coalesce(th.start_date, NULL::date),
          CASE WHEN (th.end_date = '2099-12-31'::date) THEN '2040-12-31'::date ELSE coalesce(th.end_date, NULL::date) END,
          CASE WHEN (th.end_date = '2099-12-31'::date) THEN 'Active'::varchar(6) ELSE 'Inactive'::varchar(8) END;

CREATE  VIEW outbound.vacant_terr_targets AS
 SELECT d.first_name,
        d.middle_name,
        d.last_name,
        d.tvcmid,
        d.npi,
        x.fed_id,
        d.ptr_territory_num AS territory_number,
        d.sales_force_id
 FROM (((datamart.prescriber_combined_demographics d LEFT  JOIN ( SELECT tvcmid_xref.tvcmid,
        max(tvcmid_xref.id_num) AS fed_id
 FROM datamart.tvcmid_xref
 WHERE ((tvcmid_xref.id_type = 'FED_ID'::varchar(6)) AND (tvcmid_xref.status = 'A'::varchar(1)))
 GROUP BY tvcmid_xref.tvcmid) x ON ((d.tvcmid = x.tvcmid))) JOIN datamart.call_plan cp ON (((d.tvcmid = cp.tvcmid) AND (d.ptr_territory_num = cp.territory_number) AND (cp.basket_name = ANY (ARRAY['AJOVY'::varchar(7), 'AUSTEDO'::varchar(7)]))))) JOIN ( SELECT r.territory_number,
        coalesce("datediff"('day'::varchar(3), c.last_call_date, (now())::date), 999) AS days_since_last_call
 FROM (datamart.roster r LEFT  JOIN ( SELECT sfa_call.territory_number,
        max(sfa_call.call_date) AS last_call_date
 FROM datamart.sfa_call
 WHERE (sfa_call.sales_force_id = ANY (ARRAY['TP'::varchar(2), 'TN'::varchar(2)]))
 GROUP BY sfa_call.territory_number) c ON ((r.territory_number = c.territory_number)))
 WHERE ((r.sales_force_id = ANY (ARRAY['TP'::varchar(2), 'TN'::varchar(2)])) AND (r.full_name = 'Vacant'::varchar(6)) AND (r.rep_type = 'REP'::varchar(3)))) v ON (((d.ptr_territory_num = v.territory_number) AND (v.days_since_last_call >= 30))));

CREATE  VIEW outbound.territory_bag_product AS
 SELECT i_bag_territory_product.territory_number AS territory_num,
        i_bag_territory_product.bag_name,
        i_bag_territory_product."position",
        i_bag_territory_product.basket_name AS product_name
 FROM outbound.i_bag_territory_product
 WHERE (i_bag_territory_product.bag_name !~~ '%MGR'::varchar(4))
 ORDER BY i_bag_territory_product.territory_number,
          i_bag_territory_product."position";

CREATE  VIEW outbound.fourth_down_roster AS
 SELECT CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN ('VACANT'::varchar(6) || t.geography_number) ELSE rep.employee_id END AS TevaID,
        coalesce(t.geography_number, rep.territory_number) AS Terr_id,
        coalesce(t.geography_name, rep.territory_name) AS TerritoryName,
        CASE WHEN (rep.rep_type = 'REP'::varchar(3)) THEN 'Territory'::varchar(9) WHEN (rep.rep_type = 'MSL'::varchar(3)) THEN 'Territory'::varchar(9) WHEN (rep.rep_type = 'CNE'::varchar(3)) THEN 'Territory'::varchar(9) WHEN (rep.rep_type = 'MGR'::varchar(3)) THEN 'Region'::varchar(6) WHEN (rep.rep_type = 'DIR'::varchar(3)) THEN 'Area'::varchar(4) WHEN (rep.rep_type = 'VP'::varchar(2)) THEN 'National'::varchar(8) ELSE NULL END AS TerritoryType,
        coalesce(t.sales_force_id, rep.sales_force_id) AS SalesForceID,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN 'VACANT'::varchar(6) ELSE rep.first_name END AS FirstName,
        rep.middle_name AS MiddleName,
        rep.preferred_name AS PreferredName,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN t.geography_number ELSE rep.last_name END AS LastName,
        ''::varchar AS Title,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN 'OPEN'::varchar(4) ELSE rep.hr_status END AS RepStatus,
        CASE WHEN (upper(rep.reg_contract) = 'EX'::varchar(2)) THEN 'Contract'::varchar(8) ELSE upper(coalesce(rep.rep_type, t.employee_type)) END AS RepType,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN ('VACANT'::varchar(6) || t.geography_number) ELSE rep.username END AS LogonID,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN (t.geography_number || '@tevapharm.com'::varchar(14)) ELSE rep.email END AS Email,
        mgr.employee_id AS ManagerID,
        coalesce(CASE WHEN (rep.sample_eligibility_flag = ''::varchar) THEN NULL ELSE rep.sample_eligibility_flag END, 'N'::varchar(1)) AS SampleAuthorization,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN 'OPEN TERR'::varchar(9) ELSE rep.team END AS CompanyName,
        rep.sales_force_id AS CompanyAbbr,
        ''::varchar AS CompanyID,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN 'OPEN TERR'::varchar(9) ELSE rep.business_unit_name END AS Department,
        CASE WHEN ((rep.first_name IS NULL) AND (rep.last_name = 'Vacant'::varchar(6))) THEN 'OPEN TERR'::varchar(9) ELSE rep.business_unit_name END AS Division,
        rep.business_address_line1 AS BusinessAddress1,
        rep.business_address_line2 AS BusinessAddress2,
        ''::varchar AS BusinessAddress3,
        rep.business_city AS BusinessAddressCity,
        rep.business_state AS BusinessAddressState,
        rep.business_zip AS BusinessZip,
        rep.business_country AS BusinessAddressCtry,
        'Active'::varchar(6) AS BusinessAddressStatus,
        rep.shipping_address_line1 AS ShippingAddress1,
        rep.shipping_address_line2 AS ShippingAddress2,
        ''::varchar AS ShippingAddress3,
        rep.shipping_city AS ShippingAddressCity,
        rep.shipping_state AS ShippingAddressState,
        rep.shipping_zip AS ShippingZip,
        rep.shipping_country AS "  ShippingAddressCtry",
        'Active'::varchar(6) AS ShippingAddressStatus,
        rep.samplestorage_address_line1 AS SampleStorageAddress1,
        rep.samplestorage_address_line2 AS SampleStorageAddress2,
        rep.samplestorage_address_line3 AS SampleStorageAddress3,
        rep.samplestorage_city AS SampleStorageAddressCity,
        rep.samplestorage_state AS SampleStorageAddressState,
        rep.samplestorage_zip AS SampleStorageAddressZip,
        rep.samplestorage_country AS SampleStorageAddressCtry,
        'Active'::varchar(6) AS SampleStorageAddressStatus,
        rep.samplestorage_address_line1 AS SampleShippingAddress1,
        rep.samplestorage_address_line2 AS SampleShippingAddress2,
        rep.samplestorage_address_line3 AS SampleShippingAddress3,
        rep.samplestorage_city AS SampleShippingAddressCity,
        rep.samplestorage_state AS SampleShippingAddressState,
        rep.samplestorage_zip AS SampleShippingAddressZip,
        rep.samplestorage_country AS SampleShippingAddressCtry,
        'Active'::varchar(6) AS SampleShippingAddressStatus,
        rep.business_phone AS BusinessPhone,
        rep.fax AS FaxPhone,
        rep.mobile_phone AS VoiceMailPhone,
        rep.voice_mail_extension AS VoiceMailExt,
        rep.hire_date AS HireDate,
        ''::varchar AS BirthDate,
        ''::varchar AS TerminationDate,
        coalesce(P1.basket_name, ''::varchar) AS Prod1,
        coalesce(P2.basket_name, ''::varchar) AS Prod2,
        coalesce(P3.basket_name, ''::varchar) AS Prod3,
        coalesce(P4.basket_name, ''::varchar) AS Prod4,
        coalesce(P5.basket_name, ''::varchar) AS Prod5,
        coalesce(P6.basket_name, ''::varchar) AS Prod6,
        ''::varchar AS Prod7,
        ''::varchar AS Prod8,
        ''::varchar AS Prod9,
        ''::varchar AS Prod10,
        ''::varchar AS Prod11,
        ''::varchar AS Prod12,
        ''::varchar AS Prod13,
        ''::varchar AS Prod14,
        ''::varchar AS Prod15,
        ''::varchar AS Prod16,
        ''::varchar AS Prod17,
        ''::varchar AS Prod18,
        ''::varchar AS Prod19,
        ''::varchar AS Prod20,
        ''::varchar AS Prod21,
        ''::varchar AS Prod22,
        ''::varchar AS Prod23,
        ''::varchar AS Prod24,
        ''::varchar AS Prod25,
        ''::varchar AS Prod26,
        ''::varchar AS Prod27,
        ''::varchar AS Prod28,
        ''::varchar AS Prod29,
        ''::varchar AS Prod30,
        CASE WHEN (CFT.Teva_ID IS NOT NULL) THEN 'CFT'::varchar(3) ELSE ''::varchar END AS Role1,
        CASE WHEN (CFT.Teva_ID IS NOT NULL) THEN '2'::varchar(1) ELSE ''::varchar END AS Role2,
        ''::varchar AS Role3,
        ''::varchar AS Role4,
        ''::varchar AS Role5,
        ''::varchar AS Role6,
        ''::varchar AS Role7,
        ''::varchar AS Role8,
        ''::varchar AS Role9,
        ''::varchar AS Role10,
        ''::varchar AS Role11,
        ''::varchar AS Role12,
        ''::varchar AS Role13,
        ''::varchar AS Role14,
        ''::varchar AS Role15,
        ''::varchar AS Role16,
        ''::varchar AS Role17,
        ''::varchar AS Role18,
        ''::varchar AS Role19,
        ''::varchar AS Role20,
        ''::varchar AS Attrib1,
        ''::varchar AS Attrib2,
        ''::varchar AS Attrib3,
        ''::varchar AS Attrib4,
        ''::varchar AS Attrib5,
        ''::varchar AS Attrib6,
        ''::varchar AS Attrib7,
        ''::varchar AS Attrib8,
        ''::varchar AS Attrib9,
        ''::varchar AS Attrib10
 FROM (((((((((datamart.sales_geography t FULL  JOIN datamart.roster rep ON ((t.geography_number = rep.territory_number))) LEFT  JOIN datamart.roster mgr ON ((mgr.global_employee_id = rep.supervisor_global_employee_id))) LEFT  JOIN outbound.i_bag_territory_product P1 ON (((coalesce(t.geography_number, rep.territory_number) = P1.territory_number) AND (P1.bag_name IS NOT NULL) AND (P1."position" = 1::float)))) LEFT  JOIN outbound.i_bag_territory_product P2 ON (((coalesce(t.geography_number, rep.territory_number) = P2.territory_number) AND (P2.bag_name IS NOT NULL) AND (P2."position" = 2::float)))) LEFT  JOIN outbound.i_bag_territory_product P3 ON (((coalesce(t.geography_number, rep.territory_number) = P3.territory_number) AND (P3.bag_name IS NOT NULL) AND (P3."position" = 2::float)))) LEFT  JOIN outbound.i_bag_territory_product P4 ON (((coalesce(t.geography_number, rep.territory_number) = P4.territory_number) AND (P4.bag_name IS NOT NULL) AND (P4."position" = 4::float)))) LEFT  JOIN outbound.i_bag_territory_product P5 ON (((coalesce(t.geography_number, rep.territory_number) = P5.territory_number) AND (P4.bag_name IS NOT NULL) AND (P4."position" = 5::float)))) LEFT  JOIN outbound.i_bag_territory_product P6 ON (((coalesce(t.geography_number, rep.territory_number) = P6.territory_number) AND (P6.bag_name IS NOT NULL) AND (P6."position" = 6::float)))) LEFT  JOIN reference.CERTIFIED_FIELD_TRAINER_XREF CFT ON ((rep.employee_id = CFT.Teva_ID)))
 WHERE (rep.sales_force_id = ANY (ARRAY['MA'::varchar(2), 'TE'::varchar(2), 'TM'::varchar(2), 'TN'::varchar(2), 'TO'::varchar(2), 'TP'::varchar(2), 'TR'::varchar(2), 'TS'::varchar(2), 'CG'::varchar(2), 'CM'::varchar(2), 'CS'::varchar(2), 'TX'::varchar(2), 'TZ'::varchar(2)]));

CREATE  VIEW outbound.Syneos_copay AS
 SELECT demo.ptr_territory_num,
        cw.redemption_type,
        cw.physician_tvcmid,
        cw.pharmacy_tvcmid,
        cw.basket_id,
        cw.basket_name,
        cw.asi_txn_id,
        cw.orig_asi_txn_id,
        cw.rx_num,
        cw.fill_date,
        cw.date_written,
        cw.days_supply,
        cw.ndc_code,
        cw.daw,
        cw.new_refill,
        cw.quantity,
        cw.refills,
        cw.other_coverage_code,
        cw.program_number,
        cw.copay_card_number,
        cw.sex,
        cw.age_at_redemption,
        cw.pharmacy_process_date,
        cw.nabp,
        cw.pharmacy_chain_number,
        cw.pharmacy_chain,
        cw.pharmacy_name,
        cw.pharmacy_address,
        cw.pharmacy_address2,
        cw.pharmacy_city,
        cw.pharmacy_state,
        cw.pharmacy_zip,
        cw.pharmacy_phone,
        cw.pharmacy_npi_num,
        cw.principle_physician_dea,
        cw.physician_npi,
        cw.physician_ims_id,
        cw.physician_veeva_id,
        cw.physician_name,
        cw.physician_address1,
        cw.physician_address2,
        cw.physician_city,
        cw.physician_state,
        cw.physician_zip,
        cw.rebate_amount,
        cw.member_cash_expense,
        cw.submitted_cost,
        cw.pharmacy_fee,
        cw.total_amount_due,
        cw.calc_awp,
        cw.occ_payment_type,
        cw.auth_refills,
        cw.claim_type,
        cw.administration_flag,
        cw.payer_name,
        cw.trans_type,
        cw.previous_payer_id,
        cw.benefit_amount,
        cw.patient_expense,
        cw.submission_method,
        cw.source_name,
        cw.patient_type,
        cw.primary_bin,
        cw.primary_bin_description,
        cw.reject_code
 FROM outbound.zs_copay_weekly cw, datamart.prescriber_combined_demo_frozen demo, datamart.current_alignment ca
 WHERE ((ca.zip_code = coalesce(cw.physician_zip, cw.pharmacy_zip)) AND (demo.ptr_zip = ca.zip_code) AND (demo.sales_force_id = ca.sales_force_id) AND (demo.ptr_territory_num IN ( SELECT roster.territory_number
 FROM datamart.roster
 WHERE (((roster.employee_id ~~* '%CWKU%'::varchar(6)) OR (roster.employee_id = ANY (ARRAY['A061823'::varchar(7), 'A805771'::varchar(7)])) OR (roster.employee_id = ANY (ARRAY['061823'::varchar(6), '805771'::varchar(6)]))) AND (roster.sales_force_id = 'TR'::varchar(2))))) AND (cw.basket_name ~~* '%digihaler%'::varchar(11)) AND (cw.fill_date > '2019-12-31'::date))
 GROUP BY demo.ptr_territory_num,
          cw.redemption_type,
          cw.physician_tvcmid,
          cw.pharmacy_tvcmid,
          cw.basket_id,
          cw.basket_name,
          cw.asi_txn_id,
          cw.orig_asi_txn_id,
          cw.rx_num,
          cw.fill_date,
          cw.date_written,
          cw.days_supply,
          cw.ndc_code,
          cw.daw,
          cw.new_refill,
          cw.quantity,
          cw.refills,
          cw.other_coverage_code,
          cw.program_number,
          cw.copay_card_number,
          cw.sex,
          cw.age_at_redemption,
          cw.pharmacy_process_date,
          cw.nabp,
          cw.pharmacy_chain_number,
          cw.pharmacy_chain,
          cw.pharmacy_name,
          cw.pharmacy_address,
          cw.pharmacy_address2,
          cw.pharmacy_city,
          cw.pharmacy_state,
          cw.pharmacy_zip,
          cw.pharmacy_phone,
          cw.pharmacy_npi_num,
          cw.principle_physician_dea,
          cw.physician_npi,
          cw.physician_ims_id,
          cw.physician_veeva_id,
          cw.physician_name,
          cw.physician_address1,
          cw.physician_address2,
          cw.physician_city,
          cw.physician_state,
          cw.physician_zip,
          cw.rebate_amount,
          cw.member_cash_expense,
          cw.submitted_cost,
          cw.pharmacy_fee,
          cw.total_amount_due,
          cw.calc_awp,
          cw.occ_payment_type,
          cw.auth_refills,
          cw.claim_type,
          cw.administration_flag,
          cw.payer_name,
          cw.trans_type,
          cw.previous_payer_id,
          cw.benefit_amount,
          cw.patient_expense,
          cw.submission_method,
          cw.source_name,
          cw.patient_type,
          cw.primary_bin,
          cw.primary_bin_description,
          cw.reject_code;

CREATE  VIEW outbound.i_bag_product_metrics AS
 SELECT i_bag_territory_product.territory_number,
        i_bag_territory_product.bag_name,
        i_bag_territory_product."position",
        i_bag_territory_product.basket_name,
        'Y'::varchar(1) AS detailable
 FROM outbound.i_bag_territory_product
 WHERE (i_bag_territory_product.bag_name IS NOT NULL) UNION ALL  SELECT terrs.territory_number,
        NULL AS bag_name,
        (90 + row_number() OVER (PARTITION BY terrs.territory_number ORDER BY sfpm.PRODUCT_NAME)) AS "position",
        sfpm.PRODUCT_NAME AS product_name,
        'N'::varchar(1) AS detailable
 FROM (reference.sales_force_product_metrics sfpm JOIN ( SELECT i_bag_territory_product.territory_number
 FROM outbound.i_bag_territory_product
 GROUP BY i_bag_territory_product.territory_number) terrs ON ((terrs.territory_number ~~ (sfpm.SALES_FORCE_ID || '%'::varchar(1)))));

CREATE  VIEW outbound.zs_austedo_activity_demographics AS
 SELECT d.sales_force_id,
        d.ptr_territory_num AS territory_number,
        d.tvcmid,
        d.ims_id,
        d.specialty,
        d.last_name,
        d.first_name,
        d.middle_name,
        d.ptr_address_1 AS address_1,
        d.ptr_address_2 AS address_2,
        d.ptr_address_3 AS address_3,
        d.ptr_city AS city,
        d.ptr_state AS state,
        d.ptr_zip AS zip,
        d.pdrp_flag,
        d.ptr_address_source AS address_source,
        CASE WHEN (dnp.tvcmid IS NOT NULL) THEN 'Y'::varchar(1) ELSE 'N'::varchar(1) END AS dnp_flag,
        x.hce_status_desc AS cm_status_flag
 FROM ((((((( SELECT zs_austedo_activity_call_detail.tvcmid
 FROM outbound.zs_austedo_activity_call_detail UNION  SELECT zs_austedo_activity_copay.physician_tvcmid
 FROM outbound.zs_austedo_activity_copay) UNION  SELECT zs_austedo_activity_sample_request.tvcmid
 FROM outbound.zs_austedo_activity_sample_request) UNION  SELECT zs_austedo_activity_sample_shipment.tvcmid
 FROM outbound.zs_austedo_activity_sample_shipment) UNION  SELECT zs_austedo_activity_ahm_participant.clientcustomerid
 FROM outbound.zs_austedo_activity_ahm_participant) ids JOIN datamart.prescriber_combined_demographics d ON ((d.tvcmid = ids.tvcmid))) LEFT  JOIN ( SELECT customer_level_flags.tvcmid
 FROM datamart.customer_level_flags
 WHERE ((customer_level_flags.flag_type = ANY (ARRAY['OIG'::varchar(6), 'FDA'::varchar(6), 'DEA'::varchar(6), 'PERPRM'::varchar(6)])) AND (customer_level_flags.flag_value = 'Y'::varchar(1)))
 GROUP BY customer_level_flags.tvcmid) dnp ON ((d.tvcmid = dnp.tvcmid))) LEFT  JOIN ( SELECT customer_hcp_demographics.tvcmid,
        customer_hcp_demographics.hce_status_desc
 FROM datamart.customer_hcp_demographics) x ON ((d.tvcmid = x.tvcmid)))
 WHERE (d.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TP'::varchar(2)]))
 ORDER BY d.tvcmid,
          d.ptr_territory_num;

CREATE  VIEW outbound.v_activity AS
(( SELECT activity_speaker_event.federation_id,
        activity_speaker_event.contact,
        activity_speaker_event.source,
        activity_speaker_event."datetime",
        activity_speaker_event.trackback_id,
        activity_speaker_event.previous_activity,
        activity_speaker_event.level_master_id,
        activity_speaker_event.activity_role,
        activity_speaker_event.type,
        activity_speaker_event.native_type,
        activity_speaker_event.details,
        activity_speaker_event.created,
        activity_speaker_event.modified
 FROM outbound.activity_speaker_event UNION ALL  SELECT activity_copay.federation_id,
        activity_copay.contact,
        activity_copay.source,
        activity_copay."datetime",
        activity_copay.trackback_id,
        activity_copay.previous_activity,
        activity_copay.level_master_id,
        activity_copay.activity_role,
        activity_copay.type,
        activity_copay.native_type,
        activity_copay.details,
        activity_copay.created,
        activity_copay.modified
 FROM outbound.activity_copay) UNION ALL  SELECT activity_npp_sample_orders.federation_id,
        activity_npp_sample_orders.contact,
        activity_npp_sample_orders.source,
        activity_npp_sample_orders."datetime",
        activity_npp_sample_orders.trackback_id,
        activity_npp_sample_orders.previous_activity,
        activity_npp_sample_orders.level_master_id,
        activity_npp_sample_orders.activity_role,
        activity_npp_sample_orders.type,
        activity_npp_sample_orders.native_type,
        activity_npp_sample_orders.details,
        activity_npp_sample_orders.created,
        activity_npp_sample_orders.modified
 FROM outbound.activity_npp_sample_orders) UNION ALL  SELECT activity_centris_speaker_event.federation_id,
        activity_centris_speaker_event.contact,
        activity_centris_speaker_event.source,
        activity_centris_speaker_event."datetime",
        activity_centris_speaker_event.trackback_id,
        activity_centris_speaker_event.previous_activity,
        activity_centris_speaker_event.level_master_id,
        activity_centris_speaker_event.activity_role,
        activity_centris_speaker_event.type,
        activity_centris_speaker_event.native_type,
        activity_centris_speaker_event.details,
        activity_centris_speaker_event.created,
        activity_centris_speaker_event.modified
 FROM outbound.activity_centris_speaker_event;

CREATE  VIEW outbound.zzz_product_target_segment AS
 SELECT coalesce(vv.veeva_account_id, cmid.id_num) AS hcp_id,
        NULL AS territory_code,
        b.name AS product,
        clf.flag_value AS target_segment
 FROM (((datamart.customer_level_flags clf JOIN product.basket b ON ((clf.basket_id = b.basket_id))) LEFT  JOIN datamart.tvcmid_xref cmid ON (((clf.tvcmid = cmid.tvcmid) AND (cmid.id_type = 'IMS_ID'::varchar(6))))) LEFT  JOIN ( SELECT v_account.id AS veeva_account_id,
        v_account.id_vod__c AS ims_id
 FROM veeva.v_account
 WHERE (v_account.id_vod__c IS NOT NULL)) vv ON ((cmid.id_num = vv.ims_id)))
 WHERE (((statement_timestamp())::timestamp >= clf.flag_effective_start_date) AND ((statement_timestamp())::timestamp <= clf.flag_effective_end_date) AND (clf.flag_type = 'ABC_TARGET'::varchar(10)));

CREATE  VIEW outbound.aptus_roster_ajovy AS
 SELECT r.territory_number AS unique_individual_id,
        NULL AS name_prefix,
        r.first_name,
        r.middle_name,
        r.last_name,
        NULL AS name_suffix,
        NULL AS address_line1,
        NULL AS address_line2,
        NULL AS city,
        NULL AS state,
        NULL AS zip,
        NULL AS country,
        NULL AS phone_number,
        NULL AS phone_extension,
        NULL AS fax_number,
        NULL AS voice_mail_number,
        r.email,
        r.territory_number,
        CASE WHEN (h.territory_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || h.territory_name) || '"'::varchar(1)) ELSE h.territory_name END AS territory_name,
        h.region_number,
        CASE WHEN (h.region_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || h.region_name) || '"'::varchar(1)) ELSE h.region_name END AS region_name,
        h.area_number,
        CASE WHEN (h.area_name ~~ '%,%'::varchar(3)) THEN (('"'::varchar(1) || h.area_name) || '"'::varchar(1)) ELSE h.area_name END AS area_name,
        CASE WHEN (r.rep_type = 'RM'::varchar(2)) THEN 1 ELSE 0 END AS dm_flag,
        CASE WHEN (r.rep_type = 'AD'::varchar(2)) THEN 1 ELSE 0 END AS rm_flag,
        r.rep_type
 FROM (datamart.roster r LEFT  JOIN datamart.territory_region_area_hierarchy h ON ((r.territory_number = h.territory_number)))
 WHERE ((r.sales_force_id = ANY (ARRAY['TN'::varchar(2), 'TR'::varchar(2)])) AND (r.rep_type = 'REP'::varchar(3)))
 ORDER BY r.territory_number;

CREATE  VIEW outbound.asrs_count AS
 SELECT event.event_count,
        fact.fact_count,
        attendee.attendee_count,
        product.product_count,
        amount.total_expense_amount,
        total_attendee_count.total_attendee_count
 FROM ( SELECT count(*) AS event_count
 FROM outbound.asrs_event) event, ( SELECT count(*) AS fact_count
 FROM outbound.asrs_fact) fact, ( SELECT count(*) AS attendee_count
 FROM outbound.asrs_attendee) attendee, ( SELECT count(*) AS product_count
 FROM outbound.asrs_product) product, ( SELECT sum(asrs_fact.total_expense_amount) AS total_expense_amount
 FROM outbound.asrs_fact) amount, ( SELECT sum(asrs_event.attendee_count) AS total_attendee_count
 FROM outbound.asrs_event) total_attendee_count;

CREATE  VIEW outbound.connectiverx_ajovy_roster AS
 SELECT r.rep_type,
        r.sales_force_id,
        r.territory_number,
        r.territory_name,
        h.region_number,
        h.region_name,
        h.area_number,
        h.area_name,
        r.employee_id,
        r.full_name AS rep_name,
        r.email AS rep_email,
        r2.full_name AS mgr_name,
        r2.email AS mgr_email,
        r3.full_name AS ad_name,
        r3.email AS ad_email
 FROM (((datamart.roster r LEFT  JOIN datamart.territory_region_area_hierarchy h ON ((r.territory_number = h.territory_number))) LEFT  JOIN datamart.roster r2 ON ((r2.territory_number = h.region_number))) LEFT  JOIN datamart.roster r3 ON ((r3.territory_number = h.area_number)))
 WHERE ((r.rep_type = ANY (ARRAY['REP'::varchar(3), 'CNE'::varchar(3)])) AND (r.sales_force_id = ANY (ARRAY['TE'::varchar(2), 'TN'::varchar(2), 'TR'::varchar(2)])))
 ORDER BY r.territory_number;

CREATE  VIEW outbound.asrs_fact AS
 SELECT b.trans_id,
        b.trans_date AS trans_Date,
        a.event_id,
        a.event_date,
        'Educational Items'::varchar(17) AS expense_Type_cd,
        'Educational Items'::varchar(17) AS spend_type_cd,
        'N'::varchar(1) AS identified_attendee_ind,
        NULL AS event_level1_cd,
        round((b.quantity * c.product_value), 2) AS total_expense_amount,
        'VEEVA'::varchar(5) AS source_system_description,
        to_char((statement_timestamp())::timestamp, 'yyyy-mm-dd'::varchar(10)) AS rec_create_Date,
        NULL AS rec_last_update_date,
        NULL AS record_delete_date,
        NULL AS corpt_ds
 FROM (((( SELECT sfa_call.call_id AS event_id,
        to_char(sfa_call.call_date, 'yyyy-mm-dd'::varchar(10)) AS event_date,
        sfa_call.veeva_account_id AS account_id
 FROM datamart.sfa_call
 WHERE ((sfa_call.call_date >= to_date('01/01/2018'::varchar(10), 'mm/dd/yyyy'::varchar(10))) AND (sfa_call.call_id IS NOT NULL))
 GROUP BY sfa_call.call_id,
          to_char(sfa_call.call_date, 'yyyy-mm-dd'::varchar(10)),
          sfa_call.veeva_account_id) a JOIN ( SELECT sfa_reprints.veeva_sample_id AS trans_id,
        to_char(sfa_reprints.distribution_date, 'yyyy-mm-dd'::varchar(10)) AS trans_date,
        sfa_reprints.quantity,
        sfa_reprints.call_id AS event_id,
        sfa_reprints.reprint_id AS product_id
 FROM datamart.sfa_reprints) b ON ((a.event_id = b.event_id))) JOIN ( SELECT v_product.external_id_vod__c AS product_id,
        v_product.product_value_vod__c AS product_value
 FROM veeva.v_product
 WHERE (v_product.cost_vod__c IS NOT NULL)) c ON ((b.product_id = c.product_id))) JOIN ( SELECT v_account.id AS account_id
 FROM veeva.v_account
 WHERE (v_account.recordtypeid = '012E0000000a8X9IAI'::varchar(18))) d ON ((d.account_id = a.account_id)))
 GROUP BY b.trans_id,
          b.trans_date,
          a.event_id,
          a.event_date,
          'Educational Items'::varchar(17),
          'N'::varchar(1),
          NULL,
          round((b.quantity * c.product_value), 2),
          'VEEVA'::varchar(5),
          to_char((statement_timestamp())::timestamp, 'yyyy-mm-dd'::varchar(10));

CREATE  VIEW outbound.asrs_attendee AS
 SELECT b.trans_id AS txn_id,
        a.event_id,
        NULL AS address_id,
        c.attendee_id,
        NULL AS pfsnl_desgn,
        'N'::varchar(1) AS emp_ind,
        'N'::varchar(1) AS spk_ind,
        'VEEVA'::varchar(5) AS source_system_description,
        to_char((statement_timestamp())::timestamp, 'yyyy-mm-dd'::varchar(10)) AS rec_create_Date,
        NULL AS rec_last_update_date,
        NULL AS record_delete_date,
        'TVCMID'::varchar(6) AS cust_src_system_description
 FROM (((( SELECT sfa_call.call_id AS event_id,
        sfa_call.veeva_account_id AS account_id
 FROM datamart.sfa_call
 WHERE ((sfa_call.call_date >= to_date('01/01/2018'::varchar(10), 'mm/dd/yyyy'::varchar(10))) AND (sfa_call.call_id IS NOT NULL))) a JOIN ( SELECT sfa_reprints.veeva_sample_id AS trans_id,
        sfa_reprints.call_id AS event_id,
        sfa_reprints.reprint_id AS product_id
 FROM datamart.sfa_reprints) b ON ((a.event_id = b.event_id))) JOIN ( SELECT v_account.cm_id_tva__c AS attendee_id,
        v_account.id AS account_id
 FROM veeva.v_account
 WHERE (v_account.recordtypeid = '012E0000000a8X9IAI'::varchar(18))) c ON ((a.account_id = c.account_id))) JOIN ( SELECT v_product.external_id_vod__c AS product_id
 FROM veeva.v_product
 WHERE (v_product.cost_vod__c IS NOT NULL)) d ON ((b.product_id = d.product_id)))
 GROUP BY b.trans_id,
          a.event_id,
          NULL,
          c.attendee_id,
          'N'::varchar(1),
          'VEEVA'::varchar(5),
          to_char((statement_timestamp())::timestamp, 'yyyy-mm-dd'::varchar(10)),
          'TVCMID'::varchar(6);

CREATE  VIEW outbound.hco_hcp_affiliation AS
 SELECT hco.tvcmid AS hco_tvcmid,
        hco.business_name,
        af.role_vod__c AS affiliation_role,
        af.influence_vod__c AS affiliation_influence,
        ((hcp.lastname || ', '::varchar(2)) || hcp.firstname) AS hcp_name,
        hcp.cm_id_tva__c AS hcp_tvcmid
 FROM (((datamart.customer_hco_demographics hco JOIN veeva.v_account ac ON ((hco.tvcmid = ac.cm_id_tva__c))) JOIN veeva.v_affiliation af ON ((af.to_account_vod__c = ac.id))) JOIN veeva.v_account hcp ON (((hcp.id = af.from_account_vod__c) AND (hcp.ispersonaccount = 'true'::varchar(4)))))
 WHERE ((hco.cot_classification = 'OUTPATIENT CENTER'::varchar(17)) AND (hco.cot_facility_type = 'MEDICAL GROUP'::varchar(13)) AND (hco.cot_specialty = ANY (ARRAY['NEUROLOGY'::varchar(15), 'PAIN MANAGEMENT'::varchar(15)])) AND (ac.ispersonaccount = 'false'::varchar(5)) AND (hcp.cm_id_tva__c IS NOT NULL) AND (ac.account_status_tva__c = 'ACTIVE'::varchar(6)))
 GROUP BY hco.tvcmid,
          hco.business_name,
          af.role_vod__c,
          af.influence_vod__c,
          ((hcp.lastname || ', '::varchar(2)) || hcp.firstname),
          hcp.cm_id_tva__c;

CREATE  VIEW outbound.concur_hcp_delta AS
 SELECT (trunc(hcp.tvcmid))::int AS cust_id,
        NULL AS organization_name,
        'HCP'::varchar(3) AS contact_type,
        initcap(hcp.first_name) AS first_name,
        initcap(hcp.middle_name) AS middle_name,
        initcap(hcp.last_name) AS last_name,
        hcp.suffix,
        npi.npi,
        addr.address_line_1,
        addr.address_line_2,
        addr.city,
        addr.state,
        addr.zipcode,
        sln.license_number AS sln,
        sln.state AS sln_state,
        dea.dea_number AS dea,
        NULL AS affiliation,
        CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END AS credential,
        hcp.healthcare_professional_status_code,
        date((statement_timestamp())::timestamp) AS create_date
 FROM (((((( SELECT hcp.TVCMID AS tvcmid,
        hcp.FIRST_NAME AS first_name,
        hcp.MIDDLE_NAME AS middle_name,
        hcp.LAST_NAME AS last_name,
        hcp.SUFFIX AS suffix,
        hcp.HEALTHCARE_PROFESSIONAL_STATUS_CODE AS healthcare_professional_status_code,
        hcp.TEVA_SPECIALTY_CODE AS teva_specialty_code
 FROM (raw.mdm_hcp hcp JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_hcp.file_id
 FROM raw.mdm_hcp
 GROUP BY mdm_hcp.file_id) a) hcp_file ON (((hcp.file_id = hcp_file.file_id) AND (hcp_file.file_rank = 1))))) hcp JOIN ( SELECT ad.TVCMID AS tvcmid,
        ad.ADDRESS_ID AS address_id,
        ad.ADDRESS_STATUS AS address_status,
        ad.ADDRESS_TYPE AS address_type,
        initcap(ad.ADDRESS_LINE_1) AS address_line_1,
        initcap(ad.ADDRESS_LINE_2) AS address_line_2,
        initcap(ad.CITY) AS city,
        ad.STATE AS state,
        ad.ZIP5_POSTAL_CODE AS zipcode,
        rank() OVER (PARTITION BY ad.TVCMID ORDER BY ad.PRACTICE_LOCATION_RANK DESC, ad.record_id) AS addr_rank
 FROM (raw.mdm_address ad JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_address.file_id
 FROM raw.mdm_address
 GROUP BY mdm_address.file_id) a) addr_file ON (((ad.file_id = addr_file.file_id) AND (ad.ADDRESS_STATUS = 'A'::varchar(1)) AND (ad.ADDRESS_TYPE = 2::float) AND (ad.SINGLE_ADDRESS_INDICATOR = 'Y'::varchar(1)) AND (addr_file.file_rank = 1))))) addr ON (((hcp.tvcmid = addr.tvcmid) AND (addr.addr_rank = 1)))) JOIN ( SELECT p.TVCMID AS tvcmid,
        d.profession_code_shortname,
        rank() OVER (PARTITION BY p.TVCMID ORDER BY p.CREATED_DATE DESC) AS rnk
 FROM (raw.mdm_professional p JOIN reference.Designations d ON (((p.PROFESSION_CODE = d.profession_code) AND (p.PROFESSION_RANK = 1::float) AND (p.STATUS = 'A'::varchar(1)))))) prof ON (((hcp.tvcmid = prof.tvcmid) AND (prof.rnk = 1)))) LEFT  JOIN ( SELECT mdm_dea_address.TVCMID AS tvcmid,
        mdm_dea_address.DEA_NUMBER AS dea_number,
        mdm_dea_address.ADDRESS_ID AS address_id,
        rank() OVER (PARTITION BY mdm_dea_address.TVCMID, mdm_dea_address.ADDRESS_ID ORDER BY mdm_dea_address.DEA_EXPIRATION_DATE DESC, mdm_dea_address.UPDATED_DATE DESC, mdm_dea_address.record_id) AS rnk
 FROM raw.mdm_dea_address
 WHERE (mdm_dea_address.DEA_STATUS_CODE = 'A'::varchar(1))) dea ON (((addr.address_id = dea.address_id) AND (addr.tvcmid = dea.tvcmid) AND (dea.rnk = 1)))) LEFT  JOIN ( SELECT npi.tvcmid,
        npi.npi
 FROM (( SELECT mdm_alternate_id.file_id,
        mdm_alternate_id.TVCMID AS tvcmid,
        max(mdm_alternate_id.ALTERNATE_ID_VALUE) AS npi
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id,
          mdm_alternate_id.TVCMID) npi JOIN ( SELECT b.file_id,
        rank() OVER (ORDER BY b.file_id DESC) AS file_rank
 FROM ( SELECT mdm_alternate_id.file_id
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id) b) npi2 ON (((npi.file_id = npi2.file_id) AND (npi2.file_rank = 1))))) npi ON ((hcp.tvcmid = npi.tvcmid))) LEFT  JOIN ( SELECT sln.TVCMID AS tvcmid,
        sln.AUTHORIZATION_NUMBER AS license_number,
        sln.STATE AS state,
        rank() OVER (PARTITION BY sln.TVCMID, sln.STATE ORDER BY sln.LICENSE_TYPE_PRIVILEGE_RANK, sln.LICENSE_EXPIRATION_DATE DESC, sln.LICENSE_EFFECTIVE_DATE DESC, sln.UPDATED_DATE DESC, sln.record_id) AS rnk
 FROM raw.mdm_license sln
 WHERE (sln.LICENSE_STATUS_CODE = 'A'::varchar(1))) sln ON (((hcp.tvcmid = sln.tvcmid) AND (addr.state = sln.state) AND (sln.rnk = 1))))
 GROUP BY (trunc(hcp.tvcmid))::int,
          NULL,
          'HCP'::varchar(3),
          initcap(hcp.first_name),
          initcap(hcp.middle_name),
          initcap(hcp.last_name),
          hcp.suffix,
          npi.npi,
          addr.address_line_1,
          addr.address_line_2,
          addr.city,
          addr.state,
          addr.zipcode,
          sln.license_number,
          sln.state,
          dea.dea_number,
          CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END,
          hcp.healthcare_professional_status_code,
          date((statement_timestamp())::timestamp) EXCEPT  SELECT (trunc(hcp.tvcmid))::int AS cust_id,
        NULL AS organization_name,
        'HCP'::varchar(3) AS contact_type,
        initcap(hcp.first_name) AS first_name,
        initcap(hcp.middle_name) AS middle_name,
        initcap(hcp.last_name) AS last_name,
        hcp.suffix,
        npi.npi,
        addr.address_line_1,
        addr.address_line_2,
        addr.city,
        addr.state,
        addr.zipcode,
        sln.license_number AS sln,
        sln.state AS sln_state,
        dea.dea_number AS dea,
        NULL AS affiliation,
        CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END AS credential,
        hcp.healthcare_professional_status_code,
        date((statement_timestamp())::timestamp) AS create_date
 FROM (((((( SELECT hcp.TVCMID AS tvcmid,
        hcp.FIRST_NAME AS first_name,
        hcp.MIDDLE_NAME AS middle_name,
        hcp.LAST_NAME AS last_name,
        hcp.SUFFIX AS suffix,
        hcp.HEALTHCARE_PROFESSIONAL_STATUS_CODE AS healthcare_professional_status_code,
        hcp.TEVA_SPECIALTY_CODE AS teva_specialty_code
 FROM (raw.mdm_hcp hcp JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_hcp.file_id
 FROM raw.mdm_hcp
 GROUP BY mdm_hcp.file_id) a) hcp_file ON (((hcp.file_id = hcp_file.file_id) AND (hcp_file.file_rank = 2))))) hcp JOIN ( SELECT ad.TVCMID AS tvcmid,
        ad.ADDRESS_ID AS address_id,
        ad.ADDRESS_STATUS AS address_status,
        ad.ADDRESS_TYPE AS address_type,
        initcap(ad.ADDRESS_LINE_1) AS address_line_1,
        initcap(ad.ADDRESS_LINE_2) AS address_line_2,
        initcap(ad.CITY) AS city,
        ad.STATE AS state,
        ad.ZIP5_POSTAL_CODE AS zipcode,
        rank() OVER (PARTITION BY ad.TVCMID ORDER BY ad.PRACTICE_LOCATION_RANK DESC, ad.record_id) AS addr_rank
 FROM (raw.mdm_address ad JOIN ( SELECT a.file_id,
        rank() OVER (ORDER BY a.file_id DESC) AS file_rank
 FROM ( SELECT mdm_address.file_id
 FROM raw.mdm_address
 GROUP BY mdm_address.file_id) a) addr_file ON (((ad.file_id = addr_file.file_id) AND (ad.ADDRESS_STATUS = 'A'::varchar(1)) AND (ad.ADDRESS_TYPE = 2::float) AND (ad.SINGLE_ADDRESS_INDICATOR = 'Y'::varchar(1)) AND (addr_file.file_rank = 2))))) addr ON (((hcp.tvcmid = addr.tvcmid) AND (addr.addr_rank = 1)))) JOIN ( SELECT p.TVCMID AS tvcmid,
        d.profession_code_shortname,
        rank() OVER (PARTITION BY p.TVCMID ORDER BY p.CREATED_DATE DESC) AS rnk
 FROM (raw.mdm_professional p JOIN reference.Designations d ON (((p.PROFESSION_CODE = d.profession_code) AND (p.PROFESSION_RANK = 1::float) AND (p.STATUS = 'A'::varchar(1)))))) prof ON (((hcp.tvcmid = prof.tvcmid) AND (prof.rnk = 1)))) LEFT  JOIN ( SELECT mdm_dea_address.TVCMID AS tvcmid,
        mdm_dea_address.DEA_NUMBER AS dea_number,
        mdm_dea_address.ADDRESS_ID AS address_id,
        rank() OVER (PARTITION BY mdm_dea_address.TVCMID, mdm_dea_address.ADDRESS_ID ORDER BY mdm_dea_address.DEA_EXPIRATION_DATE DESC, mdm_dea_address.UPDATED_DATE DESC, mdm_dea_address.record_id) AS rnk
 FROM raw.mdm_dea_address
 WHERE (mdm_dea_address.DEA_STATUS_CODE = 'A'::varchar(1))) dea ON (((addr.address_id = dea.address_id) AND (addr.tvcmid = dea.tvcmid) AND (dea.rnk = 1)))) LEFT  JOIN ( SELECT npi.tvcmid,
        npi.npi
 FROM (( SELECT mdm_alternate_id.file_id,
        mdm_alternate_id.TVCMID AS tvcmid,
        max(mdm_alternate_id.ALTERNATE_ID_VALUE) AS npi
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id,
          mdm_alternate_id.TVCMID) npi JOIN ( SELECT b.file_id,
        rank() OVER (ORDER BY b.file_id DESC) AS file_rank
 FROM ( SELECT mdm_alternate_id.file_id
 FROM raw.mdm_alternate_id
 WHERE ((mdm_alternate_id.ALTERNATE_ID_TYPE = 'NPI'::varchar(3)) AND (mdm_alternate_id.STATUS = 'A'::varchar(1)))
 GROUP BY mdm_alternate_id.file_id) b) npi2 ON (((npi.file_id = npi2.file_id) AND (npi2.file_rank = 2))))) npi ON ((hcp.tvcmid = npi.tvcmid))) LEFT  JOIN ( SELECT sln.TVCMID AS tvcmid,
        sln.AUTHORIZATION_NUMBER AS license_number,
        sln.STATE AS state,
        rank() OVER (PARTITION BY sln.TVCMID, sln.STATE ORDER BY sln.LICENSE_TYPE_PRIVILEGE_RANK, sln.LICENSE_EXPIRATION_DATE DESC, sln.LICENSE_EFFECTIVE_DATE DESC, sln.UPDATED_DATE DESC, sln.record_id) AS rnk
 FROM raw.mdm_license sln
 WHERE (sln.LICENSE_STATUS_CODE = 'A'::varchar(1))) sln ON (((hcp.tvcmid = sln.tvcmid) AND (addr.state = sln.state) AND (sln.rnk = 1))))
 GROUP BY (trunc(hcp.tvcmid))::int,
          NULL,
          'HCP'::varchar(3),
          initcap(hcp.first_name),
          initcap(hcp.middle_name),
          initcap(hcp.last_name),
          hcp.suffix,
          npi.npi,
          addr.address_line_1,
          addr.address_line_2,
          addr.city,
          addr.state,
          addr.zipcode,
          sln.license_number,
          sln.state,
          dea.dea_number,
          CASE WHEN ((prof.profession_code_shortname = 'RN'::varchar(2)) AND (hcp.teva_specialty_code = ANY (ARRAY['NRP'::varchar(3), 'CNA'::varchar(3), 'ARN'::varchar(3), 'CNM'::varchar(3), 'CNS'::varchar(3), 'PHA'::varchar(3)]))) THEN hcp.teva_specialty_code ELSE prof.profession_code_shortname END,
          hcp.healthcare_professional_status_code,
          date((statement_timestamp())::timestamp);

CREATE  VIEW outbound.asrs_event AS
 SELECT a.event_id,
        a.event_date,
        a.event_level_2,
        a.event_level_3,
        a.event_level_4,
        a.event_location_name,
        a.event_location_type,
        a.event_location_add_line1,
        a.event_location_add_line2,
        a.event_location_add_line3,
        a.event_location_add_line4,
        a.event_city,
        a.event_state,
        a.event_zip_code,
        a.attendee_count,
        a.employee_count,
        a.source_system_Desc,
        a.reqtr_id,
        a.reqtr_name,
        a.territory_id,
        a.territory_num,
        a.rec_create_Date,
        a.rec_last_update_date,
        a.record_delete_date
 FROM (((( SELECT a.call_id AS event_id,
        to_char(a.call_date, 'yyyy-mm-dd'::varchar(10)) AS event_date,
        NULL AS event_level_2,
        NULL AS event_level_3,
        NULL AS event_level_4,
        NULL AS event_location_name,
        'Other'::varchar(5) AS event_location_type,
        b.address_line_1_vod__c AS event_location_add_line1,
        b.address_line_2_vod__c AS event_location_add_line2,
        NULL AS event_location_add_line3,
        NULL AS event_location_add_line4,
        b.city_vod__c AS event_city,
        b.state_vod__c AS event_state,
        b.zip_vod__c AS event_zip_code,
        1 AS attendee_count,
        0 AS employee_count,
        'VEEVA'::varchar(5) AS source_system_Desc,
        a.rep_id AS reqtr_id,
        (a.rep_first_name || a.rep_last_name) AS reqtr_name,
        NULL AS territory_id,
        b.territory_vod__c AS territory_num,
        to_char((statement_timestamp())::timestamp, 'yyyy-mm-dd'::varchar(10)) AS rec_create_Date,
        NULL AS rec_last_update_date,
        NULL AS record_delete_date,
        a.veeva_account_id AS account_id
 FROM (datamart.sfa_call a LEFT  JOIN veeva.call b ON (((a.call_id = b.id) AND (b.status_vod__c = 'Submitted_vod'::varchar(13)))))
 WHERE ((a.call_date >= to_date('01/01/2018'::varchar(10), 'mm/dd/yyyy'::varchar(10))) AND (a.call_id IS NOT NULL))
 GROUP BY a.call_id,
          to_char(a.call_date, 'yyyy-mm-dd'::varchar(10)),
          NULL,
          'Other'::varchar(5),
          b.address_line_1_vod__c,
          b.address_line_2_vod__c,
          b.city_vod__c,
          b.state_vod__c,
          b.zip_vod__c,
          'VEEVA'::varchar(5),
          a.rep_id,
          (a.rep_first_name || a.rep_last_name),
          b.territory_vod__c,
          to_char((statement_timestamp())::timestamp, 'yyyy-mm-dd'::varchar(10)),
          a.veeva_account_id) a JOIN ( SELECT sfa_reprints.call_id AS event_id,
        sfa_reprints.reprint_id AS product_id
 FROM datamart.sfa_reprints) b ON ((a.event_id = b.event_id))) JOIN ( SELECT v_product.external_id_vod__c AS product_id
 FROM veeva.v_product
 WHERE (v_product.cost_vod__c IS NOT NULL)) c ON ((b.product_id = c.product_id))) JOIN ( SELECT v_account.id AS account_id
 FROM veeva.v_account
 WHERE (v_account.recordtypeid = '012E0000000a8X9IAI'::varchar(18))) d ON ((d.account_id = a.account_id)))
 GROUP BY a.event_id,
          a.event_date,
          a.event_level_2,
          a.event_level_3,
          a.event_level_4,
          a.event_location_name,
          a.event_location_type,
          a.event_location_add_line1,
          a.event_location_add_line2,
          a.event_location_add_line3,
          a.event_location_add_line4,
          a.event_city,
          a.event_state,
          a.event_zip_code,
          a.attendee_count,
          a.employee_count,
          a.source_system_Desc,
          a.reqtr_id,
          a.reqtr_name,
          a.territory_id,
          a.territory_num,
          a.rec_create_Date,
          a.rec_last_update_date,
          a.record_delete_date;

CREATE  VIEW outbound.hcp_affiliation AS
 SELECT hco.tvcmid AS hco_tvcmid,
        hco.business_name,
        sa.role AS affiliation_role,
        vf.influence_vod__c AS affiliation_influence,
        ((hcp.last_name || ', '::varchar(2)) || hcp.first_name) AS hcp_name,
        hcp.tvcmid AS hcp_tvcmid
 FROM (((datamart.customer_hco_demographics hco JOIN datamart.sfa_affiliations sa ON ((sa.affiliated_to_tvcmid = hco.tvcmid))) JOIN datamart.customer_hcp_demographics hcp ON ((hcp.tvcmid = sa.affiliated_from_tvcmid))) LEFT  JOIN veeva.v_affiliation vf ON ((vf.to_account_vod__c = sa.affiliated_to_id)))
 WHERE ((hco.cot_classification = 'OUTPATIENT CENTER'::varchar(17)) AND (hco.cot_facility_type = 'MEDICAL GROUP'::varchar(13)) AND (hco.cot_specialty = ANY (ARRAY['NEUROLOGY'::varchar(15), 'PAIN MANAGEMENT'::varchar(15)])) AND (hcp.hce_status_desc = 'ACTIVE'::varchar(6)))
 GROUP BY hco.tvcmid,
          hco.business_name,
          sa.role,
          vf.influence_vod__c,
          ((hcp.last_name || ', '::varchar(2)) || hcp.first_name),
          hcp.tvcmid;