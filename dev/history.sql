						EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON CAR;
SELECT
						CAR.SVC_LN_CTRL_NBR,
						CAR.VER_NBR,
						CAR.PRPRTRY_CD,
						ADJ_RSN_ID
					FROM
						EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON CAR

					INNER JOIN (
						SELECT
							SVC_LN_CTRL_NBR,
							MAX(VER_NBR) AS MAX_VER_NBR
						FROM
							EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON
						GROUP BY
							1) QRY ON
						CAR.SVC_LN_CTRL_NBR = QRY.SVC_LN_CTR
		
		
						;
SELECT
							SVC_LN_CTRL_NBR,
							MAX(VER_NBR) AS MAX_VER_NBR
						FROM
							EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON
						GROUP BY
							1;
SELECT
						CAR.SVC_LN_CTRL_NBR,
						CAR.VER_NBR,
						CAR.PRPRTRY_CD,
						ADJ_RSN_ID
					FROM
						EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON CAR

					INNER JOIN (
						SELECT
							SVC_LN_CTRL_NBR,
							MAX(VER_NBR) AS MAX_VER_NBR
						FROM
							EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON
						GROUP BY
							1) QRY ON
						CAR.SVC_LN_CTRL_NBR = QRY.SVC_LN_CTR;
SELECT
						CAR.SVC_LN_CTRL_NBR,
						CAR.VER_NBR,
						CAR.PRPRTRY_CD,
						MAX(ADJ_RSN_ID) AS MAX_ADJ_RSN_ID
					FROM
						EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON CAR
					INNER JOIN (
						SELECT
							SVC_LN_CTRL_NBR,
							MAX(VER_NBR) AS MAX_VER_NBR
						FROM
							EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON
						GROUP BY
							1) QRY ON
						CAR.SVC_LN_CTRL_NBR = QRY.SVC_LN_CTRL_NBR
						;
SELECT
						CAR.SVC_LN_CTRL_NBR,
						CAR.VER_NBR,
						CAR.PRPRTRY_CD,
						MAX(ADJ_RSN_ID) AS MAX_ADJ_RSN_ID
					FROM
						EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON CAR
						GROUP BY 1 
					INNER JOIN (
						SELECT
							SVC_LN_CTRL_NBR,
							MAX(VER_NBR) AS MAX_VER_NBR
						FROM
							EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON
						GROUP BY
							1) QRY ON
						CAR.SVC_LN_CTRL_NBR = QRY.SVC_LN_CTRL_NBR
						;
SELECT
						(CAR.SVC_LN_CTRL_NBR,
						CAR.VER_NBR,
						CAR.PRPRTRY_CD,
						MAX(ADJ_RSN_ID) AS MAX_ADJ_RSN_ID
					FROM
						EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON CAR
						GROUP BY 1 ) CAR
					INNER JOIN (
						SELECT
							SVC_LN_CTRL_NBR,
							MAX(VER_NBR) AS MAX_VER_NBR
						FROM
							EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON
						GROUP BY
							1) QRY ON
						CAR.SVC_LN_CTRL_NBR = QRY.SVC_LN_CTRL_NBR
						;
SELECT
						(CAR.SVC_LN_CTRL_NBR,
						CAR.VER_NBR,
						CAR.PRPRTRY_CD,
						MAX(ADJ_RSN_ID) AS MAX_ADJ_RSN_ID
					FROM
						EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON CAR
						GROUP BY 1 ) 
						CAR;
SELECT
						(CAR.SVC_LN_CTRL_NBR,
						CAR.VER_NBR,
						CAR.PRPRTRY_CD,
						MAX(ADJ_RSN_ID) --AS MAX_ADJ_RSN_ID
					FROM
						EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON CAR
						GROUP BY 1 ) 
						CAR;
SELECT
						(CAR.SVC_LN_CTRL_NBR,
						CAR.VER_NBR,
						CAR.PRPRTRY_CD,
						MAX(ADJ_RSN_ID) AS MAX_ADJ_RSN_ID
					FROM
						EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON 
						GROUP BY 1 ) 
						CAR;
SELECT
						(CAR.SVC_LN_CTRL_NBR,
						CAR.VER_NBR,
						CAR.PRPRTRY_CD,
						MAX(ADJ_RSN_ID) AS MAX_ADJ_RSN_ID
					FROM
						EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON 
						GROUP BY 1 ) 
						CAR
					INNER JOIN (
						SELECT
							SVC_LN_CTRL_NBR,
							MAX(VER_NBR) AS MAX_VER_NBR
						FROM
							EIW_PRD.CLAIM_RULES_ADJUSTMENT_REASON
						GROUP BY
							1) QRY ON
						CAR.SVC_LN_CTRL_NBR = QRY.SVC_LN_CTRL_NBR
						;
SELECT
		CL.*,
		HPD.PLAN_REMIT_PROPRIETARY_REASON_CODE_1,
		HPD.PLAN_REMIT_PROPRIETARY_REASON_CODE_2,
		HPD.PLAN_REMIT_PROPRIETARY_REASON_CODE_3,
		HPD.PLAN_REMIT_PROPRIETARY_REASON_CODE_4,
		HPD.PLAN_REMIT_PROPRIETARY_REASON_CODE_5,
		HPD.PLAN_REMIT_PROPRIETARY_REASON_CODE_6
	FROM
		EIW_PRD.MULTIVERSE_GENERAL_CLAIMLINEEXTRACT_MATCHING CL;
(
				SELECT
					DISTINCT CRA.SVC_LN_CTRL_NBR AS CLAIM_LINE_ITEM_CONTROL_NUMBER,
					CRA.PRPRTRY_CD || ' - ' || CRA.PRPRTRY_DESC AS REASON_CODE,
					ROW_NUMBER() OVER(PARTITION BY CRA.SVC_LN_CTRL_NBR
				ORDER BY
					CRA.PRPRTRY_CD) AS REASON_ORDER;
SELECT
					DISTINCT CRA.SVC_LN_CTRL_NBR AS CLAIM_LINE_ITEM_CONTROL_NUMBER,
					CRA.PRPRTRY_CD || ' - ' || CRA.PRPRTRY_DESC AS REASON_CODE,
					ROW_NUMBER() OVER(PARTITION BY CRA.SVC_LN_CTRL_NBR
				ORDER BY
					CRA.PRPRTRY_CD) AS REASON_ORDER;
create temporary table vltl_mkup
     (
      Span_Type VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC NULL,
	  SVC_CD DECIMAL(18,0) NOT NULL,
      UOM_CD VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL,
      FEE_SCHED_CD VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL,
 	  MARKUP_RATE_PCT decimal(18,6),
	  EFF_STRT_DT date,
      EFF_End_DT date,
      CRTD_TS timestamp (6)
      )
NO PRIMARY INDEX
on commit preserve rows;
create temporary table vltl_mkup
     (
      Span_Type VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC NULL,
	  SVC_CD DECIMAL(18,0) NOT NULL,
      UOM_CD VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL,
      FEE_SCHED_CD VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL,
 	  MARKUP_RATE_PCT decimal(18,6),
	  EFF_STRT_DT date,
      EFF_End_DT date,
      CRTD_TS timestamp (6)
      )
NO PRIMARY INDEX
on commit preserve rows;
\locale;
select "\locale";
SELECT MAX(a.tmp_val) FROM(
  SELECT
    replace(systemconfig.item_value, ' ', '') as tmp_val
  FROM
    ntwkmgmt_work_dev.systemconfig
  WHERE
    systemconfig.system = 'apa'
     AND systemconfig.item = 'NAT_TeamEmails';
SELECT MAX(a.tmp_val) FROM(
  SELECT
    replace(systemconfig.item_value, ' ', '') as tmp_val
  FROM
    ntwkmgmt_work_dev.systemconfig
  WHERE
    systemconfig.system = 'apa'
     AND systemconfig.item = 'NAT_TeamEmails');
SELECT MAX(a.tmp_val) FROM(
  SELECT
    replace(systemconfig.item_value, ' ', '') as tmp_val
  FROM
    ntwkmgmt_work_dev.systemconfig
  WHERE
    systemconfig.system = 'apa'
     AND systemconfig.item = 'NAT_TeamEmails'
UNION
SELECT '' as temp_val)a""") #line 844;
SELECT MAX(a.tmp_val) FROM(
  SELECT
    replace(systemconfig.item_value, ' ', '') as tmp_val
  FROM
    ntwkmgmt_work_dev.systemconfig
  WHERE
    systemconfig.system = 'apa'
     AND systemconfig.item = 'NAT_TeamEmails'
UNION
SELECT '' as temp_val)a""");
UPDATE ntwkmgmt_work_dev.systemconfig SET item_value = 'No'  WHERE systemconfig.item = 'SystemRunning';
create schema GENERAL_WORK_PRD;
create schema 'GENERAL_WORK_PRD';
create schema IF NOT EXISTS "GENERAL_WORK_PRD";
CREATE TABLE GENERAL_WORK_PRD.AisforApple 
     
     (
      CLAIM_ID INTEGER)
 ;
CREATE TABLE GENERAL_WORK_PRD.cigna 
     
     (
      PERIOD_ID INTEGER,
      MTRC_GRP_NM VARCHAR(50) ,
      MTRC_ID VARCHAR(10) ,
      MTRC_NM VARCHAR(255) ,
      RPT_DLGTD_SVCS VARCHAR(255) ,
      RPT_TIMELN VARCHAR(50) ,
      MTRC_VALUE DECIMAL(16,3),
      updt_dt DATE)
PRIMARY INDEX ( PERIOD_ID );
CREATE TABLE GENERAL_WORK_PRD.cigna 
     
     (
      PERIOD_ID INTEGER,
      MTRC_GRP_NM VARCHAR(50) ,
      MTRC_ID VARCHAR(10) ,
      MTRC_NM VARCHAR(255) ,
      RPT_DLGTD_SVCS VARCHAR(255) ,
      RPT_TIMELN VARCHAR(50) ,
      MTRC_VALUE DECIMAL(16,3),
      updt_dt DATE)
;
CREATE or replace VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS 
SELECT
    'FLB' AS PAYER
    ,CASE
       When A.CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When A.CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When A.CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When A.CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When A.CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When A.CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When A.CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When A.CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When A.CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End CY1

    ,TRUNC(A.CLM_SVC_BGN_DT,'MONTH') AS INCURRED
--    ,TRUNC(A.MDLX_PAID_DT,'MONTH') AS PAID

    ,A.PG_CAT
    ,CASE 
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN A.PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN A.PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE A.PG_PRODUCT 
    END AS PG_PRODUCT

--    ,A.CCXFLAG
--    ,SUM(A.SRPR_CALD_ALWD_AM) AS ALLOWED
--    ,SUM(A.CLM_SVCU_CT) AS UNITS
    ,COUNT(DISTINCT A.CNSR_MBR_ID) AS PATIENTS

--FROM MEDECON_PRD.FLBLUE_XT_201601_202005_202005 A

FROM MEDECON_PRD.FLBLUE_EXTERNAL A --_LATEST A;
---ORDER BY 3,5;
set role pseudosuperuser;
CREATE or replace VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS 
SELECT
    'FLB' AS PAYER
    ,CASE
       When A.CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When A.CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When A.CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When A.CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When A.CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When A.CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When A.CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When A.CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When A.CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End CY1

    ,TRUNC(A.CLM_SVC_BGN_DT,'MONTH') AS INCURRED
--    ,TRUNC(A.MDLX_PAID_DT,'MONTH') AS PAID

    ,A.PG_CAT
    ,CASE 
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN A.PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN A.PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE A.PG_PRODUCT 
    END AS PG_PRODUCT

--    ,A.CCXFLAG
--    ,SUM(A.SRPR_CALD_ALWD_AM) AS ALLOWED
--    ,SUM(A.CLM_SVCU_CT) AS UNITS
    ,COUNT(DISTINCT A.CNSR_MBR_ID) AS PATIENTS

--FROM MEDECON_PRD.FLBLUE_XT_201601_202005_202005 A

FROM MEDECON_PRD.FLBLUE_EXTERNAL A --_LATEST A

INNER JOIN
    (SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End CY

        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
--    FROM MEDECON_PRD.FLBLUE_XT_201601_201907_201907

    FROM MEDECON_PRD.FLBLUE_EXTERNAL--_LATEST
    WHERE DACL_LOS_1_CD = '12' -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        --AND PG_ELIG = 1 -- CONTRCT DOES NOT SAY SPEND MUST BE PG ELIG
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') -- LIMITING TO PG ELIG PRODUCTS

    GROUP BY ---1,2
    CY
   ,CNSR_MBR_ID
    HAVING ALLOWED BETWEEN 15 AND 25000) B

ON A.CNSR_MBR_ID = B.CNSR_MBR_ID -- LIMITING TO MEMBERS WITH BETWEEN 15 AND 25000 IN ACTUAL ALLOWED
AND CY1 = B.CY

--INNER JOIN
--    (
--    SELECT
--        DISTINCT FLB.HCPC
--        FROM MEDECON_PRD.FLB_CAP_PG FLB
--        INNER JOIN EIW_PRD.SERVICE SVC
--        ON FLB.SERVICE_CD = SVC.SVC_CD
--        WHERE SVC.SVC_CAT_CD IN ('THH','WHS')
--        AND FLB.PG_ELGBL IN 'Y')FLB
--ON A.DACL_MLPC_1_CD = FLB.HCPC -- LIMITING TO CODES IN PG

WHERE A.DACL_LOS_1_CD = '12' -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 -- LIMITING TO CODES IN PG
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') -- LIMITING TO PG ELIG PRODUCTS

    --AND A.CVOUT_SVC_IN = 0 THIS FIELD ONLY CONTAINS NULL
    --AND A.CVOUT_PVDR_IN = 0 THIS FIELD ONLY CONTAINS 0

GROUP BY --- 1,2,3,4,5
PAYER,
CY1,
INCURRED,
A.PG_CAT,
PG_PRODUCT;
---ORDER BY 3,5;
set role dbadmin;
set role pseudosuperuser;
CREATE or replace VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS 
SELECT
    'FLB' AS PAYER
    ,CASE
       When A.CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When A.CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When A.CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When A.CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When A.CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When A.CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When A.CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When A.CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When A.CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End CY1

    ,TRUNC(A.CLM_SVC_BGN_DT,'MONTH') AS INCURRED
--    ,TRUNC(A.MDLX_PAID_DT,'MONTH') AS PAID

    ,A.PG_CAT
    ,CASE 
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN A.PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN A.PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE A.PG_PRODUCT 
    END AS PG_PRODUCT

--    ,A.CCXFLAG
--    ,SUM(A.SRPR_CALD_ALWD_AM) AS ALLOWED
--    ,SUM(A.CLM_SVCU_CT) AS UNITS
    ,COUNT(DISTINCT A.CNSR_MBR_ID) AS PATIENTS

--FROM MEDECON_PRD.FLBLUE_XT_201601_202005_202005 A

FROM MEDECON_PRD.FLBLUE_EXTERNAL A --_LATEST A

INNER JOIN
    (SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End CY

        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
--    FROM MEDECON_PRD.FLBLUE_XT_201601_201907_201907

    FROM MEDECON_PRD.FLBLUE_EXTERNAL--_LATEST
    WHERE DACL_LOS_1_CD = '12' -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        --AND PG_ELIG = 1 -- CONTRCT DOES NOT SAY SPEND MUST BE PG ELIG
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') -- LIMITING TO PG ELIG PRODUCTS

    GROUP BY ---1,2
    CY
   ,CNSR_MBR_ID
    -- HAVING ALLOWED BETWEEN 15 AND 25000) B
    HAVING SUM(SRPR_CALD_ALWD_AM) betweem 15 amd 25000) B

ON A.CNSR_MBR_ID = B.CNSR_MBR_ID -- LIMITING TO MEMBERS WITH BETWEEN 15 AND 25000 IN ACTUAL ALLOWED
AND CY1 = B.CY

--INNER JOIN
--    (
--    SELECT
--        DISTINCT FLB.HCPC
--        FROM MEDECON_PRD.FLB_CAP_PG FLB
--        INNER JOIN EIW_PRD.SERVICE SVC
--        ON FLB.SERVICE_CD = SVC.SVC_CD
--        WHERE SVC.SVC_CAT_CD IN ('THH','WHS')
--        AND FLB.PG_ELGBL IN 'Y')FLB
--ON A.DACL_MLPC_1_CD = FLB.HCPC -- LIMITING TO CODES IN PG

WHERE A.DACL_LOS_1_CD = '12' -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 -- LIMITING TO CODES IN PG
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') -- LIMITING TO PG ELIG PRODUCTS

    --AND A.CVOUT_SVC_IN = 0 THIS FIELD ONLY CONTAINS NULL
    --AND A.CVOUT_PVDR_IN = 0 THIS FIELD ONLY CONTAINS 0

GROUP BY --- 1,2,3,4,5
PAYER,
CY1,
INCURRED,
A.PG_CAT,
PG_PRODUCT;
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End CY1

    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED
--    ,TRUNC(MDLX_PAID_DT,'MONTH') AS PAID

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT

--    ,CCXFLAG
--    ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
--    ,SUM(CLM_SVCU_CT) AS UNITS
    ,COUNT(DISTINCT CNSR_MBR_ID) AS PATIENTS


FROM MEDECON_PRD.FLBLUE_EXTERNAL;
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End CY1

--    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED
--    ,TRUNC(MDLX_PAID_DT,'MONTH') AS PAID

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT

--    ,CCXFLAG
--    ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
--    ,SUM(CLM_SVCU_CT) AS UNITS
    ,COUNT(DISTINCT CNSR_MBR_ID) AS PATIENTS


FROM MEDECON_PRD.FLBLUE_EXTERNAL;
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End CY1

--    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED
--    ,TRUNC(MDLX_PAID_DT,'MONTH') AS PAID

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT

--    ,CCXFLAG
--    ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
--    ,SUM(CLM_SVCU_CT) AS UNITS
    -- ,COUNT(DISTINCT CNSR_MBR_ID) AS PATIENTS


FROM MEDECON_PRD.FLBLUE_EXTERNAL;
---ORDER BY 3,5;
CREATE or replace VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS 
SELECT
    'FLB' AS PAYER
    ,CASE
       When A.CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When A.CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When A.CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When A.CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When A.CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When A.CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When A.CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When A.CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When A.CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End CY1

    ,TRUNC(A.CLM_SVC_BGN_DT,'MONTH') AS INCURRED
--    ,TRUNC(A.MDLX_PAID_DT,'MONTH') AS PAID

    ,A.PG_CAT
    ,CASE 
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN A.PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN A.PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE A.PG_PRODUCT 
    END AS PG_PRODUCT

--    ,A.CCXFLAG
--    ,SUM(A.SRPR_CALD_ALWD_AM) AS ALLOWED
--    ,SUM(A.CLM_SVCU_CT) AS UNITS
    ,COUNT(DISTINCT A.CNSR_MBR_ID) AS PATIENTS

--FROM MEDECON_PRD.FLBLUE_XT_201601_202005_202005 A

FROM MEDECON_PRD.FLBLUE_EXTERNAL A --_LATEST A

INNER JOIN
    (SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End CY

        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
--    FROM MEDECON_PRD.FLBLUE_XT_201601_201907_201907

    FROM MEDECON_PRD.FLBLUE_EXTERNAL--_LATEST
    WHERE DACL_LOS_1_CD = '12' -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        --AND PG_ELIG = 1 -- CONTRCT DOES NOT SAY SPEND MUST BE PG ELIG
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') -- LIMITING TO PG ELIG PRODUCTS

    GROUP BY ---1,2
    CY
   ,CNSR_MBR_ID
    -- HAVING ALLOWED BETWEEN 15 AND 25000) B
    HAVING SUM(SRPR_CALD_ALWD_AM) BETWEEN 15 and 25000) B

ON A.CNSR_MBR_ID = B.CNSR_MBR_ID -- LIMITING TO MEMBERS WITH BETWEEN 15 AND 25000 IN ACTUAL ALLOWED
AND CY1 = B.CY

--INNER JOIN
--    (
--    SELECT
--        DISTINCT FLB.HCPC
--        FROM MEDECON_PRD.FLB_CAP_PG FLB
--        INNER JOIN EIW_PRD.SERVICE SVC
--        ON FLB.SERVICE_CD = SVC.SVC_CD
--        WHERE SVC.SVC_CAT_CD IN ('THH','WHS')
--        AND FLB.PG_ELGBL IN 'Y')FLB
--ON A.DACL_MLPC_1_CD = FLB.HCPC -- LIMITING TO CODES IN PG

WHERE A.DACL_LOS_1_CD = '12' -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 -- LIMITING TO CODES IN PG
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') -- LIMITING TO PG ELIG PRODUCTS

    --AND A.CVOUT_SVC_IN = 0 THIS FIELD ONLY CONTAINS NULL
    --AND A.CVOUT_PVDR_IN = 0 THIS FIELD ONLY CONTAINS 0

GROUP BY --- 1,2,3,4,5
PAYER,
CY1,
INCURRED,
A.PG_CAT,
PG_PRODUCT
;---ORDER BY 3,5;
select trunc('blah') as what;
select trunc(Now) as what;
select Time.Now as what;
select systemdate() as what;
select nowdate() as what;
select current_date as what;
select to_date(current_date, 'yyyy/mm') as what;
select to_date(current_date::date, 'yyyy/mm') as what;
select to_date(current_date::varchar(20), 'yyyy/mm') as what;
select to_date(current_date::varchar(20), 'YYYY/MM') as what;
select to_date(trim(current_date::varchar(20)), 'YYYY/MM') as what;
select date_trunc('Month' ,current_date::varchar(20))) as what;
select date_trunc('Month' ,current_date::varchar(20)) as what;
select date_trunc('Month' ,current_date) as what;
select left(date_trunc('Month' ,current_date),7) as what;
select ltrim(date_trunc('Month' ,current_date),7) as what;
select ltrim(date_trunc('Month' ,current_date)::varchar,7) as what;
select substr(date_trunc('Month' ,current_date)::varchar,7) as what;
select substr(date_trunc('Month' ,current_date)::varchar,1,7) as what;
select translate(substr(date_trunc('Month' ,current_date)::varchar,1,7),'-','/') as what;
select translate(substr(current_date)::varchar,1,7),'-','/') as what;
select translate(substr(current_date::varchar,1,7),'-','/') as what;
create or replace view MEDECON_PRD.CCIunion AS
(
Select 
*
From
(
Select
  AMTALLOW,
  AMTCHARGE,
  AMTCOINS,
  AMTCOPAY,
  AMTDEDUCT,
  AMTPAY,
  CLMNUMSEGMENT,
  CLMSERVNUMSEGMENT,
  COCLEVEL1,
  COCLEVEL2,
  DATEADMIT,
  DATEADMIT_MO,
  DATEADMIT_YR,
  DATEBIRTH,
  DATEDISCHARGE,
  DATEEFF,
  DATEEFF_MO,
  DATEEFF_YR,
  DATEPAID,
  DIAG1,
  DIAG2,
  DIAG3,
  DIAG4,
  DISCHARGESTATUS,
  DRG,
  FUNDING_STATUSSEGMENT,
  GENDER,
  ICD_PROC1,
  ICD_PROC2,
  ICD_PROC3,
  ICD_PROC4,
  ICD_PROC5,
  INPATDATEADMIT,
  INPATDATEDISCHARGE,
  INPTFAC_ACUTE_SUBACUTE,
  LASTOFSERVPROVIRSNAME,
  LOB,
  LOCATION,
  MBR_ADDRESS_ONE,
  MBR_ADDRESS_TWO,
  MBR_CITY,
  MBR_COUNTY,
  MBR_FIRST_NAME,
  MBR_LAST_NAME,
  MBR_STATE,
  MBR_ZIP,
  MODIFER1,
  MODIFIER2,
  NMI,
  PAYMENTSTATUS_NETWORKINOUT,
  PAYMENTSTATUSCD,
  PROCREVCODE,
  PROCREVDESC,
  QTY,
  RISK,
  SEGMENT,
  SERVPROVADDRESS1,
  SERVPROVADDRESS2,
  SERVPROVCITY,
  SERVPROVCOUNTY,
  SERVPROVDESC,
  SERVPROVNAME,
  SERVPROVNPI,
  SERVPROVNUM,
  SERVPROVSTATE,
  SERVPROVTIN,
  SERVPROVZIP,
  SRC_FILE_NM


From
  MEDECON_UW_CLIENT_PRD.TBL_CTCARE_MCARE_COMM_CLAIM_2015_16_20170324
  
Union 

Select
  AMTALLOW,
  AMTCHARGE,
  AMTCOINS,
  AMTCOPAY,
  AMTDEDUCT,
  AMTPAY,
  CLMNUMSEGMENT,
  CLMSERVNUMSEGMENT,
  COCLEVEL1,
  COCLEVEL2,
  DATEADMIT,
  DATEADMIT_MO,
  DATEADMIT_YR,
  DATEBIRTH,
  DATEDISCHARGE,
  DATEEFF,
  DATEEFF_MO,
  DATEEFF_YR,
  DATEPAID,
  DIAG1,
  DIAG2,
  DIAG3,
  DIAG4,
  DISCHARGESTATUS,
  DRG,
  FUNDING_STATUSSEGMENT,
  GENDER,
  ICD_PROC1,
  ICD_PROC2,
  ICD_PROC3,
  ICD_PROC4,
  ICD_PROC5,
  INPATDATEADMIT,
  INPATDATEDISCHARGE,
  INPTFAC_ACUTE_SUBACUTE,
  LASTOFSERVPROVIRSNAME,
  LOB,
  LOCATION,
  MBR_ADDRESS_ONE,
  MBR_ADDRESS_TWO,
  MBR_CITY,
  MBR_COUNTY,
  MBR_FIRST_NAME,
  MBR_LAST_NAME,
  MBR_STATE,
  MBR_ZIP,
  MODIFER1,
  MODIFIER2,
  NMI,
  PAYMENTSTATUS_NETWORKINOUT,
  PAYMENTSTATUSCD,
  PROCREVCODE,
  PROCREVDESC,
  QTY,
  RISK,
  SEGMENT,
  SERVPROVADDRESS1,
  SERVPROVADDRESS2,
  SERVPROVCITY,
  SERVPROVCOUNTY,
  SERVPROVDESC,
  SERVPROVNAME,
  SERVPROVNPI,
  SERVPROVNUM,
  SERVPROVSTATE,
  SERVPROVTIN,
  SERVPROVZIP,
  SRC_FILE_NM


From
  MEDECON_UW_CLIENT_PRD.TBL_EHEALTH_MCARE_COMM_CLAIM_2015_16_20170323
 )A 
 
 union

SELect 
 ALLOWEDAMOUNT as AMTALLOW,
 CHARGEDAMOUNT as AMTCHARGE,
 AMTCOINS as AMTCOINS,
 AMTCOPAY as AMTCOPAY,
 AMTDEDUCT as AMTDEDUCT,
 PAIDAMOUNT as AMTPAY,
 CLAIMNUMBER as CLMNUMSEGMENT,
 NULL::varchar(10) as CLMSERVNUMSEGMENT,
 NULL::varchar(10) as COCLEVEL1,
 NULL::varchar(10) as COCLEVEL2,
 FIRSTDOS as DATEADMIT,
 date_part('MONTH',FIRSTDOS) as DATEADMIT_MO,
 date_part('ISOYEAR',FIRSTDOS) as  DATEADMIT_YR,
 DATEOFBIRTH as DATEBIRTH,
 LASTDOS as DATEDISCHARGE,
 FIRSTDOS as DATEEFF,
 date_part('MONTH',FIRSTDOS) as DATEEFF_MO,
 date_part('ISOYEAR',FIRSTDOS) as DATEEFF_YR,
 PAIDDATE as DATEPAID,
 DIAGNOSISCODE1 as DIAG1,
 DIAGNOSISCODE2 as DIAG2,
 DIAGNOSISCODE3 as DIAG3,
 DIAGNOSISCODE4 as DIAG4,
 NULL::varchar(10) as DISCHARGESTATUS,
 APRDRGCODE as DRG, 
 trim(FUNDINGSTATUS::varchar(50)) as FUNDING_STATUSSEGMENT,
 GENDER::char(1) as GENDER,
 ICD_PRINCIPAL_PROCEDURE_CODE as ICD_PROC1,
 ICD_SECONDARY_PROCEDURE_CODE1 as ICD_PROC2,
 ICD_SECONDARY_PROCEDURE_CODEX as ICD_PROC3,
 NULL::varchar(10) as ICD_PROC4,
 NULL::varchar(10) as ICD_PROC5,
 NULL::date as INPATDATEADMIT,
 NULL::date as INPATDATEDISCHARGE,
 NULL::varchar(10) as INPTFAC_ACUTE_SUBACUTE,
 NULL::varchar(10) as LASTOFSERVPROVIRSNAME,
 Lob as Lob,
 POS as LOCATION,
 MEMBERADDRESS as MBR_ADDRESS_ONE,
 NULL::varchar(10) as MBR_ADDRESS_TWO,
 NULL::varchar(10) as MBR_CITY,
 MEMBERCOUNTY as MBR_COUNTY,
 MEMBERFIRSTNAME as MBR_FIRST_NAME,
 MEMBERLASTNAME as MBR_LAST_NAME,
 MEMBERSTATE as MBR_STATE,
 MEMBERZIPCODE as MBR_ZIP,
 MODIFIER1 as MODIFER1,
 MODIFIER2 as MODIFIER2, 
 REGEXP_SUBSTR(MemberID, '[0-9]+')::integer  as NMI,
 NULL::varchar(10) as PAYMENTSTATUS_NETWORKINOUT,
 NULL::varchar(10) as PAYMENTSTATUSCD, 
 PROCEDUREIDNUM as PROCREVCODE,
 NULL::varchar(10) as PROCREVDESC,
 UNITS::integer as QTY,
 NULL::Number as Risk,
 NULL::varchar(10) as SEGMENT,
 SERVICINGPROVIDERADDRESS1 as SERVPROVADDRESS1,
 SERVICINGPROVIDERADDRESS2 as SERVPROVADDRESS2,
 SERVICINGPROVIDERCITY as SERVPROVCITY,
 SERVICINGPROVIDERCOUNTY as SERVPROVCOUNTY,
 SERVICINGPROVIDERTYPE as SERVPROVDESC,
 SERVICINGPROVIDERFIRSTNAME as SERVPROVNAME,
 SERVICINGPROVIDERNPI as SERVPROVNPI,
 SERVICINGPROVIDERID as SERVPROVNUM,
 SERVICINGPROVIDERSTATE as SERVPROVSTATE,
 NULL::varchar(10) as SERVPROVTIN,
 SERVICINGPROVIDERZIPCODE as SERVPROVZIP,
 SOURCE_FILE_NM as SRC_FILE_NM
 

 
 From
  MEDECON_PRD.CCI_CLAIMS_200606_201709
  
  
  );
create or replace view MEDECON_PRD.CCIunion AS
(
Select 
*
From
(
Select
  AMTALLOW,
  AMTCHARGE,
  AMTCOINS,
  AMTCOPAY,
  AMTDEDUCT,
  AMTPAY,
  CLMNUMSEGMENT,
  CLMSERVNUMSEGMENT,
  COCLEVEL1,
  COCLEVEL2,
  DATEADMIT,
  DATEADMIT_MO,
  DATEADMIT_YR,
  DATEBIRTH,
  DATEDISCHARGE,
  DATEEFF,
  DATEEFF_MO,
  DATEEFF_YR,
  DATEPAID,
  DIAG1,
  DIAG2,
  DIAG3,
  DIAG4,
  DISCHARGESTATUS,
  DRG,
  FUNDING_STATUSSEGMENT,
  GENDER,
  ICD_PROC1,
  ICD_PROC2,
  ICD_PROC3,
  ICD_PROC4,
  ICD_PROC5,
  INPATDATEADMIT,
  INPATDATEDISCHARGE,
  INPTFAC_ACUTE_SUBACUTE,
  LASTOFSERVPROVIRSNAME,
  LOB,
  LOCATION,
  MBR_ADDRESS_ONE,
  MBR_ADDRESS_TWO,
  MBR_CITY,
  MBR_COUNTY,
  MBR_FIRST_NAME,
  MBR_LAST_NAME,
  MBR_STATE,
  MBR_ZIP,
  MODIFER1,
  MODIFIER2,
  NMI,
  PAYMENTSTATUS_NETWORKINOUT,
  PAYMENTSTATUSCD,
  PROCREVCODE,
  PROCREVDESC,
  QTY,
  RISK,
  SEGMENT,
  SERVPROVADDRESS1,
  SERVPROVADDRESS2,
  SERVPROVCITY,
  SERVPROVCOUNTY,
  SERVPROVDESC,
  SERVPROVNAME,
  SERVPROVNPI,
  SERVPROVNUM,
  SERVPROVSTATE,
  SERVPROVTIN,
  SERVPROVZIP,
  SRC_FILE_NM


From
  MEDECON_UW_CLIENT_PRD.TBL_CTCARE_MCARE_COMM_CLAIM_2015_16_20170324
  
Union 

Select
  AMTALLOW,
  AMTCHARGE,
  AMTCOINS,
  AMTCOPAY,
  AMTDEDUCT,
  AMTPAY,
  CLMNUMSEGMENT,
  CLMSERVNUMSEGMENT,
  COCLEVEL1,
  COCLEVEL2,
  DATEADMIT,
  DATEADMIT_MO,
  DATEADMIT_YR,
  DATEBIRTH,
  DATEDISCHARGE,
  DATEEFF,
  DATEEFF_MO,
  DATEEFF_YR,
  DATEPAID,
  DIAG1,
  DIAG2,
  DIAG3,
  DIAG4,
  DISCHARGESTATUS,
  DRG,
  FUNDING_STATUSSEGMENT,
  GENDER,
  ICD_PROC1,
  ICD_PROC2,
  ICD_PROC3,
  ICD_PROC4,
  ICD_PROC5,
  INPATDATEADMIT,
  INPATDATEDISCHARGE,
  INPTFAC_ACUTE_SUBACUTE,
  LASTOFSERVPROVIRSNAME,
  LOB,
  LOCATION,
  MBR_ADDRESS_ONE,
  MBR_ADDRESS_TWO,
  MBR_CITY,
  MBR_COUNTY,
  MBR_FIRST_NAME,
  MBR_LAST_NAME,
  MBR_STATE,
  MBR_ZIP,
  MODIFER1,
  MODIFIER2,
  NMI,
  PAYMENTSTATUS_NETWORKINOUT,
  PAYMENTSTATUSCD,
  PROCREVCODE,
  PROCREVDESC,
  QTY,
  RISK,
  SEGMENT,
  SERVPROVADDRESS1,
  SERVPROVADDRESS2,
  SERVPROVCITY,
  SERVPROVCOUNTY,
  SERVPROVDESC,
  SERVPROVNAME,
  SERVPROVNPI,
  SERVPROVNUM,
  SERVPROVSTATE,
  SERVPROVTIN,
  SERVPROVZIP,
  SRC_FILE_NM


From
  MEDECON_UW_CLIENT_PRD.TBL_EHEALTH_MCARE_COMM_CLAIM_2015_16_20170323
 )A 
 
 union

SELect 
 ALLOWEDAMOUNT as AMTALLOW,
 CHARGEDAMOUNT as AMTCHARGE,
 AMTCOINS as AMTCOINS,
 AMTCOPAY as AMTCOPAY,
 AMTDEDUCT as AMTDEDUCT,
 PAIDAMOUNT as AMTPAY,
 CLAIMNUMBER as CLMNUMSEGMENT,
 NULL::varchar(10) as CLMSERVNUMSEGMENT,
 NULL::varchar(10) as COCLEVEL1,
 NULL::varchar(10) as COCLEVEL2,
 FIRSTDOS as DATEADMIT,
 date_part('MONTH',FIRSTDOS) as DATEADMIT_MO,
 date_part('ISOYEAR',FIRSTDOS) as  DATEADMIT_YR,
 DATEOFBIRTH as DATEBIRTH,
 LASTDOS as DATEDISCHARGE,
 FIRSTDOS as DATEEFF,
 date_part('MONTH',FIRSTDOS) as DATEEFF_MO,
 date_part('ISOYEAR',FIRSTDOS) as DATEEFF_YR,
 PAIDDATE as DATEPAID,
 DIAGNOSISCODE1 as DIAG1,
 DIAGNOSISCODE2 as DIAG2,
 DIAGNOSISCODE3 as DIAG3,
 DIAGNOSISCODE4 as DIAG4,
 NULL::varchar(10) as DISCHARGESTATUS,
 APRDRGCODE as DRG, 
 trim(FUNDINGSTATUS::varchar(50)) as FUNDING_STATUSSEGMENT,
 GENDER::char(1) as GENDER,
 ICD_PRINCIPAL_PROCEDURE_CODE as ICD_PROC1,
 ICD_SECONDARY_PROCEDURE_CODE1 as ICD_PROC2,
 ICD_SECONDARY_PROCEDURE_CODEX as ICD_PROC3,
 NULL::varchar(10) as ICD_PROC4,
 NULL::varchar(10) as ICD_PROC5,
 NULL::date as INPATDATEADMIT,
 NULL::date as INPATDATEDISCHARGE,
 NULL::varchar(10) as INPTFAC_ACUTE_SUBACUTE,
 NULL::varchar(10) as LASTOFSERVPROVIRSNAME,
 Lob as Lob,
 POS as LOCATION,
 MEMBERADDRESS as MBR_ADDRESS_ONE,
 NULL::varchar(10) as MBR_ADDRESS_TWO,
 NULL::varchar(10) as MBR_CITY,
 MEMBERCOUNTY as MBR_COUNTY,
 MEMBERFIRSTNAME as MBR_FIRST_NAME,
 MEMBERLASTNAME as MBR_LAST_NAME,
 MEMBERSTATE as MBR_STATE,
 MEMBERZIPCODE as MBR_ZIP,
 MODIFIER1 as MODIFER1,
 MODIFIER2 as MODIFIER2, 
 REGEXP_SUBSTR(MemberID, '[0-9]+')::integer  as NMI,
 NULL::varchar(10) as PAYMENTSTATUS_NETWORKINOUT,
 NULL::varchar(10) as PAYMENTSTATUSCD, 
 PROCEDUREIDNUM as PROCREVCODE,
 NULL::varchar(10) as PROCREVDESC,
 UNITS::integer as QTY,
 NULL::Number as Risk,
 NULL::varchar(10) as SEGMENT,
 SERVICINGPROVIDERADDRESS1 as SERVPROVADDRESS1,
 SERVICINGPROVIDERADDRESS2 as SERVPROVADDRESS2,
 SERVICINGPROVIDERCITY as SERVPROVCITY,
 SERVICINGPROVIDERCOUNTY as SERVPROVCOUNTY,
 SERVICINGPROVIDERTYPE as SERVPROVDESC,
 SERVICINGPROVIDERFIRSTNAME as SERVPROVNAME,
 SERVICINGPROVIDERNPI as SERVPROVNPI,
 SERVICINGPROVIDERID as SERVPROVNUM,
 SERVICINGPROVIDERSTATE as SERVPROVSTATE,
 NULL::varchar(10) as SERVPROVTIN,
 SERVICINGPROVIDERZIPCODE as SERVPROVZIP,
 SOURCE_FILE_NM as SRC_FILE_NM
 

 
 From
  MEDECON_PRD.CCI_CLAIMS_200606_201709
  
  
  );
set role dbadmin;
create temp table medecon_prd.one_off AS(
source_name varchar(20)
);
create temp table medecon_prd.one_off(
id  integer,
source_name varchar(20)
);
select * from medecon_prd.one_off;
select * from medecon_prd.one_off;
select * from medecon_prd.one_off;
create table medecon_prd.z_mdcb_one_off(
id  integer,
source_name varchar(20)
);
select * from medecon_prd.z_mdcb_one_off;
select * from medecon_prd.z_mdcb_one_off;
INSERT INTO prueba.medecon_prd.z_mdcb_one_off (id,source_name) VALUES (1,'fdjkasl');
INSERT INTO prueba.medecon_prd.z_mdcb_one_off (id,source_name) VALUES (2,'''13890083''');
INSERT INTO prueba.medecon_prd.z_mdcb_one_off (id,source_name) VALUES (3,'''473892''');
INSERT INTO prueba.medecon_prd.z_mdcb_one_off (id,source_name) VALUES (4,'2021-01-11  ');
select * from medecon_prd.z_mdcb_one_off;
truncate table medecon_prd.z_mdcb_one_off;
INSERT INTO prueba.medecon_prd.z_mdcb_one_off (id,source_name) VALUES (5,'prefix 12122020');
INSERT INTO prueba.medecon_prd.z_mdcb_one_off (id,source_name) VALUES (6,'prefix 01152020');
INSERT INTO prueba.medecon_prd.z_mdcb_one_off (id,source_name) VALUES (7,'prefix 15012020');
INSERT INTO prueba.medecon_prd.z_mdcb_one_off (id,source_name) VALUES (8,'prefix 12122020  ');

 select  (SUBSTR(SOURCE_NAME,12,4)||SUBSTR(SOURCE_NAME,8,2)||SUBSTR(SOURCE_NAME,10,2) AS VARCHAR(10))::date AS FILE_CRTD_DT
from medecon_prd.z_mdcb_one_off;

 select  (SUBSTR(SOURCE_NAME,12,4)||SUBSTR(SOURCE_NAME,8,2)||SUBSTR(SOURCE_NAME,10,2) AS VARCHAR(10))::date
from medecon_prd.z_mdcb_one_off;

 select  (SUBSTR(SOURCE_NAME,12,4)||SUBSTR(SOURCE_NAME,8,2)||SUBSTR(SOURCE_NAME,10,2) AS VARCHAR(10))::date from medecon_prd.z_mdcb_one_off;

 select  (SUBSTR(SOURCE_NAME,12,4)||SUBSTR(SOURCE_NAME,8,2)||SUBSTR(SOURCE_NAME,10,2)::VARCHAR(10))::date from medecon_prd.z_mdcb_one_off;

 select id, (SUBSTR(SOURCE_NAME,12,4)||SUBSTR(SOURCE_NAME,8,2)||SUBSTR(SOURCE_NAME,10,2)::VARCHAR(10))::date from medecon_prd.z_mdcb_one_off;
select id, (SUBSTR(SOURCE_NAME,12,4)||SUBSTR(SOURCE_NAME,8,2)||SUBSTR(SOURCE_NAME,10,2))::date from medecon_prd.z_mdcb_one_off;
select id, source_name
from medecon_prd.z_mdcb_one_off
WHERE (SUBSTR(SOURCE_NAME,8,8)::date) >= '2020-03-20'::date);
select id, source_name
from medecon_prd.z_mdcb_one_off
WHERE (SUBSTR(SOURCE_NAME,8,8)::date)) >= '2020-03-20'::date;
select id, source_name
from medecon_prd.z_mdcb_one_off
WHERE SUBSTR(SOURCE_NAME,8,8)::date >= '2020-03-20'::date;
select id, source_name
from medecon_prd.z_mdcb_one_off
WHERE SUBSTR(SOURCE_NAME,8,8)::date <= '2020-03-20'::date;
select id, source_name
from medecon_prd.z_mdcb_one_off;
select id, source_name, SUBSTR(SOURCE_NAME,8,8)::date
from medecon_prd.z_mdcb_one_off;
select id, (SUBSTR(SOURCE_NAME,12,4)||SUBSTR(SOURCE_NAME,8,2)||SUBSTR(SOURCE_NAME,10,2))::date from medecon_prd.z_mdcb_one_off;
select id, source_name, SUBSTR(SOURCE_NAME,8,8)::date, substr(source_name,8,8)
from medecon_prd.z_mdcb_one_off;
select id, source_name, SUBSTR(SOURCE_NAME,8,8)::date as converted, substr(source_name,8,8) as chopped
from medecon_prd.z_mdcb_one_off;
select id, source_name, trim(SUBSTR(SOURCE_NAME,8,8))::date as converted, substr(source_name,8,8) as chopped
from medecon_prd.z_mdcb_one_off;
select id, source_name, trim(SUBSTR(SOURCE_NAME,8,8))::date as converted, substr(source_name,8,8) as chopped
from medecon_prd.z_mdcb_one_off;
select id, source_name, trim(SUBSTR(SOURCE_NAME,7,8))::date as converted, substr(source_name,8,8) as chopped;
select id, source_name, trim(SUBSTR(SOURCE_NAME,7,8))::date as converted, substr(source_name,8,8) as chopped
from medecon_prd.z_mdcb_one_off;
select id, source_name, trim(SUBSTR(SOURCE_NAME,7,8))::date as converted, substr(source_name,7,8) as chopped
from medecon_prd.z_mdcb_one_off;
select id, source_name, SUBSTR(SOURCE_NAME,8,8)::date as converted, substr(source_name,8,8) as chopped
from medecon_prd.z_mdcb_one_off;
select id, source_name, SUBSTR(SOURCE_NAME,8,8)::date as converted, substr(source_name,8,8) as chopped,
(SUBSTR(SOURCE_NAME,12,4)||SUBSTR(SOURCE_NAME,8,2)||SUBSTR(SOURCE_NAME,10,2))::date as hard_way
from medecon_prd.z_mdcb_one_off;
select id, source_name, SUBSTR(SOURCE_NAME,8,8)::date as converted, substr(source_name,8,8) as chopped,
(SUBSTR(SOURCE_NAME,12,4)||SUBSTR(SOURCE_NAME,8,2)||SUBSTR(SOURCE_NAME,10,2))::date as hard_way,
(SUBSTR(SOURCE_NAME,12,4)||SUBSTR(SOURCE_NAME,8,2)||SUBSTR(SOURCE_NAME,10,2)) as half_way
from medecon_prd.z_mdcb_one_off;
-- MEDECON_PRD.PAC_ADT_CENSUS_RAW_QUERY source

create or REPLACE VIEW MEDECON_PRD.PAC_ADT_CENSUS_RAW_QUERY AS(
  
SELECT 
  F.*,
  --REGION TYPE & MARKET
  CASE
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%CENSUS%' THEN 'WC_CEN'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACADTI%' THEN 'WC_ADT'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACAIFLADTI%' THEN 'WC_AI'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACCPADTI%' THEN 'WC_CP'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACCPI%' THEN 'WC_CP'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACPPADTI%' THEN 'WC_PP'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESARADTI%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESIAR%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESIKY%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESILA%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESINY%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESITN%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESITX%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESKYADTI%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESLAADTI%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESNYADTI%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESTNADTI%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESTXADTI%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%pp%' THEN 'WC_PP'
  ELSE 'OTHER'
  END AS SOURCE,
  --CASE
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACAIFLADTI%' THEN 'FL'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESARADTI%' THEN 'AR'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESIAR%' THEN 'AR'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESIKY%' THEN 'KY'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESILA%' THEN 'LA'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESINY%' THEN 'NY'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESITN%' THEN 'TN'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESITX%' THEN 'TX'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESKYADTI%' THEN 'KY'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESLAADTI%' THEN 'LA'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESNYADTI%' THEN 'NY'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESTNADTI%' THEN 'TN'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESTXADTI%' THEN 'TX'
  --ELSE NULL
  --END AS MARKET,
  PAT_ST AS MARKET,
  CASE
  WHEN F_FILE_TYPE_DESC LIKE '%CEN%' THEN 'CEN'
  WHEN F_FILE_TYPE_DESC LIKE '%ADT%' THEN 'ADT'
  ELSE 'OTHER'
  END AS SOURCE_TYPE,
  --ENDREGION TYPE & MARKET
  N.COMMON_NPI AS N_COMMON_NPI,
  C.COMMON_NPI AS C_COMMON_NPI,
  O.COMMON_NPI AS O_COMMON_NPI,
  MAX(TR.ACUITY) AS MAX_TR_ACUITY,
  MAX(TRA.ACUITY)AS MAX_TRA_ACUITY,
  MAX(TRB.ACUITY) AS MAX_TRB_ACUITY,
  CASE 
    WHEN (MAX(ZEROIFNULL(TR.ACUITY)) > MAX(ZEROIFNULL(TRA.ACUITY)) AND MAX(ZEROIFNULL(TR.ACUITY)) > MAX(ZEROIFNULL(TRB.ACUITY))) THEN MAX(ZEROIFNULL(TR.ACUITY))
    WHEN MAX(ZEROIFNULL(TRA.ACUITY)) > MAX(ZEROIFNULL(TRB.ACUITY)) THEN MAX(ZEROIFNULL(TRA.ACUITY))
    ELSE MAX(ZEROIFNULL(TRB.ACUITY))
  END AS MAX_ACUITY,
  CASE 
    WHEN MAX(TR.ACUITY) = 1 THEN N.COMMON_NPI
    WHEN MAX(TRA.ACUITY) = 1 THEN C.COMMON_NPI
    WHEN MAX(TRB.ACUITY) = 1 THEN O.COMMON_NPI
    WHEN MAX(TR.ACUITY) = 2 THEN N.COMMON_NPI
    WHEN MAX(TRA.ACUITY) = 2 THEN C.COMMON_NPI
    WHEN MAX(TRB.ACUITY) = 2 THEN O.COMMON_NPI
    WHEN MAX(TR.ACUITY) = 3 THEN N.COMMON_NPI
    WHEN MAX(TRA.ACUITY) = 3 THEN C.COMMON_NPI
    WHEN MAX(TRB.ACUITY) = 3 THEN O.COMMON_NPI
    WHEN MAX(TR.ACUITY) = 4 THEN N.COMMON_NPI
    WHEN MAX(TRA.ACUITY) = 4 THEN C.COMMON_NPI
    WHEN MAX(TRB.ACUITY) = 4 THEN O.COMMON_NPI
    WHEN MAX(TR.ACUITY) = 5 THEN N.COMMON_NPI
    WHEN MAX(TRA.ACUITY) = 5 THEN C.COMMON_NPI
    WHEN MAX(TRB.ACUITY) = 5 THEN O.COMMON_NPI
    ELSE COALESCE(N.COMMON_NPI,C.COMMON_NPI,O.COMMON_NPI) 
  END AS COMMON_COMMON 
  
FROM
(
  SELECT
    F.*,
    COALESCE(FAC_NPI,P.NPI) AS FAC_NPI_FIX
  FROM 
  (
    --REGION FULL CENSUS/ADT CONSOLIDATION
SELECT 
  ROW_NUMBER() OVER (ORDER BY F_FILE_CRTD_DT ASC) AS ROW_NUM
  ,CONSO.* FROM(
SELECT E.* FROM(

--REGION CENSUS CLEAN DATE  
  SELECT --REGION FIELDS
    F_FILE_LOG_ID
    ,F_TRADING_PARTNER_ID
    ,F_FILE_NM
    ,F_FILE_CRTD_USER_NM
    ,F_FILE_CRTD_DT
    ,F_FILE_TYPE_DESC
    ,F_REC_TOT_CNT
    ,F_REC_LOAD_CNT
    ,F_REC_BAD_CNT
    ,F_REC_DISCARD_CNT
    ,F_REC_INSRT_MAIN_CNT
    ,F_REC_UPD_MAIN_CNT
    ,F_REC_INSRT_HIST_CNT
    ,F_REC_ERR_CNT
    ,F_REC_IGNORE_CNT
    ,F_LOAD_STAT_CD
    ,F_LOAD_STRT_DT
    ,F_LOAD_END_DT
    ,F_LOAD_ERR_DESC
    ,F_CRTD_USER
    ,F_CRTD_DT
    ,F_UPDTD_USER
    ,F_UPDTD_DT
    ,PAT_EVENT_STAGE_ID
    ,FILE_LOG_ID
    ,PYR_NM
    ,REC_NBR
    ,REC_SRC_CD
    ,ORIG_REC_SRC_CD
    ,PAT_EVENT_TYPE_CD
    ,PAT_EVENT_DT
    ,CARE_COORD_PROG_NM
    ,PYR_HEALTH_MGMT_PROG_NM
    ,PYR_HEALTH_MGMT_PROG_FLG
    ,VEN_HEALTH_MGMT_PROG_NM
    ,VEN_HEALTH_MGMT_PROG_FLG
    ,LN_OF_BUS_NM
    ,PROD_CD
    ,PROD_SUBCAT_CD
    ,INSRNC_GRP_NBR
    ,INSRNC_GRP_NM
    ,CVG_FUNDG_CD
    ,SUB_ID
    ,MBR_ID
    ,PAT_FIRST_NM
    ,PAT_LAST_NM
    ,PAT_DOB
    ,PAT_GENDER
    ,PAT_RACE
    ,PAT_ADDR1
    ,PAT_ADDR2
    ,PAT_CNTY
    ,PAT_CITY
    ,PAT_ST
    ,PAT_ZIP
    ,PAT_PHONE
    ,PME_REFRNC_NBR
    ,PAT_RISK_SCORE_MSR
    ,PAT_DO_NOT_CALL_TXT
    ,PRIM_MARKET_NM
    ,DIAG_CD_1
    ,DIAG_DESC_1
    ,DIAG_CD_2
    ,DIAG_DESC_2
    ,DIAG_CD_3
    ,DIAG_DESC_3
    ,DIAG_RELATED_GRPING_CD
    ,DIAG_RELATED_GRPING_DESC
    ,PYR_AUTH_NBR
    ,PROC_CD_1
    ,PROC_CD_2
    ,PROC_CD_3
    ,ORDG_PHYS_NPI
    ,ORDG_PHYS_LAST_NM
    ,ORDG_PHYS_FIRST_NM
    ,ORDG_PHYS_PHONE
    ,PRIM_CARE_PHYS_NPI
    ,PRIM_CARE_PHYS_LAST_NM
    ,PRIM_CARE_PHYS_FIRST_NM
    ,PRIM_CARE_PHYS_PHONE
    ,CASE_MGR_FULL_NM
    ,FAC_VISIT_ID
    ,FAC_NPI
    ,FAC_NM
    ,FAC_TYPE_CD
    ,FAC_SPCLTY_CAT_CD
    ,FACILITY_ADMIT_DATE_NEW AS FAC_ADMIT_DT
    ,FACILITY_DISCHARGE_DATE_NEW AS FAC_DSCHRG_DT
    ,NO_DISCHARGE_FLAG
    ,FAC_DSCHRG_DSPSTN_CD
    ,FAC_DSCHRG_DSPSTN_DESC
    ,READMSN_6_MONTH_CNT
    ,READMSN_12_MONTH_CNT
    ,ORIG_PAT_EVENT_ID
    ,BYPASS_PROG_EXCLNS_FLG
    ,REC_TXT
    ,CRTD_USER
    ,CRTD_DT
    ,UPDTD_USER
    ,UPDTD_DT
    ,PAT_OTH_PHONE
    ,AFLTN_PROG_TXT
    ,PHYS_GRP_TXT
    ,PAT_EVENT_TM
    ,ADMIT_TM
    ,DSCHRG_TM
    ,STATUS_FLAG
    ,PROCESS_COMMENT
    ,FAC_SRC_CD
    ,CAST(NULL AS VARCHAR(5)) AS ADT_VENDOR
    ,FIRST_CREATED_DATE
    --ENDREGION
  FROM  
  (  
       SELECT 
        B.*
        ,CASE
          WHEN (FACILITY_ADMIT_DATE - FIRST_VALUE(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
            THEN MIN(FACILITY_ADMIT_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
          ELSE FACILITY_ADMIT_DATE
        END AS FACILITY_ADMIT_DATE_NEW
        ,CASE
          WHEN (FACILITY_ADMIT_DATE - FIRST_VALUE(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
            THEN MAX(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
          ELSE FACILITY_DISCHARGE_DATE
        END AS FACILITY_DISCHARGE_DATE_NEW
        ,CASE
          WHEN (FACILITY_ADMIT_DATE - FIRST_VALUE(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
            THEN MIN(FIRST_CREATED_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
          ELSE FIRST_CREATED_DATE
        END AS FIRST_CREATED_DATE_NEW
      FROM 
      (
        SELECT --REGION FIELDS
          F_FILE_LOG_ID
          ,F_TRADING_PARTNER_ID
          ,F_FILE_NM
          ,F_FILE_CRTD_USER_NM
          ,F_FILE_CRTD_DT
          ,F_FILE_TYPE_DESC
          ,F_REC_TOT_CNT
          ,F_REC_LOAD_CNT
          ,F_REC_BAD_CNT
          ,F_REC_DISCARD_CNT
          ,F_REC_INSRT_MAIN_CNT
          ,F_REC_UPD_MAIN_CNT
          ,F_REC_INSRT_HIST_CNT
          ,F_REC_ERR_CNT
          ,F_REC_IGNORE_CNT
          ,F_LOAD_STAT_CD
          ,F_LOAD_STRT_DT
          ,F_LOAD_END_DT
          ,F_LOAD_ERR_DESC
          ,F_CRTD_USER
          ,F_CRTD_DT
          ,F_UPDTD_USER
          ,F_UPDTD_DT
          ,PAT_EVENT_STAGE_ID
          ,FILE_LOG_ID
          ,PYR_NM
          ,REC_NBR
          ,REC_SRC_CD
          ,ORIG_REC_SRC_CD
          ,PAT_EVENT_TYPE_CD
          ,PAT_EVENT_DT
          ,CARE_COORD_PROG_NM
          ,PYR_HEALTH_MGMT_PROG_NM
          ,PYR_HEALTH_MGMT_PROG_FLG
          ,VEN_HEALTH_MGMT_PROG_NM
          ,VEN_HEALTH_MGMT_PROG_FLG
          ,LN_OF_BUS_NM
          ,PROD_CD
          ,PROD_SUBCAT_CD
          ,INSRNC_GRP_NBR
          ,INSRNC_GRP_NM
          ,CVG_FUNDG_CD
          ,SUB_ID
          ,MBR_ID
          ,PAT_FIRST_NM
          ,PAT_LAST_NM
          ,PAT_DOB
          ,PAT_GENDER
          ,PAT_RACE
          ,PAT_ADDR1
          ,PAT_ADDR2
          ,PAT_CNTY
          ,PAT_CITY
          ,PAT_ST
          ,PAT_ZIP
          ,PAT_PHONE
          ,PME_REFRNC_NBR
          ,PAT_RISK_SCORE_MSR
          ,PAT_DO_NOT_CALL_TXT
          ,PRIM_MARKET_NM
          ,DIAG_CD_1
          ,DIAG_DESC_1
          ,DIAG_CD_2
          ,DIAG_DESC_2
          ,DIAG_CD_3
          ,DIAG_DESC_3
          ,DIAG_RELATED_GRPING_CD
          ,DIAG_RELATED_GRPING_DESC
          ,PYR_AUTH_NBR
          ,PROC_CD_1
          ,PROC_CD_2
          ,PROC_CD_3
          ,ORDG_PHYS_NPI
          ,ORDG_PHYS_LAST_NM
          ,ORDG_PHYS_FIRST_NM
          ,ORDG_PHYS_PHONE
          ,PRIM_CARE_PHYS_NPI
          ,PRIM_CARE_PHYS_LAST_NM
          ,PRIM_CARE_PHYS_FIRST_NM
          ,PRIM_CARE_PHYS_PHONE
          ,CASE_MGR_FULL_NM
          ,FAC_VISIT_ID
          ,FAC_NPI
          ,FAC_NM
          ,FAC_TYPE_CD
          ,FAC_SPCLTY_CAT_CD
          ,NEW_FAC_ADMIT_DT AS FACILITY_ADMIT_DATE
          ,CASE
            WHEN NEW_FAC_DSCHRG_DT IS NOT NULL THEN NEW_FAC_DSCHRG_DT
            ELSE NEW_FAC_ADMIT_DT + 7
          END AS FACILITY_DISCHARGE_DATE
          ,CASE
            WHEN NEW_FAC_DSCHRG_DT IS NOT NULL THEN NULL
            ELSE 'NO DISCHARGE DATE'
          END AS NO_DISCHARGE_FLAG
          ,FAC_DSCHRG_DSPSTN_CD
          ,FAC_DSCHRG_DSPSTN_DESC
          ,READMSN_6_MONTH_CNT
          ,READMSN_12_MONTH_CNT
          ,ORIG_PAT_EVENT_ID
          ,BYPASS_PROG_EXCLNS_FLG
          ,REC_TXT
          ,CRTD_USER
          ,CRTD_DT
          ,UPDTD_USER
          ,UPDTD_DT
          ,PAT_OTH_PHONE
          ,AFLTN_PROG_TXT
          ,PHYS_GRP_TXT
          ,PAT_EVENT_TM
          ,ADMIT_TM
          ,DSCHRG_TM
          ,STATUS_FLAG
          ,PROCESS_COMMENT
          ,FAC_SRC_CD
          ,FIRST_VALUE(F_FILE_CRTD_DT) OVER(PARTITION BY MBR_ID, NEW_FAC_ADMIT_DT ORDER BY F_FILE_CRTD_DT ASC NULLS LAST) AS FIRST_CREATED_DATE
          --ENDREGION
        FROM
        (
          SELECT --REGION FIELDS
            F.FILE_LOG_ID AS F_FILE_LOG_ID,
            F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
            F.FILE_NM AS F_FILE_NM,
            F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
            F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
            F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
            F.REC_TOT_CNT AS F_REC_TOT_CNT,
            F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
            F.REC_BAD_CNT AS F_REC_BAD_CNT,
            F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
            F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
            F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
            F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
            F.REC_ERR_CNT AS F_REC_ERR_CNT,
            F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
            F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
            F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
            F.LOAD_END_DT AS F_LOAD_END_DT,
            F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
            F.CRTD_USER AS F_CRTD_USER,
            F.CRTD_DT AS F_CRTD_DT,
            F.UPDTD_USER AS F_UPDTD_USER,
            F.UPDTD_DT AS F_UPDTD_DT,
            S.*
            ,CASE
              WHEN SUBSTR(S.FAC_ADMIT_DT,4,1) = '/' THEN '0'||SUBSTR(S.FAC_ADMIT_DT,1,2)||'0'||SUBSTR(S.FAC_ADMIT_DT,3,6)
              WHEN SUBSTR(S.FAC_ADMIT_DT,2,1) = '/' THEN '0'||S.FAC_ADMIT_DT
              WHEN SUBSTR(S.FAC_ADMIT_DT,5,1) = '/' THEN SUBSTR(S.FAC_ADMIT_DT,1,3)||'0'||SUBSTR(S.FAC_ADMIT_DT,4,6)
              ELSE S.FAC_ADMIT_DT
            END AS FAC_ADMIT_DT_FIX,
            CAST(CAST(CAST(TRIM(FAC_ADMIT_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_FAC_ADMIT_DT,
            CASE
              WHEN SUBSTR(S.FAC_DSCHRG_DT,4,1) = '/' THEN '0'||SUBSTR(S.FAC_DSCHRG_DT,1,2)||'0'||SUBSTR(S.FAC_DSCHRG_DT,3,6)
              WHEN SUBSTR(S.FAC_DSCHRG_DT,2,1) = '/' THEN '0'||S.FAC_DSCHRG_DT
              WHEN SUBSTR(S.FAC_DSCHRG_DT,5,1) = '/' THEN SUBSTR(S.FAC_DSCHRG_DT,1,3)||'0'||SUBSTR(S.FAC_DSCHRG_DT,4,6)
              ELSE S.FAC_DSCHRG_DT
            END AS FAC_DSCHRG_DT_FIX,
            CAST(CAST(CAST(TRIM(FAC_DSCHRG_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_FAC_DSCHRG_DT
            --ENDREGION
          FROM 
          (
            SELECT *
            FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
            WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
              AND FILE_TYPE_DESC LIKE '%CEN%'
          ) F
          JOIN 
          (
            SELECT *
            FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
            WHERE (PAT_EVENT_TYPE_CD IS NULL OR PAT_EVENT_TYPE_CD = 'SNF')
              AND FAC_ADMIT_DT LIKE '%/%'
              AND FAC_ADMIT_DT NOT LIKE '%15/12%'
          ) S
            ON F.FILE_LOG_ID = S.FILE_LOG_ID
            
          UNION ALL
          --REGION RAW CENSUS DATA
          SELECT 
            CAST(NULL AS DECIMAL ( 38, 0)) AS FILE_LOG_ID,
            CAST(NULL AS VARCHAR(20)) AS TRADING_PARTNER_ID,
            SOURCE_NAME,
            CAST(NULL AS VARCHAR(100)) AS FILE_CRTD_USER_NM,
            (SUBSTR(SOURCE_NAME,12,4)||SUBSTR(SOURCE_NAME,8,2)||SUBSTR(SOURCE_NAME,10,2))::date AS FILE_CRTD_DT,
            CAST('CEN' AS VARCHAR(50)) AS FILE_TYPE_DESC,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_TOT_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_LOAD_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_BAD_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_DISCARD_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_INSRT_MAIN_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_UPD_MAIN_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_INSRT_HIST_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_ERR_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_IGNORE_CNT,
            CAST(NULL AS VARCHAR(20)) AS LOAD_STAT_CD,
            CAST(NULL AS TIMESTAMP (6)) AS LOAD_STRT_DT,
            CAST(NULL AS TIMESTAMP (6)) AS LOAD_END_DT,
            CAST(NULL AS VARCHAR(255)) AS LOAD_ERR_DESC,
            CAST(NULL AS VARCHAR(30)) AS CRTD_USER,
            CAST(NULL AS TIMESTAMP (6)) AS CRTD_DT,
            CAST(NULL AS VARCHAR(30)) AS UPDTD_USER,
            CAST(NULL AS TIMESTAMP (6)) AS UPDTD_DT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS PAT_EVENT_STAGE_ID,
            CAST(NULL AS DECIMAL ( 38, 0)) AS FILE_LOG_ID_2,
            CAST(NULL AS VARCHAR(300)) AS PYR_NM,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_NBR,
            CAST(NULL AS VARCHAR(3)) AS REC_SRC_CD,
            CAST(NULL AS VARCHAR(300)) AS ORIG_REC_SRC_CD,
            CAST(NULL AS VARCHAR(300)) AS PAT_EVENT_TYPE_CD,
            CAST(NULL AS VARCHAR(300)) AS PAT_EVENT_DT,
            CAST(NULL AS VARCHAR(300)) AS CARE_COORD_PROG_NM,
            CAST(NULL AS VARCHAR(300)) AS PYR_HEALTH_MGMT_PROG_NM,
            CAST(NULL AS VARCHAR(300)) AS PYR_HEALTH_MGMT_PROG_FLG,
            CAST(NULL AS VARCHAR(300)) AS VEN_HEALTH_MGMT_PROG_NM,
            CAST(NULL AS VARCHAR(300)) AS VEN_HEALTH_MGMT_PROG_FLG,
            CAST(NULL AS VARCHAR(300)) AS LN_OF_BUS_NM,
            CAST(NULL AS VARCHAR(300)) AS PROD_CD,
            CAST(NULL AS VARCHAR(300)) AS PROD_SUBCAT_CD,
            CAST(NULL AS VARCHAR(300)) AS INSRNC_GRP_NBR,
            CAST(NULL AS VARCHAR(300)) AS INSRNC_GRP_NM,
            CAST(NULL AS VARCHAR(300)) AS CVG_FUNDG_CD,
            CAST(NULL AS VARCHAR(300)) AS SUB_ID,
            MEMBER_ID,
            FIRST_NAME,
            LAST_NAME,
            CAST(DOB AS VARCHAR(300)) AS DOB,
            GENDER,
            ETHNICITY,
            ADDRESS,
            ADDRESS_LINE2,
            GROUP_NAME,
            CITY,
            STATE,
            ZIP,
            PHONE,
            CAST(NULL AS VARCHAR(300)) AS PME_REFRNC_NBR,
            CAST(NULL AS VARCHAR(300)) AS PAT_RISK_SCORE_MSR,
            CAST(NULL AS VARCHAR(300)) AS PAT_DO_NOT_CALL_TXT,
            CAST(NULL AS VARCHAR(300)) AS PRIM_MARKET_NM,
            DIAGNOSIS_CODE,
            DIAGNOSIS_DESCRIPTION,
            DIAGNOSIS_CODE2,
            DIAGNOSIS_DESCRIPTION2,
            DIAGNOSIS_CODE3,
            DIAGNOSIS_DESCRIPTION3,
            CAST(NULL AS VARCHAR(300)) AS DIAG_RELATED_GRPING_CD,
            CAST(NULL AS VARCHAR(300)) AS DIAG_RELATED_GRPING_DESC,
            CAST(NULL AS VARCHAR(300)) AS PYR_AUTH_NBR,
            CAST(NULL AS VARCHAR(300)) AS PROC_CD_1,
            CAST(NULL AS VARCHAR(300)) AS PROC_CD_2,
            CAST(NULL AS VARCHAR(300)) AS PROC_CD_3,
            ORDERING_PHYSICIAN_NPI,
            ORDERING_PHYSICIAN_LAST_NAME,
            ORDERING_PHYSICIAN_FIRST_NAME,
            ORDERING_PHYSICIAN_PHONE,
            PRIMARY_PHYSICIAN_NPI,
            PRIMARY_PHYSICIAN_LAST_NAME,
            PRIMARY_PHYSICIAN_FIRST_NAME,
            PRIMARY_PHYSICIAN_PHONE,
            CAST(NULL AS VARCHAR(300)) AS CASE_MGR_FULL_NM,
            CAST(NULL AS VARCHAR(300)) AS FAC_VISIT_ID,
            FACILITY_NPI,
            FACILITY_NAME,
            CAST(NULL AS VARCHAR(300)) AS FAC_TYPE_CD,
            CAST(NULL AS VARCHAR(300)) AS FAC_SPCLTY_CAT_CD,
            CAST(ADMIT_DATE AS VARCHAR(300)) AS ADMIT_DATE,
            CAST(DISCHARGE_DATE AS VARCHAR(300)) AS DISCHARGE_DATE,
            CAST(NULL AS VARCHAR(300)) AS FAC_DSCHRG_DSPSTN_CD,
            CAST(NULL AS VARCHAR(300)) AS FAC_DSCHRG_DSPSTN_DESC,
            CAST(NULL AS VARCHAR(300)) AS READMSN_6_MONTH_CNT,
            CAST(NULL AS VARCHAR(300)) AS READMSN_12_MONTH_CNT,
            CAST(NULL AS VARCHAR(300)) AS ORIG_PAT_EVENT_ID,
            CAST(NULL AS CHAR(1)) AS BYPASS_PROG_EXCLNS_FLG,
            CAST(NULL AS VARCHAR(2000)) AS REC_TXT,
            CAST(NULL AS VARCHAR(30)) AS CRTD_USER_2,
            CAST(NULL AS TIMESTAMP (6)) AS CRTD_DT_2,
            CAST(NULL AS VARCHAR(30)) AS UPDTD_USER_2,
            CAST(NULL AS TIMESTAMP (6)) AS UPDTD_DT_2,
            CAST(NULL AS VARCHAR(300)) AS PAT_OTH_PHONE,
            CAST(NULL AS VARCHAR(300)) AS AFLTN_PROG_TXT,
            CAST(NULL AS VARCHAR(300)) AS PHYS_GRP_TXT,
            CAST(NULL AS VARCHAR(16)) AS PAT_EVENT_TM,
            CAST(NULL AS VARCHAR(16)) AS ADMIT_TM,
            CAST(NULL AS VARCHAR(16)) AS DSCHRG_TM,
            CAST(NULL AS CHAR(1)) AS STATUS_FLAG,
            CAST(NULL AS VARCHAR(2000)) AS PROCESS_COMMENT,
            CAST(NULL AS VARCHAR(20)) AS FAC_SRC_CD,
            CAST(NULL AS VARCHAR(10)) AS FAC_ADMIT_DT_FIX,
            ADMIT_DATE AS NEW_FAC_ADMIT_DT,
            CAST(NULL AS VARCHAR(10)) AS FAC_DSCHRG_DT_FIX,
            DISCHARGE_DATE AS NEW_FAC_DSCHRG_DT
          
          FROM MEDECON_PRD.WELLCARE_CENSUS_RAW
          WHERE (CAST(SUBSTR(SOURCE_NAME,8,8)AS DATE FORMAT 'MMDDYYYY') >= '03202020') OR (CAST(SUBSTR(SOURCE_NAME,8,8)AS DATE FORMAT 'MMDDYYYY') < '07222019' OR (CAST(SUBSTR(SOURCE_NAME,8,8)AS DATE FORMAT 'MMDDYYYY') <= '09012019' AND SOURCE_NAME LIKE '%WMR%'))
        --ENDREGION
        ) A

       -- QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID, NEW_FAC_ADMIT_DT ORDER BY F_FILE_CRTD_DT DESC) = 1 
      ) B
  
    --
    --
    --
  ) C
--ENDREGION
--

  UNION ALL

--
--REGION CENSUS WITH ODD DATE
  SELECT--REGION FIELDS
    F_FILE_LOG_ID
    ,F_TRADING_PARTNER_ID
    ,F_FILE_NM
    ,F_FILE_CRTD_USER_NM
    ,F_FILE_CRTD_DT
    ,F_FILE_TYPE_DESC
    ,F_REC_TOT_CNT
    ,F_REC_LOAD_CNT
    ,F_REC_BAD_CNT
    ,F_REC_DISCARD_CNT
    ,F_REC_INSRT_MAIN_CNT
    ,F_REC_UPD_MAIN_CNT
    ,F_REC_INSRT_HIST_CNT
    ,F_REC_ERR_CNT
    ,F_REC_IGNORE_CNT
    ,F_LOAD_STAT_CD
    ,F_LOAD_STRT_DT
    ,F_LOAD_END_DT
    ,F_LOAD_ERR_DESC
    ,F_CRTD_USER
    ,F_CRTD_DT
    ,F_UPDTD_USER
    ,F_UPDTD_DT
    ,PAT_EVENT_STAGE_ID
    ,FILE_LOG_ID
    ,PYR_NM
    ,REC_NBR
    ,REC_SRC_CD
    ,ORIG_REC_SRC_CD
    ,PAT_EVENT_TYPE_CD
    ,PAT_EVENT_DT
    ,CARE_COORD_PROG_NM
    ,PYR_HEALTH_MGMT_PROG_NM
    ,PYR_HEALTH_MGMT_PROG_FLG
    ,VEN_HEALTH_MGMT_PROG_NM
    ,VEN_HEALTH_MGMT_PROG_FLG
    ,LN_OF_BUS_NM
    ,PROD_CD
    ,PROD_SUBCAT_CD
    ,INSRNC_GRP_NBR
    ,INSRNC_GRP_NM
    ,CVG_FUNDG_CD
    ,SUB_ID
    ,MBR_ID
    ,PAT_FIRST_NM
    ,PAT_LAST_NM
    ,PAT_DOB
    ,PAT_GENDER
    ,PAT_RACE
    ,PAT_ADDR1
    ,PAT_ADDR2
    ,PAT_CNTY
    ,PAT_CITY
    ,PAT_ST
    ,PAT_ZIP
    ,PAT_PHONE
    ,PME_REFRNC_NBR
    ,PAT_RISK_SCORE_MSR
    ,PAT_DO_NOT_CALL_TXT
    ,PRIM_MARKET_NM
    ,DIAG_CD_1
    ,DIAG_DESC_1
    ,DIAG_CD_2
    ,DIAG_DESC_2
    ,DIAG_CD_3
    ,DIAG_DESC_3
    ,DIAG_RELATED_GRPING_CD
    ,DIAG_RELATED_GRPING_DESC
    ,PYR_AUTH_NBR
    ,PROC_CD_1
    ,PROC_CD_2
    ,PROC_CD_3
    ,ORDG_PHYS_NPI
    ,ORDG_PHYS_LAST_NM
    ,ORDG_PHYS_FIRST_NM
    ,ORDG_PHYS_PHONE
    ,PRIM_CARE_PHYS_NPI
    ,PRIM_CARE_PHYS_LAST_NM
    ,PRIM_CARE_PHYS_FIRST_NM
    ,PRIM_CARE_PHYS_PHONE
    ,CASE_MGR_FULL_NM
    ,FAC_VISIT_ID
    ,FAC_NPI
    ,FAC_NM
    ,FAC_TYPE_CD
    ,FAC_SPCLTY_CAT_CD
    ,FACILITY_ADMIT_DATE_NEW AS FAC_ADMIT_DT
    ,FACILITY_DISCHARGE_DATE_NEW AS FAC_DSCHRG_DT
    ,NO_DISCHARGE_FLAG
    ,FAC_DSCHRG_DSPSTN_CD
    ,FAC_DSCHRG_DSPSTN_DESC
    ,READMSN_6_MONTH_CNT
    ,READMSN_12_MONTH_CNT
    ,ORIG_PAT_EVENT_ID
    ,BYPASS_PROG_EXCLNS_FLG
    ,REC_TXT
    ,CRTD_USER
    ,CRTD_DT
    ,UPDTD_USER
    ,UPDTD_DT
    ,PAT_OTH_PHONE
    ,AFLTN_PROG_TXT
    ,PHYS_GRP_TXT
    ,PAT_EVENT_TM
    ,ADMIT_TM
    ,DSCHRG_TM
    ,STATUS_FLAG
    ,PROCESS_COMMENT
    ,FAC_SRC_CD
    ,CAST(NULL AS VARCHAR(5)) AS ADT_VENDOR
    ,FIRST_CREATED_DATE
    --ENDREGION
  FROM  
  (  
      SELECT
        B.*
        ,CASE
          WHEN (FACILITY_ADMIT_DATE - FIRST_VALUE(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
            THEN MIN(FACILITY_ADMIT_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
          ELSE FACILITY_ADMIT_DATE
        END AS FACILITY_ADMIT_DATE_NEW
        ,CASE
          WHEN (FACILITY_ADMIT_DATE - FIRST_VALUE(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
            THEN MAX(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
          ELSE FACILITY_DISCHARGE_DATE
        END AS FACILITY_DISCHARGE_DATE_NEW
        ,CASE
          WHEN (FACILITY_ADMIT_DATE - FIRST_VALUE(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
            THEN MIN(FIRST_CREATED_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
          ELSE FIRST_CREATED_DATE
        END AS FIRST_CREATED_DATE_NEW
      FROM
      (
        SELECT --REGION FIELDS
          F_FILE_LOG_ID,
          F_TRADING_PARTNER_ID,
          F_FILE_NM,
          F_FILE_CRTD_USER_NM,
          F_FILE_CRTD_DT,
          F_FILE_TYPE_DESC,
          F_REC_TOT_CNT,
          F_REC_LOAD_CNT,
          F_REC_BAD_CNT,
          F_REC_DISCARD_CNT,
          F_REC_INSRT_MAIN_CNT,
          F_REC_UPD_MAIN_CNT,
          F_REC_INSRT_HIST_CNT,
          F_REC_ERR_CNT,
          F_REC_IGNORE_CNT,
          F_LOAD_STAT_CD,
          F_LOAD_STRT_DT,
          F_LOAD_END_DT,
          F_LOAD_ERR_DESC,
          F_CRTD_USER,
          F_CRTD_DT,
          F_UPDTD_USER,
          F_UPDTD_DT
          ,PAT_EVENT_STAGE_ID
          ,FILE_LOG_ID
          ,PYR_NM
          ,REC_NBR
          ,REC_SRC_CD
          ,ORIG_REC_SRC_CD
          ,PAT_EVENT_TYPE_CD
          ,PAT_EVENT_DT
          ,CARE_COORD_PROG_NM
          ,PYR_HEALTH_MGMT_PROG_NM
          ,PYR_HEALTH_MGMT_PROG_FLG
          ,VEN_HEALTH_MGMT_PROG_NM
          ,VEN_HEALTH_MGMT_PROG_FLG
          ,LN_OF_BUS_NM
          ,PROD_CD
          ,PROD_SUBCAT_CD
          ,INSRNC_GRP_NBR
          ,INSRNC_GRP_NM
          ,CVG_FUNDG_CD
          ,SUB_ID
          ,MBR_ID
          ,PAT_FIRST_NM
          ,PAT_LAST_NM
          ,PAT_DOB
          ,PAT_GENDER
          ,PAT_RACE
          ,PAT_ADDR1
          ,PAT_ADDR2
          ,PAT_CNTY
          ,PAT_CITY
          ,PAT_ST
          ,PAT_ZIP
          ,PAT_PHONE
          ,PME_REFRNC_NBR
          ,PAT_RISK_SCORE_MSR
          ,PAT_DO_NOT_CALL_TXT
          ,PRIM_MARKET_NM
          ,DIAG_CD_1
          ,DIAG_DESC_1
          ,DIAG_CD_2
          ,DIAG_DESC_2
          ,DIAG_CD_3
          ,DIAG_DESC_3
          ,DIAG_RELATED_GRPING_CD
          ,DIAG_RELATED_GRPING_DESC
          ,PYR_AUTH_NBR
          ,PROC_CD_1
          ,PROC_CD_2
          ,PROC_CD_3
          ,ORDG_PHYS_NPI
          ,ORDG_PHYS_LAST_NM
          ,ORDG_PHYS_FIRST_NM
          ,ORDG_PHYS_PHONE
          ,PRIM_CARE_PHYS_NPI
          ,PRIM_CARE_PHYS_LAST_NM
          ,PRIM_CARE_PHYS_FIRST_NM
          ,PRIM_CARE_PHYS_PHONE
          ,CASE_MGR_FULL_NM
          ,FAC_VISIT_ID
          ,FAC_NPI
          ,FAC_NM
          ,FAC_TYPE_CD
          ,FAC_SPCLTY_CAT_CD
          ,FACILITY_ADMIT_DATE
          ,CASE
            WHEN FACILITY_DISCHARGE_DATE_TEMP IS NOT NULL THEN FACILITY_DISCHARGE_DATE_TEMP
            ELSE FACILITY_ADMIT_DATE + 7
          END AS FACILITY_DISCHARGE_DATE
          ,CASE
            WHEN FACILITY_DISCHARGE_DATE_TEMP IS NOT NULL THEN NULL
            ELSE 'NO DISCHARGE DATE'
          END AS NO_DISCHARGE_FLAG
          ,FAC_DSCHRG_DSPSTN_CD
          ,FAC_DSCHRG_DSPSTN_DESC
          ,READMSN_6_MONTH_CNT
          ,READMSN_12_MONTH_CNT
          ,ORIG_PAT_EVENT_ID
          ,BYPASS_PROG_EXCLNS_FLG
          ,REC_TXT
          ,CRTD_USER
          ,CRTD_DT
          ,UPDTD_USER
          ,UPDTD_DT
          ,PAT_OTH_PHONE
          ,AFLTN_PROG_TXT
          ,PHYS_GRP_TXT
          ,PAT_EVENT_TM
          ,ADMIT_TM
          ,DSCHRG_TM
          ,STATUS_FLAG
          ,PROCESS_COMMENT
          ,FAC_SRC_CD
          ,FIRST_VALUE(F_FILE_CRTD_DT) OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE ORDER BY F_FILE_CRTD_DT ASC NULLS LAST) AS FIRST_CREATED_DATE
          --ENDREGION
        FROM
        (
          SELECT  --REGION FIELDS
            F.FILE_LOG_ID AS F_FILE_LOG_ID,
            F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
            F.FILE_NM AS F_FILE_NM,
            F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
            F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
            F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
            F.REC_TOT_CNT AS F_REC_TOT_CNT,
            F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
            F.REC_BAD_CNT AS F_REC_BAD_CNT,
            F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
            F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
            F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
            F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
            F.REC_ERR_CNT AS F_REC_ERR_CNT,
            F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
            F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
            F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
            F.LOAD_END_DT AS F_LOAD_END_DT,
            F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
            F.CRTD_USER AS F_CRTD_USER,
            F.CRTD_DT AS F_CRTD_DT,
            F.UPDTD_USER AS F_UPDTD_USER,
            F.UPDTD_DT AS F_UPDTD_DT
            ,S.PAT_EVENT_STAGE_ID
            ,S.FILE_LOG_ID
            ,S.PYR_NM
            ,S.REC_NBR
            ,S.REC_SRC_CD
            ,S.ORIG_REC_SRC_CD
            ,S.PAT_EVENT_TYPE_CD
            ,S.PAT_EVENT_DT
            ,S.CARE_COORD_PROG_NM
            ,S.PYR_HEALTH_MGMT_PROG_NM
            ,S.PYR_HEALTH_MGMT_PROG_FLG
            ,S.VEN_HEALTH_MGMT_PROG_NM
            ,S.VEN_HEALTH_MGMT_PROG_FLG
            ,S.LN_OF_BUS_NM
            ,S.PROD_CD
            ,S.PROD_SUBCAT_CD
            ,S.INSRNC_GRP_NBR
            ,S.INSRNC_GRP_NM
            ,S.CVG_FUNDG_CD
            ,S.SUB_ID
            ,S.MBR_ID
            ,S.PAT_FIRST_NM
            ,S.PAT_LAST_NM
            ,S.PAT_DOB
            ,S.PAT_GENDER
            ,S.PAT_RACE
            ,S.PAT_ADDR1
            ,S.PAT_ADDR2
            ,S.PAT_CNTY
            ,S.PAT_CITY
            ,S.PAT_ST
            ,S.PAT_ZIP
            ,S.PAT_PHONE
            ,S.PME_REFRNC_NBR
            ,S.PAT_RISK_SCORE_MSR
            ,S.PAT_DO_NOT_CALL_TXT
            ,S.PRIM_MARKET_NM
            ,S.DIAG_CD_1
            ,S.DIAG_DESC_1
            ,S.DIAG_CD_2
            ,S.DIAG_DESC_2
            ,S.DIAG_CD_3
            ,S.DIAG_DESC_3
            ,S.DIAG_RELATED_GRPING_CD
            ,S.DIAG_RELATED_GRPING_DESC
            ,S.PYR_AUTH_NBR
            ,S.PROC_CD_1
            ,S.PROC_CD_2
            ,S.PROC_CD_3
            ,S.ORDG_PHYS_NPI
            ,S.ORDG_PHYS_LAST_NM
            ,S.ORDG_PHYS_FIRST_NM
            ,S.ORDG_PHYS_PHONE
            ,S.PRIM_CARE_PHYS_NPI
            ,S.PRIM_CARE_PHYS_LAST_NM
            ,S.PRIM_CARE_PHYS_FIRST_NM
            ,S.PRIM_CARE_PHYS_PHONE
            ,S.CASE_MGR_FULL_NM
            ,S.FAC_VISIT_ID
            ,S.FAC_NPI
            ,S.FAC_NM
            ,S.FAC_TYPE_CD
            ,S.FAC_SPCLTY_CAT_CD
            ,S.FAC_ADMIT_DT
            ,CASE
              WHEN S.FAC_ADMIT_DT LIKE ANY ('%-Dec','%-Nov') THEN S.FAC_ADMIT_DT||'-19'
              WHEN S.FAC_ADMIT_DT = 'Dec-19' THEN '1-Dec-19'
              ELSE S.FAC_ADMIT_DT
            END AS ADMIT_PLACEHOLDER
            ,CASE
              WHEN SUBSTR(ADMIT_PLACEHOLDER,2,1) = '-' THEN '0'||ADMIT_PLACEHOLDER
              ELSE ADMIT_PLACEHOLDER
            END AS ADMIT_PLACEHOLDER2
            ,CAST(CASE
              WHEN ADMIT_PLACEHOLDER2 LIKE '%Dec%' THEN '2019-12-'||LEFT(ADMIT_PLACEHOLDER2,2)
              WHEN ADMIT_PLACEHOLDER2 LIKE '%Nov%' THEN '2019-11-'||LEFT(ADMIT_PLACEHOLDER2,2)
              ELSE NULL
            END AS DATE) AS FACILITY_ADMIT_DATE
            ,S.FAC_DSCHRG_DT
            ,CASE
              WHEN S.FAC_DSCHRG_DT LIKE ANY ('%-Dec','%-Nov') THEN S.FAC_DSCHRG_DT||'-19'
              WHEN S.FAC_DSCHRG_DT = 'Dec-19' THEN '1-Dec-19'
              ELSE S.FAC_DSCHRG_DT
            END AS ADMIT_PLACEHOLDER3
            ,CASE
              WHEN SUBSTR(ADMIT_PLACEHOLDER3,2,1) = '-' THEN '0'||ADMIT_PLACEHOLDER3
              ELSE ADMIT_PLACEHOLDER3
            END AS ADMIT_PLACEHOLDER4
            ,CAST(CASE
              WHEN ADMIT_PLACEHOLDER4 LIKE '%Dec%' THEN '2019-12-'||LEFT(ADMIT_PLACEHOLDER4,2)
              WHEN ADMIT_PLACEHOLDER4 LIKE '%Nov%' THEN '2019-11-'||LEFT(ADMIT_PLACEHOLDER4,2)
              ELSE NULL
            END AS DATE) AS FACILITY_DISCHARGE_DATE_TEMP
            ,S.FAC_DSCHRG_DSPSTN_CD
            ,S.FAC_DSCHRG_DSPSTN_DESC
            ,S.READMSN_6_MONTH_CNT
            ,S.READMSN_12_MONTH_CNT
            ,S.ORIG_PAT_EVENT_ID
            ,S.BYPASS_PROG_EXCLNS_FLG
            ,S.REC_TXT
            ,S.CRTD_USER
            ,S.CRTD_DT
            ,S.UPDTD_USER
            ,S.UPDTD_DT
            ,S.PAT_OTH_PHONE
            ,S.AFLTN_PROG_TXT
            ,S.PHYS_GRP_TXT
            ,S.PAT_EVENT_TM
            ,S.ADMIT_TM
            ,S.DSCHRG_TM
            ,S.STATUS_FLAG
            ,S.PROCESS_COMMENT
            ,S.FAC_SRC_CD

            --ENDREGION
          FROM 
          (
            SELECT *
            FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
            WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
              AND FILE_TYPE_DESC LIKE '%CEN%'
          ) F
          JOIN 
          (
            SELECT *
            FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
            WHERE (PAT_EVENT_TYPE_CD IS NULL OR PAT_EVENT_TYPE_CD = 'SNF')
              AND FAC_ADMIT_DT NOT LIKE '%/%'
              AND FAC_ADMIT_DT NOT IN ('ADMIT_DATE_DT','Continued Stay Review Indicator','NULL')
          ) S
            ON F.FILE_LOG_ID = S.FILE_LOG_ID
        ) A
       -- QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE ORDER BY F_FILE_CRTD_DT DESC) = 1
      )B
  )C
--ENDREGION
--

) E
--QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID, FAC_ADMIT_DT ORDER BY F_FILE_CRTD_DT DESC) = 1 

UNION ALL

--
--REGION ADT
SELECT A.*

FROM
(
--REGION WHOLE CODE
--REGION ALL ADMIT WITH DISCHARGE
  SELECT
  --REGION
    F_FILE_LOG_ID
    ,F_TRADING_PARTNER_ID
    ,F_FILE_NM
    ,F_FILE_CRTD_USER_NM
    ,F_FILE_CRTD_DT
    ,F_FILE_TYPE_DESC
    ,F_REC_TOT_CNT
    ,F_REC_LOAD_CNT
    ,F_REC_BAD_CNT
    ,F_REC_DISCARD_CNT
    ,F_REC_INSRT_MAIN_CNT
    ,F_REC_UPD_MAIN_CNT
    ,F_REC_INSRT_HIST_CNT
    ,F_REC_ERR_CNT
    ,F_REC_IGNORE_CNT
    ,F_LOAD_STAT_CD
    ,F_LOAD_STRT_DT
    ,F_LOAD_END_DT
    ,F_LOAD_ERR_DESC
    ,F_CRTD_USER
    ,F_CRTD_DT
    ,F_UPDTD_USER
    ,F_UPDTD_DT
    ,PAT_EVENT_STAGE_ID
    ,FILE_LOG_ID
    ,PYR_NM
    ,REC_NBR
    ,REC_SRC_CD
    ,ORIG_REC_SRC_CD
    ,PAT_EVENT_TYPE_CD
    ,PAT_EVENT_DT
    ,CARE_COORD_PROG_NM
    ,PYR_HEALTH_MGMT_PROG_NM
    ,PYR_HEALTH_MGMT_PROG_FLG
    ,VEN_HEALTH_MGMT_PROG_NM
    ,VEN_HEALTH_MGMT_PROG_FLG
    ,LN_OF_BUS_NM
    ,PROD_CD
    ,PROD_SUBCAT_CD
    ,INSRNC_GRP_NBR
    ,INSRNC_GRP_NM
    ,CVG_FUNDG_CD
    ,SUB_ID
    ,MBR_ID
    ,PAT_FIRST_NM
    ,PAT_LAST_NM
    ,PAT_DOB
    ,PAT_GENDER
    ,PAT_RACE
    ,PAT_ADDR1
    ,PAT_ADDR2
    ,PAT_CNTY
    ,PAT_CITY
    ,PAT_ST
    ,PAT_ZIP
    ,PAT_PHONE
    ,PME_REFRNC_NBR
    ,PAT_RISK_SCORE_MSR
    ,PAT_DO_NOT_CALL_TXT
    ,PRIM_MARKET_NM
    ,DIAG_CD_1
    ,DIAG_DESC_1
    ,DIAG_CD_2
    ,DIAG_DESC_2
    ,DIAG_CD_3
    ,DIAG_DESC_3
    ,DIAG_RELATED_GRPING_CD
    ,DIAG_RELATED_GRPING_DESC
    ,PYR_AUTH_NBR
    ,PROC_CD_1
    ,PROC_CD_2
    ,PROC_CD_3
    ,ORDG_PHYS_NPI
    ,ORDG_PHYS_LAST_NM
    ,ORDG_PHYS_FIRST_NM
    ,ORDG_PHYS_PHONE
    ,PRIM_CARE_PHYS_NPI
    ,PRIM_CARE_PHYS_LAST_NM
    ,PRIM_CARE_PHYS_FIRST_NM
    ,PRIM_CARE_PHYS_PHONE
    ,CASE_MGR_FULL_NM
    ,FAC_VISIT_ID
    ,FAC_NPI
    ,FAC_NM
    ,FAC_TYPE_CD
    ,FAC_SPCLTY_CAT_CD
    ,FAC_ADMIT_DT
    ,CASE
      WHEN FAC_DSCHRG_DT IS NULL THEN FAC_ADMIT_DT+7
      ELSE FAC_DSCHRG_DT
    END AS FAC_DSCHRG_DT
    ,CASE
      WHEN FAC_DSCHRG_DT IS NULL THEN 'NO DISCHARGE DATE'
      ELSE NULL
    END AS DISCHARGE_CHECK
    ,FAC_DSCHRG_DSPSTN_CD
    ,FAC_DSCHRG_DSPSTN_DESC
    ,READMSN_6_MONTH_CNT
    ,READMSN_12_MONTH_CNT
    ,ORIG_PAT_EVENT_ID
    ,BYPASS_PROG_EXCLNS_FLG
    ,REC_TXT
    ,CRTD_USER
    ,CRTD_DT
    ,UPDTD_USER
    ,UPDTD_DT
    ,PAT_OTH_PHONE
    ,AFLTN_PROG_TXT
    ,PHYS_GRP_TXT
    ,PAT_EVENT_TM
    ,ADMIT_TM
    ,DSCHRG_TM
    ,STATUS_FLAG
    ,PROCESS_COMMENT
    ,FAC_SRC_CD
    ,CASE
      WHEN NEW_ADT IN ('AI/MISC','MISC/AI') THEN 'AI/MISC'
      WHEN NEW_ADT IN ('CP/MISC','MISC/CP') THEN 'CP/MISC'
      WHEN NEW_ADT IN ('CP/SES','SES/CP') THEN 'CP/SES'
      WHEN NEW_ADT IN ('PP/MISC','MISC/PP') THEN 'PP/MISC'
      WHEN NEW_ADT IN ('SES/MISC','MISC/SES') THEN 'SES/MISC'
      ELSE NEW_ADT
    END AS ADT_VENDOR
    ,FIRST_CREATION_DATE
  --ENDREGION  
  FROM
  (
    SELECT
      A.*
      ,FIRST_VALUE(ADT_VENDOR) OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS PREVIOUS_ADT
      ,FIRST_VALUE(ADT_VENDOR) OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS NEXT_ADT
      ,CASE 
        WHEN PREVIOUS_ADT IS NOT NULL THEN
          CASE WHEN PREVIOUS_ADT <> ADT_VENDOR THEN PREVIOUS_ADT||'/'||ADT_VENDOR ELSE ADT_VENDOR END
        WHEN NEXT_ADT IS NOT NULL THEN
          CASE WHEN NEXT_ADT <> ADT_VENDOR THEN PREVIOUS_ADT||'/'||ADT_VENDOR ELSE ADT_VENDOR END
        ELSE ADT_VENDOR
      END AS NEW_ADT
    FROM
    (
      --
      --
      --
      SELECT
        A.*
        ,MIN(F_FILE_CRTD_DT) OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW) AS FIRST_CREATION_DATE
      
      FROM
      (
        SELECT
          A.*
          ,CASE
            WHEN (FAC_ADMIT_DT - FIRST_VALUE(FAC_DSCHRG_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
              THEN MIN(FAC_ADMIT_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
            ELSE FAC_ADMIT_DT
          END AS FACILITY_ADMIT_DATE_NEW
          ,CASE
            WHEN (FAC_ADMIT_DT - FIRST_VALUE(FAC_DSCHRG_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
              THEN MAX(FAC_DSCHRG_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
            ELSE FAC_DSCHRG_DT
          END AS FACILITY_DISCHARGE_DATE_NEW
        FROM
        (
          SELECT
          --REGION
            Z.F_FILE_LOG_ID
            ,Z.F_TRADING_PARTNER_ID
            ,Z.F_FILE_NM
            ,Z.F_FILE_CRTD_USER_NM
            ,Z.F_FILE_CRTD_DT
            ,Z.F_FILE_TYPE_DESC
            ,Z.F_REC_TOT_CNT
            ,Z.F_REC_LOAD_CNT
            ,Z.F_REC_BAD_CNT
            ,Z.F_REC_DISCARD_CNT
            ,Z.F_REC_INSRT_MAIN_CNT
            ,Z.F_REC_UPD_MAIN_CNT
            ,Z.F_REC_INSRT_HIST_CNT
            ,Z.F_REC_ERR_CNT
            ,Z.F_REC_IGNORE_CNT
            ,Z.F_LOAD_STAT_CD
            ,Z.F_LOAD_STRT_DT
            ,Z.F_LOAD_END_DT
            ,Z.F_LOAD_ERR_DESC
            ,Z.F_CRTD_USER
            ,Z.F_CRTD_DT
            ,Z.F_UPDTD_USER
            ,Z.F_UPDTD_DT
            ,Z.PAT_EVENT_STAGE_ID
            ,Z.FILE_LOG_ID
            ,Z.PYR_NM
            ,Z.REC_NBR
            ,Z.REC_SRC_CD
            ,Z.ORIG_REC_SRC_CD
            ,Z.PAT_EVENT_TYPE_CD
            ,Z.PAT_EVENT_DT
            ,Z.CARE_COORD_PROG_NM
            ,Z.PYR_HEALTH_MGMT_PROG_NM
            ,Z.PYR_HEALTH_MGMT_PROG_FLG
            ,Z.VEN_HEALTH_MGMT_PROG_NM
            ,Z.VEN_HEALTH_MGMT_PROG_FLG
            ,Z.LN_OF_BUS_NM
            ,Z.PROD_CD
            ,Z.PROD_SUBCAT_CD
            ,Z.INSRNC_GRP_NBR
            ,Z.INSRNC_GRP_NM
            ,Z.CVG_FUNDG_CD
            ,Z.SUB_ID
            ,Z.MBR_ID
            ,Z.PAT_FIRST_NM
            ,Z.PAT_LAST_NM
            ,Z.PAT_DOB
            ,Z.PAT_GENDER
            ,Z.PAT_RACE
            ,Z.PAT_ADDR1
            ,Z.PAT_ADDR2
            ,Z.PAT_CNTY
            ,Z.PAT_CITY
            ,Z.PAT_ST
            ,Z.PAT_ZIP
            ,Z.PAT_PHONE
            ,Z.PME_REFRNC_NBR
            ,Z.PAT_RISK_SCORE_MSR
            ,Z.PAT_DO_NOT_CALL_TXT
            ,Z.PRIM_MARKET_NM
            ,Z.DIAG_CD_1
            ,Z.DIAG_DESC_1
            ,Z.DIAG_CD_2
            ,Z.DIAG_DESC_2
            ,Z.DIAG_CD_3
            ,Z.DIAG_DESC_3
            ,Z.DIAG_RELATED_GRPING_CD
            ,Z.DIAG_RELATED_GRPING_DESC
            ,Z.PYR_AUTH_NBR
            ,Z.PROC_CD_1
            ,Z.PROC_CD_2
            ,Z.PROC_CD_3
            ,Z.ORDG_PHYS_NPI
            ,Z.ORDG_PHYS_LAST_NM
            ,Z.ORDG_PHYS_FIRST_NM
            ,Z.ORDG_PHYS_PHONE
            ,Z.PRIM_CARE_PHYS_NPI
            ,Z.PRIM_CARE_PHYS_LAST_NM
            ,Z.PRIM_CARE_PHYS_FIRST_NM
            ,Z.PRIM_CARE_PHYS_PHONE
            ,Z.CASE_MGR_FULL_NM
            ,Z.FAC_VISIT_ID
            ,Z.FAC_NPI
            ,Z.FAC_NM
            ,Z.FAC_TYPE_CD
            ,Z.FAC_SPCLTY_CAT_CD    
            ,Z.ADMIT_DATE AS FAC_ADMIT_DT
            ,Z.DISCHARGE_DATE AS FAC_DSCHRG_DT
            ,Z.FAC_DSCHRG_DSPSTN_CD
            ,Z.FAC_DSCHRG_DSPSTN_DESC
            ,Z.READMSN_6_MONTH_CNT
            ,Z.READMSN_12_MONTH_CNT
            ,Z.ORIG_PAT_EVENT_ID
            ,Z.BYPASS_PROG_EXCLNS_FLG
            ,Z.REC_TXT
            ,Z.CRTD_USER
            ,Z.CRTD_DT
            ,Z.UPDTD_USER
            ,Z.UPDTD_DT
            ,Z.PAT_OTH_PHONE
            ,Z.AFLTN_PROG_TXT
            ,Z.PHYS_GRP_TXT
            ,Z.PAT_EVENT_TM
            ,Z.ADMIT_TM
            ,Z.DSCHRG_TM
            ,Z.STATUS_FLAG
            ,Z.PROCESS_COMMENT
            ,Z.FAC_SRC_CD
            ,Z.ADT_VENDOR
            ,Z.DISCHARGE_FILE_LOG
            --ENDREGION
          FROM
          (
            SELECT
              A.*
              ,B.FILE_LOG_ID AS DISCHARGE_FILE_LOG
              ,A.NEW_PAT_EVENT_DT AS ADMIT_DATE
              ,CASE
                WHEN A.F_FILE_CRTD_DT = MAX(A.F_FILE_CRTD_DT) OVER(PARTITION BY A.MBR_ID,B.NEW_PAT_EVENT_DT,A.ADT_VENDOR) THEN B.NEW_PAT_EVENT_DT
                ELSE NULL
              END AS DISCHARGE_DATE
            FROM
            (
            --REGION INITIAL ADMITS TO JOIN WITH DISCHARGES
              SELECT--REGION
                F.FILE_LOG_ID AS F_FILE_LOG_ID,
                F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
                F.FILE_NM AS F_FILE_NM,
                F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
                F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
                F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
                F.REC_TOT_CNT AS F_REC_TOT_CNT,
                F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
                F.REC_BAD_CNT AS F_REC_BAD_CNT,
                F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
                F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
                F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
                F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
                F.REC_ERR_CNT AS F_REC_ERR_CNT,
                F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
                F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
                F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
                F.LOAD_END_DT AS F_LOAD_END_DT,
                F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
                F.CRTD_USER AS F_CRTD_USER,
                F.CRTD_DT AS F_CRTD_DT,
                F.UPDTD_USER AS F_UPDTD_USER,
                F.UPDTD_DT AS F_UPDTD_DT,
                F.ADT_VENDOR,
                S.*,
                CASE
                  WHEN S.PAT_EVENT_DT LIKE '%Na%' THEN NULL
                  WHEN SUBSTR(S.PAT_EVENT_DT,4,1) = '/' THEN '0'||SUBSTR(S.PAT_EVENT_DT,1,2)||'0'||SUBSTR(S.PAT_EVENT_DT,3,6)
                  WHEN SUBSTR(S.PAT_EVENT_DT,2,1) = '/' THEN '0'||S.PAT_EVENT_DT
                  WHEN SUBSTR(S.PAT_EVENT_DT,5,1) = '/' THEN SUBSTR(S.PAT_EVENT_DT,1,3)||'0'||SUBSTR(S.PAT_EVENT_DT,4,6)
                  WHEN S.PAT_EVENT_DT = '01/00/1900' THEN NULL
                  ELSE S.PAT_EVENT_DT
                END AS PAT_EVENT_DT_FIX,
                CAST(CAST(CAST(TRIM(PAT_EVENT_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_PAT_EVENT_DT
                
                --ENDREGION
              FROM 
              (
                SELECT F.*
                  ,CASE
                    WHEN FILE_NM LIKE '%SES%' THEN 'SES'
                    WHEN FILE_NM LIKE '%CP%' THEN 'CP'
                    WHEN FILE_NM LIKE '%PP%' THEN 'PP'
                    WHEN FILE_NM LIKE '%AI%' THEN 'AI'
                    ELSE 'MISC'
                  END AS ADT_VENDOR
                FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
                WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
                  AND FILE_TYPE_DESC LIKE '%ADT%'
              ) F
              JOIN 
              (
                SELECT *
                FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
                WHERE PAT_EVENT_TYPE_CD LIKE 'ADMIT%'
              ) S
                ON F.FILE_LOG_ID = S.FILE_LOG_ID
                
            --  QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID,PAT_EVENT_DT,ADT_VENDOR ORDER BY F_FILE_CRTD_DT DESC) = 1
            --ENDREGION
            ) A
            LEFT JOIN 
            (
            --REGION PULLS DISCHARGE EVENT TYPES TO JOIN TO ADMITS
              SELECT
              --REGION
                F.FILE_LOG_ID AS F_FILE_LOG_ID,
                F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
                F.FILE_NM AS F_FILE_NM,
                F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
                F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
                F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
                F.REC_TOT_CNT AS F_REC_TOT_CNT,
                F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
                F.REC_BAD_CNT AS F_REC_BAD_CNT,
                F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
                F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
                F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
                F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
                F.REC_ERR_CNT AS F_REC_ERR_CNT,
                F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
                F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
                F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
                F.LOAD_END_DT AS F_LOAD_END_DT,
                F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
                F.CRTD_USER AS F_CRTD_USER,
                F.CRTD_DT AS F_CRTD_DT,
                F.UPDTD_USER AS F_UPDTD_USER,
                F.UPDTD_DT AS F_UPDTD_DT,
                F.ADT_VENDOR,
                S.*,
                --CONVERTS DATES
                CASE
                  WHEN S.PAT_EVENT_DT LIKE '%Na%' THEN NULL
                  WHEN SUBSTR(S.PAT_EVENT_DT,4,1) = '/' THEN '0'||SUBSTR(S.PAT_EVENT_DT,1,2)||'0'||SUBSTR(S.PAT_EVENT_DT,3,6)
                  WHEN SUBSTR(S.PAT_EVENT_DT,2,1) = '/' THEN '0'||S.PAT_EVENT_DT
                  WHEN SUBSTR(S.PAT_EVENT_DT,5,1) = '/' THEN SUBSTR(S.PAT_EVENT_DT,1,3)||'0'||SUBSTR(S.PAT_EVENT_DT,4,6)
                  WHEN S.PAT_EVENT_DT = '01/00/1900' THEN NULL
                  ELSE S.PAT_EVENT_DT
                END AS PAT_EVENT_DT_FIX,
                CAST(CAST(CAST(TRIM(PAT_EVENT_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_PAT_EVENT_DT
                --ENDREGION
              FROM 
              (
                SELECT F.*
                  ,CASE
                    WHEN FILE_NM LIKE '%SES%' THEN 'SES'
                    WHEN FILE_NM LIKE '%CP%' THEN 'CP'
                    WHEN FILE_NM LIKE '%PP%' THEN 'PP'
                    WHEN FILE_NM LIKE '%AI%' THEN 'AI'
                    ELSE 'MISC'
                  END AS ADT_VENDOR
                FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
                WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
                  AND FILE_TYPE_DESC LIKE '%ADT%'
              ) F
              JOIN 
              (
                SELECT *
                FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
                WHERE PAT_EVENT_TYPE_CD LIKE 'DISCHARGE%'
              ) S
                ON F.FILE_LOG_ID = S.FILE_LOG_ID
                
              --QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID,PAT_EVENT_DT,ADT_VENDOR ORDER BY F_FILE_CRTD_DT DESC) = 1
                --ENDREGION
            ) B
              ON A.MBR_ID = B.MBR_ID
                AND (A.FAC_NPI = B.FAC_NPI OR A.FAC_NM = B.FAC_NM)
                AND B.NEW_PAT_EVENT_DT - A.NEW_PAT_EVENT_DT < 60
                AND B.NEW_PAT_EVENT_DT - A.NEW_PAT_EVENT_DT > 0
        --        AND A.FAC_NPI = B.FAC_NPI --DO WE INCLUDE THIS? DROPS 11% WHEN INCLUDING NPI
                AND A.ADT_VENDOR = B.ADT_VENDOR
            --QUALIFY ROW_NUMBER() OVER(PARTITION BY A.MBR_ID,B.NEW_PAT_EVENT_DT,A.ADT_VENDOR ORDER BY A.F_FILE_CRTD_DT DESC) = 1   
          ) Z
        --  QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID,ADMIT_DATE,ADT_VENDOR ORDER BY DISCHARGE_DATE ASC) = 1 
        ) A
      ) A
      --
      --
      --
    ) A
  ) A
 -- QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW ORDER BY F_FILE_CRTD_DT DESC) = 1 
  --ENDREGION

  UNION ALL

--REGION IDENTIFIES REMAINING DISCHARGES
  SELECT
    --REGION
    S.F_FILE_LOG_ID
    ,S.F_TRADING_PARTNER_ID
    ,S.F_FILE_NM
    ,S.F_FILE_CRTD_USER_NM
    ,S.F_FILE_CRTD_DT
    ,S.F_FILE_TYPE_DESC
    ,S.F_REC_TOT_CNT
    ,S.F_REC_LOAD_CNT
    ,S.F_REC_BAD_CNT
    ,S.F_REC_DISCARD_CNT
    ,S.F_REC_INSRT_MAIN_CNT
    ,S.F_REC_UPD_MAIN_CNT
    ,S.F_REC_INSRT_HIST_CNT
    ,S.F_REC_ERR_CNT
    ,S.F_REC_IGNORE_CNT
    ,S.F_LOAD_STAT_CD
    ,S.F_LOAD_STRT_DT
    ,S.F_LOAD_END_DT
    ,S.F_LOAD_ERR_DESC
    ,S.F_CRTD_USER
    ,S.F_CRTD_DT
    ,S.F_UPDTD_USER
    ,S.F_UPDTD_DT
    ,S.PAT_EVENT_STAGE_ID
    ,S.FILE_LOG_ID
    ,S.PYR_NM
    ,S.REC_NBR
    ,S.REC_SRC_CD
    ,S.ORIG_REC_SRC_CD
    ,S.PAT_EVENT_TYPE_CD
    ,S.PAT_EVENT_DT
    ,S.CARE_COORD_PROG_NM
    ,S.PYR_HEALTH_MGMT_PROG_NM
    ,S.PYR_HEALTH_MGMT_PROG_FLG
    ,S.VEN_HEALTH_MGMT_PROG_NM
    ,S.VEN_HEALTH_MGMT_PROG_FLG
    ,S.LN_OF_BUS_NM
    ,S.PROD_CD
    ,S.PROD_SUBCAT_CD
    ,S.INSRNC_GRP_NBR
    ,S.INSRNC_GRP_NM
    ,S.CVG_FUNDG_CD
    ,S.SUB_ID
    ,S.MBR_ID
    ,S.PAT_FIRST_NM
    ,S.PAT_LAST_NM
    ,S.PAT_DOB
    ,S.PAT_GENDER
    ,S.PAT_RACE
    ,S.PAT_ADDR1
    ,S.PAT_ADDR2
    ,S.PAT_CNTY
    ,S.PAT_CITY
    ,S.PAT_ST
    ,S.PAT_ZIP
    ,S.PAT_PHONE
    ,S.PME_REFRNC_NBR
    ,S.PAT_RISK_SCORE_MSR
    ,S.PAT_DO_NOT_CALL_TXT
    ,S.PRIM_MARKET_NM
    ,S.DIAG_CD_1
    ,S.DIAG_DESC_1
    ,S.DIAG_CD_2
    ,S.DIAG_DESC_2
    ,S.DIAG_CD_3
    ,S.DIAG_DESC_3
    ,S.DIAG_RELATED_GRPING_CD
    ,S.DIAG_RELATED_GRPING_DESC
    ,S.PYR_AUTH_NBR
    ,S.PROC_CD_1
    ,S.PROC_CD_2
    ,S.PROC_CD_3
    ,S.ORDG_PHYS_NPI
    ,S.ORDG_PHYS_LAST_NM
    ,S.ORDG_PHYS_FIRST_NM
    ,S.ORDG_PHYS_PHONE
    ,S.PRIM_CARE_PHYS_NPI
    ,S.PRIM_CARE_PHYS_LAST_NM
    ,S.PRIM_CARE_PHYS_FIRST_NM
    ,S.PRIM_CARE_PHYS_PHONE
    ,S.CASE_MGR_FULL_NM
    ,S.FAC_VISIT_ID
    ,S.FAC_NPI
    ,S.FAC_NM
    ,S.FAC_TYPE_CD
    ,S.FAC_SPCLTY_CAT_CD
    ,CAST(S.FAC_ADMIT_DT AS DATE) AS FAC_ADMIT_DT
    ,NEW_PAT_EVENT_DT AS FAC_DSCHRG_DT
    ,CAST(NULL AS VARCHAR(20)) AS DISCHARGE_CHECK
    ,S.FAC_DSCHRG_DSPSTN_CD
    ,S.FAC_DSCHRG_DSPSTN_DESC
    ,S.READMSN_6_MONTH_CNT
    ,S.READMSN_12_MONTH_CNT
    ,S.ORIG_PAT_EVENT_ID
    ,S.BYPASS_PROG_EXCLNS_FLG
    ,S.REC_TXT
    ,S.CRTD_USER
    ,S.CRTD_DT
    ,S.UPDTD_USER
    ,S.UPDTD_DT
    ,S.PAT_OTH_PHONE
    ,S.AFLTN_PROG_TXT
    ,S.PHYS_GRP_TXT
    ,S.PAT_EVENT_TM
    ,S.ADMIT_TM
    ,S.DSCHRG_TM
    ,S.STATUS_FLAG
    ,S.PROCESS_COMMENT
    ,S.FAC_SRC_CD
    ,S.ADT_VENDOR
    ,CAST(NULL AS DATE) AS FIRST_CREATION_DATE
    --ENDREGION
  FROM 
  (
    SELECT 
    --REGION
      F.FILE_LOG_ID AS F_FILE_LOG_ID,
      F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
      F.FILE_NM AS F_FILE_NM,
      F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
      F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
      F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
      F.REC_TOT_CNT AS F_REC_TOT_CNT,
      F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
      F.REC_BAD_CNT AS F_REC_BAD_CNT,
      F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
      F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
      F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
      F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
      F.REC_ERR_CNT AS F_REC_ERR_CNT,
      F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
      F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
      F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
      F.LOAD_END_DT AS F_LOAD_END_DT,
      F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
      F.CRTD_USER AS F_CRTD_USER,
      F.CRTD_DT AS F_CRTD_DT,
      F.UPDTD_USER AS F_UPDTD_USER,
      F.UPDTD_DT AS F_UPDTD_DT,
      F.ADT_VENDOR
      ,S.*
      ,CASE
        WHEN S.PAT_EVENT_DT LIKE '%Na%' THEN NULL
        WHEN SUBSTR(S.PAT_EVENT_DT,4,1) = '/' THEN '0'||SUBSTR(S.PAT_EVENT_DT,1,2)||'0'||SUBSTR(S.PAT_EVENT_DT,3,6)
        WHEN SUBSTR(S.PAT_EVENT_DT,2,1) = '/' THEN '0'||S.PAT_EVENT_DT
        WHEN SUBSTR(S.PAT_EVENT_DT,5,1) = '/' THEN SUBSTR(S.PAT_EVENT_DT,1,3)||'0'||SUBSTR(S.PAT_EVENT_DT,4,6)
        WHEN S.PAT_EVENT_DT = '01/00/1900' THEN NULL
        ELSE S.PAT_EVENT_DT
      END AS PAT_EVENT_DT_FIX
      ,CAST(CAST(CAST(TRIM(PAT_EVENT_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_PAT_EVENT_DT
    --ENDREGION
    FROM 
    (
      SELECT F.*
        ,CASE
          WHEN FILE_NM LIKE '%SES%' THEN 'SES'
          WHEN FILE_NM LIKE '%CP%' THEN 'CP'
          WHEN FILE_NM LIKE '%PP%' THEN 'PP'
          WHEN FILE_NM LIKE '%AI%' THEN 'AI'
          ELSE 'MISC'
        END AS ADT_VENDOR
      FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
      WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
        AND FILE_TYPE_DESC LIKE '%ADT%'
    ) F
    JOIN 
    (
      SELECT *
      FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
      WHERE PAT_EVENT_TYPE_CD LIKE 'DISCHARGE%'
    ) S
      ON F.FILE_LOG_ID = S.FILE_LOG_ID
  ) S
  LEFT JOIN
  (
    SELECT
    --REGION
      F_FILE_LOG_ID
      ,F_TRADING_PARTNER_ID
      ,F_FILE_NM
      ,F_FILE_CRTD_USER_NM
      ,F_FILE_CRTD_DT
      ,F_FILE_TYPE_DESC
      ,F_REC_TOT_CNT
      ,F_REC_LOAD_CNT
      ,F_REC_BAD_CNT
      ,F_REC_DISCARD_CNT
      ,F_REC_INSRT_MAIN_CNT
      ,F_REC_UPD_MAIN_CNT
      ,F_REC_INSRT_HIST_CNT
      ,F_REC_ERR_CNT
      ,F_REC_IGNORE_CNT
      ,F_LOAD_STAT_CD
      ,F_LOAD_STRT_DT
      ,F_LOAD_END_DT
      ,F_LOAD_ERR_DESC
      ,F_CRTD_USER
      ,F_CRTD_DT
      ,F_UPDTD_USER
      ,F_UPDTD_DT
      ,PAT_EVENT_STAGE_ID
      ,FILE_LOG_ID
      ,PYR_NM
      ,REC_NBR
      ,REC_SRC_CD
      ,ORIG_REC_SRC_CD
      ,PAT_EVENT_TYPE_CD
      ,PAT_EVENT_DT
      ,CARE_COORD_PROG_NM
      ,PYR_HEALTH_MGMT_PROG_NM
      ,PYR_HEALTH_MGMT_PROG_FLG
      ,VEN_HEALTH_MGMT_PROG_NM
      ,VEN_HEALTH_MGMT_PROG_FLG
      ,LN_OF_BUS_NM
      ,PROD_CD
      ,PROD_SUBCAT_CD
      ,INSRNC_GRP_NBR
      ,INSRNC_GRP_NM
      ,CVG_FUNDG_CD
      ,SUB_ID
      ,MBR_ID
      ,PAT_FIRST_NM
      ,PAT_LAST_NM
      ,PAT_DOB
      ,PAT_GENDER
      ,PAT_RACE
      ,PAT_ADDR1
      ,PAT_ADDR2
      ,PAT_CNTY
      ,PAT_CITY
      ,PAT_ST
      ,PAT_ZIP
      ,PAT_PHONE
      ,PME_REFRNC_NBR
      ,PAT_RISK_SCORE_MSR
      ,PAT_DO_NOT_CALL_TXT
      ,PRIM_MARKET_NM
      ,DIAG_CD_1
      ,DIAG_DESC_1
      ,DIAG_CD_2
      ,DIAG_DESC_2
      ,DIAG_CD_3
      ,DIAG_DESC_3
      ,DIAG_RELATED_GRPING_CD
      ,DIAG_RELATED_GRPING_DESC
      ,PYR_AUTH_NBR
      ,PROC_CD_1
      ,PROC_CD_2
      ,PROC_CD_3
      ,ORDG_PHYS_NPI
      ,ORDG_PHYS_LAST_NM
      ,ORDG_PHYS_FIRST_NM
      ,ORDG_PHYS_PHONE
      ,PRIM_CARE_PHYS_NPI
      ,PRIM_CARE_PHYS_LAST_NM
      ,PRIM_CARE_PHYS_FIRST_NM
      ,PRIM_CARE_PHYS_PHONE
      ,CASE_MGR_FULL_NM
      ,FAC_VISIT_ID
      ,FAC_NPI
      ,FAC_NM
      ,FAC_TYPE_CD
      ,FAC_SPCLTY_CAT_CD
      ,FAC_ADMIT_DT
      ,CASE
        WHEN FAC_DSCHRG_DT IS NULL THEN FAC_ADMIT_DT+7
        ELSE FAC_DSCHRG_DT
      END AS FAC_DSCHRG_DT
      ,CASE
        WHEN FAC_DSCHRG_DT IS NULL THEN 'NO DISCHARGE DATE'
        ELSE NULL
      END AS DISCHARGE_CHECK
      ,FAC_DSCHRG_DSPSTN_CD
      ,FAC_DSCHRG_DSPSTN_DESC
      ,READMSN_6_MONTH_CNT
      ,READMSN_12_MONTH_CNT
      ,ORIG_PAT_EVENT_ID
      ,BYPASS_PROG_EXCLNS_FLG
      ,REC_TXT
      ,CRTD_USER
      ,CRTD_DT
      ,UPDTD_USER
      ,UPDTD_DT
      ,PAT_OTH_PHONE
      ,AFLTN_PROG_TXT
      ,PHYS_GRP_TXT
      ,PAT_EVENT_TM
      ,ADMIT_TM
      ,DSCHRG_TM
      ,STATUS_FLAG
      ,PROCESS_COMMENT
      ,FAC_SRC_CD
      ,CASE
        WHEN NEW_ADT IN ('AI/MISC','MISC/AI') THEN 'AI/MISC'
        WHEN NEW_ADT IN ('CP/MISC','MISC/CP') THEN 'CP/MISC'
        WHEN NEW_ADT IN ('CP/SES','SES/CP') THEN 'CP/SES'
        WHEN NEW_ADT IN ('PP/MISC','MISC/PP') THEN 'PP/MISC'
        WHEN NEW_ADT IN ('SES/MISC','MISC/SES') THEN 'SES/MISC'
        ELSE NEW_ADT
      END AS ADT_VENDOR
      --ENDREGION
    FROM
    (
      SELECT
        A.*
        ,FIRST_VALUE(ADT_VENDOR) OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS PREVIOUS_ADT
        ,FIRST_VALUE(ADT_VENDOR) OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS NEXT_ADT
        ,CASE 
          WHEN PREVIOUS_ADT IS NOT NULL THEN
            CASE WHEN PREVIOUS_ADT <> ADT_VENDOR THEN PREVIOUS_ADT||'/'||ADT_VENDOR ELSE ADT_VENDOR END
          WHEN NEXT_ADT IS NOT NULL THEN
            CASE WHEN NEXT_ADT <> ADT_VENDOR THEN PREVIOUS_ADT||'/'||ADT_VENDOR ELSE ADT_VENDOR END
          ELSE ADT_VENDOR
        END AS NEW_ADT
      FROM
      (
        SELECT
          A.*
          ,CASE
            WHEN (FAC_ADMIT_DT - FIRST_VALUE(FAC_DSCHRG_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
              THEN MIN(FAC_ADMIT_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
            ELSE FAC_ADMIT_DT
          END AS FACILITY_ADMIT_DATE_NEW
          ,CASE
            WHEN (FAC_ADMIT_DT - FIRST_VALUE(FAC_DSCHRG_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
              THEN MAX(FAC_DSCHRG_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
            ELSE FAC_DSCHRG_DT
          END AS FACILITY_DISCHARGE_DATE_NEW
        FROM
        (
          SELECT
          --REGION
            Z.F_FILE_LOG_ID
            ,Z.F_TRADING_PARTNER_ID
            ,Z.F_FILE_NM
            ,Z.F_FILE_CRTD_USER_NM
            ,Z.F_FILE_CRTD_DT
            ,Z.F_FILE_TYPE_DESC
            ,Z.F_REC_TOT_CNT
            ,Z.F_REC_LOAD_CNT
            ,Z.F_REC_BAD_CNT
            ,Z.F_REC_DISCARD_CNT
            ,Z.F_REC_INSRT_MAIN_CNT
            ,Z.F_REC_UPD_MAIN_CNT
            ,Z.F_REC_INSRT_HIST_CNT
            ,Z.F_REC_ERR_CNT
            ,Z.F_REC_IGNORE_CNT
            ,Z.F_LOAD_STAT_CD
            ,Z.F_LOAD_STRT_DT
            ,Z.F_LOAD_END_DT
            ,Z.F_LOAD_ERR_DESC
            ,Z.F_CRTD_USER
            ,Z.F_CRTD_DT
            ,Z.F_UPDTD_USER
            ,Z.F_UPDTD_DT
            ,Z.PAT_EVENT_STAGE_ID
            ,Z.FILE_LOG_ID
            ,Z.PYR_NM
            ,Z.REC_NBR
            ,Z.REC_SRC_CD
            ,Z.ORIG_REC_SRC_CD
            ,Z.PAT_EVENT_TYPE_CD
            ,Z.PAT_EVENT_DT
            ,Z.CARE_COORD_PROG_NM
            ,Z.PYR_HEALTH_MGMT_PROG_NM
            ,Z.PYR_HEALTH_MGMT_PROG_FLG
            ,Z.VEN_HEALTH_MGMT_PROG_NM
            ,Z.VEN_HEALTH_MGMT_PROG_FLG
            ,Z.LN_OF_BUS_NM
            ,Z.PROD_CD
            ,Z.PROD_SUBCAT_CD
            ,Z.INSRNC_GRP_NBR
            ,Z.INSRNC_GRP_NM
            ,Z.CVG_FUNDG_CD
            ,Z.SUB_ID
            ,Z.MBR_ID
            ,Z.PAT_FIRST_NM
            ,Z.PAT_LAST_NM
            ,Z.PAT_DOB
            ,Z.PAT_GENDER
            ,Z.PAT_RACE
            ,Z.PAT_ADDR1
            ,Z.PAT_ADDR2
            ,Z.PAT_CNTY
            ,Z.PAT_CITY
            ,Z.PAT_ST
            ,Z.PAT_ZIP
            ,Z.PAT_PHONE
            ,Z.PME_REFRNC_NBR
            ,Z.PAT_RISK_SCORE_MSR
            ,Z.PAT_DO_NOT_CALL_TXT
            ,Z.PRIM_MARKET_NM
            ,Z.DIAG_CD_1
            ,Z.DIAG_DESC_1
            ,Z.DIAG_CD_2
            ,Z.DIAG_DESC_2
            ,Z.DIAG_CD_3
            ,Z.DIAG_DESC_3
            ,Z.DIAG_RELATED_GRPING_CD
            ,Z.DIAG_RELATED_GRPING_DESC
            ,Z.PYR_AUTH_NBR
            ,Z.PROC_CD_1
            ,Z.PROC_CD_2
            ,Z.PROC_CD_3
            ,Z.ORDG_PHYS_NPI
            ,Z.ORDG_PHYS_LAST_NM
            ,Z.ORDG_PHYS_FIRST_NM
            ,Z.ORDG_PHYS_PHONE
            ,Z.PRIM_CARE_PHYS_NPI
            ,Z.PRIM_CARE_PHYS_LAST_NM
            ,Z.PRIM_CARE_PHYS_FIRST_NM
            ,Z.PRIM_CARE_PHYS_PHONE
            ,Z.CASE_MGR_FULL_NM
            ,Z.FAC_VISIT_ID
            ,Z.FAC_NPI
            ,Z.FAC_NM
            ,Z.FAC_TYPE_CD
            ,Z.FAC_SPCLTY_CAT_CD    
            ,Z.ADMIT_DATE AS FAC_ADMIT_DT
            ,Z.DISCHARGE_DATE AS FAC_DSCHRG_DT
            ,Z.FAC_DSCHRG_DSPSTN_CD
            ,Z.FAC_DSCHRG_DSPSTN_DESC
            ,Z.READMSN_6_MONTH_CNT
            ,Z.READMSN_12_MONTH_CNT
            ,Z.ORIG_PAT_EVENT_ID
            ,Z.BYPASS_PROG_EXCLNS_FLG
            ,Z.REC_TXT
            ,Z.CRTD_USER
            ,Z.CRTD_DT
            ,Z.UPDTD_USER
            ,Z.UPDTD_DT
            ,Z.PAT_OTH_PHONE
            ,Z.AFLTN_PROG_TXT
            ,Z.PHYS_GRP_TXT
            ,Z.PAT_EVENT_TM
            ,Z.ADMIT_TM
            ,Z.DSCHRG_TM
            ,Z.STATUS_FLAG
            ,Z.PROCESS_COMMENT
            ,Z.FAC_SRC_CD
            ,Z.ADT_VENDOR
            ,Z.DISCHARGE_FILE_LOG
            --ENDREGION
          FROM
          (
            SELECT
              A.*
              ,B.FILE_LOG_ID AS DISCHARGE_FILE_LOG
              ,A.NEW_PAT_EVENT_DT AS ADMIT_DATE
              ,CASE
                WHEN A.F_FILE_CRTD_DT = MAX(A.F_FILE_CRTD_DT) OVER(PARTITION BY A.MBR_ID,B.NEW_PAT_EVENT_DT,A.ADT_VENDOR) THEN B.NEW_PAT_EVENT_DT
                ELSE NULL
              END AS DISCHARGE_DATE
            FROM
            (
            --REGION INITIAL ADMITS TO JOIN WITH DISCHARGES
              SELECT
              --REGION
                F.FILE_LOG_ID AS F_FILE_LOG_ID,
                F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
                F.FILE_NM AS F_FILE_NM,
                F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
                F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
                F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
                F.REC_TOT_CNT AS F_REC_TOT_CNT,
                F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
                F.REC_BAD_CNT AS F_REC_BAD_CNT,
                F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
                F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
                F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
                F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
                F.REC_ERR_CNT AS F_REC_ERR_CNT,
                F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
                F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
                F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
                F.LOAD_END_DT AS F_LOAD_END_DT,
                F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
                F.CRTD_USER AS F_CRTD_USER,
                F.CRTD_DT AS F_CRTD_DT,
                F.UPDTD_USER AS F_UPDTD_USER,
                F.UPDTD_DT AS F_UPDTD_DT,
                F.ADT_VENDOR,
                S.*,
                CASE
                  WHEN S.PAT_EVENT_DT LIKE '%Na%' THEN NULL
                  WHEN SUBSTR(S.PAT_EVENT_DT,4,1) = '/' THEN '0'||SUBSTR(S.PAT_EVENT_DT,1,2)||'0'||SUBSTR(S.PAT_EVENT_DT,3,6)
                  WHEN SUBSTR(S.PAT_EVENT_DT,2,1) = '/' THEN '0'||S.PAT_EVENT_DT
                  WHEN SUBSTR(S.PAT_EVENT_DT,5,1) = '/' THEN SUBSTR(S.PAT_EVENT_DT,1,3)||'0'||SUBSTR(S.PAT_EVENT_DT,4,6)
                  WHEN S.PAT_EVENT_DT = '01/00/1900' THEN NULL
                  ELSE S.PAT_EVENT_DT
                END AS PAT_EVENT_DT_FIX,
                CAST(CAST(CAST(TRIM(PAT_EVENT_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_PAT_EVENT_DT
                
                --ENDREGION
              FROM 
              (
                SELECT F.*
                  ,CASE
                    WHEN FILE_NM LIKE '%SES%' THEN 'SES'
                    WHEN FILE_NM LIKE '%CP%' THEN 'CP'
                    WHEN FILE_NM LIKE '%PP%' THEN 'PP'
                    WHEN FILE_NM LIKE '%AI%' THEN 'AI'
                    ELSE 'MISC'
                  END AS ADT_VENDOR
                FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
                WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
                  AND FILE_TYPE_DESC LIKE '%ADT%'
              ) F
              JOIN 
              (
                SELECT *
                FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
                WHERE PAT_EVENT_TYPE_CD LIKE 'ADMIT%'
              ) S
                ON F.FILE_LOG_ID = S.FILE_LOG_ID
                
            --  QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID,PAT_EVENT_DT,ADT_VENDOR ORDER BY F_FILE_CRTD_DT DESC) = 1
            --ENDREGION
            ) A
            LEFT JOIN 
            (
            --REGION PULLS DISCHARGE EVENT TYPES TO JOIN TO ADMITS
              SELECT
              --REGION
                F.FILE_LOG_ID AS F_FILE_LOG_ID,
                F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
                F.FILE_NM AS F_FILE_NM,
                F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
                F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
                F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
                F.REC_TOT_CNT AS F_REC_TOT_CNT,
                F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
                F.REC_BAD_CNT AS F_REC_BAD_CNT,
                F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
                F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
                F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
                F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
                F.REC_ERR_CNT AS F_REC_ERR_CNT,
                F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
                F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
                F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
                F.LOAD_END_DT AS F_LOAD_END_DT,
                F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
                F.CRTD_USER AS F_CRTD_USER,
                F.CRTD_DT AS F_CRTD_DT,
                F.UPDTD_USER AS F_UPDTD_USER,
                F.UPDTD_DT AS F_UPDTD_DT,
                F.ADT_VENDOR,
                S.*,
                --CONVERTS DATES
                CASE
                  WHEN S.PAT_EVENT_DT LIKE '%Na%' THEN NULL
                  WHEN SUBSTR(S.PAT_EVENT_DT,4,1) = '/' THEN '0'||SUBSTR(S.PAT_EVENT_DT,1,2)||'0'||SUBSTR(S.PAT_EVENT_DT,3,6)
                  WHEN SUBSTR(S.PAT_EVENT_DT,2,1) = '/' THEN '0'||S.PAT_EVENT_DT
                  WHEN SUBSTR(S.PAT_EVENT_DT,5,1) = '/' THEN SUBSTR(S.PAT_EVENT_DT,1,3)||'0'||SUBSTR(S.PAT_EVENT_DT,4,6)
                  WHEN S.PAT_EVENT_DT = '01/00/1900' THEN NULL
                  ELSE S.PAT_EVENT_DT
                END AS PAT_EVENT_DT_FIX,
                CAST(CAST(CAST(TRIM(PAT_EVENT_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_PAT_EVENT_DT
                --ENDREGION
              FROM 
              (
                SELECT F.*
                  ,CASE
                    WHEN FILE_NM LIKE '%SES%' THEN 'SES'
                    WHEN FILE_NM LIKE '%CP%' THEN 'CP'
                    WHEN FILE_NM LIKE '%PP%' THEN 'PP'
                    WHEN FILE_NM LIKE '%AI%' THEN 'AI'
                    ELSE 'MISC'
                  END AS ADT_VENDOR
                FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
                WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
                  AND FILE_TYPE_DESC LIKE '%ADT%'
              ) F
              JOIN 
              (
                SELECT *
                FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
                WHERE PAT_EVENT_TYPE_CD LIKE 'DISCHARGE%'
              ) S
                ON F.FILE_LOG_ID = S.FILE_LOG_ID
                
             -- QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID,PAT_EVENT_DT,ADT_VENDOR ORDER BY F_FILE_CRTD_DT DESC) = 1
                --ENDREGION
            ) B
              ON A.MBR_ID = B.MBR_ID
                AND (A.FAC_NPI = B.FAC_NPI OR A.FAC_NM = B.FAC_NM)
                AND B.NEW_PAT_EVENT_DT - A.NEW_PAT_EVENT_DT < 60
                AND B.NEW_PAT_EVENT_DT - A.NEW_PAT_EVENT_DT > 0
        --        AND A.FAC_NPI = B.FAC_NPI --DO WE INCLUDE THIS? DROPS 11% WHEN INCLUDING NPI
                AND A.ADT_VENDOR = B.ADT_VENDOR
        --    QUALIFY ROW_NUMBER() OVER(PARTITION BY A.MBR_ID,B.NEW_PAT_EVENT_DT,A.ADT_VENDOR ORDER BY A.F_FILE_CRTD_DT DESC) = 1   
          ) Z
          --QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID,ADMIT_DATE,ADT_VENDOR ORDER BY DISCHARGE_DATE ASC) = 1 
        ) A
      ) A
    ) A
   -- QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW ORDER BY F_FILE_CRTD_DT DESC) = 1 
  ) B
    ON S.PAT_EVENT_TYPE_CD LIKE 'DISCHARGE%'
      AND S.FILE_LOG_ID = B.FILE_LOG_ID
      
  WHERE B.FILE_LOG_ID IS NULL
--ENDREGION
--ENDREGION
) A 


--ENDREGION
--
) CONSO
--ENDREGION

  )F
  LEFT JOIN MEDECON_PRD.PAC_ADT_MISSING_NPI P
    ON F.FAC_NM = P.FAC_NM
)F

--LISTED FACILITY JOINS
LEFT JOIN MEDECON_PRD.NPI_CONSOLIDATION N
  ON TRIM(F.FAC_NPI_FIX) = TRIM(N.UNIQUE_NPI)
LEFT JOIN EIW_PRD.NPPES_NPI_TAXONOMY T
  ON N.UNIQUE_NPI = T.NPI
LEFT JOIN EIW_PRD.NPPES_NPI_DEMOGRAPHIC D
  ON N.UNIQUE_NPI = D.NPI
LEFT JOIN MEDECON_PRD.TXNMY_ROLLUP TR
  ON T.TXNMY_CD = TR.TXNMY_CD

--ORIGINATING FACILITY JOINS
LEFT JOIN MEDECON_PRD.NPI_CONSOLIDATION C
  ON TRIM(F.ORDG_PHYS_NPI) = TRIM(C.UNIQUE_NPI)
LEFT JOIN EIW_PRD.NPPES_NPI_TAXONOMY TA
  ON C.UNIQUE_NPI = TA.NPI
LEFT JOIN EIW_PRD.NPPES_NPI_DEMOGRAPHIC DA
  ON C.UNIQUE_NPI = DA.NPI
LEFT JOIN MEDECON_PRD.TXNMY_ROLLUP TRA
  ON TA.TXNMY_CD = TRA.TXNMY_CD

--PRIMARY CARE PHYSICIAN JOINS
LEFT JOIN MEDECON_PRD.NPI_CONSOLIDATION O
  ON TRIM(F.PRIM_CARE_PHYS_NPI) = TRIM(O.UNIQUE_NPI)
LEFT JOIN EIW_PRD.NPPES_NPI_TAXONOMY TB
  ON O.UNIQUE_NPI = TB.NPI
LEFT JOIN EIW_PRD.NPPES_NPI_DEMOGRAPHIC DB
  ON O.UNIQUE_NPI = DB.NPI
LEFT JOIN MEDECON_PRD.TXNMY_ROLLUP TRB
  ON TB.TXNMY_CD = TRB.TXNMY_CD

--WHERE F_FILE_CRTD_DT >= '2019-12-12'

GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119

--REMOVES FAKE TEST LINES
WHERE PAT_FIRST_NM NOT LIKE 'XX%' OR PAT_FIRST_NM IS NULL

--QUALIFY ROW_NUMBER() OVER (PARTITION BY SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST,FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC) = 1

);
-- MEDECON_PRD.PAC_ADT_CENSUS_RAW_QUERY source

create or REPLACE VIEW MEDECON_PRD.PAC_ADT_CENSUS_RAW_QUERY AS(
  
SELECT 
  F.*,
  --REGION TYPE & MARKET
  CASE
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%CENSUS%' THEN 'WC_CEN'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACADTI%' THEN 'WC_ADT'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACAIFLADTI%' THEN 'WC_AI'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACCPADTI%' THEN 'WC_CP'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACCPI%' THEN 'WC_CP'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACPPADTI%' THEN 'WC_PP'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESARADTI%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESIAR%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESIKY%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESILA%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESINY%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESITN%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESITX%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESKYADTI%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESLAADTI%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESNYADTI%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESTNADTI%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESTXADTI%' THEN 'WC_SES'
  WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%pp%' THEN 'WC_PP'
  ELSE 'OTHER'
  END AS SOURCE,
  --CASE
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACAIFLADTI%' THEN 'FL'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESARADTI%' THEN 'AR'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESIAR%' THEN 'AR'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESIKY%' THEN 'KY'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESILA%' THEN 'LA'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESINY%' THEN 'NY'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESITN%' THEN 'TN'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESITX%' THEN 'TX'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESKYADTI%' THEN 'KY'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESLAADTI%' THEN 'LA'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESNYADTI%' THEN 'NY'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESTNADTI%' THEN 'TN'
  --WHEN regexp_replace(F_FILE_NM,'[^A-Za-z]','') LIKE '%WCPPACSESTXADTI%' THEN 'TX'
  --ELSE NULL
  --END AS MARKET,
  PAT_ST AS MARKET,
  CASE
  WHEN F_FILE_TYPE_DESC LIKE '%CEN%' THEN 'CEN'
  WHEN F_FILE_TYPE_DESC LIKE '%ADT%' THEN 'ADT'
  ELSE 'OTHER'
  END AS SOURCE_TYPE,
  --ENDREGION TYPE & MARKET
  N.COMMON_NPI AS N_COMMON_NPI,
  C.COMMON_NPI AS C_COMMON_NPI,
  O.COMMON_NPI AS O_COMMON_NPI,
  MAX(TR.ACUITY) AS MAX_TR_ACUITY,
  MAX(TRA.ACUITY)AS MAX_TRA_ACUITY,
  MAX(TRB.ACUITY) AS MAX_TRB_ACUITY,
  CASE 
    WHEN (MAX(ZEROIFNULL(TR.ACUITY)) > MAX(ZEROIFNULL(TRA.ACUITY)) AND MAX(ZEROIFNULL(TR.ACUITY)) > MAX(ZEROIFNULL(TRB.ACUITY))) THEN MAX(ZEROIFNULL(TR.ACUITY))
    WHEN MAX(ZEROIFNULL(TRA.ACUITY)) > MAX(ZEROIFNULL(TRB.ACUITY)) THEN MAX(ZEROIFNULL(TRA.ACUITY))
    ELSE MAX(ZEROIFNULL(TRB.ACUITY))
  END AS MAX_ACUITY,
  CASE 
    WHEN MAX(TR.ACUITY) = 1 THEN N.COMMON_NPI
    WHEN MAX(TRA.ACUITY) = 1 THEN C.COMMON_NPI
    WHEN MAX(TRB.ACUITY) = 1 THEN O.COMMON_NPI
    WHEN MAX(TR.ACUITY) = 2 THEN N.COMMON_NPI
    WHEN MAX(TRA.ACUITY) = 2 THEN C.COMMON_NPI
    WHEN MAX(TRB.ACUITY) = 2 THEN O.COMMON_NPI
    WHEN MAX(TR.ACUITY) = 3 THEN N.COMMON_NPI
    WHEN MAX(TRA.ACUITY) = 3 THEN C.COMMON_NPI
    WHEN MAX(TRB.ACUITY) = 3 THEN O.COMMON_NPI
    WHEN MAX(TR.ACUITY) = 4 THEN N.COMMON_NPI
    WHEN MAX(TRA.ACUITY) = 4 THEN C.COMMON_NPI
    WHEN MAX(TRB.ACUITY) = 4 THEN O.COMMON_NPI
    WHEN MAX(TR.ACUITY) = 5 THEN N.COMMON_NPI
    WHEN MAX(TRA.ACUITY) = 5 THEN C.COMMON_NPI
    WHEN MAX(TRB.ACUITY) = 5 THEN O.COMMON_NPI
    ELSE COALESCE(N.COMMON_NPI,C.COMMON_NPI,O.COMMON_NPI) 
  END AS COMMON_COMMON 
  
FROM
(
  SELECT
    F.*,
    COALESCE(FAC_NPI,P.NPI) AS FAC_NPI_FIX
  FROM 
  (
    --REGION FULL CENSUS/ADT CONSOLIDATION
SELECT 
  ROW_NUMBER() OVER (ORDER BY F_FILE_CRTD_DT ASC) AS ROW_NUM
  ,CONSO.* FROM(
SELECT E.* FROM(

--REGION CENSUS CLEAN DATE  
  SELECT --REGION FIELDS
    F_FILE_LOG_ID
    ,F_TRADING_PARTNER_ID
    ,F_FILE_NM
    ,F_FILE_CRTD_USER_NM
    ,F_FILE_CRTD_DT
    ,F_FILE_TYPE_DESC
    ,F_REC_TOT_CNT
    ,F_REC_LOAD_CNT
    ,F_REC_BAD_CNT
    ,F_REC_DISCARD_CNT
    ,F_REC_INSRT_MAIN_CNT
    ,F_REC_UPD_MAIN_CNT
    ,F_REC_INSRT_HIST_CNT
    ,F_REC_ERR_CNT
    ,F_REC_IGNORE_CNT
    ,F_LOAD_STAT_CD
    ,F_LOAD_STRT_DT
    ,F_LOAD_END_DT
    ,F_LOAD_ERR_DESC
    ,F_CRTD_USER
    ,F_CRTD_DT
    ,F_UPDTD_USER
    ,F_UPDTD_DT
    ,PAT_EVENT_STAGE_ID
    ,FILE_LOG_ID
    ,PYR_NM
    ,REC_NBR
    ,REC_SRC_CD
    ,ORIG_REC_SRC_CD
    ,PAT_EVENT_TYPE_CD
    ,PAT_EVENT_DT
    ,CARE_COORD_PROG_NM
    ,PYR_HEALTH_MGMT_PROG_NM
    ,PYR_HEALTH_MGMT_PROG_FLG
    ,VEN_HEALTH_MGMT_PROG_NM
    ,VEN_HEALTH_MGMT_PROG_FLG
    ,LN_OF_BUS_NM
    ,PROD_CD
    ,PROD_SUBCAT_CD
    ,INSRNC_GRP_NBR
    ,INSRNC_GRP_NM
    ,CVG_FUNDG_CD
    ,SUB_ID
    ,MBR_ID
    ,PAT_FIRST_NM
    ,PAT_LAST_NM
    ,PAT_DOB
    ,PAT_GENDER
    ,PAT_RACE
    ,PAT_ADDR1
    ,PAT_ADDR2
    ,PAT_CNTY
    ,PAT_CITY
    ,PAT_ST
    ,PAT_ZIP
    ,PAT_PHONE
    ,PME_REFRNC_NBR
    ,PAT_RISK_SCORE_MSR
    ,PAT_DO_NOT_CALL_TXT
    ,PRIM_MARKET_NM
    ,DIAG_CD_1
    ,DIAG_DESC_1
    ,DIAG_CD_2
    ,DIAG_DESC_2
    ,DIAG_CD_3
    ,DIAG_DESC_3
    ,DIAG_RELATED_GRPING_CD
    ,DIAG_RELATED_GRPING_DESC
    ,PYR_AUTH_NBR
    ,PROC_CD_1
    ,PROC_CD_2
    ,PROC_CD_3
    ,ORDG_PHYS_NPI
    ,ORDG_PHYS_LAST_NM
    ,ORDG_PHYS_FIRST_NM
    ,ORDG_PHYS_PHONE
    ,PRIM_CARE_PHYS_NPI
    ,PRIM_CARE_PHYS_LAST_NM
    ,PRIM_CARE_PHYS_FIRST_NM
    ,PRIM_CARE_PHYS_PHONE
    ,CASE_MGR_FULL_NM
    ,FAC_VISIT_ID
    ,FAC_NPI
    ,FAC_NM
    ,FAC_TYPE_CD
    ,FAC_SPCLTY_CAT_CD
    ,FACILITY_ADMIT_DATE_NEW AS FAC_ADMIT_DT
    ,FACILITY_DISCHARGE_DATE_NEW AS FAC_DSCHRG_DT
    ,NO_DISCHARGE_FLAG
    ,FAC_DSCHRG_DSPSTN_CD
    ,FAC_DSCHRG_DSPSTN_DESC
    ,READMSN_6_MONTH_CNT
    ,READMSN_12_MONTH_CNT
    ,ORIG_PAT_EVENT_ID
    ,BYPASS_PROG_EXCLNS_FLG
    ,REC_TXT
    ,CRTD_USER
    ,CRTD_DT
    ,UPDTD_USER
    ,UPDTD_DT
    ,PAT_OTH_PHONE
    ,AFLTN_PROG_TXT
    ,PHYS_GRP_TXT
    ,PAT_EVENT_TM
    ,ADMIT_TM
    ,DSCHRG_TM
    ,STATUS_FLAG
    ,PROCESS_COMMENT
    ,FAC_SRC_CD
    ,CAST(NULL AS VARCHAR(5)) AS ADT_VENDOR
    ,FIRST_CREATED_DATE
    --ENDREGION
  FROM  
  (  
       SELECT 
        B.*
        ,CASE
          WHEN (FACILITY_ADMIT_DATE - FIRST_VALUE(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
            THEN MIN(FACILITY_ADMIT_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
          ELSE FACILITY_ADMIT_DATE
        END AS FACILITY_ADMIT_DATE_NEW
        ,CASE
          WHEN (FACILITY_ADMIT_DATE - FIRST_VALUE(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
            THEN MAX(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
          ELSE FACILITY_DISCHARGE_DATE
        END AS FACILITY_DISCHARGE_DATE_NEW
        ,CASE
          WHEN (FACILITY_ADMIT_DATE - FIRST_VALUE(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
            THEN MIN(FIRST_CREATED_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
          ELSE FIRST_CREATED_DATE
        END AS FIRST_CREATED_DATE_NEW
      FROM 
      (
        SELECT --REGION FIELDS
          F_FILE_LOG_ID
          ,F_TRADING_PARTNER_ID
          ,F_FILE_NM
          ,F_FILE_CRTD_USER_NM
          ,F_FILE_CRTD_DT
          ,F_FILE_TYPE_DESC
          ,F_REC_TOT_CNT
          ,F_REC_LOAD_CNT
          ,F_REC_BAD_CNT
          ,F_REC_DISCARD_CNT
          ,F_REC_INSRT_MAIN_CNT
          ,F_REC_UPD_MAIN_CNT
          ,F_REC_INSRT_HIST_CNT
          ,F_REC_ERR_CNT
          ,F_REC_IGNORE_CNT
          ,F_LOAD_STAT_CD
          ,F_LOAD_STRT_DT
          ,F_LOAD_END_DT
          ,F_LOAD_ERR_DESC
          ,F_CRTD_USER
          ,F_CRTD_DT
          ,F_UPDTD_USER
          ,F_UPDTD_DT
          ,PAT_EVENT_STAGE_ID
          ,FILE_LOG_ID
          ,PYR_NM
          ,REC_NBR
          ,REC_SRC_CD
          ,ORIG_REC_SRC_CD
          ,PAT_EVENT_TYPE_CD
          ,PAT_EVENT_DT
          ,CARE_COORD_PROG_NM
          ,PYR_HEALTH_MGMT_PROG_NM
          ,PYR_HEALTH_MGMT_PROG_FLG
          ,VEN_HEALTH_MGMT_PROG_NM
          ,VEN_HEALTH_MGMT_PROG_FLG
          ,LN_OF_BUS_NM
          ,PROD_CD
          ,PROD_SUBCAT_CD
          ,INSRNC_GRP_NBR
          ,INSRNC_GRP_NM
          ,CVG_FUNDG_CD
          ,SUB_ID
          ,MBR_ID
          ,PAT_FIRST_NM
          ,PAT_LAST_NM
          ,PAT_DOB
          ,PAT_GENDER
          ,PAT_RACE
          ,PAT_ADDR1
          ,PAT_ADDR2
          ,PAT_CNTY
          ,PAT_CITY
          ,PAT_ST
          ,PAT_ZIP
          ,PAT_PHONE
          ,PME_REFRNC_NBR
          ,PAT_RISK_SCORE_MSR
          ,PAT_DO_NOT_CALL_TXT
          ,PRIM_MARKET_NM
          ,DIAG_CD_1
          ,DIAG_DESC_1
          ,DIAG_CD_2
          ,DIAG_DESC_2
          ,DIAG_CD_3
          ,DIAG_DESC_3
          ,DIAG_RELATED_GRPING_CD
          ,DIAG_RELATED_GRPING_DESC
          ,PYR_AUTH_NBR
          ,PROC_CD_1
          ,PROC_CD_2
          ,PROC_CD_3
          ,ORDG_PHYS_NPI
          ,ORDG_PHYS_LAST_NM
          ,ORDG_PHYS_FIRST_NM
          ,ORDG_PHYS_PHONE
          ,PRIM_CARE_PHYS_NPI
          ,PRIM_CARE_PHYS_LAST_NM
          ,PRIM_CARE_PHYS_FIRST_NM
          ,PRIM_CARE_PHYS_PHONE
          ,CASE_MGR_FULL_NM
          ,FAC_VISIT_ID
          ,FAC_NPI
          ,FAC_NM
          ,FAC_TYPE_CD
          ,FAC_SPCLTY_CAT_CD
          ,NEW_FAC_ADMIT_DT AS FACILITY_ADMIT_DATE
          ,CASE
            WHEN NEW_FAC_DSCHRG_DT IS NOT NULL THEN NEW_FAC_DSCHRG_DT
            ELSE NEW_FAC_ADMIT_DT + 7
          END AS FACILITY_DISCHARGE_DATE
          ,CASE
            WHEN NEW_FAC_DSCHRG_DT IS NOT NULL THEN NULL
            ELSE 'NO DISCHARGE DATE'
          END AS NO_DISCHARGE_FLAG
          ,FAC_DSCHRG_DSPSTN_CD
          ,FAC_DSCHRG_DSPSTN_DESC
          ,READMSN_6_MONTH_CNT
          ,READMSN_12_MONTH_CNT
          ,ORIG_PAT_EVENT_ID
          ,BYPASS_PROG_EXCLNS_FLG
          ,REC_TXT
          ,CRTD_USER
          ,CRTD_DT
          ,UPDTD_USER
          ,UPDTD_DT
          ,PAT_OTH_PHONE
          ,AFLTN_PROG_TXT
          ,PHYS_GRP_TXT
          ,PAT_EVENT_TM
          ,ADMIT_TM
          ,DSCHRG_TM
          ,STATUS_FLAG
          ,PROCESS_COMMENT
          ,FAC_SRC_CD
          ,FIRST_VALUE(F_FILE_CRTD_DT) OVER(PARTITION BY MBR_ID, NEW_FAC_ADMIT_DT ORDER BY F_FILE_CRTD_DT ASC NULLS LAST) AS FIRST_CREATED_DATE
          --ENDREGION
        FROM
        (
          SELECT --REGION FIELDS
            F.FILE_LOG_ID AS F_FILE_LOG_ID,
            F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
            F.FILE_NM AS F_FILE_NM,
            F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
            F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
            F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
            F.REC_TOT_CNT AS F_REC_TOT_CNT,
            F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
            F.REC_BAD_CNT AS F_REC_BAD_CNT,
            F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
            F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
            F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
            F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
            F.REC_ERR_CNT AS F_REC_ERR_CNT,
            F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
            F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
            F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
            F.LOAD_END_DT AS F_LOAD_END_DT,
            F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
            F.CRTD_USER AS F_CRTD_USER,
            F.CRTD_DT AS F_CRTD_DT,
            F.UPDTD_USER AS F_UPDTD_USER,
            F.UPDTD_DT AS F_UPDTD_DT,
            S.*
            ,CASE
              WHEN SUBSTR(S.FAC_ADMIT_DT,4,1) = '/' THEN '0'||SUBSTR(S.FAC_ADMIT_DT,1,2)||'0'||SUBSTR(S.FAC_ADMIT_DT,3,6)
              WHEN SUBSTR(S.FAC_ADMIT_DT,2,1) = '/' THEN '0'||S.FAC_ADMIT_DT
              WHEN SUBSTR(S.FAC_ADMIT_DT,5,1) = '/' THEN SUBSTR(S.FAC_ADMIT_DT,1,3)||'0'||SUBSTR(S.FAC_ADMIT_DT,4,6)
              ELSE S.FAC_ADMIT_DT
            END AS FAC_ADMIT_DT_FIX,
            CAST(CAST(CAST(TRIM(FAC_ADMIT_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_FAC_ADMIT_DT,
            CASE
              WHEN SUBSTR(S.FAC_DSCHRG_DT,4,1) = '/' THEN '0'||SUBSTR(S.FAC_DSCHRG_DT,1,2)||'0'||SUBSTR(S.FAC_DSCHRG_DT,3,6)
              WHEN SUBSTR(S.FAC_DSCHRG_DT,2,1) = '/' THEN '0'||S.FAC_DSCHRG_DT
              WHEN SUBSTR(S.FAC_DSCHRG_DT,5,1) = '/' THEN SUBSTR(S.FAC_DSCHRG_DT,1,3)||'0'||SUBSTR(S.FAC_DSCHRG_DT,4,6)
              ELSE S.FAC_DSCHRG_DT
            END AS FAC_DSCHRG_DT_FIX,
            CAST(CAST(CAST(TRIM(FAC_DSCHRG_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_FAC_DSCHRG_DT
            --ENDREGION
          FROM 
          (
            SELECT *
            FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
            WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
              AND FILE_TYPE_DESC LIKE '%CEN%'
          ) F
          JOIN 
          (
            SELECT *
            FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
            WHERE (PAT_EVENT_TYPE_CD IS NULL OR PAT_EVENT_TYPE_CD = 'SNF')
              AND FAC_ADMIT_DT LIKE '%/%'
              AND FAC_ADMIT_DT NOT LIKE '%15/12%'
          ) S
            ON F.FILE_LOG_ID = S.FILE_LOG_ID
            
          UNION ALL
          --REGION RAW CENSUS DATA
          SELECT 
            CAST(NULL AS DECIMAL ( 38, 0)) AS FILE_LOG_ID,
            CAST(NULL AS VARCHAR(20)) AS TRADING_PARTNER_ID,
            SOURCE_NAME,
            CAST(NULL AS VARCHAR(100)) AS FILE_CRTD_USER_NM,
            (SUBSTR(SOURCE_NAME,12,4)||SUBSTR(SOURCE_NAME,8,2)||SUBSTR(SOURCE_NAME,10,2))::date AS FILE_CRTD_DT,
            CAST('CEN' AS VARCHAR(50)) AS FILE_TYPE_DESC,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_TOT_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_LOAD_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_BAD_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_DISCARD_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_INSRT_MAIN_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_UPD_MAIN_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_INSRT_HIST_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_ERR_CNT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_IGNORE_CNT,
            CAST(NULL AS VARCHAR(20)) AS LOAD_STAT_CD,
            CAST(NULL AS TIMESTAMP (6)) AS LOAD_STRT_DT,
            CAST(NULL AS TIMESTAMP (6)) AS LOAD_END_DT,
            CAST(NULL AS VARCHAR(255)) AS LOAD_ERR_DESC,
            CAST(NULL AS VARCHAR(30)) AS CRTD_USER,
            CAST(NULL AS TIMESTAMP (6)) AS CRTD_DT,
            CAST(NULL AS VARCHAR(30)) AS UPDTD_USER,
            CAST(NULL AS TIMESTAMP (6)) AS UPDTD_DT,
            CAST(NULL AS DECIMAL ( 38, 0)) AS PAT_EVENT_STAGE_ID,
            CAST(NULL AS DECIMAL ( 38, 0)) AS FILE_LOG_ID_2,
            CAST(NULL AS VARCHAR(300)) AS PYR_NM,
            CAST(NULL AS DECIMAL ( 38, 0)) AS REC_NBR,
            CAST(NULL AS VARCHAR(3)) AS REC_SRC_CD,
            CAST(NULL AS VARCHAR(300)) AS ORIG_REC_SRC_CD,
            CAST(NULL AS VARCHAR(300)) AS PAT_EVENT_TYPE_CD,
            CAST(NULL AS VARCHAR(300)) AS PAT_EVENT_DT,
            CAST(NULL AS VARCHAR(300)) AS CARE_COORD_PROG_NM,
            CAST(NULL AS VARCHAR(300)) AS PYR_HEALTH_MGMT_PROG_NM,
            CAST(NULL AS VARCHAR(300)) AS PYR_HEALTH_MGMT_PROG_FLG,
            CAST(NULL AS VARCHAR(300)) AS VEN_HEALTH_MGMT_PROG_NM,
            CAST(NULL AS VARCHAR(300)) AS VEN_HEALTH_MGMT_PROG_FLG,
            CAST(NULL AS VARCHAR(300)) AS LN_OF_BUS_NM,
            CAST(NULL AS VARCHAR(300)) AS PROD_CD,
            CAST(NULL AS VARCHAR(300)) AS PROD_SUBCAT_CD,
            CAST(NULL AS VARCHAR(300)) AS INSRNC_GRP_NBR,
            CAST(NULL AS VARCHAR(300)) AS INSRNC_GRP_NM,
            CAST(NULL AS VARCHAR(300)) AS CVG_FUNDG_CD,
            CAST(NULL AS VARCHAR(300)) AS SUB_ID,
            MEMBER_ID,
            FIRST_NAME,
            LAST_NAME,
            CAST(DOB AS VARCHAR(300)) AS DOB,
            GENDER,
            ETHNICITY,
            ADDRESS,
            ADDRESS_LINE2,
            GROUP_NAME,
            CITY,
            STATE,
            ZIP,
            PHONE,
            CAST(NULL AS VARCHAR(300)) AS PME_REFRNC_NBR,
            CAST(NULL AS VARCHAR(300)) AS PAT_RISK_SCORE_MSR,
            CAST(NULL AS VARCHAR(300)) AS PAT_DO_NOT_CALL_TXT,
            CAST(NULL AS VARCHAR(300)) AS PRIM_MARKET_NM,
            DIAGNOSIS_CODE,
            DIAGNOSIS_DESCRIPTION,
            DIAGNOSIS_CODE2,
            DIAGNOSIS_DESCRIPTION2,
            DIAGNOSIS_CODE3,
            DIAGNOSIS_DESCRIPTION3,
            CAST(NULL AS VARCHAR(300)) AS DIAG_RELATED_GRPING_CD,
            CAST(NULL AS VARCHAR(300)) AS DIAG_RELATED_GRPING_DESC,
            CAST(NULL AS VARCHAR(300)) AS PYR_AUTH_NBR,
            CAST(NULL AS VARCHAR(300)) AS PROC_CD_1,
            CAST(NULL AS VARCHAR(300)) AS PROC_CD_2,
            CAST(NULL AS VARCHAR(300)) AS PROC_CD_3,
            ORDERING_PHYSICIAN_NPI,
            ORDERING_PHYSICIAN_LAST_NAME,
            ORDERING_PHYSICIAN_FIRST_NAME,
            ORDERING_PHYSICIAN_PHONE,
            PRIMARY_PHYSICIAN_NPI,
            PRIMARY_PHYSICIAN_LAST_NAME,
            PRIMARY_PHYSICIAN_FIRST_NAME,
            PRIMARY_PHYSICIAN_PHONE,
            CAST(NULL AS VARCHAR(300)) AS CASE_MGR_FULL_NM,
            CAST(NULL AS VARCHAR(300)) AS FAC_VISIT_ID,
            FACILITY_NPI,
            FACILITY_NAME,
            CAST(NULL AS VARCHAR(300)) AS FAC_TYPE_CD,
            CAST(NULL AS VARCHAR(300)) AS FAC_SPCLTY_CAT_CD,
            CAST(ADMIT_DATE AS VARCHAR(300)) AS ADMIT_DATE,
            CAST(DISCHARGE_DATE AS VARCHAR(300)) AS DISCHARGE_DATE,
            CAST(NULL AS VARCHAR(300)) AS FAC_DSCHRG_DSPSTN_CD,
            CAST(NULL AS VARCHAR(300)) AS FAC_DSCHRG_DSPSTN_DESC,
            CAST(NULL AS VARCHAR(300)) AS READMSN_6_MONTH_CNT,
            CAST(NULL AS VARCHAR(300)) AS READMSN_12_MONTH_CNT,
            CAST(NULL AS VARCHAR(300)) AS ORIG_PAT_EVENT_ID,
            CAST(NULL AS CHAR(1)) AS BYPASS_PROG_EXCLNS_FLG,
            CAST(NULL AS VARCHAR(2000)) AS REC_TXT,
            CAST(NULL AS VARCHAR(30)) AS CRTD_USER_2,
            CAST(NULL AS TIMESTAMP (6)) AS CRTD_DT_2,
            CAST(NULL AS VARCHAR(30)) AS UPDTD_USER_2,
            CAST(NULL AS TIMESTAMP (6)) AS UPDTD_DT_2,
            CAST(NULL AS VARCHAR(300)) AS PAT_OTH_PHONE,
            CAST(NULL AS VARCHAR(300)) AS AFLTN_PROG_TXT,
            CAST(NULL AS VARCHAR(300)) AS PHYS_GRP_TXT,
            CAST(NULL AS VARCHAR(16)) AS PAT_EVENT_TM,
            CAST(NULL AS VARCHAR(16)) AS ADMIT_TM,
            CAST(NULL AS VARCHAR(16)) AS DSCHRG_TM,
            CAST(NULL AS CHAR(1)) AS STATUS_FLAG,
            CAST(NULL AS VARCHAR(2000)) AS PROCESS_COMMENT,
            CAST(NULL AS VARCHAR(20)) AS FAC_SRC_CD,
            CAST(NULL AS VARCHAR(10)) AS FAC_ADMIT_DT_FIX,
            ADMIT_DATE AS NEW_FAC_ADMIT_DT,
            CAST(NULL AS VARCHAR(10)) AS FAC_DSCHRG_DT_FIX,
            DISCHARGE_DATE AS NEW_FAC_DSCHRG_DT
          
          FROM MEDECON_PRD.WELLCARE_CENSUS_RAW
          WHERE (CAST(SUBSTR(SOURCE_NAME,8,8)AS DATE FORMAT 'MMDDYYYY') >= '03202020') OR (CAST(SUBSTR(SOURCE_NAME,8,8)AS DATE FORMAT 'MMDDYYYY') < '07222019' OR (CAST(SUBSTR(SOURCE_NAME,8,8)AS DATE FORMAT 'MMDDYYYY') <= '09012019' AND SOURCE_NAME LIKE '%WMR%'))
        --ENDREGION
        ) A

       -- QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID, NEW_FAC_ADMIT_DT ORDER BY F_FILE_CRTD_DT DESC) = 1 
      ) B
  
    --
    --
    --
  ) C
--ENDREGION
--

  UNION ALL

--
--REGION CENSUS WITH ODD DATE
  SELECT--REGION FIELDS
    F_FILE_LOG_ID
    ,F_TRADING_PARTNER_ID
    ,F_FILE_NM
    ,F_FILE_CRTD_USER_NM
    ,F_FILE_CRTD_DT
    ,F_FILE_TYPE_DESC
    ,F_REC_TOT_CNT
    ,F_REC_LOAD_CNT
    ,F_REC_BAD_CNT
    ,F_REC_DISCARD_CNT
    ,F_REC_INSRT_MAIN_CNT
    ,F_REC_UPD_MAIN_CNT
    ,F_REC_INSRT_HIST_CNT
    ,F_REC_ERR_CNT
    ,F_REC_IGNORE_CNT
    ,F_LOAD_STAT_CD
    ,F_LOAD_STRT_DT
    ,F_LOAD_END_DT
    ,F_LOAD_ERR_DESC
    ,F_CRTD_USER
    ,F_CRTD_DT
    ,F_UPDTD_USER
    ,F_UPDTD_DT
    ,PAT_EVENT_STAGE_ID
    ,FILE_LOG_ID
    ,PYR_NM
    ,REC_NBR
    ,REC_SRC_CD
    ,ORIG_REC_SRC_CD
    ,PAT_EVENT_TYPE_CD
    ,PAT_EVENT_DT
    ,CARE_COORD_PROG_NM
    ,PYR_HEALTH_MGMT_PROG_NM
    ,PYR_HEALTH_MGMT_PROG_FLG
    ,VEN_HEALTH_MGMT_PROG_NM
    ,VEN_HEALTH_MGMT_PROG_FLG
    ,LN_OF_BUS_NM
    ,PROD_CD
    ,PROD_SUBCAT_CD
    ,INSRNC_GRP_NBR
    ,INSRNC_GRP_NM
    ,CVG_FUNDG_CD
    ,SUB_ID
    ,MBR_ID
    ,PAT_FIRST_NM
    ,PAT_LAST_NM
    ,PAT_DOB
    ,PAT_GENDER
    ,PAT_RACE
    ,PAT_ADDR1
    ,PAT_ADDR2
    ,PAT_CNTY
    ,PAT_CITY
    ,PAT_ST
    ,PAT_ZIP
    ,PAT_PHONE
    ,PME_REFRNC_NBR
    ,PAT_RISK_SCORE_MSR
    ,PAT_DO_NOT_CALL_TXT
    ,PRIM_MARKET_NM
    ,DIAG_CD_1
    ,DIAG_DESC_1
    ,DIAG_CD_2
    ,DIAG_DESC_2
    ,DIAG_CD_3
    ,DIAG_DESC_3
    ,DIAG_RELATED_GRPING_CD
    ,DIAG_RELATED_GRPING_DESC
    ,PYR_AUTH_NBR
    ,PROC_CD_1
    ,PROC_CD_2
    ,PROC_CD_3
    ,ORDG_PHYS_NPI
    ,ORDG_PHYS_LAST_NM
    ,ORDG_PHYS_FIRST_NM
    ,ORDG_PHYS_PHONE
    ,PRIM_CARE_PHYS_NPI
    ,PRIM_CARE_PHYS_LAST_NM
    ,PRIM_CARE_PHYS_FIRST_NM
    ,PRIM_CARE_PHYS_PHONE
    ,CASE_MGR_FULL_NM
    ,FAC_VISIT_ID
    ,FAC_NPI
    ,FAC_NM
    ,FAC_TYPE_CD
    ,FAC_SPCLTY_CAT_CD
    ,FACILITY_ADMIT_DATE_NEW AS FAC_ADMIT_DT
    ,FACILITY_DISCHARGE_DATE_NEW AS FAC_DSCHRG_DT
    ,NO_DISCHARGE_FLAG
    ,FAC_DSCHRG_DSPSTN_CD
    ,FAC_DSCHRG_DSPSTN_DESC
    ,READMSN_6_MONTH_CNT
    ,READMSN_12_MONTH_CNT
    ,ORIG_PAT_EVENT_ID
    ,BYPASS_PROG_EXCLNS_FLG
    ,REC_TXT
    ,CRTD_USER
    ,CRTD_DT
    ,UPDTD_USER
    ,UPDTD_DT
    ,PAT_OTH_PHONE
    ,AFLTN_PROG_TXT
    ,PHYS_GRP_TXT
    ,PAT_EVENT_TM
    ,ADMIT_TM
    ,DSCHRG_TM
    ,STATUS_FLAG
    ,PROCESS_COMMENT
    ,FAC_SRC_CD
    ,CAST(NULL AS VARCHAR(5)) AS ADT_VENDOR
    ,FIRST_CREATED_DATE
    --ENDREGION
  FROM  
  (  
      SELECT
        B.*
        ,CASE
          WHEN (FACILITY_ADMIT_DATE - FIRST_VALUE(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
            THEN MIN(FACILITY_ADMIT_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
          ELSE FACILITY_ADMIT_DATE
        END AS FACILITY_ADMIT_DATE_NEW
        ,CASE
          WHEN (FACILITY_ADMIT_DATE - FIRST_VALUE(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
            THEN MAX(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
          ELSE FACILITY_DISCHARGE_DATE
        END AS FACILITY_DISCHARGE_DATE_NEW
        ,CASE
          WHEN (FACILITY_ADMIT_DATE - FIRST_VALUE(FACILITY_DISCHARGE_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
            THEN MIN(FIRST_CREATED_DATE) OVER(PARTITION BY MBR_ID ORDER BY FACILITY_ADMIT_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
          ELSE FIRST_CREATED_DATE
        END AS FIRST_CREATED_DATE_NEW
      FROM
      (
        SELECT --REGION FIELDS
          F_FILE_LOG_ID,
          F_TRADING_PARTNER_ID,
          F_FILE_NM,
          F_FILE_CRTD_USER_NM,
          F_FILE_CRTD_DT,
          F_FILE_TYPE_DESC,
          F_REC_TOT_CNT,
          F_REC_LOAD_CNT,
          F_REC_BAD_CNT,
          F_REC_DISCARD_CNT,
          F_REC_INSRT_MAIN_CNT,
          F_REC_UPD_MAIN_CNT,
          F_REC_INSRT_HIST_CNT,
          F_REC_ERR_CNT,
          F_REC_IGNORE_CNT,
          F_LOAD_STAT_CD,
          F_LOAD_STRT_DT,
          F_LOAD_END_DT,
          F_LOAD_ERR_DESC,
          F_CRTD_USER,
          F_CRTD_DT,
          F_UPDTD_USER,
          F_UPDTD_DT
          ,PAT_EVENT_STAGE_ID
          ,FILE_LOG_ID
          ,PYR_NM
          ,REC_NBR
          ,REC_SRC_CD
          ,ORIG_REC_SRC_CD
          ,PAT_EVENT_TYPE_CD
          ,PAT_EVENT_DT
          ,CARE_COORD_PROG_NM
          ,PYR_HEALTH_MGMT_PROG_NM
          ,PYR_HEALTH_MGMT_PROG_FLG
          ,VEN_HEALTH_MGMT_PROG_NM
          ,VEN_HEALTH_MGMT_PROG_FLG
          ,LN_OF_BUS_NM
          ,PROD_CD
          ,PROD_SUBCAT_CD
          ,INSRNC_GRP_NBR
          ,INSRNC_GRP_NM
          ,CVG_FUNDG_CD
          ,SUB_ID
          ,MBR_ID
          ,PAT_FIRST_NM
          ,PAT_LAST_NM
          ,PAT_DOB
          ,PAT_GENDER
          ,PAT_RACE
          ,PAT_ADDR1
          ,PAT_ADDR2
          ,PAT_CNTY
          ,PAT_CITY
          ,PAT_ST
          ,PAT_ZIP
          ,PAT_PHONE
          ,PME_REFRNC_NBR
          ,PAT_RISK_SCORE_MSR
          ,PAT_DO_NOT_CALL_TXT
          ,PRIM_MARKET_NM
          ,DIAG_CD_1
          ,DIAG_DESC_1
          ,DIAG_CD_2
          ,DIAG_DESC_2
          ,DIAG_CD_3
          ,DIAG_DESC_3
          ,DIAG_RELATED_GRPING_CD
          ,DIAG_RELATED_GRPING_DESC
          ,PYR_AUTH_NBR
          ,PROC_CD_1
          ,PROC_CD_2
          ,PROC_CD_3
          ,ORDG_PHYS_NPI
          ,ORDG_PHYS_LAST_NM
          ,ORDG_PHYS_FIRST_NM
          ,ORDG_PHYS_PHONE
          ,PRIM_CARE_PHYS_NPI
          ,PRIM_CARE_PHYS_LAST_NM
          ,PRIM_CARE_PHYS_FIRST_NM
          ,PRIM_CARE_PHYS_PHONE
          ,CASE_MGR_FULL_NM
          ,FAC_VISIT_ID
          ,FAC_NPI
          ,FAC_NM
          ,FAC_TYPE_CD
          ,FAC_SPCLTY_CAT_CD
          ,FACILITY_ADMIT_DATE
          ,CASE
            WHEN FACILITY_DISCHARGE_DATE_TEMP IS NOT NULL THEN FACILITY_DISCHARGE_DATE_TEMP
            ELSE FACILITY_ADMIT_DATE + 7
          END AS FACILITY_DISCHARGE_DATE
          ,CASE
            WHEN FACILITY_DISCHARGE_DATE_TEMP IS NOT NULL THEN NULL
            ELSE 'NO DISCHARGE DATE'
          END AS NO_DISCHARGE_FLAG
          ,FAC_DSCHRG_DSPSTN_CD
          ,FAC_DSCHRG_DSPSTN_DESC
          ,READMSN_6_MONTH_CNT
          ,READMSN_12_MONTH_CNT
          ,ORIG_PAT_EVENT_ID
          ,BYPASS_PROG_EXCLNS_FLG
          ,REC_TXT
          ,CRTD_USER
          ,CRTD_DT
          ,UPDTD_USER
          ,UPDTD_DT
          ,PAT_OTH_PHONE
          ,AFLTN_PROG_TXT
          ,PHYS_GRP_TXT
          ,PAT_EVENT_TM
          ,ADMIT_TM
          ,DSCHRG_TM
          ,STATUS_FLAG
          ,PROCESS_COMMENT
          ,FAC_SRC_CD
          ,FIRST_VALUE(F_FILE_CRTD_DT) OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE ORDER BY F_FILE_CRTD_DT ASC NULLS LAST) AS FIRST_CREATED_DATE
          --ENDREGION
        FROM
        (
          SELECT  --REGION FIELDS
            F.FILE_LOG_ID AS F_FILE_LOG_ID,
            F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
            F.FILE_NM AS F_FILE_NM,
            F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
            F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
            F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
            F.REC_TOT_CNT AS F_REC_TOT_CNT,
            F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
            F.REC_BAD_CNT AS F_REC_BAD_CNT,
            F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
            F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
            F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
            F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
            F.REC_ERR_CNT AS F_REC_ERR_CNT,
            F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
            F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
            F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
            F.LOAD_END_DT AS F_LOAD_END_DT,
            F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
            F.CRTD_USER AS F_CRTD_USER,
            F.CRTD_DT AS F_CRTD_DT,
            F.UPDTD_USER AS F_UPDTD_USER,
            F.UPDTD_DT AS F_UPDTD_DT
            ,S.PAT_EVENT_STAGE_ID
            ,S.FILE_LOG_ID
            ,S.PYR_NM
            ,S.REC_NBR
            ,S.REC_SRC_CD
            ,S.ORIG_REC_SRC_CD
            ,S.PAT_EVENT_TYPE_CD
            ,S.PAT_EVENT_DT
            ,S.CARE_COORD_PROG_NM
            ,S.PYR_HEALTH_MGMT_PROG_NM
            ,S.PYR_HEALTH_MGMT_PROG_FLG
            ,S.VEN_HEALTH_MGMT_PROG_NM
            ,S.VEN_HEALTH_MGMT_PROG_FLG
            ,S.LN_OF_BUS_NM
            ,S.PROD_CD
            ,S.PROD_SUBCAT_CD
            ,S.INSRNC_GRP_NBR
            ,S.INSRNC_GRP_NM
            ,S.CVG_FUNDG_CD
            ,S.SUB_ID
            ,S.MBR_ID
            ,S.PAT_FIRST_NM
            ,S.PAT_LAST_NM
            ,S.PAT_DOB
            ,S.PAT_GENDER
            ,S.PAT_RACE
            ,S.PAT_ADDR1
            ,S.PAT_ADDR2
            ,S.PAT_CNTY
            ,S.PAT_CITY
            ,S.PAT_ST
            ,S.PAT_ZIP
            ,S.PAT_PHONE
            ,S.PME_REFRNC_NBR
            ,S.PAT_RISK_SCORE_MSR
            ,S.PAT_DO_NOT_CALL_TXT
            ,S.PRIM_MARKET_NM
            ,S.DIAG_CD_1
            ,S.DIAG_DESC_1
            ,S.DIAG_CD_2
            ,S.DIAG_DESC_2
            ,S.DIAG_CD_3
            ,S.DIAG_DESC_3
            ,S.DIAG_RELATED_GRPING_CD
            ,S.DIAG_RELATED_GRPING_DESC
            ,S.PYR_AUTH_NBR
            ,S.PROC_CD_1
            ,S.PROC_CD_2
            ,S.PROC_CD_3
            ,S.ORDG_PHYS_NPI
            ,S.ORDG_PHYS_LAST_NM
            ,S.ORDG_PHYS_FIRST_NM
            ,S.ORDG_PHYS_PHONE
            ,S.PRIM_CARE_PHYS_NPI
            ,S.PRIM_CARE_PHYS_LAST_NM
            ,S.PRIM_CARE_PHYS_FIRST_NM
            ,S.PRIM_CARE_PHYS_PHONE
            ,S.CASE_MGR_FULL_NM
            ,S.FAC_VISIT_ID
            ,S.FAC_NPI
            ,S.FAC_NM
            ,S.FAC_TYPE_CD
            ,S.FAC_SPCLTY_CAT_CD
            ,S.FAC_ADMIT_DT
            ,CASE
              WHEN S.FAC_ADMIT_DT LIKE ANY ('%-Dec','%-Nov') THEN S.FAC_ADMIT_DT||'-19'
              WHEN S.FAC_ADMIT_DT = 'Dec-19' THEN '1-Dec-19'
              ELSE S.FAC_ADMIT_DT
            END AS ADMIT_PLACEHOLDER
            ,CASE
              WHEN SUBSTR(ADMIT_PLACEHOLDER,2,1) = '-' THEN '0'||ADMIT_PLACEHOLDER
              ELSE ADMIT_PLACEHOLDER
            END AS ADMIT_PLACEHOLDER2
            ,CAST(CASE
              WHEN ADMIT_PLACEHOLDER2 LIKE '%Dec%' THEN '2019-12-'||LEFT(ADMIT_PLACEHOLDER2,2)
              WHEN ADMIT_PLACEHOLDER2 LIKE '%Nov%' THEN '2019-11-'||LEFT(ADMIT_PLACEHOLDER2,2)
              ELSE NULL
            END AS DATE) AS FACILITY_ADMIT_DATE
            ,S.FAC_DSCHRG_DT
            ,CASE
              WHEN S.FAC_DSCHRG_DT LIKE ANY ('%-Dec','%-Nov') THEN S.FAC_DSCHRG_DT||'-19'
              WHEN S.FAC_DSCHRG_DT = 'Dec-19' THEN '1-Dec-19'
              ELSE S.FAC_DSCHRG_DT
            END AS ADMIT_PLACEHOLDER3
            ,CASE
              WHEN SUBSTR(ADMIT_PLACEHOLDER3,2,1) = '-' THEN '0'||ADMIT_PLACEHOLDER3
              ELSE ADMIT_PLACEHOLDER3
            END AS ADMIT_PLACEHOLDER4
            ,CAST(CASE
              WHEN ADMIT_PLACEHOLDER4 LIKE '%Dec%' THEN '2019-12-'||LEFT(ADMIT_PLACEHOLDER4,2)
              WHEN ADMIT_PLACEHOLDER4 LIKE '%Nov%' THEN '2019-11-'||LEFT(ADMIT_PLACEHOLDER4,2)
              ELSE NULL
            END AS DATE) AS FACILITY_DISCHARGE_DATE_TEMP
            ,S.FAC_DSCHRG_DSPSTN_CD
            ,S.FAC_DSCHRG_DSPSTN_DESC
            ,S.READMSN_6_MONTH_CNT
            ,S.READMSN_12_MONTH_CNT
            ,S.ORIG_PAT_EVENT_ID
            ,S.BYPASS_PROG_EXCLNS_FLG
            ,S.REC_TXT
            ,S.CRTD_USER
            ,S.CRTD_DT
            ,S.UPDTD_USER
            ,S.UPDTD_DT
            ,S.PAT_OTH_PHONE
            ,S.AFLTN_PROG_TXT
            ,S.PHYS_GRP_TXT
            ,S.PAT_EVENT_TM
            ,S.ADMIT_TM
            ,S.DSCHRG_TM
            ,S.STATUS_FLAG
            ,S.PROCESS_COMMENT
            ,S.FAC_SRC_CD

            --ENDREGION
          FROM 
          (
            SELECT *
            FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
            WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
              AND FILE_TYPE_DESC LIKE '%CEN%'
          ) F
          JOIN 
          (
            SELECT *
            FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
            WHERE (PAT_EVENT_TYPE_CD IS NULL OR PAT_EVENT_TYPE_CD = 'SNF')
              AND FAC_ADMIT_DT NOT LIKE '%/%'
              AND FAC_ADMIT_DT NOT IN ('ADMIT_DATE_DT','Continued Stay Review Indicator','NULL')
          ) S
            ON F.FILE_LOG_ID = S.FILE_LOG_ID
        ) A
       -- QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE ORDER BY F_FILE_CRTD_DT DESC) = 1
      )B
  )C
--ENDREGION
--

) E
--QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID, FAC_ADMIT_DT ORDER BY F_FILE_CRTD_DT DESC) = 1 

UNION ALL

--
--REGION ADT
SELECT A.*

FROM
(
--REGION WHOLE CODE
--REGION ALL ADMIT WITH DISCHARGE
  SELECT
  --REGION
    F_FILE_LOG_ID
    ,F_TRADING_PARTNER_ID
    ,F_FILE_NM
    ,F_FILE_CRTD_USER_NM
    ,F_FILE_CRTD_DT
    ,F_FILE_TYPE_DESC
    ,F_REC_TOT_CNT
    ,F_REC_LOAD_CNT
    ,F_REC_BAD_CNT
    ,F_REC_DISCARD_CNT
    ,F_REC_INSRT_MAIN_CNT
    ,F_REC_UPD_MAIN_CNT
    ,F_REC_INSRT_HIST_CNT
    ,F_REC_ERR_CNT
    ,F_REC_IGNORE_CNT
    ,F_LOAD_STAT_CD
    ,F_LOAD_STRT_DT
    ,F_LOAD_END_DT
    ,F_LOAD_ERR_DESC
    ,F_CRTD_USER
    ,F_CRTD_DT
    ,F_UPDTD_USER
    ,F_UPDTD_DT
    ,PAT_EVENT_STAGE_ID
    ,FILE_LOG_ID
    ,PYR_NM
    ,REC_NBR
    ,REC_SRC_CD
    ,ORIG_REC_SRC_CD
    ,PAT_EVENT_TYPE_CD
    ,PAT_EVENT_DT
    ,CARE_COORD_PROG_NM
    ,PYR_HEALTH_MGMT_PROG_NM
    ,PYR_HEALTH_MGMT_PROG_FLG
    ,VEN_HEALTH_MGMT_PROG_NM
    ,VEN_HEALTH_MGMT_PROG_FLG
    ,LN_OF_BUS_NM
    ,PROD_CD
    ,PROD_SUBCAT_CD
    ,INSRNC_GRP_NBR
    ,INSRNC_GRP_NM
    ,CVG_FUNDG_CD
    ,SUB_ID
    ,MBR_ID
    ,PAT_FIRST_NM
    ,PAT_LAST_NM
    ,PAT_DOB
    ,PAT_GENDER
    ,PAT_RACE
    ,PAT_ADDR1
    ,PAT_ADDR2
    ,PAT_CNTY
    ,PAT_CITY
    ,PAT_ST
    ,PAT_ZIP
    ,PAT_PHONE
    ,PME_REFRNC_NBR
    ,PAT_RISK_SCORE_MSR
    ,PAT_DO_NOT_CALL_TXT
    ,PRIM_MARKET_NM
    ,DIAG_CD_1
    ,DIAG_DESC_1
    ,DIAG_CD_2
    ,DIAG_DESC_2
    ,DIAG_CD_3
    ,DIAG_DESC_3
    ,DIAG_RELATED_GRPING_CD
    ,DIAG_RELATED_GRPING_DESC
    ,PYR_AUTH_NBR
    ,PROC_CD_1
    ,PROC_CD_2
    ,PROC_CD_3
    ,ORDG_PHYS_NPI
    ,ORDG_PHYS_LAST_NM
    ,ORDG_PHYS_FIRST_NM
    ,ORDG_PHYS_PHONE
    ,PRIM_CARE_PHYS_NPI
    ,PRIM_CARE_PHYS_LAST_NM
    ,PRIM_CARE_PHYS_FIRST_NM
    ,PRIM_CARE_PHYS_PHONE
    ,CASE_MGR_FULL_NM
    ,FAC_VISIT_ID
    ,FAC_NPI
    ,FAC_NM
    ,FAC_TYPE_CD
    ,FAC_SPCLTY_CAT_CD
    ,FAC_ADMIT_DT
    ,CASE
      WHEN FAC_DSCHRG_DT IS NULL THEN FAC_ADMIT_DT+7
      ELSE FAC_DSCHRG_DT
    END AS FAC_DSCHRG_DT
    ,CASE
      WHEN FAC_DSCHRG_DT IS NULL THEN 'NO DISCHARGE DATE'
      ELSE NULL
    END AS DISCHARGE_CHECK
    ,FAC_DSCHRG_DSPSTN_CD
    ,FAC_DSCHRG_DSPSTN_DESC
    ,READMSN_6_MONTH_CNT
    ,READMSN_12_MONTH_CNT
    ,ORIG_PAT_EVENT_ID
    ,BYPASS_PROG_EXCLNS_FLG
    ,REC_TXT
    ,CRTD_USER
    ,CRTD_DT
    ,UPDTD_USER
    ,UPDTD_DT
    ,PAT_OTH_PHONE
    ,AFLTN_PROG_TXT
    ,PHYS_GRP_TXT
    ,PAT_EVENT_TM
    ,ADMIT_TM
    ,DSCHRG_TM
    ,STATUS_FLAG
    ,PROCESS_COMMENT
    ,FAC_SRC_CD
    ,CASE
      WHEN NEW_ADT IN ('AI/MISC','MISC/AI') THEN 'AI/MISC'
      WHEN NEW_ADT IN ('CP/MISC','MISC/CP') THEN 'CP/MISC'
      WHEN NEW_ADT IN ('CP/SES','SES/CP') THEN 'CP/SES'
      WHEN NEW_ADT IN ('PP/MISC','MISC/PP') THEN 'PP/MISC'
      WHEN NEW_ADT IN ('SES/MISC','MISC/SES') THEN 'SES/MISC'
      ELSE NEW_ADT
    END AS ADT_VENDOR
    ,FIRST_CREATION_DATE
  --ENDREGION  
  FROM
  (
    SELECT
      A.*
      ,FIRST_VALUE(ADT_VENDOR) OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS PREVIOUS_ADT
      ,FIRST_VALUE(ADT_VENDOR) OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS NEXT_ADT
      ,CASE 
        WHEN PREVIOUS_ADT IS NOT NULL THEN
          CASE WHEN PREVIOUS_ADT <> ADT_VENDOR THEN PREVIOUS_ADT||'/'||ADT_VENDOR ELSE ADT_VENDOR END
        WHEN NEXT_ADT IS NOT NULL THEN
          CASE WHEN NEXT_ADT <> ADT_VENDOR THEN PREVIOUS_ADT||'/'||ADT_VENDOR ELSE ADT_VENDOR END
        ELSE ADT_VENDOR
      END AS NEW_ADT
    FROM
    (
      --
      --
      --
      SELECT
        A.*
        ,MIN(F_FILE_CRTD_DT) OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW) AS FIRST_CREATION_DATE
      
      FROM
      (
        SELECT
          A.*
          ,CASE
            WHEN (FAC_ADMIT_DT - FIRST_VALUE(FAC_DSCHRG_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
              THEN MIN(FAC_ADMIT_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
            ELSE FAC_ADMIT_DT
          END AS FACILITY_ADMIT_DATE_NEW
          ,CASE
            WHEN (FAC_ADMIT_DT - FIRST_VALUE(FAC_DSCHRG_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
              THEN MAX(FAC_DSCHRG_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
            ELSE FAC_DSCHRG_DT
          END AS FACILITY_DISCHARGE_DATE_NEW
        FROM
        (
          SELECT
          --REGION
            Z.F_FILE_LOG_ID
            ,Z.F_TRADING_PARTNER_ID
            ,Z.F_FILE_NM
            ,Z.F_FILE_CRTD_USER_NM
            ,Z.F_FILE_CRTD_DT
            ,Z.F_FILE_TYPE_DESC
            ,Z.F_REC_TOT_CNT
            ,Z.F_REC_LOAD_CNT
            ,Z.F_REC_BAD_CNT
            ,Z.F_REC_DISCARD_CNT
            ,Z.F_REC_INSRT_MAIN_CNT
            ,Z.F_REC_UPD_MAIN_CNT
            ,Z.F_REC_INSRT_HIST_CNT
            ,Z.F_REC_ERR_CNT
            ,Z.F_REC_IGNORE_CNT
            ,Z.F_LOAD_STAT_CD
            ,Z.F_LOAD_STRT_DT
            ,Z.F_LOAD_END_DT
            ,Z.F_LOAD_ERR_DESC
            ,Z.F_CRTD_USER
            ,Z.F_CRTD_DT
            ,Z.F_UPDTD_USER
            ,Z.F_UPDTD_DT
            ,Z.PAT_EVENT_STAGE_ID
            ,Z.FILE_LOG_ID
            ,Z.PYR_NM
            ,Z.REC_NBR
            ,Z.REC_SRC_CD
            ,Z.ORIG_REC_SRC_CD
            ,Z.PAT_EVENT_TYPE_CD
            ,Z.PAT_EVENT_DT
            ,Z.CARE_COORD_PROG_NM
            ,Z.PYR_HEALTH_MGMT_PROG_NM
            ,Z.PYR_HEALTH_MGMT_PROG_FLG
            ,Z.VEN_HEALTH_MGMT_PROG_NM
            ,Z.VEN_HEALTH_MGMT_PROG_FLG
            ,Z.LN_OF_BUS_NM
            ,Z.PROD_CD
            ,Z.PROD_SUBCAT_CD
            ,Z.INSRNC_GRP_NBR
            ,Z.INSRNC_GRP_NM
            ,Z.CVG_FUNDG_CD
            ,Z.SUB_ID
            ,Z.MBR_ID
            ,Z.PAT_FIRST_NM
            ,Z.PAT_LAST_NM
            ,Z.PAT_DOB
            ,Z.PAT_GENDER
            ,Z.PAT_RACE
            ,Z.PAT_ADDR1
            ,Z.PAT_ADDR2
            ,Z.PAT_CNTY
            ,Z.PAT_CITY
            ,Z.PAT_ST
            ,Z.PAT_ZIP
            ,Z.PAT_PHONE
            ,Z.PME_REFRNC_NBR
            ,Z.PAT_RISK_SCORE_MSR
            ,Z.PAT_DO_NOT_CALL_TXT
            ,Z.PRIM_MARKET_NM
            ,Z.DIAG_CD_1
            ,Z.DIAG_DESC_1
            ,Z.DIAG_CD_2
            ,Z.DIAG_DESC_2
            ,Z.DIAG_CD_3
            ,Z.DIAG_DESC_3
            ,Z.DIAG_RELATED_GRPING_CD
            ,Z.DIAG_RELATED_GRPING_DESC
            ,Z.PYR_AUTH_NBR
            ,Z.PROC_CD_1
            ,Z.PROC_CD_2
            ,Z.PROC_CD_3
            ,Z.ORDG_PHYS_NPI
            ,Z.ORDG_PHYS_LAST_NM
            ,Z.ORDG_PHYS_FIRST_NM
            ,Z.ORDG_PHYS_PHONE
            ,Z.PRIM_CARE_PHYS_NPI
            ,Z.PRIM_CARE_PHYS_LAST_NM
            ,Z.PRIM_CARE_PHYS_FIRST_NM
            ,Z.PRIM_CARE_PHYS_PHONE
            ,Z.CASE_MGR_FULL_NM
            ,Z.FAC_VISIT_ID
            ,Z.FAC_NPI
            ,Z.FAC_NM
            ,Z.FAC_TYPE_CD
            ,Z.FAC_SPCLTY_CAT_CD    
            ,Z.ADMIT_DATE AS FAC_ADMIT_DT
            ,Z.DISCHARGE_DATE AS FAC_DSCHRG_DT
            ,Z.FAC_DSCHRG_DSPSTN_CD
            ,Z.FAC_DSCHRG_DSPSTN_DESC
            ,Z.READMSN_6_MONTH_CNT
            ,Z.READMSN_12_MONTH_CNT
            ,Z.ORIG_PAT_EVENT_ID
            ,Z.BYPASS_PROG_EXCLNS_FLG
            ,Z.REC_TXT
            ,Z.CRTD_USER
            ,Z.CRTD_DT
            ,Z.UPDTD_USER
            ,Z.UPDTD_DT
            ,Z.PAT_OTH_PHONE
            ,Z.AFLTN_PROG_TXT
            ,Z.PHYS_GRP_TXT
            ,Z.PAT_EVENT_TM
            ,Z.ADMIT_TM
            ,Z.DSCHRG_TM
            ,Z.STATUS_FLAG
            ,Z.PROCESS_COMMENT
            ,Z.FAC_SRC_CD
            ,Z.ADT_VENDOR
            ,Z.DISCHARGE_FILE_LOG
            --ENDREGION
          FROM
          (
            SELECT
              A.*
              ,B.FILE_LOG_ID AS DISCHARGE_FILE_LOG
              ,A.NEW_PAT_EVENT_DT AS ADMIT_DATE
              ,CASE
                WHEN A.F_FILE_CRTD_DT = MAX(A.F_FILE_CRTD_DT) OVER(PARTITION BY A.MBR_ID,B.NEW_PAT_EVENT_DT,A.ADT_VENDOR) THEN B.NEW_PAT_EVENT_DT
                ELSE NULL
              END AS DISCHARGE_DATE
            FROM
            (
            --REGION INITIAL ADMITS TO JOIN WITH DISCHARGES
              SELECT--REGION
                F.FILE_LOG_ID AS F_FILE_LOG_ID,
                F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
                F.FILE_NM AS F_FILE_NM,
                F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
                F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
                F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
                F.REC_TOT_CNT AS F_REC_TOT_CNT,
                F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
                F.REC_BAD_CNT AS F_REC_BAD_CNT,
                F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
                F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
                F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
                F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
                F.REC_ERR_CNT AS F_REC_ERR_CNT,
                F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
                F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
                F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
                F.LOAD_END_DT AS F_LOAD_END_DT,
                F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
                F.CRTD_USER AS F_CRTD_USER,
                F.CRTD_DT AS F_CRTD_DT,
                F.UPDTD_USER AS F_UPDTD_USER,
                F.UPDTD_DT AS F_UPDTD_DT,
                F.ADT_VENDOR,
                S.*,
                CASE
                  WHEN S.PAT_EVENT_DT LIKE '%Na%' THEN NULL
                  WHEN SUBSTR(S.PAT_EVENT_DT,4,1) = '/' THEN '0'||SUBSTR(S.PAT_EVENT_DT,1,2)||'0'||SUBSTR(S.PAT_EVENT_DT,3,6)
                  WHEN SUBSTR(S.PAT_EVENT_DT,2,1) = '/' THEN '0'||S.PAT_EVENT_DT
                  WHEN SUBSTR(S.PAT_EVENT_DT,5,1) = '/' THEN SUBSTR(S.PAT_EVENT_DT,1,3)||'0'||SUBSTR(S.PAT_EVENT_DT,4,6)
                  WHEN S.PAT_EVENT_DT = '01/00/1900' THEN NULL
                  ELSE S.PAT_EVENT_DT
                END AS PAT_EVENT_DT_FIX,
                CAST(CAST(CAST(TRIM(PAT_EVENT_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_PAT_EVENT_DT
                
                --ENDREGION
              FROM 
              (
                SELECT F.*
                  ,CASE
                    WHEN FILE_NM LIKE '%SES%' THEN 'SES'
                    WHEN FILE_NM LIKE '%CP%' THEN 'CP'
                    WHEN FILE_NM LIKE '%PP%' THEN 'PP'
                    WHEN FILE_NM LIKE '%AI%' THEN 'AI'
                    ELSE 'MISC'
                  END AS ADT_VENDOR
                FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
                WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
                  AND FILE_TYPE_DESC LIKE '%ADT%'
              ) F
              JOIN 
              (
                SELECT *
                FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
                WHERE PAT_EVENT_TYPE_CD LIKE 'ADMIT%'
              ) S
                ON F.FILE_LOG_ID = S.FILE_LOG_ID
                
            --  QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID,PAT_EVENT_DT,ADT_VENDOR ORDER BY F_FILE_CRTD_DT DESC) = 1
            --ENDREGION
            ) A
            LEFT JOIN 
            (
            --REGION PULLS DISCHARGE EVENT TYPES TO JOIN TO ADMITS
              SELECT
              --REGION
                F.FILE_LOG_ID AS F_FILE_LOG_ID,
                F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
                F.FILE_NM AS F_FILE_NM,
                F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
                F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
                F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
                F.REC_TOT_CNT AS F_REC_TOT_CNT,
                F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
                F.REC_BAD_CNT AS F_REC_BAD_CNT,
                F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
                F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
                F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
                F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
                F.REC_ERR_CNT AS F_REC_ERR_CNT,
                F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
                F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
                F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
                F.LOAD_END_DT AS F_LOAD_END_DT,
                F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
                F.CRTD_USER AS F_CRTD_USER,
                F.CRTD_DT AS F_CRTD_DT,
                F.UPDTD_USER AS F_UPDTD_USER,
                F.UPDTD_DT AS F_UPDTD_DT,
                F.ADT_VENDOR,
                S.*,
                --CONVERTS DATES
                CASE
                  WHEN S.PAT_EVENT_DT LIKE '%Na%' THEN NULL
                  WHEN SUBSTR(S.PAT_EVENT_DT,4,1) = '/' THEN '0'||SUBSTR(S.PAT_EVENT_DT,1,2)||'0'||SUBSTR(S.PAT_EVENT_DT,3,6)
                  WHEN SUBSTR(S.PAT_EVENT_DT,2,1) = '/' THEN '0'||S.PAT_EVENT_DT
                  WHEN SUBSTR(S.PAT_EVENT_DT,5,1) = '/' THEN SUBSTR(S.PAT_EVENT_DT,1,3)||'0'||SUBSTR(S.PAT_EVENT_DT,4,6)
                  WHEN S.PAT_EVENT_DT = '01/00/1900' THEN NULL
                  ELSE S.PAT_EVENT_DT
                END AS PAT_EVENT_DT_FIX,
                CAST(CAST(CAST(TRIM(PAT_EVENT_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_PAT_EVENT_DT
                --ENDREGION
              FROM 
              (
                SELECT F.*
                  ,CASE
                    WHEN FILE_NM LIKE '%SES%' THEN 'SES'
                    WHEN FILE_NM LIKE '%CP%' THEN 'CP'
                    WHEN FILE_NM LIKE '%PP%' THEN 'PP'
                    WHEN FILE_NM LIKE '%AI%' THEN 'AI'
                    ELSE 'MISC'
                  END AS ADT_VENDOR
                FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
                WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
                  AND FILE_TYPE_DESC LIKE '%ADT%'
              ) F
              JOIN 
              (
                SELECT *
                FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
                WHERE PAT_EVENT_TYPE_CD LIKE 'DISCHARGE%'
              ) S
                ON F.FILE_LOG_ID = S.FILE_LOG_ID
                
              --QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID,PAT_EVENT_DT,ADT_VENDOR ORDER BY F_FILE_CRTD_DT DESC) = 1
                --ENDREGION
            ) B
              ON A.MBR_ID = B.MBR_ID
                AND (A.FAC_NPI = B.FAC_NPI OR A.FAC_NM = B.FAC_NM)
                AND B.NEW_PAT_EVENT_DT - A.NEW_PAT_EVENT_DT < 60
                AND B.NEW_PAT_EVENT_DT - A.NEW_PAT_EVENT_DT > 0
        --        AND A.FAC_NPI = B.FAC_NPI --DO WE INCLUDE THIS? DROPS 11% WHEN INCLUDING NPI
                AND A.ADT_VENDOR = B.ADT_VENDOR
            --QUALIFY ROW_NUMBER() OVER(PARTITION BY A.MBR_ID,B.NEW_PAT_EVENT_DT,A.ADT_VENDOR ORDER BY A.F_FILE_CRTD_DT DESC) = 1   
          ) Z
        --  QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID,ADMIT_DATE,ADT_VENDOR ORDER BY DISCHARGE_DATE ASC) = 1 
        ) A
      ) A
      --
      --
      --
    ) A
  ) A
 -- QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW ORDER BY F_FILE_CRTD_DT DESC) = 1 
  --ENDREGION

  UNION ALL

--REGION IDENTIFIES REMAINING DISCHARGES
  SELECT
    --REGION
    S.F_FILE_LOG_ID
    ,S.F_TRADING_PARTNER_ID
    ,S.F_FILE_NM
    ,S.F_FILE_CRTD_USER_NM
    ,S.F_FILE_CRTD_DT
    ,S.F_FILE_TYPE_DESC
    ,S.F_REC_TOT_CNT
    ,S.F_REC_LOAD_CNT
    ,S.F_REC_BAD_CNT
    ,S.F_REC_DISCARD_CNT
    ,S.F_REC_INSRT_MAIN_CNT
    ,S.F_REC_UPD_MAIN_CNT
    ,S.F_REC_INSRT_HIST_CNT
    ,S.F_REC_ERR_CNT
    ,S.F_REC_IGNORE_CNT
    ,S.F_LOAD_STAT_CD
    ,S.F_LOAD_STRT_DT
    ,S.F_LOAD_END_DT
    ,S.F_LOAD_ERR_DESC
    ,S.F_CRTD_USER
    ,S.F_CRTD_DT
    ,S.F_UPDTD_USER
    ,S.F_UPDTD_DT
    ,S.PAT_EVENT_STAGE_ID
    ,S.FILE_LOG_ID
    ,S.PYR_NM
    ,S.REC_NBR
    ,S.REC_SRC_CD
    ,S.ORIG_REC_SRC_CD
    ,S.PAT_EVENT_TYPE_CD
    ,S.PAT_EVENT_DT
    ,S.CARE_COORD_PROG_NM
    ,S.PYR_HEALTH_MGMT_PROG_NM
    ,S.PYR_HEALTH_MGMT_PROG_FLG
    ,S.VEN_HEALTH_MGMT_PROG_NM
    ,S.VEN_HEALTH_MGMT_PROG_FLG
    ,S.LN_OF_BUS_NM
    ,S.PROD_CD
    ,S.PROD_SUBCAT_CD
    ,S.INSRNC_GRP_NBR
    ,S.INSRNC_GRP_NM
    ,S.CVG_FUNDG_CD
    ,S.SUB_ID
    ,S.MBR_ID
    ,S.PAT_FIRST_NM
    ,S.PAT_LAST_NM
    ,S.PAT_DOB
    ,S.PAT_GENDER
    ,S.PAT_RACE
    ,S.PAT_ADDR1
    ,S.PAT_ADDR2
    ,S.PAT_CNTY
    ,S.PAT_CITY
    ,S.PAT_ST
    ,S.PAT_ZIP
    ,S.PAT_PHONE
    ,S.PME_REFRNC_NBR
    ,S.PAT_RISK_SCORE_MSR
    ,S.PAT_DO_NOT_CALL_TXT
    ,S.PRIM_MARKET_NM
    ,S.DIAG_CD_1
    ,S.DIAG_DESC_1
    ,S.DIAG_CD_2
    ,S.DIAG_DESC_2
    ,S.DIAG_CD_3
    ,S.DIAG_DESC_3
    ,S.DIAG_RELATED_GRPING_CD
    ,S.DIAG_RELATED_GRPING_DESC
    ,S.PYR_AUTH_NBR
    ,S.PROC_CD_1
    ,S.PROC_CD_2
    ,S.PROC_CD_3
    ,S.ORDG_PHYS_NPI
    ,S.ORDG_PHYS_LAST_NM
    ,S.ORDG_PHYS_FIRST_NM
    ,S.ORDG_PHYS_PHONE
    ,S.PRIM_CARE_PHYS_NPI
    ,S.PRIM_CARE_PHYS_LAST_NM
    ,S.PRIM_CARE_PHYS_FIRST_NM
    ,S.PRIM_CARE_PHYS_PHONE
    ,S.CASE_MGR_FULL_NM
    ,S.FAC_VISIT_ID
    ,S.FAC_NPI
    ,S.FAC_NM
    ,S.FAC_TYPE_CD
    ,S.FAC_SPCLTY_CAT_CD
    ,CAST(S.FAC_ADMIT_DT AS DATE) AS FAC_ADMIT_DT
    ,NEW_PAT_EVENT_DT AS FAC_DSCHRG_DT
    ,CAST(NULL AS VARCHAR(20)) AS DISCHARGE_CHECK
    ,S.FAC_DSCHRG_DSPSTN_CD
    ,S.FAC_DSCHRG_DSPSTN_DESC
    ,S.READMSN_6_MONTH_CNT
    ,S.READMSN_12_MONTH_CNT
    ,S.ORIG_PAT_EVENT_ID
    ,S.BYPASS_PROG_EXCLNS_FLG
    ,S.REC_TXT
    ,S.CRTD_USER
    ,S.CRTD_DT
    ,S.UPDTD_USER
    ,S.UPDTD_DT
    ,S.PAT_OTH_PHONE
    ,S.AFLTN_PROG_TXT
    ,S.PHYS_GRP_TXT
    ,S.PAT_EVENT_TM
    ,S.ADMIT_TM
    ,S.DSCHRG_TM
    ,S.STATUS_FLAG
    ,S.PROCESS_COMMENT
    ,S.FAC_SRC_CD
    ,S.ADT_VENDOR
    ,CAST(NULL AS DATE) AS FIRST_CREATION_DATE
    --ENDREGION
  FROM 
  (
    SELECT 
    --REGION
      F.FILE_LOG_ID AS F_FILE_LOG_ID,
      F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
      F.FILE_NM AS F_FILE_NM,
      F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
      F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
      F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
      F.REC_TOT_CNT AS F_REC_TOT_CNT,
      F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
      F.REC_BAD_CNT AS F_REC_BAD_CNT,
      F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
      F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
      F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
      F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
      F.REC_ERR_CNT AS F_REC_ERR_CNT,
      F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
      F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
      F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
      F.LOAD_END_DT AS F_LOAD_END_DT,
      F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
      F.CRTD_USER AS F_CRTD_USER,
      F.CRTD_DT AS F_CRTD_DT,
      F.UPDTD_USER AS F_UPDTD_USER,
      F.UPDTD_DT AS F_UPDTD_DT,
      F.ADT_VENDOR
      ,S.*
      ,CASE
        WHEN S.PAT_EVENT_DT LIKE '%Na%' THEN NULL
        WHEN SUBSTR(S.PAT_EVENT_DT,4,1) = '/' THEN '0'||SUBSTR(S.PAT_EVENT_DT,1,2)||'0'||SUBSTR(S.PAT_EVENT_DT,3,6)
        WHEN SUBSTR(S.PAT_EVENT_DT,2,1) = '/' THEN '0'||S.PAT_EVENT_DT
        WHEN SUBSTR(S.PAT_EVENT_DT,5,1) = '/' THEN SUBSTR(S.PAT_EVENT_DT,1,3)||'0'||SUBSTR(S.PAT_EVENT_DT,4,6)
        WHEN S.PAT_EVENT_DT = '01/00/1900' THEN NULL
        ELSE S.PAT_EVENT_DT
      END AS PAT_EVENT_DT_FIX
      ,CAST(CAST(CAST(TRIM(PAT_EVENT_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_PAT_EVENT_DT
    --ENDREGION
    FROM 
    (
      SELECT F.*
        ,CASE
          WHEN FILE_NM LIKE '%SES%' THEN 'SES'
          WHEN FILE_NM LIKE '%CP%' THEN 'CP'
          WHEN FILE_NM LIKE '%PP%' THEN 'PP'
          WHEN FILE_NM LIKE '%AI%' THEN 'AI'
          ELSE 'MISC'
        END AS ADT_VENDOR
      FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
      WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
        AND FILE_TYPE_DESC LIKE '%ADT%'
    ) F
    JOIN 
    (
      SELECT *
      FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
      WHERE PAT_EVENT_TYPE_CD LIKE 'DISCHARGE%'
    ) S
      ON F.FILE_LOG_ID = S.FILE_LOG_ID
  ) S
  LEFT JOIN
  (
    SELECT
    --REGION
      F_FILE_LOG_ID
      ,F_TRADING_PARTNER_ID
      ,F_FILE_NM
      ,F_FILE_CRTD_USER_NM
      ,F_FILE_CRTD_DT
      ,F_FILE_TYPE_DESC
      ,F_REC_TOT_CNT
      ,F_REC_LOAD_CNT
      ,F_REC_BAD_CNT
      ,F_REC_DISCARD_CNT
      ,F_REC_INSRT_MAIN_CNT
      ,F_REC_UPD_MAIN_CNT
      ,F_REC_INSRT_HIST_CNT
      ,F_REC_ERR_CNT
      ,F_REC_IGNORE_CNT
      ,F_LOAD_STAT_CD
      ,F_LOAD_STRT_DT
      ,F_LOAD_END_DT
      ,F_LOAD_ERR_DESC
      ,F_CRTD_USER
      ,F_CRTD_DT
      ,F_UPDTD_USER
      ,F_UPDTD_DT
      ,PAT_EVENT_STAGE_ID
      ,FILE_LOG_ID
      ,PYR_NM
      ,REC_NBR
      ,REC_SRC_CD
      ,ORIG_REC_SRC_CD
      ,PAT_EVENT_TYPE_CD
      ,PAT_EVENT_DT
      ,CARE_COORD_PROG_NM
      ,PYR_HEALTH_MGMT_PROG_NM
      ,PYR_HEALTH_MGMT_PROG_FLG
      ,VEN_HEALTH_MGMT_PROG_NM
      ,VEN_HEALTH_MGMT_PROG_FLG
      ,LN_OF_BUS_NM
      ,PROD_CD
      ,PROD_SUBCAT_CD
      ,INSRNC_GRP_NBR
      ,INSRNC_GRP_NM
      ,CVG_FUNDG_CD
      ,SUB_ID
      ,MBR_ID
      ,PAT_FIRST_NM
      ,PAT_LAST_NM
      ,PAT_DOB
      ,PAT_GENDER
      ,PAT_RACE
      ,PAT_ADDR1
      ,PAT_ADDR2
      ,PAT_CNTY
      ,PAT_CITY
      ,PAT_ST
      ,PAT_ZIP
      ,PAT_PHONE
      ,PME_REFRNC_NBR
      ,PAT_RISK_SCORE_MSR
      ,PAT_DO_NOT_CALL_TXT
      ,PRIM_MARKET_NM
      ,DIAG_CD_1
      ,DIAG_DESC_1
      ,DIAG_CD_2
      ,DIAG_DESC_2
      ,DIAG_CD_3
      ,DIAG_DESC_3
      ,DIAG_RELATED_GRPING_CD
      ,DIAG_RELATED_GRPING_DESC
      ,PYR_AUTH_NBR
      ,PROC_CD_1
      ,PROC_CD_2
      ,PROC_CD_3
      ,ORDG_PHYS_NPI
      ,ORDG_PHYS_LAST_NM
      ,ORDG_PHYS_FIRST_NM
      ,ORDG_PHYS_PHONE
      ,PRIM_CARE_PHYS_NPI
      ,PRIM_CARE_PHYS_LAST_NM
      ,PRIM_CARE_PHYS_FIRST_NM
      ,PRIM_CARE_PHYS_PHONE
      ,CASE_MGR_FULL_NM
      ,FAC_VISIT_ID
      ,FAC_NPI
      ,FAC_NM
      ,FAC_TYPE_CD
      ,FAC_SPCLTY_CAT_CD
      ,FAC_ADMIT_DT
      ,CASE
        WHEN FAC_DSCHRG_DT IS NULL THEN FAC_ADMIT_DT+7
        ELSE FAC_DSCHRG_DT
      END AS FAC_DSCHRG_DT
      ,CASE
        WHEN FAC_DSCHRG_DT IS NULL THEN 'NO DISCHARGE DATE'
        ELSE NULL
      END AS DISCHARGE_CHECK
      ,FAC_DSCHRG_DSPSTN_CD
      ,FAC_DSCHRG_DSPSTN_DESC
      ,READMSN_6_MONTH_CNT
      ,READMSN_12_MONTH_CNT
      ,ORIG_PAT_EVENT_ID
      ,BYPASS_PROG_EXCLNS_FLG
      ,REC_TXT
      ,CRTD_USER
      ,CRTD_DT
      ,UPDTD_USER
      ,UPDTD_DT
      ,PAT_OTH_PHONE
      ,AFLTN_PROG_TXT
      ,PHYS_GRP_TXT
      ,PAT_EVENT_TM
      ,ADMIT_TM
      ,DSCHRG_TM
      ,STATUS_FLAG
      ,PROCESS_COMMENT
      ,FAC_SRC_CD
      ,CASE
        WHEN NEW_ADT IN ('AI/MISC','MISC/AI') THEN 'AI/MISC'
        WHEN NEW_ADT IN ('CP/MISC','MISC/CP') THEN 'CP/MISC'
        WHEN NEW_ADT IN ('CP/SES','SES/CP') THEN 'CP/SES'
        WHEN NEW_ADT IN ('PP/MISC','MISC/PP') THEN 'PP/MISC'
        WHEN NEW_ADT IN ('SES/MISC','MISC/SES') THEN 'SES/MISC'
        ELSE NEW_ADT
      END AS ADT_VENDOR
      --ENDREGION
    FROM
    (
      SELECT
        A.*
        ,FIRST_VALUE(ADT_VENDOR) OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS PREVIOUS_ADT
        ,FIRST_VALUE(ADT_VENDOR) OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS NEXT_ADT
        ,CASE 
          WHEN PREVIOUS_ADT IS NOT NULL THEN
            CASE WHEN PREVIOUS_ADT <> ADT_VENDOR THEN PREVIOUS_ADT||'/'||ADT_VENDOR ELSE ADT_VENDOR END
          WHEN NEXT_ADT IS NOT NULL THEN
            CASE WHEN NEXT_ADT <> ADT_VENDOR THEN PREVIOUS_ADT||'/'||ADT_VENDOR ELSE ADT_VENDOR END
          ELSE ADT_VENDOR
        END AS NEW_ADT
      FROM
      (
        SELECT
          A.*
          ,CASE
            WHEN (FAC_ADMIT_DT - FIRST_VALUE(FAC_DSCHRG_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
              THEN MIN(FAC_ADMIT_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
            ELSE FAC_ADMIT_DT
          END AS FACILITY_ADMIT_DATE_NEW
          ,CASE
            WHEN (FAC_ADMIT_DT - FIRST_VALUE(FAC_DSCHRG_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) < 0 
              THEN MAX(FAC_DSCHRG_DT) OVER(PARTITION BY MBR_ID,FAC_TYPE_CD ORDER BY FAC_ADMIT_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
            ELSE FAC_DSCHRG_DT
          END AS FACILITY_DISCHARGE_DATE_NEW
        FROM
        (
          SELECT
          --REGION
            Z.F_FILE_LOG_ID
            ,Z.F_TRADING_PARTNER_ID
            ,Z.F_FILE_NM
            ,Z.F_FILE_CRTD_USER_NM
            ,Z.F_FILE_CRTD_DT
            ,Z.F_FILE_TYPE_DESC
            ,Z.F_REC_TOT_CNT
            ,Z.F_REC_LOAD_CNT
            ,Z.F_REC_BAD_CNT
            ,Z.F_REC_DISCARD_CNT
            ,Z.F_REC_INSRT_MAIN_CNT
            ,Z.F_REC_UPD_MAIN_CNT
            ,Z.F_REC_INSRT_HIST_CNT
            ,Z.F_REC_ERR_CNT
            ,Z.F_REC_IGNORE_CNT
            ,Z.F_LOAD_STAT_CD
            ,Z.F_LOAD_STRT_DT
            ,Z.F_LOAD_END_DT
            ,Z.F_LOAD_ERR_DESC
            ,Z.F_CRTD_USER
            ,Z.F_CRTD_DT
            ,Z.F_UPDTD_USER
            ,Z.F_UPDTD_DT
            ,Z.PAT_EVENT_STAGE_ID
            ,Z.FILE_LOG_ID
            ,Z.PYR_NM
            ,Z.REC_NBR
            ,Z.REC_SRC_CD
            ,Z.ORIG_REC_SRC_CD
            ,Z.PAT_EVENT_TYPE_CD
            ,Z.PAT_EVENT_DT
            ,Z.CARE_COORD_PROG_NM
            ,Z.PYR_HEALTH_MGMT_PROG_NM
            ,Z.PYR_HEALTH_MGMT_PROG_FLG
            ,Z.VEN_HEALTH_MGMT_PROG_NM
            ,Z.VEN_HEALTH_MGMT_PROG_FLG
            ,Z.LN_OF_BUS_NM
            ,Z.PROD_CD
            ,Z.PROD_SUBCAT_CD
            ,Z.INSRNC_GRP_NBR
            ,Z.INSRNC_GRP_NM
            ,Z.CVG_FUNDG_CD
            ,Z.SUB_ID
            ,Z.MBR_ID
            ,Z.PAT_FIRST_NM
            ,Z.PAT_LAST_NM
            ,Z.PAT_DOB
            ,Z.PAT_GENDER
            ,Z.PAT_RACE
            ,Z.PAT_ADDR1
            ,Z.PAT_ADDR2
            ,Z.PAT_CNTY
            ,Z.PAT_CITY
            ,Z.PAT_ST
            ,Z.PAT_ZIP
            ,Z.PAT_PHONE
            ,Z.PME_REFRNC_NBR
            ,Z.PAT_RISK_SCORE_MSR
            ,Z.PAT_DO_NOT_CALL_TXT
            ,Z.PRIM_MARKET_NM
            ,Z.DIAG_CD_1
            ,Z.DIAG_DESC_1
            ,Z.DIAG_CD_2
            ,Z.DIAG_DESC_2
            ,Z.DIAG_CD_3
            ,Z.DIAG_DESC_3
            ,Z.DIAG_RELATED_GRPING_CD
            ,Z.DIAG_RELATED_GRPING_DESC
            ,Z.PYR_AUTH_NBR
            ,Z.PROC_CD_1
            ,Z.PROC_CD_2
            ,Z.PROC_CD_3
            ,Z.ORDG_PHYS_NPI
            ,Z.ORDG_PHYS_LAST_NM
            ,Z.ORDG_PHYS_FIRST_NM
            ,Z.ORDG_PHYS_PHONE
            ,Z.PRIM_CARE_PHYS_NPI
            ,Z.PRIM_CARE_PHYS_LAST_NM
            ,Z.PRIM_CARE_PHYS_FIRST_NM
            ,Z.PRIM_CARE_PHYS_PHONE
            ,Z.CASE_MGR_FULL_NM
            ,Z.FAC_VISIT_ID
            ,Z.FAC_NPI
            ,Z.FAC_NM
            ,Z.FAC_TYPE_CD
            ,Z.FAC_SPCLTY_CAT_CD    
            ,Z.ADMIT_DATE AS FAC_ADMIT_DT
            ,Z.DISCHARGE_DATE AS FAC_DSCHRG_DT
            ,Z.FAC_DSCHRG_DSPSTN_CD
            ,Z.FAC_DSCHRG_DSPSTN_DESC
            ,Z.READMSN_6_MONTH_CNT
            ,Z.READMSN_12_MONTH_CNT
            ,Z.ORIG_PAT_EVENT_ID
            ,Z.BYPASS_PROG_EXCLNS_FLG
            ,Z.REC_TXT
            ,Z.CRTD_USER
            ,Z.CRTD_DT
            ,Z.UPDTD_USER
            ,Z.UPDTD_DT
            ,Z.PAT_OTH_PHONE
            ,Z.AFLTN_PROG_TXT
            ,Z.PHYS_GRP_TXT
            ,Z.PAT_EVENT_TM
            ,Z.ADMIT_TM
            ,Z.DSCHRG_TM
            ,Z.STATUS_FLAG
            ,Z.PROCESS_COMMENT
            ,Z.FAC_SRC_CD
            ,Z.ADT_VENDOR
            ,Z.DISCHARGE_FILE_LOG
            --ENDREGION
          FROM
          (
            SELECT
              A.*
              ,B.FILE_LOG_ID AS DISCHARGE_FILE_LOG
              ,A.NEW_PAT_EVENT_DT AS ADMIT_DATE
              ,CASE
                WHEN A.F_FILE_CRTD_DT = MAX(A.F_FILE_CRTD_DT) OVER(PARTITION BY A.MBR_ID,B.NEW_PAT_EVENT_DT,A.ADT_VENDOR) THEN B.NEW_PAT_EVENT_DT
                ELSE NULL
              END AS DISCHARGE_DATE
            FROM
            (
            --REGION INITIAL ADMITS TO JOIN WITH DISCHARGES
              SELECT
              --REGION
                F.FILE_LOG_ID AS F_FILE_LOG_ID,
                F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
                F.FILE_NM AS F_FILE_NM,
                F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
                F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
                F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
                F.REC_TOT_CNT AS F_REC_TOT_CNT,
                F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
                F.REC_BAD_CNT AS F_REC_BAD_CNT,
                F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
                F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
                F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
                F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
                F.REC_ERR_CNT AS F_REC_ERR_CNT,
                F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
                F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
                F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
                F.LOAD_END_DT AS F_LOAD_END_DT,
                F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
                F.CRTD_USER AS F_CRTD_USER,
                F.CRTD_DT AS F_CRTD_DT,
                F.UPDTD_USER AS F_UPDTD_USER,
                F.UPDTD_DT AS F_UPDTD_DT,
                F.ADT_VENDOR,
                S.*,
                CASE
                  WHEN S.PAT_EVENT_DT LIKE '%Na%' THEN NULL
                  WHEN SUBSTR(S.PAT_EVENT_DT,4,1) = '/' THEN '0'||SUBSTR(S.PAT_EVENT_DT,1,2)||'0'||SUBSTR(S.PAT_EVENT_DT,3,6)
                  WHEN SUBSTR(S.PAT_EVENT_DT,2,1) = '/' THEN '0'||S.PAT_EVENT_DT
                  WHEN SUBSTR(S.PAT_EVENT_DT,5,1) = '/' THEN SUBSTR(S.PAT_EVENT_DT,1,3)||'0'||SUBSTR(S.PAT_EVENT_DT,4,6)
                  WHEN S.PAT_EVENT_DT = '01/00/1900' THEN NULL
                  ELSE S.PAT_EVENT_DT
                END AS PAT_EVENT_DT_FIX,
                CAST(CAST(CAST(TRIM(PAT_EVENT_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_PAT_EVENT_DT
                
                --ENDREGION
              FROM 
              (
                SELECT F.*
                  ,CASE
                    WHEN FILE_NM LIKE '%SES%' THEN 'SES'
                    WHEN FILE_NM LIKE '%CP%' THEN 'CP'
                    WHEN FILE_NM LIKE '%PP%' THEN 'PP'
                    WHEN FILE_NM LIKE '%AI%' THEN 'AI'
                    ELSE 'MISC'
                  END AS ADT_VENDOR
                FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
                WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
                  AND FILE_TYPE_DESC LIKE '%ADT%'
              ) F
              JOIN 
              (
                SELECT *
                FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
                WHERE PAT_EVENT_TYPE_CD LIKE 'ADMIT%'
              ) S
                ON F.FILE_LOG_ID = S.FILE_LOG_ID
                
            --  QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID,PAT_EVENT_DT,ADT_VENDOR ORDER BY F_FILE_CRTD_DT DESC) = 1
            --ENDREGION
            ) A
            LEFT JOIN 
            (
            --REGION PULLS DISCHARGE EVENT TYPES TO JOIN TO ADMITS
              SELECT
              --REGION
                F.FILE_LOG_ID AS F_FILE_LOG_ID,
                F.TRADING_PARTNER_ID AS F_TRADING_PARTNER_ID,
                F.FILE_NM AS F_FILE_NM,
                F.FILE_CRTD_USER_NM AS F_FILE_CRTD_USER_NM,
                F.FILE_CRTD_DT AS F_FILE_CRTD_DT,
                F.FILE_TYPE_DESC AS F_FILE_TYPE_DESC,
                F.REC_TOT_CNT AS F_REC_TOT_CNT,
                F.REC_LOAD_CNT AS F_REC_LOAD_CNT,
                F.REC_BAD_CNT AS F_REC_BAD_CNT,
                F.REC_DISCARD_CNT AS F_REC_DISCARD_CNT,
                F.REC_INSRT_MAIN_CNT AS F_REC_INSRT_MAIN_CNT,
                F.REC_UPD_MAIN_CNT AS F_REC_UPD_MAIN_CNT,
                F.REC_INSRT_HIST_CNT AS F_REC_INSRT_HIST_CNT,
                F.REC_ERR_CNT AS F_REC_ERR_CNT,
                F.REC_IGNORE_CNT AS F_REC_IGNORE_CNT,
                F.LOAD_STAT_CD AS F_LOAD_STAT_CD,
                F.LOAD_STRT_DT AS F_LOAD_STRT_DT,
                F.LOAD_END_DT AS F_LOAD_END_DT,
                F.LOAD_ERR_DESC AS F_LOAD_ERR_DESC,
                F.CRTD_USER AS F_CRTD_USER,
                F.CRTD_DT AS F_CRTD_DT,
                F.UPDTD_USER AS F_UPDTD_USER,
                F.UPDTD_DT AS F_UPDTD_DT,
                F.ADT_VENDOR,
                S.*,
                --CONVERTS DATES
                CASE
                  WHEN S.PAT_EVENT_DT LIKE '%Na%' THEN NULL
                  WHEN SUBSTR(S.PAT_EVENT_DT,4,1) = '/' THEN '0'||SUBSTR(S.PAT_EVENT_DT,1,2)||'0'||SUBSTR(S.PAT_EVENT_DT,3,6)
                  WHEN SUBSTR(S.PAT_EVENT_DT,2,1) = '/' THEN '0'||S.PAT_EVENT_DT
                  WHEN SUBSTR(S.PAT_EVENT_DT,5,1) = '/' THEN SUBSTR(S.PAT_EVENT_DT,1,3)||'0'||SUBSTR(S.PAT_EVENT_DT,4,6)
                  WHEN S.PAT_EVENT_DT = '01/00/1900' THEN NULL
                  ELSE S.PAT_EVENT_DT
                END AS PAT_EVENT_DT_FIX,
                CAST(CAST(CAST(TRIM(PAT_EVENT_DT_FIX) AS VARCHAR(10)) AS DATE FORMAT 'MM/DD/YYYY') AS DATE FORMAT 'YYYY-MM-DD') AS NEW_PAT_EVENT_DT
                --ENDREGION
              FROM 
              (
                SELECT F.*
                  ,CASE
                    WHEN FILE_NM LIKE '%SES%' THEN 'SES'
                    WHEN FILE_NM LIKE '%CP%' THEN 'CP'
                    WHEN FILE_NM LIKE '%PP%' THEN 'PP'
                    WHEN FILE_NM LIKE '%AI%' THEN 'AI'
                    ELSE 'MISC'
                  END AS ADT_VENDOR
                FROM MEDECON_PRD.HOMEBRIDGE_FILE_LOG F
                WHERE F.TRADING_PARTNER_ID IN ('876976766','SecureExchange','SES','WC')
                  AND FILE_TYPE_DESC LIKE '%ADT%'
              ) F
              JOIN 
              (
                SELECT *
                FROM MEDECON_PRD.HOMEBRIDGE_PATIENT_EVENT_STAGE S
                WHERE PAT_EVENT_TYPE_CD LIKE 'DISCHARGE%'
              ) S
                ON F.FILE_LOG_ID = S.FILE_LOG_ID
                
             -- QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID,PAT_EVENT_DT,ADT_VENDOR ORDER BY F_FILE_CRTD_DT DESC) = 1
                --ENDREGION
            ) B
              ON A.MBR_ID = B.MBR_ID
                AND (A.FAC_NPI = B.FAC_NPI OR A.FAC_NM = B.FAC_NM)
                AND B.NEW_PAT_EVENT_DT - A.NEW_PAT_EVENT_DT < 60
                AND B.NEW_PAT_EVENT_DT - A.NEW_PAT_EVENT_DT > 0
        --        AND A.FAC_NPI = B.FAC_NPI --DO WE INCLUDE THIS? DROPS 11% WHEN INCLUDING NPI
                AND A.ADT_VENDOR = B.ADT_VENDOR
        --    QUALIFY ROW_NUMBER() OVER(PARTITION BY A.MBR_ID,B.NEW_PAT_EVENT_DT,A.ADT_VENDOR ORDER BY A.F_FILE_CRTD_DT DESC) = 1   
          ) Z
          --QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID,ADMIT_DATE,ADT_VENDOR ORDER BY DISCHARGE_DATE ASC) = 1 
        ) A
      ) A
    ) A
   -- QUALIFY ROW_NUMBER() OVER(PARTITION BY MBR_ID, FACILITY_ADMIT_DATE_NEW, FACILITY_DISCHARGE_DATE_NEW ORDER BY F_FILE_CRTD_DT DESC) = 1 
  ) B
    ON S.PAT_EVENT_TYPE_CD LIKE 'DISCHARGE%'
      AND S.FILE_LOG_ID = B.FILE_LOG_ID
      
  WHERE B.FILE_LOG_ID IS NULL
--ENDREGION
--ENDREGION
) A 


--ENDREGION
--
) CONSO
--ENDREGION

  )F
  LEFT JOIN MEDECON_PRD.PAC_ADT_MISSING_NPI P
    ON F.FAC_NM = P.FAC_NM
)F

--LISTED FACILITY JOINS
LEFT JOIN MEDECON_PRD.NPI_CONSOLIDATION N
  ON TRIM(F.FAC_NPI_FIX) = TRIM(N.UNIQUE_NPI)
LEFT JOIN EIW_PRD.NPPES_NPI_TAXONOMY T
  ON N.UNIQUE_NPI = T.NPI
LEFT JOIN EIW_PRD.NPPES_NPI_DEMOGRAPHIC D
  ON N.UNIQUE_NPI = D.NPI
LEFT JOIN MEDECON_PRD.TXNMY_ROLLUP TR
  ON T.TXNMY_CD = TR.TXNMY_CD

--ORIGINATING FACILITY JOINS
LEFT JOIN MEDECON_PRD.NPI_CONSOLIDATION C
  ON TRIM(F.ORDG_PHYS_NPI) = TRIM(C.UNIQUE_NPI)
LEFT JOIN EIW_PRD.NPPES_NPI_TAXONOMY TA
  ON C.UNIQUE_NPI = TA.NPI
LEFT JOIN EIW_PRD.NPPES_NPI_DEMOGRAPHIC DA
  ON C.UNIQUE_NPI = DA.NPI
LEFT JOIN MEDECON_PRD.TXNMY_ROLLUP TRA
  ON TA.TXNMY_CD = TRA.TXNMY_CD

--PRIMARY CARE PHYSICIAN JOINS
LEFT JOIN MEDECON_PRD.NPI_CONSOLIDATION O
  ON TRIM(F.PRIM_CARE_PHYS_NPI) = TRIM(O.UNIQUE_NPI)
LEFT JOIN EIW_PRD.NPPES_NPI_TAXONOMY TB
  ON O.UNIQUE_NPI = TB.NPI
LEFT JOIN EIW_PRD.NPPES_NPI_DEMOGRAPHIC DB
  ON O.UNIQUE_NPI = DB.NPI
LEFT JOIN MEDECON_PRD.TXNMY_ROLLUP TRB
  ON TB.TXNMY_CD = TRB.TXNMY_CD

--WHERE F_FILE_CRTD_DT >= '2019-12-12'

GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119

--REMOVES FAKE TEST LINES
WHERE PAT_FIRST_NM NOT LIKE 'XX%' OR PAT_FIRST_NM IS NULL

--QUALIFY ROW_NUMBER() OVER (PARTITION BY SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST,FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC) = 1

);
set role dbadmin;
drop table if exists medecon_prd.z_mdcb_one_off;
create table medecon_prd.z_mdcb_one_off(
pyr_nm  varchar(300),
mbr_id  varchar(300),
source  varchar(20),
fac_admit_dt date,
fac_dschrg_dt date,
source_name varchar(20),
max_acuity integer,
);
drop table if exists medecon_prd.z_mdcb_one_off;
create table medecon_prd.z_mdcb_one_off(
pyr_nm  varchar(300),
mbr_id  varchar(300),
source  varchar(20),
fac_admit_dt date,
fac_dschrg_dt date,
source_name varchar(20),
max_acuity integer
);
select * from medecon_prd.z_mdcb_one_off;
select '2021-01-12'::date - '2011-12-30'::date;
select ('2021-01-12'::date - '2011-12-30'::date)/365)::integer;
select ('2021-01-12'::date - '2011-12-30'::date)/365)::integer;
select (('2021-01-12'::date - '2011-12-30'::date)/365)::integer;
select * from medecon_prd.z_mdcb_one_off;
select ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC)
from medecon_prd.z_mdcb_one_off;
select ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC)
from medecon_prd.z_mdcb_one_off;
select * from medecon_prd.z_mdcb_one_off;
select ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC)
from medecon_prd.z_mdcb_one_off;
select *, ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC)
from medecon_prd.z_mdcb_one_off;
select * 
from medecon_prd.z_mdcb_one_off
having ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC)
=1;
select * from medecon_prd.z_mdcb_one_off;
select * , ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC)

from medecon_prd.z_mdcb_one_off;
select * , bool_xor(ROW_NUMBER()) OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC)
from medecon_prd.z_mdcb_one_off;
select * , ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC)
from medecon_prd.z_mdcb_one_off;
select * , ROW_NUMBER() as ct OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC)
from medecon_prd.z_mdcb_one_off;
select * , ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC) as CT
from medecon_prd.z_mdcb_one_off;
with (
select * , ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC) as CT
from medecon_prd.z_mdcb_one_off) as rnk

select * from rnk where ct=1;
with (
select * , ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC) as CT
from medecon_prd.z_mdcb_one_off) as rnk,

select * from rnk where ct=1;
with (
select * , ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC) as CT
from medecon_prd.z_mdcb_one_off)  rnk

select * from rnk where ct=1;
with 
select * , ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC) as CT
from medecon_prd.z_mdcb_one_off as  rnk

select * from rnk where ct=1;
with rnk as (
select * , ROW_NUMBER() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC) as CT
from medecon_prd.z_mdcb_one_off )

select * from rnk where ct=1;
select * , first_value() OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC) as CT
from medecon_prd.z_mdcb_one_off;
select * , first_value(pyr_nm) OVER (PARTITION BY PYR_NM, SOURCE, MBR_ID, FAC_ADMIT_DT ORDER BY FAC_ADMIT_DT ASC NULLS LAST, FAC_DSCHRG_DT DESC NULLS LAST, MAX_ACUITY DESC) as CT
from medecon_prd.z_mdcb_one_off;
CREATE or replace VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS 
SELECT
    'FLB' AS PAYER
    ,CASE
       When A.CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When A.CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When A.CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When A.CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When A.CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When A.CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When A.CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When A.CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When A.CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1

    ,TRUNC(A.CLM_SVC_BGN_DT,'MONTH') AS INCURRED
--    ,TRUNC(A.MDLX_PAID_DT,'MONTH') AS PAID

    ,A.PG_CAT
    ,CASE 
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN A.PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN A.PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE A.PG_PRODUCT 
    END AS PG_PRODUCT

--    ,A.CCXFLAG
--    ,SUM(A.SRPR_CALD_ALWD_AM) AS ALLOWED
--    ,SUM(A.CLM_SVCU_CT) AS UNITS
    ,COUNT(DISTINCT A.CNSR_MBR_ID) AS PATIENTS

--FROM MEDECON_PRD.FLBLUE_XT_201601_202005_202005 A

FROM MEDECON_PRD.FLBLUE_EXTERNAL A --_LATEST A

INNER JOIN
    (SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY

        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
--    FROM MEDECON_PRD.FLBLUE_XT_201601_201907_201907

    FROM MEDECON_PRD.FLBLUE_EXTERNAL--_LATEST
    WHERE DACL_LOS_1_CD = '12' -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        --AND PG_ELIG = 1 -- CONTRCT DOES NOT SAY SPEND MUST BE PG ELIG
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') -- LIMITING TO PG ELIG PRODUCTS

    GROUP BY ---1,2
    CY
   ,CNSR_MBR_ID
    -- HAVING ALLOWED BETWEEN 15 AND 25000) B
    HAVING SUM(SRPR_CALD_ALWD_AM) BETWEEN 15 and 25000) B

ON A.CNSR_MBR_ID = B.CNSR_MBR_ID -- LIMITING TO MEMBERS WITH BETWEEN 15 AND 25000 IN ACTUAL ALLOWED
AND CY1 = B.CY

--INNER JOIN
--    (
--    SELECT
--        DISTINCT FLB.HCPC
--        FROM MEDECON_PRD.FLB_CAP_PG FLB
--        INNER JOIN EIW_PRD.SERVICE SVC
--        ON FLB.SERVICE_CD = SVC.SVC_CD
--        WHERE SVC.SVC_CAT_CD IN ('THH','WHS')
--        AND FLB.PG_ELGBL IN 'Y')FLB
--ON A.DACL_MLPC_1_CD = FLB.HCPC -- LIMITING TO CODES IN PG

WHERE A.DACL_LOS_1_CD = '12' -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 -- LIMITING TO CODES IN PG
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') -- LIMITING TO PG ELIG PRODUCTS

    --AND A.CVOUT_SVC_IN = 0 THIS FIELD ONLY CONTAINS NULL
    --AND A.CVOUT_PVDR_IN = 0 THIS FIELD ONLY CONTAINS 0

GROUP BY --- 1,2,3,4,5
PAYER,
CY1,
INCURRED,
A.PG_CAT,
PG_PRODUCT;
---ORDER BY 3,5;
CREATE  VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS 
SELECT
    'FLB' AS PAYER
    ,CASE
       When A.CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When A.CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When A.CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When A.CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When A.CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When A.CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When A.CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When A.CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When A.CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1

    ,TRUNC(A.CLM_SVC_BGN_DT,'MONTH') AS INCURRED
--    ,TRUNC(A.MDLX_PAID_DT,'MONTH') AS PAID

    ,A.PG_CAT
    ,CASE 
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN A.PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN A.PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE A.PG_PRODUCT 
    END AS PG_PRODUCT

--    ,A.CCXFLAG
--    ,SUM(A.SRPR_CALD_ALWD_AM) AS ALLOWED
--    ,SUM(A.CLM_SVCU_CT) AS UNITS
    ,COUNT(DISTINCT A.CNSR_MBR_ID) AS PATIENTS

--FROM MEDECON_PRD.FLBLUE_XT_201601_202005_202005 A

FROM MEDECON_PRD.FLBLUE_EXTERNAL A --_LATEST A

INNER JOIN
    (SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY

        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
--    FROM MEDECON_PRD.FLBLUE_XT_201601_201907_201907

    FROM MEDECON_PRD.FLBLUE_EXTERNAL--_LATEST
    WHERE DACL_LOS_1_CD = '12' -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        --AND PG_ELIG = 1 -- CONTRCT DOES NOT SAY SPEND MUST BE PG ELIG
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') -- LIMITING TO PG ELIG PRODUCTS

    GROUP BY ---1,2
    CY
   ,CNSR_MBR_ID
    -- HAVING ALLOWED BETWEEN 15 AND 25000) B
    HAVING SUM(SRPR_CALD_ALWD_AM) BETWEEN 15 and 25000) B

ON A.CNSR_MBR_ID = B.CNSR_MBR_ID -- LIMITING TO MEMBERS WITH BETWEEN 15 AND 25000 IN ACTUAL ALLOWED
AND CY1 = B.CY

--INNER JOIN
--    (
--    SELECT
--        DISTINCT FLB.HCPC
--        FROM MEDECON_PRD.FLB_CAP_PG FLB
--        INNER JOIN EIW_PRD.SERVICE SVC
--        ON FLB.SERVICE_CD = SVC.SVC_CD
--        WHERE SVC.SVC_CAT_CD IN ('THH','WHS')
--        AND FLB.PG_ELGBL IN 'Y')FLB
--ON A.DACL_MLPC_1_CD = FLB.HCPC -- LIMITING TO CODES IN PG

WHERE A.DACL_LOS_1_CD = '12' -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 -- LIMITING TO CODES IN PG
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') -- LIMITING TO PG ELIG PRODUCTS

    --AND A.CVOUT_SVC_IN = 0 THIS FIELD ONLY CONTAINS NULL
    --AND A.CVOUT_PVDR_IN = 0 THIS FIELD ONLY CONTAINS 0

GROUP BY --- 1,2,3,4,5
PAYER,
CY1,
INCURRED,
A.PG_CAT,
PG_PRODUCT;
SELECT
    'FLB' AS PAYER
    ,CASE
       When A.CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When A.CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When A.CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When A.CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When A.CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When A.CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When A.CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When A.CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When A.CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1

    ,TRUNC(A.CLM_SVC_BGN_DT,'MONTH') AS INCURRED
--    ,TRUNC(A.MDLX_PAID_DT,'MONTH') AS PAID

    ,A.PG_CAT
    ,CASE 
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN A.PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN A.PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE A.PG_PRODUCT 
    END AS PG_PRODUCT

--    ,A.CCXFLAG
--    ,SUM(A.SRPR_CALD_ALWD_AM) AS ALLOWED
--    ,SUM(A.CLM_SVCU_CT) AS UNITS
    ,COUNT(DISTINCT A.CNSR_MBR_ID) AS PATIENTS

--FROM MEDECON_PRD.FLBLUE_XT_201601_202005_202005 A

FROM MEDECON_PRD.FLBLUE_EXTERNAL A --_LATEST A;
---ORDER BY 3,5;
SELECT
    'FLB' AS PAYER
    ,CASE
       When A.CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When A.CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When A.CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When A.CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When A.CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When A.CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When A.CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When A.CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When A.CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1

    ,TRUNC(A.CLM_SVC_BGN_DT,'MONTH') AS INCURRED
--    ,TRUNC(A.MDLX_PAID_DT,'MONTH') AS PAID

    ,A.PG_CAT
    ,CASE 
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN A.PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN A.PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN A.PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE A.PG_PRODUCT 
    END AS PG_PRODUCT

--    ,A.CCXFLAG
--    ,SUM(A.SRPR_CALD_ALWD_AM) AS ALLOWED
--    ,SUM(A.CLM_SVCU_CT) AS UNITS
    ,COUNT(DISTINCT A.CNSR_MBR_ID) AS PATIENTS

--FROM MEDECON_PRD.FLBLUE_XT_201601_202005_202005 A

FROM MEDECON_PRD.FLBLUE_EXTERNAL A --_LATEST A

INNER JOIN
    (SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY

        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
--    FROM MEDECON_PRD.FLBLUE_XT_201601_201907_201907

    FROM MEDECON_PRD.FLBLUE_EXTERNAL--_LATEST
    WHERE DACL_LOS_1_CD = '12' -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        --AND PG_ELIG = 1 -- CONTRCT DOES NOT SAY SPEND MUST BE PG ELIG
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') -- LIMITING TO PG ELIG PRODUCTS

    GROUP BY ---1,2
    1,2
--     CY
--    ,CNSR_MBR_ID
    -- HAVING ALLOWED BETWEEN 15 AND 25000) B
    HAVING SUM(SRPR_CALD_ALWD_AM) BETWEEN 15 and 25000) B

ON A.CNSR_MBR_ID = B.CNSR_MBR_ID -- LIMITING TO MEMBERS WITH BETWEEN 15 AND 25000 IN ACTUAL ALLOWED
AND CY1 = B.CY

--INNER JOIN
--    (
--    SELECT
--        DISTINCT FLB.HCPC
--        FROM MEDECON_PRD.FLB_CAP_PG FLB
--        INNER JOIN EIW_PRD.SERVICE SVC
--        ON FLB.SERVICE_CD = SVC.SVC_CD
--        WHERE SVC.SVC_CAT_CD IN ('THH','WHS')
--        AND FLB.PG_ELGBL IN 'Y')FLB
--ON A.DACL_MLPC_1_CD = FLB.HCPC -- LIMITING TO CODES IN PG

WHERE A.DACL_LOS_1_CD = '12' -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 -- LIMITING TO CODES IN PG
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') -- LIMITING TO PG ELIG PRODUCTS

    --AND A.CVOUT_SVC_IN = 0 THIS FIELD ONLY CONTAINS NULL
    --AND A.CVOUT_PVDR_IN = 0 THIS FIELD ONLY CONTAINS 0

)

CREATE or replace VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS 

select * from parsed
GROUP BY --- 1,2,3,4,5
1,2,3,4,5
-- PAYER,
-- CY1,
-- INCURRED,
-- A.PG_CAT,
-- PG_PRODUCT
;---ORDER BY 3,5;
drop table if exists medecon_prd.z_mdcb_flblue;
create table medecon_prd.z_mdcb_flblue as 
select 
    'FHB' as payer, 
    clm_svc_ban_dt,
    pg_cat,
    pg_product,
    cnsr_mbr_id,
    srpr_cald_alwd_am,
    '12' as dacl_los_i_cd;
drop table if exists medecon_prd.z_mdcb_flblue;
create table medecon_prd.z_mdcb_flblue as 
select 
    'FHB' as payer, 
    clm_svc_bgn_dt,
    pg_cat,
    pg_product,
    cnsr_mbr_id,
    srpr_cald_alwd_am,
    '12' as dacl_los_i_cd;
create table medecon_prd.z_mdcb_flblue as 
select 
    'FHB' as payer, 
    CLM_SVC_BGN_DT,
    pg_cat,
    pg_product,
    cnsr_mbr_id,
    srpr_cald_alwd_am,
    '12' as dacl_los_i_cd
;
drop table if exists medecon_prd.z_mdcb_flblue;
create table medecon_prd.z_mdcb_flblue as 
select 
    'FHB' as payer, 
    CLM_SVC_BGN_DT,
    pg_cat,
    pg_product,
    cnsr_mbr_id,
    srpr_cald_alwd_am,
    '12' as dacl_los_i_cd
    
    from medecon_prd.flblue_external;
drop table if exists medecon_prd.z_mdcb_flblue;
with astack as 
(select * from medecon_prd.z_mdcb_one_off ),
bstack as 
(select * from medecon_prd.z_mdcb_one_off
where id < 12)

select astack.id, bstack.id;
with astack as 
(select * from medecon_prd.z_mdcb_one_off ) A,
bstack as 
(select * from medecon_prd.z_mdcb_one_off
where id < 12) B

select A.id
from astack A
join bstack on 
(a.id = b.id);
with astack as 
(select * from medecon_prd.z_mdcb_one_off ) ,
bstack as 
(select * from medecon_prd.z_mdcb_one_off
where id < 12) 

select A.id
from astack A
join bstack B on 
(a.id = b.id);
with astack as 
(select * from medecon_prd.z_mdcb_one_off ) ,
bstack as 
(select * from medecon_prd.z_mdcb_one_off
where id < 12) 

select astack.id
from astack A
join bstack B on 
(a.id = b.id);
with astack as 
(select * from medecon_prd.z_mdcb_one_off ) ,
bstack as 
(select * from medecon_prd.z_mdcb_one_off
where id < 12) end

select astack.id
from astack A
join bstack B on 
(a.id = b.id);
select * from medecon_prd.z_mdcb_one_off;
with astack as 
(select * from medecon_prd.z_mdcb_one_off ) ,
bstack as 
(select * from medecon_prd.z_mdcb_one_off
where max_acuity < 4) 

select a.*
from astack A
join bstack B on 
(a.mbr_id = b.mbr_id);
with astack as (
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT

    ,COUNT(DISTINCT CNSR_MBR_ID) AS PATIENTS

FROM MEDECON_PRD.FLBLUE_EXTERNAL

)
select * from astack limit 50;
with astack as (
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT

    ,COUNT(DISTINCT CNSR_MBR_ID) AS PATIENTS

FROM MEDECON_PRD.FLBLUE_EXTERNAL

)
select * from astack limit 50;
with astack as (
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT

    ,COUNT(DISTINCT CNSR_MBR_ID) AS PATIENTS

FROM MEDECON_PRD.FLBLUE_EXTERNAL
group by 1,2

)
select * from astack limit 50;
with astack as (
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT

    ,COUNT(DISTINCT CNSR_MBR_ID) AS PATIENTS

FROM MEDECON_PRD.FLBLUE_EXTERNAL
group by CLM_SVC_BGN_DT

)
select * from astack limit 50;
with astack as (
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT

    ,COUNT(DISTINCT CNSR_MBR_ID) AS PATIENTS

FROM MEDECON_PRD.FLBLUE_EXTERNAL
group by CLM_SVC_BGN_DT, pg_cat, pg_product

)
select * from astack limit 50;
CREATE TABLE prueba.medecon_prd.z_mdcb_blue
(cnsr_mbr_id varchar(25),
payer VARCHAR(25),
clm_svc_bgn_dt date(25),
nulthing VARCHAR(25),
Incurred VARCHAR(25),
pg_cat VARCHAR(25),
pg_product VARCHAR(50),
SRPR_CALD_ALWD_AM INTEGER,
DACL_LOS_1_CD INTEGER);
CREATE TABLE prueba.medecon_prd.z_mdcb_blue
(cnsr_mbr_id varchar(25),
payer VARCHAR(25),
clm_svc_bgn_dt date(25),
nulthing VARCHAR(25),
Incurred VARCHAR(25),
pg_cat VARCHAR(25),
pg_product VARCHAR(50),
SRPR_CALD_ALWD_AM INTEGER,
DACL_LOS_1_CD INTEGER);
CREATE TABLE prueba.medecon_prd.z_mdcb_blue_new
(cnsr_mbr_id varchar(25),
payer VARCHAR(25),
clm_svc_bgn_dt date(25),
nulthing VARCHAR(25),
Incurred VARCHAR(25),
pg_cat VARCHAR(25),
pg_product VARCHAR(50),
SRPR_CALD_ALWD_AM INTEGER,
DACL_LOS_1_CD INTEGER);
select * from medecon_prd.z_mdcb_blue_new;
drop table medecon_prd.z_mdcb_blue;
select * 
  ,'2016-04-02' as MDLX_PAID_DT
    ,'P' as DACL_CLST_CD
    ,1 as PG_ELIG
    ,12 as DACL_LOS_1_CD
from medecon_prd.z_mdcb_blue_new;
create table medecon_prd.z_mdcb_blue as
select * 
  ,'2016-04-02' as MDLX_PAID_DT
    ,'P' as DACL_CLST_CD
    ,1 as PG_ELIG

from medecon_prd.z_mdcb_blue_new;
select * from medecon_prd.z_mdcb_blue;
with astack as (
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT
    ,CNSR_MBR_ID
    ,(select COUNT(DISTINCT CNSR_MBR_ID) from medecon_prd.z_mdcb_blue) AS PATIENTS
    
    ,MDLX_PAID_DT
    ,DACL_CLST_CD
    ,PG_ELIG
    ,DACL_LOS_1_CD
    
    
FROM MEDECON_PRD.z_mdcb_blue

) ,

bstack as (
    SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
    GROUP BY 
    CY
   ,CNSR_MBR_ID
    HAVING sum(SRPR_CALD_ALWD_AM) BETWEEN 15 AND 25000

) 


 -- CREATE or replace VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS 

select 
    a.*
     from astack A 

INNER JOIN
 bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 
GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT;
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT
    ,CNSR_MBR_ID
    ,(select COUNT(DISTINCT CNSR_MBR_ID) from medecon_prd.z_mdcb_blue) AS PATIENTS
    
    ,MDLX_PAID_DT
    ,DACL_CLST_CD
    ,PG_ELIG
    ,DACL_LOS_1_CD
    
  
    
    
FROM MEDECON_PRD.z_mdcb_blue
group by cy1;
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT
    ,CNSR_MBR_ID
    ,(select COUNT(DISTINCT CNSR_MBR_ID) from medecon_prd.z_mdcb_blue) AS PATIENTS
    
    ,MDLX_PAID_DT
    ,DACL_CLST_CD
    ,PG_ELIG
    ,DACL_LOS_1_CD
    
  
    
    
FROM MEDECON_PRD.z_mdcb_blue
group by cy1, CLM_SVC_BGN_DT;
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT
    ,CNSR_MBR_ID
   -- ,(select COUNT(DISTINCT CNSR_MBR_ID) from medecon_prd.z_mdcb_blue) AS PATIENTS
    
    ,MDLX_PAID_DT
    ,DACL_CLST_CD
    ,PG_ELIG
    ,DACL_LOS_1_CD
    
  
    
    
FROM MEDECON_PRD.z_mdcb_blue;
with astack as (
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT
    ,CNSR_MBR_ID
   -- ,(select COUNT(DISTINCT CNSR_MBR_ID) from medecon_prd.z_mdcb_blue) AS PATIENTS
    
    ,MDLX_PAID_DT
    ,DACL_CLST_CD
    ,PG_ELIG
    ,DACL_LOS_1_CD
    
  
    
    
FROM MEDECON_PRD.z_mdcb_blue



) ,

bstack as (
    SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
    GROUP BY 
    CY
   ,CNSR_MBR_ID
    HAVING sum(SRPR_CALD_ALWD_AM) BETWEEN 15 AND 25000

) 


 -- CREATE or replace VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS 

select 
    a.*
     from astack A 

INNER JOIN
 bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 
GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT;
with astack as (
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT
    ,CNSR_MBR_ID
   -- ,(select COUNT(DISTINCT CNSR_MBR_ID) from medecon_prd.z_mdcb_blue) AS PATIENTS
    
    ,MDLX_PAID_DT
    ,DACL_CLST_CD
    ,PG_ELIG
    ,DACL_LOS_1_CD
    ,CLM_SVC_BGN_DT
  
    
    
FROM MEDECON_PRD.z_mdcb_blue



) ,

bstack as (
    SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
    GROUP BY 
    CY
   ,CNSR_MBR_ID
    HAVING sum(SRPR_CALD_ALWD_AM) BETWEEN 15 AND 25000

) 


 -- CREATE or replace VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS 

select 
    a.*
     from astack A 

INNER JOIN
 bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 
GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT;
with astack as (
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT
    ,CNSR_MBR_ID
   -- ,(select COUNT(DISTINCT CNSR_MBR_ID) from medecon_prd.z_mdcb_blue) AS PATIENTS
    
    ,MDLX_PAID_DT
    ,DACL_CLST_CD
    ,PG_ELIG
    ,DACL_LOS_1_CD
    ,CLM_SVC_BGN_DT
  
    
    
FROM MEDECON_PRD.z_mdcb_blue
group by CNSR_MBR_ID


) ,

bstack as (
    SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
    GROUP BY 
    CY
   ,CNSR_MBR_ID
    HAVING sum(SRPR_CALD_ALWD_AM) BETWEEN 15 AND 25000

) 


 -- CREATE or replace VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS 

select 
    a.*
     from astack A 

INNER JOIN
 bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 
GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT;
create table medecon_prd.z_mdcb_astack as 
SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT
    ,CNSR_MBR_ID
   -- ,(select COUNT(DISTINCT CNSR_MBR_ID) from medecon_prd.z_mdcb_blue) AS PATIENTS
    
    ,MDLX_PAID_DT
    ,DACL_CLST_CD
    ,PG_ELIG
    ,DACL_LOS_1_CD
    ,CLM_SVC_BGN_DT
  
    
    
FROM MEDECON_PRD.z_mdcb_blue;
create table medcon_prd.z_mdcb_bstack as 
SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        -- ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
--     GROUP BY 
--     CY
--    ,CNSR_MBR_ID
--     HAVING sum(SRPR_CALD_ALWD_AM) BETWEEN 15 AND 25000;
create table medecon_prd.z_mdcb_bstack as 
SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        -- ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
--     GROUP BY 
--     CY
--    ,CNSR_MBR_ID
--     HAVING sum(SRPR_CALD_ALWD_AM) BETWEEN 15 AND 25000;
select 
    a.*
     from medecon_prd.z_mdcb_astack a 

INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY);
select 
    a.*
     from medecon_prd.z_mdcb_astack a 

INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 
GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT;
select 
    a.*
     from medecon_prd.z_mdcb_astack a 

INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 
GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT
A.CNSR_MBR_ID;
select 
    a.*
     from medecon_prd.z_mdcb_astack a 

INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 
GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT,
A.CNSR_MBR_ID;
SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
     GROUP BY 
     CY
    ,CNSR_MBR_ID
     HAVING sum(SRPR_CALD_ALWD_AM) BETWEEN 15 AND 25000;
SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
     GROUP BY 
     CY
    ,CNSR_MBR_ID;
SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO');
SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        --,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
     GROUP BY 
     CY
    ,CNSR_MBR_ID
     --HAVING sum(SRPR_CALD_ALWD_AM) BETWEEN 15 AND 25000;
SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        --,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        --AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO');
SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,PG_CAT
        --,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        --AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
       -- AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO');
update MEDECON_PRD.z_mdcb_blue
set pg_cat = "THH";
update MEDECON_PRD.z_mdcb_blue
set pg_cat = 'THH';
select
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,PG_CAT
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
     GROUP BY 
     CY
    ,CNSR_MBR_ID;
select
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,PG_CAT
        --.SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
     GROUP BY 
     CY
    ,CNSR_MBR_ID;
select
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        .SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
     GROUP BY 
     CY
    ,CNSR_MBR_ID;
SELECT
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
     GROUP BY 
     CY
    ,CNSR_MBR_ID;
select
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        .SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
     GROUP BY 
     CY
    ,CNSR_MBR_ID
     HAVING sum(SRPR_CALD_ALWD_AM) BETWEEN 15 AND 25000;
drop table if exists  medecon_prd.z_mdcb_bstack;
create table medecon_prd.z_mdcb_bstack as 
select
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        .SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
     GROUP BY 
     CY
    ,CNSR_MBR_ID;
select
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        .SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
     GROUP BY 
     CY
    ,CNSR_MBR_ID;
drop table if exists  medecon_prd.z_mdcb_bstack;
create table medecon_prd.z_mdcb_bstack as 
select
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
     GROUP BY 
     CY
    ,CNSR_MBR_ID;
select 
    a.*
     from medecon_prd.z_mdcb_astack a 

INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 
GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT;
select 
    a.*
     from medecon_prd.z_mdcb_astack a 

INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 
GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT
A.CNSR_MBR_ID;
select 
    a.*
     from medecon_prd.z_mdcb_astack a;
select 
    *
     from medecon_prd.z_mdcb_astack A 
WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO');
update medecon_prd.z_mdcb_astack A
set PG_CAT = 'THH';
select 
    *
     from medecon_prd.z_mdcb_astack A 
WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 
INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)


GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT
A.CNSR_MBR_ID;
select 
    *
     from medecon_prd.z_mdcb_astack A 
WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 
INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 

GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT
A.CNSR_MBR_ID;
select 
    *
     from medecon_prd.z_mdcb_astack A 

INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 

GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT
A.CNSR_MBR_ID;
select 
    A.*
     from medecon_prd.z_mdcb_astack A 

INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 

GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT,
A.CNSR_MBR_ID;
select 
    A.*
     from medecon_prd.z_mdcb_astack A 

INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 

GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT,
A.CNSR_MBR_ID,
A.MDLX_paid_dt;
select 
    A.*
     from medecon_prd.z_mdcb_astack A 

INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 

GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT,
A.CNSR_MBR_ID,
A.MDLX_paid_dt, A.DACL_CLST_CD;
select 
    A.*
     from medecon_prd.z_mdcb_astack A 

INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 

GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT,
A.CNSR_MBR_ID,
A.MDLX_paid_dt, A.DACL_CLST_CD, A.pg_elig;
select 
    A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT
     from medecon_prd.z_mdcb_astack A 

INNER JOIN
 medecon_prd.z_mdcb_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 

GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT;
drop table if exists medecon_prd.blue_astack;
drop table if exists medecon_prd.blue_astack;
create temp table medecon_prd.blue_astack as
    SELECT
    'FLB' AS PAYER
    ,CASE
       When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
       When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
       When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
       When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
       When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
       When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
       When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
       When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
       When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
    End as CY1
    ,TRUNC(CLM_SVC_BGN_DT,'MONTH') AS INCURRED

    ,PG_CAT
    ,CASE 
        WHEN PG_PRODUCT = 'BLUEOPTIONS-EXCHANGE' THEN 'BLUEOPTIONS EXCHANGE'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-HSA' THEN 'BLUEOPTIONS HSA'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-LOWCOST' THEN 'BLUEOPTIONS LOWCOST'
        WHEN PG_PRODUCT = 'BLUEOPTIONS-NONHSA-PREDICTABLE' THEN 'BLUEOPTIONS PREDICTABLE'
        WHEN PG_PRODUCT = 'STATE' THEN 'STATE'
        WHEN PG_PRODUCT = 'MEDICARE PPO' THEN 'MEDICARE PPO'
        ELSE PG_PRODUCT 
    END AS PG_PRODUCT
    ,CNSR_MBR_ID
    ,(select COUNT(DISTINCT CNSR_MBR_ID) from medecon_prd.z_mdcb_blue) AS PATIENTS
    -- ,(select COUNT(DISTINCT CNSR_MBR_ID) from medecon_prd.z_mdcb_blue) AS PATIENTSFLBLUE_EXTERNAL
    ,MDLX_PAID_DT
    ,DACL_CLST_CD
    ,PG_ELIG
    ,DACL_LOS_1_CD
    ,CLM_SVC_BGN_DT
    
FROM MEDECON_PRD.z_mdcb_blue;
-- from medecon_prd.FLBLUE_EXTERNAL

drop table if exists medecon_prd.blue_bstack;
create temp table medecon_prd.blue_bstack as
select
        CASE
            When CLM_SVC_BGN_DT Between '2014/04/01' and '2015/03/31' then 'Y0'
            When CLM_SVC_BGN_DT Between '2015/04/01' and '2016/03/31' then 'Y1'
            When CLM_SVC_BGN_DT Between '2016/04/01' and '2017/03/31' then 'Y2'
            When CLM_SVC_BGN_DT Between '2017/04/01' and '2018/03/31' then 'Y3'
            When CLM_SVC_BGN_DT Between '2018/04/01' and '2019/03/31' then 'RY1'
            When CLM_SVC_BGN_DT Between '2019/04/01' and '2020/03/31' then 'RY2'
            When CLM_SVC_BGN_DT Between '2020/04/01' and '2021/03/31' then 'RY3'
            When CLM_SVC_BGN_DT Between '2021/04/01' and '2022/03/31' then 'RY4'
            When CLM_SVC_BGN_DT Between '2022/04/01' and '2023/03/31' then 'RY5'
        End as CY
        ,CNSR_MBR_ID
        ,SUM(SRPR_CALD_ALWD_AM) AS ALLOWED
    FROM MEDECON_PRD.z_mdcb_blue--_LATEST
    WHERE DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
        AND CLM_SVC_BGN_DT BETWEEN '2016/04/01' AND '2023-03-31'
        AND PG_CAT = 'THH'
        AND CNSR_MBR_ID <> '56250060596'
        AND PG_PRODUCT IN
            ('BLUEOPTIONS-HSA'
            ,'BLUEOPTIONS-NONHSA-LOWCOST'
            ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
            ,'BLUEOPTIONS-EXCHANGE'
            ,'STATE'
            ,'MEDICARE PPO') 
     GROUP BY 
     CY
    ,CNSR_MBR_ID;
CREATE or replace VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS

select 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT
     from medecon_prd.blue_astack A 

INNER JOIN
     medecon_prd.blue_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 

GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT;
select * from MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH;
select * from MEDECON_PRD.blue_astack;
select * from MEDECON_PRD.blue_bstack;
select * from MEDECON_PRD.z_mdcb_blue;
CREATE or replace VIEW MEDECON_PRD.CORE_FLB_THH_PG_PATIENTS_BY_MONTH AS

select 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT
     from medecon_prd.blue_astack A 

INNER JOIN
     medecon_prd.blue_bstack B
ON (a.CNSR_MBR_ID = b.CNSR_MBR_ID 
AND a.CY1 = b.CY)

WHERE A.DACL_LOS_1_CD = 12 -- LIMITING TO POS 12
    AND A.CLM_SVC_BGN_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.MDLX_PAID_DT BETWEEN '2016-04-01' AND '2020-08-31'
    AND A.PG_CAT = 'THH'
    AND A.DACL_CLST_CD = 'P'
    AND A.CNSR_MBR_ID <> '56250060596'
    AND A.PG_ELIG = 1 
    AND A.PG_PRODUCT IN
        ('BLUEOPTIONS-HSA'
        ,'BLUEOPTIONS-NONHSA-LOWCOST'
        ,'BLUEOPTIONS-NONHSA-PREDICTABLE'
        ,'BLUEOPTIONS-EXCHANGE'
        ,'STATE'
        ,'MEDICARE PPO') 

GROUP BY 
A.PAYER,
A.CY1,
A.INCURRED,
A.PG_CAT,
A.PG_PRODUCT;
INSERT INTO medecon_prd.z_mdcb_one_off VALUES(1,1.0,'2009-09-04 09:14:00-04');
INSERT INTO medecon_prd.z_mdcb_one_off VALUES(1,1.0,'2009-09-04');
INSERT INTO medecon_prd.z_mdcb_one_off VALUES(2,2.0.'2010-09-04');
INSERT INTO medecon_prd.z_mdcb_one_off VALUES(2,2.0,'2010-09-04');
INSERT INTO medecon_prd.z_mdcb_one_off VALUES(3,2.0,'');
INSERT INTO medecon_prd.z_mdcb_one_off VALUES(4,2.0,NULL);
select * from medecon_prd.z_mdcb_one_off;
select nullif(s,'') from medecon_prd.z_mdcb_one_off;
select nullif(s,'Null') from medecon_prd.z_mdcb_one_off;
select s::integer from medecon_prd.z_mdcb_one_off
where i>2;
select nullif(s,'Null')::numeric from medecon_prd.z_mdcb_one_off;
INSERT INTO medecon_prd.z_mdcb_one_off VALUES(5,2.0,'NULL');
select s::integer from medecon_prd.z_mdcb_one_off
where i=5;
select s::integer from medecon_prd.z_mdcb_one_off
where i=4;
select s::integer from medecon_prd.z_mdcb_one_off
where i=3;
select s::integer from medecon_prd.z_mdcb_one_off
where i=5;
CREATE OR REPLACE VIEW MEDECON_UW_WORK_PRD.WELLCARE_UAM_UNION_VIEW_01022019 AS (
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		nullif(CLAIM_LINE,'NULL')::integer AS CLAIM_LINE,
		nullif(CHARGED_AMT,'NULL')::decimal (18, 2) AS CHARGED_AMT,
		nullif(ALLOWED_AMT,'NULL')::decimal (18, 2) AS ALLOWED_AMT,
		nullif(PAID_AMT,'NULL')::decimal (18, 2) AS PAID_AMT,
		nullif(MEMBER_LIAB,'NULL') AS decimal (18, 2)) AS MEMBER_LIAB,	
		nullif(COB_AMT,'NULL')::decimal(18,2) AS COB_AMT,

		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		nullif(UNITS_ALLOWED,'NULL')::integer AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,

		
		CASE WHEN ADM_DATE = 'Null' THEN
			NULL::date
		ELSE
			(substr(ADM_DATE,1,4) || '-' || substr(ADM_DATE, 6, 2) || '-' || substr(ADM_DATE, 9 , 2))::date
		END AS ADM_DATE,

		CASE WHEN DISCHARGE_DATE = 'Null' THEN
			NULL::date
		ELSE
			(substr(DISCHARGE_DATE ,1,4) || '-' || substr(DISCHARGE_DATE,6,2) || '-' || substr(DISCHARGE_DATE ,9,2))::date
		END AS DISCHARGE_DATE,

		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_INST_CLAIMS_20181221
	UNION
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		cast(CLAIM_LINE AS integer) AS CLAIM_LINE,
		cast(CHARGED_AMT AS decimal (18, 2)) AS CHARGED_AMT,
		cast(ALLOWED_AMT AS decimal (18, 2)) AS ALLOWED_AMT,
		cast(PAID_AMT AS decimal (18, 2)) AS PAID_AMT,
		cast(MEMBER_LIAB AS decimal (18, 2)) AS MEMBER_LIAB,
		cast(COB_AMT AS decimal (18, 2)) AS COB_AMT,
		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		cast(UNITS_ALLOWED AS integer) AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,
		cast(ADM_DATE AS Date) AS ADM_DATE,
		cast(DISCHARGE_DATE AS Date) AS DISCHARGE_DATE,
		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_PROF_CLAIMS_20181221);

 CREATE OR REPLACE VIEW MEDECON_UW_WORK_PRD.WELLCARE_UAM_UNION_VIEW_01022019 AS (
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		nullif(CLAIM_LINE,'NULL')::integer AS CLAIM_LINE,
		nullif(CHARGED_AMT,'NULL')::decimal (18, 2) AS CHARGED_AMT,
		nullif(ALLOWED_AMT,'NULL')::decimal (18, 2) AS ALLOWED_AMT,
		nullif(PAID_AMT,'NULL')::decimal (18, 2) AS PAID_AMT,
		nullif(MEMBER_LIAB,'NULL') AS decimal (18, 2)) AS MEMBER_LIAB,	
		nullif(COB_AMT,'NULL')::decimal(18,2) AS COB_AMT,

		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		nullif(UNITS_ALLOWED,'NULL')::integer AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,

		
		CASE WHEN ADM_DATE = 'Null' THEN
			NULL::date
		ELSE
			(substr(ADM_DATE,1,4) || '-' || substr(ADM_DATE, 6, 2) || '-' || substr(ADM_DATE, 9 , 2))::date
		END AS ADM_DATE,

		CASE WHEN DISCHARGE_DATE = 'Null' THEN
			NULL::date
		ELSE
			(substr(DISCHARGE_DATE ,1,4) || '-' || substr(DISCHARGE_DATE,6,2) || '-' || substr(DISCHARGE_DATE ,9,2))::date
		END AS DISCHARGE_DATE,

		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_INST_CLAIMS_20181221
	UNION
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		cast(CLAIM_LINE AS integer) AS CLAIM_LINE,
		cast(CHARGED_AMT AS decimal (18, 2)) AS CHARGED_AMT,
		cast(ALLOWED_AMT AS decimal (18, 2)) AS ALLOWED_AMT,
		cast(PAID_AMT AS decimal (18, 2)) AS PAID_AMT,
		cast(MEMBER_LIAB AS decimal (18, 2)) AS MEMBER_LIAB,
		cast(COB_AMT AS decimal (18, 2)) AS COB_AMT,
		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		cast(UNITS_ALLOWED AS integer) AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,
		cast(ADM_DATE AS Date) AS ADM_DATE,
		cast(DISCHARGE_DATE AS Date) AS DISCHARGE_DATE,
		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_PROF_CLAIMS_20181221);

 CREATE OR REPLACE VIEW MEDECON_UW_WORK_PRD.WELLCARE_UAM_UNION_VIEW_01022019 AS (
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		nullif(CLAIM_LINE,'NULL')::integer AS CLAIM_LINE,
		nullif(CHARGED_AMT,'NULL')::decimal (18, 2) AS CHARGED_AMT,
		nullif(ALLOWED_AMT,'NULL')::decimal (18, 2) AS ALLOWED_AMT,
		nullif(PAID_AMT,'NULL')::decimal (18, 2) AS PAID_AMT,
		nullif(MEMBER_LIAB,'NULL') AS decimal (18, 2) AS MEMBER_LIAB,	
		nullif(COB_AMT,'NULL')::decimal(18,2) AS COB_AMT,

		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		nullif(UNITS_ALLOWED,'NULL')::integer AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,

		
		CASE WHEN ADM_DATE = 'Null' THEN
			NULL::date
		ELSE
			(substr(ADM_DATE,1,4) || '-' || substr(ADM_DATE, 6, 2) || '-' || substr(ADM_DATE, 9 , 2))::date
		END AS ADM_DATE,

		CASE WHEN DISCHARGE_DATE = 'Null' THEN
			NULL::date
		ELSE
			(substr(DISCHARGE_DATE ,1,4) || '-' || substr(DISCHARGE_DATE,6,2) || '-' || substr(DISCHARGE_DATE ,9,2))::date
		END AS DISCHARGE_DATE,

		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_INST_CLAIMS_20181221
	UNION
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		cast(CLAIM_LINE AS integer) AS CLAIM_LINE,
		cast(CHARGED_AMT AS decimal (18, 2)) AS CHARGED_AMT,
		cast(ALLOWED_AMT AS decimal (18, 2)) AS ALLOWED_AMT,
		cast(PAID_AMT AS decimal (18, 2)) AS PAID_AMT,
		cast(MEMBER_LIAB AS decimal (18, 2)) AS MEMBER_LIAB,
		cast(COB_AMT AS decimal (18, 2)) AS COB_AMT,
		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		cast(UNITS_ALLOWED AS integer) AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,
		cast(ADM_DATE AS Date) AS ADM_DATE,
		cast(DISCHARGE_DATE AS Date) AS DISCHARGE_DATE,
		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_PROF_CLAIMS_20181221);

 CREATE OR REPLACE VIEW MEDECON_UW_WORK_PRD.WELLCARE_UAM_UNION_VIEW_01022019 AS (
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		nullif(CLAIM_LINE,'NULL')::integer AS CLAIM_LINE,
		nullif(CHARGED_AMT,'NULL')::decimal (18, 2) AS CHARGED_AMT,
		nullif(ALLOWED_AMT,'NULL')::decimal (18, 2) AS ALLOWED_AMT,
		nullif(PAID_AMT,'NULL')::decimal (18, 2) AS PAID_AMT,
		nullif(MEMBER_LIAB,'NULL') AS decimal (18, 2) AS MEMBER_LIAB,	
		nullif(COB_AMT,'NULL')::decimal(18,2) AS COB_AMT,

		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		nullif(UNITS_ALLOWED,'NULL')::integer AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,

		CASE WHEN ADM_DATE = 'NULL' THEN
			NULL::date
		ELSE
			(substr(ADM_DATE,1,4) || '-' || substr(ADM_DATE, 6, 2) || '-' || substr(ADM_DATE, 9 , 2))::date
		END AS ADM_DATE,

		CASE WHEN DISCHARGE_DATE = 'NULL' THEN
			NULL::date
		ELSE
			(substr(DISCHARGE_DATE ,1,4) || '-' || substr(DISCHARGE_DATE,6,2) || '-' || substr(DISCHARGE_DATE ,9,2))::date
		END AS DISCHARGE_DATE,

		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_INST_CLAIMS_20181221
	UNION
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		cast(CLAIM_LINE AS integer) AS CLAIM_LINE,
		cast(CHARGED_AMT AS decimal (18, 2)) AS CHARGED_AMT,
		cast(ALLOWED_AMT AS decimal (18, 2)) AS ALLOWED_AMT,
		cast(PAID_AMT AS decimal (18, 2)) AS PAID_AMT,
		cast(MEMBER_LIAB AS decimal (18, 2)) AS MEMBER_LIAB,
		cast(COB_AMT AS decimal (18, 2)) AS COB_AMT,
		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		cast(UNITS_ALLOWED AS integer) AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,
		cast(ADM_DATE AS Date) AS ADM_DATE,
		cast(DISCHARGE_DATE AS Date) AS DISCHARGE_DATE,
		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_PROF_CLAIMS_20181221);
SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		nullif(CLAIM_LINE,'NULL')::integer AS CLAIM_LINE,
		nullif(CHARGED_AMT,'NULL')::decimal (18, 2) AS CHARGED_AMT,
		nullif(ALLOWED_AMT,'NULL')::decimal (18, 2) AS ALLOWED_AMT,
		nullif(PAID_AMT,'NULL')::decimal (18, 2) AS PAID_AMT,
		nullif(MEMBER_LIAB,'NULL') AS decimal (18, 2) AS MEMBER_LIAB,	
		nullif(COB_AMT,'NULL')::decimal(18,2) AS COB_AMT,

		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		nullif(UNITS_ALLOWED,'NULL')::integer AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,

		CASE WHEN ADM_DATE = 'NULL' THEN
			NULL::date
		ELSE
			(substr(ADM_DATE,1,4) || '-' || substr(ADM_DATE, 6, 2) || '-' || substr(ADM_DATE, 9 , 2))::date
		END AS ADM_DATE,

		CASE WHEN DISCHARGE_DATE = 'NULL' THEN
			NULL::date
		ELSE
			(substr(DISCHARGE_DATE ,1,4) || '-' || substr(DISCHARGE_DATE,6,2) || '-' || substr(DISCHARGE_DATE ,9,2))::date
		END AS DISCHARGE_DATE,

		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_INST_CLAIMS_20181221
	UNION
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		cast(CLAIM_LINE AS integer) AS CLAIM_LINE,
		cast(CHARGED_AMT AS decimal (18, 2)) AS CHARGED_AMT,
		cast(ALLOWED_AMT AS decimal (18, 2)) AS ALLOWED_AMT,
		cast(PAID_AMT AS decimal (18, 2)) AS PAID_AMT,
		cast(MEMBER_LIAB AS decimal (18, 2)) AS MEMBER_LIAB,
		cast(COB_AMT AS decimal (18, 2)) AS COB_AMT,
		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		cast(UNITS_ALLOWED AS integer) AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,
		cast(ADM_DATE AS Date) AS ADM_DATE,
		cast(DISCHARGE_DATE AS Date) AS DISCHARGE_DATE,
		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_PROF_CLAIMS_20181221;

 CREATE OR REPLACE VIEW MEDECON_UW_WORK_PRD.WELLCARE_UAM_UNION_VIEW_01022019 AS (
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		nullif(CLAIM_LINE,'NULL')::integer AS CLAIM_LINE,
		nullif(CHARGED_AMT,'NULL')::decimal(18, 2) AS CHARGED_AMT,
		nullif(ALLOWED_AMT,'NULL')::decimal(18, 2) AS ALLOWED_AMT,
		nullif(PAID_AMT,'NULL')::decimal(18, 2) AS PAID_AMT,
		nullif(MEMBER_LIAB,'NULL')::decimal(18, 2) AS MEMBER_LIAB,	
		nullif(COB_AMT,'NULL')::decimal(18,2) AS COB_AMT,

		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		nullif(UNITS_ALLOWED,'NULL')::integer AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,

		CASE WHEN ADM_DATE = 'NULL' THEN
			NULL::date
		ELSE
			(substr(ADM_DATE,1,4) || '-' || substr(ADM_DATE, 6, 2) || '-' || substr(ADM_DATE, 9 , 2))::date
		END AS ADM_DATE,

		CASE WHEN DISCHARGE_DATE = 'NULL' THEN
			NULL::date
		ELSE
			(substr(DISCHARGE_DATE ,1,4) || '-' || substr(DISCHARGE_DATE,6,2) || '-' || substr(DISCHARGE_DATE ,9,2))::date
		END AS DISCHARGE_DATE,

		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_INST_CLAIMS_20181221
	UNION
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		cast(CLAIM_LINE AS integer) AS CLAIM_LINE,
		cast(CHARGED_AMT AS decimal (18, 2)) AS CHARGED_AMT,
		cast(ALLOWED_AMT AS decimal (18, 2)) AS ALLOWED_AMT,
		cast(PAID_AMT AS decimal (18, 2)) AS PAID_AMT,
		cast(MEMBER_LIAB AS decimal (18, 2)) AS MEMBER_LIAB,
		cast(COB_AMT AS decimal (18, 2)) AS COB_AMT,
		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		cast(UNITS_ALLOWED AS integer) AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,
		cast(ADM_DATE AS Date) AS ADM_DATE,
		cast(DISCHARGE_DATE AS Date) AS DISCHARGE_DATE,
		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_PROF_CLAIMS_20181221);

 CREATE OR REPLACE VIEW MEDECON_UW_WORK_PRD.WELLCARE_UAM_UNION_VIEW_01022019 AS (
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		nullif(CLAIM_LINE,'NULL')::integer AS CLAIM_LINE,
		nullif(CHARGED_AMT,'NULL')::decimal(18, 2) AS CHARGED_AMT,
		nullif(ALLOWED_AMT,'NULL')::decimal(18, 2) AS ALLOWED_AMT,
		nullif(PAID_AMT,'NULL')::decimal(18, 2) AS PAID_AMT,
		nullif(MEMBER_LIAB,'NULL')::decimal(18, 2) AS MEMBER_LIAB,	
		nullif(COB_AMT,'NULL')::decimal(18,2) AS COB_AMT,

		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		nullif(UNITS_ALLOWED,'NULL')::integer AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,

		CASE WHEN ADM_DATE = 'NULL' THEN
			NULL::date
		ELSE
			(substr(ADM_DATE,1,4) || '-' || substr(ADM_DATE, 6, 2) || '-' || substr(ADM_DATE, 9 , 2))::date
		END AS ADM_DATE,

		CASE WHEN DISCHARGE_DATE = 'NULL' THEN
			NULL::date
		ELSE
			(substr(DISCHARGE_DATE ,1,4) || '-' || substr(DISCHARGE_DATE,6,2) || '-' || substr(DISCHARGE_DATE ,9,2))::date
		END AS DISCHARGE_DATE,

		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_INST_CLAIMS_20181221
	UNION
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		nullif(CLAIM_LINE,'NULL')::integer AS CLAIM_LINE,
		cast(CHARGED_AMT AS decimal (18, 2)) AS CHARGED_AMT,
		cast(ALLOWED_AMT AS decimal (18, 2)) AS ALLOWED_AMT,
		cast(PAID_AMT AS decimal (18, 2)) AS PAID_AMT,
		cast(MEMBER_LIAB AS decimal (18, 2)) AS MEMBER_LIAB,
		cast(COB_AMT AS decimal (18, 2)) AS COB_AMT,
		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		nullif(UNITS_ALLOWED,'NULL')::integer AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,
		cast(ADM_DATE AS Date) AS ADM_DATE,
		cast(DISCHARGE_DATE AS Date) AS DISCHARGE_DATE,
		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_PROF_CLAIMS_20181221);

 CREATE OR REPLACE VIEW MEDECON_UW_WORK_PRD.WELLCARE_UAM_UNION_VIEW_01022019 AS (
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		nullif(CLAIM_LINE::varchar(25),'NULL')::integer AS CLAIM_LINE,
		nullif(CHARGED_AMT::varchar(25),'NULL')::decimal(18, 2) AS CHARGED_AMT,
		nullif(ALLOWED_AMT::varchar(25),'NULL')::decimal(18, 2) AS ALLOWED_AMT,
		nullif(PAID_AMT::varchar(25),'NULL')::decimal(18, 2) AS PAID_AMT,
		nullif(MEMBER_LIAB::varchar(25),'NULL')::decimal(18, 2) AS MEMBER_LIAB,	
		nullif(COB_AMT::varchar(25),'NULL')::decimal(18,2) AS COB_AMT,

		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		nullif(UNITS_ALLOWED::varchar(25),'NULL')::integer AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,

		CASE WHEN ADM_DATE = 'NULL' THEN
			NULL::date
		ELSE
			(substr(ADM_DATE,1,4) || '-' || substr(ADM_DATE, 6, 2) || '-' || substr(ADM_DATE, 9 , 2))::date
		END AS ADM_DATE,

		CASE WHEN DISCHARGE_DATE = 'NULL' THEN
			NULL::date
		ELSE
			(substr(DISCHARGE_DATE ,1,4) || '-' || substr(DISCHARGE_DATE,6,2) || '-' || substr(DISCHARGE_DATE ,9,2))::date
		END AS DISCHARGE_DATE,

		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_INST_CLAIMS_20181221
	UNION
	SELECT
		TRIM(cast(MEMBER_ID AS varchar(255))) AS MEMBER_ID,
		cast(DATE_OF_BIRTH AS Date) AS DATE_OF_BIRTH,
		cast(MEMBER_ZIP_CODE AS varchar(255)) AS MEMBER_ZIP_CODE,
		cast(MEMBER_COUNTY AS varchar(255)) AS MEMBER_COUNTY,
		cast(MEMBER_STATE AS varchar(255)) AS MEMBER_STATE,
		cast(GENDER AS varchar(255)) AS GENDER,
		cast(MEMBER_NAME AS varchar(255)) AS MEMBER_NAME,
		cast(LOB AS varchar(255)) AS LOB,
		cast(PRODUCT AS varchar(255)) AS PRODUCT,
		cast(FUNDING_STATUS AS varchar(255)) AS FUNDING_STATUS,
		TRIM(cast(CLAIM_NUMBER AS varchar(255))) AS CLAIM_NUMBER,
		nullif(CLAIM_LINE::varchar(25),'NULL')::integer AS CLAIM_LINE,
		cast(CHARGED_AMT AS decimal (18, 2)) AS CHARGED_AMT,
		cast(ALLOWED_AMT AS decimal (18, 2)) AS ALLOWED_AMT,
		cast(PAID_AMT AS decimal (18, 2)) AS PAID_AMT,
		cast(MEMBER_LIAB AS decimal (18, 2)) AS MEMBER_LIAB,
		cast(COB_AMT AS decimal (18, 2)) AS COB_AMT,
		cast(FROM_DATE_OF_SERVICE AS Date) AS FROM_DATE_OF_SERVICE,
		cast(TO_DATE_OF_SERVICE AS Date) AS TO_DATE_OF_SERVICE,
		cast(PAID_DATE AS Date) AS PAID_DATE,
		cast(PROCEDURE_CD AS varchar(255)) AS PROCEDURE_CD,
		cast(PROCEDURE_CD_DESC AS varchar(255)) AS PROCEDURE_CD_DESC,
		TRIM(cast(REVENUE_CODE AS varchar(255))) AS REVENUE_CODE,
		nullif(UNITS_ALLOWED::varchar(25),'NULL')::integer AS UNITS_ALLOWED,
		cast(POS_CD AS varchar(255)) AS POS_CD,
		cast(PROVIDER_PAR_INDICATOR AS varchar(255)) AS PROVIDER_PAR_INDICATOR,
		TRIM(cast(SERVICING_PROV_TIN AS varchar(255))) AS SERVICING_PROV_TIN,
		cast(SERVICING_PROV_SPECIALTY AS varchar(255)) AS SERVICING_PROV_SPECIALTY,
		cast(SERVICING_PROV_NPI AS varchar(255)) AS SERVICING_PROV_NPI,
		cast(SERVICING_PROV_NAME AS varchar(255)) AS SERVICING_PROV_NAME,
		cast(SERVICING_PROV_COUNTY AS varchar(255)) AS SERVICING_PROV_COUNTY,
		cast(SERVICING_PROV_STATE AS varchar(255)) AS SERVICING_PROV_STATE,
		cast(SERVICING_PROV_CITY AS varchar(255)) AS SERVICING_PROV_CITY,
		cast(PRIM_DIAGNOSIS_CD AS varchar(255)) AS PRIM_DIAGNOSIS_CD,
		TRIM(cast(BILL_TYPE_CD AS varchar(255))) AS BILL_TYPE_CD,
		cast(MS_DRG_CODE AS varchar(255)) AS MS_DRG_CODE,
		cast(ADM_DATE AS Date) AS ADM_DATE,
		cast(DISCHARGE_DATE AS Date) AS DISCHARGE_DATE,
		cast(CMS_CONTRACT_ID AS varchar(255)) AS CMS_CONTRACT_ID,
		cast(SRC_FILENM AS varchar(255)) AS SRC_FILENM
	FROM
		MEDECON_UW_CLIENT_PRD.TBL_CCX_WELLCARE_PROF_CLAIMS_20181221);
CREATE TABLE prueba.medecon_prd.z_mdcb_regroup
(id integer,
city Varchar(25),
blah Varchar(25),
blah2 Varchar(25),
ct integer);
select * from medecon_prd.z_mdcb_regroup;
with z as (

select 
case when
city = 'inglewood' then 'CA'
when city = 'los agnos' then 'CA'
when city = 'pellas' then 'CA'
when city = 'dinera' then 'CA'
else 'NON' end as state
ct as pop)

select state, sum(pop) from z
group by 1;
with z as (

select 
case when
city = 'inglewood' then 'CA'
when city = 'los agnos' then 'CA'
when city = 'pellas' then 'CA'
when city = 'dinera' then 'CA'
else 'NON' end as state,
ct as pop)

select state, sum(pop) from z
group by 1;
with z as (

select 
case when
city = 'inglewood' then 'CA'
when city = 'los agnos' then 'CA'
when city = 'pellas' then 'CA'
when city = 'dinera' then 'CA'
else 'NON' end as state,
ct as pop)

select state, sum(pop) from z
group by 1;
with z as (

select 
case when
city = 'inglewood' then 'CA'
when city = 'los agnos' then 'CA'
when city = 'pellas' then 'CA'
when city = 'dinera' then 'CA'
else 'NON' end as state,
ct as pop
from medecon_prd.z_mdcb_regroup)

select state, sum(pop) from z
group by 1;
select 
case when
city = 'inglewood' then 'CA'
when city = 'los agnos' then 'CA'
when city = 'pellas' then 'CA'
when city = 'dinera' then 'CA'
else 'NON' end as state,
sum(ct) as pop
from medecon_prd.z_mdcb_regroup
group by city;
select 
case when
city = 'inglewood' then 'CA'
when city = 'los agnos' then 'CA'
when city = 'pellas' then 'CA'
when city = 'dinera' then 'CA'
else 'NON' end as state,
sum(ct) as pop
from medecon_prd.z_mdcb_regroup
group by city, state;
select 
case when
city = 'inglewood' then 'CA'
when city = 'los agnos' then 'CA'
when city = 'pellas' then 'CA'
when city = 'dinera' then 'CA'
else 'NON' end as state,
sum(ct) as pop
from medecon_prd.z_mdcb_regroup
group by  state;
select 
case when
city = 'inglewood' then 'CA'
when city = 'los agnos' then 'CA'
when city = 'pellas' then 'CA'
when city = 'dinera' then 'CA'
else 'NON' end as state,
sum(ct) as pop
from medecon_prd.z_mdcb_regroup
group by 1;
select max(update_ts) from etl.ogs_loaded;
select max(update_ts) from etl.ogs_control;
/* Created and last updated by JC ( Juan Carlos Ochoa - 10-05-2020) */
Drop Table if exists BI_WORK_PRD.PATIENT_TRANSITION_AUTH_CANDIDATE_TBL;
CREATE TABLE BI_WORK_PRD.PATIENT_TRANSITION_AUTH_CANDIDATE_TBL AS (
    SELECT
        *
    FROM
        /* AGGREGATE AT TOTAL CLAIM LEVEL */
        (
            SELECT
                REM_AUTHS.*,
                TD1.MIN_DOS_CLAIM,
                TD1.MAX_DOS_CLAIM,
                TD1.PLAN_AMT,
                TD1.PROV_AMT,
                TD1.CLAIM_UNITS PAID_UNITS_QTY,
                TD1.PLAN_BILLED_AMOUNT,
                TD1.PLAN_REMIT_PAID,
                /* CASE STATEMENT TO FACILITATE ADDITION*/
                CASE
                    WHEN TD1.CLAIM_UNITS IS NULL THEN 0
                    ELSE TD1.CLAIM_UNITS
                END AS CLAIM_UNITS
            FROM
                /* combined information for authorization - TABLES BELOW */
                (
                    SELECT
                        AUTH.SVC_AUTH_ID,
                        PLAN.CARR_ID,
                        PLAN.CARR_NM,
                        PLAN.PLAN_SHORT_NM,
                        PLAN.PLAN_FULL_DESC,
                        PLAN.PLAN_ID,
                        TPIP.INSD_PAT_ID,
                        PAT.PAT_FIRST_NM,
                        PAT.PAT_MIDDLE_NM,
                        PAT.PAT_LAST_NM,
                        PAT.PAT_DOB,
                        PAT.PAT_ADDR1,
                        PAT.PAT_CITY,
                        PAT.PAT_ST,
                        PAT.PAT_PHONE,
                        PAT.PAT_ZIP,
                        TPIP.INSD_GRP_NBR,
                        TPIP.FUND_IND_CD,
                        TPIP.INSD_DEPNDT_NBR,
                        TPIP.INSD_PHONE,
                        TPIP.CIGNA_FCO_NBR FCO_NBR,
                        TPIP.CIGNA_HMO_CD HMO_CD,
                        TPIP.INSD_SUB_ID,
                        TPIP.INSD_REL_CD,
                        TPIP.JURAC_ST,
                        TPIP.SITUS_ST,
                        TPIP.CRTD_TS,
                        TPIP.CRTD_USER INTAKE_CREATOR,
                        TPIP.PROD_TYPE_DESC,
                        NPI.PHYS_NPI,
                        PH.PHYS_FED_TAX_ID,
                        AUTH.CRTD_USER AUTH_CREATOR,
                        PR.PROV_GL_NBR,
                        PAT.GENDER_CD,
                        PAT.PAT_CNTY,
                        PATI.PAT_ALLERGIES_TXT,
                        PATI.PAT_HT_MSR,
                        PATI.PAT_WT_MSR,
                        NPI1.NPI,
                        TPIPDIAG1.DIAG_CD,
                        PATI.DIAG_COMMENT_TXT,
                        AUTH.ITK_ID,
                        AUTH.PHYS_LAST_NM,
                        AUTH.PHYS_FIRST_NM,
                        AUTH.AUTH_STRT_DT,
                        AUTH.SVC_CAT_CD,
                        AUTH.SVC_CD,
                        AUTH.AUTH_EXP_DT,
                        AUTH.UOM_CD,
                        AUTH.AUTH_UNIT_QTY,
                        AUTH.PROC_CD,
                        AUTH.PROC_CD HCPC,
                        AUTH.MOD1,
                        AUTH.MOD2,
                        AUTH.MOD3,
                        AUTH.MOD4,
                        AUTH.OVRD_RSN_CD,
                        CATDESC.SVC_LONG_DESC,
                        PR.PROV_BUS_NM,
                        PR.PROV_SHORT_NM,
                        PR.PROV_ID,
                        PR.PROV_FED_TAX_ID,
                        PR.PROV_PHONE,
                        PR.PROV_PHONE_EXT,
                        PP.PROV_PRNT_ID,
                        PP.PRNT_NM,
                        PR.PROV_ADDR1,
                        PR.PROV_CITY,
                        PR.PROV_ZIP,
                        PR.PROV_ST,
                        PP.RPT_GRP_CD,
                        PLAN.PLAN_TYPE_CD,
                        AUTH.AUTH_STAT_CD,
                        AUTH.CRTD_USER,
                        AUTH.UPDTD_USER,
                        AUTH.CRTD_TS AUTHCREATED,
                        AUTH.PAT_NBR,
                        AUTH.OP_CTR_CD,
                        ICD.DIAG_DESC,
                        RATING1.PROV_ARNGMT_CD,
                        CB.DATE_SUSP,
                        CB.SUSPNSN_FLG,
                        AUTH.SVC_REQ_DT,
                        /* CASE STATEMENT TO BE ABLE TO ADD IN TABLEAU DASHBOARD */
                        CASE
                            WHEN ((AUTH.AUTH_UNIT_QTY)) IS NULL THEN 0
                            ELSE (AUTH.AUTH_UNIT_QTY)
                        END AS TOTAL_UNITS
                        /* - AUTHORIZATION INFO */
                    FROM
                        EIW_PRD.AUTHORIZATION_DIGEST AUTH
                        LEFT OUTER JOIN
                        /* - PATIENT INFO */
                        EIW_PRD.PATIENT_INTAKE_PLAN TPIP ON AUTH.ITK_ID = TPIP.ITK_ID
                        LEFT OUTER JOIN
                        /* -DIAGNOSYS INFO */
                        (
                            SELECT
                                TPIPDIAG.ITK_ID,
                                TPIPDIAG.DIAG_CD
                            FROM
                                EIW_PRD.PATIENT_INTAKE_DIAGNOSIS TPIPDIAG
                            WHERE
                                TPIPDIAG.LVL_CD = 001
                        ) TPIPDIAG1 ON TPIPDIAG1.ITK_ID = AUTH.ITK_ID
                        /* -PATIENT INFO */
                        LEFT OUTER JOIN EIW_PRD.PATIENT PAT ON PAT.PAT_NBR = AUTH.PAT_NBR
                        LEFT OUTER JOIN
                        /* -PATIENT SUSPENSION_INFORMATION */
                        (
                            SELECT
                                *
                            FROM
                                (
                                    SELECT
                                        PAT_NBR,
                                        SUSPNSN_FLG,
                                        MIN(SUSPNSN_DT) DATE_SUSP
                                    FROM
                                        EIW_PRD.PATIENT_SUSPENSION
                                    GROUP BY
                                        1,
                                        2
                                ) AB
                            WHERE
                                DATE_SUSP IS NOT NULL
                        ) CB ON CB.PAT_NBR = PAT.PAT_NBR
                        /* - PATIENT INTAKE INFORMATION */
                        LEFT OUTER JOIN EIW_PRD.PATIENT_INTAKE PATI ON PATI.ITK_ID = AUTH.ITK_ID
                        /*   PHYSICIAN NPI INFORMATION  */
                        LEFT OUTER JOIN EIW_PRD.PHYSICIAN_NPI NPI ON NPI.PHYS_ID = PATI.PRIM_PHYS_ID
                        /* -OBTAIN FEDERAL TAX ID FOR PROVIDER */
                        LEFT OUTER JOIN (
                            SELECT
                                PHYS_ID,
                                max(PHYS_FED_TAX_ID) PHYS_FED_TAX_ID
                            FROM
                                EIW_PRD.PHYSICIAN
                            GROUP BY
                                1
                        ) PH ON NPI.PHYS_ID = PH.PHYS_ID
                        /* -PROVIDER INFORMATION  */
                        LEFT OUTER JOIN EIW_PRD.PROVIDER PR ON PR.PROV_ID = AUTH.PROV_ID
                        /* -PROVIDER NPI INFORMATION */
                        LEFT OUTER JOIN (
                            SELECT
                                DISTINCT PROV_ID,
                                MAX(CRDNTL_ID) NPI
                            FROM
                                EIW_PRD.PROVIDER_CREDENTIAL_TMLN
                            WHERE
                                CRDNTL_TYPE_CD = 'NPI'
                            GROUP BY
                                1
                                /* FOR TEST AND PROV_ID IN '263787' */
                        ) NPI1 ON NPI1.PROV_ID = AUTH.PROV_ID
                        /*- CONNECT TO PROVIDER PARENT INFORMATION */
                        LEFT OUTER JOIN EIW_PRD.PROVIDER_PARENT PP ON PR.PROV_PRNT_ID = PP.PROV_PRNT_ID
                        /* OBTAIN PLAN INFORMATION */
                        LEFT OUTER JOIN EIW_PRD.PLAN PLAN ON PLAN.PLAN_ID = AUTH.PLAN_ID
                        /* GET CATEGORY DESCRIPTION INFORMATION  */
                        LEFT OUTER JOIN EIW_PRD.SERVICE_BILLING_XREF CATDESC ON CATDESC.SVC_CD = AUTH.SVC_CD
                        /* GET DIAGNOSYS CODE INFORMATION */
                        LEFT OUTER JOIN EIW_PRD.ICD_MEDICAL_DIAGNOSIS ICD ON ICD.DIAG_CD = AUTH.DIAG_CD
                        /* GET PROVIDER RATING INFORMATION  */
                        LEFT OUTER JOIN (
                            SELECT
                                RATING.PROV_ID TERMED_IND,
                                RATING.PROV_ARNGMT_CD
                            FROM
                                EIW_PRD.PROVIDER_RATING RATING
                            WHERE
                                RATING.PROV_ARNGMT_CD = 0
                        ) RATING1 ON RATING1.TERMED_IND = AUTH.PROV_ID
                        /* limit records to last 200 DAYS AUTH START DATE */
                    WHERE
                        AUTH.AUTH_STRT_DT > CURRENT_DATE - 200
                        /*
                         FOR TEST
                         where AUTH.SVC_AUTH_ID in '52976829'
                         
                         ensure only PRIMARY PLAN COMES UP  */
                        AND TPIP.PLAN_LVL_CD IN('1')
                        /* AGREGATE TO AVOID DUPLICATES */
                    GROUP BY
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83
                ) REM_AUTHS
                LEFT OUTER JOIN (
                    SELECT
                        TRIM(TD.AUTH_ID :: varchar) AUTH_ID,
                        TRIM(TD.ITK_ID :: varchar) ITK_ID,
                        MIN(TD.SVC_STRT_DT) MIN_DOS_CLAIM,
                        MAX(TD.SVC_END_DT) MAX_DOS_CLAIM,
                        SUM(TD.PLAN_CNTRCT_AMT) PLAN_AMT,
                        SUM(TD.PROV_CNTRCT_AMT) PROV_AMT,
                        SUM(TD.PROV_INV_AMT) INV_AMT,
                        SUM(TD.APPR_UNIT_QTY) CLAIM_UNITS,
                        SUM(MVCLEM.PLAN_BILLED_AMOUNT) PLAN_BILLED_AMOUNT,
                        SUM(MVCLEM.PLAN_REMIT_PAID_AMOUNT) PLAN_REMIT_PAID
                    FROM
                        EIW_PRD.CLAIM_DETAIL_DIGEST TD
                        /* GET BILLED AMOUNT CLAIM LEVEL  */
                        LEFT OUTER JOIN (
                            SELECT
                                CLAIM_ID,
                                SUM(PLAN_BILLED_AMOUNT) PLAN_BILLED_AMOUNT,
                                SUM(PLAN_REMIT_PAID_AMOUNT) PLAN_REMIT_PAID_AMOUNT
                            FROM
                                EIW_PRD.MULTIVERSE_GENERAL_CLAIMLINEEXTRACT_MATCHING
                            GROUP BY
                                1
                        ) MVCLEM ON MVCLEM.CLAIM_ID = TD.CLM_ID
                        /* NOT USED IN CURRENT QUERY */
                        LEFT OUTER JOIN
                        /*uncommented by RM*/
                        (
                            SELECT
                                TRIM(CLEM.AUTHORIZATION_ID :: varchar) G_AUTH_ID,
                                SUM(CLEM.PLAN_BILLED_AMOUNT) PLAN_BILLED_AMOUNT,
                                SUM(CLEM.PLAN_REMIT_PAID_AMOUNT) PLAN_REMIT_AMOUNT_PAID
                            FROM
                                EIW_PRD.MULTIVERSE_GENERAL_CLAIMLINEEXTRACT_MATCHING CLEM
                            WHERE
                                CLEM.CLAIM_RECEIPT_DATE > CURRENT_DATE - 400
                            GROUP BY
                                1
                        ) CLEM1 ON TRIM(
                            CAST(
                                CAST(
                                    CAST(CLEM1.G_AUTH_ID AS DECIMAL (10, 0)) AS BIGINT
                                ) AS VARCHAR(20)
                            )
                        ) = TD.AUTH_ID
                    WHERE
                        TD.RCPT_DT > CURRENT_DATE - 400
                    GROUP BY
                        1,
                        2
                ) TD1 ON TRIM(TD1.AUTH_ID :: varchar) = TRIM(REM_AUTHS.SVC_AUTH_ID :: varchar)
                /* CODE FOR TESTING BELOW */
                /* WHERE REM_AUTHS.SVC_AUTH_ID IN '57099533' */
                /* -GROUP ALL TO AVOID DUPLICATES */
            GROUP BY
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91
        ) TABLE2
        /* WHERE TABLE2.SVC_AUTH_ID  IN '57099533'*/
        /* WHERE PROV_ID IN '263787' */
);
Drop Table if exists BI_WORK_PRD.PATIENT_TRANSITION_AUTH_CANDIDATE_TBL;
CREATE TABLE BI_WORK_PRD.PATIENT_TRANSITION_AUTH_CANDIDATE_TBL AS (
    SELECT
        *
    FROM
        /* AGGREGATE AT TOTAL CLAIM LEVEL */
        (
            SELECT
                REM_AUTHS.*,
                TD1.MIN_DOS_CLAIM,
                TD1.MAX_DOS_CLAIM,
                TD1.PLAN_AMT,
                TD1.PROV_AMT,
                TD1.CLAIM_UNITS PAID_UNITS_QTY,
                TD1.PLAN_BILLED_AMOUNT,
                TD1.PLAN_REMIT_PAID,
                /* CASE STATEMENT TO FACILITATE ADDITION*/
                CASE
                    WHEN TD1.CLAIM_UNITS IS NULL THEN 0
                    ELSE TD1.CLAIM_UNITS
                END AS CLAIM_UNITS
            FROM
                /* combined information for authorization - TABLES BELOW */
                (
                    SELECT
                        AUTH.SVC_AUTH_ID,
                        PLAN.CARR_ID,
                        PLAN.CARR_NM,
                        PLAN.PLAN_SHORT_NM,
                        PLAN.PLAN_FULL_DESC,
                        PLAN.PLAN_ID,
                        TPIP.INSD_PAT_ID,
                        PAT.PAT_FIRST_NM,
                        PAT.PAT_MIDDLE_NM,
                        PAT.PAT_LAST_NM,
                        PAT.PAT_DOB,
                        PAT.PAT_ADDR1,
                        PAT.PAT_CITY,
                        PAT.PAT_ST,
                        PAT.PAT_PHONE,
                        PAT.PAT_ZIP,
                        TPIP.INSD_GRP_NBR,
                        TPIP.FUND_IND_CD,
                        TPIP.INSD_DEPNDT_NBR,
                        TPIP.INSD_PHONE,
                        TPIP.CIGNA_FCO_NBR FCO_NBR,
                        TPIP.CIGNA_HMO_CD HMO_CD,
                        TPIP.INSD_SUB_ID,
                        TPIP.INSD_REL_CD,
                        TPIP.JURAC_ST,
                        TPIP.SITUS_ST,
                        TPIP.CRTD_TS,
                        TPIP.CRTD_USER INTAKE_CREATOR,
                        TPIP.PROD_TYPE_DESC,
                        NPI.PHYS_NPI,
                        PH.PHYS_FED_TAX_ID,
                        AUTH.CRTD_USER AUTH_CREATOR,
                        PR.PROV_GL_NBR,
                        PAT.GENDER_CD,
                        PAT.PAT_CNTY,
                        PATI.PAT_ALLERGIES_TXT,
                        PATI.PAT_HT_MSR,
                        PATI.PAT_WT_MSR,
                        NPI1.NPI,
                        TPIPDIAG1.DIAG_CD,
                        PATI.DIAG_COMMENT_TXT,
                        AUTH.ITK_ID,
                        AUTH.PHYS_LAST_NM,
                        AUTH.PHYS_FIRST_NM,
                        AUTH.AUTH_STRT_DT,
                        AUTH.SVC_CAT_CD,
                        AUTH.SVC_CD,
                        AUTH.AUTH_EXP_DT,
                        AUTH.UOM_CD,
                        AUTH.AUTH_UNIT_QTY,
                        AUTH.PROC_CD,
                        AUTH.PROC_CD HCPC,
                        AUTH.MOD1,
                        AUTH.MOD2,
                        AUTH.MOD3,
                        AUTH.MOD4,
                        AUTH.OVRD_RSN_CD,
                        CATDESC.SVC_LONG_DESC,
                        PR.PROV_BUS_NM,
                        PR.PROV_SHORT_NM,
                        PR.PROV_ID,
                        PR.PROV_FED_TAX_ID,
                        PR.PROV_PHONE,
                        PR.PROV_PHONE_EXT,
                        PP.PROV_PRNT_ID,
                        PP.PRNT_NM,
                        PR.PROV_ADDR1,
                        PR.PROV_CITY,
                        PR.PROV_ZIP,
                        PR.PROV_ST,
                        PP.RPT_GRP_CD,
                        PLAN.PLAN_TYPE_CD,
                        AUTH.AUTH_STAT_CD,
                        AUTH.CRTD_USER,
                        AUTH.UPDTD_USER,
                        AUTH.CRTD_TS AUTHCREATED,
                        AUTH.PAT_NBR,
                        AUTH.OP_CTR_CD,
                        ICD.DIAG_DESC,
                        RATING1.PROV_ARNGMT_CD,
                        CB.DATE_SUSP,
                        CB.SUSPNSN_FLG,
                        AUTH.SVC_REQ_DT,
                        /* CASE STATEMENT TO BE ABLE TO ADD IN TABLEAU DASHBOARD */
                        CASE
                            WHEN ((AUTH.AUTH_UNIT_QTY)) IS NULL THEN 0
                            ELSE (AUTH.AUTH_UNIT_QTY)
                        END AS TOTAL_UNITS
                        /* - AUTHORIZATION INFO */
                    FROM
                        EIW_PRD.AUTHORIZATION_DIGEST AUTH
                        LEFT OUTER JOIN
                        /* - PATIENT INFO */
                        EIW_PRD.PATIENT_INTAKE_PLAN TPIP ON AUTH.ITK_ID = TPIP.ITK_ID
                        LEFT OUTER JOIN
                        /* -DIAGNOSYS INFO */
                        (
                            SELECT
                                TPIPDIAG.ITK_ID,
                                TPIPDIAG.DIAG_CD
                            FROM
                                EIW_PRD.PATIENT_INTAKE_DIAGNOSIS TPIPDIAG
                            WHERE
                                TPIPDIAG.LVL_CD = 001
                        ) TPIPDIAG1 ON TPIPDIAG1.ITK_ID = AUTH.ITK_ID
                        /* -PATIENT INFO */
                        LEFT OUTER JOIN EIW_PRD.PATIENT PAT ON PAT.PAT_NBR = AUTH.PAT_NBR
                        LEFT OUTER JOIN
                        /* -PATIENT SUSPENSION_INFORMATION */
                        (
                            SELECT
                                *
                            FROM
                                (
                                    SELECT
                                        PAT_NBR,
                                        SUSPNSN_FLG,
                                        MIN(SUSPNSN_DT) DATE_SUSP
                                    FROM
                                        EIW_PRD.PATIENT_SUSPENSION
                                    GROUP BY
                                        1,
                                        2
                                ) AB
                            WHERE
                                DATE_SUSP IS NOT NULL
                        ) CB ON CB.PAT_NBR = PAT.PAT_NBR
                        /* - PATIENT INTAKE INFORMATION */
                        LEFT OUTER JOIN EIW_PRD.PATIENT_INTAKE PATI ON PATI.ITK_ID = AUTH.ITK_ID
                        /*   PHYSICIAN NPI INFORMATION  */
                        LEFT OUTER JOIN EIW_PRD.PHYSICIAN_NPI NPI ON NPI.PHYS_ID = PATI.PRIM_PHYS_ID
                        /* -OBTAIN FEDERAL TAX ID FOR PROVIDER */
                        LEFT OUTER JOIN (
                            SELECT
                                PHYS_ID,
                                max(PHYS_FED_TAX_ID) PHYS_FED_TAX_ID
                            FROM
                                EIW_PRD.PHYSICIAN
                            GROUP BY
                                1
                        ) PH ON NPI.PHYS_ID = PH.PHYS_ID
                        /* -PROVIDER INFORMATION  */
                        LEFT OUTER JOIN EIW_PRD.PROVIDER PR ON PR.PROV_ID = AUTH.PROV_ID
                        /* -PROVIDER NPI INFORMATION */
                        LEFT OUTER JOIN (
                            SELECT
                                DISTINCT PROV_ID,
                                MAX(CRDNTL_ID) NPI
                            FROM
                                EIW_PRD.PROVIDER_CREDENTIAL_TMLN
                            WHERE
                                CRDNTL_TYPE_CD = 'NPI'
                            GROUP BY
                                1
                                /* FOR TEST AND PROV_ID IN '263787' */
                        ) NPI1 ON NPI1.PROV_ID = AUTH.PROV_ID
                        /*- CONNECT TO PROVIDER PARENT INFORMATION */
                        LEFT OUTER JOIN EIW_PRD.PROVIDER_PARENT PP ON PR.PROV_PRNT_ID = PP.PROV_PRNT_ID
                        /* OBTAIN PLAN INFORMATION */
                        LEFT OUTER JOIN EIW_PRD.PLAN PLAN ON PLAN.PLAN_ID = AUTH.PLAN_ID
                        /* GET CATEGORY DESCRIPTION INFORMATION  */
                        LEFT OUTER JOIN EIW_PRD.SERVICE_BILLING_XREF CATDESC ON CATDESC.SVC_CD = AUTH.SVC_CD
                        /* GET DIAGNOSYS CODE INFORMATION */
                        LEFT OUTER JOIN EIW_PRD.ICD_MEDICAL_DIAGNOSIS ICD ON ICD.DIAG_CD = AUTH.DIAG_CD
                        /* GET PROVIDER RATING INFORMATION  */
                        LEFT OUTER JOIN (
                            SELECT
                                RATING.PROV_ID TERMED_IND,
                                RATING.PROV_ARNGMT_CD
                            FROM
                                EIW_PRD.PROVIDER_RATING RATING
                            WHERE
                                RATING.PROV_ARNGMT_CD = 0
                        ) RATING1 ON RATING1.TERMED_IND = AUTH.PROV_ID
                        /* limit records to last 200 DAYS AUTH START DATE */
                    WHERE
                        AUTH.AUTH_STRT_DT > CURRENT_DATE - 200
                        /*
                         FOR TEST
                         where AUTH.SVC_AUTH_ID in '52976829'
                         
                         ensure only PRIMARY PLAN COMES UP  */
                        AND TPIP.PLAN_LVL_CD IN('1')
                        /* AGREGATE TO AVOID DUPLICATES */
                    GROUP BY
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83
                ) REM_AUTHS
                LEFT OUTER JOIN (
                    SELECT
                        TRIM(TD.AUTH_ID :: varchar) AUTH_ID,
                        TRIM(TD.ITK_ID :: varchar) ITK_ID,
                        MIN(TD.SVC_STRT_DT) MIN_DOS_CLAIM,
                        MAX(TD.SVC_END_DT) MAX_DOS_CLAIM,
                        SUM(TD.PLAN_CNTRCT_AMT) PLAN_AMT,
                        SUM(TD.PROV_CNTRCT_AMT) PROV_AMT,
                        SUM(TD.PROV_INV_AMT) INV_AMT,
                        SUM(TD.APPR_UNIT_QTY) CLAIM_UNITS,
                        SUM(MVCLEM.PLAN_BILLED_AMOUNT) PLAN_BILLED_AMOUNT,
                        SUM(MVCLEM.PLAN_REMIT_PAID_AMOUNT) PLAN_REMIT_PAID
                    FROM
                        EIW_PRD.CLAIM_DETAIL_DIGEST TD
                        /* GET BILLED AMOUNT CLAIM LEVEL  */
                        LEFT OUTER JOIN (
                            SELECT
                                CLAIM_ID,
                                SUM(PLAN_BILLED_AMOUNT) PLAN_BILLED_AMOUNT,
                                SUM(PLAN_REMIT_PAID_AMOUNT) PLAN_REMIT_PAID_AMOUNT
                            FROM
                                EIW_PRD.MULTIVERSE_GENERAL_CLAIMLINEEXTRACT_MATCHING
                            GROUP BY
                                1
                        ) MVCLEM ON MVCLEM.CLAIM_ID = TD.CLM_ID
                        /* NOT USED IN CURRENT QUERY */
                        LEFT OUTER JOIN
                        /*uncommented by RM*/
                        (
                            SELECT
                                TRIM(CLEM.AUTHORIZATION_ID :: varchar) G_AUTH_ID,
                                SUM(CLEM.PLAN_BILLED_AMOUNT) PLAN_BILLED_AMOUNT,
                                SUM(CLEM.PLAN_REMIT_PAID_AMOUNT) PLAN_REMIT_AMOUNT_PAID
                            FROM
                                EIW_PRD.MULTIVERSE_GENERAL_CLAIMLINEEXTRACT_MATCHING CLEM
                            WHERE
                                CLEM.CLAIM_RECEIPT_DATE > CURRENT_DATE - 400
                            GROUP BY
                                1
                        ) CLEM1 ON TRIM(
                            CAST(
                                CAST(
                                    CAST(CLEM1.G_AUTH_ID AS DECIMAL (10, 0)) AS BIGINT
                                ) AS VARCHAR(20)
                            )
                        ) = TD.AUTH_ID
                    WHERE
                        TD.RCPT_DT > CURRENT_DATE - 400
                    GROUP BY
                        1,
                        2
                ) TD1 ON TRIM(TD1.AUTH_ID :: varchar) = TRIM(REM_AUTHS.SVC_AUTH_ID :: varchar)
                /* CODE FOR TESTING BELOW */
                /* WHERE REM_AUTHS.SVC_AUTH_ID IN '57099533' */
                /* -GROUP ALL TO AVOID DUPLICATES */
            GROUP BY
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91
        ) TABLE2
        /* WHERE TABLE2.SVC_AUTH_ID  IN '57099533'*/
        /* WHERE PROV_ID IN '263787' */
);
select max(update_ts) from etl.ogs_loaded;
select max(update_ts) from ogs.ogs_fact_red;
select count(*) from ogs.ogs_fact_red;
select count(*) from ogs.ogs_kvp;
select max(update_ts) from etl.ogs_control;
select * from etl.ogs_control
where update_ts> (sysdate -3);
select * from etl.ogs_control
where update_ts> (sysdate -1)
order by source_file_run_ts desc;
select * from etl.ogs_control
where update_ts> (sysdate -1)
order by source_file_run_ts desc;
select * from etl.ogs_control
where update_ts> (sysdate -1)
order by source_file_run_ts desc;
select * from etl.ogs_control
where update_ts> (sysdate -1)
order by source_file_run_ts desc limit 50;
CREATE TABLE OPTUM_SCOPE_DATA_V4 (
    client_id int,
    claim_id varchar(50),
    claim_line varchar(50),
    rev_code varchar(50),
    proc_code_client varchar(50),
    proc_code varchar(50),
    other_code varchar(50),
    paid_status varchar(50),
    mod1 varchar(50),
    mod2 varchar(50),
    mod3 varchar(50),
    ccxtype varchar(10),
    ccxcat varchar(4),
    ccxglobal varchar(6),
    dx1 varchar(15),
    dx2 varchar(15),
    dx3 varchar(15),
    dx4 varchar(15),
    dx5 varchar(15),
    dx6 varchar(15),
    dx7 varchar(15),
    dx8 varchar(15),
    dx9 varchar(15),
    dx10 varchar(15),
    par_ind int,
    lob_client varchar(50),
    lob varchar(50),
    lob_pac varchar(50),
    product_client varchar(50),
    product varchar(50),
    product_pac varchar(50),
    funding_status varchar(50),
    plantype varchar(50),
    other_id varchar(50),
    other_prod_split varchar(150),
    bill_type varchar(10),
    pos_client varchar(50),
    pos varchar(4),
    ccxyear varchar(3),
    from_date date,
    from_month date,
    paid_date date,
    paid_month date,
    to_date date,
    admit_date_client date,
    discharge_date_client date,
    admit_date date,
    discharge_date date,
    member_id varchar(50),
    member_dob date,
    member_age int,
    member_cnty varchar(50),
    member_st varchar(50),
    member_zip numeric(38, 0),
    member_gender varchar(10),
    member_plan_id varchar(50),
    member_risk_score numeric(38, 0),
    cob_flag varchar(5),
    cob_amount numeric(18, 2),
    billed numeric(18, 6),
    allowed_client numeric(18, 6),
    allowed numeric(18, 6),
    paid numeric(18, 6),
    member_liability numeric(18, 6),
    units numeric(18, 6),
    ccx_par int,
    facility_flag int,
    hc_flag int,
    ccx_par_ind varchar(25),
    prov_ind varchar(10),
    provider_tin varchar(30),
    provider_npi numeric(38, 0),
    provider_name varchar(150),
    provider_specialty varchar(50),
    provider_add1 varchar(150),
    provider_add2 varchar(150),
    provider_city varchar(50),
    provider_cnty varchar(50),
    provider_st varchar(50),
    provider_taxonomy varchar(20),
    provider_zip numeric(38, 0),
    facility_tin varchar(30),
    facility_npi numeric(38, 0),
    facility_type varchar(50),
    facility_specialty varchar(50),
    facility_descript varchar(150),
    facility_name varchar(50),
    facility_par varchar(10),
    facility_add1 varchar(150),
    facility_add2 varchar(150),
    facility_city varchar(50),
    facility_cnty varchar(50),
    facility_st varchar(50),
    facility_zip numeric(38, 0),
    facility_taxonomy varchar(20),
    drg varchar(10),
    its_flag varchar(10),
    ipa_code varchar(50),
    uom varchar(50),
    pac_sty_id int,
    stay_admit_date date,
    stay_discharge_date date,
    epi_id int,
    hs_in_dx1 int,
    hh_flag int,
    icdv int,
    member_has_overlap_data int,
    claim_type varchar(10),
    hipps_flag int,
    socc_flag varchar(5),
    hit_scope varchar(10),
    med_scope varchar(10),
    socc_scope varchar(10),
    core_exclude_reason int,
    socc_exclude_reason int,
    sleep_exclude_reason int,
    pac_exclude_reason int,
    partition_id int
);
select * from public.OPTUM_SCOPE_DATA_V4;
drop table public.OPTUM_SCOPE_DATA_V4;
CREATE TABLE temp_to_delete.OPTUM_SCOPE_DATA_V4 (
    client_id int,
    claim_id varchar(50),
    claim_line varchar(50),
    rev_code varchar(50),
    proc_code_client varchar(50),
    proc_code varchar(50),
    other_code varchar(50),
    paid_status varchar(50),
    mod1 varchar(50),
    mod2 varchar(50),
    mod3 varchar(50),
    ccxtype varchar(10),
    ccxcat varchar(4),
    ccxglobal varchar(6),
    dx1 varchar(15),
    dx2 varchar(15),
    dx3 varchar(15),
    dx4 varchar(15),
    dx5 varchar(15),
    dx6 varchar(15),
    dx7 varchar(15),
    dx8 varchar(15),
    dx9 varchar(15),
    dx10 varchar(15),
    par_ind int,
    lob_client varchar(50),
    lob varchar(50),
    lob_pac varchar(50),
    product_client varchar(50),
    product varchar(50),
    product_pac varchar(50),
    funding_status varchar(50),
    plantype varchar(50),
    other_id varchar(50),
    other_prod_split varchar(150),
    bill_type varchar(10),
    pos_client varchar(50),
    pos varchar(4),
    ccxyear varchar(3),
    from_date date,
    from_month date,
    paid_date date,
    paid_month date,
    to_date date,
    admit_date_client date,
    discharge_date_client date,
    admit_date date,
    discharge_date date,
    member_id varchar(50),
    member_dob date,
    member_age int,
    member_cnty varchar(50),
    member_st varchar(50),
    member_zip numeric(38, 0),
    member_gender varchar(10),
    member_plan_id varchar(50),
    member_risk_score numeric(38, 0),
    cob_flag varchar(5),
    cob_amount numeric(18, 2),
    billed numeric(18, 6),
    allowed_client numeric(18, 6),
    allowed numeric(18, 6),
    paid numeric(18, 6),
    member_liability numeric(18, 6),
    units numeric(18, 6),
    ccx_par int,
    facility_flag int,
    hc_flag int,
    ccx_par_ind varchar(25),
    prov_ind varchar(10),
    provider_tin varchar(30),
    provider_npi numeric(38, 0),
    provider_name varchar(150),
    provider_specialty varchar(50),
    provider_add1 varchar(150),
    provider_add2 varchar(150),
    provider_city varchar(50),
    provider_cnty varchar(50),
    provider_st varchar(50),
    provider_taxonomy varchar(20),
    provider_zip numeric(38, 0),
    facility_tin varchar(30),
    facility_npi numeric(38, 0),
    facility_type varchar(50),
    facility_specialty varchar(50),
    facility_descript varchar(150),
    facility_name varchar(50),
    facility_par varchar(10),
    facility_add1 varchar(150),
    facility_add2 varchar(150),
    facility_city varchar(50),
    facility_cnty varchar(50),
    facility_st varchar(50),
    facility_zip numeric(38, 0),
    facility_taxonomy varchar(20),
    drg varchar(10),
    its_flag varchar(10),
    ipa_code varchar(50),
    uom varchar(50),
    pac_sty_id int,
    stay_admit_date date,
    stay_discharge_date date,
    epi_id int,
    hs_in_dx1 int,
    hh_flag int,
    icdv int,
    member_has_overlap_data int,
    claim_type varchar(10),
    hipps_flag int,
    socc_flag varchar(5),
    hit_scope varchar(10),
    med_scope varchar(10),
    socc_scope varchar(10),
    core_exclude_reason int,
    socc_exclude_reason int,
    sleep_exclude_reason int,
    pac_exclude_reason int,
    partition_id int
);
DROP TABLE qantas.temp_to_delete.OPTUM_SCOPE_DATA_V4;
select * from users;
select * from users
where user ~~ '%zhao%';
select * from users
where user ilike '%zhao%';
select * from users
-- where user ilike '%zhao%';
select * from roles;
select * from users
-- where user ilike '%zhao%'
where all_roles != 'TevaBusinessUser';
select * from users
where user_name = 'yzhao03';
select distinct object_name, object_type, grantee, grantor, privileges_description 
from grants 
where grantee = 'mramsuesmi' 
 and object_type = 'ROLE'
order by 1, 2;
create user 'yzhao03';
create user yzhao03;
select * from users
where user_name = 'yzhao03';
grant authentication v_ldap_teva_corp_domain to yzhao03;
grant role TevaBusinessUser to yzhao03;
grant role 'TevaBusinessUser' to yzhao03;
select * from roles;
grant role TevaBusinessUser to yzhao03;
alter user yzhao03 default role TevaBusinessUser;
select * from users
where user_name = 'yzhao03';
grant role TevaBusinessUser to yzhao03;
grant TevaBusinessUser to yzhao03;
alter user yzhao03 default role TevaBusinessUser;
select * from nodes;
select * from query_requests;
select * from query_requests
where is_executing = t;
select * from query_requests
where is_executing = t;
select count(*) from query_requests
where is_executing = 't';
select * from query_requests
where is_executing = 't';
select * from query_requests 
where user_name = 'Databurst_Updt';
select * from query_requests 
where user_name = 'Databurst_Updt'
and start_timestamp >= '2021-02-07'
order by request_duration desc;
select * from query_requests
where is_executing = 't';
select user_name, request, memory_acquired, start_timestamp, is_executing
from query_requests
where is_executing = 't';
select user_name, request, memory_acquired_mb, start_timestamp, is_executing
from query_requests
where is_executing = 't';
select user_name, request, memory_acquired_mb, start_timestamp, is_executing
from query_requests
where is_executing = 't';
select user_name, request, memory_acquired_mb, start_timestamp, is_executing
from query_requests
where is_executing = 't';
explain insert /*+ DIRECT */ into reporting.rs_weekly_prescriber_summary (
  sales_force_id, nation_id, nation, area_id, area, region_id, region, territory_id, territory,
  rep_name, user_id, time_period, period_type, period, market_id, market_name, brand_id, brand_name, teva_product_flag,
  customer_id, tvcmid, pdrp_flag, hcp_restriction_flag, prescriber_name, new_prescriber, address, city, state, zip,
  target_status_flag, partner_target_status_flag, method_of_payment, specialty, segment, decile, market_volume_indicator,
  product_vol_trx_count, market_vol_trx_count, prev_prod_vol_trx_count, prev_market_vol_trx_count,
  product_vol_nrx_count, market_vol_nrx_count, prev_prod_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3
)
with targets_for_market_and_territory as (
  select distinct ap.sales_force_id, ap.territory_id,
                  customer_id, ap.tvcmid, p.market_id, ap.target_status_flag
  from reporting.activity_plan ap
    inner join reporting.product p on ap.product_id = p.product_id
  where customer_id is not null
), rx as (
  select sales_force_id, customer_id, tvcmid, ims_id,
    period_type, period, week_ending, week_bucket,
    market_id, brand_id, method_of_payment,
    sum(product_vol_trx_count) as product_vol_trx_count,
    sum(prev_prod_vol_trx_count) as prev_prod_vol_trx_count,
    sum(product_vol_nrx_count) as product_vol_nrx_count,
    sum(prev_prod_vol_nrx_count) as prev_prod_vol_nrx_count,
    sum(market_vol_trx_count) as market_vol_trx_count,
    sum(prev_market_vol_trx_count) as prev_market_vol_trx_count,
    sum(market_vol_nrx_count) as market_vol_nrx_count,
    sum(prev_market_vol_nrx_count) as prev_market_vol_nrx_count,
    sum(samples) as samples,
    sum(details_p1) as details_p1,
    sum(details_p2) as details_p2,
    sum(details_p3) as details_p3
  from reporting.weekly_prescriber_sales_summary
  where sales_force_id = ‘RS’
  group by 1,2,3,4,5,6,7,8,9,10,11
)
select rx.sales_force_id,
  ga.nation_id,
  ga.nation_name as nation,
  ga.area_id,
  ga.area_name as area,
  ga.region_id,
  ga.region_name as region,
  ga.territory_id,
  ga.territory_name as territory,
  r.rep_name,
  r.user_id,
  'Weekly' as time_period, rx.period_type, rx.period as time_period,
  p.market_id, p.market_name,
  p.brand_id, p.brand_name,
  p.teva_product_flag,
  rx.customer_id,
  rx.tvcmid,
  c.pdrp_flag,
  coalesce(restrict_all.attribute_value, restrict_mkt.attribute_value,'I') as hcp_restriction_flag,
  case when c.physician_first_name is not null then c.physician_last_name || ', ' || c.physician_first_name
       when c.physician_last_name is not null then c.physician_last_name
       when c.account_name is not null then c.account_name
       when c.network_name is not null then c.network_name
  end as prescriber_name,
  case when np.customer_id is not null then 'Y' else 'N' end as new_prescriber,
  ca.address_1 as address,
  ca.city,
  ca.state,
  ca.zip,
  coalesce(t.target_status_flag,'N') as target_status_flag,
  'N' as partner_target_status_flag,
  rx.method_of_payment,
  case
    when c.pri_specialty_code is null then 'NA'
    when rx.sales_force_id in ('TO','ON') then coalesce(sm.specialty_group, 'A/O')
    else coalesce(sm.specialty_group, 'OTHER')
  end specialty,
  coalesce(segment.attribute_value,'NA') as segment,
  coalesce(decile.attribute_value,'0') as decile,
  case when p.market_share_default_brand = 'Y' then 1 else 0 end as market_volume_indicator,
  product_vol_trx_count, market_vol_trx_count, prev_prod_vol_trx_count, prev_market_vol_trx_count,
  product_vol_nrx_count, market_vol_nrx_count, prev_prod_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3
from rx
  inner join reporting.product p on rx.market_id = p.market_id and rx.brand_id = p.product_id
  inner join reporting.customer c on rx.customer_id = c.customer_id
  inner join reporting.customer_address ca on rx.customer_id = ca.customer_id and rx.sales_force_id = ca.sales_force_id
  inner join reporting.geography_alignment ga on ca.territory_id = ga.territory_id
  inner join reporting.roster r on ca.territory_id = r.geography_id
  left outer join targets_for_market_and_territory t on (
    rx.customer_id = t.customer_id and rx.market_id = t.market_id and ca.territory_id = t.territory_id
  )
  left outer join reporting.specialty_mapping sm on (
    c.pri_specialty_code = sm.ims_specialty_code and rx.sales_force_id = sm.sales_force_id and rx.market_id = sm.market_id
  )
  left outer join reporting.weekly_new_prescriber np on (
    rx.brand_id = np.brand_id
    and rx.customer_id = np.customer_id
                and rx.week_bucket = np.week_bucket
  )
  left outer join reporting.customer_attributes decile on (
    rx.sales_force_id = coalesce(decile.sales_force_id, rx.sales_force_id)
    and rx.customer_id = decile.customer_id
    and rx.brand_id = p.product_id
    and p.rptg_decile_attribute_prod_id <=> decile.product_id
    and p.rptg_decile_attribute_type = decile.attribute_type
    and current_date between decile.attribute_effective_start_date and decile.attribute_effective_end_date
  )
  left outer join reporting.customer_attributes segment on (
    rx.sales_force_id = coalesce(segment.sales_force_id, rx.sales_force_id)
    and rx.customer_id = segment.customer_id
    and rx.brand_id = p.product_id
    and p.rptg_segment_attribute_prod_id <=> p.rptg_segment_attribute_prod_id
    and p.rptg_segment_attribute_type = segment.attribute_type
    and current_date between segment.attribute_effective_start_date and segment.attribute_effective_end_date
  )
  left outer join reporting.customer_attributes restrict_all on (
    restrict_all.customer_id = rx.customer_id
    and restrict_all.attribute_type = 'HCPRESTRICT'
    and restrict_all.sales_force_id is null
    and restrict_all.product_id is null
  )
  left outer join reporting.customer_attributes restrict_mkt on (
    restrict_mkt.customer_id = rx.customer_id
    and restrict_mkt.attribute_type = 'HCPRESTRICT'
    and restrict_mkt.sales_force_id is null
    and restrict_mkt.product_id = rx.market_id
  )
where (rx.week_bucket < 14 or rx.period_type = 'Aggregated')
  and rx.sales_force_id = ‘RS’;
select * from sessions;
select *
from query_requests
where is_executing = 't';
explain select * from outbound.zs_xpo_xpopt_AM_MD_ICS_LABA_weekly;
select * from sessions;
select close_session('v_teva_node0001-418271:0x8415303');
select * from sessions;
select * from sessions
where session_id ilike 'v_teva_node0001-418271:%';
explain json select * from outbound.zs_xpo_xpopt_AM_MD_ICS_LABA_weekly;
explain json 
insert
    /*+ DIRECT */
    into reporting.rs_weekly_prescriber_summary (
        sales_force_id,
        nation_id,
        nation,
        area_id,
        area,
        region_id,
        region,
        territory_id,
        territory,
        rep_name,
        user_id,
        time_period,
        period_type,
        period,
        market_id,
        market_name,
        brand_id,
        brand_name,
        teva_product_flag,
        customer_id,
        tvcmid,
        pdrp_flag,
        hcp_restriction_flag,
        prescriber_name,
        new_prescriber,
        address,
        city,
        state,
        zip,
        target_status_flag,
        partner_target_status_flag,
        method_of_payment,
        specialty,
        segment,
        decile,
        market_volume_indicator,
        product_vol_trx_count,
        market_vol_trx_count,
        prev_prod_vol_trx_count,
        prev_market_vol_trx_count,
        product_vol_nrx_count,
        market_vol_nrx_count,
        prev_prod_vol_nrx_count,
        prev_market_vol_nrx_count,
        samples,
        details_p1,
        details_p2,
        details_p3
    ) with targets_for_market_and_territory as (
        select
            distinct ap.sales_force_id,
            ap.territory_id,
            customer_id,
            ap.tvcmid,
            p.market_id,
            ap.target_status_flag
        from
            reporting.activity_plan ap
            inner join reporting.product p on ap.product_id = p.product_id
        where
            customer_id is not null
    ),
    rx as (
        select
            sales_force_id,
            customer_id,
            tvcmid,
            ims_id,
            period_type,
            period,
            week_ending,
            week_bucket,
            market_id,
            brand_id,
            method_of_payment,
            sum(product_vol_trx_count) as product_vol_trx_count,
            sum(prev_prod_vol_trx_count) as prev_prod_vol_trx_count,
            sum(product_vol_nrx_count) as product_vol_nrx_count,
            sum(prev_prod_vol_nrx_count) as prev_prod_vol_nrx_count,
            sum(market_vol_trx_count) as market_vol_trx_count,
            sum(prev_market_vol_trx_count) as prev_market_vol_trx_count,
            sum(market_vol_nrx_count) as market_vol_nrx_count,
            sum(prev_market_vol_nrx_count) as prev_market_vol_nrx_count,
            sum(samples) as samples,
            sum(details_p1) as details_p1,
            sum(details_p2) as details_p2,
            sum(details_p3) as details_p3
        from
            reporting.weekly_prescriber_sales_summary
        where
            sales_force_id = 'RS'
        group by
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11
    )
select
    rx.sales_force_id,
    ga.nation_id,
    ga.nation_name as nation,
    ga.area_id,
    ga.area_name as area,
    ga.region_id,
    ga.region_name as region,
    ga.territory_id,
    ga.territory_name as territory,
    r.rep_name,
    r.user_id,
    'Weekly' as time_period,
    rx.period_type,
    rx.period as time_period,
    p.market_id,
    p.market_name,
    p.brand_id,
    p.brand_name,
    p.teva_product_flag,
    rx.customer_id,
    rx.tvcmid,
    c.pdrp_flag,
    coalesce(
        restrict_all.attribute_value,
        restrict_mkt.attribute_value,
        'I'
    ) as hcp_restriction_flag,
    case
        when c.physician_first_name is not null then c.physician_last_name || ', ' || c.physician_first_name
        when c.physician_last_name is not null then c.physician_last_name
        when c.account_name is not null then c.account_name
        when c.network_name is not null then c.network_name
    end as prescriber_name,
    case
        when np.customer_id is not null then 'Y'
        else 'N'
    end as new_prescriber,
    ca.address_1 as address,
    ca.city,
    ca.state,
    ca.zip,
    coalesce(t.target_status_flag, 'N') as target_status_flag,
    'N' as partner_target_status_flag,
    rx.method_of_payment,
    case
        when c.pri_specialty_code is null then 'NA'
        when rx.sales_force_id in ('TO', 'ON') then coalesce(sm.specialty_group, 'A/O')
        else coalesce(sm.specialty_group, 'OTHER')
    end specialty,
    coalesce(segment.attribute_value, 'NA') as segment,
    coalesce(decile.attribute_value, '0') as decile,
    case
        when p.market_share_default_brand = 'Y' then 1
        else 0
    end as market_volume_indicator,
    product_vol_trx_count,
    market_vol_trx_count,
    prev_prod_vol_trx_count,
    prev_market_vol_trx_count,
    product_vol_nrx_count,
    market_vol_nrx_count,
    prev_prod_vol_nrx_count,
    prev_market_vol_nrx_count,
    samples,
    details_p1,
    details_p2,
    details_p3
from
    rx
    inner join reporting.product p on rx.market_id = p.market_id
    and rx.brand_id = p.product_id
    inner join reporting.customer c on rx.customer_id = c.customer_id
    inner join reporting.customer_address ca on rx.customer_id = ca.customer_id
    and rx.sales_force_id = ca.sales_force_id
    inner join reporting.geography_alignment ga on ca.territory_id = ga.territory_id
    inner join reporting.roster r on ca.territory_id = r.geography_id
    left outer join targets_for_market_and_territory t on (
        rx.customer_id = t.customer_id
        and rx.market_id = t.market_id
        and ca.territory_id = t.territory_id
    )
    left outer join reporting.specialty_mapping sm on (
        c.pri_specialty_code = sm.ims_specialty_code
        and rx.sales_force_id = sm.sales_force_id
        and rx.market_id = sm.market_id
    )
    left outer join reporting.weekly_new_prescriber np on (
        rx.brand_id = np.brand_id
        and rx.customer_id = np.customer_id
        and rx.week_bucket = np.week_bucket
    )
    left outer join reporting.customer_attributes decile on (
        rx.sales_force_id = coalesce(decile.sales_force_id, rx.sales_force_id)
        and rx.customer_id = decile.customer_id
        and rx.brand_id = p.product_id
        and p.rptg_decile_attribute_prod_id <= > decile.product_id
        and p.rptg_decile_attribute_type = decile.attribute_type
        and current_date between decile.attribute_effective_start_date
        and decile.attribute_effective_end_date
    )
    left outer join reporting.customer_attributes segment on (
        rx.sales_force_id = coalesce(segment.sales_force_id, rx.sales_force_id)
        and rx.customer_id = segment.customer_id
        and rx.brand_id = p.product_id
        and p.rptg_segment_attribute_prod_id <= > p.rptg_segment_attribute_prod_id
        and p.rptg_segment_attribute_type = segment.attribute_type
        and current_date between segment.attribute_effective_start_date
        and segment.attribute_effective_end_date
    )
    left outer join reporting.customer_attributes restrict_all on (
        restrict_all.customer_id = rx.customer_id
        and restrict_all.attribute_type = 'HCPRESTRICT'
        and restrict_all.sales_force_id is null
        and restrict_all.product_id is null
    )
    left outer join reporting.customer_attributes restrict_mkt on (
        restrict_mkt.customer_id = rx.customer_id
        and restrict_mkt.attribute_type = 'HCPRESTRICT'
        and restrict_mkt.sales_force_id is null
        and restrict_mkt.product_id = rx.market_id
    )
where
    (
        rx.week_bucket < 14
        or rx.period_type = 'Aggregated'
    )
    and rx.sales_force_id = 'RS';
explain json 
insert
    /*+ DIRECT */
    into reporting.rs_weekly_prescriber_summary (
        sales_force_id,
        nation_id,
        nation,
        area_id,
        area,
        region_id,
        region,
        territory_id,
        territory,
        rep_name,
        user_id,
        time_period,
        period_type,
        period,
        market_id,
        market_name,
        brand_id,
        brand_name,
        teva_product_flag,
        customer_id,
        tvcmid,
        pdrp_flag,
        hcp_restriction_flag,
        prescriber_name,
        new_prescriber,
        address,
        city,
        state,
        zip,
        target_status_flag,
        partner_target_status_flag,
        method_of_payment,
        specialty,
        segment,
        decile,
        market_volume_indicator,
        product_vol_trx_count,
        market_vol_trx_count,
        prev_prod_vol_trx_count,
        prev_market_vol_trx_count,
        product_vol_nrx_count,
        market_vol_nrx_count,
        prev_prod_vol_nrx_count,
        prev_market_vol_nrx_count,
        samples,
        details_p1,
        details_p2,
        details_p3
    ) with targets_for_market_and_territory as (
        select
            distinct ap.sales_force_id,
            ap.territory_id,
            customer_id,
            ap.tvcmid,
            p.market_id,
            ap.target_status_flag
        from
            reporting.activity_plan ap
            inner join reporting.product p on ap.product_id = p.product_id
        where
            customer_id is not null
    ),
    rx as (
        select
            sales_force_id,
            customer_id,
            tvcmid,
            ims_id,
            period_type,
            period,
            week_ending,
            week_bucket,
            market_id,
            brand_id,
            method_of_payment,
            sum(product_vol_trx_count) as product_vol_trx_count,
            sum(prev_prod_vol_trx_count) as prev_prod_vol_trx_count,
            sum(product_vol_nrx_count) as product_vol_nrx_count,
            sum(prev_prod_vol_nrx_count) as prev_prod_vol_nrx_count,
            sum(market_vol_trx_count) as market_vol_trx_count,
            sum(prev_market_vol_trx_count) as prev_market_vol_trx_count,
            sum(market_vol_nrx_count) as market_vol_nrx_count,
            sum(prev_market_vol_nrx_count) as prev_market_vol_nrx_count,
            sum(samples) as samples,
            sum(details_p1) as details_p1,
            sum(details_p2) as details_p2,
            sum(details_p3) as details_p3
        from
            reporting.weekly_prescriber_sales_summary
        where
            sales_force_id = 'RS'
        group by
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11
    )
select
    rx.sales_force_id,
    ga.nation_id,
    ga.nation_name as nation,
    ga.area_id,
    ga.area_name as area,
    ga.region_id,
    ga.region_name as region,
    ga.territory_id,
    ga.territory_name as territory,
    r.rep_name,
    r.user_id,
    'Weekly' as time_period,
    rx.period_type,
    rx.period as time_period,
    p.market_id,
    p.market_name,
    p.brand_id,
    p.brand_name,
    p.teva_product_flag,
    rx.customer_id,
    rx.tvcmid,
    c.pdrp_flag,
    coalesce(
        restrict_all.attribute_value,
        restrict_mkt.attribute_value,
        'I'
    ) as hcp_restriction_flag,
    case
        when c.physician_first_name is not null then c.physician_last_name || ', ' || c.physician_first_name
        when c.physician_last_name is not null then c.physician_last_name
        when c.account_name is not null then c.account_name
        when c.network_name is not null then c.network_name
    end as prescriber_name,
    case
        when np.customer_id is not null then 'Y'
        else 'N'
    end as new_prescriber,
    ca.address_1 as address,
    ca.city,
    ca.state,
    ca.zip,
    coalesce(t.target_status_flag, 'N') as target_status_flag,
    'N' as partner_target_status_flag,
    rx.method_of_payment,
    case
        when c.pri_specialty_code is null then 'NA'
        when rx.sales_force_id in ('TO', 'ON') then coalesce(sm.specialty_group, 'A/O')
        else coalesce(sm.specialty_group, 'OTHER')
    end specialty,
    coalesce(segment.attribute_value, 'NA') as segment,
    coalesce(decile.attribute_value, '0') as decile,
    case
        when p.market_share_default_brand = 'Y' then 1
        else 0
    end as market_volume_indicator,
    product_vol_trx_count,
    market_vol_trx_count,
    prev_prod_vol_trx_count,
    prev_market_vol_trx_count,
    product_vol_nrx_count,
    market_vol_nrx_count,
    prev_prod_vol_nrx_count,
    prev_market_vol_nrx_count,
    samples,
    details_p1,
    details_p2,
    details_p3
from
    rx
    inner join reporting.product p on rx.market_id = p.market_id
    and rx.brand_id = p.product_id
    inner join reporting.customer c on rx.customer_id = c.customer_id
    inner join reporting.customer_address ca on rx.customer_id = ca.customer_id
    and rx.sales_force_id = ca.sales_force_id
    inner join reporting.geography_alignment ga on ca.territory_id = ga.territory_id
    inner join reporting.roster r on ca.territory_id = r.geography_id
    left outer join targets_for_market_and_territory t on (
        rx.customer_id = t.customer_id
        and rx.market_id = t.market_id
        and ca.territory_id = t.territory_id
    )
    left outer join reporting.specialty_mapping sm on (
        c.pri_specialty_code = sm.ims_specialty_code
        and rx.sales_force_id = sm.sales_force_id
        and rx.market_id = sm.market_id
    )
    left outer join reporting.weekly_new_prescriber np on (
        rx.brand_id = np.brand_id
        and rx.customer_id = np.customer_id
        and rx.week_bucket = np.week_bucket
    )
    left outer join reporting.customer_attributes decile on (
        rx.sales_force_id = coalesce(decile.sales_force_id, rx.sales_force_id)
        and rx.customer_id = decile.customer_id
        and rx.brand_id = p.product_id
        and p.rptg_decile_attribute_prod_id <=> decile.product_id
        and p.rptg_decile_attribute_type = decile.attribute_type
        and current_date between decile.attribute_effective_start_date
        and decile.attribute_effective_end_date
    )
    left outer join reporting.customer_attributes segment on (
        rx.sales_force_id = coalesce(segment.sales_force_id, rx.sales_force_id)
        and rx.customer_id = segment.customer_id
        and rx.brand_id = p.product_id
        and p.rptg_segment_attribute_prod_id <=> p.rptg_segment_attribute_prod_id
        and p.rptg_segment_attribute_type = segment.attribute_type
        and current_date between segment.attribute_effective_start_date
        and segment.attribute_effective_end_date
    )
    left outer join reporting.customer_attributes restrict_all on (
        restrict_all.customer_id = rx.customer_id
        and restrict_all.attribute_type = 'HCPRESTRICT'
        and restrict_all.sales_force_id is null
        and restrict_all.product_id is null
    )
    left outer join reporting.customer_attributes restrict_mkt on (
        restrict_mkt.customer_id = rx.customer_id
        and restrict_mkt.attribute_type = 'HCPRESTRICT'
        and restrict_mkt.sales_force_id is null
        and restrict_mkt.product_id = rx.market_id
    )
where
    (
        rx.week_bucket < 14
        or rx.period_type = 'Aggregated'
    )
    and rx.sales_force_id = 'RS';
explain 
insert
    /*+ DIRECT */
    into reporting.rs_weekly_prescriber_summary (
        sales_force_id,
        nation_id,
        nation,
        area_id,
        area,
        region_id,
        region,
        territory_id,
        territory,
        rep_name,
        user_id,
        time_period,
        period_type,
        period,
        market_id,
        market_name,
        brand_id,
        brand_name,
        teva_product_flag,
        customer_id,
        tvcmid,
        pdrp_flag,
        hcp_restriction_flag,
        prescriber_name,
        new_prescriber,
        address,
        city,
        state,
        zip,
        target_status_flag,
        partner_target_status_flag,
        method_of_payment,
        specialty,
        segment,
        decile,
        market_volume_indicator,
        product_vol_trx_count,
        market_vol_trx_count,
        prev_prod_vol_trx_count,
        prev_market_vol_trx_count,
        product_vol_nrx_count,
        market_vol_nrx_count,
        prev_prod_vol_nrx_count,
        prev_market_vol_nrx_count,
        samples,
        details_p1,
        details_p2,
        details_p3
    ) with targets_for_market_and_territory as (
        select
            distinct ap.sales_force_id,
            ap.territory_id,
            customer_id,
            ap.tvcmid,
            p.market_id,
            ap.target_status_flag
        from
            reporting.activity_plan ap
            inner join reporting.product p on ap.product_id = p.product_id
        where
            customer_id is not null
    ),
    rx as (
        select
            sales_force_id,
            customer_id,
            tvcmid,
            ims_id,
            period_type,
            period,
            week_ending,
            week_bucket,
            market_id,
            brand_id,
            method_of_payment,
            sum(product_vol_trx_count) as product_vol_trx_count,
            sum(prev_prod_vol_trx_count) as prev_prod_vol_trx_count,
            sum(product_vol_nrx_count) as product_vol_nrx_count,
            sum(prev_prod_vol_nrx_count) as prev_prod_vol_nrx_count,
            sum(market_vol_trx_count) as market_vol_trx_count,
            sum(prev_market_vol_trx_count) as prev_market_vol_trx_count,
            sum(market_vol_nrx_count) as market_vol_nrx_count,
            sum(prev_market_vol_nrx_count) as prev_market_vol_nrx_count,
            sum(samples) as samples,
            sum(details_p1) as details_p1,
            sum(details_p2) as details_p2,
            sum(details_p3) as details_p3
        from
            reporting.weekly_prescriber_sales_summary
        where
            sales_force_id = 'RS'
        group by
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11
    )
select
    rx.sales_force_id,
    ga.nation_id,
    ga.nation_name as nation,
    ga.area_id,
    ga.area_name as area,
    ga.region_id,
    ga.region_name as region,
    ga.territory_id,
    ga.territory_name as territory,
    r.rep_name,
    r.user_id,
    'Weekly' as time_period,
    rx.period_type,
    rx.period as time_period,
    p.market_id,
    p.market_name,
    p.brand_id,
    p.brand_name,
    p.teva_product_flag,
    rx.customer_id,
    rx.tvcmid,
    c.pdrp_flag,
    coalesce(
        restrict_all.attribute_value,
        restrict_mkt.attribute_value,
        'I'
    ) as hcp_restriction_flag,
    case
        when c.physician_first_name is not null then c.physician_last_name || ', ' || c.physician_first_name
        when c.physician_last_name is not null then c.physician_last_name
        when c.account_name is not null then c.account_name
        when c.network_name is not null then c.network_name
    end as prescriber_name,
    case
        when np.customer_id is not null then 'Y'
        else 'N'
    end as new_prescriber,
    ca.address_1 as address,
    ca.city,
    ca.state,
    ca.zip,
    coalesce(t.target_status_flag, 'N') as target_status_flag,
    'N' as partner_target_status_flag,
    rx.method_of_payment,
    case
        when c.pri_specialty_code is null then 'NA'
        when rx.sales_force_id in ('TO', 'ON') then coalesce(sm.specialty_group, 'A/O')
        else coalesce(sm.specialty_group, 'OTHER')
    end specialty,
    coalesce(segment.attribute_value, 'NA') as segment,
    coalesce(decile.attribute_value, '0') as decile,
    case
        when p.market_share_default_brand = 'Y' then 1
        else 0
    end as market_volume_indicator,
    product_vol_trx_count,
    market_vol_trx_count,
    prev_prod_vol_trx_count,
    prev_market_vol_trx_count,
    product_vol_nrx_count,
    market_vol_nrx_count,
    prev_prod_vol_nrx_count,
    prev_market_vol_nrx_count,
    samples,
    details_p1,
    details_p2,
    details_p3
from
    rx
    inner join reporting.product p on rx.market_id = p.market_id
    and rx.brand_id = p.product_id
    inner join reporting.customer c on rx.customer_id = c.customer_id
    inner join reporting.customer_address ca on rx.customer_id = ca.customer_id
    and rx.sales_force_id = ca.sales_force_id
    inner join reporting.geography_alignment ga on ca.territory_id = ga.territory_id
    inner join reporting.roster r on ca.territory_id = r.geography_id
    left outer join targets_for_market_and_territory t on (
        rx.customer_id = t.customer_id
        and rx.market_id = t.market_id
        and ca.territory_id = t.territory_id
    )
    left outer join reporting.specialty_mapping sm on (
        c.pri_specialty_code = sm.ims_specialty_code
        and rx.sales_force_id = sm.sales_force_id
        and rx.market_id = sm.market_id
    )
    left outer join reporting.weekly_new_prescriber np on (
        rx.brand_id = np.brand_id
        and rx.customer_id = np.customer_id
        and rx.week_bucket = np.week_bucket
    )
    left outer join reporting.customer_attributes decile on (
        rx.sales_force_id = coalesce(decile.sales_force_id, rx.sales_force_id)
        and rx.customer_id = decile.customer_id
        and rx.brand_id = p.product_id
        and p.rptg_decile_attribute_prod_id <=> decile.product_id
        and p.rptg_decile_attribute_type = decile.attribute_type
        and current_date between decile.attribute_effective_start_date
        and decile.attribute_effective_end_date
    )
    left outer join reporting.customer_attributes segment on (
        rx.sales_force_id = coalesce(segment.sales_force_id, rx.sales_force_id)
        and rx.customer_id = segment.customer_id
        and rx.brand_id = p.product_id
        and p.rptg_segment_attribute_prod_id <=> p.rptg_segment_attribute_prod_id
        and p.rptg_segment_attribute_type = segment.attribute_type
        and current_date between segment.attribute_effective_start_date
        and segment.attribute_effective_end_date
    )
    left outer join reporting.customer_attributes restrict_all on (
        restrict_all.customer_id = rx.customer_id
        and restrict_all.attribute_type = 'HCPRESTRICT'
        and restrict_all.sales_force_id is null
        and restrict_all.product_id is null
    )
    left outer join reporting.customer_attributes restrict_mkt on (
        restrict_mkt.customer_id = rx.customer_id
        and restrict_mkt.attribute_type = 'HCPRESTRICT'
        and restrict_mkt.sales_force_id is null
        and restrict_mkt.product_id = rx.market_id
    )
where
    (
        rx.week_bucket < 14
        or rx.period_type = 'Aggregated'
    )
    and rx.sales_force_id = 'RS';
explain 
insert
    /*+ DIRECT */
    into reporting.rs_weekly_prescriber_summary (
        sales_force_id,
        nation_id,
        nation,
        area_id,
        area,
        region_id,
        region,
        territory_id,
        territory,
        rep_name,
        user_id,
        time_period,
        period_type,
        period,
        market_id,
        market_name,
        brand_id,
        brand_name,
        teva_product_flag,
        customer_id,
        tvcmid,
        pdrp_flag,
        hcp_restriction_flag,
        prescriber_name,
        new_prescriber,
        address,
        city,
        state,
        zip,
        target_status_flag,
        partner_target_status_flag,
        method_of_payment,
        specialty,
        segment,
        decile,
        market_volume_indicator,
        product_vol_trx_count,
        market_vol_trx_count,
        prev_prod_vol_trx_count,
        prev_market_vol_trx_count,
        product_vol_nrx_count,
        market_vol_nrx_count,
        prev_prod_vol_nrx_count,
        prev_market_vol_nrx_count,
        samples,
        details_p1,
        details_p2,
        details_p3
    ) with targets_for_market_and_territory as (
        select
            distinct ap.sales_force_id,
            ap.territory_id,
            customer_id,
            ap.tvcmid,
            p.market_id,
            ap.target_status_flag
        from
            reporting.activity_plan ap
            inner join reporting.product p on ap.product_id = p.product_id
        where
            customer_id is not null
    ),
    rx as (
        select
            sales_force_id,
            customer_id,
            tvcmid,
            ims_id,
            period_type,
            period,
            week_ending,
            week_bucket,
            market_id,
            brand_id,
            method_of_payment,
            sum(product_vol_trx_count) as product_vol_trx_count,
            sum(prev_prod_vol_trx_count) as prev_prod_vol_trx_count,
            sum(product_vol_nrx_count) as product_vol_nrx_count,
            sum(prev_prod_vol_nrx_count) as prev_prod_vol_nrx_count,
            sum(market_vol_trx_count) as market_vol_trx_count,
            sum(prev_market_vol_trx_count) as prev_market_vol_trx_count,
            sum(market_vol_nrx_count) as market_vol_nrx_count,
            sum(prev_market_vol_nrx_count) as prev_market_vol_nrx_count,
            sum(samples) as samples,
            sum(details_p1) as details_p1,
            sum(details_p2) as details_p2,
            sum(details_p3) as details_p3
        from
            reporting.weekly_prescriber_sales_summary
        where
            sales_force_id = 'RS'
        group by
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11
    )
select
    rx.sales_force_id,
    ga.nation_id,
    ga.nation_name as nation,
    ga.area_id,
    ga.area_name as area,
    ga.region_id,
    ga.region_name as region,
    ga.territory_id,
    ga.territory_name as territory,
    r.rep_name,
    r.user_id,
    'Weekly' as time_period,
    rx.period_type,
    rx.period as time_period,
    p.market_id,
    p.market_name,
    p.brand_id,
    p.brand_name,
    p.teva_product_flag,
    rx.customer_id,
    rx.tvcmid,
    c.pdrp_flag,
    coalesce(
        restrict_all.attribute_value,
        restrict_mkt.attribute_value,
        'I'
    ) as hcp_restriction_flag,
    case
        when c.physician_first_name is not null then c.physician_last_name || ', ' || c.physician_first_name
        when c.physician_last_name is not null then c.physician_last_name
        when c.account_name is not null then c.account_name
        when c.network_name is not null then c.network_name
    end as prescriber_name,
    case
        when np.customer_id is not null then 'Y'
        else 'N'
    end as new_prescriber,
    ca.address_1 as address,
    ca.city,
    ca.state,
    ca.zip,
    coalesce(t.target_status_flag, 'N') as target_status_flag,
    'N' as partner_target_status_flag,
    rx.method_of_payment,
    case
        when c.pri_specialty_code is null then 'NA'
        when rx.sales_force_id in ('TO', 'ON') then coalesce(sm.specialty_group, 'A/O')
        else coalesce(sm.specialty_group, 'OTHER')
    end specialty,
    coalesce(segment.attribute_value, 'NA') as segment,
    coalesce(decile.attribute_value, '0') as decile,
    case
        when p.market_share_default_brand = 'Y' then 1
        else 0
    end as market_volume_indicator,
    product_vol_trx_count,
    market_vol_trx_count,
    prev_prod_vol_trx_count,
    prev_market_vol_trx_count,
    product_vol_nrx_count,
    market_vol_nrx_count,
    prev_prod_vol_nrx_count,
    prev_market_vol_nrx_count,
    samples,
    details_p1,
    details_p2,
    details_p3
from
    rx
    inner join reporting.product p on rx.market_id = p.market_id
    and rx.brand_id = p.product_id
    inner join reporting.customer c on rx.customer_id = c.customer_id
    inner join reporting.customer_address ca on rx.customer_id = ca.customer_id
    and rx.sales_force_id = ca.sales_force_id
    inner join reporting.geography_alignment ga on ca.territory_id = ga.territory_id
    inner join reporting.roster r on ca.territory_id = r.geography_id
    left outer join targets_for_market_and_territory t on (
        rx.customer_id = t.customer_id
        and rx.market_id = t.market_id
        and ca.territory_id = t.territory_id
    )
    left outer join reporting.specialty_mapping sm on (
        c.pri_specialty_code = sm.ims_specialty_code
        and rx.sales_force_id = sm.sales_force_id
        and rx.market_id = sm.market_id
    )
    left outer join reporting.weekly_new_prescriber np on (
        rx.brand_id = np.brand_id
        and rx.customer_id = np.customer_id
        and rx.week_bucket = np.week_bucket
    )
    left outer join reporting.customer_attributes decile on (
        rx.sales_force_id = coalesce(decile.sales_force_id, rx.sales_force_id)
        and rx.customer_id = decile.customer_id
        and rx.brand_id = p.product_id
        and p.rptg_decile_attribute_prod_id <=> decile.product_id
        and p.rptg_decile_attribute_type = decile.attribute_type
        and current_date between decile.attribute_effective_start_date
        and decile.attribute_effective_end_date
    )
    left outer join reporting.customer_attributes segment on (
        rx.sales_force_id = coalesce(segment.sales_force_id, rx.sales_force_id)
        and rx.customer_id = segment.customer_id
        and rx.brand_id = p.product_id
        and p.rptg_segment_attribute_prod_id <=> p.rptg_segment_attribute_prod_id
        and p.rptg_segment_attribute_type = segment.attribute_type
        and current_date between segment.attribute_effective_start_date
        and segment.attribute_effective_end_date
    )
    left outer join reporting.customer_attributes restrict_all on (
        restrict_all.customer_id = rx.customer_id
        and restrict_all.attribute_type = 'HCPRESTRICT'
        and restrict_all.sales_force_id is null
        and restrict_all.product_id is null
    )
    left outer join reporting.customer_attributes restrict_mkt on (
        restrict_mkt.customer_id = rx.customer_id
        and restrict_mkt.attribute_type = 'HCPRESTRICT'
        and restrict_mkt.sales_force_id is null
        and restrict_mkt.product_id = rx.market_id
    )
where
    (
        rx.week_bucket < 14
        or rx.period_type = 'Aggregated'
    )
    and rx.sales_force_id = 'RS';
select export_objects('','reporting.product',true);
select * from query_requests
where is_executing = 't';
select * from query_events
where is_executing = 't';
select * from query_events;
select * from query_events
where transaction_id = '49539595903432125';
select * from query_events
where transaction_id = '49539595903432125'
and event_severity != 'Informational';
select * from projections
where projection_schema = 'reporting'
and create_type != 'DESIGNER';
select * from projections
where projection_schema = 'reporting'
and create_type = 'DESIGNER';
explain truncate table reporting.TABLE_PREFIX_weekly_prescriber_summary;

insert /*+ DIRECT */ into reporting.TABLE_PREFIX_weekly_prescriber_summary (
  sales_force_id, nation_id, nation, area_id, area, region_id, region, territory_id, territory,
  rep_name, user_id, time_period, period_type, period, market_id, market_name, brand_id, brand_name, teva_product_flag,
  customer_id, tvcmid, pdrp_flag, hcp_restriction_flag, prescriber_name, new_prescriber, address, city, state, zip,
  target_status_flag, partner_target_status_flag, method_of_payment, specialty, segment, decile, market_volume_indicator,
  product_vol_trx_count, market_vol_trx_count, prev_prod_vol_trx_count, prev_market_vol_trx_count,
  product_vol_nrx_count, market_vol_nrx_count, prev_prod_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3 
)
with targets_for_market_and_territory as (
  select distinct ap.sales_force_id, ap.territory_id, 
                  customer_id, ap.tvcmid, p.market_id, ap.target_status_flag
  from reporting.activity_plan ap
    inner join reporting.product p on ap.product_id = p.product_id
  where customer_id is not null
), rx as (
  select sales_force_id, customer_id, tvcmid, ims_id,
    period_type, period, week_ending, week_bucket,
    market_id, brand_id, method_of_payment, 
    sum(product_vol_trx_count) as product_vol_trx_count,
    sum(prev_prod_vol_trx_count) as prev_prod_vol_trx_count,
    sum(product_vol_nrx_count) as product_vol_nrx_count,
    sum(prev_prod_vol_nrx_count) as prev_prod_vol_nrx_count,
    sum(market_vol_trx_count) as market_vol_trx_count,
    sum(prev_market_vol_trx_count) as prev_market_vol_trx_count,
    sum(market_vol_nrx_count) as market_vol_nrx_count,
    sum(prev_market_vol_nrx_count) as prev_market_vol_nrx_count,
    sum(samples) as samples,
    sum(details_p1) as details_p1,
    sum(details_p2) as details_p2,
    sum(details_p3) as details_p3
  from reporting.weekly_prescriber_sales_summary
  where sales_force_id = :sales_force_id
  group by 1,2,3,4,5,6,7,8,9,10,11
)
select rx.sales_force_id,
  ga.nation_id,
  ga.nation_name as nation,
  ga.area_id,
  ga.area_name as area,
  ga.region_id,
  ga.region_name as region,
  ga.territory_id,
  ga.territory_name as territory,
  r.rep_name,
  r.user_id,
  'Weekly' as time_period, rx.period_type, rx.period as time_period,
  p.market_id, p.market_name,
  p.brand_id, p.brand_name,
  p.teva_product_flag,
  rx.customer_id,
  rx.tvcmid,
  c.pdrp_flag,
  coalesce(restrict_all.attribute_value, restrict_mkt.attribute_value,'I') as hcp_restriction_flag,
  case when c.physician_first_name is not null then c.physician_last_name || ', ' || c.physician_first_name 
       when c.physician_last_name is not null then c.physician_last_name 
       when c.account_name is not null then c.account_name 
       when c.network_name is not null then c.network_name 
  end as prescriber_name,
  case when np.customer_id is not null then 'Y' else 'N' end as new_prescriber,
  ca.address_1 as address,
  ca.city,
  ca.state,
  ca.zip,
  coalesce(t.target_status_flag,'N') as target_status_flag,
  'N' as partner_target_status_flag,
  rx.method_of_payment,
  case
    when c.pri_specialty_code is null then 'NA'
    when rx.sales_force_id in ('TO','ON') then coalesce(sm.specialty_group, 'A/O')
    else coalesce(sm.specialty_group, 'OTHER')
  end specialty,
  coalesce(segment.attribute_value,'NA') as segment,
  coalesce(decile.attribute_value,'0') as decile, 
  case when p.market_share_default_brand = 'Y' then 1 else 0 end as market_volume_indicator,
  product_vol_trx_count, market_vol_trx_count, prev_prod_vol_trx_count, prev_market_vol_trx_count,
  product_vol_nrx_count, market_vol_nrx_count, prev_prod_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3
from rx
  inner join reporting.product p on rx.market_id = p.market_id and rx.brand_id = p.product_id
  inner join reporting.customer c on rx.customer_id = c.customer_id
  inner join reporting.customer_address ca on rx.customer_id = ca.customer_id and rx.sales_force_id = ca.sales_force_id
  inner join reporting.geography_alignment ga on ca.territory_id = ga.territory_id
  inner join reporting.roster r on ca.territory_id = r.geography_id
  left outer join targets_for_market_and_territory t on (
    rx.customer_id = t.customer_id and rx.market_id = t.market_id and ca.territory_id = t.territory_id
  )
  left outer join reporting.specialty_mapping sm on (
    c.pri_specialty_code = sm.ims_specialty_code and rx.sales_force_id = sm.sales_force_id and rx.market_id = sm.market_id
  )
  left outer join reporting.weekly_new_prescriber np on (
    rx.brand_id = np.brand_id
    and rx.customer_id = np.customer_id
	and rx.week_bucket = np.week_bucket
  )
  left outer join reporting.customer_attributes decile on (
    rx.sales_force_id = coalesce(decile.sales_force_id, rx.sales_force_id)
    and rx.customer_id = decile.customer_id
    and rx.brand_id = p.product_id
    and p.rptg_decile_attribute_prod_id <=> decile.product_id
    and p.rptg_decile_attribute_type = decile.attribute_type
    and current_date between decile.attribute_effective_start_date and decile.attribute_effective_end_date
  )
  left outer join reporting.customer_attributes segment on (
    rx.sales_force_id = coalesce(segment.sales_force_id, rx.sales_force_id)
    and rx.customer_id = segment.customer_id
    and rx.brand_id = p.product_id
    and p.rptg_segment_attribute_prod_id <=> p.rptg_segment_attribute_prod_id
    and p.rptg_segment_attribute_type = segment.attribute_type
    and current_date between segment.attribute_effective_start_date and segment.attribute_effective_end_date
  )
  left outer join reporting.customer_attributes restrict_all on (
    restrict_all.customer_id = rx.customer_id
    and restrict_all.attribute_type = 'HCPRESTRICT'
    and restrict_all.sales_force_id is null
    and restrict_all.product_id is null
  )
  left outer join reporting.customer_attributes restrict_mkt on (
    restrict_mkt.customer_id = rx.customer_id
    and restrict_mkt.attribute_type = 'HCPRESTRICT'
    and restrict_mkt.sales_force_id is null
    and restrict_mkt.product_id = rx.market_id
  )
where (rx.week_bucket < 14 or rx.period_type = 'Aggregated')
  and rx.sales_force_id = :sales_force_id;


drop table if exists tmp_TABLE_PREFIX_sf_targets;

create local temporary table tmp_TABLE_PREFIX_sf_targets on commit preserve rows direct as
  select distinct ap.sales_force_id, 
                  customer_id, ap.tvcmid, p.market_id, ap.target_status_flag
  from reporting.activity_plan ap
    inner join reporting.product p on ap.product_id = p.product_id
  where customer_id is not null
    and target_status_flag = 'Y';
   
update reporting.TABLE_PREFIX_weekly_prescriber_summary a 
  set partner_target_status_flag = x.target_status_flag
from tmp_TABLE_PREFIX_sf_targets x
where a.customer_id = x.customer_id
  and a.market_id = x.market_id
  and a.sales_force_id <> x.sales_force_id;
explain 
insert /*+ DIRECT */ into reporting.TABLE_PREFIX_weekly_prescriber_summary (
  sales_force_id, nation_id, nation, area_id, area, region_id, region, territory_id, territory,
  rep_name, user_id, time_period, period_type, period, market_id, market_name, brand_id, brand_name, teva_product_flag,
  customer_id, tvcmid, pdrp_flag, hcp_restriction_flag, prescriber_name, new_prescriber, address, city, state, zip,
  target_status_flag, partner_target_status_flag, method_of_payment, specialty, segment, decile, market_volume_indicator,
  product_vol_trx_count, market_vol_trx_count, prev_prod_vol_trx_count, prev_market_vol_trx_count,
  product_vol_nrx_count, market_vol_nrx_count, prev_prod_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3 
)
with targets_for_market_and_territory as (
  select distinct ap.sales_force_id, ap.territory_id, 
                  customer_id, ap.tvcmid, p.market_id, ap.target_status_flag
  from reporting.activity_plan ap
    inner join reporting.product p on ap.product_id = p.product_id
  where customer_id is not null
), rx as (
  select sales_force_id, customer_id, tvcmid, ims_id,
    period_type, period, week_ending, week_bucket,
    market_id, brand_id, method_of_payment, 
    sum(product_vol_trx_count) as product_vol_trx_count,
    sum(prev_prod_vol_trx_count) as prev_prod_vol_trx_count,
    sum(product_vol_nrx_count) as product_vol_nrx_count,
    sum(prev_prod_vol_nrx_count) as prev_prod_vol_nrx_count,
    sum(market_vol_trx_count) as market_vol_trx_count,
    sum(prev_market_vol_trx_count) as prev_market_vol_trx_count,
    sum(market_vol_nrx_count) as market_vol_nrx_count,
    sum(prev_market_vol_nrx_count) as prev_market_vol_nrx_count,
    sum(samples) as samples,
    sum(details_p1) as details_p1,
    sum(details_p2) as details_p2,
    sum(details_p3) as details_p3
  from reporting.weekly_prescriber_sales_summary
  where sales_force_id = :sales_force_id
  group by 1,2,3,4,5,6,7,8,9,10,11
)
select rx.sales_force_id,
  ga.nation_id,
  ga.nation_name as nation,
  ga.area_id,
  ga.area_name as area,
  ga.region_id,
  ga.region_name as region,
  ga.territory_id,
  ga.territory_name as territory,
  r.rep_name,
  r.user_id,
  'Weekly' as time_period, rx.period_type, rx.period as time_period,
  p.market_id, p.market_name,
  p.brand_id, p.brand_name,
  p.teva_product_flag,
  rx.customer_id,
  rx.tvcmid,
  c.pdrp_flag,
  coalesce(restrict_all.attribute_value, restrict_mkt.attribute_value,'I') as hcp_restriction_flag,
  case when c.physician_first_name is not null then c.physician_last_name || ', ' || c.physician_first_name 
       when c.physician_last_name is not null then c.physician_last_name 
       when c.account_name is not null then c.account_name 
       when c.network_name is not null then c.network_name 
  end as prescriber_name,
  case when np.customer_id is not null then 'Y' else 'N' end as new_prescriber,
  ca.address_1 as address,
  ca.city,
  ca.state,
  ca.zip,
  coalesce(t.target_status_flag,'N') as target_status_flag,
  'N' as partner_target_status_flag,
  rx.method_of_payment,
  case
    when c.pri_specialty_code is null then 'NA'
    when rx.sales_force_id in ('TO','ON') then coalesce(sm.specialty_group, 'A/O')
    else coalesce(sm.specialty_group, 'OTHER')
  end specialty,
  coalesce(segment.attribute_value,'NA') as segment,
  coalesce(decile.attribute_value,'0') as decile, 
  case when p.market_share_default_brand = 'Y' then 1 else 0 end as market_volume_indicator,
  product_vol_trx_count, market_vol_trx_count, prev_prod_vol_trx_count, prev_market_vol_trx_count,
  product_vol_nrx_count, market_vol_nrx_count, prev_prod_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3
from rx
  inner join reporting.product p on rx.market_id = p.market_id and rx.brand_id = p.product_id
  inner join reporting.customer c on rx.customer_id = c.customer_id
  inner join reporting.customer_address ca on rx.customer_id = ca.customer_id and rx.sales_force_id = ca.sales_force_id
  inner join reporting.geography_alignment ga on ca.territory_id = ga.territory_id
  inner join reporting.roster r on ca.territory_id = r.geography_id
  left outer join targets_for_market_and_territory t on (
    rx.customer_id = t.customer_id and rx.market_id = t.market_id and ca.territory_id = t.territory_id
  )
  left outer join reporting.specialty_mapping sm on (
    c.pri_specialty_code = sm.ims_specialty_code and rx.sales_force_id = sm.sales_force_id and rx.market_id = sm.market_id
  )
  left outer join reporting.weekly_new_prescriber np on (
    rx.brand_id = np.brand_id
    and rx.customer_id = np.customer_id
	and rx.week_bucket = np.week_bucket
  )
  left outer join reporting.customer_attributes decile on (
    rx.sales_force_id = coalesce(decile.sales_force_id, rx.sales_force_id)
    and rx.customer_id = decile.customer_id
    and rx.brand_id = p.product_id
    and p.rptg_decile_attribute_prod_id <=> decile.product_id
    and p.rptg_decile_attribute_type = decile.attribute_type
    and current_date between decile.attribute_effective_start_date and decile.attribute_effective_end_date
  )
  left outer join reporting.customer_attributes segment on (
    rx.sales_force_id = coalesce(segment.sales_force_id, rx.sales_force_id)
    and rx.customer_id = segment.customer_id
    and rx.brand_id = p.product_id
    and p.rptg_segment_attribute_prod_id <=> p.rptg_segment_attribute_prod_id
    and p.rptg_segment_attribute_type = segment.attribute_type
    and current_date between segment.attribute_effective_start_date and segment.attribute_effective_end_date
  )
  left outer join reporting.customer_attributes restrict_all on (
    restrict_all.customer_id = rx.customer_id
    and restrict_all.attribute_type = 'HCPRESTRICT'
    and restrict_all.sales_force_id is null
    and restrict_all.product_id is null
  )
  left outer join reporting.customer_attributes restrict_mkt on (
    restrict_mkt.customer_id = rx.customer_id
    and restrict_mkt.attribute_type = 'HCPRESTRICT'
    and restrict_mkt.sales_force_id is null
    and restrict_mkt.product_id = rx.market_id
  )
where (rx.week_bucket < 14 or rx.period_type = 'Aggregated')
  and rx.sales_force_id = :sales_force_id;
explain json insert /*+ DIRECT */ into reporting.TABLE_PREFIX_weekly_prescriber_summary (
  sales_force_id, nation_id, nation, area_id, area, region_id, region, territory_id, territory,
  rep_name, user_id, time_period, period_type, period, market_id, market_name, brand_id, brand_name, teva_product_flag,
  customer_id, tvcmid, pdrp_flag, hcp_restriction_flag, prescriber_name, new_prescriber, address, city, state, zip,
  target_status_flag, partner_target_status_flag, method_of_payment, specialty, segment, decile, market_volume_indicator,
  product_vol_trx_count, market_vol_trx_count, prev_prod_vol_trx_count, prev_market_vol_trx_count,
  product_vol_nrx_count, market_vol_nrx_count, prev_prod_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3 
)
with targets_for_market_and_territory as (
  select distinct ap.sales_force_id, ap.territory_id, 
                  customer_id, ap.tvcmid, p.market_id, ap.target_status_flag
  from reporting.activity_plan ap
    inner join reporting.product p on ap.product_id = p.product_id
  where customer_id is not null
), rx as (
  select sales_force_id, customer_id, tvcmid, ims_id,
    period_type, period, week_ending, week_bucket,
    market_id, brand_id, method_of_payment, 
    sum(product_vol_trx_count) as product_vol_trx_count,
    sum(prev_prod_vol_trx_count) as prev_prod_vol_trx_count,
    sum(product_vol_nrx_count) as product_vol_nrx_count,
    sum(prev_prod_vol_nrx_count) as prev_prod_vol_nrx_count,
    sum(market_vol_trx_count) as market_vol_trx_count,
    sum(prev_market_vol_trx_count) as prev_market_vol_trx_count,
    sum(market_vol_nrx_count) as market_vol_nrx_count,
    sum(prev_market_vol_nrx_count) as prev_market_vol_nrx_count,
    sum(samples) as samples,
    sum(details_p1) as details_p1,
    sum(details_p2) as details_p2,
    sum(details_p3) as details_p3
  from reporting.weekly_prescriber_sales_summary
  where sales_force_id = :sales_force_id
  group by 1,2,3,4,5,6,7,8,9,10,11
)
select rx.sales_force_id,
  ga.nation_id,
  ga.nation_name as nation,
  ga.area_id,
  ga.area_name as area,
  ga.region_id,
  ga.region_name as region,
  ga.territory_id,
  ga.territory_name as territory,
  r.rep_name,
  r.user_id,
  'Weekly' as time_period, rx.period_type, rx.period as time_period,
  p.market_id, p.market_name,
  p.brand_id, p.brand_name,
  p.teva_product_flag,
  rx.customer_id,
  rx.tvcmid,
  c.pdrp_flag,
  coalesce(restrict_all.attribute_value, restrict_mkt.attribute_value,'I') as hcp_restriction_flag,
  case when c.physician_first_name is not null then c.physician_last_name || ', ' || c.physician_first_name 
       when c.physician_last_name is not null then c.physician_last_name 
       when c.account_name is not null then c.account_name 
       when c.network_name is not null then c.network_name 
  end as prescriber_name,
  case when np.customer_id is not null then 'Y' else 'N' end as new_prescriber,
  ca.address_1 as address,
  ca.city,
  ca.state,
  ca.zip,
  coalesce(t.target_status_flag,'N') as target_status_flag,
  'N' as partner_target_status_flag,
  rx.method_of_payment,
  case
    when c.pri_specialty_code is null then 'NA'
    when rx.sales_force_id in ('TO','ON') then coalesce(sm.specialty_group, 'A/O')
    else coalesce(sm.specialty_group, 'OTHER')
  end specialty,
  coalesce(segment.attribute_value,'NA') as segment,
  coalesce(decile.attribute_value,'0') as decile, 
  case when p.market_share_default_brand = 'Y' then 1 else 0 end as market_volume_indicator,
  product_vol_trx_count, market_vol_trx_count, prev_prod_vol_trx_count, prev_market_vol_trx_count,
  product_vol_nrx_count, market_vol_nrx_count, prev_prod_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3
from rx
  inner join reporting.product p on rx.market_id = p.market_id and rx.brand_id = p.product_id
  inner join reporting.customer c on rx.customer_id = c.customer_id
  inner join reporting.customer_address ca on rx.customer_id = ca.customer_id and rx.sales_force_id = ca.sales_force_id
  inner join reporting.geography_alignment ga on ca.territory_id = ga.territory_id
  inner join reporting.roster r on ca.territory_id = r.geography_id
  left outer join targets_for_market_and_territory t on (
    rx.customer_id = t.customer_id and rx.market_id = t.market_id and ca.territory_id = t.territory_id
  )
  left outer join reporting.specialty_mapping sm on (
    c.pri_specialty_code = sm.ims_specialty_code and rx.sales_force_id = sm.sales_force_id and rx.market_id = sm.market_id
  )
  left outer join reporting.weekly_new_prescriber np on (
    rx.brand_id = np.brand_id
    and rx.customer_id = np.customer_id
	and rx.week_bucket = np.week_bucket
  )
  left outer join reporting.customer_attributes decile on (
    rx.sales_force_id = coalesce(decile.sales_force_id, rx.sales_force_id)
    and rx.customer_id = decile.customer_id
    and rx.brand_id = p.product_id
    and p.rptg_decile_attribute_prod_id <=> decile.product_id
    and p.rptg_decile_attribute_type = decile.attribute_type
    and current_date between decile.attribute_effective_start_date and decile.attribute_effective_end_date
  )
  left outer join reporting.customer_attributes segment on (
    rx.sales_force_id = coalesce(segment.sales_force_id, rx.sales_force_id)
    and rx.customer_id = segment.customer_id
    and rx.brand_id = p.product_id
    and p.rptg_segment_attribute_prod_id <=> p.rptg_segment_attribute_prod_id
    and p.rptg_segment_attribute_type = segment.attribute_type
    and current_date between segment.attribute_effective_start_date and segment.attribute_effective_end_date
  )
  left outer join reporting.customer_attributes restrict_all on (
    restrict_all.customer_id = rx.customer_id
    and restrict_all.attribute_type = 'HCPRESTRICT'
    and restrict_all.sales_force_id is null
    and restrict_all.product_id is null
  )
  left outer join reporting.customer_attributes restrict_mkt on (
    restrict_mkt.customer_id = rx.customer_id
    and restrict_mkt.attribute_type = 'HCPRESTRICT'
    and restrict_mkt.sales_force_id is null
    and restrict_mkt.product_id = rx.market_id
  )
where (rx.week_bucket < 14 or rx.period_type = 'Aggregated')
  and rx.sales_force_id = :sales_force_id;
explain insert /*+ DIRECT */ into reporting.TABLE_PREFIX_weekly_prescriber_summary (
  sales_force_id, nation_id, nation, area_id, area, region_id, region, territory_id, territory,
  rep_name, user_id, time_period, period_type, period, market_id, market_name, brand_id, brand_name, teva_product_flag,
  customer_id, tvcmid, pdrp_flag, hcp_restriction_flag, prescriber_name, new_prescriber, address, city, state, zip,
  target_status_flag, partner_target_status_flag, method_of_payment, specialty, segment, decile, market_volume_indicator,
  product_vol_trx_count, market_vol_trx_count, prev_prod_vol_trx_count, prev_market_vol_trx_count,
  product_vol_nrx_count, market_vol_nrx_count, prev_prod_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3 
)
with targets_for_market_and_territory as (
  select distinct ap.sales_force_id, ap.territory_id, 
                  customer_id, ap.tvcmid, p.market_id, ap.target_status_flag
  from reporting.activity_plan ap
    inner join reporting.product p on ap.product_id = p.product_id
  where customer_id is not null
), rx as (
  select sales_force_id, customer_id, tvcmid, ims_id,
    period_type, period, week_ending, week_bucket,
    market_id, brand_id, method_of_payment, 
    sum(product_vol_trx_count) as product_vol_trx_count,
    sum(prev_prod_vol_trx_count) as prev_prod_vol_trx_count,
    sum(product_vol_nrx_count) as product_vol_nrx_count,
    sum(prev_prod_vol_nrx_count) as prev_prod_vol_nrx_count,
    sum(market_vol_trx_count) as market_vol_trx_count,
    sum(prev_market_vol_trx_count) as prev_market_vol_trx_count,
    sum(market_vol_nrx_count) as market_vol_nrx_count,
    sum(prev_market_vol_nrx_count) as prev_market_vol_nrx_count,
    sum(samples) as samples,
    sum(details_p1) as details_p1,
    sum(details_p2) as details_p2,
    sum(details_p3) as details_p3
  from reporting.weekly_prescriber_sales_summary
  where sales_force_id = 'RS'
  group by 1,2,3,4,5,6,7,8,9,10,11
)
select rx.sales_force_id,
  ga.nation_id,
  ga.nation_name as nation,
  ga.area_id,
  ga.area_name as area,
  ga.region_id,
  ga.region_name as region,
  ga.territory_id,
  ga.territory_name as territory,
  r.rep_name,
  r.user_id,
  'Weekly' as time_period, rx.period_type, rx.period as time_period,
  p.market_id, p.market_name,
  p.brand_id, p.brand_name,
  p.teva_product_flag,
  rx.customer_id,
  rx.tvcmid,
  c.pdrp_flag,
  coalesce(restrict_all.attribute_value, restrict_mkt.attribute_value,'I') as hcp_restriction_flag,
  case when c.physician_first_name is not null then c.physician_last_name || ', ' || c.physician_first_name 
       when c.physician_last_name is not null then c.physician_last_name 
       when c.account_name is not null then c.account_name 
       when c.network_name is not null then c.network_name 
  end as prescriber_name,
  case when np.customer_id is not null then 'Y' else 'N' end as new_prescriber,
  ca.address_1 as address,
  ca.city,
  ca.state,
  ca.zip,
  coalesce(t.target_status_flag,'N') as target_status_flag,
  'N' as partner_target_status_flag,
  rx.method_of_payment,
  case
    when c.pri_specialty_code is null then 'NA'
    when rx.sales_force_id in ('TO','ON') then coalesce(sm.specialty_group, 'A/O')
    else coalesce(sm.specialty_group, 'OTHER')
  end specialty,
  coalesce(segment.attribute_value,'NA') as segment,
  coalesce(decile.attribute_value,'0') as decile, 
  case when p.market_share_default_brand = 'Y' then 1 else 0 end as market_volume_indicator,
  product_vol_trx_count, market_vol_trx_count, prev_prod_vol_trx_count, prev_market_vol_trx_count,
  product_vol_nrx_count, market_vol_nrx_count, prev_prod_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3
from rx
  inner join reporting.product p on rx.market_id = p.market_id and rx.brand_id = p.product_id
  inner join reporting.customer c on rx.customer_id = c.customer_id
  inner join reporting.customer_address ca on rx.customer_id = ca.customer_id and rx.sales_force_id = ca.sales_force_id
  inner join reporting.geography_alignment ga on ca.territory_id = ga.territory_id
  inner join reporting.roster r on ca.territory_id = r.geography_id
  left outer join targets_for_market_and_territory t on (
    rx.customer_id = t.customer_id and rx.market_id = t.market_id and ca.territory_id = t.territory_id
  )
  left outer join reporting.specialty_mapping sm on (
    c.pri_specialty_code = sm.ims_specialty_code and rx.sales_force_id = sm.sales_force_id and rx.market_id = sm.market_id
  )
  left outer join reporting.weekly_new_prescriber np on (
    rx.brand_id = np.brand_id
    and rx.customer_id = np.customer_id
	and rx.week_bucket = np.week_bucket
  )
  left outer join reporting.customer_attributes decile on (
    rx.sales_force_id = coalesce(decile.sales_force_id, rx.sales_force_id)
    and rx.customer_id = decile.customer_id
    and rx.brand_id = p.product_id
    and p.rptg_decile_attribute_prod_id <=> decile.product_id
    and p.rptg_decile_attribute_type = decile.attribute_type
    and current_date between decile.attribute_effective_start_date and decile.attribute_effective_end_date
  )
  left outer join reporting.customer_attributes segment on (
    rx.sales_force_id = coalesce(segment.sales_force_id, rx.sales_force_id)
    and rx.customer_id = segment.customer_id
    and rx.brand_id = p.product_id
    and p.rptg_segment_attribute_prod_id <=> p.rptg_segment_attribute_prod_id
    and p.rptg_segment_attribute_type = segment.attribute_type
    and current_date between segment.attribute_effective_start_date and segment.attribute_effective_end_date
  )
  left outer join reporting.customer_attributes restrict_all on (
    restrict_all.customer_id = rx.customer_id
    and restrict_all.attribute_type = 'HCPRESTRICT'
    and restrict_all.sales_force_id is null
    and restrict_all.product_id is null
  )
  left outer join reporting.customer_attributes restrict_mkt on (
    restrict_mkt.customer_id = rx.customer_id
    and restrict_mkt.attribute_type = 'HCPRESTRICT'
    and restrict_mkt.sales_force_id is null
    and restrict_mkt.product_id = rx.market_id
  )
where (rx.week_bucket < 14 or rx.period_type = 'Aggregated')
  and rx.sales_force_id = 'RS';
explain insert /*+ DIRECT */ into reporting.rs_weekly_prescriber_summary (
  sales_force_id, nation_id, nation, area_id, area, region_id, region, territory_id, territory,
  rep_name, user_id, time_period, period_type, period, market_id, market_name, brand_id, brand_name, teva_product_flag,
  customer_id, tvcmid, pdrp_flag, hcp_restriction_flag, prescriber_name, new_prescriber, address, city, state, zip,
  target_status_flag, partner_target_status_flag, method_of_payment, specialty, segment, decile, market_volume_indicator,
  product_vol_trx_count, market_vol_trx_count, prev_prod_vol_trx_count, prev_market_vol_trx_count,
  product_vol_nrx_count, market_vol_nrx_count, prev_prod_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3 
)
with targets_for_market_and_territory as (
  select distinct ap.sales_force_id, ap.territory_id, 
                  customer_id, ap.tvcmid, p.market_id, ap.target_status_flag
  from reporting.activity_plan ap
    inner join reporting.product p on ap.product_id = p.product_id
  where customer_id is not null
), rx as (
  select sales_force_id, customer_id, tvcmid, ims_id,
    period_type, period, week_ending, week_bucket,
    market_id, brand_id, method_of_payment, 
    sum(product_vol_trx_count) as product_vol_trx_count,
    sum(prev_prod_vol_trx_count) as prev_prod_vol_trx_count,
    sum(product_vol_nrx_count) as product_vol_nrx_count,
    sum(prev_prod_vol_nrx_count) as prev_prod_vol_nrx_count,
    sum(market_vol_trx_count) as market_vol_trx_count,
    sum(prev_market_vol_trx_count) as prev_market_vol_trx_count,
    sum(market_vol_nrx_count) as market_vol_nrx_count,
    sum(prev_market_vol_nrx_count) as prev_market_vol_nrx_count,
    sum(samples) as samples,
    sum(details_p1) as details_p1,
    sum(details_p2) as details_p2,
    sum(details_p3) as details_p3
  from reporting.weekly_prescriber_sales_summary
  where sales_force_id = 'RS'
  group by 1,2,3,4,5,6,7,8,9,10,11
)
select rx.sales_force_id,
  ga.nation_id,
  ga.nation_name as nation,
  ga.area_id,
  ga.area_name as area,
  ga.region_id,
  ga.region_name as region,
  ga.territory_id,
  ga.territory_name as territory,
  r.rep_name,
  r.user_id,
  'Weekly' as time_period, rx.period_type, rx.period as time_period,
  p.market_id, p.market_name,
  p.brand_id, p.brand_name,
  p.teva_product_flag,
  rx.customer_id,
  rx.tvcmid,
  c.pdrp_flag,
  coalesce(restrict_all.attribute_value, restrict_mkt.attribute_value,'I') as hcp_restriction_flag,
  case when c.physician_first_name is not null then c.physician_last_name || ', ' || c.physician_first_name 
       when c.physician_last_name is not null then c.physician_last_name 
       when c.account_name is not null then c.account_name 
       when c.network_name is not null then c.network_name 
  end as prescriber_name,
  case when np.customer_id is not null then 'Y' else 'N' end as new_prescriber,
  ca.address_1 as address,
  ca.city,
  ca.state,
  ca.zip,
  coalesce(t.target_status_flag,'N') as target_status_flag,
  'N' as partner_target_status_flag,
  rx.method_of_payment,
  case
    when c.pri_specialty_code is null then 'NA'
    when rx.sales_force_id in ('TO','ON') then coalesce(sm.specialty_group, 'A/O')
    else coalesce(sm.specialty_group, 'OTHER')
  end specialty,
  coalesce(segment.attribute_value,'NA') as segment,
  coalesce(decile.attribute_value,'0') as decile, 
  case when p.market_share_default_brand = 'Y' then 1 else 0 end as market_volume_indicator,
  product_vol_trx_count, market_vol_trx_count, prev_prod_vol_trx_count, prev_market_vol_trx_count,
  product_vol_nrx_count, market_vol_nrx_count, prev_prod_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3
from rx
  inner join reporting.product p on rx.market_id = p.market_id and rx.brand_id = p.product_id
  inner join reporting.customer c on rx.customer_id = c.customer_id
  inner join reporting.customer_address ca on rx.customer_id = ca.customer_id and rx.sales_force_id = ca.sales_force_id
  inner join reporting.geography_alignment ga on ca.territory_id = ga.territory_id
  inner join reporting.roster r on ca.territory_id = r.geography_id
  left outer join targets_for_market_and_territory t on (
    rx.customer_id = t.customer_id and rx.market_id = t.market_id and ca.territory_id = t.territory_id
  )
  left outer join reporting.specialty_mapping sm on (
    c.pri_specialty_code = sm.ims_specialty_code and rx.sales_force_id = sm.sales_force_id and rx.market_id = sm.market_id
  )
  left outer join reporting.weekly_new_prescriber np on (
    rx.brand_id = np.brand_id
    and rx.customer_id = np.customer_id
	and rx.week_bucket = np.week_bucket
  )
  left outer join reporting.customer_attributes decile on (
    rx.sales_force_id = coalesce(decile.sales_force_id, rx.sales_force_id)
    and rx.customer_id = decile.customer_id
    and rx.brand_id = p.product_id
    and p.rptg_decile_attribute_prod_id <=> decile.product_id
    and p.rptg_decile_attribute_type = decile.attribute_type
    and current_date between decile.attribute_effective_start_date and decile.attribute_effective_end_date
  )
  left outer join reporting.customer_attributes segment on (
    rx.sales_force_id = coalesce(segment.sales_force_id, rx.sales_force_id)
    and rx.customer_id = segment.customer_id
    and rx.brand_id = p.product_id
    and p.rptg_segment_attribute_prod_id <=> p.rptg_segment_attribute_prod_id
    and p.rptg_segment_attribute_type = segment.attribute_type
    and current_date between segment.attribute_effective_start_date and segment.attribute_effective_end_date
  )
  left outer join reporting.customer_attributes restrict_all on (
    restrict_all.customer_id = rx.customer_id
    and restrict_all.attribute_type = 'HCPRESTRICT'
    and restrict_all.sales_force_id is null
    and restrict_all.product_id is null
  )
  left outer join reporting.customer_attributes restrict_mkt on (
    restrict_mkt.customer_id = rx.customer_id
    and restrict_mkt.attribute_type = 'HCPRESTRICT'
    and restrict_mkt.sales_force_id is null
    and restrict_mkt.product_id = rx.market_id
  )
where (rx.week_bucket < 14 or rx.period_type = 'Aggregated')
  and rx.sales_force_id = 'RS';
explain insert /*+ DIRECT */ into reporting.monthly_prescriber_sales_summary (
  sales_force_id, customer_id, tvcmid, ims_id, 
  period_type, period, month_ending, month_bucket,
  market_id, brand_id, 
  payer_id, payer_plan_id, method_of_payment, hcp_restriction_flag,
  product_vol_trx_count, prev_prod_vol_trx_count, 
  product_vol_nrx_count, prev_prod_vol_nrx_count,
  market_vol_trx_count, prev_market_vol_trx_count,
  market_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3 
)
with tmp_trend_rows_brand as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.month_ending, ps.month_bucket, p.market_id, p.brand_id, 
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as trx, sum(ps.nrx) as nrx
  from reporting.monthly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_market as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.month_ending, ps.month_bucket, p.market_id, p.market_share_brand_id,
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as mkt_trx, sum(ps.nrx) as mkt_nrx
  from reporting.monthly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
    where p.brand_type <> 'group'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_activity as (
  select a.sales_force_id, customer_id, tvcmid, ims_id, month_end as month_ending, r.sales_month_bucket as month_bucket,
    null as payer_plan_id, null as method_of_payment, p.market_id, p.brand_id,
    sum(case when activity_detail = 'Detail P1' then activity_value else 0 end) as details_p1, 
    sum(case when activity_detail = 'Detail P2' then activity_value else 0 end) as details_p2, 
    sum(case when activity_detail in ('Detail P3','Detail P4','Detail P5') then activity_value else 0 end) as details_p3, 
    sum(case when activity_name in ('Sample Drop','Sample Shipment') then activity_value else 0 end) as samples		-- CSD-777
  from reporting.monthly_activity a
    inner join reporting.product p on a.product_id = p.product_id
    inner join reporting.reporting_rollup_month r on a.month_end = r.rollup_month
  where activity_name in ('Detail','Group Detail','Sample Drop','Sample Shipment')			-- CSD-777
--    and a.sales_force_id in ('TN','TO','TP','SP')
--    and a.sales_force_id in ('NS','ON','NP','SP','MA','SA')
    and a.sales_force_id in ('NS','ON','NP','RS','MA')
    and r.sales_month_bucket is not null
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_target as (
  select ap.sales_force_id, ap.customer_id, ap.tvcmid, c.ims_id, r.rollup_month month_ending, r.sales_month_bucket month_bucket, p.market_id, p.brand_id,
    null as payer_plan_id, null as method_of_payment
  from reporting.activity_plan ap
    inner join reporting.customer c on (ap.customer_id = c.customer_id)
    inner join tmp_product p on ap.product_id = p.brand_id
    inner join reporting.reporting_rollup_month r on (r.sales_month_bucket = 1)
  where ap.target_status_flag = 'Y'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), keys as (
  select sales_force_id, customer_id, tvcmid, ims_id, month_ending, month_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_brand
  union
  select sales_force_id, customer_id, tvcmid, ims_id, month_ending, month_bucket, market_id, market_share_brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_market
  union
  select sales_force_id, customer_id, tvcmid, ims_id, month_ending, month_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_activity
  union
  select sales_force_id, customer_id, tvcmid, ims_id, month_ending, month_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_target
)
select k.sales_force_id, k.customer_id, k.tvcmid, k.ims_id,
  'Trend' as period_type, to_char(k.month_ending) as period,
  k.month_ending, k.month_bucket, k.market_id, k.brand_id, 
  pm.payer_id, k.payer_plan_id, k.method_of_payment, 'I' as hcp_restriction_flag,
  coalesce(b.trx,0) as trx,
  0 as prev_trx,
  coalesce(b.nrx,0) as nrx,
  0 as prev_nrx,
  coalesce(m.mkt_trx,0) as mkt_trx,
  0 as prev_mkt_trx,
  coalesce(m.mkt_nrx,0) as mkt_nrx,
  0 as prev_mkt_nrx,
  coalesce(a.samples,0) as samples,
  coalesce(a.details_p1,0) as details_p1,
  coalesce(a.details_p2,0) as details_p2,
  coalesce(a.details_p3,0) as details_p3
from keys k
  left outer join reporting.payer_mapping pm on (pm.payer_plan_id = k.payer_plan_id)
  left outer join tmp_trend_rows_brand b on (
    k.sales_force_id = b.sales_force_id
    and k.customer_id <=> b.customer_id
    and k.tvcmid <=> b.tvcmid
    and k.ims_id <=> b.ims_id
    and k.month_ending = b.month_ending
    and k.month_bucket = b.month_bucket
    and k.market_id = b.market_id
    and k.brand_id = b.brand_id
    and k.payer_plan_id <=> b.payer_plan_id
    and k.method_of_payment <=> b.method_of_payment
  )
  left outer join tmp_trend_rows_market m on (
    k.sales_force_id = m.sales_force_id
    and k.customer_id <=> m.customer_id
    and k.tvcmid <=> m.tvcmid
    and k.ims_id <=> m.ims_id
    and k.month_ending = m.month_ending
    and k.month_bucket = m.month_bucket
    and k.market_id = m.market_id
    and k.brand_id = m.market_share_brand_id
    and k.payer_plan_id <=> m.payer_plan_id
    and k.method_of_payment <=> m.method_of_payment
  )
  left outer join tmp_trend_rows_activity a on (
    k.sales_force_id = a.sales_force_id
    and k.customer_id <=> a.customer_id
    and k.tvcmid <=> a.tvcmid
    and k.ims_id <=> a.ims_id
    and k.month_ending = a.month_ending
    and k.month_bucket = a.month_bucket
    and k.market_id = a.market_id
    and k.brand_id = a.brand_id
    and k.payer_plan_id <=> a.payer_plan_id
    and k.method_of_payment <=> a.method_of_payment
  )
  left outer join tmp_trend_rows_target t on (
    k.sales_force_id = t.sales_force_id
    and k.customer_id <=> t.customer_id
    and k.tvcmid <=> t.tvcmid
    and k.ims_id <=> t.ims_id
    and k.month_ending = t.month_ending
    and k.month_bucket = t.month_bucket
    and k.market_id = t.market_id
    and k.brand_id = t.brand_id
    and k.payer_plan_id <=> t.payer_plan_id
    and k.method_of_payment <=> t.method_of_payment
  );
explain insert /*+ DIRECT */ into reporting.monthly_prescriber_sales_summary (
  sales_force_id, customer_id, tvcmid, ims_id, 
  period_type, period, month_ending, month_bucket,
  market_id, brand_id, 
  payer_id, payer_plan_id, method_of_payment, hcp_restriction_flag,
  product_vol_trx_count, prev_prod_vol_trx_count, 
  product_vol_nrx_count, prev_prod_vol_nrx_count,
  market_vol_trx_count, prev_market_vol_trx_count,
  market_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3 
)
with tmp_trend_rows_brand as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.month_ending, ps.month_bucket, p.market_id, p.brand_id, 
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as trx, sum(ps.nrx) as nrx
  from reporting.monthly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_market as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.month_ending, ps.month_bucket, p.market_id, p.market_share_brand_id,
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as mkt_trx, sum(ps.nrx) as mkt_nrx
  from reporting.monthly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
    where p.brand_type <> 'group'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_activity as (
  select a.sales_force_id, customer_id, tvcmid, ims_id, month_end as month_ending, r.sales_month_bucket as month_bucket,
    null as payer_plan_id, null as method_of_payment, p.market_id, p.brand_id,
    sum(case when activity_detail = 'Detail P1' then activity_value else 0 end) as details_p1, 
    sum(case when activity_detail = 'Detail P2' then activity_value else 0 end) as details_p2, 
    sum(case when activity_detail in ('Detail P3','Detail P4','Detail P5') then activity_value else 0 end) as details_p3, 
    sum(case when activity_name in ('Sample Drop','Sample Shipment') then activity_value else 0 end) as samples		-- CSD-777
  from reporting.monthly_activity a
    inner join reporting.product p on a.product_id = p.product_id
    inner join reporting.reporting_rollup_month r on a.month_end = r.rollup_month
  where activity_name in ('Detail','Group Detail','Sample Drop','Sample Shipment')			-- CSD-777
--    and a.sales_force_id in ('TN','TO','TP','SP')
--    and a.sales_force_id in ('NS','ON','NP','SP','MA','SA')
    and a.sales_force_id in ('NS','ON','NP','RS','MA')
    and r.sales_month_bucket is not null
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_target as (
  select ap.sales_force_id, ap.customer_id, ap.tvcmid, c.ims_id, r.rollup_month month_ending, r.sales_month_bucket month_bucket, p.market_id, p.brand_id,
    null as payer_plan_id, null as method_of_payment
  from reporting.activity_plan ap
    inner join reporting.customer c on (ap.customer_id = c.customer_id)
    inner join tmp_product p on ap.product_id = p.brand_id
    inner join reporting.reporting_rollup_month r on (r.sales_month_bucket = 1)
  where ap.target_status_flag = 'Y'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), keys as (
  select sales_force_id, customer_id, tvcmid, ims_id, month_ending, month_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_brand
  union
  select sales_force_id, customer_id, tvcmid, ims_id, month_ending, month_bucket, market_id, market_share_brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_market
  union
  select sales_force_id, customer_id, tvcmid, ims_id, month_ending, month_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_activity
  union
  select sales_force_id, customer_id, tvcmid, ims_id, month_ending, month_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_target
)
select k.sales_force_id, k.customer_id, k.tvcmid, k.ims_id,
  'Trend' as period_type, to_char(k.month_ending) as period,
  k.month_ending, k.month_bucket, k.market_id, k.brand_id, 
  pm.payer_id, k.payer_plan_id, k.method_of_payment, 'I' as hcp_restriction_flag,
  coalesce(b.trx,0) as trx,
  0 as prev_trx,
  coalesce(b.nrx,0) as nrx,
  0 as prev_nrx,
  coalesce(m.mkt_trx,0) as mkt_trx,
  0 as prev_mkt_trx,
  coalesce(m.mkt_nrx,0) as mkt_nrx,
  0 as prev_mkt_nrx,
  coalesce(a.samples,0) as samples,
  coalesce(a.details_p1,0) as details_p1,
  coalesce(a.details_p2,0) as details_p2,
  coalesce(a.details_p3,0) as details_p3
from keys k
  left outer join reporting.payer_mapping pm on (pm.payer_plan_id = k.payer_plan_id)
  left outer join tmp_trend_rows_brand b on (
    k.sales_force_id = b.sales_force_id
    and k.customer_id <=> b.customer_id
    and k.tvcmid <=> b.tvcmid
    and k.ims_id <=> b.ims_id
    and k.month_ending = b.month_ending
    and k.month_bucket = b.month_bucket
    and k.market_id = b.market_id
    and k.brand_id = b.brand_id
    and k.payer_plan_id <=> b.payer_plan_id
    and k.method_of_payment <=> b.method_of_payment
  )
  left outer join tmp_trend_rows_market m on (
    k.sales_force_id = m.sales_force_id
    and k.customer_id <=> m.customer_id
    and k.tvcmid <=> m.tvcmid
    and k.ims_id <=> m.ims_id
    and k.month_ending = m.month_ending
    and k.month_bucket = m.month_bucket
    and k.market_id = m.market_id
    and k.brand_id = m.market_share_brand_id
    and k.payer_plan_id <=> m.payer_plan_id
    and k.method_of_payment <=> m.method_of_payment
  )
  left outer join tmp_trend_rows_activity a on (
    k.sales_force_id = a.sales_force_id
    and k.customer_id <=> a.customer_id
    and k.tvcmid <=> a.tvcmid
    and k.ims_id <=> a.ims_id
    and k.month_ending = a.month_ending
    and k.month_bucket = a.month_bucket
    and k.market_id = a.market_id
    and k.brand_id = a.brand_id
    and k.payer_plan_id <=> a.payer_plan_id
    and k.method_of_payment <=> a.method_of_payment
  )
  left outer join tmp_trend_rows_target t on (
    k.sales_force_id = t.sales_force_id
    and k.customer_id <=> t.customer_id
    and k.tvcmid <=> t.tvcmid
    and k.ims_id <=> t.ims_id
    and k.month_ending = t.month_ending
    and k.month_bucket = t.month_bucket
    and k.market_id = t.market_id
    and k.brand_id = t.brand_id
    and k.payer_plan_id <=> t.payer_plan_id
    and k.method_of_payment <=> t.method_of_payment
  );
explain insert /*+ DIRECT */ into reporting.monthly_prescriber_sales_summary (
  sales_force_id, customer_id, tvcmid, ims_id, 
  period_type, period, month_bucket, 
  market_id, brand_id, 
  payer_id, payer_plan_id, method_of_payment, hcp_restriction_flag,
  product_vol_trx_count, prev_prod_vol_trx_count, 
  product_vol_nrx_count, prev_prod_vol_nrx_count,
  market_vol_trx_count, prev_market_vol_trx_count,
  market_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3
)
with periods as (
  select '3M' as period, 1 as curr_bucket_start, 3 as curr_bucket_stop, 4 as prev_bucket_start, 6 as prev_bucket_stop from dual
  union
  select '6M' as period, 1, 6, 7, 12 from dual
  union
  select '12M' as period, 1, 12, 13, 24 from dual
  union
  select 'CM' as period, 1, 1, 2, 2 from dual
  union
  select 'YTD Monthly' as period, start_bucket_this_year, stop_bucket_this_year,
    start_bucket_this_year + 12 as start_bucket_last_year,
    stop_bucket_this_year + 12 as stop_bucket_last_year
  from (
    select rollup_month,
      sales_month_bucket as start_bucket_this_year,
      max(sales_month_bucket) over(partition by extract(year from rollup_month)) as stop_bucket_this_year
    from reporting.reporting_rollup_month
    where sales_month_bucket is not null
    order by sales_month_bucket
    limit 1
  ) x
)
select sales_force_id, customer_id, tvcmid, ims_id, 'Aggregated' as period_type, periods.period, month_bucket, market_id, brand_id, payer_id, payer_plan_id, method_of_payment, hcp_restriction_flag,
  sum(case when month_bucket between curr_bucket_start and curr_bucket_stop then product_vol_trx_count else 0 end) as product_vol_trx_count,
  sum(case when month_bucket between prev_bucket_start and prev_bucket_stop then product_vol_trx_count else 0 end) as prev_prod_vol_trx_count,
  sum(case when month_bucket between curr_bucket_start and curr_bucket_stop then product_vol_nrx_count else 0 end) as product_vol_nrx_count,
  sum(case when month_bucket between prev_bucket_start and prev_bucket_stop then product_vol_nrx_count else 0 end) as prev_prod_vol_nrx_count,
  sum(case when month_bucket between curr_bucket_start and curr_bucket_stop then market_vol_trx_count else 0 end) as market_vol_trx_count,
  sum(case when month_bucket between prev_bucket_start and prev_bucket_stop then market_vol_trx_count else 0 end) as prev_market_vol_trx_count,
  sum(case when month_bucket between curr_bucket_start and curr_bucket_stop then market_vol_nrx_count else 0 end) as market_vol_nrx_count,
  sum(case when month_bucket between prev_bucket_start and prev_bucket_stop then market_vol_nrx_count else 0 end) as prev_market_vol_nrx_count,
  sum(case when month_bucket between curr_bucket_start and curr_bucket_stop then samples else 0 end) as samples,
  sum(case when month_bucket between curr_bucket_start and curr_bucket_stop then details_p1 else 0 end) as details_p1,
  sum(case when month_bucket between curr_bucket_start and curr_bucket_stop then details_p2 else 0 end) as details_p2,
  sum(case when month_bucket between curr_bucket_start and curr_bucket_stop then details_p3 else 0 end) as details_p3
from reporting.monthly_prescriber_sales_summary
  cross join periods
group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13;
explain insert /*+ DIRECT */ into reporting.monthly_prescriber_sales_summary (
  sales_force_id, customer_id, tvcmid, ims_id, 
  period_type, period, month_ending, month_bucket,
  market_id, brand_id, 
  payer_id, payer_plan_id, method_of_payment, hcp_restriction_flag,
  product_vol_trx_count, prev_prod_vol_trx_count, 
  product_vol_nrx_count, prev_prod_vol_nrx_count,
  market_vol_trx_count, prev_market_vol_trx_count,
  market_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3 
)
with tmp_trend_rows_brand as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.month_ending, ps.month_bucket, p.market_id, p.brand_id, 
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as trx, sum(ps.nrx) as nrx
  from reporting.monthly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_market as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.month_ending, ps.month_bucket, p.market_id, p.market_share_brand_id,
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as mkt_trx, sum(ps.nrx) as mkt_nrx
  from reporting.monthly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
    where p.brand_type <> 'group'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_activity as (
  select a.sales_force_id, customer_id, tvcmid, ims_id, month_end as month_ending, r.sales_month_bucket as month_bucket,
    null as payer_plan_id, null as method_of_payment, p.market_id, p.brand_id,
    sum(case when activity_detail = 'Detail P1' then activity_value else 0 end) as details_p1, 
    sum(case when activity_detail = 'Detail P2' then activity_value else 0 end) as details_p2, 
    sum(case when activity_detail in ('Detail P3','Detail P4','Detail P5') then activity_value else 0 end) as details_p3, 
    sum(case when activity_name in ('Sample Drop','Sample Shipment') then activity_value else 0 end) as samples		-- CSD-777
  from reporting.monthly_activity a
    inner join reporting.product p on a.product_id = p.product_id
    inner join reporting.reporting_rollup_month r on a.month_end = r.rollup_month
  where activity_name in ('Detail','Group Detail','Sample Drop','Sample Shipment')			-- CSD-777
--    and a.sales_force_id in ('TN','TO','TP','SP')
--    and a.sales_force_id in ('NS','ON','NP','SP','MA','SA')
    and a.sales_force_id in ('NS','ON','NP','RS','MA')
    and r.sales_month_bucket is not null
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_target as (
  select ap.sales_force_id, ap.customer_id, ap.tvcmid, c.ims_id, r.rollup_month month_ending, r.sales_month_bucket month_bucket, p.market_id, p.brand_id,
    null as payer_plan_id, null as method_of_payment
  from reporting.activity_plan ap
    inner join reporting.customer c on (ap.customer_id = c.customer_id)
    inner join tmp_product p on ap.product_id = p.brand_id
    inner join reporting.reporting_rollup_month r on (r.sales_month_bucket = 1)
  where ap.target_status_flag = 'Y'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), keys as (
  select sales_force_id, customer_id, tvcmid, ims_id, month_ending, month_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_brand
  union
  select sales_force_id, customer_id, tvcmid, ims_id, month_ending, month_bucket, market_id, market_share_brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_market
  union
  select sales_force_id, customer_id, tvcmid, ims_id, month_ending, month_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_activity
  union
  select sales_force_id, customer_id, tvcmid, ims_id, month_ending, month_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_target
)
select k.sales_force_id, k.customer_id, k.tvcmid, k.ims_id,
  'Trend' as period_type, to_char(k.month_ending) as period,
  k.month_ending, k.month_bucket, k.market_id, k.brand_id, 
  pm.payer_id, k.payer_plan_id, k.method_of_payment, 'I' as hcp_restriction_flag,
  coalesce(b.trx,0) as trx,
  0 as prev_trx,
  coalesce(b.nrx,0) as nrx,
  0 as prev_nrx,
  coalesce(m.mkt_trx,0) as mkt_trx,
  0 as prev_mkt_trx,
  coalesce(m.mkt_nrx,0) as mkt_nrx,
  0 as prev_mkt_nrx,
  coalesce(a.samples,0) as samples,
  coalesce(a.details_p1,0) as details_p1,
  coalesce(a.details_p2,0) as details_p2,
  coalesce(a.details_p3,0) as details_p3
from keys k
  left outer join reporting.payer_mapping pm on (pm.payer_plan_id = k.payer_plan_id)
  left outer join tmp_trend_rows_brand b on (
    k.sales_force_id = b.sales_force_id
    and k.customer_id <=> b.customer_id
    and k.tvcmid <=> b.tvcmid
    and k.ims_id <=> b.ims_id
    and k.month_ending = b.month_ending
    and k.month_bucket = b.month_bucket
    and k.market_id = b.market_id
    and k.brand_id = b.brand_id
    and k.payer_plan_id <=> b.payer_plan_id
    and k.method_of_payment <=> b.method_of_payment
  )
  left outer join tmp_trend_rows_market m on (
    k.sales_force_id = m.sales_force_id
    and k.customer_id <=> m.customer_id
    and k.tvcmid <=> m.tvcmid
    and k.ims_id <=> m.ims_id
    and k.month_ending = m.month_ending
    and k.month_bucket = m.month_bucket
    and k.market_id = m.market_id
    and k.brand_id = m.market_share_brand_id
    and k.payer_plan_id <=> m.payer_plan_id
    and k.method_of_payment <=> m.method_of_payment
  )
  left outer join tmp_trend_rows_activity a on (
    k.sales_force_id = a.sales_force_id
    and k.customer_id <=> a.customer_id
    and k.tvcmid <=> a.tvcmid
    and k.ims_id <=> a.ims_id
    and k.month_ending = a.month_ending
    and k.month_bucket = a.month_bucket
    and k.market_id = a.market_id
    and k.brand_id = a.brand_id
    and k.payer_plan_id <=> a.payer_plan_id
    and k.method_of_payment <=> a.method_of_payment
  )
  left outer join tmp_trend_rows_target t on (
    k.sales_force_id = t.sales_force_id
    and k.customer_id <=> t.customer_id
    and k.tvcmid <=> t.tvcmid
    and k.ims_id <=> t.ims_id
    and k.month_ending = t.month_ending
    and k.month_bucket = t.month_bucket
    and k.market_id = t.market_id
    and k.brand_id = t.brand_id
    and k.payer_plan_id <=> t.payer_plan_id
    and k.method_of_payment <=> t.method_of_payment
  );
explain select rmsf.sales_force_id, x.*, b.brand_id as market_share_brand_id
from (
  select product_id, product_name, product_type, teva_product_flag, presc_summary_include, 
    brand_id, brand_name, 'brand' as brand_type, market_id, market_name,
    rptg_decile_attribute_type, rptg_decile_attribute_prod_id,
    rptg_segment_attribute_type, rptg_segment_attribute_prod_id
  from reporting.product 
  where product_type in ('product','package')
  union
  select p.product_id, p.product_name, p.product_type, p.teva_product_flag, p.presc_summary_include,
    rg.brand_id, rg.brand_name, 'group' as brand_type, p.market_id, p.market_name,
    p.rptg_decile_attribute_type, p.rptg_decile_attribute_prod_id,
    p.rptg_segment_attribute_type, p.rptg_segment_attribute_prod_id
  from reporting.product rg
    join reporting.product_item ri on (ri.product_id = rg.product_id)
    join reporting.product p on (p.product_id = ri.item_id)
    where rg.product_type in ('reporting group')
) x
inner join reference.reporting_market_sales_force rmsf on x.market_id = rmsf.market_basket_id
inner join reporting.product b on x.market_id = b.market_id
where rmsf.sales_force_id in ('NS','ON','NP','RS','MA')
  and x.presc_summary_include = 'Y'
  and b.product_type = 'brand'
  and b.market_share_default_brand = 'Y';
-- February 10, 2021 10:49:35 AM PST
select * from projections
where projection_schema = 'reporting';
-- February 10, 2021 10:49:35 AM PST
select * from projections
where projection_schema = 'reporting'
and create_type ='DESIGNER';
explain select rmsf.sales_force_id, x.*, b.brand_id as market_share_brand_id
from (
  select product_id, product_name, product_type, teva_product_flag, presc_summary_include, 
    brand_id, brand_name, 'brand' as brand_type, market_id, market_name,
    rptg_decile_attribute_type, rptg_decile_attribute_prod_id,
    rptg_segment_attribute_type, rptg_segment_attribute_prod_id
  from reporting.product 
  where product_type in ('product','package')
  union
  select p.product_id, p.product_name, p.product_type, p.teva_product_flag, p.presc_summary_include,
    rg.brand_id, rg.brand_name, 'group' as brand_type, p.market_id, p.market_name,
    p.rptg_decile_attribute_type, p.rptg_decile_attribute_prod_id,
    p.rptg_segment_attribute_type, p.rptg_segment_attribute_prod_id
  from reporting.product rg
    join reporting.product_item ri on (ri.product_id = rg.product_id)
    join reporting.product p on (p.product_id = ri.item_id)
    where rg.product_type in ('reporting group')
) x
inner join reference.reporting_market_sales_force rmsf on x.market_id = rmsf.market_basket_id
inner join reporting.product b on x.market_id = b.market_id
--where rmsf.sales_force_id in ('TN','TO','TP','SP')
--where rmsf.sales_force_id in ('NS','ON','NP','SP','MA','SA')
where rmsf.sales_force_id in ('NS','ON','NP','RS','MA')
  and x.presc_summary_include = 'Y'
  and b.product_type = 'brand'
  and b.market_share_default_brand = 'Y';
explain
-- Trend rows
insert /*+ DIRECT */ into reporting.weekly_prescriber_sales_summary (
  sales_force_id, customer_id, tvcmid, ims_id, 
  period_type, period, week_ending, week_bucket,
  market_id, brand_id, 
  payer_id, payer_plan_id, method_of_payment,
  product_vol_trx_count, prev_prod_vol_trx_count, 
  product_vol_nrx_count, prev_prod_vol_nrx_count,
  market_vol_trx_count, prev_market_vol_trx_count,
  market_vol_nrx_count, prev_market_vol_nrx_count, 
  samples, details_p1, details_p2, details_p3 
)
with tmp_trend_rows_brand as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.week_ending, ps.week_bucket, p.market_id, p.brand_id, 
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as trx, sum(ps.nrx) as nrx
  from reporting.weekly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
  where (tvcmid is not null or ims_id is not null)
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_market as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.week_ending, ps.week_bucket, p.market_id, p.market_share_brand_id,
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as mkt_trx, sum(ps.nrx) as mkt_nrx
  from reporting.weekly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
  where (tvcmid is not null or ims_id is not null)
    and p.brand_type <> 'group'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_activity as (
  select a.sales_force_id, a.customer_id, tvcmid, ims_id, week_end as week_ending, r.sales_week_bucket as week_bucket, p.market_id, p.brand_id,
    null as payer_plan_id, null as method_of_payment,
    sum(case when activity_detail = 'Detail P1' then activity_value else 0 end) as details_p1, 
    sum(case when activity_detail = 'Detail P2' then activity_value else 0 end) as details_p2, 
    sum(case when activity_detail in ('Detail P3','Detail P4','Detail P5') then activity_value else 0 end) as details_p3, 
    sum(case when activity_name in ('Sample Drop','Sample Shipment') then activity_value else 0 end) as samples			-- CSD-777
  from reporting.weekly_activity a
    inner join reporting.product p on a.product_id = p.product_id
    inner join reporting.reporting_rollup_week r on a.week_end = r.rollup_week
  where activity_name in ('Detail','Group Detail','Sample Drop','Sample Shipment')				-- CSD-777
    and r.sales_week_bucket is not null
    and (tvcmid is not null or ims_id is not null)
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_target as (
  select ap.sales_force_id, ap.customer_id, ap.tvcmid, c.ims_id, r.rollup_week week_ending, r.sales_week_bucket week_bucket, p.market_id, p.brand_id,
    null as payer_plan_id, null as method_of_payment
  from reporting.activity_plan ap
    inner join reporting.customer c on (ap.customer_id = c.customer_id)
    inner join tmp_product p on ap.product_id = p.brand_id
    inner join reporting.reporting_rollup_week r on (r.sales_week_bucket = 1)
  where ap.target_status_flag = 'Y'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), keys as (
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_brand
  union
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, market_share_brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_market
  union
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_activity
  union
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_target
)
select k.sales_force_id, k.customer_id, k.tvcmid, k.ims_id,
  'Trend' as period_type, to_char(k.week_ending) as period,
  k.week_ending, k.week_bucket, k.market_id, k.brand_id, 
  pm.payer_id, k.payer_plan_id, k.method_of_payment,
  coalesce(b.trx,0) as trx,
  0 as prev_trx,
  coalesce(b.nrx,0) as nrx,
  0 as prev_nrx,
  coalesce(m.mkt_trx,0) as mkt_trx,
  0 as prev_mkt_trx,
  coalesce(m.mkt_nrx,0) as mkt_nrx,
  0 as prev_mkt_nrx,
  coalesce(a.samples,0) as samples,
  coalesce(a.details_p1,0) as details_p1,
  coalesce(a.details_p2,0) as details_p2,
  coalesce(a.details_p3,0) as details_p3
from keys k
  left outer join reporting.payer_mapping pm on (pm.payer_plan_id = k.payer_plan_id)
  left outer join tmp_trend_rows_brand b on (
    k.sales_force_id = b.sales_force_id
    and k.customer_id <=> b.customer_id
    and k.tvcmid <=> b.tvcmid
    and k.ims_id <=> b.ims_id
    and k.week_ending = b.week_ending
    and k.week_bucket = b.week_bucket
    and k.market_id = b.market_id
    and k.brand_id = b.brand_id
    and k.payer_plan_id <=> b.payer_plan_id
    and k.method_of_payment <=> b.method_of_payment
  )
  left outer join tmp_trend_rows_market m on (
    k.sales_force_id = m.sales_force_id
    and k.customer_id <=> m.customer_id
    and k.tvcmid <=> m.tvcmid
    and k.ims_id <=> m.ims_id
    and k.week_ending = m.week_ending
    and k.week_bucket = m.week_bucket
    and k.market_id = m.market_id
    and k.brand_id = m.market_share_brand_id
    and k.payer_plan_id <=> m.payer_plan_id
    and k.method_of_payment <=> m.method_of_payment
  )
  left outer join tmp_trend_rows_activity a on (
    k.sales_force_id = a.sales_force_id
    and k.customer_id <=> a.customer_id
    and k.tvcmid <=> a.tvcmid
    and k.ims_id <=> a.ims_id
    and k.week_ending = a.week_ending
    and k.week_bucket = a.week_bucket
    and k.market_id = a.market_id
    and k.brand_id = a.brand_id
    and k.payer_plan_id <=> a.payer_plan_id
    and k.method_of_payment <=> a.method_of_payment
  )
  left outer join tmp_trend_rows_target t on (
    k.sales_force_id = t.sales_force_id
    and k.customer_id <=> t.customer_id
    and k.tvcmid <=> t.tvcmid
    and k.ims_id <=> t.ims_id
    and k.week_ending = t.week_ending
    and k.week_bucket = t.week_bucket
    and k.market_id = t.market_id
    and k.brand_id = t.brand_id
    and k.payer_plan_id <=> t.payer_plan_id
    and k.method_of_payment <=> t.method_of_payment
  );
drop table if exists tmp_product;
create local temporary table tmp_product on commit preserve rows as
select rmsf.sales_force_id, x.*, b.brand_id as market_share_brand_id
from (
  select product_id, product_name, product_type, teva_product_flag, presc_summary_include, 
    brand_id, brand_name, 'brand' as brand_type, market_id, market_name,
    rptg_decile_attribute_type, rptg_decile_attribute_prod_id,
    rptg_segment_attribute_type, rptg_segment_attribute_prod_id
  from reporting.product 
  where product_type in ('product','package')
  union
  select p.product_id, p.product_name, p.product_type, p.teva_product_flag, p.presc_summary_include,
    rg.brand_id, rg.brand_name, 'group' as brand_type, p.market_id, p.market_name,
    p.rptg_decile_attribute_type, p.rptg_decile_attribute_prod_id,
    p.rptg_segment_attribute_type, p.rptg_segment_attribute_prod_id
  from reporting.product rg
    join reporting.product_item ri on (ri.product_id = rg.product_id)
    join reporting.product p on (p.product_id = ri.item_id)
    where rg.product_type in ('reporting group')
) x
inner join reference.reporting_market_sales_force rmsf on x.market_id = rmsf.market_basket_id
inner join reporting.product b on x.market_id = b.market_id
--where rmsf.sales_force_id in ('TN','TO','TP','SP')
--where rmsf.sales_force_id in ('NS','ON','NP','SP','MA','SA')
where rmsf.sales_force_id in ('NS','ON','NP','RS','MA')
  and x.presc_summary_include = 'Y'
  and b.product_type = 'brand'
  and b.market_share_default_brand = 'Y'
unsegmented all nodes;
explain
-- Trend rows
insert /*+ DIRECT */ into reporting.weekly_prescriber_sales_summary (
  sales_force_id, customer_id, tvcmid, ims_id, 
  period_type, period, week_ending, week_bucket,
  market_id, brand_id, 
  payer_id, payer_plan_id, method_of_payment,
  product_vol_trx_count, prev_prod_vol_trx_count, 
  product_vol_nrx_count, prev_prod_vol_nrx_count,
  market_vol_trx_count, prev_market_vol_trx_count,
  market_vol_nrx_count, prev_market_vol_nrx_count, 
  samples, details_p1, details_p2, details_p3 
)
with tmp_trend_rows_brand as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.week_ending, ps.week_bucket, p.market_id, p.brand_id, 
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as trx, sum(ps.nrx) as nrx
  from reporting.weekly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
  where (tvcmid is not null or ims_id is not null)
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_market as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.week_ending, ps.week_bucket, p.market_id, p.market_share_brand_id,
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as mkt_trx, sum(ps.nrx) as mkt_nrx
  from reporting.weekly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
  where (tvcmid is not null or ims_id is not null)
    and p.brand_type <> 'group'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_activity as (
  select a.sales_force_id, a.customer_id, tvcmid, ims_id, week_end as week_ending, r.sales_week_bucket as week_bucket, p.market_id, p.brand_id,
    null as payer_plan_id, null as method_of_payment,
    sum(case when activity_detail = 'Detail P1' then activity_value else 0 end) as details_p1, 
    sum(case when activity_detail = 'Detail P2' then activity_value else 0 end) as details_p2, 
    sum(case when activity_detail in ('Detail P3','Detail P4','Detail P5') then activity_value else 0 end) as details_p3, 
    sum(case when activity_name in ('Sample Drop','Sample Shipment') then activity_value else 0 end) as samples			-- CSD-777
  from reporting.weekly_activity a
    inner join reporting.product p on a.product_id = p.product_id
    inner join reporting.reporting_rollup_week r on a.week_end = r.rollup_week
  where activity_name in ('Detail','Group Detail','Sample Drop','Sample Shipment')				-- CSD-777
    and r.sales_week_bucket is not null
    and (tvcmid is not null or ims_id is not null)
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_target as (
  select ap.sales_force_id, ap.customer_id, ap.tvcmid, c.ims_id, r.rollup_week week_ending, r.sales_week_bucket week_bucket, p.market_id, p.brand_id,
    null as payer_plan_id, null as method_of_payment
  from reporting.activity_plan ap
    inner join reporting.customer c on (ap.customer_id = c.customer_id)
    inner join tmp_product p on ap.product_id = p.brand_id
    inner join reporting.reporting_rollup_week r on (r.sales_week_bucket = 1)
  where ap.target_status_flag = 'Y'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), keys as (
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_brand
  union
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, market_share_brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_market
  union
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_activity
  union
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_target
)
select k.sales_force_id, k.customer_id, k.tvcmid, k.ims_id,
  'Trend' as period_type, to_char(k.week_ending) as period,
  k.week_ending, k.week_bucket, k.market_id, k.brand_id, 
  pm.payer_id, k.payer_plan_id, k.method_of_payment,
  coalesce(b.trx,0) as trx,
  0 as prev_trx,
  coalesce(b.nrx,0) as nrx,
  0 as prev_nrx,
  coalesce(m.mkt_trx,0) as mkt_trx,
  0 as prev_mkt_trx,
  coalesce(m.mkt_nrx,0) as mkt_nrx,
  0 as prev_mkt_nrx,
  coalesce(a.samples,0) as samples,
  coalesce(a.details_p1,0) as details_p1,
  coalesce(a.details_p2,0) as details_p2,
  coalesce(a.details_p3,0) as details_p3
from keys k
  left outer join reporting.payer_mapping pm on (pm.payer_plan_id = k.payer_plan_id)
  left outer join tmp_trend_rows_brand b on (
    k.sales_force_id = b.sales_force_id
    and k.customer_id <=> b.customer_id
    and k.tvcmid <=> b.tvcmid
    and k.ims_id <=> b.ims_id
    and k.week_ending = b.week_ending
    and k.week_bucket = b.week_bucket
    and k.market_id = b.market_id
    and k.brand_id = b.brand_id
    and k.payer_plan_id <=> b.payer_plan_id
    and k.method_of_payment <=> b.method_of_payment
  )
  left outer join tmp_trend_rows_market m on (
    k.sales_force_id = m.sales_force_id
    and k.customer_id <=> m.customer_id
    and k.tvcmid <=> m.tvcmid
    and k.ims_id <=> m.ims_id
    and k.week_ending = m.week_ending
    and k.week_bucket = m.week_bucket
    and k.market_id = m.market_id
    and k.brand_id = m.market_share_brand_id
    and k.payer_plan_id <=> m.payer_plan_id
    and k.method_of_payment <=> m.method_of_payment
  )
  left outer join tmp_trend_rows_activity a on (
    k.sales_force_id = a.sales_force_id
    and k.customer_id <=> a.customer_id
    and k.tvcmid <=> a.tvcmid
    and k.ims_id <=> a.ims_id
    and k.week_ending = a.week_ending
    and k.week_bucket = a.week_bucket
    and k.market_id = a.market_id
    and k.brand_id = a.brand_id
    and k.payer_plan_id <=> a.payer_plan_id
    and k.method_of_payment <=> a.method_of_payment
  )
  left outer join tmp_trend_rows_target t on (
    k.sales_force_id = t.sales_force_id
    and k.customer_id <=> t.customer_id
    and k.tvcmid <=> t.tvcmid
    and k.ims_id <=> t.ims_id
    and k.week_ending = t.week_ending
    and k.week_bucket = t.week_bucket
    and k.market_id = t.market_id
    and k.brand_id = t.brand_id
    and k.payer_plan_id <=> t.payer_plan_id
    and k.method_of_payment <=> t.method_of_payment
  );
create local temporary table tmp_hcp_plan_vol_rank on commit preserve rows as
  select *, row_number() over (
    partition by sales_force_id, customer_id, tvcmid, ims_id, period_type, period, market_id 
    order by market_vol_trx_count desc, payer_plan_id) as hcp_plan_vol_rank
  from (
    select sales_force_id, customer_id, tvcmid, ims_id, 
      period_type, period, market_id, payer_plan_id,
      sum(market_vol_trx_count) as market_vol_trx_count
    from reporting.weekly_prescriber_sales_summary
    where period_type = 'Aggregated'
      and market_vol_trx_count > 0
      and payer_plan_id is not null
    group by 1, 2, 3, 4, 5, 6, 7, 8
  ) b
;
explain 
  select *, row_number() over (
    partition by sales_force_id, customer_id, tvcmid, ims_id, period_type, period, market_id 
    order by market_vol_trx_count desc, payer_plan_id) as hcp_plan_vol_rank
  from (
    select sales_force_id, customer_id, tvcmid, ims_id, 
      period_type, period, market_id, payer_plan_id,
      sum(market_vol_trx_count) as market_vol_trx_count
    from reporting.weekly_prescriber_sales_summary
    where period_type = 'Aggregated'
      and market_vol_trx_count > 0
      and payer_plan_id is not null
    group by 1, 2, 3, 4, 5, 6, 7, 8
  ) b
;
explain 
update reporting.weekly_prescriber_sales_summary a set hcp_plan_vol_rank = x.hcp_plan_vol_rank
from tmp_hcp_plan_vol_rank x
where a.sales_force_id = x.sales_force_id
  and a.customer_id <=> x.customer_id
  and a.tvcmid <=> x.tvcmid
  and a.ims_id <=> x.ims_id
  and a.period_type = x.period_type
  and a.period = x.period
  and a.market_id = x.market_id
  and a.payer_plan_id = x.payer_plan_id;
explain 


-- Aggregated rows
insert /*+ DIRECT */ into reporting.weekly_prescriber_sales_summary (
  sales_force_id, customer_id, tvcmid, ims_id, 
  period_type, period, week_bucket,  
  market_id, brand_id, 
  payer_id, payer_plan_id, method_of_payment,
  product_vol_trx_count, prev_prod_vol_trx_count, 
  product_vol_nrx_count, prev_prod_vol_nrx_count,
  market_vol_trx_count, prev_market_vol_trx_count,
  market_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3
)
with periods as (
  select '4W' as period, 1 as curr_bucket_start, 4 as curr_bucket_stop, 5 as prev_bucket_start, 8 as prev_bucket_stop from dual
  union
  select '13W' as period, 1, 13, 14, 26 from dual
  union
  select 'CW' as period, 1, 1, 2, 2 from dual
  union
  select 'YTD' as period, start_bucket_this_year, stop_bucket_this_year,
    start_bucket_this_year + 52 as start_bucket_last_year,
    stop_bucket_this_year + 52 as stop_bucket_last_year
  from (
    select rollup_week,
      sales_week_bucket as start_bucket_this_year,
      max(sales_week_bucket) over(partition by extract(year from rollup_week)) as stop_bucket_this_year
    from reporting.reporting_rollup_week
    where sales_week_bucket is not null
    order by sales_week_bucket
    limit 1
  ) x
)
select sales_force_id, customer_id, tvcmid, ims_id, 'Aggregated' as period_type, periods.period, week_bucket, market_id, brand_id, payer_id, payer_plan_id, method_of_payment,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then product_vol_trx_count else 0 end) as product_vol_trx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then product_vol_trx_count else 0 end) as prev_prod_vol_trx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then product_vol_nrx_count else 0 end) as product_vol_nrx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then product_vol_nrx_count else 0 end) as prev_prod_vol_nrx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then market_vol_trx_count else 0 end) as market_vol_trx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then market_vol_trx_count else 0 end) as prev_market_vol_trx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then market_vol_nrx_count else 0 end) as market_vol_nrx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then market_vol_nrx_count else 0 end) as prev_market_vol_nrx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then samples else 0 end) as samples,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then details_p1 else 0 end) as details_p1,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then details_p2 else 0 end) as details_p2,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then details_p3 else 0 end) as details_p3
from reporting.weekly_prescriber_sales_summary
  cross join periods
group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ;
select export_objects('','reporting','false');
select export_objects('','reference','false');
explain select rmsf.sales_force_id, x.*, b.brand_id as market_share_brand_id
from (
  select product_id, product_name, product_type, teva_product_flag, presc_summary_include, 
    brand_id, brand_name, 'brand' as brand_type, market_id, market_name,
    rptg_decile_attribute_type, rptg_decile_attribute_prod_id,
    rptg_segment_attribute_type, rptg_segment_attribute_prod_id
  from reporting.product 
  where product_type in ('product','package')
  union
  select p.product_id, p.product_name, p.product_type, p.teva_product_flag, p.presc_summary_include,
    rg.brand_id, rg.brand_name, 'group' as brand_type, p.market_id, p.market_name,
    p.rptg_decile_attribute_type, p.rptg_decile_attribute_prod_id,
    p.rptg_segment_attribute_type, p.rptg_segment_attribute_prod_id
  from reporting.product rg
    join reporting.product_item ri on (ri.product_id = rg.product_id)
    join reporting.product p on (p.product_id = ri.item_id)
    where rg.product_type in ('reporting group')
) x
inner join reference.reporting_market_sales_force rmsf on x.market_id = rmsf.market_basket_id
inner join reporting.product b on x.market_id = b.market_id
where rmsf.sales_force_id in ('NS','ON','NP','RS','MA')
  and x.presc_summary_include = 'Y'
  and b.product_type = 'brand'
  and b.market_share_default_brand = 'Y';
explain -- Trend rows
insert /*+ DIRECT */ into reporting.weekly_prescriber_sales_summary ( sales_force_id, customer_id, tvcmid, ims_id, period_type, period, week_ending, week_bucket, market_id, brand_id, payer_id, payer_plan_id, method_of_payment, product_vol_trx_count, prev_prod_vol_trx_count, product_vol_nrx_count, prev_prod_vol_nrx_count, market_vol_trx_count, prev_market_vol_trx_count, market_vol_nrx_count, prev_market_vol_nrx_count, samples, details_p1, details_p2, details_p3 ) with tmp_trend_rows_brand as ( select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.week_ending, ps.week_bucket, p.market_id, p.brand_id, ps.payer_plan_id, ps.method_of_payment, sum(ps.trx) as trx, sum(ps.nrx) as nrx from reporting.weekly_prescriber_sales ps inner join tmp_product p on ps.product_id = p.product_id where (tvcmid is not null or ims_id is not null) group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ), tmp_trend_rows_market as ( select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.week_ending, ps.week_bucket, p.market_id, p.market_share_brand_id, ps.payer_plan_id, ps.method_of_payment, sum(ps.trx) as mkt_trx, sum(ps.nrx) as mkt_nrx from reporting.weekly_prescriber_sales ps inner join tmp_product p on ps.product_id = p.product_id where (tvcmid is not null or ims_id is not null) and p.brand_type <> 'group' group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ), tmp_trend_rows_activity as ( select a.sales_force_id, a.customer_id, tvcmid, ims_id, week_end as week_ending, r.sales_week_bucket as week_bucket, p.market_id, p.brand_id, null as payer_plan_id, null as method_of_payment, sum(case when activity_detail = 'Detail P1' then activity_value else 0 end) as details_p1, sum(case when activity_detail = 'Detail P2' then activity_value else 0 end) as details_p2, sum(case when activity_detail in ('Detail P3','Detail P4','Detail P5') then activity_value else 0 end) as details_p3, sum(case when activity_name in ('Sample Drop','Sample Shipment') then activity_value else 0 end) as samples -- CSD-777
 from reporting.weekly_activity a inner join reporting.product p on a.product_id = p.product_id inner join reporting.reporting_rollup_week r on a.week_end = r.rollup_week where activity_name in ('Detail','Group Detail','Sample Drop','Sample Shipment') -- CSD-777
 and r.sales_week_bucket is not null and (tvcmid is not null or ims_id is not null) group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ), tmp_trend_rows_target as ( select ap.sales_force_id, ap.customer_id, ap.tvcmid, c.ims_id, r.rollup_week week_ending, r.sales_week_bucket week_bucket, p.market_id, p.brand_id, null as payer_plan_id, null as method_of_payment from reporting.activity_plan ap inner join reporting.customer c on (ap.customer_id = c.customer_id) inner join tmp_product p on ap.product_id = p.brand_id inner join reporting.reporting_rollup_week r on (r.sales_week_bucket = 1) where ap.target_status_flag = 'Y' group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ), keys as ( select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment from tmp_trend_rows_brand union select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, market_share_brand_id, payer_plan_id, method_of_payment from tmp_trend_rows_market union select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment from tmp_trend_rows_activity union select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment from tmp_trend_rows_target ) select k.sales_force_id, k.customer_id, k.tvcmid, k.ims_id, 'Trend' as period_type, to_char(k.week_ending) as period, k.week_ending, k.week_bucket, k.market_id, k.brand_id, pm.payer_id, k.payer_plan_id, k.method_of_payment, coalesce(b.trx,0) as trx, 0 as prev_trx, coalesce(b.nrx,0) as nrx, 0 as prev_nrx, coalesce(m.mkt_trx,0) as mkt_trx, 0 as prev_mkt_trx, coalesce(m.mkt_nrx,0) as mkt_nrx, 0 as prev_mkt_nrx, coalesce(a.samples,0) as samples, coalesce(a.details_p1,0) as details_p1, coalesce(a.details_p2,0) as details_p2, coalesce(a.details_p3,0) as details_p3 from keys k left outer join reporting.payer_mapping pm on (pm.payer_plan_id = k.payer_plan_id) left outer join tmp_trend_rows_brand b on ( k.sales_force_id = b.sales_force_id and k.customer_id <=> b.customer_id and k.tvcmid <=> b.tvcmid and k.ims_id <=> b.ims_id and k.week_ending = b.week_ending and k.week_bucket = b.week_bucket and k.market_id = b.market_id and k.brand_id = b.brand_id and k.payer_plan_id <=> b.payer_plan_id and k.method_of_payment <=> b.method_of_payment ) left outer join tmp_trend_rows_market m on ( k.sales_force_id = m.sales_force_id and k.customer_id <=> m.customer_id and k.tvcmid <=> m.tvcmid and k.ims_id <=> m.ims_id and k.week_ending = m.week_ending and k.week_bucket = m.week_bucket and k.market_id = m.market_id and k.brand_id = m.market_share_brand_id and k.payer_plan_id <=> m.payer_plan_id and k.method_of_payment <=> m.method_of_payment ) left outer join tmp_trend_rows_activity a on ( k.sales_force_id = a.sales_force_id and k.customer_id <=> a.customer_id and k.tvcmid <=> a.tvcmid and k.ims_id <=> a.ims_id and k.week_ending = a.week_ending and k.week_bucket = a.week_bucket and k.market_id = a.market_id and k.brand_id = a.brand_id and k.payer_plan_id <=> a.payer_plan_id and k.method_of_payment <=> a.method_of_payment ) left outer join tmp_trend_rows_target t on ( k.sales_force_id = t.sales_force_id and k.customer_id <=> t.customer_id and k.tvcmid <=> t.tvcmid and k.ims_id <=> t.ims_id and k.week_ending = t.week_ending and k.week_bucket = t.week_bucket and k.market_id = t.market_id and k.brand_id = t.brand_id and k.payer_plan_id <=> t.payer_plan_id and k.method_of_payment <=> t.method_of_payment );
create local temporary table tmp_product on commit preserve rows as
select rmsf.sales_force_id, x.*, b.brand_id as market_share_brand_id
from (
  select product_id, product_name, product_type, teva_product_flag, presc_summary_include, 
    brand_id, brand_name, 'brand' as brand_type, market_id, market_name,
    rptg_decile_attribute_type, rptg_decile_attribute_prod_id,
    rptg_segment_attribute_type, rptg_segment_attribute_prod_id
  from reporting.product 
  where product_type in ('product','package')
  union
  select p.product_id, p.product_name, p.product_type, p.teva_product_flag, p.presc_summary_include,
    rg.brand_id, rg.brand_name, 'group' as brand_type, p.market_id, p.market_name,
    p.rptg_decile_attribute_type, p.rptg_decile_attribute_prod_id,
    p.rptg_segment_attribute_type, p.rptg_segment_attribute_prod_id
  from reporting.product rg
    join reporting.product_item ri on (ri.product_id = rg.product_id)
    join reporting.product p on (p.product_id = ri.item_id)
    where rg.product_type in ('reporting group')
) x
inner join reference.reporting_market_sales_force rmsf on x.market_id = rmsf.market_basket_id
inner join reporting.product b on x.market_id = b.market_id
--where rmsf.sales_force_id in ('TN','TO','TP','SP')
--where rmsf.sales_force_id in ('NS','ON','NP','SP','MA','SA')
where rmsf.sales_force_id in ('NS','ON','NP','RS','MA')
  and x.presc_summary_include = 'Y'
  and b.product_type = 'brand'
  and b.market_share_default_brand = 'Y'
unsegmented all nodes;
explain -- Trend rows
insert /*+ DIRECT */ into reporting.weekly_prescriber_sales_summary ( sales_force_id, customer_id, tvcmid, ims_id, period_type, period, week_ending, week_bucket, market_id, brand_id, payer_id, payer_plan_id, method_of_payment, product_vol_trx_count, prev_prod_vol_trx_count, product_vol_nrx_count, prev_prod_vol_nrx_count, market_vol_trx_count, prev_market_vol_trx_count, market_vol_nrx_count, prev_market_vol_nrx_count, samples, details_p1, details_p2, details_p3 ) with tmp_trend_rows_brand as ( select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.week_ending, ps.week_bucket, p.market_id, p.brand_id, ps.payer_plan_id, ps.method_of_payment, sum(ps.trx) as trx, sum(ps.nrx) as nrx from reporting.weekly_prescriber_sales ps inner join tmp_product p on ps.product_id = p.product_id where (tvcmid is not null or ims_id is not null) group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ), tmp_trend_rows_market as ( select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.week_ending, ps.week_bucket, p.market_id, p.market_share_brand_id, ps.payer_plan_id, ps.method_of_payment, sum(ps.trx) as mkt_trx, sum(ps.nrx) as mkt_nrx from reporting.weekly_prescriber_sales ps inner join tmp_product p on ps.product_id = p.product_id where (tvcmid is not null or ims_id is not null) and p.brand_type <> 'group' group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ), tmp_trend_rows_activity as ( select a.sales_force_id, a.customer_id, tvcmid, ims_id, week_end as week_ending, r.sales_week_bucket as week_bucket, p.market_id, p.brand_id, null as payer_plan_id, null as method_of_payment, sum(case when activity_detail = 'Detail P1' then activity_value else 0 end) as details_p1, sum(case when activity_detail = 'Detail P2' then activity_value else 0 end) as details_p2, sum(case when activity_detail in ('Detail P3','Detail P4','Detail P5') then activity_value else 0 end) as details_p3, sum(case when activity_name in ('Sample Drop','Sample Shipment') then activity_value else 0 end) as samples -- CSD-777
 from reporting.weekly_activity a inner join reporting.product p on a.product_id = p.product_id inner join reporting.reporting_rollup_week r on a.week_end = r.rollup_week where activity_name in ('Detail','Group Detail','Sample Drop','Sample Shipment') -- CSD-777
 and r.sales_week_bucket is not null and (tvcmid is not null or ims_id is not null) group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ), tmp_trend_rows_target as ( select ap.sales_force_id, ap.customer_id, ap.tvcmid, c.ims_id, r.rollup_week week_ending, r.sales_week_bucket week_bucket, p.market_id, p.brand_id, null as payer_plan_id, null as method_of_payment from reporting.activity_plan ap inner join reporting.customer c on (ap.customer_id = c.customer_id) inner join tmp_product p on ap.product_id = p.brand_id inner join reporting.reporting_rollup_week r on (r.sales_week_bucket = 1) where ap.target_status_flag = 'Y' group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ), keys as ( select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment from tmp_trend_rows_brand union select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, market_share_brand_id, payer_plan_id, method_of_payment from tmp_trend_rows_market union select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment from tmp_trend_rows_activity union select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment from tmp_trend_rows_target ) select k.sales_force_id, k.customer_id, k.tvcmid, k.ims_id, 'Trend' as period_type, to_char(k.week_ending) as period, k.week_ending, k.week_bucket, k.market_id, k.brand_id, pm.payer_id, k.payer_plan_id, k.method_of_payment, coalesce(b.trx,0) as trx, 0 as prev_trx, coalesce(b.nrx,0) as nrx, 0 as prev_nrx, coalesce(m.mkt_trx,0) as mkt_trx, 0 as prev_mkt_trx, coalesce(m.mkt_nrx,0) as mkt_nrx, 0 as prev_mkt_nrx, coalesce(a.samples,0) as samples, coalesce(a.details_p1,0) as details_p1, coalesce(a.details_p2,0) as details_p2, coalesce(a.details_p3,0) as details_p3 from keys k left outer join reporting.payer_mapping pm on (pm.payer_plan_id = k.payer_plan_id) left outer join tmp_trend_rows_brand b on ( k.sales_force_id = b.sales_force_id and k.customer_id <=> b.customer_id and k.tvcmid <=> b.tvcmid and k.ims_id <=> b.ims_id and k.week_ending = b.week_ending and k.week_bucket = b.week_bucket and k.market_id = b.market_id and k.brand_id = b.brand_id and k.payer_plan_id <=> b.payer_plan_id and k.method_of_payment <=> b.method_of_payment ) left outer join tmp_trend_rows_market m on ( k.sales_force_id = m.sales_force_id and k.customer_id <=> m.customer_id and k.tvcmid <=> m.tvcmid and k.ims_id <=> m.ims_id and k.week_ending = m.week_ending and k.week_bucket = m.week_bucket and k.market_id = m.market_id and k.brand_id = m.market_share_brand_id and k.payer_plan_id <=> m.payer_plan_id and k.method_of_payment <=> m.method_of_payment ) left outer join tmp_trend_rows_activity a on ( k.sales_force_id = a.sales_force_id and k.customer_id <=> a.customer_id and k.tvcmid <=> a.tvcmid and k.ims_id <=> a.ims_id and k.week_ending = a.week_ending and k.week_bucket = a.week_bucket and k.market_id = a.market_id and k.brand_id = a.brand_id and k.payer_plan_id <=> a.payer_plan_id and k.method_of_payment <=> a.method_of_payment ) left outer join tmp_trend_rows_target t on ( k.sales_force_id = t.sales_force_id and k.customer_id <=> t.customer_id and k.tvcmid <=> t.tvcmid and k.ims_id <=> t.ims_id and k.week_ending = t.week_ending and k.week_bucket = t.week_bucket and k.market_id = t.market_id and k.brand_id = t.brand_id and k.payer_plan_id <=> t.payer_plan_id and k.method_of_payment <=> t.method_of_payment );
explain insert /*+ DIRECT */ into reporting.weekly_prescriber_sales_summary (
  sales_force_id, customer_id, tvcmid, ims_id, 
  period_type, period, week_bucket,  
  market_id, brand_id, 
  payer_id, payer_plan_id, method_of_payment,
  product_vol_trx_count, prev_prod_vol_trx_count, 
  product_vol_nrx_count, prev_prod_vol_nrx_count,
  market_vol_trx_count, prev_market_vol_trx_count,
  market_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3
)
with periods as (
  select '4W' as period, 1 as curr_bucket_start, 4 as curr_bucket_stop, 5 as prev_bucket_start, 8 as prev_bucket_stop from dual
  union
  select '13W' as period, 1, 13, 14, 26 from dual
  union
  select 'CW' as period, 1, 1, 2, 2 from dual
  union
  select 'YTD' as period, start_bucket_this_year, stop_bucket_this_year,
    start_bucket_this_year + 52 as start_bucket_last_year,
    stop_bucket_this_year + 52 as stop_bucket_last_year
  from (
    select rollup_week,
      sales_week_bucket as start_bucket_this_year,
      max(sales_week_bucket) over(partition by extract(year from rollup_week)) as stop_bucket_this_year
    from reporting.reporting_rollup_week
    where sales_week_bucket is not null
    order by sales_week_bucket
    limit 1
  ) x
)
select sales_force_id, customer_id, tvcmid, ims_id, 'Aggregated' as period_type, periods.period, week_bucket, market_id, brand_id, payer_id, payer_plan_id, method_of_payment,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then product_vol_trx_count else 0 end) as product_vol_trx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then product_vol_trx_count else 0 end) as prev_prod_vol_trx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then product_vol_nrx_count else 0 end) as product_vol_nrx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then product_vol_nrx_count else 0 end) as prev_prod_vol_nrx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then market_vol_trx_count else 0 end) as market_vol_trx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then market_vol_trx_count else 0 end) as prev_market_vol_trx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then market_vol_nrx_count else 0 end) as market_vol_nrx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then market_vol_nrx_count else 0 end) as prev_market_vol_nrx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then samples else 0 end) as samples,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then details_p1 else 0 end) as details_p1,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then details_p2 else 0 end) as details_p2,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then details_p3 else 0 end) as details_p3
from reporting.weekly_prescriber_sales_summary
  cross join periods
group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ;
explain
  select *, row_number() over (
    partition by sales_force_id, customer_id, tvcmid, ims_id, period_type, period, market_id 
    order by market_vol_trx_count desc, payer_plan_id) as hcp_plan_vol_rank
  from (
    select sales_force_id, customer_id, tvcmid, ims_id, 
      period_type, period, market_id, payer_plan_id,
      sum(market_vol_trx_count) as market_vol_trx_count
    from reporting.weekly_prescriber_sales_summary
    where period_type = 'Aggregated'
      and market_vol_trx_count > 0
      and payer_plan_id is not null
    group by 1, 2, 3, 4, 5, 6, 7, 8
  ) b
;
explain 
update reporting.weekly_prescriber_sales_summary a set hcp_plan_vol_rank = x.hcp_plan_vol_rank
from tmp_hcp_plan_vol_rank x
where a.sales_force_id = x.sales_force_id
  and a.customer_id <=> x.customer_id
  and a.tvcmid <=> x.tvcmid
  and a.ims_id <=> x.ims_id
  and a.period_type = x.period_type
  and a.period = x.period
  and a.market_id = x.market_id
  and a.payer_plan_id = x.payer_plan_id;
select * from grants;
select * from grants where grantee = 'cdw_admin';
select * from grants where grantee = 'cdw_admin';
select * from users;
select * from users
where is_super_user = 't';
select * from users order by user_name;
select * from roles;
select * from grants where grantee = 'CDWAdmin';
select user_name, all_roles, default_roles
from users;
create role VSchema;
grant usage on schema v_catalog to VSchema;
grant usage on schema v_monitor to VSchema;
create user mb360 identified by 'manager77';
drop user mb360;
grant usage on schema v_catalog to CDWAdmin;
create schema v_mirror;
drop role VSchema;
CREATE ROLE sys_catalog_role;
CREATE SCHEMA sys_catalog DEFAULT INCLUDE PRIVILEGES;
GRANT USAGE, SELECT ON SCHEMA sys_catalog TO sys_catalog_role;
create or replace view sys_catalog.tables AS SELECT * FROM tables;
create or replace view sys_catalog.views AS SELECT * FROM views;
create or replace view sys_catalog.grants AS SELECT * FROM grants;
create or replace view sys_catalog.projection_storage AS SELECT * FROM projection_storage;
GRANT sys_catalog_role TO CDWAdmin;
create or replace view sys_catalog.users as select * from users;
create or replace view sys_catalog.users as select * from users;
select * from users;
GRANT sys_catalog_role TO CDW_Admin;
select * from grants where grantee = 'CDWAdmin';
CREATE ROLE sys_catalog_role;
CREATE ROLE sys_catalog_role;
CREATE SCHEMA sys_catalog DEFAULT INCLUDE PRIVILEGES;
GRANT USAGE, SELECT ON SCHEMA sys_catalog TO sys_catalog_role;
create or replace view sys_catalog.tables AS SELECT * FROM tables;
create or replace view sys_catalog.views AS SELECT * FROM views;
create or replace view sys_catalog.grants AS SELECT * FROM grants;
create or replace view sys_catalog.projection_storage AS SELECT * FROM projection_storage;
create or replace view sys_catalog.users as select * from users;
GRANT sys_catalog_role TO CDWAdmin;
select * from query_requests where is_executing = 't';
select * from query_requests where 
start_timestamp >= '2021-02-17';
select * from query_requests where 
start_timestamp >= '2021-02-17' and request_duration_ms > 200000;
select * from query_requests where 
user_name = 'Databurst_Updt'
start_timestamp >= '2021-02-17' and success = 'f';
select * from query_requests where 
user_name = 'Databurst_Updt' and
start_timestamp >= '2021-02-17' and success = 'f';
select node_name, user_name, request_id, memory_ccquired_mb, success, error_count,
	start_timestamp, end_timestamp, request_duration
	from query_requests where 
user_name = 'Databurst_Updt' and
start_timestamp >= '2021-02-17' and success = 'f';
select node_name, user_name, request_id, memory_acquired_mb, success, error_count,
	start_timestamp, end_timestamp, request_duration
	from query_requests where 
user_name = 'Databurst_Updt' and
start_timestamp >= '2021-02-17' and success = 'f';
select * from  query_events where session_id = 'v_teva_node0001-418271:0x86a6904';
select * from query_requests 
where user_name = 'Databurst_Updt'
and start_timestamp >= '2021-02-17'
order by request_duration desc;
select analyze_statistics('reporting.weekly_prescriber_sales_summary', 25);
select * from projection_columns limit 50;
select * from projection_columns
where table_name = 'weekly_prescriber_sales_summary' limit 50;
select period, count(*) from reporting.weekly_prescriber_sales_summary
where sales_force_id = 'RS'
group by period;
select period, count(*) from reporting.weekly_prescriber_sales_summary
where sales_force_id = 'RS'
group by period
order by 1 desc;
select sales_force_id, period, count(*) from reporting.weekly_prescriber_sales_summary
-- where sales_force_id = 'RS'
group by period, sales_force_id
order by 1,2 desc;
select count(*) from (select
            sales_force_id,
            customer_id,
            tvcmid,
            ims_id,
            period_type,
            period,
            week_ending,
            week_bucket,
            market_id,
            brand_id,
            method_of_payment,
            count(*)
        from
            reporting.weekly_prescriber_sales_summary
        where
            sales_force_id = 'RS'
        group by
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11);
select count(*) from (select
            sales_force_id,
            customer_id,
            tvcmid,
            ims_id,
            period_type,
            period,
            week_ending,
            week_bucket,
            market_id,
            brand_id,
            method_of_payment,
            count(*)
        from
            reporting.weekly_prescriber_sales_summary
        where
            sales_force_id = 'RS'
        group by
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11) as a;
select count(*) from reporting.weekly_prescriber_sales_summary;
select get_compliance_status();
select distinct count(weekly_prescriber_sales_summary.payer_plan_id) from reporting.weekly_prescriber_sales_summary;
select  count(distinct weekly_prescriber_sales_summary.payer_plan_id) from reporting.weekly_prescriber_sales_summary;
CREATE PROJECTION reporting.weekly_prescriber_sales_summary_2330 /*+createtype(L)*/ 
(
 sales_force_id,
            customer_id,
            tvcmid,
            ims_id,
            period_type,
            period,
            week_ending,
            week_bucket,
            market_id,
            brand_id,
            method_of_payment,
            product_vol_trx_count,
            prev_prod_vol_trx_count,
            product_vol_nrx_count,
            prev_prod_vol_nrx_count,
            market_vol_trx_count,
            prev_market_vol_trx_count,
            market_vol_nrx_count,
            prev_market_vol_nrx_count,
            samples,
            details_p1,
            details_p2,
            details_p3
)
AS
 SELECT sales_force_id,
            customer_id,
            tvcmid,
            ims_id,
            period_type,
            period,
            week_ending,
            week_bucket,
            market_id,
            brand_id,
            method_of_payment,
            product_vol_trx_count,
            prev_prod_vol_trx_count,
            product_vol_nrx_count,
            prev_prod_vol_nrx_count,
            market_vol_trx_count,
            prev_market_vol_trx_count,
            market_vol_nrx_count,
            prev_market_vol_nrx_count,
            samples,
            details_p1,
            details_p2,
            details_p3
 FROM reporting.weekly_prescriber_sales_summary
 ORDER BY 
    weekly_prescriber_sales_summary.sales_force_id,
    weekly_prescriber_sales_summary.customer_id,
    weekly_prescriber_sales_summary.tvcmid,
    weekly_prescriber_sales_summary.ims_id,
    weekly_prescriber_sales_summary.period_type,
    weekly_prescriber_sales_summary.period,
    weekly_prescriber_sales_summary.week_ending,
    weekly_prescriber_sales_summary.week_bucket,
    weekly_prescriber_sales_summary.market_id,
    weekly_prescriber_sales_summary.brand_id,
    weekly_prescriber_sales_summary.method_of_payment
SEGMENTED BY hash(
    weekly_prescriber_sales_summary.sales_force_id,
    weekly_prescriber_sales_summary.customer_id,
    weekly_prescriber_sales_summary.tvcmid,
    weekly_prescriber_sales_summary.ims_id,
    weekly_prescriber_sales_summary.period_type,
    weekly_prescriber_sales_summary.period,
    weekly_prescriber_sales_summary.week_ending,
    weekly_prescriber_sales_summary.week_bucket,
    weekly_prescriber_sales_summary.market_id,
    weekly_prescriber_sales_summary.brand_id,
    weekly_prescriber_sales_summary.method_of_payment
) ALL NODES KSAFE 1;
SELECT MARK_DESIGN_KSAFE(1);
select count(*) from (select
            sales_force_id,
            customer_id,
            tvcmid,
            ims_id,
            period_type,
            period,
            week_ending,
            week_bucket,
            market_id,
            brand_id,
            method_of_payment,
            count(*)
        from
            reporting.weekly_prescriber_sales_summary
        where
            sales_force_id = 'RS'
        group by
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11) as a;
select * from query_requests
where is_executing = 't';
select count(*) from (select
            sales_force_id,
            customer_id,
            tvcmid,
            ims_id,
            period_type,
            period,
            week_ending,
            week_bucket,
            market_id,
            brand_id,
            method_of_payment,
            count(*)
        from
            reporting.weekly_prescriber_sales_summary
        where
            sales_force_id = 'RS'
        group by
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11) as a;
create or replace view sys_catalog.tables AS SELECT * FROM tables;
create or replace view sys_catalog.views AS SELECT * FROM views;
create or replace view sys_catalog.grants AS SELECT * FROM grants;
create or replace view sys_catalog.users as select * from users;
create or replace view sys_catalog.query_events AS SELECT * FROM query_events;
create or replace view sys_catalog.query_consumption AS SELECT * FROM query_consumption;
create or replace view sys_catalog.query_metrics AS SELECT * FROM query_metrics;
create or replace view sys_catalog.query_requests AS SELECT * FROM query_requests;
create or replace view sys_catalog.sessions AS SELECT * FROM sessions;
create or replace view sys_catalog.memory_usage as select * from memory_usage;
create or replace view sys_catalog.cpu_usage as select * from cpu_usage;
create or replace view sys_catalog.resource_pool_status as select * from resource_pool_status;
create or replace view sys_catalog.projection_storage AS SELECT * FROM projection_storage;
create or replace view sys_catalog.projection_usage as select * from projection_usage;
select * from resource_pools
select query_start::date, table_name, count(*), sum(processed_row_count) 
from query_profiles where query ilike '%delete%' or query ilike '%update%' 
group by query_start::date, table_name
having sum(processed_row_count) > 1000000
order by 1, 4 desc;

select query_start::date, table_name, count(*), sum(processed_row_count) 
from query_profiles where query ilike '%delete%' or query ilike '%update%' 
group by query_start::date, table_name
having sum(processed_row_count) > 1000000
order by 1, 4 desc;
grant sysmonitor to CDWAdmin;
grant sysmonitor to CDWAdmin;
grant sysmonitor to CDWAdmin WITH ADMIN OPTION;
grant sysmonitor to CDWAdmin WITH ADMIN OPTION;
create schema if not exists atlas;
create schema if not exists atlas;
CREATE TABLE Marketing.atlas.arrivals_src (
	vin Varchar(50),
	arrivals_count Integer,
	region_key Integer,
	port_key Integer,
	date_key Varchar(20),
	config_key Integer
);
CREATE TABLE Marketing.atlas.cars (
 cust_id Integer,
 income_group Integer,
 gender Varchar(20),
 config_key Integer,
 body_model_name Varchar(54),
 ext_color_name Varchar(60),
 engine_name Varchar(60),
 transmission_type_name Varchar(58),
 dealer_id Integer,
 dealer_name Varchar(58),
 region_name Varchar(26),
 state_code Varchar(20),
 metro_area_name Varchar(50),
 area_code Integer,
 date_key Date
);
CREATE TABLE Marketing.atlas.control (
	source_file_id Integer,
	source_key Varchar(20),
	source_file_name Varchar(1024),
	source_system Varchar(255),
	sourc_file_run_date Date,
	message Varchar(255),
	file_size Varchar(20),
	data_from_ts Timestamp,
	data_to_ts Timestamp,
	job_start_ts Timestamp,
	job_end_ts Timestamp,
	update_ts Timestamp
);
CREATE TABLE Marketing.atlas.cust_dim_src (
	cust_id Integer,
	cust_type Varchar(20),
	gender Varchar(20),
	income_group Varchar(20),
	zip_code Varchar(20)
);
CREATE TABLE Marketing.atlas.cust_sales_src (
	vin Varchar(50),
	region Varchar(255),
	"count" Numeric(37,15),
	dealer Integer,
	sale_date Varchar(255),
	vehicle Integer,
	cust_id Integer,
	cust_type Varchar(20),
	gender Varchar(20),
	income_group Varchar(20),
	zip Varchar(20)
);
CREATE TABLE Marketing.atlas.date_dim (
	date Timestamp,
	date_key Varchar(10),
	day_of_week_number Integer,
	day_of_year_number Numeric(37,15),
	week_of_year_number Numeric(37,15),
	quarter_number Numeric(37,15),
	ten_day_period_number Numeric(37,15),
	sales_days Integer,
	sales_month_date Varchar(10),
	end_of_calendar_month_indic Varchar(1),
	holiday_indic Varchar(1),
	ten_day_period_end_indic Varchar(1),
	shipments_month_end_indic Varchar(1)
);
CREATE TABLE Marketing.atlas.date_dim_src (
	date Timestamp,
	date_key Varchar(10),
	day_of_week_number Integer,
	day_of_year_number Numeric(37,15),
	week_of_year_number Numeric(37,15),
	quarter_number Numeric(37,15),
	ten_day_period_number Numeric(37,15),
	sales_days Integer,
	sales_month_date Varchar(10),
	end_of_calendar_month_indic Varchar(1),
	holiday_indic Varchar(1),
	ten_day_period_end_indic Varchar(1),
	shipments_month_end_indic Varchar(1)
);
CREATE TABLE Marketing.atlas.dealer_dim_src (
	dealer_id Integer,
	dealer_name Varchar(50),
	address_line_1 Varchar(50),
	address_line_2 Varchar(50),
	city_name Varchar(50),
	po_box_number Varchar(50),
	state_code Varchar(5),
	zip_code Varchar(10),
	area_code Varchar(5),
	telephone_number Varchar(10),
	region_name Varchar(50),
	district_name Varchar(50),
	metro_area_name Varchar(50),
	metro_area_abbrev_name Varchar(20),
	area_of_dom_influence_name Varchar(50),
	adi_abbrev_name Varchar(20),
	adi_us_population_percent Numeric(37,15),
	pma_number Varchar(20),
	salesperson_count Integer,
	new_car_storage_count Integer
);
CREATE TABLE Marketing.atlas.main_report (
	vin Varchar(50),
	region_key Integer,
	sales_count Integer,
	date_key Varchar(10),
	zip Varchar(20),
	income_group Varchar(20),
	cust_type_desc Varchar(10),
	gender Varchar(14),
	income Varchar(14),
	dealer_name Varchar(50),
	dealer_city Varchar(50),
	dealer_state Varchar(5),
	dealer_zip Varchar(10),
	dealer_area_code Varchar(5),
	region_name Varchar(50),
	district_name Varchar(50),
	metro_area_name Varchar(50),
	metro_area_abbrev_name Varchar(20),
	area_of_dom_influence_name Varchar(50),
	adi_abbrev_name Varchar(20),
	adi_us_population_percent Numeric(37,15),
	pma_number Varchar(20),
	salesperson_count Integer,
	new_car_storage_count Integer,
	model_year Integer,
	body_model_code Varchar(5),
	body_model_name Varchar(50),
	price_line_code Varchar(10),
	price_line_name Varchar(46),
	emissions_catg_code Varchar(10),
	emissions_catg_name Varchar(16),
	engine_code Varchar(5),
	engine_name Varchar(20),
	ext_color_code Varchar(10),
	ext_color_name Varchar(50),
	k_model_number Varchar(22),
	interior_trim_id Integer,
	interior_trim_color Varchar(50),
	transmission_type_code Varchar(10),
	transmission_type_name Varchar(50),
	factory_op_group_code Varchar(10)
);
CREATE TABLE Marketing.atlas.mock_dealer_src (
	og_name Varchar(50),
	new_name Varchar(50)
);
CREATE TABLE Marketing.atlas.port_dim (
	port_id Integer,
	port_name Varchar(30),
	shipping_route_code Varchar(1)
);
CREATE TABLE Marketing.atlas.region_dim (
	region_key Integer,
	org_unit_code Varchar(10),
	region_name Varchar(50)
);
CREATE TABLE Marketing.atlas.sales (
	vin Varchar(255),
	region Varchar(255),
	sales_count Integer,
	f4 Integer,
	sales_date Date,
	f6 Integer,
	f7 Integer,
	f8 Varchar(50),
	f9 Varchar(50),
	f10 Varchar(50),
	f11 Varchar(50)
);
CREATE TABLE Marketing.atlas.sales_fact (
	vin Varchar(50),
	sales_count Integer,
	region_key Integer,
	dealer_id Integer,
	date_key Varchar(10),
	config_key Integer,
	cust_id Integer
);
CREATE TABLE Marketing.atlas.vehicle_config (
	config_key Integer,
	model_year Integer,
	body_model_code Varchar(5),
	body_model_name Varchar(36),
	price_line_code Varchar(3),
	price_line_name Varchar(46),
	emissions_catg_code Varchar(4),
	emissions_catg_name Varchar(16),
	engine_code Varchar(5),
	engine_name Varchar(41),
	ext_color_code Varchar(4),
	ext_color_name Varchar(36),
	k_model_number Varchar(22),
	interior_trim_id Integer,
	interior_trim_color Varchar(36),
	transmission_type_code Varchar(4),
	transmission_type_name Varchar(36),
	factory_op_group_code Varchar(4)
);
CREATE TABLE Marketing.atlas.zip_code_lkp (
	zip_code Varchar(10),
	latitude Numeric(37,15),
	longitude Numeric(37,15),
	city Varchar(50),
	state Varchar(50),
	county Varchar(50)
);
-- from seed

copy atlas.arrivals_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/arrivals.txt';
copy atlas.cust_dim_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/cust_dim.txt';
copy atlas.cust_sales_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/cust_sales.txt';
copy atlas.date_dim_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/date_dim.txt';
copy atlas.dealer_dim_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/dealer_dim.txt';
copy atlas.mock_dealer_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/mock_dealers.txt';
copy atlas.port_dim from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/port_dim.txt';
copy atlas.region_dim from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/region_dim.txt';
copy atlas.sales_fact from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/sales_fact.txt';
copy atlas.vehicle_config from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/vehicle_config.txt';
copy atlas.zip_code_lkp from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/zip_code_lkp.txt';
create schema if not exists atlas;
CREATE TABLE Marketing.atlas.arrivals_src (
	vin Varchar(50),
	arrivals_count Integer,
	region_key Integer,
	port_key Integer,
	date_key Varchar(20),
	config_key Integer
);
CREATE TABLE Marketing.atlas.cars (
 cust_id Integer,
 income_group Integer,
 gender Varchar(20),
 config_key Integer,
 body_model_name Varchar(54),
 ext_color_name Varchar(60),
 engine_name Varchar(60),
 transmission_type_name Varchar(58),
 dealer_id Integer,
 dealer_name Varchar(58),
 region_name Varchar(26),
 state_code Varchar(20),
 metro_area_name Varchar(50),
 area_code Integer,
 date_key Date
);
CREATE TABLE Marketing.atlas.control (
	source_file_id Integer,
	source_key Varchar(20),
	source_file_name Varchar(1024),
	source_system Varchar(255),
	sourc_file_run_date Date,
	message Varchar(255),
	file_size Varchar(20),
	data_from_ts Timestamp,
	data_to_ts Timestamp,
	job_start_ts Timestamp,
	job_end_ts Timestamp,
	update_ts Timestamp
);
CREATE TABLE Marketing.atlas.cust_dim_src (
	cust_id Integer,
	cust_type Varchar(20),
	gender Varchar(20),
	income_group Varchar(20),
	zip_code Varchar(20)
);
CREATE TABLE Marketing.atlas.cust_sales_src (
	vin Varchar(50),
	region Varchar(255),
	"count" Numeric(37,15),
	dealer Integer,
	sale_date Varchar(255),
	vehicle Integer,
	cust_id Integer,
	cust_type Varchar(20),
	gender Varchar(20),
	income_group Varchar(20),
	zip Varchar(20)
);
CREATE TABLE Marketing.atlas.date_dim (
	date Timestamp,
	date_key Varchar(10),
	day_of_week_number Integer,
	day_of_year_number Numeric(37,15),
	week_of_year_number Numeric(37,15),
	quarter_number Numeric(37,15),
	ten_day_period_number Numeric(37,15),
	sales_days Integer,
	sales_month_date Varchar(10),
	end_of_calendar_month_indic Varchar(1),
	holiday_indic Varchar(1),
	ten_day_period_end_indic Varchar(1),
	shipments_month_end_indic Varchar(1)
);
CREATE TABLE Marketing.atlas.date_dim_src (
	date Timestamp,
	date_key Varchar(10),
	day_of_week_number Integer,
	day_of_year_number Numeric(37,15),
	week_of_year_number Numeric(37,15),
	quarter_number Numeric(37,15),
	ten_day_period_number Numeric(37,15),
	sales_days Integer,
	sales_month_date Varchar(10),
	end_of_calendar_month_indic Varchar(1),
	holiday_indic Varchar(1),
	ten_day_period_end_indic Varchar(1),
	shipments_month_end_indic Varchar(1)
);
CREATE TABLE Marketing.atlas.dealer_dim_src (
	dealer_id Integer,
	dealer_name Varchar(50),
	address_line_1 Varchar(50),
	address_line_2 Varchar(50),
	city_name Varchar(50),
	po_box_number Varchar(50),
	state_code Varchar(5),
	zip_code Varchar(10),
	area_code Varchar(5),
	telephone_number Varchar(10),
	region_name Varchar(50),
	district_name Varchar(50),
	metro_area_name Varchar(50),
	metro_area_abbrev_name Varchar(20),
	area_of_dom_influence_name Varchar(50),
	adi_abbrev_name Varchar(20),
	adi_us_population_percent Numeric(37,15),
	pma_number Varchar(20),
	salesperson_count Integer,
	new_car_storage_count Integer
);
CREATE TABLE Marketing.atlas.main_report (
	vin Varchar(50),
	region_key Integer,
	sales_count Integer,
	date_key Varchar(10),
	zip Varchar(20),
	income_group Varchar(20),
	cust_type_desc Varchar(10),
	gender Varchar(14),
	income Varchar(14),
	dealer_name Varchar(50),
	dealer_city Varchar(50),
	dealer_state Varchar(5),
	dealer_zip Varchar(10),
	dealer_area_code Varchar(5),
	region_name Varchar(50),
	district_name Varchar(50),
	metro_area_name Varchar(50),
	metro_area_abbrev_name Varchar(20),
	area_of_dom_influence_name Varchar(50),
	adi_abbrev_name Varchar(20),
	adi_us_population_percent Numeric(37,15),
	pma_number Varchar(20),
	salesperson_count Integer,
	new_car_storage_count Integer,
	model_year Integer,
	body_model_code Varchar(5),
	body_model_name Varchar(50),
	price_line_code Varchar(10),
	price_line_name Varchar(46),
	emissions_catg_code Varchar(10),
	emissions_catg_name Varchar(16),
	engine_code Varchar(5),
	engine_name Varchar(20),
	ext_color_code Varchar(10),
	ext_color_name Varchar(50),
	k_model_number Varchar(22),
	interior_trim_id Integer,
	interior_trim_color Varchar(50),
	transmission_type_code Varchar(10),
	transmission_type_name Varchar(50),
	factory_op_group_code Varchar(10)
);
CREATE TABLE Marketing.atlas.mock_dealer_src (
	og_name Varchar(50),
	new_name Varchar(50)
);
CREATE TABLE Marketing.atlas.port_dim (
	port_id Integer,
	port_name Varchar(30),
	shipping_route_code Varchar(1)
);
CREATE TABLE Marketing.atlas.region_dim (
	region_key Integer,
	org_unit_code Varchar(10),
	region_name Varchar(50)
);
CREATE TABLE Marketing.atlas.sales (
	vin Varchar(255),
	region Varchar(255),
	sales_count Integer,
	f4 Integer,
	sales_date Date,
	f6 Integer,
	f7 Integer,
	f8 Varchar(50),
	f9 Varchar(50),
	f10 Varchar(50),
	f11 Varchar(50)
);
CREATE TABLE Marketing.atlas.sales_fact (
	vin Varchar(50),
	sales_count Integer,
	region_key Integer,
	dealer_id Integer,
	date_key Varchar(10),
	config_key Integer,
	cust_id Integer
);
CREATE TABLE Marketing.atlas.vehicle_config (
	config_key Integer,
	model_year Integer,
	body_model_code Varchar(5),
	body_model_name Varchar(36),
	price_line_code Varchar(3),
	price_line_name Varchar(46),
	emissions_catg_code Varchar(4),
	emissions_catg_name Varchar(16),
	engine_code Varchar(5),
	engine_name Varchar(41),
	ext_color_code Varchar(4),
	ext_color_name Varchar(36),
	k_model_number Varchar(22),
	interior_trim_id Integer,
	interior_trim_color Varchar(36),
	transmission_type_code Varchar(4),
	transmission_type_name Varchar(36),
	factory_op_group_code Varchar(4)
);
CREATE TABLE Marketing.atlas.zip_code_lkp (
	zip_code Varchar(10),
	latitude Numeric(37,15),
	longitude Numeric(37,15),
	city Varchar(50),
	state Varchar(50),
	county Varchar(50)
);
-- from seed

copy atlas.arrivals_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/arrivals.txt';
copy atlas.cust_dim_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/cust_dim.txt';
copy atlas.cust_sales_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/cust_sales.txt';
copy atlas.date_dim_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/date_dim.txt';
copy atlas.dealer_dim_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/dealer_dim.txt';
copy atlas.mock_dealer_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/mock_dealers.txt';
copy atlas.port_dim from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/port_dim.txt';
copy atlas.region_dim from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/region_dim.txt';
copy atlas.sales_fact from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/sales_fact.txt';
copy atlas.vehicle_config from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/vehicle_config.txt';
copy atlas.zip_code_lkp from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/zip_code_lkp.txt';
drop table if exists atlas.dealer_lkp;
create table atlas.dealer_lkp as
    select distinct sf.dealer_id,
            dd.dealer_name, md.og_name, md.new_name,
            dd.address_line_1,
            dd.address_line_2,
            dd.city_name,
            dd.po_box_number,
            dd.state_code, dd.zip_code, dd.area_code, dd.telephone_number,
            dd.region_name, dd.district_name, dd.metro_area_name, dd.metro_area_abbrev_name,
            dd.area_of_dom_influence_name, dd.adi_abbrev_name,
            dd.adi_us_population_percent,
            dd.pma_number,
            dd.salesperson_count,
            dd.new_car_storage_count
    from atlas.sales_fact sf
    join atlas.dealer_dim_src dd
      on (sf.dealer_id = dd.dealer_id)
    join atlas.mock_dealer_src md
      on (dd.dealer_name = md.og_name);
create or replace view atlas.star01_vw as
      select
        cd.cust_id,
        cd.income_group,
        cd.gender,
        vc.config_key,
        vc.body_model_name,
        vc.ext_color_name,
        vc.engine_name,
        vc.transmission_type_name,
        dd.dealer_id,
        dd.new_name as dealer_name,
        dd.region_name,
        dd.state_code,
        dd.metro_area_name,
        dd.area_code,
        timestampadd ( year, 22, sf.date_key::timestamp)::date as date_key

        from atlas.sales_fact sf
        join atlas.cust_dim_src cd
          on (sf.cust_id = cd.cust_id)
        join atlas.vehicle_config vc
          on (sf.config_key = vc.config_key)
         join atlas.dealer_lkp dd
          on (sf.dealer_id = dd.dealer_id);
create schema if not exists atlas;
CREATE TABLE Marketing.atlas.arrivals_src (
	vin Varchar(50),
	arrivals_count Integer,
	region_key Integer,
	port_key Integer,
	date_key Varchar(20),
	config_key Integer
);
MFG;
create schema if not exists atlas;
CREATE TABLE MFG.atlas.arrivals_src (
	vin Varchar(50),
	arrivals_count Integer,
	region_key Integer,
	port_key Integer,
	date_key Varchar(20),
	config_key Integer
);
CREATE TABLE MFG.atlas.cars (
 cust_id Integer,
 income_group Integer,
 gender Varchar(20),
 config_key Integer,
 body_model_name Varchar(54),
 ext_color_name Varchar(60),
 engine_name Varchar(60),
 transmission_type_name Varchar(58),
 dealer_id Integer,
 dealer_name Varchar(58),
 region_name Varchar(26),
 state_code Varchar(20),
 metro_area_name Varchar(50),
 area_code Integer,
 date_key Date
);
CREATE TABLE MFG.atlas.control (
	source_file_id Integer,
	source_key Varchar(20),
	source_file_name Varchar(1024),
	source_system Varchar(255),
	sourc_file_run_date Date,
	message Varchar(255),
	file_size Varchar(20),
	data_from_ts Timestamp,
	data_to_ts Timestamp,
	job_start_ts Timestamp,
	job_end_ts Timestamp,
	update_ts Timestamp
);
CREATE TABLE MFG.atlas.cust_dim_src (
	cust_id Integer,
	cust_type Varchar(20),
	gender Varchar(20),
	income_group Varchar(20),
	zip_code Varchar(20)
);
CREATE TABLE MFG.atlas.cust_sales_src (
	vin Varchar(50),
	region Varchar(255),
	"count" Numeric(37,15),
	dealer Integer,
	sale_date Varchar(255),
	vehicle Integer,
	cust_id Integer,
	cust_type Varchar(20),
	gender Varchar(20),
	income_group Varchar(20),
	zip Varchar(20)
);
CREATE TABLE MFG.atlas.date_dim (
	date Timestamp,
	date_key Varchar(10),
	day_of_week_number Integer,
	day_of_year_number Numeric(37,15),
	week_of_year_number Numeric(37,15),
	quarter_number Numeric(37,15),
	ten_day_period_number Numeric(37,15),
	sales_days Integer,
	sales_month_date Varchar(10),
	end_of_calendar_month_indic Varchar(1),
	holiday_indic Varchar(1),
	ten_day_period_end_indic Varchar(1),
	shipments_month_end_indic Varchar(1)
);
CREATE TABLE MFG.atlas.date_dim_src (
	date Timestamp,
	date_key Varchar(10),
	day_of_week_number Integer,
	day_of_year_number Numeric(37,15),
	week_of_year_number Numeric(37,15),
	quarter_number Numeric(37,15),
	ten_day_period_number Numeric(37,15),
	sales_days Integer,
	sales_month_date Varchar(10),
	end_of_calendar_month_indic Varchar(1),
	holiday_indic Varchar(1),
	ten_day_period_end_indic Varchar(1),
	shipments_month_end_indic Varchar(1)
);
CREATE TABLE MFG.atlas.dealer_dim_src (
	dealer_id Integer,
	dealer_name Varchar(50),
	address_line_1 Varchar(50),
	address_line_2 Varchar(50),
	city_name Varchar(50),
	po_box_number Varchar(50),
	state_code Varchar(5),
	zip_code Varchar(10),
	area_code Varchar(5),
	telephone_number Varchar(10),
	region_name Varchar(50),
	district_name Varchar(50),
	metro_area_name Varchar(50),
	metro_area_abbrev_name Varchar(20),
	area_of_dom_influence_name Varchar(50),
	adi_abbrev_name Varchar(20),
	adi_us_population_percent Numeric(37,15),
	pma_number Varchar(20),
	salesperson_count Integer,
	new_car_storage_count Integer
);
CREATE TABLE MFG.atlas.main_report (
	vin Varchar(50),
	region_key Integer,
	sales_count Integer,
	date_key Varchar(10),
	zip Varchar(20),
	income_group Varchar(20),
	cust_type_desc Varchar(10),
	gender Varchar(14),
	income Varchar(14),
	dealer_name Varchar(50),
	dealer_city Varchar(50),
	dealer_state Varchar(5),
	dealer_zip Varchar(10),
	dealer_area_code Varchar(5),
	region_name Varchar(50),
	district_name Varchar(50),
	metro_area_name Varchar(50),
	metro_area_abbrev_name Varchar(20),
	area_of_dom_influence_name Varchar(50),
	adi_abbrev_name Varchar(20),
	adi_us_population_percent Numeric(37,15),
	pma_number Varchar(20),
	salesperson_count Integer,
	new_car_storage_count Integer,
	model_year Integer,
	body_model_code Varchar(5),
	body_model_name Varchar(50),
	price_line_code Varchar(10),
	price_line_name Varchar(46),
	emissions_catg_code Varchar(10),
	emissions_catg_name Varchar(16),
	engine_code Varchar(5),
	engine_name Varchar(20),
	ext_color_code Varchar(10),
	ext_color_name Varchar(50),
	k_model_number Varchar(22),
	interior_trim_id Integer,
	interior_trim_color Varchar(50),
	transmission_type_code Varchar(10),
	transmission_type_name Varchar(50),
	factory_op_group_code Varchar(10)
);
CREATE TABLE MFG.atlas.mock_dealer_src (
	og_name Varchar(50),
	new_name Varchar(50)
);
CREATE TABLE MFG.atlas.port_dim (
	port_id Integer,
	port_name Varchar(30),
	shipping_route_code Varchar(1)
);
CREATE TABLE MFG.atlas.region_dim (
	region_key Integer,
	org_unit_code Varchar(10),
	region_name Varchar(50)
);
CREATE TABLE MFG.atlas.sales (
	vin Varchar(255),
	region Varchar(255),
	sales_count Integer,
	f4 Integer,
	sales_date Date,
	f6 Integer,
	f7 Integer,
	f8 Varchar(50),
	f9 Varchar(50),
	f10 Varchar(50),
	f11 Varchar(50)
);
CREATE TABLE MFG.atlas.sales_fact (
	vin Varchar(50),
	sales_count Integer,
	region_key Integer,
	dealer_id Integer,
	date_key Varchar(10),
	config_key Integer,
	cust_id Integer
);
CREATE TABLE MFG.atlas.vehicle_config (
	config_key Integer,
	model_year Integer,
	body_model_code Varchar(5),
	body_model_name Varchar(36),
	price_line_code Varchar(3),
	price_line_name Varchar(46),
	emissions_catg_code Varchar(4),
	emissions_catg_name Varchar(16),
	engine_code Varchar(5),
	engine_name Varchar(41),
	ext_color_code Varchar(4),
	ext_color_name Varchar(36),
	k_model_number Varchar(22),
	interior_trim_id Integer,
	interior_trim_color Varchar(36),
	transmission_type_code Varchar(4),
	transmission_type_name Varchar(36),
	factory_op_group_code Varchar(4)
);
CREATE TABLE MFG.atlas.zip_code_lkp (
	zip_code Varchar(10),
	latitude Numeric(37,15),
	longitude Numeric(37,15),
	city Varchar(50),
	state Varchar(50),
	county Varchar(50)
);
drop table if exists atlas.dealer_lkp;
create table atlas.dealer_lkp as
    select distinct sf.dealer_id,
            dd.dealer_name, md.og_name, md.new_name,
            dd.address_line_1,
            dd.address_line_2,
            dd.city_name,
            dd.po_box_number,
            dd.state_code, dd.zip_code, dd.area_code, dd.telephone_number,
            dd.region_name, dd.district_name, dd.metro_area_name, dd.metro_area_abbrev_name,
            dd.area_of_dom_influence_name, dd.adi_abbrev_name,
            dd.adi_us_population_percent,
            dd.pma_number,
            dd.salesperson_count,
            dd.new_car_storage_count
    from atlas.sales_fact sf
    join atlas.dealer_dim_src dd
      on (sf.dealer_id = dd.dealer_id)
    join atlas.mock_dealer_src md
      on (dd.dealer_name = md.og_name);
create or replace view atlas.star01_vw as
      select
        cd.cust_id,
        cd.income_group,
        cd.gender,
        vc.config_key,
        vc.body_model_name,
        vc.ext_color_name,
        vc.engine_name,
        vc.transmission_type_name,
        dd.dealer_id,
        dd.new_name as dealer_name,
        dd.region_name,
        dd.state_code,
        dd.metro_area_name,
        dd.area_code,
        timestampadd ( year, 22, sf.date_key::timestamp)::date as date_key

        from atlas.sales_fact sf
        join atlas.cust_dim_src cd
          on (sf.cust_id = cd.cust_id)
        join atlas.vehicle_config vc
          on (sf.config_key = vc.config_key)
         join atlas.dealer_lkp dd
          on (sf.dealer_id = dd.dealer_id);
-- from seed

copy atlas.arrivals_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/arrivals.txt';
copy atlas.cust_dim_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/cust_dim.txt';
copy atlas.cust_sales_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/cust_sales.txt';
copy atlas.date_dim_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/date_dim.txt';
copy atlas.dealer_dim_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/dealer_dim.txt';
copy atlas.mock_dealer_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/mock_dealers.txt';
copy atlas.port_dim from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/port_dim.txt';
copy atlas.region_dim from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/region_dim.txt';
copy atlas.sales_fact from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/sales_fact.txt';
copy atlas.vehicle_config from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/vehicle_config.txt';
copy atlas.zip_code_lkp from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/zip_code_lkp.txt';
select * from tables;
select * from sessions;
SELECT CURRENT_EPOCH, AHM_EPOCH, LAST_GOOD_EPOCH FROM SYSTEM;
-- query event review 72 hours - non critical 

create or replace view diag.qe_non_critical as
select event_Category, event_Type, event_severity, event_description, count(*) from query_Events 
where (sysdate() - event_timestamp) < '3 00:00:00.0' and event_severity != 'Critical'
group by 1,2,3,4 order by 5 desc;
-- query event review - all critical
create or replace view diag.qe_critcal_summary
select event_Category, event_Type, event_severity, event_description, count(*) from query_Events 
where event_severity = 'Critical'
group by 1,2,3,4 order by 5 desc;
-- query event review 72 hours - non critical 

create or replace view diag.qe_non_critical as
select event_Category, event_Type, event_severity, event_description, count(*) from query_Events 
where (sysdate() - event_timestamp) < '3 00:00:00.0' and event_severity != 'Critical'
group by 1,2,3,4 order by 5 desc;
-- query event review - all critical
create or replace view diag.qe_critcal_summary
select event_Category, event_Type, event_severity, event_description, count(*) from query_Events 
where event_severity = 'Critical'
group by 1,2,3,4 order by 5 desc;
-- query event review 72 hours - non critical 

create or replace view diag.qe_non_critical as
select event_Category, event_Type, event_severity, event_description, count(*) from query_Events 
where (sysdate() - event_timestamp) < '3 00:00:00.0' and event_severity != 'Critical'
group by 1,2,3,4 order by 5 desc;
-- query event review - all critical
create or replace view diag.qe_critcal_summary as
select event_Category, event_Type, event_severity, event_description, count(*) from query_Events 
where event_severity = 'Critical'
group by 1,2,3,4 order by 5 desc;
-- critcal query events by node, user
create or replace view diag.qe_critical_detail as
select
	node_name,	user_name,	event_category,
	event_severity,	event_description, count(*)
from
	query_events
where
	event_severity = 'Critical' and (sysdate() - event_timestamp) < '06:00:00.0'
group by
	node_name,
	user_name,
	event_category,
	event_severity,
	event_description
order by
	6 desc;
select analyze_statistics('atlas.sales_fact');
select analyze_statistics();
select analyze_statistics();
select analyze_statistics('','',25);
select export_statistics('/Users/mbowen/devcode/F360/edw-perf/doc/stats.xml');
set role pseudosuperuser;
select export_statistics('/Users/mbowen/devcode/F360/edw-perf/doc/stats.xml');
select export_statistics('/Users/mbowen/devcode/F360/edw-perf/doc/stats.xml');
select export_statistics('');
set role pseudosuperuser;
set role dbadmin;
create schema atlas;
CREATE TABLE atlas.arrivals_src (
	vin Varchar(50),
	arrivals_count Integer,
	region_key Integer,
	port_key Integer,
	date_key Varchar(20),
	config_key Integer
);
CREATE TABLE atlas.cars (
 cust_id Integer,
 income_group Integer,
 gender Varchar(20),
 config_key Integer,
 body_model_name Varchar(54),
 ext_color_name Varchar(60),
 engine_name Varchar(60),
 transmission_type_name Varchar(58),
 dealer_id Integer,
 dealer_name Varchar(58),
 region_name Varchar(26),
 state_code Varchar(20),
 metro_area_name Varchar(50),
 area_code Integer,
 date_key Date
);
CREATE TABLE atlas.control (
	source_file_id Integer,
	source_key Varchar(20),
	source_file_name Varchar(1024),
	source_system Varchar(255),
	sourc_file_run_date Date,
	message Varchar(255),
	file_size Varchar(20),
	data_from_ts Timestamp,
	data_to_ts Timestamp,
	job_start_ts Timestamp,
	job_end_ts Timestamp,
	update_ts Timestamp
);
CREATE TABLE atlas.cust_dim_src (
	cust_id Integer,
	cust_type Varchar(20),
	gender Varchar(20),
	income_group Varchar(20),
	zip_code Varchar(20)
);
CREATE TABLE atlas.cust_sales_src (
	vin Varchar(50),
	region Varchar(255),
	"count" Numeric(37,15),
	dealer Integer,
	sale_date Varchar(255),
	vehicle Integer,
	cust_id Integer,
	cust_type Varchar(20),
	gender Varchar(20),
	income_group Varchar(20),
	zip Varchar(20)
);
CREATE TABLE atlas.date_dim (
	date Timestamp,
	date_key Varchar(10),
	day_of_week_number Integer,
	day_of_year_number Numeric(37,15),
	week_of_year_number Numeric(37,15),
	quarter_number Numeric(37,15),
	ten_day_period_number Numeric(37,15),
	sales_days Integer,
	sales_month_date Varchar(10),
	end_of_calendar_month_indic Varchar(1),
	holiday_indic Varchar(1),
	ten_day_period_end_indic Varchar(1),
	shipments_month_end_indic Varchar(1)
);
CREATE TABLE atlas.date_dim_src (
	date Timestamp,
	date_key Varchar(10),
	day_of_week_number Integer,
	day_of_year_number Numeric(37,15),
	week_of_year_number Numeric(37,15),
	quarter_number Numeric(37,15),
	ten_day_period_number Numeric(37,15),
	sales_days Integer,
	sales_month_date Varchar(10),
	end_of_calendar_month_indic Varchar(1),
	holiday_indic Varchar(1),
	ten_day_period_end_indic Varchar(1),
	shipments_month_end_indic Varchar(1)
);
CREATE TABLE atlas.dealer_dim_src (
	dealer_id Integer,
	dealer_name Varchar(50),
	address_line_1 Varchar(50),
	address_line_2 Varchar(50),
	city_name Varchar(50),
	po_box_number Varchar(50),
	state_code Varchar(5),
	zip_code Varchar(10),
	area_code Varchar(5),
	telephone_number Varchar(10),
	region_name Varchar(50),
	district_name Varchar(50),
	metro_area_name Varchar(50),
	metro_area_abbrev_name Varchar(20),
	area_of_dom_influence_name Varchar(50),
	adi_abbrev_name Varchar(20),
	adi_us_population_percent Numeric(37,15),
	pma_number Varchar(20),
	salesperson_count Integer,
	new_car_storage_count Integer
);
CREATE TABLE atlas.main_report (
	vin Varchar(50),
	region_key Integer,
	sales_count Integer,
	date_key Varchar(10),
	zip Varchar(20),
	income_group Varchar(20),
	cust_type_desc Varchar(10),
	gender Varchar(14),
	income Varchar(14),
	dealer_name Varchar(50),
	dealer_city Varchar(50),
	dealer_state Varchar(5),
	dealer_zip Varchar(10),
	dealer_area_code Varchar(5),
	region_name Varchar(50),
	district_name Varchar(50),
	metro_area_name Varchar(50),
	metro_area_abbrev_name Varchar(20),
	area_of_dom_influence_name Varchar(50),
	adi_abbrev_name Varchar(20),
	adi_us_population_percent Numeric(37,15),
	pma_number Varchar(20),
	salesperson_count Integer,
	new_car_storage_count Integer,
	model_year Integer,
	body_model_code Varchar(5),
	body_model_name Varchar(50),
	price_line_code Varchar(10),
	price_line_name Varchar(46),
	emissions_catg_code Varchar(10),
	emissions_catg_name Varchar(16),
	engine_code Varchar(5),
	engine_name Varchar(20),
	ext_color_code Varchar(10),
	ext_color_name Varchar(50),
	k_model_number Varchar(22),
	interior_trim_id Integer,
	interior_trim_color Varchar(50),
	transmission_type_code Varchar(10),
	transmission_type_name Varchar(50),
	factory_op_group_code Varchar(10)
);
CREATE TABLE atlas.mock_dealer_src (
	og_name Varchar(50),
	new_name Varchar(50)
);
CREATE TABLE atlas.port_dim (
	port_id Integer,
	port_name Varchar(30),
	shipping_route_code Varchar(1)
);
CREATE TABLE atlas.region_dim (
	region_key Integer,
	org_unit_code Varchar(10),
	region_name Varchar(50)
);
CREATE TABLE atlas.sales (
	vin Varchar(255),
	region Varchar(255),
	sales_count Integer,
	f4 Integer,
	sales_date Date,
	f6 Integer,
	f7 Integer,
	f8 Varchar(50),
	f9 Varchar(50),
	f10 Varchar(50),
	f11 Varchar(50)
);
CREATE TABLE atlas.sales_fact (
	vin Varchar(50),
	sales_count Integer,
	region_key Integer,
	dealer_id Integer,
	date_key Varchar(10),
	config_key Integer,
	cust_id Integer
);
CREATE TABLE atlas.vehicle_config (
	config_key Integer,
	model_year Integer,
	body_model_code Varchar(5),
	body_model_name Varchar(36),
	price_line_code Varchar(3),
	price_line_name Varchar(46),
	emissions_catg_code Varchar(4),
	emissions_catg_name Varchar(16),
	engine_code Varchar(5),
	engine_name Varchar(41),
	ext_color_code Varchar(4),
	ext_color_name Varchar(36),
	k_model_number Varchar(22),
	interior_trim_id Integer,
	interior_trim_color Varchar(36),
	transmission_type_code Varchar(4),
	transmission_type_name Varchar(36),
	factory_op_group_code Varchar(4)
);
CREATE TABLE atlas.zip_code_lkp (
	zip_code Varchar(10),
	latitude Numeric(37,15),
	longitude Numeric(37,15),
	city Varchar(50),
	state Varchar(50),
	county Varchar(50)
);
-- from seed

copy atlas.arrivals_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/arrivals.txt';
copy atlas.cust_dim_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/cust_dim.txt';
copy atlas.cust_sales_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/cust_sales.txt';
copy atlas.date_dim_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/date_dim.txt';
copy atlas.dealer_dim_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/dealer_dim.txt';
copy atlas.mock_dealer_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/mock_dealers.txt';
copy atlas.port_dim from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/port_dim.txt';
copy atlas.region_dim from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/region_dim.txt';
copy atlas.sales_fact from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/sales_fact.txt';
copy atlas.vehicle_config from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/vehicle_config.txt';
copy atlas.zip_code_lkp from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/zip_code_lkp.txt';
select *
from query_requests
where is_executing = 't';
-- * Load the reporting.weekly_prescriber_sales_summary table
-- * history ---------------------------------------------------------------------------
-- * 
-- * 2020-01-14 MB: Update of sales force IDs to new ones (CSD-626)
-- * 2020-06-09 MB: Replace "Sample Request" with "Sample Shipment" to pick-up shipment data per CSD-777
-- * 2020-06-20 MB: Added "SA" sales force ID (CSD-683)
-- * 2020-10-26 MB: Analyzing few tables.
-- * 2020-12-11 MB: TR-TS merges to TR and renamed to RS from SP/SA 

drop table if exists tmp_product;
create local temporary table tmp_product on commit preserve rows as
select rmsf.sales_force_id, x.*, b.brand_id as market_share_brand_id
from (
  select product_id, product_name, product_type, teva_product_flag, presc_summary_include, 
    brand_id, brand_name, 'brand' as brand_type, market_id, market_name,
    rptg_decile_attribute_type, rptg_decile_attribute_prod_id,
    rptg_segment_attribute_type, rptg_segment_attribute_prod_id
  from reporting.product 
  where product_type in ('product','package')
  union
  select p.product_id, p.product_name, p.product_type, p.teva_product_flag, p.presc_summary_include,
    rg.brand_id, rg.brand_name, 'group' as brand_type, p.market_id, p.market_name,
    p.rptg_decile_attribute_type, p.rptg_decile_attribute_prod_id,
    p.rptg_segment_attribute_type, p.rptg_segment_attribute_prod_id
  from reporting.product rg
    join reporting.product_item ri on (ri.product_id = rg.product_id)
    join reporting.product p on (p.product_id = ri.item_id)
    where rg.product_type in ('reporting group')
) x
inner join reference.reporting_market_sales_force rmsf on x.market_id = rmsf.market_basket_id
inner join reporting.product b on x.market_id = b.market_id
--where rmsf.sales_force_id in ('TN','TO','TP','SP')
--where rmsf.sales_force_id in ('NS','ON','NP','SP','MA','SA')
where rmsf.sales_force_id in ('NS','ON','NP','RS','MA')
  and x.presc_summary_include = 'Y'
  and b.product_type = 'brand'
  and b.market_share_default_brand = 'Y'
unsegmented all nodes;
select analyze_statistics('reporting.weekly_prescriber_sales', 25);
select analyze_statistics('reporting.weekly_activity', 25);
select analyze_statistics('reporting.activity_plan', 25);
truncate table reporting.weekly_prescriber_sales_summary;
-- Trend rows
insert /*+ DIRECT */ into reporting.weekly_prescriber_sales_summary (
  sales_force_id, customer_id, tvcmid, ims_id, 
  period_type, period, week_ending, week_bucket,
  market_id, brand_id, 
  payer_id, payer_plan_id, method_of_payment,
  product_vol_trx_count, prev_prod_vol_trx_count, 
  product_vol_nrx_count, prev_prod_vol_nrx_count,
  market_vol_trx_count, prev_market_vol_trx_count,
  market_vol_nrx_count, prev_market_vol_nrx_count, 
  samples, details_p1, details_p2, details_p3 
)
with tmp_trend_rows_brand as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.week_ending, ps.week_bucket, p.market_id, p.brand_id, 
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as trx, sum(ps.nrx) as nrx
  from reporting.weekly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
  where (tvcmid is not null or ims_id is not null)
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_market as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.week_ending, ps.week_bucket, p.market_id, p.market_share_brand_id,
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as mkt_trx, sum(ps.nrx) as mkt_nrx
  from reporting.weekly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
  where (tvcmid is not null or ims_id is not null)
    and p.brand_type <> 'group'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_activity as (
  select a.sales_force_id, a.customer_id, tvcmid, ims_id, week_end as week_ending, r.sales_week_bucket as week_bucket, p.market_id, p.brand_id,
    null as payer_plan_id, null as method_of_payment,
    sum(case when activity_detail = 'Detail P1' then activity_value else 0 end) as details_p1, 
    sum(case when activity_detail = 'Detail P2' then activity_value else 0 end) as details_p2, 
    sum(case when activity_detail in ('Detail P3','Detail P4','Detail P5') then activity_value else 0 end) as details_p3, 
    sum(case when activity_name in ('Sample Drop','Sample Shipment') then activity_value else 0 end) as samples			-- CSD-777
  from reporting.weekly_activity a
    inner join reporting.product p on a.product_id = p.product_id
    inner join reporting.reporting_rollup_week r on a.week_end = r.rollup_week
  where activity_name in ('Detail','Group Detail','Sample Drop','Sample Shipment')				-- CSD-777
    and r.sales_week_bucket is not null
    and (tvcmid is not null or ims_id is not null)
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_target as (
  select ap.sales_force_id, ap.customer_id, ap.tvcmid, c.ims_id, r.rollup_week week_ending, r.sales_week_bucket week_bucket, p.market_id, p.brand_id,
    null as payer_plan_id, null as method_of_payment
  from reporting.activity_plan ap
    inner join reporting.customer c on (ap.customer_id = c.customer_id)
    inner join tmp_product p on ap.product_id = p.brand_id
    inner join reporting.reporting_rollup_week r on (r.sales_week_bucket = 1)
  where ap.target_status_flag = 'Y'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), keys as (
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_brand
  union
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, market_share_brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_market
  union
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_activity
  union
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_target
)
select k.sales_force_id, k.customer_id, k.tvcmid, k.ims_id,
  'Trend' as period_type, to_char(k.week_ending) as period,
  k.week_ending, k.week_bucket, k.market_id, k.brand_id, 
  pm.payer_id, k.payer_plan_id, k.method_of_payment,
  coalesce(b.trx,0) as trx,
  0 as prev_trx,
  coalesce(b.nrx,0) as nrx,
  0 as prev_nrx,
  coalesce(m.mkt_trx,0) as mkt_trx,
  0 as prev_mkt_trx,
  coalesce(m.mkt_nrx,0) as mkt_nrx,
  0 as prev_mkt_nrx,
  coalesce(a.samples,0) as samples,
  coalesce(a.details_p1,0) as details_p1,
  coalesce(a.details_p2,0) as details_p2,
  coalesce(a.details_p3,0) as details_p3
from keys k
  left outer join reporting.payer_mapping pm on (pm.payer_plan_id = k.payer_plan_id)
  left outer join tmp_trend_rows_brand b on (
    k.sales_force_id = b.sales_force_id
    and k.customer_id <=> b.customer_id
    and k.tvcmid <=> b.tvcmid
    and k.ims_id <=> b.ims_id
    and k.week_ending = b.week_ending
    and k.week_bucket = b.week_bucket
    and k.market_id = b.market_id
    and k.brand_id = b.brand_id
    and k.payer_plan_id <=> b.payer_plan_id
    and k.method_of_payment <=> b.method_of_payment
  )
  left outer join tmp_trend_rows_market m on (
    k.sales_force_id = m.sales_force_id
    and k.customer_id <=> m.customer_id
    and k.tvcmid <=> m.tvcmid
    and k.ims_id <=> m.ims_id
    and k.week_ending = m.week_ending
    and k.week_bucket = m.week_bucket
    and k.market_id = m.market_id
    and k.brand_id = m.market_share_brand_id
    and k.payer_plan_id <=> m.payer_plan_id
    and k.method_of_payment <=> m.method_of_payment
  )
  left outer join tmp_trend_rows_activity a on (
    k.sales_force_id = a.sales_force_id
    and k.customer_id <=> a.customer_id
    and k.tvcmid <=> a.tvcmid
    and k.ims_id <=> a.ims_id
    and k.week_ending = a.week_ending
    and k.week_bucket = a.week_bucket
    and k.market_id = a.market_id
    and k.brand_id = a.brand_id
    and k.payer_plan_id <=> a.payer_plan_id
    and k.method_of_payment <=> a.method_of_payment
  )
  left outer join tmp_trend_rows_target t on (
    k.sales_force_id = t.sales_force_id
    and k.customer_id <=> t.customer_id
    and k.tvcmid <=> t.tvcmid
    and k.ims_id <=> t.ims_id
    and k.week_ending = t.week_ending
    and k.week_bucket = t.week_bucket
    and k.market_id = t.market_id
    and k.brand_id = t.brand_id
    and k.payer_plan_id <=> t.payer_plan_id
    and k.method_of_payment <=> t.method_of_payment
  );
-- Aggregated rows
insert /*+ DIRECT */ into reporting.weekly_prescriber_sales_summary (
  sales_force_id, customer_id, tvcmid, ims_id, 
  period_type, period, week_bucket,  
  market_id, brand_id, 
  payer_id, payer_plan_id, method_of_payment,
  product_vol_trx_count, prev_prod_vol_trx_count, 
  product_vol_nrx_count, prev_prod_vol_nrx_count,
  market_vol_trx_count, prev_market_vol_trx_count,
  market_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3
)
with periods as (
  select '4W' as period, 1 as curr_bucket_start, 4 as curr_bucket_stop, 5 as prev_bucket_start, 8 as prev_bucket_stop from dual
  union
  select '13W' as period, 1, 13, 14, 26 from dual
  union
  select 'CW' as period, 1, 1, 2, 2 from dual
  union
  select 'YTD' as period, start_bucket_this_year, stop_bucket_this_year,
    start_bucket_this_year + 52 as start_bucket_last_year,
    stop_bucket_this_year + 52 as stop_bucket_last_year
  from (
    select rollup_week,
      sales_week_bucket as start_bucket_this_year,
      max(sales_week_bucket) over(partition by extract(year from rollup_week)) as stop_bucket_this_year
    from reporting.reporting_rollup_week
    where sales_week_bucket is not null
    order by sales_week_bucket
    limit 1
  ) x
)
select sales_force_id, customer_id, tvcmid, ims_id, 'Aggregated' as period_type, periods.period, week_bucket, market_id, brand_id, payer_id, payer_plan_id, method_of_payment,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then product_vol_trx_count else 0 end) as product_vol_trx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then product_vol_trx_count else 0 end) as prev_prod_vol_trx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then product_vol_nrx_count else 0 end) as product_vol_nrx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then product_vol_nrx_count else 0 end) as prev_prod_vol_nrx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then market_vol_trx_count else 0 end) as market_vol_trx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then market_vol_trx_count else 0 end) as prev_market_vol_trx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then market_vol_nrx_count else 0 end) as market_vol_nrx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then market_vol_nrx_count else 0 end) as prev_market_vol_nrx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then samples else 0 end) as samples,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then details_p1 else 0 end) as details_p1,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then details_p2 else 0 end) as details_p2,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then details_p3 else 0 end) as details_p3
from reporting.weekly_prescriber_sales_summary
  cross join periods
group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;
-- * Load the reporting.weekly_prescriber_sales_summary table
-- * history ---------------------------------------------------------------------------
-- * 
-- * 2020-01-14 MB: Update of sales force IDs to new ones (CSD-626)
-- * 2020-06-09 MB: Replace "Sample Request" with "Sample Shipment" to pick-up shipment data per CSD-777
-- * 2020-06-20 MB: Added "SA" sales force ID (CSD-683)
-- * 2020-10-26 MB: Analyzing few tables.
-- * 2020-12-11 MB: TR-TS merges to TR and renamed to RS from SP/SA 

drop table if exists tmp_product;
create local temporary table tmp_product on commit preserve rows as
select rmsf.sales_force_id, x.*, b.brand_id as market_share_brand_id
from (
  select product_id, product_name, product_type, teva_product_flag, presc_summary_include, 
    brand_id, brand_name, 'brand' as brand_type, market_id, market_name,
    rptg_decile_attribute_type, rptg_decile_attribute_prod_id,
    rptg_segment_attribute_type, rptg_segment_attribute_prod_id
  from reporting.product 
  where product_type in ('product','package')
  union
  select p.product_id, p.product_name, p.product_type, p.teva_product_flag, p.presc_summary_include,
    rg.brand_id, rg.brand_name, 'group' as brand_type, p.market_id, p.market_name,
    p.rptg_decile_attribute_type, p.rptg_decile_attribute_prod_id,
    p.rptg_segment_attribute_type, p.rptg_segment_attribute_prod_id
  from reporting.product rg
    join reporting.product_item ri on (ri.product_id = rg.product_id)
    join reporting.product p on (p.product_id = ri.item_id)
    where rg.product_type in ('reporting group')
) x
inner join reference.reporting_market_sales_force rmsf on x.market_id = rmsf.market_basket_id
inner join reporting.product b on x.market_id = b.market_id
--where rmsf.sales_force_id in ('TN','TO','TP','SP')
--where rmsf.sales_force_id in ('NS','ON','NP','SP','MA','SA')
where rmsf.sales_force_id in ('NS','ON','NP','RS','MA')
  and x.presc_summary_include = 'Y'
  and b.product_type = 'brand'
  and b.market_share_default_brand = 'Y'
unsegmented all nodes;
select analyze_statistics('reporting.weekly_prescriber_sales', 25);
select analyze_statistics('reporting.weekly_activity', 25);
select analyze_statistics('reporting.activity_plan', 25);
truncate table reporting.weekly_prescriber_sales_summary;
-- Trend rows
insert /*+ DIRECT */ into reporting.weekly_prescriber_sales_summary (
  sales_force_id, customer_id, tvcmid, ims_id, 
  period_type, period, week_ending, week_bucket,
  market_id, brand_id, 
  payer_id, payer_plan_id, method_of_payment,
  product_vol_trx_count, prev_prod_vol_trx_count, 
  product_vol_nrx_count, prev_prod_vol_nrx_count,
  market_vol_trx_count, prev_market_vol_trx_count,
  market_vol_nrx_count, prev_market_vol_nrx_count, 
  samples, details_p1, details_p2, details_p3 
)
with tmp_trend_rows_brand as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.week_ending, ps.week_bucket, p.market_id, p.brand_id, 
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as trx, sum(ps.nrx) as nrx
  from reporting.weekly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
  where (tvcmid is not null or ims_id is not null)
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_market as (
  select p.sales_force_id, ps.customer_id, ps.tvcmid, ps.ims_id, ps.week_ending, ps.week_bucket, p.market_id, p.market_share_brand_id,
    ps.payer_plan_id, ps.method_of_payment,
    sum(ps.trx) as mkt_trx, sum(ps.nrx) as mkt_nrx
  from reporting.weekly_prescriber_sales ps
    inner join tmp_product p on ps.product_id = p.product_id
  where (tvcmid is not null or ims_id is not null)
    and p.brand_type <> 'group'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_activity as (
  select a.sales_force_id, a.customer_id, tvcmid, ims_id, week_end as week_ending, r.sales_week_bucket as week_bucket, p.market_id, p.brand_id,
    null as payer_plan_id, null as method_of_payment,
    sum(case when activity_detail = 'Detail P1' then activity_value else 0 end) as details_p1, 
    sum(case when activity_detail = 'Detail P2' then activity_value else 0 end) as details_p2, 
    sum(case when activity_detail in ('Detail P3','Detail P4','Detail P5') then activity_value else 0 end) as details_p3, 
    sum(case when activity_name in ('Sample Drop','Sample Shipment') then activity_value else 0 end) as samples			-- CSD-777
  from reporting.weekly_activity a
    inner join reporting.product p on a.product_id = p.product_id
    inner join reporting.reporting_rollup_week r on a.week_end = r.rollup_week
  where activity_name in ('Detail','Group Detail','Sample Drop','Sample Shipment')				-- CSD-777
    and r.sales_week_bucket is not null
    and (tvcmid is not null or ims_id is not null)
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), tmp_trend_rows_target as (
  select ap.sales_force_id, ap.customer_id, ap.tvcmid, c.ims_id, r.rollup_week week_ending, r.sales_week_bucket week_bucket, p.market_id, p.brand_id,
    null as payer_plan_id, null as method_of_payment
  from reporting.activity_plan ap
    inner join reporting.customer c on (ap.customer_id = c.customer_id)
    inner join tmp_product p on ap.product_id = p.brand_id
    inner join reporting.reporting_rollup_week r on (r.sales_week_bucket = 1)
  where ap.target_status_flag = 'Y'
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
), keys as (
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_brand
  union
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, market_share_brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_market
  union
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_activity
  union
  select sales_force_id, customer_id, tvcmid, ims_id, week_ending, week_bucket, market_id, brand_id, payer_plan_id, method_of_payment
  from tmp_trend_rows_target
)
select k.sales_force_id, k.customer_id, k.tvcmid, k.ims_id,
  'Trend' as period_type, to_char(k.week_ending) as period,
  k.week_ending, k.week_bucket, k.market_id, k.brand_id, 
  pm.payer_id, k.payer_plan_id, k.method_of_payment,
  coalesce(b.trx,0) as trx,
  0 as prev_trx,
  coalesce(b.nrx,0) as nrx,
  0 as prev_nrx,
  coalesce(m.mkt_trx,0) as mkt_trx,
  0 as prev_mkt_trx,
  coalesce(m.mkt_nrx,0) as mkt_nrx,
  0 as prev_mkt_nrx,
  coalesce(a.samples,0) as samples,
  coalesce(a.details_p1,0) as details_p1,
  coalesce(a.details_p2,0) as details_p2,
  coalesce(a.details_p3,0) as details_p3
from keys k
  left outer join reporting.payer_mapping pm on (pm.payer_plan_id = k.payer_plan_id)
  left outer join tmp_trend_rows_brand b on (
    k.sales_force_id = b.sales_force_id
    and k.customer_id <=> b.customer_id
    and k.tvcmid <=> b.tvcmid
    and k.ims_id <=> b.ims_id
    and k.week_ending = b.week_ending
    and k.week_bucket = b.week_bucket
    and k.market_id = b.market_id
    and k.brand_id = b.brand_id
    and k.payer_plan_id <=> b.payer_plan_id
    and k.method_of_payment <=> b.method_of_payment
  )
  left outer join tmp_trend_rows_market m on (
    k.sales_force_id = m.sales_force_id
    and k.customer_id <=> m.customer_id
    and k.tvcmid <=> m.tvcmid
    and k.ims_id <=> m.ims_id
    and k.week_ending = m.week_ending
    and k.week_bucket = m.week_bucket
    and k.market_id = m.market_id
    and k.brand_id = m.market_share_brand_id
    and k.payer_plan_id <=> m.payer_plan_id
    and k.method_of_payment <=> m.method_of_payment
  )
  left outer join tmp_trend_rows_activity a on (
    k.sales_force_id = a.sales_force_id
    and k.customer_id <=> a.customer_id
    and k.tvcmid <=> a.tvcmid
    and k.ims_id <=> a.ims_id
    and k.week_ending = a.week_ending
    and k.week_bucket = a.week_bucket
    and k.market_id = a.market_id
    and k.brand_id = a.brand_id
    and k.payer_plan_id <=> a.payer_plan_id
    and k.method_of_payment <=> a.method_of_payment
  )
  left outer join tmp_trend_rows_target t on (
    k.sales_force_id = t.sales_force_id
    and k.customer_id <=> t.customer_id
    and k.tvcmid <=> t.tvcmid
    and k.ims_id <=> t.ims_id
    and k.week_ending = t.week_ending
    and k.week_bucket = t.week_bucket
    and k.market_id = t.market_id
    and k.brand_id = t.brand_id
    and k.payer_plan_id <=> t.payer_plan_id
    and k.method_of_payment <=> t.method_of_payment
  );
select analyze_statistics('reporting.weekly_prescriber_sales_summary', 25);
-- Payer ranking
--update reporting.weekly_prescriber_sales_summary a set hcp_payer_vol_rank = x.hcp_payer_vol_rank
--from (
--  select *, row_number() over (
--    partition by sales_force_id, customer_id, tvcmid, ims_id, period_type, period, market_id 
--    order by market_vol_trx_count desc, payer_id) as hcp_payer_vol_rank
--  from (
--    select sales_force_id, customer_id, tvcmid, ims_id, 
--      period_type, period, market_id, payer_id,
--      sum(market_vol_trx_count) as market_vol_trx_count
--    from reporting.weekly_prescriber_sales_summary
--    where period_type = 'Aggregated'
--      and market_vol_trx_count > 0
--      and payer_id is not null
--    group by 1, 2, 3, 4, 5, 6, 7, 8
--  ) b
--) x
--where a.sales_force_id = x.sales_force_id
--  and a.customer_id <=> x.customer_id
--  and a.tvcmid <=> x.tvcmid
--  and a.ims_id <=> x.ims_id
--  and a.period_type = x.period_type
--  and a.period = x.period
--  and a.market_id = x.market_id
--  and a.payer_id = x.payer_id;

-- Plan ranking
-- update reporting.weekly_prescriber_sales_summary a set hcp_plan_vol_rank = x.hcp_plan_vol_rank
-- from (
  -- select *, row_number() over (
    -- partition by sales_force_id, customer_id, tvcmid, ims_id, period_type, period, market_id 
    -- order by market_vol_trx_count desc, payer_plan_id) as hcp_plan_vol_rank
  -- from (
    -- select sales_force_id, customer_id, tvcmid, ims_id, 
      -- period_type, period, market_id, payer_plan_id,
      -- sum(market_vol_trx_count) as market_vol_trx_count
    -- from reporting.weekly_prescriber_sales_summary
    -- where period_type = 'Aggregated'
      -- and market_vol_trx_count > 0
      -- and payer_plan_id is not null
    -- group by 1, 2, 3, 4, 5, 6, 7, 8
  -- ) b
-- ) x
-- where a.sales_force_id = x.sales_force_id
  -- and a.customer_id <=> x.customer_id
  -- and a.tvcmid <=> x.tvcmid
  -- and a.ims_id <=> x.ims_id
  -- and a.period_type = x.period_type
  -- and a.period = x.period
  -- and a.market_id = x.market_id
  -- and a.payer_plan_id = x.payer_plan_id;

  -- Replacing the above update query by creating tmp table and then update to reporting table using this temp table for plan ranking.
 
create local temporary table tmp_hcp_plan_vol_rank on commit preserve rows as
  select *, row_number() over (
    partition by sales_force_id, customer_id, tvcmid, ims_id, period_type, period, market_id 
    order by market_vol_trx_count desc, payer_plan_id) as hcp_plan_vol_rank
  from (
    select sales_force_id, customer_id, tvcmid, ims_id, 
      period_type, period, market_id, payer_plan_id,
      sum(market_vol_trx_count) as market_vol_trx_count
    from reporting.weekly_prescriber_sales_summary
    where period_type = 'Aggregated'
      and market_vol_trx_count > 0
      and payer_plan_id is not null
    group by 1, 2, 3, 4, 5, 6, 7, 8
  ) b;
select analyze_statistics('tmp_hcp_plan_vol_rank', 25);
update reporting.weekly_prescriber_sales_summary a set hcp_plan_vol_rank = x.hcp_plan_vol_rank
from tmp_hcp_plan_vol_rank x
where a.sales_force_id = x.sales_force_id
  and a.customer_id <=> x.customer_id
  and a.tvcmid <=> x.tvcmid
  and a.ims_id <=> x.ims_id
  and a.period_type = x.period_type
  and a.period = x.period
  and a.market_id = x.market_id
  and a.payer_plan_id = x.payer_plan_id;
-- Aggregated rows
insert /*+ DIRECT */ into reporting.weekly_prescriber_sales_summary (
  sales_force_id, customer_id, tvcmid, ims_id, 
  period_type, period, week_bucket,  
  market_id, brand_id, 
  payer_id, payer_plan_id, method_of_payment,
  product_vol_trx_count, prev_prod_vol_trx_count, 
  product_vol_nrx_count, prev_prod_vol_nrx_count,
  market_vol_trx_count, prev_market_vol_trx_count,
  market_vol_nrx_count, prev_market_vol_nrx_count,
  samples, details_p1, details_p2, details_p3
)
with periods as (
  select '4W' as period, 1 as curr_bucket_start, 4 as curr_bucket_stop, 5 as prev_bucket_start, 8 as prev_bucket_stop from dual
  union
  select '13W' as period, 1, 13, 14, 26 from dual
  union
  select 'CW' as period, 1, 1, 2, 2 from dual
  union
  select 'YTD' as period, start_bucket_this_year, stop_bucket_this_year,
    start_bucket_this_year + 52 as start_bucket_last_year,
    stop_bucket_this_year + 52 as stop_bucket_last_year
  from (
    select rollup_week,
      sales_week_bucket as start_bucket_this_year,
      max(sales_week_bucket) over(partition by extract(year from rollup_week)) as stop_bucket_this_year
    from reporting.reporting_rollup_week
    where sales_week_bucket is not null
    order by sales_week_bucket
    limit 1
  ) x
)
select sales_force_id, customer_id, tvcmid, ims_id, 'Aggregated' as period_type, periods.period, week_bucket, market_id, brand_id, payer_id, payer_plan_id, method_of_payment,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then product_vol_trx_count else 0 end) as product_vol_trx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then product_vol_trx_count else 0 end) as prev_prod_vol_trx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then product_vol_nrx_count else 0 end) as product_vol_nrx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then product_vol_nrx_count else 0 end) as prev_prod_vol_nrx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then market_vol_trx_count else 0 end) as market_vol_trx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then market_vol_trx_count else 0 end) as prev_market_vol_trx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then market_vol_nrx_count else 0 end) as market_vol_nrx_count,
  sum(case when week_bucket between prev_bucket_start and prev_bucket_stop then market_vol_nrx_count else 0 end) as prev_market_vol_nrx_count,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then samples else 0 end) as samples,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then details_p1 else 0 end) as details_p1,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then details_p2 else 0 end) as details_p2,
  sum(case when week_bucket between curr_bucket_start and curr_bucket_stop then details_p3 else 0 end) as details_p3
from reporting.weekly_prescriber_sales_summary
  cross join periods
group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;
select analyze_statistics('reporting.weekly_prescriber_sales_summary',25);
select analyze_statistics('reporting.weekly_prescriber_sales_summary', 25);
-- Payer ranking
--update reporting.weekly_prescriber_sales_summary a set hcp_payer_vol_rank = x.hcp_payer_vol_rank
--from (
--  select *, row_number() over (
--    partition by sales_force_id, customer_id, tvcmid, ims_id, period_type, period, market_id 
--    order by market_vol_trx_count desc, payer_id) as hcp_payer_vol_rank
--  from (
--    select sales_force_id, customer_id, tvcmid, ims_id, 
--      period_type, period, market_id, payer_id,
--      sum(market_vol_trx_count) as market_vol_trx_count
--    from reporting.weekly_prescriber_sales_summary
--    where period_type = 'Aggregated'
--      and market_vol_trx_count > 0
--      and payer_id is not null
--    group by 1, 2, 3, 4, 5, 6, 7, 8
--  ) b
--) x
--where a.sales_force_id = x.sales_force_id
--  and a.customer_id <=> x.customer_id
--  and a.tvcmid <=> x.tvcmid
--  and a.ims_id <=> x.ims_id
--  and a.period_type = x.period_type
--  and a.period = x.period
--  and a.market_id = x.market_id
--  and a.payer_id = x.payer_id;

-- Plan ranking
-- update reporting.weekly_prescriber_sales_summary a set hcp_plan_vol_rank = x.hcp_plan_vol_rank
-- from (
  -- select *, row_number() over (
    -- partition by sales_force_id, customer_id, tvcmid, ims_id, period_type, period, market_id 
    -- order by market_vol_trx_count desc, payer_plan_id) as hcp_plan_vol_rank
  -- from (
    -- select sales_force_id, customer_id, tvcmid, ims_id, 
      -- period_type, period, market_id, payer_plan_id,
      -- sum(market_vol_trx_count) as market_vol_trx_count
    -- from reporting.weekly_prescriber_sales_summary
    -- where period_type = 'Aggregated'
      -- and market_vol_trx_count > 0
      -- and payer_plan_id is not null
    -- group by 1, 2, 3, 4, 5, 6, 7, 8
  -- ) b
-- ) x
-- where a.sales_force_id = x.sales_force_id
  -- and a.customer_id <=> x.customer_id
  -- and a.tvcmid <=> x.tvcmid
  -- and a.ims_id <=> x.ims_id
  -- and a.period_type = x.period_type
  -- and a.period = x.period
  -- and a.market_id = x.market_id
  -- and a.payer_plan_id = x.payer_plan_id;

  -- Replacing the above update query by creating tmp table and then update to reporting table using this temp table for plan ranking.
 
create local temporary table tmp_hcp_plan_vol_rank on commit preserve rows as
  select *, row_number() over (
    partition by sales_force_id, customer_id, tvcmid, ims_id, period_type, period, market_id 
    order by market_vol_trx_count desc, payer_plan_id) as hcp_plan_vol_rank
  from (
    select sales_force_id, customer_id, tvcmid, ims_id, 
      period_type, period, market_id, payer_plan_id,
      sum(market_vol_trx_count) as market_vol_trx_count
    from reporting.weekly_prescriber_sales_summary
    where period_type = 'Aggregated'
      and market_vol_trx_count > 0
      and payer_plan_id is not null
    group by 1, 2, 3, 4, 5, 6, 7, 8
  ) b;
select analyze_statistics('tmp_hcp_plan_vol_rank', 25);
update reporting.weekly_prescriber_sales_summary a set hcp_plan_vol_rank = x.hcp_plan_vol_rank
from tmp_hcp_plan_vol_rank x
where a.sales_force_id = x.sales_force_id
  and a.customer_id <=> x.customer_id
  and a.tvcmid <=> x.tvcmid
  and a.ims_id <=> x.ims_id
  and a.period_type = x.period_type
  and a.period = x.period
  and a.market_id = x.market_id
  and a.payer_plan_id = x.payer_plan_id;
select analyze_statistics('reporting.weekly_prescriber_sales_summary',25);
-- from seed

copy atlas.arrivals_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/arrivals.txt';
-- from seed

copy atlas.arrivals_src from local
'/Users/mbowen/devcode/F360/edw-wrkspc/data/seed/arrivals.txt';
-- from seed

copy atlas.arrivals_src from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/arrivals.txt';
copy atlas.cust_dim_src from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/cust_dim.txt';
copy atlas.cust_sales_src from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/cust_sales.txt';
copy atlas.date_dim_src from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/date_dim.txt';
copy atlas.dealer_dim_src from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/dealer_dim.txt';
copy atlas.mock_dealer_src from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/mock_dealers.txt';
copy atlas.port_dim from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/port_dim.txt';
copy atlas.region_dim from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/region_dim.txt';
copy atlas.sales_fact from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/sales_fact.txt';
copy atlas.vehicle_config from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/vehicle_config.txt';
copy atlas.zip_code_lkp from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/zip_code_lkp.txt';
CONNECT TO VERTICA teva USER dbadmin PASSWORD '360teva360' ON 'prod.vertica.service.teva-virginia.soa.ebi',5433;
COPY sandbox.oncology_detail_goals FROM  VERTICA sandbox.oncology_detail_goals;
select count(*) from sandbox.oncology_detail_goals;
select count(*) from sandbox.oncology_detail_goals;
select * from sandbox.oncology_detail_goals;
truncate table sandbox.oncology_detail_goals;
select count(*) from sandbox.oncology_detail_goals;
CONNECT TO VERTICA teva USER dbadmin PASSWORD '360teva360' ON 'prod.vertica.service.teva-virginia.soa.ebi',5433;
disconnect teva;
CONNECT TO VERTICA teva USER dbadmin PASSWORD '360teva360' ON 'prod.vertica.service.teva-virginia.soa.ebi',5433;
COPY sandbox.oncology_detail_goals FROM  VERTICA sandbox.oncology_detail_goals ;
COPY oncology_detail_goals FROM  VERTICA sandbox.oncology_detail_goals ;
disconnect teva;
CONNECT TO VERTICA  USER dbadmin PASSWORD '360teva360' ON 'prod.vertica.service.teva-virginia.soa.ebi',5433;
CONNECT TO VERTICA teva USER dbadmin PASSWORD '360teva360' ON 'prod.vertica.service.teva-virginia.soa.ebi',5433;
COPY teva.sandbox.oncology_detail_goals FROM  VERTICA teva.sandbox.oncology_detail_goals ;
disconnect teva;
select count(*) from sandbox.oncology_detail_goals;
truncate table sandbox.oncology_detail_goals;
select count(*) from sandbox.oncology_detail_goals;
CONNECT TO VERTICA teva USER dbadmin PASSWORD '360teva360' ON 'prod.vertica.service.teva-virginia.soa.ebi',5433;
COPY teva.sandbox.oncology_detail_goals FROM  VERTICA teva.sandbox.oncology_detail_goals;
disconnect teva;
select * from sandbox.oncology_detail_goals;
copy click.CreditCard_Dimension

from local '/Volumes/Sable/DEMODATA/LilBeer/Customer_Dimension.tbl'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
select count(*) from click.CreditCard_Dimension;
copy click.CreditCard_Dimension
from local '/Volumes/Sable/DEMODATA/LilBeer/Customer_Dimension.tbl'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
select count(*) from click.CreditCard_Dimension;
create table click.alt_fact4 as 
select * from click.alt_fact3;
insert into click.alt_fact4
select * from alt_fact;
insert into click.alt_fact4
select * from click.alt_fact;
copy click.main_fact from
's3//redshiftbillionrow.full360.com/fact_denorm_1.txt0000_part_00';
select * from v_monitor.disk_storage;
select * from v_monitor.disk_storage;
select count(*) from atlas.arrivals_src;
copy atlas.cust_dim_src from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/cust_dim.txt';
copy atlas.arrivals_src from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/arrivals.txt';
copy atlas.cust_sales_src from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/cust_sales.txt';
copy atlas.date_dim_src from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/date_dim.txt';
copy atlas.dealer_dim_src from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/dealer_dim.txt';
copy atlas.mock_dealer_src from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/mock_dealers.txt';
copy atlas.port_dim from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/port_dim.txt';
copy atlas.region_dim from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/region_dim.txt';
copy atlas.sales_fact from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/sales_fact.txt';
copy atlas.vehicle_config from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/vehicle_config.txt';
copy atlas.zip_code_lkp from local
'/Users/mbowen/devcode/DEMOS/edw-wrkspc/data/seed/zip_code_lkp.txt';
close_session('v_teva_node0004-8302:0x18b281');
close_session('v_teva_node0004-8302:0x18b281');
select close_session('v_teva_node0004-8302:0x18b281');
select * from sessions;
create schema if not exists click;
CREATE TABLE click.main_fact
(
    click_date date,
    cust_name varchar(100),
    cust_email varchar(100),
    cust_age int,
    cust_sex varchar(5),
    cust_num int,
    cust_city varchar(50),
    cust_state varchar(50),
    cust_country varchar(25),
    site_url varchar(200),
    search_key varchar(50),
    search_engine varchar(50),
    clicks int
);
CREATE PROJECTION click.main_fact_super /*+basename(main_fact),createtype(L)*/
(
 click_date,
 cust_name,
 cust_email,
 cust_age,
 cust_sex,
 cust_num,
 cust_city,
 cust_state,
 cust_country,
 site_url,
 search_key,
 search_engine,
 clicks
)
AS
 SELECT main_fact.click_date,
        main_fact.cust_name,
        main_fact.cust_email,
        main_fact.cust_age,
        main_fact.cust_sex,
        main_fact.cust_num,
        main_fact.cust_city,
        main_fact.cust_state,
        main_fact.cust_country,
        main_fact.site_url,
        main_fact.search_key,
        main_fact.search_engine,
        main_fact.clicks
 FROM click.main_fact
 ORDER BY main_fact.click_date,
          main_fact.cust_name,
          main_fact.cust_email,
          main_fact.cust_age,
          main_fact.cust_sex,
          main_fact.cust_num,
          main_fact.cust_city,
          main_fact.cust_state
SEGMENTED BY hash(main_fact.click_date, main_fact.cust_age, main_fact.cust_sex, main_fact.cust_num, main_fact.clicks, main_fact.cust_country, main_fact.cust_city, main_fact.cust_state) ALL NODES OFFSET 0;
SELECT MARK_DESIGN_KSAFE(0);
CREATE SCHEMA if not exists cortex;
CREATE TABLE cortex.flight
(
    batch_id int,
    source_file_id int,
    flight_leg_id varchar(42),
    FLIGHT_LEG_INDEX int,
    origin_date_utc date,
    airline varchar(20),
    airline2 varchar(20),
    Aircraft_Registration varchar(20),
    flight_number int,
    domain varchar(26),
    departure_sequent int,
    flight_status varchar(20),
    departure_port varchar(20),
    departure_country varchar(20),
    arrival_port varchar(20),
    arrival_country varchar(20),
    departure_schedule timestamp,
    departure_schedule_local timestamp,
    departure_schedule_date_local date,
    departure_schedule_utc timestamp,
    departure_schedule_date_utc date,
    arrival_schedule timestamp,
    arrival_schedule_local timestamp,
    arrival_schedule_date_local date,
    arrival_schedule_utc timestamp,
    arrival_schedule_date_utc date,
    updated_ts timestamp,
    Service_Type varchar(20),
    Origin_Date_Sequent int,
    Origin_Date_Local date,
    Operation_Type varchar(20),
    Operation_Domain varchar(26),
    Aircraft_Type varchar(20),
    Aircraft_Group int,
    OnBlocks_Qualifier varchar(20),
    OnBlocks_Time_Local timestamp,
    OnBlocks_Time_UTC timestamp,
    OffBlocks_Qualifier varchar(20),
    OffBlocks_Time_Local timestamp,
    OffBlocks_Time_UTC timestamp,
    row_id int,
    departure_boarding_gate int,
    departure_terminal varchar(20),
    arrival_boarding_gate int,
    arrival_terminal varchar(20)
);
CREATE TABLE cortex.og_flight
(
    batch_id int,
    source_file_id int,
    flight_leg_id varchar(42),
    FLIGHT_LEG_INDEX int,
    origin_date_utc date,
    airline varchar(20),
    airline2 varchar(20),
    Aircraft_Registration varchar(20),
    flight_number int,
    domain varchar(26),
    departure_sequent int,
    flight_status varchar(20),
    departure_port varchar(20),
    departure_country varchar(20),
    arrival_port varchar(20),
    arrival_country varchar(20),
    departure_schedule timestamp,
    departure_schedule_local timestamp,
    departure_schedule_date_local date,
    departure_schedule_utc timestamp,
    departure_schedule_date_utc date,
    arrival_schedule timestamp,
    arrival_schedule_local timestamp,
    arrival_schedule_date_local date,
    arrival_schedule_utc timestamp,
    arrival_schedule_date_utc date,
    updated_ts timestamp,
    Service_Type varchar(20),
    Origin_Date_Sequent int,
    Origin_Date_Local date,
    Operation_Type varchar(20),
    Operation_Domain varchar(26),
    Aircraft_Type varchar(20),
    Aircraft_Group int,
    OnBlocks_Qualifier varchar(20),
    OnBlocks_Time_Local timestamp,
    OnBlocks_Time_UTC timestamp,
    OffBlocks_Qualifier varchar(20),
    OffBlocks_Time_Local timestamp,
    OffBlocks_Time_UTC timestamp,
    row_id int,
    departure_boarding_gate int,
    departure_terminal varchar(20),
    arrival_boarding_gate int,
    arrival_terminal varchar(20)
);
CREATE TABLE cortex.for_mike
(
    batch_id int,
    source_file_id int,
    flight_leg_id varchar(42),
    FLIGHT_LEG_INDEX int,
    origin_date_utc date,
    airline varchar(20),
    airline2 varchar(20),
    Aircraft_Registration varchar(20),
    flight_number int,
    domain varchar(26),
    departure_sequent int,
    flight_status varchar(20),
    departure_port varchar(20),
    departure_country varchar(20),
    arrival_port varchar(20),
    arrival_country varchar(20),
    departure_schedule timestamp,
    departure_schedule_local timestamp,
    departure_schedule_date_local date,
    departure_schedule_utc timestamp,
    departure_schedule_date_utc date,
    arrival_schedule timestamp,
    arrival_schedule_local timestamp,
    arrival_schedule_date_local date,
    arrival_schedule_utc timestamp,
    arrival_schedule_date_utc date,
    updated_ts timestamp,
    Service_Type varchar(20),
    Origin_Date_Sequent int,
    Origin_Date_Local date,
    Operation_Type varchar(20),
    Operation_Domain varchar(26),
    Aircraft_Type varchar(20),
    Aircraft_Group int,
    OnBlocks_Qualifier varchar(20),
    OnBlocks_Time_Local timestamp,
    OnBlocks_Time_UTC timestamp,
    OffBlocks_Qualifier varchar(20),
    OffBlocks_Time_Local timestamp,
    OffBlocks_Time_UTC timestamp,
    row_id int,
    departure_boarding_gate int,
    departure_terminal varchar(20),
    arrival_boarding_gate int,
    arrival_terminal varchar(20)
);
CREATE TABLE cortex.iata_xref
(
    id int,
    src varchar(25),
    dest varchar(25)
);
CREATE TABLE cortex.new_flight
(
    batch_id int,
    source_file_id int,
    flight_leg_id varchar(95),
    FLIGHT_LEG_INDEX int,
    origin_date_utc date,
    airline varchar(20),
    airline2 varchar(20),
    Aircraft_Registration varchar(20),
    flight_number int,
    domain varchar(26),
    departure_sequent int,
    flight_status varchar(20),
    departure_port varchar(25),
    departure_country varchar(20),
    arrival_port varchar(25),
    arrival_country varchar(20),
    departure_schedule timestamp,
    departure_schedule_local timestamp,
    departure_schedule_date_local date,
    departure_schedule_utc timestamp,
    departure_schedule_date_utc date,
    arrival_schedule timestamp,
    arrival_schedule_local timestamp,
    arrival_schedule_date_local date,
    arrival_schedule_utc timestamp,
    arrival_schedule_date_utc date,
    updated_ts timestamp,
    Service_Type varchar(20),
    Origin_Date_Sequent int,
    Origin_Date_Local date,
    Operation_Type varchar(20),
    Operation_Domain varchar(26),
    Aircraft_Type varchar(20),
    Aircraft_Group int,
    OnBlocks_Qualifier varchar(20),
    OnBlocks_Time_Local timestamp,
    OnBlocks_Time_UTC timestamp,
    OffBlocks_Qualifier varchar(20),
    OffBlocks_Time_Local timestamp,
    OffBlocks_Time_UTC timestamp,
    row_id int,
    departure_boarding_gate int,
    departure_terminal varchar(20),
    arrival_boarding_gate int,
    arrival_terminal varchar(20)
);
CREATE PROJECTION cortex.flight_super /*+basename(flight),createtype(L)*/
(
 batch_id,
 source_file_id,
 flight_leg_id,
 FLIGHT_LEG_INDEX,
 origin_date_utc,
 airline,
 airline2,
 Aircraft_Registration,
 flight_number,
 domain,
 departure_sequent,
 flight_status,
 departure_port,
 departure_country,
 arrival_port,
 arrival_country,
 departure_schedule,
 departure_schedule_local,
 departure_schedule_date_local,
 departure_schedule_utc,
 departure_schedule_date_utc,
 arrival_schedule,
 arrival_schedule_local,
 arrival_schedule_date_local,
 arrival_schedule_utc,
 arrival_schedule_date_utc,
 updated_ts,
 Service_Type,
 Origin_Date_Sequent,
 Origin_Date_Local,
 Operation_Type,
 Operation_Domain,
 Aircraft_Type,
 Aircraft_Group,
 OnBlocks_Qualifier,
 OnBlocks_Time_Local,
 OnBlocks_Time_UTC,
 OffBlocks_Qualifier,
 OffBlocks_Time_Local,
 OffBlocks_Time_UTC,
 row_id,
 departure_boarding_gate,
 departure_terminal,
 arrival_boarding_gate,
 arrival_terminal
)
AS
 SELECT flight.batch_id,
        flight.source_file_id,
        flight.flight_leg_id,
        flight.FLIGHT_LEG_INDEX,
        flight.origin_date_utc,
        flight.airline,
        flight.airline2,
        flight.Aircraft_Registration,
        flight.flight_number,
        flight.domain,
        flight.departure_sequent,
        flight.flight_status,
        flight.departure_port,
        flight.departure_country,
        flight.arrival_port,
        flight.arrival_country,
        flight.departure_schedule,
        flight.departure_schedule_local,
        flight.departure_schedule_date_local,
        flight.departure_schedule_utc,
        flight.departure_schedule_date_utc,
        flight.arrival_schedule,
        flight.arrival_schedule_local,
        flight.arrival_schedule_date_local,
        flight.arrival_schedule_utc,
        flight.arrival_schedule_date_utc,
        flight.updated_ts,
        flight.Service_Type,
        flight.Origin_Date_Sequent,
        flight.Origin_Date_Local,
        flight.Operation_Type,
        flight.Operation_Domain,
        flight.Aircraft_Type,
        flight.Aircraft_Group,
        flight.OnBlocks_Qualifier,
        flight.OnBlocks_Time_Local,
        flight.OnBlocks_Time_UTC,
        flight.OffBlocks_Qualifier,
        flight.OffBlocks_Time_Local,
        flight.OffBlocks_Time_UTC,
        flight.row_id,
        flight.departure_boarding_gate,
        flight.departure_terminal,
        flight.arrival_boarding_gate,
        flight.arrival_terminal
 FROM cortex.flight
 ORDER BY flight.batch_id,
          flight.source_file_id,
          flight.flight_leg_id,
          flight.FLIGHT_LEG_INDEX,
          flight.origin_date_utc,
          flight.airline,
          flight.airline2,
          flight.Aircraft_Registration
SEGMENTED BY hash(flight.batch_id, flight.source_file_id, flight.FLIGHT_LEG_INDEX, flight.origin_date_utc, flight.flight_number, flight.departure_sequent, flight.departure_schedule, flight.departure_schedule_local) ALL NODES OFFSET 0;
CREATE PROJECTION cortex.og_flight_super /*+basename(og_flight),createtype(A)*/
(
 batch_id,
 source_file_id,
 flight_leg_id,
 FLIGHT_LEG_INDEX,
 origin_date_utc,
 airline,
 airline2,
 Aircraft_Registration,
 flight_number,
 domain,
 departure_sequent,
 flight_status,
 departure_port,
 departure_country,
 arrival_port,
 arrival_country,
 departure_schedule,
 departure_schedule_local,
 departure_schedule_date_local,
 departure_schedule_utc,
 departure_schedule_date_utc,
 arrival_schedule,
 arrival_schedule_local,
 arrival_schedule_date_local,
 arrival_schedule_utc,
 arrival_schedule_date_utc,
 updated_ts,
 Service_Type,
 Origin_Date_Sequent,
 Origin_Date_Local,
 Operation_Type,
 Operation_Domain,
 Aircraft_Type,
 Aircraft_Group,
 OnBlocks_Qualifier,
 OnBlocks_Time_Local,
 OnBlocks_Time_UTC,
 OffBlocks_Qualifier,
 OffBlocks_Time_Local,
 OffBlocks_Time_UTC,
 row_id,
 departure_boarding_gate,
 departure_terminal,
 arrival_boarding_gate,
 arrival_terminal
)
AS
 SELECT og_flight.batch_id,
        og_flight.source_file_id,
        og_flight.flight_leg_id,
        og_flight.FLIGHT_LEG_INDEX,
        og_flight.origin_date_utc,
        og_flight.airline,
        og_flight.airline2,
        og_flight.Aircraft_Registration,
        og_flight.flight_number,
        og_flight.domain,
        og_flight.departure_sequent,
        og_flight.flight_status,
        og_flight.departure_port,
        og_flight.departure_country,
        og_flight.arrival_port,
        og_flight.arrival_country,
        og_flight.departure_schedule,
        og_flight.departure_schedule_local,
        og_flight.departure_schedule_date_local,
        og_flight.departure_schedule_utc,
        og_flight.departure_schedule_date_utc,
        og_flight.arrival_schedule,
        og_flight.arrival_schedule_local,
        og_flight.arrival_schedule_date_local,
        og_flight.arrival_schedule_utc,
        og_flight.arrival_schedule_date_utc,
        og_flight.updated_ts,
        og_flight.Service_Type,
        og_flight.Origin_Date_Sequent,
        og_flight.Origin_Date_Local,
        og_flight.Operation_Type,
        og_flight.Operation_Domain,
        og_flight.Aircraft_Type,
        og_flight.Aircraft_Group,
        og_flight.OnBlocks_Qualifier,
        og_flight.OnBlocks_Time_Local,
        og_flight.OnBlocks_Time_UTC,
        og_flight.OffBlocks_Qualifier,
        og_flight.OffBlocks_Time_Local,
        og_flight.OffBlocks_Time_UTC,
        og_flight.row_id,
        og_flight.departure_boarding_gate,
        og_flight.departure_terminal,
        og_flight.arrival_boarding_gate,
        og_flight.arrival_terminal
 FROM cortex.og_flight
 ORDER BY og_flight.batch_id,
          og_flight.source_file_id,
          og_flight.flight_leg_id,
          og_flight.FLIGHT_LEG_INDEX,
          og_flight.origin_date_utc,
          og_flight.airline,
          og_flight.airline2,
          og_flight.Aircraft_Registration
SEGMENTED BY hash(og_flight.batch_id, og_flight.source_file_id, og_flight.FLIGHT_LEG_INDEX, og_flight.origin_date_utc, og_flight.flight_number, og_flight.departure_sequent, og_flight.departure_schedule, og_flight.departure_schedule_local) ALL NODES OFFSET 0;
CREATE PROJECTION cortex.for_mike_super /*+basename(for_mike),createtype(A)*/
(
 batch_id,
 source_file_id,
 flight_leg_id,
 FLIGHT_LEG_INDEX,
 origin_date_utc,
 airline,
 airline2,
 Aircraft_Registration,
 flight_number,
 domain,
 departure_sequent,
 flight_status,
 departure_port,
 departure_country,
 arrival_port,
 arrival_country,
 departure_schedule,
 departure_schedule_local,
 departure_schedule_date_local,
 departure_schedule_utc,
 departure_schedule_date_utc,
 arrival_schedule,
 arrival_schedule_local,
 arrival_schedule_date_local,
 arrival_schedule_utc,
 arrival_schedule_date_utc,
 updated_ts,
 Service_Type,
 Origin_Date_Sequent,
 Origin_Date_Local,
 Operation_Type,
 Operation_Domain,
 Aircraft_Type,
 Aircraft_Group,
 OnBlocks_Qualifier,
 OnBlocks_Time_Local,
 OnBlocks_Time_UTC,
 OffBlocks_Qualifier,
 OffBlocks_Time_Local,
 OffBlocks_Time_UTC,
 row_id,
 departure_boarding_gate,
 departure_terminal,
 arrival_boarding_gate,
 arrival_terminal
)
AS
 SELECT for_mike.batch_id,
        for_mike.source_file_id,
        for_mike.flight_leg_id,
        for_mike.FLIGHT_LEG_INDEX,
        for_mike.origin_date_utc,
        for_mike.airline,
        for_mike.airline2,
        for_mike.Aircraft_Registration,
        for_mike.flight_number,
        for_mike.domain,
        for_mike.departure_sequent,
        for_mike.flight_status,
        for_mike.departure_port,
        for_mike.departure_country,
        for_mike.arrival_port,
        for_mike.arrival_country,
        for_mike.departure_schedule,
        for_mike.departure_schedule_local,
        for_mike.departure_schedule_date_local,
        for_mike.departure_schedule_utc,
        for_mike.departure_schedule_date_utc,
        for_mike.arrival_schedule,
        for_mike.arrival_schedule_local,
        for_mike.arrival_schedule_date_local,
        for_mike.arrival_schedule_utc,
        for_mike.arrival_schedule_date_utc,
        for_mike.updated_ts,
        for_mike.Service_Type,
        for_mike.Origin_Date_Sequent,
        for_mike.Origin_Date_Local,
        for_mike.Operation_Type,
        for_mike.Operation_Domain,
        for_mike.Aircraft_Type,
        for_mike.Aircraft_Group,
        for_mike.OnBlocks_Qualifier,
        for_mike.OnBlocks_Time_Local,
        for_mike.OnBlocks_Time_UTC,
        for_mike.OffBlocks_Qualifier,
        for_mike.OffBlocks_Time_Local,
        for_mike.OffBlocks_Time_UTC,
        for_mike.row_id,
        for_mike.departure_boarding_gate,
        for_mike.departure_terminal,
        for_mike.arrival_boarding_gate,
        for_mike.arrival_terminal
 FROM cortex.for_mike
 ORDER BY for_mike.batch_id,
          for_mike.source_file_id,
          for_mike.flight_leg_id,
          for_mike.FLIGHT_LEG_INDEX,
          for_mike.origin_date_utc,
          for_mike.airline,
          for_mike.airline2,
          for_mike.Aircraft_Registration
SEGMENTED BY hash(for_mike.batch_id, for_mike.source_file_id, for_mike.FLIGHT_LEG_INDEX, for_mike.origin_date_utc, for_mike.flight_number, for_mike.departure_sequent, for_mike.departure_schedule, for_mike.departure_schedule_local) ALL NODES OFFSET 0;
CREATE PROJECTION cortex.iata_xref_super /*+basename(iata_xref),createtype(L)*/
(
 id,
 src,
 dest
)
AS
 SELECT iata_xref.id,
        iata_xref.src,
        iata_xref.dest
 FROM cortex.iata_xref
 ORDER BY iata_xref.id,
          iata_xref.src,
          iata_xref.dest
SEGMENTED BY hash(iata_xref.id, iata_xref.src, iata_xref.dest) ALL NODES OFFSET 0;
CREATE PROJECTION cortex.new_flight_super /*+basename(new_flight),createtype(A)*/
(
 batch_id,
 source_file_id,
 flight_leg_id,
 FLIGHT_LEG_INDEX,
 origin_date_utc,
 airline,
 airline2,
 Aircraft_Registration,
 flight_number,
 domain,
 departure_sequent,
 flight_status,
 departure_port,
 departure_country,
 arrival_port,
 arrival_country,
 departure_schedule,
 departure_schedule_local,
 departure_schedule_date_local,
 departure_schedule_utc,
 departure_schedule_date_utc,
 arrival_schedule,
 arrival_schedule_local,
 arrival_schedule_date_local,
 arrival_schedule_utc,
 arrival_schedule_date_utc,
 updated_ts,
 Service_Type,
 Origin_Date_Sequent,
 Origin_Date_Local,
 Operation_Type,
 Operation_Domain,
 Aircraft_Type,
 Aircraft_Group,
 OnBlocks_Qualifier,
 OnBlocks_Time_Local,
 OnBlocks_Time_UTC,
 OffBlocks_Qualifier,
 OffBlocks_Time_Local,
 OffBlocks_Time_UTC,
 row_id,
 departure_boarding_gate,
 departure_terminal,
 arrival_boarding_gate,
 arrival_terminal
)
AS
 SELECT new_flight.batch_id,
        new_flight.source_file_id,
        new_flight.flight_leg_id,
        new_flight.FLIGHT_LEG_INDEX,
        new_flight.origin_date_utc,
        new_flight.airline,
        new_flight.airline2,
        new_flight.Aircraft_Registration,
        new_flight.flight_number,
        new_flight.domain,
        new_flight.departure_sequent,
        new_flight.flight_status,
        new_flight.departure_port,
        new_flight.departure_country,
        new_flight.arrival_port,
        new_flight.arrival_country,
        new_flight.departure_schedule,
        new_flight.departure_schedule_local,
        new_flight.departure_schedule_date_local,
        new_flight.departure_schedule_utc,
        new_flight.departure_schedule_date_utc,
        new_flight.arrival_schedule,
        new_flight.arrival_schedule_local,
        new_flight.arrival_schedule_date_local,
        new_flight.arrival_schedule_utc,
        new_flight.arrival_schedule_date_utc,
        new_flight.updated_ts,
        new_flight.Service_Type,
        new_flight.Origin_Date_Sequent,
        new_flight.Origin_Date_Local,
        new_flight.Operation_Type,
        new_flight.Operation_Domain,
        new_flight.Aircraft_Type,
        new_flight.Aircraft_Group,
        new_flight.OnBlocks_Qualifier,
        new_flight.OnBlocks_Time_Local,
        new_flight.OnBlocks_Time_UTC,
        new_flight.OffBlocks_Qualifier,
        new_flight.OffBlocks_Time_Local,
        new_flight.OffBlocks_Time_UTC,
        new_flight.row_id,
        new_flight.departure_boarding_gate,
        new_flight.departure_terminal,
        new_flight.arrival_boarding_gate,
        new_flight.arrival_terminal
 FROM cortex.new_flight
 ORDER BY new_flight.batch_id,
          new_flight.source_file_id,
          new_flight.flight_leg_id,
          new_flight.FLIGHT_LEG_INDEX,
          new_flight.origin_date_utc,
          new_flight.airline,
          new_flight.airline2,
          new_flight.Aircraft_Registration
SEGMENTED BY hash(new_flight.batch_id, new_flight.source_file_id, new_flight.FLIGHT_LEG_INDEX, new_flight.origin_date_utc, new_flight.flight_number, new_flight.departure_sequent, new_flight.departure_schedule, new_flight.departure_schedule_local) ALL NODES OFFSET 0;
CREATE  VIEW cortex.short_vw AS
 SELECT m.flight_leg_id,
        ((substr(m.flight_leg_id, 1, 7) || x.dest) || substr(m.flight_leg_id, ((length(m.flight_leg_id) - 11) + 1), 11)) AS new_leg,
        m.departure_port,
        x.dest AS new_dep,
        m.arrival_port,
        xx.dest AS new_arr
 FROM ((cortex.for_mike m JOIN cortex.iata_xref x ON ((m.departure_port = x.src))) JOIN cortex.iata_xref xx ON ((m.arrival_port = xx.src)));
CREATE SCHEMA atlas;
CREATE TABLE atlas.mock_dealer_src
(
    og_name varchar(50),
    new_name varchar(50)
);
CREATE TABLE atlas.arrivals_src
(
    vin varchar(50),
    arrivals_count int,
    region_key int,
    port_key int,
    date_key varchar(20),
    config_key int
);
CREATE TABLE atlas.control
(
    source_file_id int,
    source_key varchar(20),
    source_file_name varchar(1024),
    source_system varchar(255),
    sourc_file_run_date date,
    message varchar(255),
    file_size varchar(20),
    data_from_ts timestamp,
    data_to_ts timestamp,
    job_start_ts timestamp,
    job_end_ts timestamp,
    update_ts timestamp
);
CREATE TABLE atlas.cust_sales_src
(
    vin varchar(50),
    region varchar(255),
    count numeric(37,15),
    dealer int,
    sale_date varchar(255),
    vehicle int,
    cust_id int,
    cust_type varchar(20),
    gender varchar(20),
    income_group varchar(20),
    zip varchar(20)
);
CREATE TABLE atlas.date_dim_src
(
    date timestamp,
    date_key varchar(10),
    day_of_week_number int,
    day_of_year_number numeric(37,15),
    week_of_year_number numeric(37,15),
    quarter_number numeric(37,15),
    ten_day_period_number numeric(37,15),
    sales_days int,
    sales_month_date varchar(10),
    end_of_calendar_month_indic varchar(1),
    holiday_indic varchar(1),
    ten_day_period_end_indic varchar(1),
    shipments_month_end_indic varchar(1)
);
CREATE TABLE atlas.dealer_dim_src
(
    dealer_id int,
    dealer_name varchar(50),
    address_line_1 varchar(50),
    address_line_2 varchar(50),
    city_name varchar(50),
    po_box_number varchar(50),
    state_code varchar(5),
    zip_code varchar(10),
    area_code varchar(5),
    telephone_number varchar(10),
    region_name varchar(50),
    district_name varchar(50),
    metro_area_name varchar(50),
    metro_area_abbrev_name varchar(20),
    area_of_dom_influence_name varchar(50),
    adi_abbrev_name varchar(20),
    adi_us_population_percent numeric(37,15),
    pma_number varchar(20),
    salesperson_count int,
    new_car_storage_count int
);
CREATE TABLE atlas.main_report
(
    vin varchar(50),
    region_key int,
    sales_count int,
    date_key varchar(10),
    zip varchar(20),
    income_group varchar(20),
    cust_type_desc varchar(10),
    gender varchar(14),
    income varchar(14),
    dealer_name varchar(50),
    dealer_city varchar(50),
    dealer_state varchar(5),
    dealer_zip varchar(10),
    dealer_area_code varchar(5),
    region_name varchar(50),
    district_name varchar(50),
    metro_area_name varchar(50),
    metro_area_abbrev_name varchar(20),
    area_of_dom_influence_name varchar(50),
    adi_abbrev_name varchar(20),
    adi_us_population_percent numeric(37,15),
    pma_number varchar(20),
    salesperson_count int,
    new_car_storage_count int,
    model_year int,
    body_model_code varchar(5),
    body_model_name varchar(50),
    price_line_code varchar(10),
    price_line_name varchar(46),
    emissions_catg_code varchar(10),
    emissions_catg_name varchar(16),
    engine_code varchar(5),
    engine_name varchar(20),
    ext_color_code varchar(10),
    ext_color_name varchar(50),
    k_model_number varchar(22),
    interior_trim_id int,
    interior_trim_color varchar(50),
    transmission_type_code varchar(10),
    transmission_type_name varchar(50),
    factory_op_group_code varchar(10)
);
CREATE TABLE atlas.date_dim
(
    date timestamp,
    date_key varchar(10),
    day_of_week_number int,
    day_of_year_number numeric(37,15),
    week_of_year_number numeric(37,15),
    quarter_number numeric(37,15),
    ten_day_period_number numeric(37,15),
    sales_days int,
    sales_month_date varchar(10),
    end_of_calendar_month_indic varchar(1),
    holiday_indic varchar(1),
    ten_day_period_end_indic varchar(1),
    shipments_month_end_indic varchar(1)
);
CREATE TABLE atlas.port_dim
(
    port_id int,
    port_name varchar(30),
    shipping_route_code varchar(1)
);
CREATE TABLE atlas.region_dim
(
    region_key int,
    org_unit_code varchar(10),
    region_name varchar(50)
);
CREATE TABLE atlas.sales
(
    vin varchar(255),
    region varchar(255),
    sales_count int,
    f4 int,
    sales_date date,
    f6 int,
    f7 int,
    f8 varchar(50),
    f9 varchar(50),
    f10 varchar(50),
    f11 varchar(50)
);
CREATE TABLE atlas.vehicle_config
(
    config_key int,
    model_year int,
    body_model_code varchar(5),
    body_model_name varchar(36),
    price_line_code varchar(3),
    price_line_name varchar(46),
    emissions_catg_code varchar(4),
    emissions_catg_name varchar(16),
    engine_code varchar(5),
    engine_name varchar(41),
    ext_color_code varchar(4),
    ext_color_name varchar(36),
    k_model_number varchar(22),
    interior_trim_id int,
    interior_trim_color varchar(36),
    transmission_type_code varchar(4),
    transmission_type_name varchar(36),
    factory_op_group_code varchar(4)
);
CREATE TABLE atlas.zip_code_lkp
(
    zip_code varchar(10),
    latitude numeric(37,15),
    longitude numeric(37,15),
    city varchar(50),
    state varchar(50),
    county varchar(50)
);
CREATE TABLE atlas.cust_dim_src
(
    cust_id int,
    cust_type varchar(20),
    gender varchar(20),
    income_group varchar(20),
    zip_code varchar(20)
);
CREATE TABLE atlas.sales_fact
(
    vin varchar(50),
    sales_count int,
    region_key int,
    dealer_id int,
    date_key varchar(10),
    config_key int,
    cust_id int
);
CREATE TABLE atlas.cars
(
    cust_id int,
    income_group int,
    gender varchar(20),
    config_key int,
    body_model_name varchar(54),
    ext_color_name varchar(60),
    engine_name varchar(60),
    transmission_type_name varchar(58),
    dealer_id int,
    dealer_name varchar(58),
    region_name varchar(26),
    state_code varchar(20),
    metro_area_name varchar(50),
    area_code int,
    date_key date
);
CREATE PROJECTION atlas.mock_dealer_src_super /*+basename(mock_dealer_src),createtype(L)*/
(
 og_name,
 new_name
)
AS
 SELECT mock_dealer_src.og_name,
        mock_dealer_src.new_name
 FROM atlas.mock_dealer_src
 ORDER BY mock_dealer_src.og_name,
          mock_dealer_src.new_name
SEGMENTED BY hash(mock_dealer_src.og_name, mock_dealer_src.new_name) ALL NODES OFFSET 0;
CREATE PROJECTION atlas.arrivals_src_super /*+basename(arrivals_src),createtype(L)*/
(
 vin,
 arrivals_count,
 region_key,
 port_key,
 date_key,
 config_key
)
AS
 SELECT arrivals_src.vin,
        arrivals_src.arrivals_count,
        arrivals_src.region_key,
        arrivals_src.port_key,
        arrivals_src.date_key,
        arrivals_src.config_key
 FROM atlas.arrivals_src
 ORDER BY arrivals_src.vin,
          arrivals_src.arrivals_count,
          arrivals_src.region_key,
          arrivals_src.port_key,
          arrivals_src.date_key,
          arrivals_src.config_key
SEGMENTED BY hash(arrivals_src.arrivals_count, arrivals_src.region_key, arrivals_src.port_key, arrivals_src.config_key, arrivals_src.date_key, arrivals_src.vin) ALL NODES OFFSET 0;
CREATE PROJECTION atlas.cust_dim_src_super /*+basename(cust_dim_src),createtype(L)*/
(
 cust_id,
 cust_type,
 gender,
 income_group,
 zip_code
)
AS
 SELECT cust_dim_src.cust_id,
        cust_dim_src.cust_type,
        cust_dim_src.gender,
        cust_dim_src.income_group,
        cust_dim_src.zip_code
 FROM atlas.cust_dim_src
 ORDER BY cust_dim_src.cust_id,
          cust_dim_src.cust_type,
          cust_dim_src.gender,
          cust_dim_src.income_group,
          cust_dim_src.zip_code
SEGMENTED BY hash(cust_dim_src.cust_id, cust_dim_src.cust_type, cust_dim_src.gender, cust_dim_src.income_group, cust_dim_src.zip_code) ALL NODES OFFSET 0;
CREATE PROJECTION atlas.date_dim_super /*+basename(date_dim),createtype(L)*/
(
 date,
 date_key,
 day_of_week_number,
 day_of_year_number,
 week_of_year_number,
 quarter_number,
 ten_day_period_number,
 sales_days,
 sales_month_date,
 end_of_calendar_month_indic,
 holiday_indic,
 ten_day_period_end_indic,
 shipments_month_end_indic
)
AS
 SELECT date_dim.date,
        date_dim.date_key,
        date_dim.day_of_week_number,
        date_dim.day_of_year_number,
        date_dim.week_of_year_number,
        date_dim.quarter_number,
        date_dim.ten_day_period_number,
        date_dim.sales_days,
        date_dim.sales_month_date,
        date_dim.end_of_calendar_month_indic,
        date_dim.holiday_indic,
        date_dim.ten_day_period_end_indic,
        date_dim.shipments_month_end_indic
 FROM atlas.date_dim
 ORDER BY date_dim.date,
          date_dim.date_key,
          date_dim.day_of_week_number,
          date_dim.day_of_year_number,
          date_dim.week_of_year_number,
          date_dim.quarter_number,
          date_dim.ten_day_period_number,
          date_dim.sales_days
SEGMENTED BY hash(date_dim.date, date_dim.day_of_week_number, date_dim.sales_days, date_dim.end_of_calendar_month_indic, date_dim.holiday_indic, date_dim.ten_day_period_end_indic, date_dim.shipments_month_end_indic, date_dim.date_key) ALL NODES OFFSET 0;
CREATE PROJECTION atlas.dealer_dim_src_super /*+basename(dealer_dim_src),createtype(L)*/
(
 dealer_id,
 dealer_name,
 address_line_1,
 address_line_2,
 city_name,
 po_box_number,
 state_code,
 zip_code,
 area_code,
 telephone_number,
 region_name,
 district_name,
 metro_area_name,
 metro_area_abbrev_name,
 area_of_dom_influence_name,
 adi_abbrev_name,
 adi_us_population_percent,
 pma_number,
 salesperson_count,
 new_car_storage_count
)
AS
 SELECT dealer_dim_src.dealer_id,
        dealer_dim_src.dealer_name,
        dealer_dim_src.address_line_1,
        dealer_dim_src.address_line_2,
        dealer_dim_src.city_name,
        dealer_dim_src.po_box_number,
        dealer_dim_src.state_code,
        dealer_dim_src.zip_code,
        dealer_dim_src.area_code,
        dealer_dim_src.telephone_number,
        dealer_dim_src.region_name,
        dealer_dim_src.district_name,
        dealer_dim_src.metro_area_name,
        dealer_dim_src.metro_area_abbrev_name,
        dealer_dim_src.area_of_dom_influence_name,
        dealer_dim_src.adi_abbrev_name,
        dealer_dim_src.adi_us_population_percent,
        dealer_dim_src.pma_number,
        dealer_dim_src.salesperson_count,
        dealer_dim_src.new_car_storage_count
 FROM atlas.dealer_dim_src
 ORDER BY dealer_dim_src.dealer_id,
          dealer_dim_src.dealer_name,
          dealer_dim_src.address_line_1,
          dealer_dim_src.address_line_2,
          dealer_dim_src.city_name,
          dealer_dim_src.po_box_number,
          dealer_dim_src.state_code,
          dealer_dim_src.zip_code
SEGMENTED BY hash(dealer_dim_src.dealer_id, dealer_dim_src.state_code, dealer_dim_src.area_code, dealer_dim_src.salesperson_count, dealer_dim_src.new_car_storage_count, dealer_dim_src.zip_code, dealer_dim_src.telephone_number, dealer_dim_src.adi_us_population_percent) ALL NODES OFFSET 0;
CREATE PROJECTION atlas.port_dim_super /*+basename(port_dim),createtype(L)*/
(
 port_id,
 port_name,
 shipping_route_code
)
AS
 SELECT port_dim.port_id,
        port_dim.port_name,
        port_dim.shipping_route_code
 FROM atlas.port_dim
 ORDER BY port_dim.port_id,
          port_dim.port_name,
          port_dim.shipping_route_code
SEGMENTED BY hash(port_dim.port_id, port_dim.shipping_route_code, port_dim.port_name) ALL NODES OFFSET 0;
CREATE PROJECTION atlas.sales_fact_super /*+basename(sales_fact),createtype(L)*/
(
 vin,
 sales_count,
 region_key,
 dealer_id,
 date_key,
 config_key,
 cust_id
)
AS
 SELECT sales_fact.vin,
        sales_fact.sales_count,
        sales_fact.region_key,
        sales_fact.dealer_id,
        sales_fact.date_key,
        sales_fact.config_key,
        sales_fact.cust_id
 FROM atlas.sales_fact
 ORDER BY sales_fact.vin,
          sales_fact.sales_count,
          sales_fact.region_key,
          sales_fact.dealer_id,
          sales_fact.date_key,
          sales_fact.config_key,
          sales_fact.cust_id
SEGMENTED BY hash(sales_fact.sales_count, sales_fact.region_key, sales_fact.dealer_id, sales_fact.config_key, sales_fact.cust_id, sales_fact.date_key, sales_fact.vin) ALL NODES OFFSET 0;
CREATE PROJECTION atlas.vehicle_config_super /*+basename(vehicle_config),createtype(L)*/
(
 config_key,
 model_year,
 body_model_code,
 body_model_name,
 price_line_code,
 price_line_name,
 emissions_catg_code,
 emissions_catg_name,
 engine_code,
 engine_name,
 ext_color_code,
 ext_color_name,
 k_model_number,
 interior_trim_id,
 interior_trim_color,
 transmission_type_code,
 transmission_type_name,
 factory_op_group_code
)
AS
 SELECT vehicle_config.config_key,
        vehicle_config.model_year,
        vehicle_config.body_model_code,
        vehicle_config.body_model_name,
        vehicle_config.price_line_code,
        vehicle_config.price_line_name,
        vehicle_config.emissions_catg_code,
        vehicle_config.emissions_catg_name,
        vehicle_config.engine_code,
        vehicle_config.engine_name,
        vehicle_config.ext_color_code,
        vehicle_config.ext_color_name,
        vehicle_config.k_model_number,
        vehicle_config.interior_trim_id,
        vehicle_config.interior_trim_color,
        vehicle_config.transmission_type_code,
        vehicle_config.transmission_type_name,
        vehicle_config.factory_op_group_code
 FROM atlas.vehicle_config
 ORDER BY vehicle_config.config_key,
          vehicle_config.model_year,
          vehicle_config.body_model_code,
          vehicle_config.body_model_name,
          vehicle_config.price_line_code,
          vehicle_config.price_line_name,
          vehicle_config.emissions_catg_code,
          vehicle_config.emissions_catg_name
SEGMENTED BY hash(vehicle_config.config_key, vehicle_config.model_year, vehicle_config.body_model_code, vehicle_config.price_line_code, vehicle_config.emissions_catg_code, vehicle_config.engine_code, vehicle_config.ext_color_code, vehicle_config.interior_trim_id) ALL NODES OFFSET 0;
CREATE PROJECTION atlas.zip_code_lkp_super /*+basename(zip_code_lkp),createtype(L)*/
(
 zip_code,
 latitude,
 longitude,
 city,
 state,
 county
)
AS
 SELECT zip_code_lkp.zip_code,
        zip_code_lkp.latitude,
        zip_code_lkp.longitude,
        zip_code_lkp.city,
        zip_code_lkp.state,
        zip_code_lkp.county
 FROM atlas.zip_code_lkp
 ORDER BY zip_code_lkp.zip_code,
          zip_code_lkp.latitude,
          zip_code_lkp.longitude,
          zip_code_lkp.city,
          zip_code_lkp.state,
          zip_code_lkp.county
SEGMENTED BY hash(zip_code_lkp.zip_code, zip_code_lkp.latitude, zip_code_lkp.longitude, zip_code_lkp.city, zip_code_lkp.state, zip_code_lkp.county) ALL NODES OFFSET 0;
CREATE PROJECTION atlas.cars_super /*+basename(cars),createtype(L)*/
(
 cust_id,
 income_group,
 gender,
 config_key,
 body_model_name,
 ext_color_name,
 engine_name,
 transmission_type_name,
 dealer_id,
 dealer_name,
 region_name,
 state_code,
 metro_area_name,
 area_code,
 date_key
)
AS
 SELECT cars.cust_id,
        cars.income_group,
        cars.gender,
        cars.config_key,
        cars.body_model_name,
        cars.ext_color_name,
        cars.engine_name,
        cars.transmission_type_name,
        cars.dealer_id,
        cars.dealer_name,
        cars.region_name,
        cars.state_code,
        cars.metro_area_name,
        cars.area_code,
        cars.date_key
 FROM atlas.cars
 ORDER BY cars.cust_id,
          cars.income_group,
          cars.gender,
          cars.config_key,
          cars.body_model_name,
          cars.ext_color_name,
          cars.engine_name,
          cars.transmission_type_name
SEGMENTED BY hash(cars.cust_id, cars.income_group, cars.config_key, cars.dealer_id, cars.area_code, cars.date_key, cars.gender, cars.state_code) ALL NODES OFFSET 0;
CREATE  VIEW atlas.star_one AS
 SELECT s.cust_id,
        c.income_group,
        c.gender,
        s.config_key,
        v.body_model_name,
        v.ext_color_name,
        v.engine_name,
        v.transmission_type_name,
        s.dealer_id,
        dm.new_name AS dealer_name,
        dd.region_name,
        dd.state_code,
        dd.metro_area_name,
        dd.area_code,
        add_months((s.date_key)::date, 240) AS date_key
 FROM ((((atlas.sales_fact s JOIN atlas.cust_dim_src c ON ((c.cust_id = s.cust_id))) JOIN atlas.vehicle_config v ON ((v.config_key = s.config_key))) JOIN atlas.dealer_dim_src dd ON ((dd.dealer_id = s.dealer_id))) JOIN atlas.mock_dealer_src dm ON ((dm.og_name = dd.dealer_name)));
-- copy click  
-- from local '/Users/mbowen/oldcode/DEMOS/click/data/seed/xaafact_denorm.txt0000_part_01.txt'

copy click.main_fact

-- (

-- Date_Key ,
-- 	Session_Key ,
-- 	Customer_Key ,
-- 	ClientIP_Key ,
-- 	ServerIP_Key ,
-- 	UserAgent_Key ,
-- 	Page_Key ,
-- 	Referrer_Page_ID ,
-- 	CreditCard_Key ,
-- 	Num_Errors ,
-- 	KBytes_Downloaded ,
-- 	Browsing_Time 
-- )


from local '/Users/mbowen/oldcode/DEMOS/click/data/seed/xaafact_denorm.txt0000_part_01.txt'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0

;
select count(*) from atlas.main_report;
select count(*) from atlas.cust_sales_src;
select count(*) from atlas.cust_sales_src;
COPY  atlas.cust_sales_src FROM LOCAL
'/Users/mbowen/oldcode/DEMOS/edw-wrkspc/data/seed/cust_sales.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
select * from atlas.star_one;
copy atlas.main_report

(
    vin   ,
region_key  ,
sales_count  ,
date_key   ,
zip, 
income_group,
cust_type_desc,
gender,
income,

dealer_name  ,
dealer_city,
dealer_state,
dealer_zip ,
dealer_area_code ,
region_name  ,
district_name  ,
metro_area_name  ,
metro_area_abbrev_name  ,
area_of_dom_influence_name  ,
adi_abbrev_name  ,
adi_us_population_percent  ,
pma_number  ,
salesperson_count  ,
new_car_storage_count  ,


model_year  ,
body_model_code   ,
body_model_name   ,
price_line_code   ,
price_line_name   ,
emissions_catg_code   ,
emissions_catg_name   ,
engine_code   ,
engine_name   ,
ext_color_code   ,
ext_color_name   ,
k_model_number   ,
interior_trim_id  ,
interior_trim_color   ,
transmission_type_code   ,
transmission_type_name   ,
factory_op_group_code    
)

  
from 's3://full360demo.elasticbi.com/cars/2014-04-11_export_main_report.txt'
credentials 'aws_access_key_id=AKIAJXYSWVTW5KSDU2SQ;aws_secret_access_key=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'
delimiter '|'  ; 


commit;
SELECT EXPORT_OBJECTS('','atlas',true);
COPY  atlas.cust_dim_src FROM LOCAL
'/Users/mbowen/oldcode/DEMOS/edw-wrkspc/data/seed/cust_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.sales_fact FROM LOCAL
'/Users/mbowen/oldcode/DEMOS/edw-wrkspc/data/seed/sales_fact.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.vehicle_config FROM LOCAL
'/Users/mbowen/oldcode/DEMOS/edw-wrkspc/data/seed/vehicle_config.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.dealer_dim_src FROM LOCAL
'/Users/mbowen/oldcode/DEMOS/edw-wrkspc/data/seed/dealer_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.mock_dealer_src FROM LOCAL
'/Users/mbowen/oldcode/DEMOS/edw-wrkspc/data/seed/mock_dealers.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
select count(*) from atlas.star_one;
set role pseudosuperuser;
set role dbadmin;
set role dbadmin;
ALTER SESSION SET UDPARAMETER FOR awslib aws_id='AKIAJ5YN3MOGKRZSHKVA';
ALTER SESSION SET UDPARAMETER FOR awslib aws_secret='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';
ALTER SESSION SET UDPARAMETER FOR awslib aws_region='us-west-2';
ALTER SESSION SET UDPARAMETER FOR awslib aws_id='AKIAJ5YN3MOGKRZSHKVA';
ALTER SESSION SET UDPARAMETER FOR awslib aws_id='AKIAJ5YN3MOGKRZSHKVA';
SHOW SESSION UDPARAMETER ALL;
ALTER SESSION SET UDPARAMETER FOR awslib aws_id='AKIAJ5YN3MOGKRZSHKVA';
select AWS_SET_CONFIG('aws_id' , 'AKIAJ5YN3MOGKRZSHKVA');
select AWS_SET_CONFIG('aws_secret', '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');
select AWS_SET_CONFIG('aws_region', 'us-west-2');
CREATE LOCATION 's3://demo-data.full360.com' SHARED USAGE 'USER' LABEL 's3south';
set role pseudosuperuser;
set role dbadmin;
CREATE LOCATION 's3://demo-data.full360.com' SHARED USAGE 'USER' LABEL 's3south';
GRANT READ ON LOCATION 's3://demo-data.full360.com' TO S3Users;
GRANT READ ON LOCATION 's3://demo-data.full360.com' TO vertica_admin;
COPY  atlas.arrivals_src FROM LOCAL
'/Users/mbowen/devcode/F360/edw-workspace/atlas-data/seed/arrivals.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.zip_code_lkp FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/zip_code_lkp.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.arrivals_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/arrivals.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.cust_dim_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/cust_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.date_dim FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/date_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.dealer_dim_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/dealer_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.port_dim FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/port_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.sales_fact FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/sales_fact.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.vehicle_config FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/vehicle_config.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.zip_code_lkp FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/zip_code_lkp.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
copy arms.arms_crew_schedule_kvp
from local '~/Desktop/amrs_data/9a775cc7.crew_schedule_kvp'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_kvp
from local '~/Desktop/amrs_data/9a775cc7.crew_schedule_kvp.csv'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_kvp
from local '~/Desktop/arms_data/9a775cc7.crew_schedule_kvp.csv'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_kvp
from local '/Users/mbowen/Desktop/arms_data/9a775cc7.crew_schedule_kvp'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_kvp
from local '/Volumes/Sequoia/arms_data/9a775cc7.crew_schedule_kvp'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_kvp
from local '/Volumes/Sequoia/arms_data/crew_schedule_kvp'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.crew_schedule_stg_flex_tmp_keys
from local '/Volumes/Sequoia/arms_data/crew_schedule_stg_flex_tmp_keys'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_stg_flex_tmp_keys
from local '/Volumes/Sequoia/arms_data/crew_schedule_stg_flex_tmp_keys'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_stg_flex_tmp_keys
from local '/Volumes/Sequoia/arms_data/crew_schedule_stg_flex_tmp_keys.txt'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_stg_flex_tmp_keys
from local '/Volumes/Sequoia/arms_data/crew_schedule_stg_flex_tmp_keys.txt'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_kvp
from local '/Volumes/Sequoia/arms_data/crew_schedule_kvp.txt'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_fact
from local '/Volumes/Sequoia/arms_data/crew_schedule_fact.txt'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_operating_categories
from local '/Volumes/Sequoia/arms_data/crew_operating_categories.txt'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_fact
from local '/Volumes/Sequoia/arms_data/crew_schedule_fact.txt'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.crew_operating_categories
from local '/Volumes/Sequoia/arms_data/crew_operating_categories.txt'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;

copy arms.arms_crew_schedule_parameters
from local '/Volumes/Sequoia/arms_data/crew_schedule_parameters.txt'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;

copy arms.arms_crew_schedule_stg_flex_tmp
from local '/Volumes/Sequoia/arms_data/crew_schedule_stg_flex_tmp.txt'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_stg_flex_tmp
from local '/Volumes/Sequoia/arms_data/crew_schedule_stg_flex_tmp.txt'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
copy arms.arms_crew_schedule_tmp
from local '/Volumes/Sequoia/arms_data/crew_schedule_tmp.txt'
WITH DELIMITER '|' ENCLOSED BY '"' REJECTMAX 0;
COPY  atlas.arrivals_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/arrivals.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.cust_dim_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/cust_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.date_dim FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/date_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.dealer_dim_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/dealer_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.port_dim FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/port_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.sales_fact FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/sales_fact.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.vehicle_config FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/vehicle_config.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.zip_code_lkp FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/zip_code_lkp.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
-- beer_ddl.sql
-- this is code to generate the full dataset and supporting tables for the base billion row beer demo.
-- check to make sure that the s3 sources are intact. checksums to follow.


-- sequences
create schema if not exists beer;
drop sequence if exists beer.country_id;
create sequence beer.country_id cache 1;
-- main tables

create table beer.events (
	beer_event_id varchar(80),
	drinking_session_id varchar(80),
	user_id varchar(80),
	beer varchar(80),
	schmooziest_buzzword varchar(80),
	best_thing_said varchar(80),
	worst_thing_said varchar(80),
	drunken_babble varchar(80),
	likes integer,
	beer_opened_time timestamp
);
create table beer.adj_drinkers (
	id integer,
	user_id char(32),
	first_name varchar(32),
	last_name varchar(32),
	company varchar(64),
	school varchar(128),
	superhero_power varchar(64),
	good_tipper boolean,
	favorite_instrument varchar(64),
	zipcode char(5)
);
CREATE TABLE beer.drinkers (
	id Integer,
	user_id Char(32),
	first_name Varchar(32),
	last_name Varchar(32),
	company Varchar(64),
	school Varchar(128),
	superhero_power Varchar(64),
	good_tipper Boolean,
	favorite_instrument Varchar(64),
	zip_code Char(5)
);
-- supporting tables

CREATE TABLE beer.beer_type (
	Beer Varchar(50),
	beer_type Varchar(25),
	alcohol Numeric(25)
);
CREATE TABLE beer.beer_hours (
	beer_opened_time Timestamp,
	beer_hour Numeric(36)
);
CREATE TABLE beer.zipcode (
	zipcode Char(5),
	Place_Name Varchar(50),
	State Varchar(25),
	State_Abbreviation Varchar(5),
	County Varchar(50),
	Latitude Varchar(10),
	Longitude Varchar(10)
);
CREATE TABLE beer.zsharp (
	bad_code Char(5),
	key Varchar(5),
	good_code Char(5)
);
--
-- creation of zsharp



insert into beer.country_lkp

select
	distinct 0 ,
   country,
   1,1,0, sysdate()
   
   from beer.transactions;
SELECT
	
	sf.sales_count,
	rd.region_name,
	dealer_id,
	date_key,
	config_key,
	cust_id
FROM
	atlas.atlas.sales_fact sf
	join atlas.atlas.region_dim rd on (sf.region_key = rd.region_key );
SELECT
	
	sf.sales_count,
	rd.region_name,
	dealer_id,
	date_key,
	config_key,
	cust_id
FROM
	atlas.sales_fact sf
	join atlas.region_dim rd on (sf.region_key = rd.region_key );
select * from region_dim;
select * from atlas.region_dim;
COPY  atlas.dealer_dim_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/dealer_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
truncate table atlas.dealer_dim;
truncate table atlas.dealer_dim_src;
COPY  atlas.dealer_dim_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/dealer_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.region_dim FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/region_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
SELECT
	
	sf.sales_count,
	rd.region_name,
	dealer_id,
	date_key,
	config_key,
	cust_id
FROM
	atlas.sales_fact sf
	join atlas.region_dim rd on (sf.region_key = rd.region_key );
SELECT
	
	sf.sales_count,
	dealer_id,
	date_key,
	config_key,
	dd.*
	cust_id
FROM
	atlas.sales_fact sf
	join atlas.dealer_dim_src dd on (sf.dealer_id = dd.dealer_id );
SELECT
	
	sf.sales_count,
	dealer_id,
	date_key,
	config_key,
	dd.*
	cust_id
FROM
	atlas.sales_fact sf
	join atlas.dealer_dim_src dd on (sf.dealer_id = dd.dealer_id );
SELECT
	
	sf.sales_count,
	sf.date_key,
	sf.config_key,
	dd.*,
	cust_id
FROM
	atlas.sales_fact sf
	join atlas.dealer_dim_src dd on (sf.dealer_id = dd.dealer_id );

SELECT
	
	sf.sales_count,
	sf.date_key,
	sf.config_key,
	dd.dealer_name,
	dd.metro_area_name,
	dd.city_name,
	dd.state_code,
	dd.region_name,
	
	cust_id
FROM
	atlas.sales_fact sf
	join atlas.dealer_dim_src dd on (sf.dealer_id = dd.dealer_id );
CREATE TABLE atlas.atlas.mock_dealer
(old_name varchar(50),
new_name varchar(50));
COPY  atlas.mock_dealer FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/mock_dealers.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
select * from orddata.orddcm_data_model
limit 500;
select * from orddata.orddcm_data_model
limit 500;
CREATE TABLE atlas.drug.crtx_src
("Manufacturer Name" VARCHAR(250),
"NDC Number" VARCHAR(25),
"Drug Product Description" VARCHAR(250),
"Date Introduced to Market" VARCHAR(25),
"WAC at Introduction" VARCHAR(25),
"Marketing/Pricing Plan Description" VARCHAR(25),
"Marketing/Pricing Plan Non-Public Indicator" VARCHAR(25),
"Estimated Number of Patients" VARCHAR(25),
"Breakthrough Therapy Indicator" VARCHAR(25),
"Priority Review Indicator" VARCHAR(25),
"Acquisition Date" VARCHAR(25),
"Acquisition Price" VARCHAR(25),
"Acquisition Price Non-Public Indicator" VARCHAR(25),
"Acquisition Price Comment" VARCHAR(1000),
"General Comments" VARCHAR(1000),
"Supporting Documents" VARCHAR(100));
CREATE TABLE atlas.new_crtx_src
("Manufacturer Name" VARCHAR(100),
"NDC Number" Varchar(25),
"Drug Product Description" VARCHAR(500),
"Date Introduced to Market" DATE,
"WAC at Introduction" DECIMAL,
"Estimated Number of Patients" VARCHAR(25),
"Breakthrough Therapy Indicator" VARCHAR(25),
"Acquisition Date" VARCHAR(25),
"Acquisition Price" VARCHAR(25),
"Acquisition Price Non-Public Indicator" VARCHAR(25));
CREATE TABLE atlas.drug.blah
(man VARCHAR(100),
ncd INTEGER,
"desc" VARCHAR(750),
date_market DATE,
wac_intro DECIMAL,
patient_ct VARCHAR(25),
break VARCHAR(25),
acq_date Date,
acq_price numeric(25),
acq_indicator VARCHAR(25));
CREATE TABLE atlas.drug.ctrx2_src
(man VARCHAR(100),
ncd INTEGER,
"desc" VARCHAR(750),
date_market DATE,
wac_intro DECIMAL,
patient_ct VARCHAR(25),
break VARCHAR(25),
acq_date Date,
acq_price numeric(25),
acq_indicator VARCHAR(25));
select * from nodes;
create schema if not exists ehr;
drop table if exists ehr.accounts_src;
create table ehr.accounts_src (

    primary_icd_diagnosis_code varchar(50),
    admit_icd_diangosis_code varchar(50),
    hospital_account_id varchar(50),
    primary_icd_procedure_code varchar(50),
    primary_payor_id varchar(50),
    total_account_balance varchar(50),
    total_account_adjustment varchar(50),
    total_account_charge varchar(50),
    total_account_payment varchar(50),
    hrrp_condition varchar(50)
);
drop table if exists ehr.departments_src;
create table ehr.departments_src (
    department_name varchar(50),
    department_id varchar(50),
    hospital_id varchar(50),
    specialty_description varchar(50)
);
drop table if exists ehr.encounters_src;
create table ehr.encounters_src (

    master_patient_id varchar(50),
    patient_encounter_id varchar(50),
    patient_admission_datetime varchar(50),
    patient_los varchar(50),
    patient_los_bucket varchar(50),
    patient_los_bucket_sort varchar(50),
    admitting_provider_id varchar(50),
    discharging_provider_id varchar(50),
    attending_provider_id_ varchar(50),
    patient_discharge_datetime varchar(50),
    department_id varchar(50),
    hospital_account_id varchar(50),
    patient_inicu_flag varchar(50),
    patient_admitted_flag varchar(50),
    patient_readmission_flag varchar(50),
    patient_inpatient_readmission_flag varchar(50)
);
drop table if exists ehr.patients_src;
create table ehr.patients_src (
    master_patient_id varchar(50),
    patient_address_number varchar(50),
    patient_address_street varchar(50),
    patient_address_full varchar(50),
    patient_city varchar(50),
    patient_zip_code varchar(50),
    patient_county varchar(50),
    patient_state varchar(50),
    patient_country varchar(50),
    patient_latitude varchar(50),
    patient_longitude varchar(50),
    patient_name varchar(50),
    patient_gender varchar(50),
    patient_lace_score varchar(50),
    patient_geography_loaded varchar(50),
    patient_dob varchar(50),
    patient_marital_status varchar(50),
    patient_primary_language varchar(50),
    patient_is_citizen_flag varchar(50),
    patient_is_deceased_flag varchar(50),
    patient_pcp_type varchar(50),
    patient_pcp_id varchar(50),
    patient_ethnicity varchar(50)
);
drop table if not exists ehr.hosptitals_src;
drop table if exists ehr.hosptitals_src;
create table ehr.hospitals_src (
    hospital_id  varchar(50),
    hospital_name  varchar(50),
    hospital_address_number  varchar(50),
    hospital_address_street  varchar(50),
    hospital_address_full  varchar(50),
    hospital_city  varchar(50),
    hospital_zip_code  varchar(50),
    hospital_county  varchar(50),
    hospital_state  varchar(50),
    hospital_country  varchar(50),
    hospital_latitude  varchar(50),
    hospital_longitude varchar(50)
);
set role pseudosuperuser;
COPY  survey.general_info_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/datasets/drug/survey/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.hcahps_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/datasets/drug/survey/survey_hcahps.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.hcahps_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/datasets/drug/survey/survey_hcahps.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 0;
COPY  survey.opioid_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/datasets/drug/survey/survey_opioid_src.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
connect to vertica atlas user vertica_admin password 'manager77' on 'edw-prod-ksgm8p7qd6p8.elasticdw.com', 5433;
create schema if not exists atlas;
-- drop table if exists atlas.mock_dealer
CREATE TABLE atlas.mock_dealer
(old_name varchar(50),
new_name varchar(50));
--drop table if exists atlas.arrivals_src;
create table atlas.arrivals_src (
  --source_file_id    integer,
  vin               varchar(50),
  arrivals_count    integer,
  region_key        integer,
  port_key          integer,
  date_key          varchar(20),
  config_key        integer

);
--drop table if exists atlas.control;
create table atlas.control (
  source_file_id    integer,
  source_key        varchar(20),
  source_file_name  varchar(1024),
  source_system     varchar(255),
  sourc_file_run_date  date,
  message           varchar(255),
  file_size         varchar(20),
  data_from_ts      timestamp,
  data_to_ts        timestamp,
  job_start_ts      timestamp,
  job_end_ts        timestamp,
  update_ts         timestamp

);
-- drop table if exists atlas.cust_dim_src;
create table atlas.cust_dim_src (
  --source_file_id    integer,
  cust_id           integer,
  cust_type         varchar(20),
  gender            varchar(20),
  income_group      varchar(20),
  zip_code          varchar(20)
);
create table atlas.cust_dim (
  source_file_id    integer,
  cust_id           integer,
  cust_type         varchar(20),
  gender            varchar(20),
  income_group      varchar(20),
  zip_code          varchar(20),
  file_size         varchar(20),
  pii_link          integer,
  has_pii           boolean
);
CREATE TABLE atlas.cust_sales_src
(
  --source_file_id integer,
  vin  varchar (50) ,
  region  varchar (255) ,
  count numeric ,
  dealer integer ,
  sale_date  varchar (255) ,
  vehicle integer ,
  cust_id integer ,
  cust_type  varchar (20) ,
  gender  varchar (20) ,
  income_group  varchar (20) ,
  zip  varchar (20)
);
CREATE TABLE atlas.date_dim_src (
    --source_file_id integer,
    date datetime ,
    date_key  varchar (10) ,
    day_of_week_number integer ,
    day_of_year_number numeric ,
    week_of_year_number numeric ,
    quarter_number numeric ,
    ten_day_period_number numeric ,
    sales_days integer ,
    sales_month_date  varchar (10) ,
    end_of_calendar_month_indic  varchar (1) ,
    holiday_indic  varchar (1) ,
    ten_day_period_end_indic  varchar (1) ,
    shipments_month_end_indic  varchar (1)
);
CREATE TABLE atlas.dealer_dim_src (

    --source_file_id integer,
    dealer_id  integer,
    dealer_name  varchar(50),
    address_line_1  varchar(50),
    address_line_2  varchar(50),
    city_name  varchar(50),
    po_box_number  varchar(50),
    state_code  varchar(5),
    zip_code  varchar(10),
    area_code  varchar(5),
    telephone_number  varchar(10),
    region_name  varchar(50),
    district_name  varchar(50),
    metro_area_name  varchar(50),
    metro_area_abbrev_name  varchar(20),
    area_of_dom_influence_name  varchar(50),
    adi_abbrev_name  varchar(20),
    adi_us_population_percent  numeric,
    pma_number  varchar(20),
    salesperson_count  integer,
    new_car_storage_count  integer
);
CREATE TABLE atlas.big_report
(
   vin                         Varchar(50),
   region_key                  Integer,
   sales_count                 Integer,
   date_key                    Varchar(10),
   zip                         Varchar(20),
   income_group                Varchar(20),
   cust_type_desc              Varchar(10),
   gender                      Varchar(14),
   income                      Varchar(14),
   dealer_name                 Varchar(50),
   dealer_city            Varchar(50),
   dealer_state          Varchar(5),
   dealer_zip             Varchar(10),
   dealer_area_code            Varchar(5),
   region_name                 Varchar(50),
   district_name               Varchar(50),
   metro_area_name             Varchar(50),
   metro_area_abbrev_name      Varchar(20),
   area_of_dom_influence_name  Varchar(50),
   adi_abbrev_name             Varchar(20),
   adi_us_population_percent   Numeric(37,15),
   pma_number                  Varchar(20),
   salesperson_count           Integer,
   new_car_storage_count       Integer,
   model_year                  Integer,
   body_model_code             Varchar(5),
   body_model_name             Varchar(50),
   price_line_code             Varchar(10),
   price_line_name             Varchar(46),
   emissions_catg_code         Varchar(10),
   emissions_catg_name         Varchar(16),
   engine_code                 Varchar(5),
   engine_name                 Varchar(20),
   ext_color_code              Varchar(10),
   ext_color_name              Varchar(50),
   k_model_number              Varchar(22),
   interior_trim_id            Integer,
   interior_trim_color         Varchar(50),
   transmission_type_code      Varchar(10),
   transmission_type_name      Varchar(50),
   factory_op_group_code       Varchar(10)
);
CREATE TABLE atlas.date_dim (
    --source_file_id integer,
    date datetime ,
    date_key  varchar (10) ,
    day_of_week_number integer ,
    day_of_year_number numeric ,
    week_of_year_number numeric ,
    quarter_number numeric ,
    ten_day_period_number numeric ,
    sales_days integer ,
    sales_month_date  varchar (10) ,
    end_of_calendar_month_indic  varchar (1) ,
    holiday_indic  varchar (1) ,
    ten_day_period_end_indic  varchar (1) ,
    shipments_month_end_indic  varchar (1)
);
CREATE TABLE atlas.port_dim (

    --source_file_id    integer,
    port_id           integer ,
    port_name         varchar(30) ,
    shipping_route_code  varchar (1)
);
CREATE TABLE atlas.region_dim (

    --source_file_id integer,
    region_key integer ,
    org_unit_code  varchar (10) ,
    region_name  varchar (50)
);
CREATE TABLE atlas.sales
(
    --source_file_id integer,
    vin  varchar (255) ,
    region  varchar (255) ,
    sales_count integer ,
    f4 integer ,
    sales_date  date ,
    f6 integer ,
    f7 integer ,
    f8 varchar(50),
    f9 varchar(50),
    f10 varchar(50),
    f11 varchar(50)

);
CREATE TABLE atlas.sales_fact
(
    --source_file_id integer,
    -- id integer ,
    vin  varchar (50) ,
    sales_count integer ,
    region_key integer ,
    dealer_id integer ,
    date_key  varchar (10) ,
    config_key integer,
    cust_id  integer
);
CREATE TABLE atlas.vehicle_config
(
    --source_file_id integer,
    config_key integer ,
    model_year integer ,
    body_model_code  varchar(5) ,
    body_model_name  varchar(36) ,
    price_line_code  varchar(3) ,
    price_line_name  varchar(46) ,
    emissions_catg_code  varchar(4) ,
    emissions_catg_name  varchar(16) ,
    engine_code  varchar(5) ,
    engine_name  varchar(41) ,
    ext_color_code  varchar(4) ,
    ext_color_name  varchar(36) ,
    k_model_number  varchar(22) ,
    interior_trim_id integer ,
    interior_trim_color  varchar(36) ,
    transmission_type_code  varchar(4) ,
    transmission_type_name  varchar(36) ,
    factory_op_group_code  varchar(4)
);
CREATE TABLE atlas.zip_code_lkp
(
    --source_file_id    integer,
    zip_code          varchar(10) ,
    latitude          numeric,
    longitude         numeric,
    city              varchar(50) ,
    state             varchar(50) ,
    county            varchar(50)
);
COPY  atlas.arrivals_src FROM
VERTICA atlas.atlas.arrivals_src;
COPY  atlas.arrivals_src FROM
VERTICA atlas.arrivals_src;

COPY atlas.arrivals_src FROM
VERTICA atlas.atlas.arrivals_src;
set role pseudosuperuser;
ALTER SESSION SET AWSAuth = 'ASIAXXG2IUARE7C56YJM:E/Xus0W660OM3CSvD8Mv/SfHU6Eird8xgnk9UY9B';
ALTER SESSION SET AWSSessionToken = 'IQoJb3JpZ2luX2VjEKL//////////wEaCXVzLXdlc3QtMiJHMEUCIQCF8Ja1UWmywn4lloBHyqc22M+dyNgCKA+TxOcqJijH4gIgf2KtoJGTpTbICkQ7K+BAqx0NAyMsNYuMULok9hJyHEUq9AEI2///////////ARACGgw1MzA4ODYyMDU0NzQiDEoSVSuhpd/N+C9NhSrIAXxQ2NmwDqy/el7xote6mxFuR1f4DNqdzJBfy2Eq+auNxnHIJmomgrMGnUJwWlgdOU18xXwot3zSmwJJbUyjGEu1tkDGEayVENH/QxGyfncRx+dYi9r/i3HCkar1p38UebdcZ06gKBB3Xpdp/CjulGt1cucmcdpOM+5GVOxJR4jxSuOdBYiOdIf7WVsVwFhtp5Faz0WKE+9rDOX2QWst/7+9heamAmuU0lcyicnRcVkUQe1Qwu6pZdW1wrYu4WGVEPdWgdhNU/XPMMbVuYkGOpgBoBkdmBva14e+alyNdmHk2S6pzhrC3T4Vw+lJwRI7KXiC+U39hB/j7+7+iAyAVqhqUzu/xsCEljWJ2cLPEVXlLaGePW1Jfkew7xYL/tzhFNvIJ4J8VY7hoxn28BSDQBl3pB7gjAqLwGCGx17cDgN7qRueB6sZr3C8A8rLLND3f7HqorPZunciSSoz7MM2HnV4C6yAg2GQHOs=';
COPY  atlas.arrivals_src FROM
's3://demo-data.full360.com/edw-atlas/arrivals.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
SHOW SESSION UDPARAMETER ALL;
COPY  atlas.cust_dim_src FROM
's3://demo-data.full360.com/edw-atlas/cust_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.date_dim FROM
's3://demo-data.full360.com/edw-atlas/date_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.dealer_dim_src FROM
's3://demo-data.full360.com/edw-atlas/dealer_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.port_dim FROM
's3://demo-data.full360.com/edw-atlas/port_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.sales_fact FROM
's3://demo-data.full360.com/edw-atlas/sales_fact.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.vehicle_config FROM
's3://demo-data.full360.com/edw-atlas/vehicle_config.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.zip_code_lkp FROM
's3://demo-data.full360.com/edw-atlas/zip_code_lkp.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
create schema if not exists click;
drop table if exists click.main_fact;
create table click.main_fact (
  click_date    date,
  cust_name   varchar(100),
  cust_email  varchar(100),
  cust_age    integer,
  cust_sex    varchar(5),
  cust_num    integer,
  cust_city   varchar(50),
  cust_state  varchar(50),
  cust_country  varchar(25),
  site_url      varchar(200),
  search_key      varchar(50),
  search_engine    varchar(50),
  clicks       integer
);
COPY  click.main_fact FROM
's3://demo-data.full360.com.s3.us-west-2.amazonaws.com/edw-click/xaafact_denorm.txt0000_part_01.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  click.main_fact FROM
's3://demo-data.full360.com/edw-click/xaafact_denorm.txt0000_part_01.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  click.main_fact FROM
's3://demo-data.full360.com/edw-click/xaa.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  click.main_fact FROM
's3://demo-data.full360.com/edw-click/xac.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;

COPY  click.main_fact FROM
's3://demo-data.full360.com/edw-click/xad.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
select count(*) from click.main_fact;
CREATE SCHEMA if not exists beer;
CREATE SEQUENCE beer.country_id  CACHE      1;
CREATE TABLE beer.events
(
    beer_event_id varchar(80),
    drinking_session_id varchar(80),
    user_id varchar(80),
    beer varchar(80),
    schmooziest_buzzword varchar(80),
    best_thing_said varchar(80),
    worst_thing_said varchar(80),
    drunken_babble varchar(80),
    likes int,
    beer_opened_time timestamp
);
CREATE TABLE beer.adj_drinkers
(
    id int,
    user_id char(32),
    first_name varchar(32),
    last_name varchar(32),
    company varchar(64),
    school varchar(128),
    superhero_power varchar(64),
    good_tipper boolean,
    favorite_instrument varchar(64),
    zipcode char(5)
);
CREATE TABLE beer.drinkers
(
    id int,
    user_id char(32),
    first_name varchar(32),
    last_name varchar(32),
    company varchar(64),
    school varchar(128),
    superhero_power varchar(64),
    good_tipper boolean,
    favorite_instrument varchar(64),
    zip_code char(5)
);
CREATE TABLE beer.beer_type
(
    Beer varchar(50),
    beer_type varchar(25),
    alcohol numeric(25,0)
);
CREATE TABLE beer.beer_hours
(
    beer_opened_time timestamp,
    beer_hour numeric(36,0)
);
CREATE TABLE beer.zipcode
(
    zipcode char(5),
    Place_Name varchar(50),
    State varchar(25),
    State_Abbreviation varchar(5),
    County varchar(50),
    Latitude varchar(10),
    Longitude varchar(10)
);
CREATE TABLE beer.zsharp
(
    bad_code char(5),
    key varchar(5),
    good_code char(5)
);
CREATE SCHEMA if not exists ehr;
drop table if exists ehr.provider_info_src;
create table ehr.provider_info_src (
provider_identification_number  varchar(50),
first_name  varchar(50),
middle_name  varchar(50),
last_name  varchar(50),
salutation  varchar(50),
provider_rank  varchar(50),
degree  varchar(50),
tin_format  varchar(50),
taxid_number  varchar(50),
prov_type_description  varchar(50),
prov_type  varchar(50),
accreditation  varchar(50),
specialty  varchar(50),
board_certification  varchar(50),
lang_nm  varchar(50),
lic_st_abr  varchar(50),
lic_type_nm  varchar(50),
lic_no  varchar(50),
lic_exprtn_dt  varchar(50),
national_provider_identification_no  varchar(50),
admin_priv1  varchar(50),
hospital_name  varchar(50),
serv_loc_line1  varchar(50),
serv_loc_line2  varchar(50),
city  varchar(50),
state  varchar(50),
zip  varchar(50),
phone  varchar(50),
fax  varchar(50),
email  varchar(50),
product  varchar(50),
network  varchar(50)
);
CREATE TABLE ehr.accounts_src
(
    primary_icd_diagnosis_code varchar(50),
    admit_icd_diangosis_code varchar(50),
    hospital_account_id varchar(50),
    primary_icd_procedure_code varchar(50),
    primary_payor_id varchar(50),
    total_account_balance varchar(50),
    total_account_adjustment varchar(50),
    total_account_charge varchar(50),
    total_account_payment varchar(50),
    hrrp_condition varchar(50)
);
CREATE TABLE ehr.departments_src
(
    department_name varchar(50),
    department_id varchar(50),
    hospital_id varchar(50),
    specialty_description varchar(50)
);
CREATE TABLE ehr.encounters_src
(
    master_patient_id varchar(50),
    patient_encounter_id varchar(50),
    patient_admission_datetime varchar(50),
    patient_los varchar(50),
    patient_los_bucket varchar(50),
    patient_los_bucket_sort varchar(50),
    admitting_provider_id varchar(50),
    discharging_provider_id varchar(50),
    attending_provider_id_ varchar(50),
    patient_discharge_datetime varchar(50),
    department_id varchar(50),
    hospital_account_id varchar(50),
    patient_inicu_flag varchar(50),
    patient_admitted_flag varchar(50),
    patient_readmission_flag varchar(50),
    patient_inpatient_readmission_flag varchar(50)
);
CREATE TABLE ehr.patients_src
(
    master_patient_id varchar(50),
    patient_address_number varchar(50),
    patient_address_street varchar(50),
    patient_address_full varchar(50),
    patient_city varchar(50),
    patient_zip_code varchar(50),
    patient_county varchar(50),
    patient_state varchar(50),
    patient_country varchar(50),
    patient_latitude varchar(50),
    patient_longitude varchar(50),
    patient_name varchar(50),
    patient_gender varchar(50),
    patient_lace_score varchar(50),
    patient_geography_loaded varchar(50),
    patient_dob varchar(50),
    patient_marital_status varchar(50),
    patient_primary_language varchar(50),
    patient_is_citizen_flag varchar(50),
    patient_is_deceased_flag varchar(50),
    patient_pcp_type varchar(50),
    patient_pcp_id varchar(50),
    patient_ethnicity varchar(50)
);
CREATE TABLE ehr.hospitals_src
(
    hospital_id varchar(50),
    hospital_name varchar(50),
    hospital_address_number varchar(50),
    hospital_address_street varchar(50),
    hospital_address_full varchar(50),
    hospital_city varchar(50),
    hospital_zip_code varchar(50),
    hospital_county varchar(50),
    hospital_state varchar(50),
    hospital_country varchar(50),
    hospital_latitude varchar(50),
    hospital_longitude varchar(50)
);
CREATE TABLE ehr.icd_nine_lkp_src
(
    dgns_cd varchar(25),
    longdesc varchar(25),
    shortdesc varchar(25),
    cd_version varchar(25),
    fyear varchar(25)
);
CREATE TABLE ehr.provider_info_src
(
    provider_identification_number varchar(50),
    first_name varchar(50),
    middle_name varchar(50),
    last_name varchar(50),
    salutation varchar(50),
    provider_rank varchar(50),
    degree varchar(50),
    tin_format varchar(50),
    taxid_number varchar(50),
    prov_type_description varchar(50),
    prov_type varchar(50),
    accreditation varchar(50),
    specialty varchar(50),
    board_certification varchar(50),
    lang_nm varchar(50),
    lic_st_abr varchar(50),
    lic_type_nm varchar(50),
    lic_no varchar(50),
    lic_exprtn_dt varchar(50),
    national_provider_identification_no varchar(50),
    admin_priv1 varchar(50),
    hospital_name varchar(50),
    serv_loc_line1 varchar(50),
    serv_loc_line2 varchar(50),
    city varchar(50),
    state varchar(50),
    zip varchar(50),
    phone varchar(50),
    fax varchar(50),
    email varchar(50),
    product varchar(50),
    network varchar(50)
);
select * from users;
select * from client_authentication;
select * from client_authentications;
select * from client_auth;
select * from client_auth_params;
select * from password_auditor;
select * from password_auditor;
select * from password_auditor

alter user dbadmin SECURITY_ALGORITHM 'MD5' IDENTIFIED BY 'manager777Blaze!';
alter user dbadmin SECURITY_ALGORITHM 'MD5' IDENTIFIED BY 'manager777Blaze!';
select * from sessions;
select * from sessions;
select * from versions;
select * from password_auditor;
select * from user

alter user dbadmin SECURITY_ALGORITHM 'MD5' IDENTIFIED BY 'manager777Blaze!';
select * from users;
select * from sessions;
copy beer.flex from local '/Volumes/Sable/DEMODATA/Beer/Beers_0.json' parser fjsonparser();
truncate table beer.flex;
copy beer.flex from local '/Users/mbowen/devcode/DEMO/datasets/beers/beers_0.json' parser fjsonparser();
copy beer.flex from local '/Users/mbowen/devcode/DEMO/datasets/beers/beers_1.json' parser fjsonparser();
copy beer.flex from local '/Users/mbowen/devcode/DEMO/datasets/beers/beers_2.json' parser fjsonparser();
copy beer.flex from local '/Users/mbowen/devcode/DEMO/datasets/beers/beers_3.json' parser fjsonparser();
compute_flextable_keys_and_build_view('beer.flex');
select beer.beer, sum(beer.likes) from beer.flex_view
group by 1;
select beer, sum(likes) from beer.flex_view
group by 1;
copy beer.flex from local '/Users/mbowen/devcode/DEMO/datasets/beers/beers_0.json' parser fjsonparser();
copy beer.flex from local '/Users/mbowen/devcode/DEMO/datasets/beers/beers_1.json' parser fjsonparser();
copy beer.flex from local '/Users/mbowen/devcode/DEMO/datasets/beers/beers_2.json' parser fjsonparser();
copy beer.flex from local '/Users/mbowen/devcode/DEMO/datasets/beers/beers_3.json' parser fjsonparser();
select compute_flextable_keys_and_build_view('beer.flex');
select beer, sum(likes) from beer.flex_view
group by 1;
COPY  survey.general_info_src FROM
'/Users/mbowen/devcode/DEMO/datasets/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.general_info_src FROM
'/Users/mbowen/devcode/DEMO/datasets/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.general_info_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.hcahps_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/survey-health/survey_hcahps.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.hcahps_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/survey-health/survey_hcahps.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.hcahps_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/survey-health/survey_hcahps.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 0;
COPY  survey.opioid_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/survey-health/survey_opioid_src.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
copy masterdata.places_src from local
'/Users/mbowen/devcode/DEMO/masterdata/us_places.csv'
WITH DELIMITER ';' ENCLOSED BY '"' rejectmax 1;
select count(*) from masterdata.places_src;
copy masterdata.places_src from local
'/Users/mbowen/devcode/DEMO/masterdata/us_places.csv'
WITH DELIMITER ';' ENCLOSED BY '"' rejectmax 1;
copy masterdata.places_src from local
'/Users/mbowen/devcode/DEMO/masterdata/us_places.csv'
WITH DELIMITER ';' ENCLOSED BY '"' rejectmax 1;
select count(*) from masterdata.places_src;
create schema aetna;
create table masterdata.names_01_src
( first_name varchar(25),
last_name varchar(25);
create table masterdata.names_01_src
( first_name varchar(25),
last_name varchar(25));
truncate table masterdata.names_01_src;
load masterdata.names_01_src
from local '/Users/mbowen/devcode/DEMO/datasets/fake-data/People Dimensions/outnames.txt' with
delimiter ' ' rejectmax 1;
load masterdata.names_01_src
from local '/Users/mbowen/devcode/DEMO/datasets/fake-data/People Dimensions/outnames.txt' with
delimiter ' ' rejectmax 1;
copy masterdata.names_01_src
from local '/Users/mbowen/devcode/DEMO/datasets/fake-data/People Dimensions/outnames.txt' with
delimiter ' ' rejectmax 1;
truncate table masterdata.names_01_src;
copy masterdata.names_01_src
from local '/Users/mbowen/devcode/DEMO/datasets/fake-data/People Dimensions/outnames.txt' with
delimiter ' ' rejectmax 0;
copy masterdata.names_01_src
from local '/Users/mbowen/devcode/DEMO/datasets/fake-data/People Dimensions/outnames.txt' with
delimiter '|' rejectmax 0;
create table masterdata.alphabet_lkp (
	id	integer,
	letter	varchar(5)
);
copy masterdata.lsad_lkp
from local '/Users/mbowen/devcode/DEMO/datasets/fake-data/lsad.csv' with
delimiter '|' rejectmax 0;
copy masterdata.lsad_lkp
from local '/Users/mbowen/devcode/DEMO/datasets/fake-data/lsad.csv' with
delimiter '|' rejectmax 0;
truncate table masterdata.lsad_lkp;
copy masterdata.lsad_lkp
from local '/Users/mbowen/devcode/DEMO/datasets/fake-data/lsad.csv' with
delimiter '|' rejectmax 0;
select * from masterdata.places_src where lsad ilike '%20%';
select * from masterdata.places_src where lsad ilike '%21%';
select * from masterdata.places_src where lsad ilike '%55%';
truncate table masterdata.funcstat;
truncate table masterdata.funcstat_lkp;
copy masterdata.funcstat_lkp
from local '/Users/mbowen/devcode/DEMO/masterdata/funcstat.csv' with
delimiter '|' rejectmax 0;
truncate table aetna.provider_base_src;
copy aetna.provider_base from local '//Users/mbowen/devcode/DEMO/datasets/aetna-sdv/sample_provider_id_vbar.csv' 
with delimiter '|'  ENCLOSED BY '"' rejectmax 1;
truncate table aetna.provider_base_src;
copy aetna.provider_base from local '//Users/mbowen/devcode/DEMO/datasets/aetna-sdv/sample_provider_id_vbar.csv' 
with delimiter '|'  ENCLOSED BY '"' rejectmax 0;
truncate table aetna.provider_base_src;
copy aetna.provider_base_src from local '//Users/mbowen/devcode/DEMO/datasets/aetna-sdv/sample_provider_id_vbar.csv' 
with delimiter '|'  ENCLOSED BY '"' rejectmax 0;
insert into aetna.address
select prvdr_id, tax_id_no
from aetna.provider_base_src;
select 
    prvdr_id,
     tax_id_no,
    'fake',
    'fake' ,
    accept_patients_ind,
    null,
    null,
    null,
    null,
    now() as MAILING_DT
    null as NPI_NO
from aetna.provider_base_src;
select 
    prvdr_id,
     tax_id_no,
    'fake',
    'fake' ,
    accept_patients_ind,
    null,
    null,
    null,
    null,
    now() as MAILING_DT,
    null as NPI_NO
from aetna.provider_base_src;
select 
    prvdr_id,
     tax_id_no,
    'fake',
    'fake' ,
    accept_patients_ind,
    null,
    null,
    null,
    null,
    now()::date as MAILING_DT,
    null as NPI_NO
from aetna.provider_base_src;
select 
    prvdr_id,
     tax_id_no,
    'fake',
    'fake' ,
    accept_patients_ind,
    null,
    null,
    null,
    null,
    now()::datetime as MAILING_DT,
    null as NPI_NO
from aetna.provider_base_src;
select 
    prvdr_id,
     tax_id_no,
    'fake' as addr_no,
    mailing_cycle,
    accept_patients_ind,
    null,
    null,
    null,
    null,
    now()::datetime as MAILING_DT,
    null as NPI_NO
from aetna.provider_base_src;
select 
    prvdr_id,
     tax_id_no,
    'fake' as addr_no,
    mailing_cycle,
    accept_patients_ind,
    null as loc_sts_cd,
    null as stradd1_txt,
    null as stradd2_stx,
    null as city_nm,
    null as state_cd,
    null as zip_cd,
    null as phone_no,
    null as fax_no
    now()::timestamp as modified_dt
    now()::timestamp as MAILING_DT,
    modified_user_id,
    null as NPI_NO
from aetna.provider_base_src;
select 
    prvdr_id,
     tax_id_no,
    'fake' as addr_no,
    mailing_cycle,
    accept_patients_ind,
    null as loc_sts_cd,
    null as stradd1_txt,
    null as stradd2_stx,
    null as city_nm,
    null as state_cd,
    null as zip_cd,
    null as phone_no,
    null as fax_no,
    now()::timestamp as modified_dt,
    modified_user_id,
    now()::timestamp as MAILING_DT,

    null as NPI_NO
from aetna.provider_base_src;
insert into aetna.address
select 
    prvdr_id,
     tax_id_no,
    'fake' as addr_no,
    mailing_cycle,
    accept_patients_ind,
    null as loc_sts_cd,
    null as stradd1_txt,
    null as stradd2_stx,
    null as city_nm,
    null as state_cd,
    null as zip_cd,
    null as phone_no,
    null as fax_no,
    now()::timestamp as modified_dt,
    modified_user_id,
    now()::timestamp as MAILING_DT,
    null as NPI_NO
from aetna.provider_base_src;
select

PRVDR_ID ,
	TAX_ID_NO   ,
	random()*30::int+1950 as PRVDR_CERT_YEAR  ,
	'fake specialty' as SPEC_NM   ,
	null as BOARD_STS_CD  ,
	MAILING_CYCLE  ,
	now()::timestamp as MODIFIED_DT   ,
	MODIFIED_USER_ID  ,
	MAILING_DT   
    from aetna.provider_base_src;

select

PRVDR_ID ,
	TAX_ID_NO   ,
	random()*30::int +1950 as PRVDR_CERT_YEAR  ,
	'fake specialty' as SPEC_NM   ,
	null as BOARD_STS_CD  ,
	MAILING_CYCLE  ,
	now()::timestamp as MODIFIED_DT   ,
	MODIFIED_USER_ID  ,
	MAILING_DT   
    from aetna.provider_base_src;

select

PRVDR_ID ,
	TAX_ID_NO   ,
	(random()*30) +1950::int as PRVDR_CERT_YEAR  ,
	'fake specialty' as SPEC_NM   ,
	null as BOARD_STS_CD  ,
	MAILING_CYCLE  ,
	now()::timestamp as MODIFIED_DT   ,
	MODIFIED_USER_ID  ,
	MAILING_DT   
    from aetna.provider_base_src;

select

PRVDR_ID ,
	TAX_ID_NO   ,
	(random()*30 +1950)::int as PRVDR_CERT_YEAR  ,
	'fake specialty' as SPEC_NM   ,
	null as BOARD_STS_CD  ,
	MAILING_CYCLE  ,
	now()::timestamp as MODIFIED_DT   ,
	MODIFIED_USER_ID  ,
	MAILING_DT   
    from aetna.provider_base_src;

select

PRVDR_ID ,
	TAX_ID_NO   ,
	(random()*40 +1960)::int as PRVDR_CERT_YEAR  ,
	'fake specialty' as SPEC_NM   ,
	null as BOARD_STS_CD  ,
	MAILING_CYCLE  ,
	now()::timestamp as MODIFIED_DT   ,
	MODIFIED_USER_ID  ,
	MAILING_DT   
    from aetna.provider_base_src;
select

PRVDR_ID ,
	TAX_ID_NO   ,
	(random()*50 +1980)::int as PRVDR_CERT_YEAR  ,
	'fake specialty' as SPEC_NM   ,
	null as BOARD_STS_CD  ,
	MAILING_CYCLE  ,
	now()::timestamp as MODIFIED_DT   ,
	MODIFIED_USER_ID  ,
	MAILING_DT   
    from aetna.provider_base_src;
copy aetna.provider_base_src from local '//Users/mbowen/devcode/DEMO/datasets/aetna-sdv/stupid_rep_vbar.csv' 
with delimiter '|'  ENCLOSED BY '"' rejectmax 1;
copy aetna.provider_base_src from local '//Users/mbowen/devcode/DEMO/datasets/aetna-sdv/stupid_rep_vbar.csv' 
with delimiter '|'  ENCLOSED BY '"' rejectmax 1;
insert into aetna.specialty
select

PRVDR_ID ,
	TAX_ID_NO   ,
	(random()*50 +1980)::int as PRVDR_CERT_YEAR  ,
	'fake specialty' as SPEC_NM   ,
	null as BOARD_STS_CD  ,
	MAILING_CYCLE  ,
	now()::timestamp as MODIFIED_DT   ,
	MODIFIED_USER_ID  ,
	MAILING_DT   
    from aetna.provider_base_src;
insert into aetna.address
select 
    prvdr_id,
     tax_id_no,
    'fake' as addr_no,
    mailing_cycle,
    accept_patients_ind,
    null as loc_sts_cd,
    null as stradd1_txt,
    null as stradd2_stx,
    null as city_nm,
    null as state_cd,
    null as zip_cd,
    null as phone_no,
    null as fax_no,
    now()::timestamp as modified_dt,
    modified_user_id,
    now()::timestamp as MAILING_DT,
    null as NPI_NO
from aetna.provider_base_src;
create table aetna.specialty_int
as select

PRVDR_ID ,
	TAX_ID_NO   ,
	(random()*50 +1980)::int as PRVDR_CERT_YEAR  ,
	'fake specialty' as SPEC_NM   ,
	null as BOARD_STS_CD  ,
	MAILING_CYCLE  ,
	now()::timestamp as MODIFIED_DT   ,
	MODIFIED_USER_ID  ,
	MAILING_DT  ,
	false::boolean as update_flag 
    from aetna.provider_base_src;
create table aetna.address_int as
select 
    prvdr_id,
     tax_id_no,
    'fake' as addr_no,
    mailing_cycle,
    accept_patients_ind,
    null as loc_sts_cd,
    null as stradd1_txt,
    null as stradd2_stx,
    null as city_nm,
    null as state_cd,
    null as zip_cd,
    null as phone_no,
    null as fax_no,
    now()::timestamp as modified_dt,
    modified_user_id,
    now()::timestamp as MAILING_DT,
    null as NPI_NO,
    false::boolean as update_flag
from aetna.provider_base_src;
grant read on schema sys_catalog to CDW_Admin;
grant read on  sys_catalog to CDW_Admin;
grant read on  sys_catalog.query_requests to CDW_Admin;
grant read on  sys_catalog.query_requests to CDW_Admin;
set role dbadmin;
grant read on  sys_catalog.query_requests to CDW_Admin;
with dead_ratio as (
select count(*) as total_sessions, 0 as dead_sessions from sessions
union
select 0, count(*) as dead_sessions  from sessions
where statement_id is null
and (sysdate::timestamp - transaction_start) > '0 02:00:00.0') 
select sum(total_sessions) as ts, sum(dead_sessions) as ds, sum(dead_sessions)/sum(total_sessions) as ratio from dead_ratio;
with dead_ratio as (
select count(*) as total_sessions, 0 as dead_sessions from sessions
union
select 0, count(*) as dead_sessions  from sessions
where statement_id is null
and (sysdate::timestamp - transaction_start) > '0 02:00:00.0') 
select sum(total_sessions) as ts, sum(dead_sessions) as ds, sum(dead_sessions)/sum(total_sessions) as ratio from dead_ratio


select * from sessions;
select * from sessions;
elect * from sessions order by transaction_start asc;
select * from sessions order by transaction_start asc;
select * from sessions;
select * from query_requests limit 50;
select * from query_requests
where session_id = 'v_teva_node0004-12106:0xa767a8' limit 50;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_dup

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_src;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_dup

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_src;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_dup

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_src;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_dup

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_src;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_dup

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_src;
insert into aetna.provider_base_src

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_dup;
insert into aetna.provider_base_dup

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	TAXID_FORMAT_CD,
	MASKED_TAX_ID,
	STATE_CD,
	EXCLUDE_TIN_POIN_FLAG,
	MAILING_DT,
	MAILING_CYCLE,
	PRINT_DIR_FLAG,
	FIRST_NM,
	MIDDLE_NM,
	LAST_NM,
	SALUTATION_TXT,
	(random()*100)::int as base_rank,
	BUSINESS_UNIT_CD,
	CATEGORY,
	PRVDR_TYPE_CD,
	PRVDR_TYPE_DESC,
	DEGREE_CD,
	ACCEPT_PATIENTS_IND,
	LOCATION_STATUS_CD,
	SOURCE_TYPE_CD,
	CRED_STATUS_CD,
	now()::timestamp as MODIFIED_DT,
	MODIFIED_USER_ID
FROM
	vademo.aetna.provider_base_src;
select count(*) from aetna.provider_base_src;

drop TABLE vademo.aetna.provider_base_sql_src ;
CREATE TABLE vademo.aetna.provider_base_sql_src
(PRVDR_ID INTEGER,
TAX_ID_NO INTEGER,
TAXID_FORMAT_CD VARCHAR(25),
STATE_CD VARCHAR(25),
FIRST_NM VARCHAR(25),
MIDDLE_NM VARCHAR(25),
LAST_NM VARCHAR(25),
SALUTATION_TXT VARCHAR(25),
RANK VARCHAR(25),
BUSINESS_UNIT_CD VARCHAR(25),
CATEGORY INTEGER,
PRVDR_TYPE_CD VARCHAR(25),
PRVDR_TYPE_DESC VARCHAR(50),
DEGREE_CD VARCHAR(25),
ACCEPT_PATIENTS_IND VARCHAR(25),
LOCATION_STATUS_CD VARCHAR(25),
SOURCE_TYPE_CD VARCHAR(25),
CRED_STATUS_CD VARCHAR(25));
copy aetna.provider_base_sql_src from local
'/Users/mbowen/devcode/DEMO/aetna/data/SQL_DataExtract _provider.csv'
with delimiter ',' rejectmax 1;
copy aetna.provider_base_sql_src from local
'/Users/mbowen/devcode/DEMO/aetna/data/SQL_DataExtract _provider.csv'
with delimiter ',' rejectmax 0;
copy aetna.provider_base_sql_src from local
'/Users/mbowen/devcode/DEMO/aetna/data/SQL_DataExtract_provider.csv'
with delimiter ',' rejectmax 0;
copy aetna.provider_loc_sql_src from local
'/Users/mbowen/devcode/DEMO/aetna/data/SQL_DataExtract_provider_loc.csv'
with delimiter ',' rejectmax 0;
copy aetna.provider_specialty_sql_src from local
'/Users/mbowen/devcode/DEMO/aetna/data/SQL_DataExtract_provider_specialty.csv'
with delimiter ',' rejectmax 0;
COPY  ehr.accounts_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_accounts.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
select count(*) from ehr.accounts_src;
COPY  ehr.departments_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_departments.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.encounters_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_encounters.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.encounters_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_encounters.csv'
WITH DELIMITER '\t' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.encounters_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_encounters.csv'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.encounters_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_encounters.csv'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 0;
COPY  ehr.encounters_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_encounters.csv'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.hospitals_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_hospitals.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.patients_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_patients.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
create table ehr.drugs (

Manufacturer_Name  varchar(50),
NDC_Number  varchar(50),
Drug_Product_Description  varchar(50),
Date_Introduced_to_Market  varchar(50),
WAC_at_Introduction  varchar(50),
Marketing/Pricing_Plan_Description  varchar(50),
Marketing/Pricing_Plan_Non-Public_Indicator  varchar(50),
Estimated_Number_of_Patients  varchar(50),
Breakthrough_Therapy_Indicator  varchar(50),
Priority_Review_Indicator  varchar(50),
Acquisition_Date  varchar(50),
Acquisition_Price  varchar(50),
Acquisition_Price_Non-Public_Indicator  varchar(50),
Acquisition_Price_Comment  varchar(50),
General_Comments  varchar(50),
Supporting_Documents  varchar(50)
);
create table ehr.icd9_codes (
    code     varchar(10),
    code_desc     varchar(250),
    code_short_desc  varhcar(100),
    year_version  varchar(10)
);
create table ehr.icd9_codes (
    code     varchar(10),
    code_desc     varchar(250),
    code_short_desc  varchar(100),
    year_version  varchar(10)
);
drop table icd_nine_lkp_src;
drop table ehr.icd_nine_lkp_src;
CREATE TABLE ehr.icd_nine_lkp_src (
	dgns_cd Varchar(25),
	longdesc Varchar(250),
	shortdesc Varchar(100),
	cd_version Varchar(25),
	fyear Varchar(25)
);
COPY  ehr.icd9_lkp_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/icd9dx2015_2.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.icd_nine_lkp_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/icd9dx2015_2.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.icd_nine_lkp_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/icd9dx2015_2.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 0;
ALTER DATABASE DEFAULT SET PARAMETER SecurityAlgorithm = 'MD5';
ALTER USER dbadmin SECURITY_ALGORITHM 'MD5' IDENTIFIED BY 'Alabama7878!';
COPY  ehr.accounts_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_accounts.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.departments_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_departments.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.encounters_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_encounters.csv'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.hospitals_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_hospitals.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.patients_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_patients.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  ehr.icd_nine_lkp_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/icd9dx2015_2.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 0;
COPY  survey.general_info_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.hcahps_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/survey-health/survey_hcahps.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 0;
COPY  survey.opioid_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/survey-health/survey_opioid_src.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
CREATE SCHEMA masterdata;
drop table if exists masterdata.places_src;
CREATE TABLE masterdata.places_src
(
    usps varchar(10),
    geo_id varchar(10),
    ansi_code varchar(10),
    place_name varchar(100),
    lsad varchar(10),
    funcstat varchar(10),
    land_area numeric(37,15),
    water_area numeric(37,15),
    aland_sqmi numeric(37,15),
    awater_sqmi numeric(37,15),
    intpt_lat numeric(37,15),
    intp_long numeric(37,15)
);
CREATE TABLE masterdata.names_01_src
(
    first_name varchar(25),
    last_name varchar(25)
);
CREATE TABLE masterdata.alphabet_lkp
(
    id int,
    letter varchar(5)
);
CREATE TABLE masterdata.lsad_lkp
(
    lsad_id varchar(5),
    lsad_type varchar(50),
    lsad_desc varchar(500)
);
CREATE TABLE masterdata.funcstat_lkp
(
    funcstat_code varchar(5),
    funcstat_desc varchar(150),
    funcstat_entity varchar(1200)
);
copy masterdata.places_src from local
'/Users/mbowen/devcode/DEMO/masterdata/us_places.csv'
WITH DELIMITER ';' ENCLOSED BY '"' rejectmax 1;
copy masterdata.funcstat_lkp from local
'/Users/mbowen/devcode/DEMO/masterdata/funcstate_lkp.csv'
WITH DELIMITER ';' ENCLOSED BY '"' rejectmax 1;
copy masterdata.lsad_lkp from local
'/Users/mbowen/devcode/DEMO/masterdata/lsad_lkp.csv'
WITH DELIMITER ';' ENCLOSED BY '"' rejectmax 1;
copy masterdata.lsad_lkp from local
'/Users/mbowen/devcode/DEMO/masterdata/lsad_lkp.csv'
WITH DELIMITER ';' ENCLOSED BY '"' rejectmax 1;
copy masterdata.alphabet_lkp from local
'/Users/mbowen/devcode/DEMO/masterdata/alphabet_lkp.csv'
WITH DELIMITER ';' ENCLOSED BY '"' rejectmax 1;
truncate table masterdata.names_01_src;
copy masterdata.names_01_src
from local '/Users/mbowen/devcode/DEMO/datasets/fake-data/people/outnames.txt' with
rejectmax 0;
CREATE SCHEMA if not exists beer;
CREATE SEQUENCE beer.country_id  CACHE      1;
CREATE TABLE beer.events
(
    beer_event_id varchar(80),
    drinking_session_id varchar(80),
    user_id varchar(80),
    beer varchar(80),
    schmooziest_buzzword varchar(80),
    best_thing_said varchar(80),
    worst_thing_said varchar(80),
    drunken_babble varchar(80),
    likes int,
    beer_opened_time timestamp
);
CREATE TABLE beer.adj_drinkers
(
    id int,
    user_id char(32),
    first_name varchar(32),
    last_name varchar(32),
    company varchar(64),
    school varchar(128),
    superhero_power varchar(64),
    good_tipper boolean,
    favorite_instrument varchar(64),
    zipcode char(5)
);
CREATE TABLE beer.drinkers
(
    id int,
    user_id char(32),
    first_name varchar(32),
    last_name varchar(32),
    company varchar(64),
    school varchar(128),
    superhero_power varchar(64),
    good_tipper boolean,
    favorite_instrument varchar(64),
    zip_code char(5)
);
CREATE TABLE beer.beer_type
(
    Beer varchar(50),
    beer_type varchar(25),
    alcohol numeric(25,0)
);
CREATE TABLE beer.beer_hours
(
    beer_opened_time timestamp,
    beer_hour numeric(36,0)
);
CREATE TABLE beer.zipcode
(
    zipcode char(5),
    Place_Name varchar(50),
    State varchar(25),
    State_Abbreviation varchar(5),
    County varchar(50),
    Latitude varchar(10),
    Longitude varchar(10)
);
CREATE TABLE beer.zsharp
(
    bad_code char(5),
    key varchar(5),
    good_code char(5)
);
create schema atlas;
-- drop table if exists atlas.mock_dealer
CREATE TABLE atlas.mock_dealer
(old_name varchar(50),
new_name varchar(50));
--drop table if exists atlas.arrivals_src;
create table atlas.arrivals_src (
  --source_file_id    integer,
  vin               varchar(50),
  arrivals_count    integer,
  region_key        integer,
  port_key          integer,
  date_key          varchar(20),
  config_key        integer

);
--drop table if exists atlas.control;
create table atlas.control (
  source_file_id    integer,
  source_key        varchar(20),
  source_file_name  varchar(1024),
  source_system     varchar(255),
  sourc_file_run_date  date,
  message           varchar(255),
  file_size         varchar(20),
  data_from_ts      timestamp,
  data_to_ts        timestamp,
  job_start_ts      timestamp,
  job_end_ts        timestamp,
  update_ts         timestamp

);
-- drop table if exists atlas.cust_dim_src;
create table atlas.cust_dim_src (
  --source_file_id    integer,
  cust_id           integer,
  cust_type         varchar(20),
  gender            varchar(20),
  income_group      varchar(20),
  zip_code          varchar(20)
);
create table atlas.cust_dim (
  source_file_id    integer,
  cust_id           integer,
  cust_type         varchar(20),
  gender            varchar(20),
  income_group      varchar(20),
  zip_code          varchar(20),
  file_size         varchar(20),
  pii_link          integer,
  has_pii           boolean
);
CREATE TABLE atlas.cust_sales_src
(
  --source_file_id integer,
  vin  varchar (50) ,
  region  varchar (255) ,
  count numeric ,
  dealer integer ,
  sale_date  varchar (255) ,
  vehicle integer ,
  cust_id integer ,
  cust_type  varchar (20) ,
  gender  varchar (20) ,
  income_group  varchar (20) ,
  zip  varchar (20)
);
CREATE TABLE atlas.date_dim_src (
    --source_file_id integer,
    date datetime ,
    date_key  varchar (10) ,
    day_of_week_number integer ,
    day_of_year_number numeric ,
    week_of_year_number numeric ,
    quarter_number numeric ,
    ten_day_period_number numeric ,
    sales_days integer ,
    sales_month_date  varchar (10) ,
    end_of_calendar_month_indic  varchar (1) ,
    holiday_indic  varchar (1) ,
    ten_day_period_end_indic  varchar (1) ,
    shipments_month_end_indic  varchar (1)
);
CREATE TABLE atlas.dealer_dim_src (

    --source_file_id integer,
    dealer_id  integer,
    dealer_name  varchar(50),
    address_line_1  varchar(50),
    address_line_2  varchar(50),
    city_name  varchar(50),
    po_box_number  varchar(50),
    state_code  varchar(5),
    zip_code  varchar(10),
    area_code  varchar(5),
    telephone_number  varchar(10),
    region_name  varchar(50),
    district_name  varchar(50),
    metro_area_name  varchar(50),
    metro_area_abbrev_name  varchar(20),
    area_of_dom_influence_name  varchar(50),
    adi_abbrev_name  varchar(20),
    adi_us_population_percent  numeric,
    pma_number  varchar(20),
    salesperson_count  integer,
    new_car_storage_count  integer
);
CREATE TABLE atlas.big_report
(
   vin                         Varchar(50),
   region_key                  Integer,
   sales_count                 Integer,
   date_key                    Varchar(10),
   zip                         Varchar(20),
   income_group                Varchar(20),
   cust_type_desc              Varchar(10),
   gender                      Varchar(14),
   income                      Varchar(14),
   dealer_name                 Varchar(50),
   dealer_city            Varchar(50),
   dealer_state          Varchar(5),
   dealer_zip             Varchar(10),
   dealer_area_code            Varchar(5),
   region_name                 Varchar(50),
   district_name               Varchar(50),
   metro_area_name             Varchar(50),
   metro_area_abbrev_name      Varchar(20),
   area_of_dom_influence_name  Varchar(50),
   adi_abbrev_name             Varchar(20),
   adi_us_population_percent   Numeric(37,15),
   pma_number                  Varchar(20),
   salesperson_count           Integer,
   new_car_storage_count       Integer,
   model_year                  Integer,
   body_model_code             Varchar(5),
   body_model_name             Varchar(50),
   price_line_code             Varchar(10),
   price_line_name             Varchar(46),
   emissions_catg_code         Varchar(10),
   emissions_catg_name         Varchar(16),
   engine_code                 Varchar(5),
   engine_name                 Varchar(20),
   ext_color_code              Varchar(10),
   ext_color_name              Varchar(50),
   k_model_number              Varchar(22),
   interior_trim_id            Integer,
   interior_trim_color         Varchar(50),
   transmission_type_code      Varchar(10),
   transmission_type_name      Varchar(50),
   factory_op_group_code       Varchar(10)
);
CREATE TABLE atlas.date_dim (
    --source_file_id integer,
    date datetime ,
    date_key  varchar (10) ,
    day_of_week_number integer ,
    day_of_year_number numeric ,
    week_of_year_number numeric ,
    quarter_number numeric ,
    ten_day_period_number numeric ,
    sales_days integer ,
    sales_month_date  varchar (10) ,
    end_of_calendar_month_indic  varchar (1) ,
    holiday_indic  varchar (1) ,
    ten_day_period_end_indic  varchar (1) ,
    shipments_month_end_indic  varchar (1)
);
CREATE TABLE atlas.port_dim (

    --source_file_id    integer,
    port_id           integer ,
    port_name         varchar(30) ,
    shipping_route_code  varchar (1)
);
CREATE TABLE atlas.region_dim (

    --source_file_id integer,
    region_key integer ,
    org_unit_code  varchar (10) ,
    region_name  varchar (50)
);
CREATE TABLE atlas.sales
(
    --source_file_id integer,
    vin  varchar (255) ,
    region  varchar (255) ,
    sales_count integer ,
    f4 integer ,
    sales_date  date ,
    f6 integer ,
    f7 integer ,
    f8 varchar(50),
    f9 varchar(50),
    f10 varchar(50),
    f11 varchar(50)

);
CREATE TABLE atlas.sales_fact
(
    --source_file_id integer,
    -- id integer ,
    vin  varchar (50) ,
    sales_count integer ,
    region_key integer ,
    dealer_id integer ,
    date_key  varchar (10) ,
    config_key integer,
    cust_id  integer
);
CREATE TABLE atlas.vehicle_config
(
    --source_file_id integer,
    config_key integer ,
    model_year integer ,
    body_model_code  varchar(5) ,
    body_model_name  varchar(36) ,
    price_line_code  varchar(3) ,
    price_line_name  varchar(46) ,
    emissions_catg_code  varchar(4) ,
    emissions_catg_name  varchar(16) ,
    engine_code  varchar(5) ,
    engine_name  varchar(41) ,
    ext_color_code  varchar(4) ,
    ext_color_name  varchar(36) ,
    k_model_number  varchar(22) ,
    interior_trim_id integer ,
    interior_trim_color  varchar(36) ,
    transmission_type_code  varchar(4) ,
    transmission_type_name  varchar(36) ,
    factory_op_group_code  varchar(4)
);
CREATE TABLE atlas.zip_code_lkp
(
    --source_file_id    integer,
    zip_code          varchar(10) ,
    latitude          numeric,
    longitude         numeric,
    city              varchar(50) ,
    state             varchar(50) ,
    county            varchar(50)
);
create schema brdbeer;
create table brdbeer.user_agent (
    id    integer,
    agent  varchar(25),
    agent_version  varchar(10),
    os      varchar(25)
    os_type  varchar(10),
    lang    varchar(10)


);
create table brdbeer.user_agent (
    id    integer,
    agent  varchar(25),
    agent_version  varchar(10),
    os      varchar(25),
    os_type  varchar(10),
    lang    varchar(10)


);
copy brdbeer.user_agent from local 
'/Users/mbowen/devcode/DEMO/datasets/beers/brd-beer/UserAgent_Dimension.tbl'
with rejectmax 1;
create table page_dimension (
    id         integer,
    full_url    varchar(100),
    section     varchar(50),
    origination varchar(25)
);
create table brdbeer.page_dimension (
    id         integer,
    full_url    varchar(100),
    section     varchar(50),
    origination varchar(25)
);
copy brdbeer.page_dimension from local
'/Users/mbowen/devcode/DEMO/datasets/beers/brd-beer/Page_Dimension.tbl'
with rejectmax 1;
create table brdbeer.session_dim (
    id          integer,
    session_start   varchar(10),
    session_end     varchar(10),
    session_time    integer,
    first_ip        varchar(25),
    second_ip       varchar(25)

);
copy brdbeer.session_dim from local
'/Users/mbowen/devcode/DEMO/datasets/beers/brd-beer/Session_Dimension.tbl'
with rejectmax 1;
copy aetna.provider_specialty_sql_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_base.csv'
with delimiter ',' rejectmax 0;
copy aetna.provider_specialty_sql_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_base.csv'
with delimiter ';' rejectmax 1;
copy aetna.provider_specialty_sql_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_base.csv'
with delimiter ';' rejectmax 1;
copy aetna.provider_specialty_sql_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_base.csv'
with delimiter ';' rejectmax 0;
copy aetna.provider_specialty_dup from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_base_dup.csv'
with delimiter ';' rejectmax 0;
copy aetna.provider_base_dup from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_base_dup.csv'
with delimiter ';' rejectmax 0;
select count(*) from ehr.departments_src;
select count(*) from ehr.admission_vw;
COPY  click.main_fact FROM LOCAL
 '/Users/mbowen/devcode/F360/edw-brd/db/seed/xaafact_denorm.txt0000_part_01.txt'
 WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  click.main_fact FROM LOCAL
 '/Users/mbowen/devcode/F360/edw-brd/db/seed/xaafact_denorm.txt0000_part_01.txt'
 WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  click.main_fact FROM LOCAL
'/Users/mbowen/devcode/F360/edw-brd/db/seed/100k.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
CREATE SCHEMA drug;
CREATE TABLE drug.blah
(
    id int,
    drug_name varchar(50)
);
CREATE TABLE drug.ctrx2_src
(
    man varchar(100),
    ncd int,
    "desc" varchar(750),
    date_market date,
    wac_intro numeric(37,15),
    patient_ct varchar(25),
    break varchar(25),
    acq_date date,
    acq_price numeric(25,0),
    acq_indicator varchar(25)
);
CREATE PROJECTION drug.ctrx2_src_super /*+basename(ctrx2_src),createtype(L)*/ 
(
 man,
 ncd,
 "desc",
 date_market,
 wac_intro,
 patient_ct,
 break,
 acq_date,
 acq_price,
 acq_indicator
)
AS
 SELECT ctrx2_src.man,
        ctrx2_src.ncd,
        ctrx2_src."desc",
        ctrx2_src.date_market,
        ctrx2_src.wac_intro,
        ctrx2_src.patient_ct,
        ctrx2_src.break,
        ctrx2_src.acq_date,
        ctrx2_src.acq_price,
        ctrx2_src.acq_indicator
 FROM drug.ctrx2_src
 ORDER BY ctrx2_src.man,
          ctrx2_src.ncd,
          ctrx2_src."desc",
          ctrx2_src.date_market,
          ctrx2_src.wac_intro,
          ctrx2_src.patient_ct,
          ctrx2_src.break,
          ctrx2_src.acq_date
SEGMENTED BY hash(ctrx2_src.ncd, ctrx2_src.date_market, ctrx2_src.acq_date, ctrx2_src.wac_intro, ctrx2_src.acq_price, ctrx2_src.patient_ct, ctrx2_src.break, ctrx2_src.acq_indicator) ALL NODES;
COPY  click.main_fact FROM LOCAL
'/Users/mbowen/devcode/DEMO/click/xaafact_denorm.txt0000_part_01.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
insert into aetna.specialty_int
select

PRVDR_ID ,
	TAX_ID_NO   ,
	(random()*50 +1980)::int as PRVDR_CERT_YEAR  ,
	'fake specialty' as SPEC_NM   ,
	null as BOARD_STS_CD  ,
	MAILING_CYCLE  ,
	now()::timestamp as MODIFIED_DT   ,
	MODIFIED_USER_ID  ,
	MAILING_DT   
    from aetna.provider_base_src;
copy drug.ctrx2_src from local
'/Users/mbowen/devcode/DEMO/edw-dump/drug/ctrx2_src.csv'
with delimiter ';' rejectmax 1;
copy drug.ctrx2_src from local
'/Users/mbowen/devcode/DEMO/edw-dump/drug/ctrx2_src.csv'
with delimiter ';' rejectmax 0;
copy aetna.provider_base_sql_src from local
'/Users/mbowen/devcode/DEMO/aetna/data/SQL_DataExtract_provider.csv'
with delimiter ',' rejectmax 0;
copy aetna.provider_loc_sql_src from local
'/Users/mbowen/devcode/DEMO/aetna/data/SQL_DataExtract_provider_loc.csv'
with delimiter ',' rejectmax 0;
copy aetna.provider_specialty_sql_src from local
'/Users/mbowen/devcode/DEMO/aetna/data/SQL_DataExtract_provider_specialty.csv'
with delimiter ',' rejectmax 0;
copy aetna.provider_specialty_db2_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_base_db2.csv'
with delimiter ';' rejectmax 0;
copy aetna.provider_specialty_db2_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_base_db2_src.csv'
with delimiter ';' rejectmax 0;
copy aetna.provider_specialty_db2_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_base_db2_src.csv'
with delimiter ';' rejectmax 0;
select * from aetna.specialty_int
limit 50;
--
insert into aetna.specialty
select * from aetna.specialty_int;
insert into aetna.specialty
select * from aetna.specialty_int;
--
insert into aetna.specialty

SELECT
	PRVDR_ID,
	TAX_ID_NO,
	PRVDR_CERT_YEAR,
	SPEC_NM,
	BOARD_STS_CD,
	MAILING_CYCLE,
	MODIFIED_DT,
	MODIFIED_USER_ID,
	MAILING_DT
FROM
	vaasdemo.aetna.specialty_int;
select

PRVDR_ID ,
	TAX_ID_NO   ,
	(random()*50 +1980)::int as PRVDR_CERT_YEAR  ,
	 SPEC_NM   ,
	null as BOARD_STS_CD  ,
	MAILING_CYCLE  ,
	now()::timestamp as MODIFIED_DT   ,
	MODIFIED_USER_ID  ,
	MAILING_DT   
    from aetna.provider_base_src
	limit 40000;
select

PRVDR_ID ,
	TAX_ID_NO   ,
	(random()*50 +1980)::int as PRVDR_CERT_YEAR  ,
	PRVDR_TYPE_DESC as SPEC_NM   ,
	null as BOARD_STS_CD  ,
	MAILING_CYCLE  ,
	now()::timestamp as MODIFIED_DT   ,
	MODIFIED_USER_ID  ,
	MAILING_DT   
    from aetna.provider_base_src
	limit 40000;
truncate table aetna.specialty;
truncate table aetna.specialty;
insert into aetna.specialty
select

PRVDR_ID ,
	TAX_ID_NO   ,
	(random()*50 +1980)::int as PRVDR_CERT_YEAR  ,
	PRVDR_TYPE_DESC as SPEC_NM   ,
	null as BOARD_STS_CD  ,
	MAILING_CYCLE  ,
	now()::timestamp as MODIFIED_DT   ,
	MODIFIED_USER_ID  ,
	MAILING_DT   
    from aetna.provider_base_src
	limit 40000;
select count(*) from survey.general_info_src;
select count(*) from ehr.icd_nine_lkp_src;
select count(*) from ehr.icd_nine_lkp_src
	where cd_version <> 32;
select count(*) from ehr.icd_nine_lkp_src
	where cd_version <> 32 or fyear <> 2015;
copy cops.event_flx from local
'/Users/mbowen/devcode/DEMO/datasets/domo/cops.json'
 parser fjsonparser();
select compute_flextable_keys_and_build_view();
select compute_flextable_keys_and_build_view('cops.event_flx');
copy aetna.provider_specialty_db2_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_base_db2_src.csv'
with delimiter ';' rejectmax 0;
copy aetna.provider_specialty_db2_src from local
'/Users/mbowen/devcode/DEMO/AETNA/db/seed/provider_base_db2_src.csv'
with delimiter ';' rejectmax 0;
copy aetna.provider_specialty_db2_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_base_db2_src.csv'
with delimiter ';' rejectmax 1;
copy aetna.provider_base_db2_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_base_db2_src.csv'
with delimiter ';' rejectmax 1;
copy aetna.provider_specialty_db2_src from local
'/Users/mbowen/devcode/DEMO/aetna/data/DB2_Data_Intake_specialty.csv'
with delimiter ';' rejectmax 1;
copy aetna.provider_specialty_db2_src from local
'/Users/mbowen/devcode/DEMO/aetna/data/DB2_Data_Intake_specialty.csv'
with delimiter ';' rejectmax 0;
copy aetna.provider_specialty_db2_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_specialty_db2_src.csv'
with delimiter ';' rejectmax 1;
copy aetna.provider_specialty_db2_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_specialty_db2_src.csv'
with delimiter ';' rejectmax 0;

copy aetna.provider_specialty_db2_src from local
'/Users/mbowen/devcode/DEMO/aetna/db/seed/provider_specialty_db2_src.csv'
with delimiter ',' rejectmax 1;
select count(*) from cops.event_flx;
copy cops.event_flx from local
'/Users/mbowen/devcode/DEMO/datasets/domo/cops.json'
 parser fjsonparser();
copy cops.event_flx from local
'/Users/mbowen/devcode/DEMO/datasets/cops/cops.json'
 parser fjsonparser();
copy cops.event_flx from local
'/Users/mbowen/devcode/DEMO/datasets/cops/medium_cops.json'
 parser fjsonparser();
copy cops.event_flx from local
'/Users/mbowen/devcode/DEMO/datasets/cops/medium_cops.json'
 parser fjsonparser();
select * from sessions;
select * from query_requests;
select * from query_requests
where is_executing is true;
select * from query_requests
where is_executing is true;
copy cops.event_flx from local
'/Users/mbowen/devcode/DEMO/datasets/cops/medium_cops.json'
 parser fjsonparser();
copy cops.event_flx from local
'/Users/mbowen/devcode/DEMO/datasets/cops/medium_cops.json'
 parser fjsonparser();
select count(*) from cops.event_flx;
truncate table cops.event_flx;
select count(*) from cops.event_flx;
copy cops.event_flx from local
'/Users/mbowen/devcode/DEMO/datasets/cops/medium_cops.json'
 parser fjsonparser();
select * from cops.event_flx_view;
copy cops.event_flx from local
'/Users/mbowen/devcode/DEMO/datasets/cops/short_cops.json'
 parser fjsonparser();
select compute_flextable_keys_and_build_view();
COPY  atlas.region_dim FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/region_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.mock_dealer FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/mock_dealers.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.arrivals_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/arrivals.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.cust_dim_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/cust_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.date_dim FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/date_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.dealer_dim_src FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/dealer_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.port_dim FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/port_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.sales_fact FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/sales_fact.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.vehicle_config FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/vehicle_config.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.zip_code_lkp FROM LOCAL
'/Users/mbowen/devcode/DEMO/edw-workspace/atlas-data/seed/zip_code_lkp.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
copy commodity.daily_futures from local
'/Users/mbowen/devcode/DEMO/datasets/commodity/cmdtyDataEODSampleFile.csv'
delimiter ',' rejectmax 0;
create table commodity.daily_futures
(
    future_crb      varchar(10),
    contract_mnt    varchar(10),
    price_date      date,
    opening_price   numeric,
    high_price      numeric,
    low_price       numeric,
    close_price     numeric,
    volume          int,
    volume_dvl      int,
    open_interest_dvl   int

);
drop table commodity.daily_futures;
create table commodity.daily_futures
(
    future_crb      varchar(10),
    contract_mnt    varchar(10),
    price_date      date,
    opening_price   numeric,
    high_price      numeric,
    low_price       numeric,
    close_price     numeric,
    volume          int,
    volume_dvl      int,
    open_interest_dvl   int

);
copy commodity.daily_futures from local
'/Users/mbowen/devcode/DEMO/datasets/commodity/cmdtyDataEODSampleFile.csv'
delimiter ',' rejectmax 0;
drop table commodity.daily_futures;
create table commodity.daily_futures
(
    future_crb      varchar(10),
    contract_mnt    varchar(10),
    price_date      date,
    opening_price   numeric,
    high_price      numeric,
    low_price       numeric,
    close_price     numeric,
    volume          int,
    rec				int

);
copy commodity.daily_futures from local
'/Users/mbowen/devcode/DEMO/datasets/commodity/cmdtyDataEODSampleFile.csv'
delimiter ',' rejectmax 0;
copy commodity.daily_futures from local
'/Users/mbowen/devcode/DEMO/datasets/commodity/Untitled.csv'
delimiter ',' rejectmax 0;
copy commodity.daily_futures from local
'/Users/mbowen/devcode/DEMO/datasets/commodity/Untitled.csv'
delimiter ',' rejectmax 1;
create table commodity.daily_futures_src
(
    future_crb      varchar(10),
    contract_mnt    varchar(10),
    price_date      varchar(20),
    opening_price   varchar(20),
    high_price      varchar(20),
    low_price       varchar(20),
    close_price     varchar(20),
    volume          varchar(20),
    rec				varchar(20)

);
copy commodity.daily_futures_src from local
'/Users/mbowen/devcode/DEMO/datasets/commodity/Untitled.csv'
delimiter ',' rejectmax 1;
copy commodity.daily_futures_src from local
'/Users/mbowen/devcode/DEMO/datasets/commodity/Untitled.csv'
delimiter ',' rejectmax 0;
copy commodity.daily_futures_src from local
'/Users/mbowen/devcode/DEMO/datasets/commodity/Untitled.csv'
 rejectmax 0;
drop table commodity.daily_futures_src;
create table commodity.daily_futures_src
(
    future_crb      varchar(10),
    contract_mnt    varchar(10),
    price_date      varchar(20),
    opening_price   varchar(20),
    high_price      varchar(20),
    low_price       varchar(20),
    close_price     varchar(20),
    volume          varchar(20)


);
copy commodity.daily_futures_src from local
'/Users/mbowen/devcode/DEMO/datasets/commodity/Untitled.csv'
 rejectmax 0;
ALTER DATABASE DEFAULT SET PARAMETER SecurityAlgorithm = 'MD5';
ALTER USER dbadmin SECURITY_ALGORITHM 'MD5' ;
ALTER USER dbadmin SECURITY_ALGORITHM 'MD5' ;
ALTER DATABASE DEFAULT SET PARAMETER SecurityAlgorithm = 'MD5';
select count(*) from cops.event_flx;
select count(*) from cops.event_flx;
truncate table cops.event_flx;
select count(*) from cops.event_flx;
copy cops.event_flx from local
'/Users/mbowen/devcode/DEMO/datasets/cops/short_cops.json'
 parser fjsonparser();
select compute_flextable_keys_and_build_view('cops.event_flx');
select count(*) from cops.event_flx;
select count(*) from cops.event_flx;
copy cops.event_flx from local
'/Users/mbowen/devcode/DEMO/datasets/cops/short_cops.json'
 parser fjsonparser();
select compute_flextable_keys_and_build_view('cops.event_flx');
select count(*) from cops.event_flx;
select count(*) from cops.event_flx;
create schema logistics;
create table logistics.test(

id   integer,
desc	varchar(20)
);
create table logistics.test(

id   integer,
descr	varchar(20)
);
CREATE TABLE vaasdemo.logistics.timetable
(nr INTEGER,
i1_legid INTEGER,
i1_rcs_p INTEGER,
i1_rcs_e INTEGER,
i1_dep_1_p INTEGER,
i1_dep_1_e INTEGER,
i1_dep_1_place INTEGER,
i1_rcf_1_p INTEGER,
i1_rcf_1_e INTEGER,
i1_rcf_1_place INTEGER,
i1_dep_2_p VARCHAR(25),
i1_dep_2_e VARCHAR(25),
i1_dep_2_place VARCHAR(25),
i1_rcf_2_p VARCHAR(25),
i1_rcf_2_e VARCHAR(25),
i1_rcf_2_place VARCHAR(25),
i1_dep_3_p VARCHAR(25),
i1_dep_3_e VARCHAR(25),
i1_dep_3_place VARCHAR(25),
i1_rcf_3_p VARCHAR(25),
i1_rcf_3_e VARCHAR(25),
i1_rcf_3_place VARCHAR(25),
i1_dlv_p INTEGER,
i1_dlv_e INTEGER,
i1_hops INTEGER,
i2_legid VARCHAR(25),
i2_rcs_p VARCHAR(25),
i2_rcs_e VARCHAR(25),
i2_dep_1_p VARCHAR(25),
i2_dep_1_e VARCHAR(25),
i2_dep_1_place VARCHAR(25),
i2_rcf_1_p VARCHAR(25),
i2_rcf_1_e VARCHAR(25),
i2_rcf_1_place VARCHAR(25),
i2_dep_2_p VARCHAR(25),
i2_dep_2_e VARCHAR(25),
i2_dep_2_place VARCHAR(25),
i2_rcf_2_p VARCHAR(25),
i2_rcf_2_e VARCHAR(25),
i2_rcf_2_place VARCHAR(25),
i2_dep_3_p VARCHAR(25),
i2_dep_3_e VARCHAR(25),
i2_dep_3_place VARCHAR(25),
i2_rcf_3_p VARCHAR(25),
i2_rcf_3_e VARCHAR(25),
i2_rcf_3_place VARCHAR(25),
i2_dlv_p VARCHAR(25),
i2_dlv_e VARCHAR(25),
i2_hops VARCHAR(25),
i3_legid VARCHAR(25),
i3_rcs_p VARCHAR(25),
i3_rcs_e VARCHAR(25),
i3_dep_1_p VARCHAR(25),
i3_dep_1_e VARCHAR(25),
i3_dep_1_place VARCHAR(25),
i3_rcf_1_p VARCHAR(25),
i3_rcf_1_e VARCHAR(25),
i3_rcf_1_place VARCHAR(25),
i3_dep_2_p VARCHAR(25),
i3_dep_2_e VARCHAR(25),
i3_dep_2_place VARCHAR(25),
i3_rcf_2_p VARCHAR(25),
i3_rcf_2_e VARCHAR(25),
i3_rcf_2_place VARCHAR(25),
i3_dep_3_p VARCHAR(25),
i3_dep_3_e VARCHAR(25),
i3_dep_3_place VARCHAR(25),
i3_rcf_3_p VARCHAR(25),
i3_rcf_3_e VARCHAR(25),
i3_rcf_3_place VARCHAR(25),
i3_dlv_p VARCHAR(25),
i3_dlv_e VARCHAR(25),
i3_hops VARCHAR(25),
o_legid INTEGER,
o_rcs_p INTEGER,
o_rcs_e INTEGER,
o_dep_1_p INTEGER,
o_dep_1_e INTEGER,
o_dep_1_place INTEGER,
o_rcf_1_p INTEGER,
o_rcf_1_e INTEGER,
o_rcf_1_place INTEGER,
o_dep_2_p VARCHAR(25),
o_dep_2_e VARCHAR(25),
o_dep_2_place VARCHAR(25),
o_rcf_2_p VARCHAR(25),
o_rcf_2_e VARCHAR(25),
o_rcf_2_place VARCHAR(25),
o_dep_3_p VARCHAR(25),
o_dep_3_e VARCHAR(25),
o_dep_3_place VARCHAR(25),
o_rcf_3_p VARCHAR(25),
o_rcf_3_e VARCHAR(25),
o_rcf_3_place VARCHAR(25),
o_dlv_p INTEGER,
o_dlv_e INTEGER,
o_hops INTEGER,
legs INTEGER);
select export_objects('','logistics',false);
copy logisticw.timetable from local
'/Users/mbowen/devcode/DEMO/edw-workspace/logistics/seed/c2k_data_comma.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
copy logistics.timetable from local
'/Users/mbowen/devcode/DEMO/edw-workspace/logistics/seed/c2k_data_comma.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
copy logistics.timetable from local
'/Users/mbowen/devcode/DEMO/edw-workspace/logistics/seed/c2k_data_comma.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 0;
select * from sessions 
order by 5 asc;
select count(*) from cortex.for_mike;

copy cortex.iata_xref from local
'/Users/mbowen/devcode/DEMO/cortex/db/seed/iata_xref.txt'
rejectmax 1;

copy cortex.new_flight from local
'/Users/mbowen/devcode/DEMO/cortex/db/seed/new_flight.txt'
rejectmax 1;
select * from nodes;
select * from nodes;
create schema ehr;
select * from sessions;
select close_session('v_teva_node0001-8476:0x867da6');
select * from sessions;
select close_user_sessions('Databurst_Updt');
select close_user_sessions('dbadmin');
select close_user_sessions('yzhao03');
select close_user_sessions('dbadmin');

COPY  ehr.encounters_src FROM local
'/Users/mbowen/devcode/DEMO/datasets/ehr2/ehr_encounters.csv'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
CREATE LOCATION 's3://demo-data.full360.com' SHARED USAGE 'USER' LABEL 's3south';
select * from storage_locations;
select * from sessions;
COPY  atlas.dealer_dim_src FROM
's3://demo-data.full360.com/edw-atlas/dealer_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
GRANT ALL ON LOCATION 's3://demo-data.full360.com' TO dbadmin;
COPY  atlas.dealer_dim_src FROM
's3://demo-data.full360.com/edw-atlas/dealer_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
alter session set AWSAuth = 'ASIAXXG2IUARBMSUUL65';
alter session set AWSAuth = 'ASIAXXG2IUARBMSUUL65:ISnTnK/PtdLlbyq/Kqr8x4jCXPe0kaIj7uQRKMSs';
ALTER SESSION SET AWSSessionToken = 'IQoJb3JpZ2luX2VjEBUaCXVzLXdlc3QtMiJGMEQCIDF4m6ApkTC+DQtf43OSnQU0J+YBPdPAVtLxKcK/Vd/5AiAiLkg4dePsVcnKUAui79WghCSmAlVKcUlXOe0qs1BylCr0AQje//////////8BEAIaDDUzMDg4NjIwNTQ3NCIM6OmAnvoiwT+FLe5PKsgBl8+aKiKcWns7sjvxnUE1QkEg0Eq2lwY0GGxqMYy2OhBwDimUrZv0DwqOrJJC2gCdJHctGHNOhazLI8BZoktXtJxgXSfrjwETOZaADJV/i4cygVYYb9bdWj47vDRsMQZogtffgYI8GwLPLD6oMhvSTY3H8sQPb1REgDDRBGhu9O4xRuOIh8YIkggQjLHr/vBvzQXCh8iiTx/iAaCoPQRPQNKsMxMxe7yPK+Rim4eT/AwIitfgAGpS+qGaivCPp0JSbkMzWwakv5cwt4OVjQY6mQEwldS2jxzw40oaUjZG/YCHsTs7Ulh58dENlEMboSQdqK+XYdoYZWPgmoVT8ZbYn7x7+g8cbuIM7KVsPpVmixlgRUQnLhjy8JSw9RfGjDbaf1ciSfLkgt/4xxB3rF9oWMGLxz+fnDv3lzYD1sAAE9CqrGPv9YivPFbmgc8KfP+3yBHC0NCw8Q2MXRQEzY6VSLVvCB/3Po3dqi4=';
COPY  atlas.dealer_dim_src FROM
's3://demo-data.full360.com/edw-atlas/dealer_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
COPY  atlas.dealer_dim_src FROM
's3://demo-data.full360.com/edw-atlas/dealer_dim.txt'
WITH DELIMITER '|' ENCLOSED BY '"' rejectmax 1;
select * from query_requests
where -- user_name = 'dbadmin'
 session_id = 'v_teva_node0003-7695:0xaafa9f';
select * from sessions;
select * from query_requests
where -- user_name = 'dbadmin'
 session_id = 'v_teva_node0003-7695:0xaafa9f';
select close_all_sessions('dbadmin');
select close_all_sessions('dbadmin');
select close_user_sessions('dbadmin');
select * from sessions where user_name = 'dbadmin';
select close_user_sessions('dbadmin');
select * from sessions;
ALTER DATABASE teva SET MaxClientSessions = 30;
select close_user_sessions('Databurst_Updt');
select close_user_sessions('Databurst_Updt');
select close_session('v_teva_node0001-8476:0xb58700');
select close_user_sessions('Databurst_Updt');
select close_session('v_teva_node0001-8476:0xb58700');
select close_user_sessions('Databurst_Updt');
select * from query_requests
where -- user_name = 'dbadmin'
 session_id = 'v_teva_node0001-8476:0xb58700';
select * from nodes;
SHOW IDLESESSIONTIMEOUT;
SHOW DATABASE DEFAULT DEFAULTIDLESESSIONTIMEOUT;
select * from users;
select * from sessions;
select close_user_sessions('Databurst_Updt');
select * from query_requests
where  user_name = 'Databurst_Updt';
select * from query_requests
where  user_name = 'Databurst_Updt'
and is_executing is true
order by request_duration;
select * from nodes;
select user_name, session_id, transaction_start, client_type, client_os_user_name from sessions;
select user_name, session_id, transaction_start, client_type, client_os_user_name from sessions
order by 3 desc;
select user_name, session_id, transaction_start, client_type, client_os_user_name from sessions
order by 3 asc;
select close_user_sessions('Databurst_Updt');
select * from sessions;
select * from query_requests
where  user_name = 'Databurst_Updt'
and is_executing is true
order by request_duration

select statement_id, user_name from sessions where session_id = 'v_teva_node0001-8476:0xb58700';
select statement_id, user_name from sessions where session_id = 'v_teva_node0001-8476:0xb58700';
select interrupt_statement('v_teva_node0001-8476:0xb58700','1');
select * from query_requests
where user_name = 'Databurst_Updt'
and transaction_id = '45035996280940305';
select * from execution_engine_profiles where transaction_id='45035996280940305' and statement_id='1';
select interrupt_statement('v_teva_node0001-8476:0xb58700','1');
select interrupt_statement('v_teva_node0001-8476:0xb58700','1');
select * from nodes;
select * from query_requests
where user_name = 'Databurst_Updt';
select * from query_requests
where transaction_id = '54043195534807971';
select * from sessions;
select close_session('v_teva_node0003-7695:0xaafa9f');
select close_session('v_teva_node0003-7695:0xaafa9f');
select * from sessions where user_name = 'CDW_Admin';
select * from query_requests
where transaction_id = '54043195534807971' 
and statement_id = '5';
select * from nodes;
COPY  survey.general_info_src FROM
's3://demo-data.full360.com/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.general_info_src FROM
's3://demo-data.full360.com/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
ALTER SESSION SET AWSAuth = 'ASIAXXG2IUARNSJBHQAK:Z0JPPgtJnjHGYlcJe5tBNbk0XBzhOZ0n3fWrRwg+';				
ALTER SESSION SET AWSSessionToken = 'IQoJb3JpZ2luX2VjEHMaCXVzLXdlc3QtMiJIMEYCIQCJU4HM839OKGistHVVHI+wIdtrhTBQztNLGqdh/kSVdAIhAIMe9Af0JLHVUewhRXyecaFyVXE93b9OD4ELnTxRGfpcKusBCEwQAhoMNTMwODg2MjA1NDc0Igz+D+3nPNemdDb89O0qyAE9IhVlA2kAPpHlHtTFOGxd84ihACayKcRazb0Z2aEQ9fwk8cyi8TE9jPVFg+aQPgnXKmI37C4leSkfMaVRXVM1xxmJCmSIWTe9HN0f6ka/11n80GKr/prKtCMHU3Yj/gTmi43bQEBZ1Lix09PsROoiQ159+Dq18jyIVjJQUPuRCMsmvccbjKwoz3BIuA3M5Jk4OPm3qA0REYgBWxxLqVFX26t+ISYvPFFaQ1BoqqPDb4ztXGgteTsxtqIEO230d5j4qkoMll+jOTCpxamNBjqXAa9cIb5OW/sza3088ejng9uRMiScXhmSsUswTaHkRKGQ4JbVIatKRIAgiHmcNbVup26WGxnlEKkmhB3vFGUWA+yixhnO8bc5hnz5DFyn/rFW9lJvqTY3FltsdU7OzDUVwqr9hU/TzDu2wquHrjykO+Z60CiugtMkGedckffUutnQ9Taz3fZe+JujTyzyW3w+AXIkvq5ZpK8=';
ALTER SESSION SET AWSAuth = 'ASIAXXG2IUARNSJBHQAK:Z0JPPgtJnjHGYlcJe5tBNbk0XBzhOZ0n3fWrRwg+';
ALTER SESSION SET AWSSessionToken = 'IQoJb3JpZ2luX2VjEHMaCXVzLXdlc3QtMiJIMEYCIQCJU4HM839OKGistHVVHI+wIdtrhTBQztNLGqdh/kSVdAIhAIMe9Af0JLHVUewhRXyecaFyVXE93b9OD4ELnTxRGfpcKusBCEwQAhoMNTMwODg2MjA1NDc0Igz+D+3nPNemdDb89O0qyAE9IhVlA2kAPpHlHtTFOGxd84ihACayKcRazb0Z2aEQ9fwk8cyi8TE9jPVFg+aQPgnXKmI37C4leSkfMaVRXVM1xxmJCmSIWTe9HN0f6ka/11n80GKr/prKtCMHU3Yj/gTmi43bQEBZ1Lix09PsROoiQ159+Dq18jyIVjJQUPuRCMsmvccbjKwoz3BIuA3M5Jk4OPm3qA0REYgBWxxLqVFX26t+ISYvPFFaQ1BoqqPDb4ztXGgteTsxtqIEO230d5j4qkoMll+jOTCpxamNBjqXAa9cIb5OW/sza3088ejng9uRMiScXhmSsUswTaHkRKGQ4JbVIatKRIAgiHmcNbVup26WGxnlEKkmhB3vFGUWA+yixhnO8bc5hnz5DFyn/rFW9lJvqTY3FltsdU7OzDUVwqr9hU/TzDu2wquHrjykO+Z60CiugtMkGedckffUutnQ9Taz3fZe+JujTyzyW3w+AXIkvq5ZpK8=';
COPY  survey.general_info_src FROM
's3://demo-data.full360.com/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.general_info_src FROM
's3://demo-data.full360.com/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
truncate table survey.general_info_src;
COPY  survey.general_info_src FROM
's3://demo-data.full360.com/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
truncate table survey.general_info_src;
COPY  survey.general_info_src FROM
's3://demo-data.full360.com/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.general_info_src FROM
's3://demo-data.full360.com/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.general_info_src FROM
's3://demo-data.full360.com/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
COPY  survey.general_info_src FROM
's3://demo-data.full360.com/survey-health/survey_general_info.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 1;
ALTER SESSION SET AWSSessionToken = 'IQoJb3JpZ2luX2VjEHMaCXVzLXdlc3QtMiJIMEYCIQCJU4HM839OKGistHVVHI+wIdtrhTBQztNLGqdh/kSVdAIhAIMe9Af0JLHVUewhRXyecaFyVXE93b9OD4ELnTxRGfpcKusBCEwQAhoMNTMwODg2MjA1NDc0Igz+D+3nPNemdDb89O0qyAE9IhVlA2kAPpHlHtTFOGxd84ihACayKcRazb0Z2aEQ9fwk8cyi8TE9jPVFg+aQPgnXKmI37C4leSkfMaVRXVM1xxmJCmSIWTe9HN0f6ka/11n80GKr/prKtCMHU3Yj/gTmi43bQEBZ1Lix09PsROoiQ159+Dq18jyIVjJQUPuRCMsmvccbjKwoz3BIuA3M5Jk4OPm3qA0REYgBWxxLqVFX26t+ISYvPFFaQ1BoqqPDb4ztXGgteTsxtqIEO230d5j4qkoMll+jOTCpxamNBjqXAa9cIb5OW/sza3088ejng9uRMiScXhmSsUswTaHkRKGQ4JbVIatKRIAgiHmcNbVup26WGxnlEKkmhB3vFGUWA+yixhnO8bc5hnz5DFyn/rFW9lJvqTY3FltsdU7OzDUVwqr9hU/TzDu2wquHrjykO+Z60CiugtMkGedckffUutnQ9Taz3fZe+JujTyzyW3w+AXIkvq5ZpK8='

select count(*) from survey.general_info_src;
ALTER SESSION SET AWSSessionToken = 'IQoJb3JpZ2luX2VjEHMaCXVzLXdlc3QtMiJIMEYCIQCJU4HM839OKGistHVVHI+wIdtrhTBQztNLGqdh/kSVdAIhAIMe9Af0JLHVUewhRXyecaFyVXE93b9OD4ELnTxRGfpcKusBCEwQAhoMNTMwODg2MjA1NDc0Igz+D+3nPNemdDb89O0qyAE9IhVlA2kAPpHlHtTFOGxd84ihACayKcRazb0Z2aEQ9fwk8cyi8TE9jPVFg+aQPgnXKmI37C4leSkfMaVRXVM1xxmJCmSIWTe9HN0f6ka/11n80GKr/prKtCMHU3Yj/gTmi43bQEBZ1Lix09PsROoiQ159+Dq18jyIVjJQUPuRCMsmvccbjKwoz3BIuA3M5Jk4OPm3qA0REYgBWxxLqVFX26t+ISYvPFFaQ1BoqqPDb4ztXGgteTsxtqIEO230d5j4qkoMll+jOTCpxamNBjqXAa9cIb5OW/sza3088ejng9uRMiScXhmSsUswTaHkRKGQ4JbVIatKRIAgiHmcNbVup26WGxnlEKkmhB3vFGUWA+yixhnO8bc5hnz5DFyn/rFW9lJvqTY3FltsdU7OzDUVwqr9hU/TzDu2wquHrjykO+Z60CiugtMkGedckffUutnQ9Taz3fZe+JujTyzyW3w+AXIkvq5ZpK8='

select count(*) from survey.general_info_src;
select count(*) from survey.general_info_src;
select * from nodes;
select * from nodes;
select * from nodes;
select * from nodes;
truncate table cops.event_flx;
copy cops.event_flx from local
'/Users/mbowen/devcode/DEMO/datasets/cops/short_cops.json'
 parser fjsonparser();
create schema migration;
create table if not exists migration.target_grants (
id    integer,
script varchar(500),
processed  boolean,
ts_run_date timestamp
);
copy migration.target_grants from local
'/Users/mbowen/devcode/PYDEV/ripper/out.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 0
REJECTED DATA AS TABLE migration.grants_rejects;
copy migration.target_grants_src from local
'/Users/mbowen/devcode/PYDEV/ripper/out.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 0
REJECTED DATA AS TABLE migration.grants_rejects;
create table if not exists migration.target_grants_src (
id    integer,
script varchar(500)
);
copy migration.target_grants_src from local '/Users/mbowen/devcode/PYDEV/ripper/out.csv' WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 0 REJECTED DATA AS TABLE migration.grants_rejects;


truncate table migration.target_grants_src;
truncate table migration.grants_rejects;
copy migration.target_grants_src from local
'/Users/mbowen/devcode/PYDEV/ripper/out.csv'
WITH DELIMITER ',' ENCLOSED BY '"' rejectmax 0
REJECTED DATA AS TABLE migration.grants_rejects;
select 
 tables.table_schema,
 tables.table_name,
 is_partitioned,
 row_count,
 partition_expression
from
(
	select 
		table_schema,
		table_name,
		partition_expression,
		table_definition,
		length(partition_expression)>0 is_partitioned  

	from 
		v_catalog.tables 
	where 
		length(table_definition) = 0 -- skip external tables
		and not is_system_table      -- not system table
		and not is_temp_table        -- not temp table
) tables 
natural join
( 
	select 
		distinct table_schema, table_name
	from 
		v_catalog.columns 
	group by 
		table_schema, 
		table_name

	minus

	select
		distinct table_schema, table_name
	from 
		v_catalog.columns 
	where
		data_type in ('time', 'timetz', 'interval')
		OR
		numeric_precision > 38
	group by 
		table_schema, 
		table_name


) col_types 
natural join
(
SELECT 
	table_schema,
	table_name,
        NVL(CASE WHEN NOT is_segmented THEN (row_count / node_cnt)::INT ELSE row_count END, 0) row_count
FROM (SELECT t.table_schema,
                       t.table_name,
                       ps.projection_name,
                       (SELECT MIN(is_segmented)
                          FROM projections p
                         WHERE p.projection_name = ps.projection_name
                           AND p.projection_schema = ps.anchor_table_schema) is_segmented,
                       node_cnt,
                       SUM(ps.row_count - NVL(dv.deleted_row_count, 0)) row_count
                  FROM v_catalog.tables t
                  LEFT JOIN projection_storage ps
                    ON t.table_id = ps.anchor_table_id
                  LEFT JOIN delete_vectors dv
                    ON dv.node_name = ps.node_name
                   AND dv.schema_name = ps.anchor_table_schema
                   AND dv.projection_name = ps.projection_name
                 CROSS JOIN (SELECT COUNT(1) node_cnt FROM nodes WHERE node_type = 'PERMANENT') n
                 GROUP BY 1, 2, 3, 4, 5
                 LIMIT 1 OVER(PARTITION BY t.table_schema, t.table_name ORDER BY 1)) foo
) row_count
WHERE row_count > 0

order by 4,1,2,3;
create table if not exists migration.source_schemas_vw as 
select 
 tables.table_schema,
 tables.table_name,
 is_partitioned,
 row_count,
 partition_expression
from
(
	select 
		table_schema,
		table_name,
		partition_expression,
		table_definition,
		length(partition_expression)>0 is_partitioned  

	from 
		v_catalog.tables 
	where 
		length(table_definition) = 0 -- skip external tables
		and not is_system_table      -- not system table
		and not is_temp_table        -- not temp table
) tables 
natural join
( 
	select 
		distinct table_schema, table_name
	from 
		v_catalog.columns 
	group by 
		table_schema, 
		table_name

	minus

	select
		distinct table_schema, table_name
	from 
		v_catalog.columns 
	where
		data_type in ('time', 'timetz', 'interval')
		OR
		numeric_precision > 38
	group by 
		table_schema, 
		table_name


) col_types 
natural join
(
SELECT 
	table_schema,
	table_name,
        NVL(CASE WHEN NOT is_segmented THEN (row_count / node_cnt)::INT ELSE row_count END, 0) row_count
FROM (SELECT t.table_schema,
                       t.table_name,
                       ps.projection_name,
                       (SELECT MIN(is_segmented)
                          FROM projections p
                         WHERE p.projection_name = ps.projection_name
                           AND p.projection_schema = ps.anchor_table_schema) is_segmented,
                       node_cnt,
                       SUM(ps.row_count - NVL(dv.deleted_row_count, 0)) row_count
                  FROM v_catalog.tables t
                  LEFT JOIN projection_storage ps
                    ON t.table_id = ps.anchor_table_id
                  LEFT JOIN delete_vectors dv
                    ON dv.node_name = ps.node_name
                   AND dv.schema_name = ps.anchor_table_schema
                   AND dv.projection_name = ps.projection_name
                 CROSS JOIN (SELECT COUNT(1) node_cnt FROM nodes WHERE node_type = 'PERMANENT') n
                 GROUP BY 1, 2, 3, 4, 5
                 LIMIT 1 OVER(PARTITION BY t.table_schema, t.table_name ORDER BY 1)) foo
) row_count
WHERE row_count > 0

order by 1,4,3;
create table if not exists migration.source_schemas as 
(select 
 tables.table_schema,
 tables.table_name,
 is_partitioned,
 row_count,
 partition_expression
from
(
	select 
		table_schema,
		table_name,
		partition_expression,
		table_definition,
		length(partition_expression)>0 is_partitioned  

	from 
		v_catalog.tables 
	where 
		length(table_definition) = 0 -- skip external tables
		and not is_system_table      -- not system table
		and not is_temp_table        -- not temp table
) tables 
natural join
( 
	select 
		distinct table_schema, table_name
	from 
		v_catalog.columns 
	group by 
		table_schema, 
		table_name

	minus

	select
		distinct table_schema, table_name
	from 
		v_catalog.columns 
	where
		data_type in ('time', 'timetz', 'interval')
		OR
		numeric_precision > 38
	group by 
		table_schema, 
		table_name


) col_types 
natural join
(
SELECT 
	table_schema,
	table_name,
        NVL(CASE WHEN NOT is_segmented THEN (row_count / node_cnt)::INT ELSE row_count END, 0) row_count
FROM (SELECT t.table_schema,
                       t.table_name,
                       ps.projection_name,
                       (SELECT MIN(is_segmented)
                          FROM projections p
                         WHERE p.projection_name = ps.projection_name
                           AND p.projection_schema = ps.anchor_table_schema) is_segmented,
                       node_cnt,
                       SUM(ps.row_count - NVL(dv.deleted_row_count, 0)) row_count
                  FROM v_catalog.tables t
                  LEFT JOIN projection_storage ps
                    ON t.table_id = ps.anchor_table_id
                  LEFT JOIN delete_vectors dv
                    ON dv.node_name = ps.node_name
                   AND dv.schema_name = ps.anchor_table_schema
                   AND dv.projection_name = ps.projection_name
                 CROSS JOIN (SELECT COUNT(1) node_cnt FROM nodes WHERE node_type = 'PERMANENT') n
                 GROUP BY 1, 2, 3, 4, 5
                 LIMIT 1 OVER(PARTITION BY t.table_schema, t.table_name ORDER BY 1)) foo
) row_count
WHERE row_count > 0

order by 1,4,3);